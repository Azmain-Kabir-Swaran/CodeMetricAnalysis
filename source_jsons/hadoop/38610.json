{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppSchedulingInfo.java",
  "functionName": "updateResourceRequests",
  "functionId": "updateResourceRequests___resourceRequests-List__ResourceRequest____recoverPreemptedRequestForAContainer-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
  "functionStartLine": 186,
  "functionEndLine": 201,
  "numCommitsSeen": 369,
  "timeTaken": 20071,
  "changeHistory": [
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "9ca54f4810de182195263bd594afb56dab564105",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "1831be8e737fd423a9f3d590767b944147e85641",
    "7558dbbb481eab055e794beb3603bbe5671a4b4c",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "ec06957941367930c855b5e05e6a84ba676fd46a",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523",
    "def374e666ed0c1d665aeb1b7307e09769448138",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "10732d515f62258309f98e4d7d23249f80b1847d",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "edcecedc1c39d54db0f86a1325b4db26c38d2d4d",
    "556386a07084b70a5d2ae0c2bd4445a348306db8",
    "3f32357c368f4efac33835d719641c961f93a0be",
    "9aae81c93421874b726c7b6ff970895c429e502d",
    "43589a8df70d4dbaf86609961e27cc4e23dda993",
    "981679e6d7650141fc8737c7e13b16d8b795b408",
    "0a6e275ee3360719290ad666629624450d4f0a6f",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
    "f27e484636f9903bb80afac9c9e51a04a7dbce76",
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ymultichange(Yparameterchange,Ybodychange)",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "9ca54f4810de182195263bd594afb56dab564105": "Ymultichange(Yreturntypechange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1831be8e737fd423a9f3d590767b944147e85641": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7558dbbb481eab055e794beb3603bbe5671a4b4c": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "ec06957941367930c855b5e05e6a84ba676fd46a": "Ybodychange",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ymultichange(Yparameterchange,Ybodychange)",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ymultichange(Yparameterchange,Ybodychange)",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ymultichange(Yparameterchange,Ybodychange)",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ymultichange(Yparameterchange,Ybodychange)",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ymultichange(Yparameterchange,Ybodychange)",
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523": "Ybodychange",
    "def374e666ed0c1d665aeb1b7307e09769448138": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "10732d515f62258309f98e4d7d23249f80b1847d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "edcecedc1c39d54db0f86a1325b4db26c38d2d4d": "Ybodychange",
    "556386a07084b70a5d2ae0c2bd4445a348306db8": "Ybodychange",
    "3f32357c368f4efac33835d719641c961f93a0be": "Ybodychange",
    "9aae81c93421874b726c7b6ff970895c429e502d": "Ybodychange",
    "43589a8df70d4dbaf86609961e27cc4e23dda993": "Ymultichange(Yparameterchange,Ybodychange)",
    "981679e6d7650141fc8737c7e13b16d8b795b408": "Ybodychange",
    "0a6e275ee3360719290ad666629624450d4f0a6f": "Ymultichange(Yparameterchange,Ybodychange)",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f27e484636f9903bb80afac9c9e51a04a7dbce76": "Ybodychange",
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba": "Ybodychange",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/18 3:12 PM",
          "commitNameOld": "a81144daa012e13590725f67f53e35ef84a6f1ec",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 25.43,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,16 @@\n-  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n+  public boolean updateResourceRequests(List\u003cResourceRequest\u003e resourceRequests,\n       boolean recoverPreemptedRequestForAContainer) {\n-    if (null \u003d\u003d requests || requests.isEmpty()) {\n-      return false;\n-    }\n-\n     // Flag to track if any incoming requests update \"ANY\" requests\n-    boolean offswitchResourcesUpdated \u003d false;\n+    boolean offswitchResourcesUpdated;\n \n+    writeLock.lock();\n     try {\n-      this.writeLock.lock();\n-\n-      // A map to group resource requests and dedup\n-      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n-          new HashMap\u003c\u003e();\n-\n-      // Group resource request by schedulerRequestKey and resourceName\n-      for (ResourceRequest request : requests) {\n-        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n-        if (!dedupRequests.containsKey(schedulerKey)) {\n-          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n-        }\n-        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n-      }\n-\n-      // Update AppPlacementAllocator by dedup requests.\n-      offswitchResourcesUpdated \u003d\n-          addRequestToAppPlacement(\n-              recoverPreemptedRequestForAContainer, dedupRequests);\n-\n-      return offswitchResourcesUpdated;\n+      // Update AppPlacementAllocator by requests\n+      offswitchResourcesUpdated \u003d internalAddResourceRequests(\n+          recoverPreemptedRequestForAContainer, resourceRequests);\n     } finally {\n-      this.writeLock.unlock();\n+      writeLock.unlock();\n     }\n+\n+    return offswitchResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e resourceRequests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean offswitchResourcesUpdated;\n\n    writeLock.lock();\n    try {\n      // Update AppPlacementAllocator by requests\n      offswitchResourcesUpdated \u003d internalAddResourceRequests(\n          recoverPreemptedRequestForAContainer, resourceRequests);\n    } finally {\n      writeLock.unlock();\n    }\n\n    return offswitchResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]",
            "newValue": "[resourceRequests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/18 3:12 PM",
          "commitNameOld": "a81144daa012e13590725f67f53e35ef84a6f1ec",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 25.43,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,16 @@\n-  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n+  public boolean updateResourceRequests(List\u003cResourceRequest\u003e resourceRequests,\n       boolean recoverPreemptedRequestForAContainer) {\n-    if (null \u003d\u003d requests || requests.isEmpty()) {\n-      return false;\n-    }\n-\n     // Flag to track if any incoming requests update \"ANY\" requests\n-    boolean offswitchResourcesUpdated \u003d false;\n+    boolean offswitchResourcesUpdated;\n \n+    writeLock.lock();\n     try {\n-      this.writeLock.lock();\n-\n-      // A map to group resource requests and dedup\n-      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n-          new HashMap\u003c\u003e();\n-\n-      // Group resource request by schedulerRequestKey and resourceName\n-      for (ResourceRequest request : requests) {\n-        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n-        if (!dedupRequests.containsKey(schedulerKey)) {\n-          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n-        }\n-        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n-      }\n-\n-      // Update AppPlacementAllocator by dedup requests.\n-      offswitchResourcesUpdated \u003d\n-          addRequestToAppPlacement(\n-              recoverPreemptedRequestForAContainer, dedupRequests);\n-\n-      return offswitchResourcesUpdated;\n+      // Update AppPlacementAllocator by requests\n+      offswitchResourcesUpdated \u003d internalAddResourceRequests(\n+          recoverPreemptedRequestForAContainer, resourceRequests);\n     } finally {\n-      this.writeLock.unlock();\n+      writeLock.unlock();\n     }\n+\n+    return offswitchResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e resourceRequests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean offswitchResourcesUpdated;\n\n    writeLock.lock();\n    try {\n      // Update AppPlacementAllocator by requests\n      offswitchResourcesUpdated \u003d internalAddResourceRequests(\n          recoverPreemptedRequestForAContainer, resourceRequests);\n    } finally {\n      writeLock.unlock();\n    }\n\n    return offswitchResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "08/09/17 9:24 AM",
      "commitNameOld": "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 62.19,
      "commitsBetweenForRepo": 599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     if (null \u003d\u003d requests || requests.isEmpty()) {\n       return false;\n     }\n \n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean offswitchResourcesUpdated \u003d false;\n \n     try {\n       this.writeLock.lock();\n \n       // A map to group resource requests and dedup\n       Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n           new HashMap\u003c\u003e();\n \n       // Group resource request by schedulerRequestKey and resourceName\n       for (ResourceRequest request : requests) {\n         SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n         if (!dedupRequests.containsKey(schedulerKey)) {\n           dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n         }\n         dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n       }\n \n-      // Update scheduling placement set\n+      // Update AppPlacementAllocator by dedup requests.\n       offswitchResourcesUpdated \u003d\n-          addToPlacementSets(\n+          addRequestToAppPlacement(\n               recoverPreemptedRequestForAContainer, dedupRequests);\n \n       return offswitchResourcesUpdated;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    if (null \u003d\u003d requests || requests.isEmpty()) {\n      return false;\n    }\n\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean offswitchResourcesUpdated \u003d false;\n\n    try {\n      this.writeLock.lock();\n\n      // A map to group resource requests and dedup\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n          new HashMap\u003c\u003e();\n\n      // Group resource request by schedulerRequestKey and resourceName\n      for (ResourceRequest request : requests) {\n        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n        if (!dedupRequests.containsKey(schedulerKey)) {\n          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n        }\n        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n      }\n\n      // Update AppPlacementAllocator by dedup requests.\n      offswitchResourcesUpdated \u003d\n          addRequestToAppPlacement(\n              recoverPreemptedRequestForAContainer, dedupRequests);\n\n      return offswitchResourcesUpdated;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/12/16 9:18 AM",
      "commitNameOld": "9ca54f4810de182195263bd594afb56dab564105",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,35 @@\n   public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     if (null \u003d\u003d requests || requests.isEmpty()) {\n       return false;\n     }\n \n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean offswitchResourcesUpdated \u003d false;\n \n     try {\n       this.writeLock.lock();\n \n       // A map to group resource requests and dedup\n       Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n           new HashMap\u003c\u003e();\n \n       // Group resource request by schedulerRequestKey and resourceName\n       for (ResourceRequest request : requests) {\n         SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n         if (!dedupRequests.containsKey(schedulerKey)) {\n           dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n         }\n         dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n       }\n \n       // Update scheduling placement set\n-      for (Map.Entry\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e entry : dedupRequests.entrySet()) {\n-        SchedulerRequestKey schedulerRequestKey \u003d entry.getKey();\n-\n-        if (!schedulerKeyToPlacementSets.containsKey(schedulerRequestKey)) {\n-          schedulerKeyToPlacementSets.put(schedulerRequestKey,\n-              new LocalitySchedulingPlacementSet\u003c\u003e(this));\n-        }\n-\n-        // Update placement set\n-        ResourceRequestUpdateResult pendingAmountChanges \u003d\n-            schedulerKeyToPlacementSets.get(schedulerRequestKey)\n-                .updateResourceRequests(\n-                    entry.getValue().values(),\n-                    recoverPreemptedRequestForAContainer);\n-\n-        if (null !\u003d pendingAmountChanges) {\n-          updatePendingResources(\n-              pendingAmountChanges.getLastAnyResourceRequest(),\n-              pendingAmountChanges.getNewResourceRequest(), schedulerRequestKey,\n-              queue.getMetrics());\n-          offswitchResourcesUpdated \u003d true;\n-        }\n-      }\n+      offswitchResourcesUpdated \u003d\n+          addToPlacementSets(\n+              recoverPreemptedRequestForAContainer, dedupRequests);\n \n       return offswitchResourcesUpdated;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    if (null \u003d\u003d requests || requests.isEmpty()) {\n      return false;\n    }\n\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean offswitchResourcesUpdated \u003d false;\n\n    try {\n      this.writeLock.lock();\n\n      // A map to group resource requests and dedup\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n          new HashMap\u003c\u003e();\n\n      // Group resource request by schedulerRequestKey and resourceName\n      for (ResourceRequest request : requests) {\n        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n        if (!dedupRequests.containsKey(schedulerKey)) {\n          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n        }\n        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n      }\n\n      // Update scheduling placement set\n      offswitchResourcesUpdated \u003d\n          addToPlacementSets(\n              recoverPreemptedRequestForAContainer, dedupRequests);\n\n      return offswitchResourcesUpdated;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "9ca54f4810de182195263bd594afb56dab564105": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5906. Update AppSchedulingInfo to use SchedulingPlacementSet. Contributed by Wangda Tan.\n",
      "commitDate": "28/12/16 9:18 AM",
      "commitName": "9ca54f4810de182195263bd594afb56dab564105",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5906. Update AppSchedulingInfo to use SchedulingPlacementSet. Contributed by Wangda Tan.\n",
          "commitDate": "28/12/16 9:18 AM",
          "commitName": "9ca54f4810de182195263bd594afb56dab564105",
          "commitAuthor": "Sunil G",
          "commitDateOld": "27/12/16 12:40 PM",
          "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.86,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,55 @@\n-      public ResourceRequestUpdateResult updateResourceRequests(\n-          List\u003cResourceRequest\u003e requests,\n-          boolean recoverPreemptedRequestForAContainer) {\n-        return null;\n-      }\n\\ No newline at end of file\n+  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n+    if (null \u003d\u003d requests || requests.isEmpty()) {\n+      return false;\n+    }\n+\n+    // Flag to track if any incoming requests update \"ANY\" requests\n+    boolean offswitchResourcesUpdated \u003d false;\n+\n+    try {\n+      this.writeLock.lock();\n+\n+      // A map to group resource requests and dedup\n+      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n+          new HashMap\u003c\u003e();\n+\n+      // Group resource request by schedulerRequestKey and resourceName\n+      for (ResourceRequest request : requests) {\n+        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n+        if (!dedupRequests.containsKey(schedulerKey)) {\n+          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n+        }\n+        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n+      }\n+\n+      // Update scheduling placement set\n+      for (Map.Entry\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e entry : dedupRequests.entrySet()) {\n+        SchedulerRequestKey schedulerRequestKey \u003d entry.getKey();\n+\n+        if (!schedulerKeyToPlacementSets.containsKey(schedulerRequestKey)) {\n+          schedulerKeyToPlacementSets.put(schedulerRequestKey,\n+              new LocalitySchedulingPlacementSet\u003c\u003e(this));\n+        }\n+\n+        // Update placement set\n+        ResourceRequestUpdateResult pendingAmountChanges \u003d\n+            schedulerKeyToPlacementSets.get(schedulerRequestKey)\n+                .updateResourceRequests(\n+                    entry.getValue().values(),\n+                    recoverPreemptedRequestForAContainer);\n+\n+        if (null !\u003d pendingAmountChanges) {\n+          updatePendingResources(\n+              pendingAmountChanges.getLastAnyResourceRequest(),\n+              pendingAmountChanges.getNewResourceRequest(), schedulerRequestKey,\n+              queue.getMetrics());\n+          offswitchResourcesUpdated \u003d true;\n+        }\n+      }\n+\n+      return offswitchResourcesUpdated;\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    if (null \u003d\u003d requests || requests.isEmpty()) {\n      return false;\n    }\n\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean offswitchResourcesUpdated \u003d false;\n\n    try {\n      this.writeLock.lock();\n\n      // A map to group resource requests and dedup\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n          new HashMap\u003c\u003e();\n\n      // Group resource request by schedulerRequestKey and resourceName\n      for (ResourceRequest request : requests) {\n        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n        if (!dedupRequests.containsKey(schedulerKey)) {\n          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n        }\n        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n      }\n\n      // Update scheduling placement set\n      for (Map.Entry\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e entry : dedupRequests.entrySet()) {\n        SchedulerRequestKey schedulerRequestKey \u003d entry.getKey();\n\n        if (!schedulerKeyToPlacementSets.containsKey(schedulerRequestKey)) {\n          schedulerKeyToPlacementSets.put(schedulerRequestKey,\n              new LocalitySchedulingPlacementSet\u003c\u003e(this));\n        }\n\n        // Update placement set\n        ResourceRequestUpdateResult pendingAmountChanges \u003d\n            schedulerKeyToPlacementSets.get(schedulerRequestKey)\n                .updateResourceRequests(\n                    entry.getValue().values(),\n                    recoverPreemptedRequestForAContainer);\n\n        if (null !\u003d pendingAmountChanges) {\n          updatePendingResources(\n              pendingAmountChanges.getLastAnyResourceRequest(),\n              pendingAmountChanges.getNewResourceRequest(), schedulerRequestKey,\n              queue.getMetrics());\n          offswitchResourcesUpdated \u003d true;\n        }\n      }\n\n      return offswitchResourcesUpdated;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "ResourceRequestUpdateResult",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5906. Update AppSchedulingInfo to use SchedulingPlacementSet. Contributed by Wangda Tan.\n",
          "commitDate": "28/12/16 9:18 AM",
          "commitName": "9ca54f4810de182195263bd594afb56dab564105",
          "commitAuthor": "Sunil G",
          "commitDateOld": "27/12/16 12:40 PM",
          "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.86,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,55 @@\n-      public ResourceRequestUpdateResult updateResourceRequests(\n-          List\u003cResourceRequest\u003e requests,\n-          boolean recoverPreemptedRequestForAContainer) {\n-        return null;\n-      }\n\\ No newline at end of file\n+  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n+    if (null \u003d\u003d requests || requests.isEmpty()) {\n+      return false;\n+    }\n+\n+    // Flag to track if any incoming requests update \"ANY\" requests\n+    boolean offswitchResourcesUpdated \u003d false;\n+\n+    try {\n+      this.writeLock.lock();\n+\n+      // A map to group resource requests and dedup\n+      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n+          new HashMap\u003c\u003e();\n+\n+      // Group resource request by schedulerRequestKey and resourceName\n+      for (ResourceRequest request : requests) {\n+        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n+        if (!dedupRequests.containsKey(schedulerKey)) {\n+          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n+        }\n+        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n+      }\n+\n+      // Update scheduling placement set\n+      for (Map.Entry\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e entry : dedupRequests.entrySet()) {\n+        SchedulerRequestKey schedulerRequestKey \u003d entry.getKey();\n+\n+        if (!schedulerKeyToPlacementSets.containsKey(schedulerRequestKey)) {\n+          schedulerKeyToPlacementSets.put(schedulerRequestKey,\n+              new LocalitySchedulingPlacementSet\u003c\u003e(this));\n+        }\n+\n+        // Update placement set\n+        ResourceRequestUpdateResult pendingAmountChanges \u003d\n+            schedulerKeyToPlacementSets.get(schedulerRequestKey)\n+                .updateResourceRequests(\n+                    entry.getValue().values(),\n+                    recoverPreemptedRequestForAContainer);\n+\n+        if (null !\u003d pendingAmountChanges) {\n+          updatePendingResources(\n+              pendingAmountChanges.getLastAnyResourceRequest(),\n+              pendingAmountChanges.getNewResourceRequest(), schedulerRequestKey,\n+              queue.getMetrics());\n+          offswitchResourcesUpdated \u003d true;\n+        }\n+      }\n+\n+      return offswitchResourcesUpdated;\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    if (null \u003d\u003d requests || requests.isEmpty()) {\n      return false;\n    }\n\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean offswitchResourcesUpdated \u003d false;\n\n    try {\n      this.writeLock.lock();\n\n      // A map to group resource requests and dedup\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e dedupRequests \u003d\n          new HashMap\u003c\u003e();\n\n      // Group resource request by schedulerRequestKey and resourceName\n      for (ResourceRequest request : requests) {\n        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n        if (!dedupRequests.containsKey(schedulerKey)) {\n          dedupRequests.put(schedulerKey, new HashMap\u003c\u003e());\n        }\n        dedupRequests.get(schedulerKey).put(request.getResourceName(), request);\n      }\n\n      // Update scheduling placement set\n      for (Map.Entry\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e entry : dedupRequests.entrySet()) {\n        SchedulerRequestKey schedulerRequestKey \u003d entry.getKey();\n\n        if (!schedulerKeyToPlacementSets.containsKey(schedulerRequestKey)) {\n          schedulerKeyToPlacementSets.put(schedulerRequestKey,\n              new LocalitySchedulingPlacementSet\u003c\u003e(this));\n        }\n\n        // Update placement set\n        ResourceRequestUpdateResult pendingAmountChanges \u003d\n            schedulerKeyToPlacementSets.get(schedulerRequestKey)\n                .updateResourceRequests(\n                    entry.getValue().values(),\n                    recoverPreemptedRequestForAContainer);\n\n        if (null !\u003d pendingAmountChanges) {\n          updatePendingResources(\n              pendingAmountChanges.getLastAnyResourceRequest(),\n              pendingAmountChanges.getNewResourceRequest(), schedulerRequestKey,\n              queue.getMetrics());\n          offswitchResourcesUpdated \u003d true;\n        }\n      }\n\n      return offswitchResourcesUpdated;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "27/09/16 11:54 AM",
          "commitNameOld": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 40.97,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,5 @@\n-  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n-      boolean recoverPreemptedRequestForAContainer) {\n-    // Flag to track if any incoming requests update \"ANY\" requests\n-    boolean anyResourcesUpdated \u003d false;\n-\n-    try {\n-      this.writeLock.lock();\n-      // Update resource requests\n-      for (ResourceRequest request : requests) {\n-        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n-        String resourceName \u003d request.getResourceName();\n-\n-        // Update node labels if required\n-        updateNodeLabels(request);\n-\n-        Map\u003cString, ResourceRequest\u003e asks \u003d\n-            this.resourceRequestMap.get(schedulerKey);\n-        if (asks \u003d\u003d null) {\n-          asks \u003d new ConcurrentHashMap\u003c\u003e();\n-          this.resourceRequestMap.put(schedulerKey, asks);\n-        }\n-\n-        // Increment number of containers if recovering preempted resources\n-        ResourceRequest lastRequest \u003d asks.get(resourceName);\n-        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n-          request.setNumContainers(lastRequest.getNumContainers() + 1);\n-        }\n-\n-        // Update asks\n-        asks.put(resourceName, request);\n-\n-        if (resourceName.equals(ResourceRequest.ANY)) {\n-          //update the applications requested labels set\n-          requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n-              ? RMNodeLabelsManager.NO_LABEL :\n-                  request.getNodeLabelExpression());\n-\n-          anyResourcesUpdated \u003d true;\n-\n-          // Update pendingResources\n-          updatePendingResources(lastRequest, request, schedulerKey,\n-              queue.getMetrics());\n-        }\n-      }\n-      return anyResourcesUpdated;\n-    } finally {\n-      this.writeLock.unlock();\n-    }\n-  }\n\\ No newline at end of file\n+      public ResourceRequestUpdateResult updateResourceRequests(\n+          List\u003cResourceRequest\u003e requests,\n+          boolean recoverPreemptedRequestForAContainer) {\n+        return null;\n+      }\n\\ No newline at end of file\n",
          "actualSource": "      public ResourceRequestUpdateResult updateResourceRequests(\n          List\u003cResourceRequest\u003e requests,\n          boolean recoverPreemptedRequestForAContainer) {\n        return null;\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "ResourceRequestUpdateResult"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "27/09/16 11:54 AM",
          "commitNameOld": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 40.97,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,5 @@\n-  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n-      boolean recoverPreemptedRequestForAContainer) {\n-    // Flag to track if any incoming requests update \"ANY\" requests\n-    boolean anyResourcesUpdated \u003d false;\n-\n-    try {\n-      this.writeLock.lock();\n-      // Update resource requests\n-      for (ResourceRequest request : requests) {\n-        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n-        String resourceName \u003d request.getResourceName();\n-\n-        // Update node labels if required\n-        updateNodeLabels(request);\n-\n-        Map\u003cString, ResourceRequest\u003e asks \u003d\n-            this.resourceRequestMap.get(schedulerKey);\n-        if (asks \u003d\u003d null) {\n-          asks \u003d new ConcurrentHashMap\u003c\u003e();\n-          this.resourceRequestMap.put(schedulerKey, asks);\n-        }\n-\n-        // Increment number of containers if recovering preempted resources\n-        ResourceRequest lastRequest \u003d asks.get(resourceName);\n-        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n-          request.setNumContainers(lastRequest.getNumContainers() + 1);\n-        }\n-\n-        // Update asks\n-        asks.put(resourceName, request);\n-\n-        if (resourceName.equals(ResourceRequest.ANY)) {\n-          //update the applications requested labels set\n-          requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n-              ? RMNodeLabelsManager.NO_LABEL :\n-                  request.getNodeLabelExpression());\n-\n-          anyResourcesUpdated \u003d true;\n-\n-          // Update pendingResources\n-          updatePendingResources(lastRequest, request, schedulerKey,\n-              queue.getMetrics());\n-        }\n-      }\n-      return anyResourcesUpdated;\n-    } finally {\n-      this.writeLock.unlock();\n-    }\n-  }\n\\ No newline at end of file\n+      public ResourceRequestUpdateResult updateResourceRequests(\n+          List\u003cResourceRequest\u003e requests,\n+          boolean recoverPreemptedRequestForAContainer) {\n+        return null;\n+      }\n\\ No newline at end of file\n",
          "actualSource": "      public ResourceRequestUpdateResult updateResourceRequests(\n          List\u003cResourceRequest\u003e requests,\n          boolean recoverPreemptedRequestForAContainer) {\n        return null;\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "1831be8e737fd423a9f3d590767b944147e85641": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
      "commitDate": "27/09/16 11:54 AM",
      "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
          "commitDate": "27/09/16 11:54 AM",
          "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/09/16 1:31 PM",
          "commitNameOld": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,49 @@\n-  public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n+  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n-    // Update resource requests\n-    for (ResourceRequest request : requests) {\n-      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n-      String resourceName \u003d request.getResourceName();\n+    try {\n+      this.writeLock.lock();\n+      // Update resource requests\n+      for (ResourceRequest request : requests) {\n+        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n+        String resourceName \u003d request.getResourceName();\n \n-      // Update node labels if required\n-      updateNodeLabels(request);\n+        // Update node labels if required\n+        updateNodeLabels(request);\n \n-      Map\u003cString, ResourceRequest\u003e asks \u003d\n-          this.resourceRequestMap.get(schedulerKey);\n-      if (asks \u003d\u003d null) {\n-        asks \u003d new ConcurrentHashMap\u003c\u003e();\n-        this.resourceRequestMap.put(schedulerKey, asks);\n+        Map\u003cString, ResourceRequest\u003e asks \u003d\n+            this.resourceRequestMap.get(schedulerKey);\n+        if (asks \u003d\u003d null) {\n+          asks \u003d new ConcurrentHashMap\u003c\u003e();\n+          this.resourceRequestMap.put(schedulerKey, asks);\n+        }\n+\n+        // Increment number of containers if recovering preempted resources\n+        ResourceRequest lastRequest \u003d asks.get(resourceName);\n+        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+          request.setNumContainers(lastRequest.getNumContainers() + 1);\n+        }\n+\n+        // Update asks\n+        asks.put(resourceName, request);\n+\n+        if (resourceName.equals(ResourceRequest.ANY)) {\n+          //update the applications requested labels set\n+          requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n+              ? RMNodeLabelsManager.NO_LABEL :\n+                  request.getNodeLabelExpression());\n+\n+          anyResourcesUpdated \u003d true;\n+\n+          // Update pendingResources\n+          updatePendingResources(lastRequest, request, schedulerKey,\n+              queue.getMetrics());\n+        }\n       }\n-\n-      // Increment number of containers if recovering preempted resources\n-      ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n-        request.setNumContainers(lastRequest.getNumContainers() + 1);\n-      }\n-\n-      // Update asks\n-      asks.put(resourceName, request);\n-\n-      if (resourceName.equals(ResourceRequest.ANY)) {\n-        //update the applications requested labels set\n-        requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n-            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n-\n-        anyResourcesUpdated \u003d true;\n-\n-        // Update pendingResources\n-        updatePendingResources(lastRequest, request, schedulerKey,\n-            queue.getMetrics());\n-      }\n+      return anyResourcesUpdated;\n+    } finally {\n+      this.writeLock.unlock();\n     }\n-    return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    try {\n      this.writeLock.lock();\n      // Update resource requests\n      for (ResourceRequest request : requests) {\n        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n        String resourceName \u003d request.getResourceName();\n\n        // Update node labels if required\n        updateNodeLabels(request);\n\n        Map\u003cString, ResourceRequest\u003e asks \u003d\n            this.resourceRequestMap.get(schedulerKey);\n        if (asks \u003d\u003d null) {\n          asks \u003d new ConcurrentHashMap\u003c\u003e();\n          this.resourceRequestMap.put(schedulerKey, asks);\n        }\n\n        // Increment number of containers if recovering preempted resources\n        ResourceRequest lastRequest \u003d asks.get(resourceName);\n        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n          request.setNumContainers(lastRequest.getNumContainers() + 1);\n        }\n\n        // Update asks\n        asks.put(resourceName, request);\n\n        if (resourceName.equals(ResourceRequest.ANY)) {\n          //update the applications requested labels set\n          requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n              ? RMNodeLabelsManager.NO_LABEL :\n                  request.getNodeLabelExpression());\n\n          anyResourcesUpdated \u003d true;\n\n          // Update pendingResources\n          updatePendingResources(lastRequest, request, schedulerKey,\n              queue.getMetrics());\n        }\n      }\n      return anyResourcesUpdated;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
          "commitDate": "27/09/16 11:54 AM",
          "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/09/16 1:31 PM",
          "commitNameOld": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,49 @@\n-  public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n+  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n-    // Update resource requests\n-    for (ResourceRequest request : requests) {\n-      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n-      String resourceName \u003d request.getResourceName();\n+    try {\n+      this.writeLock.lock();\n+      // Update resource requests\n+      for (ResourceRequest request : requests) {\n+        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n+        String resourceName \u003d request.getResourceName();\n \n-      // Update node labels if required\n-      updateNodeLabels(request);\n+        // Update node labels if required\n+        updateNodeLabels(request);\n \n-      Map\u003cString, ResourceRequest\u003e asks \u003d\n-          this.resourceRequestMap.get(schedulerKey);\n-      if (asks \u003d\u003d null) {\n-        asks \u003d new ConcurrentHashMap\u003c\u003e();\n-        this.resourceRequestMap.put(schedulerKey, asks);\n+        Map\u003cString, ResourceRequest\u003e asks \u003d\n+            this.resourceRequestMap.get(schedulerKey);\n+        if (asks \u003d\u003d null) {\n+          asks \u003d new ConcurrentHashMap\u003c\u003e();\n+          this.resourceRequestMap.put(schedulerKey, asks);\n+        }\n+\n+        // Increment number of containers if recovering preempted resources\n+        ResourceRequest lastRequest \u003d asks.get(resourceName);\n+        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+          request.setNumContainers(lastRequest.getNumContainers() + 1);\n+        }\n+\n+        // Update asks\n+        asks.put(resourceName, request);\n+\n+        if (resourceName.equals(ResourceRequest.ANY)) {\n+          //update the applications requested labels set\n+          requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n+              ? RMNodeLabelsManager.NO_LABEL :\n+                  request.getNodeLabelExpression());\n+\n+          anyResourcesUpdated \u003d true;\n+\n+          // Update pendingResources\n+          updatePendingResources(lastRequest, request, schedulerKey,\n+              queue.getMetrics());\n+        }\n       }\n-\n-      // Increment number of containers if recovering preempted resources\n-      ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n-        request.setNumContainers(lastRequest.getNumContainers() + 1);\n-      }\n-\n-      // Update asks\n-      asks.put(resourceName, request);\n-\n-      if (resourceName.equals(ResourceRequest.ANY)) {\n-        //update the applications requested labels set\n-        requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n-            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n-\n-        anyResourcesUpdated \u003d true;\n-\n-        // Update pendingResources\n-        updatePendingResources(lastRequest, request, schedulerKey,\n-            queue.getMetrics());\n-      }\n+      return anyResourcesUpdated;\n+    } finally {\n+      this.writeLock.unlock();\n     }\n-    return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean updateResourceRequests(List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    try {\n      this.writeLock.lock();\n      // Update resource requests\n      for (ResourceRequest request : requests) {\n        SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n        String resourceName \u003d request.getResourceName();\n\n        // Update node labels if required\n        updateNodeLabels(request);\n\n        Map\u003cString, ResourceRequest\u003e asks \u003d\n            this.resourceRequestMap.get(schedulerKey);\n        if (asks \u003d\u003d null) {\n          asks \u003d new ConcurrentHashMap\u003c\u003e();\n          this.resourceRequestMap.put(schedulerKey, asks);\n        }\n\n        // Increment number of containers if recovering preempted resources\n        ResourceRequest lastRequest \u003d asks.get(resourceName);\n        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n          request.setNumContainers(lastRequest.getNumContainers() + 1);\n        }\n\n        // Update asks\n        asks.put(resourceName, request);\n\n        if (resourceName.equals(ResourceRequest.ANY)) {\n          //update the applications requested labels set\n          requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n              ? RMNodeLabelsManager.NO_LABEL :\n                  request.getNodeLabelExpression());\n\n          anyResourcesUpdated \u003d true;\n\n          // Update pendingResources\n          updatePendingResources(lastRequest, request, schedulerKey,\n              queue.getMetrics());\n        }\n      }\n      return anyResourcesUpdated;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "7558dbbb481eab055e794beb3603bbe5671a4b4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5540. Scheduler spends too much time looking at empty priorities. Contributed by Jason Lowe\n",
      "commitDate": "19/09/16 1:31 PM",
      "commitName": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "31/07/16 11:48 AM",
      "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 50.07,
      "commitsBetweenForRepo": 315,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,44 @@\n   public synchronized boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d\n           this.resourceRequestMap.get(schedulerKey);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(schedulerKey, asks);\n-        this.schedulerKeys.add(schedulerKey);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n       if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         //update the applications requested labels set\n         requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n             ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n \n         anyResourcesUpdated \u003d true;\n \n-        // Activate application. Metrics activation is done here.\n-        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n-        if (request.getNumContainers() \u003e 0) {\n-          activeUsersManager.activateApplication(user, applicationId);\n-        }\n-\n         // Update pendingResources\n-        updatePendingResources(lastRequest, request, queue.getMetrics());\n+        updatePendingResources(lastRequest, request, schedulerKey,\n+            queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d\n          this.resourceRequestMap.get(schedulerKey);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(schedulerKey, asks);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        //update the applications requested labels set\n        requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n\n        anyResourcesUpdated \u003d true;\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, schedulerKey,\n            queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 48.99,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public synchronized boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n-      Priority priority \u003d request.getPriority();\n+      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n-      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n+      Map\u003cString, ResourceRequest\u003e asks \u003d\n+          this.resourceRequestMap.get(schedulerKey);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n-        this.resourceRequestMap.put(priority, asks);\n-        this.priorities.add(priority);\n+        this.resourceRequestMap.put(schedulerKey, asks);\n+        this.schedulerKeys.add(schedulerKey);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n       if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         //update the applications requested labels set\n         requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n             ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n \n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.create(request);\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d\n          this.resourceRequestMap.get(schedulerKey);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(schedulerKey, asks);\n        this.schedulerKeys.add(schedulerKey);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        //update the applications requested labels set\n        requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "ec06957941367930c855b5e05e6a84ba676fd46a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3215. Respect labels in CapacityScheduler when computing headroom. (Naganarasimha G R via wangda)\n",
      "commitDate": "08/04/16 3:33 PM",
      "commitName": "ec06957941367930c855b5e05e6a84ba676fd46a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/01/16 2:51 PM",
      "commitNameOld": "7f46636495e23693d588b0915f464fa7afd9102e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 70.99,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,49 @@\n   public synchronized boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n       if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n+        //update the applications requested labels set\n+        requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n+            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n+\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        //update the applications requested labels set\n        requestedPartitions.add(request.getNodeLabelExpression() \u003d\u003d null\n            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());\n\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "18/01/16 5:30 PM",
          "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 5:27 PM",
          "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n+      List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequest-boolean]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "18/01/16 5:30 PM",
          "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 5:27 PM",
          "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n+      List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
          "commitDate": "18/01/16 5:27 PM",
          "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 1:06 AM",
          "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n-      boolean recoverPreemptedRequestForAContainer) {\n+      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequest-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
          "commitDate": "18/01/16 5:27 PM",
          "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 1:06 AM",
          "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n-      boolean recoverPreemptedRequestForAContainer) {\n+      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
          "commitDate": "18/01/16 1:06 AM",
          "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 12:50 AM",
          "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n+      List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequest-boolean]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
          "commitDate": "18/01/16 1:06 AM",
          "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 12:50 AM",
          "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n+      List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
          "commitDate": "18/01/16 12:50 AM",
          "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 7:04 PM",
          "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n-      boolean recoverPreemptedRequestForAContainer) {\n+      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequest-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
          "commitDate": "18/01/16 12:50 AM",
          "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 7:04 PM",
          "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n-      boolean recoverPreemptedRequestForAContainer) {\n+      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "17/01/16 7:04 PM",
          "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 6:57 PM",
          "commitNameOld": "9523648d57ebc71cf5c57f3f8c52c4a63265b61c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n+      List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequest-boolean]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequestForAContainer-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "17/01/16 7:04 PM",
          "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 6:57 PM",
          "commitNameOld": "9523648d57ebc71cf5c57f3f8c52c4a63265b61c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public synchronized boolean updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n+      List\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n     // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n \n       // Update node labels if required\n       updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n \n       // Increment number of containers if recovering preempted resources\n       ResourceRequest lastRequest \u003d asks.get(resourceName);\n-      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       // Update asks\n       asks.put(resourceName, request);\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         anyResourcesUpdated \u003d true;\n \n         // Activate application. Metrics activation is done here.\n         // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n \n         // Update pendingResources\n         updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4524. Cleanup AppSchedulingInfo. (Karthik Kambatla via wangda)\n\n(cherry picked from commit 05fa852d7567b7590d6b53bbf925f8f424736514)\n",
      "commitDate": "30/12/15 3:39 PM",
      "commitName": "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/11/15 11:09 AM",
      "commitNameOld": "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 48.19,
      "commitsBetweenForRepo": 287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,44 @@\n-  synchronized public boolean updateResourceRequests(\n+  public synchronized boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n-    QueueMetrics metrics \u003d queue.getMetrics();\n-    \n+    // Flag to track if any incoming requests update \"ANY\" requests\n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n-      boolean updatePendingResources \u003d false;\n-      ResourceRequest lastRequest \u003d null;\n \n-      if (resourceName.equals(ResourceRequest.ANY)) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n-              + request);\n-        }\n-        updatePendingResources \u003d true;\n-        anyResourcesUpdated \u003d true;\n-        \n-        // Premature optimization?\n-        // Assumes that we won\u0027t see more than one priority request updated\n-        // in one call, reasonable assumption... however, it\u0027s totally safe\n-        // to activate same application more than once.\n-        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n-        // which is needed during deactivate.\n-        if (request.getNumContainers() \u003e 0) {\n-          activeUsersManager.activateApplication(user, applicationId);\n-        }\n-        ResourceRequest previousAnyRequest \u003d\n-            getResourceRequest(priority, resourceName);\n-\n-        // When there is change in ANY request label expression, we should\n-        // update label for all resource requests already added of same\n-        // priority as ANY resource request.\n-        if ((null \u003d\u003d previousAnyRequest)\n-            || isRequestLabelChanged(previousAnyRequest, request)) {\n-          Map\u003cString, ResourceRequest\u003e resourceRequest \u003d\n-              getResourceRequests(priority);\n-          if (resourceRequest !\u003d null) {\n-            for (ResourceRequest r : resourceRequest.values()) {\n-              if (!r.getResourceName().equals(ResourceRequest.ANY)) {\n-                r.setNodeLabelExpression(request.getNodeLabelExpression());\n-              }\n-            }\n-          }\n-        }\n-      } else {\n-        ResourceRequest anyRequest \u003d\n-            getResourceRequest(priority, ResourceRequest.ANY);\n-        if (anyRequest !\u003d null) {\n-          request.setNodeLabelExpression(anyRequest.getNodeLabelExpression());\n-        }\n-      }\n+      // Update node labels if required\n+      updateNodeLabels(request);\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n-\n       if (asks \u003d\u003d null) {\n-        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n+        asks \u003d new ConcurrentHashMap\u003c\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n-      lastRequest \u003d asks.get(resourceName);\n \n+      // Increment number of containers if recovering preempted resources\n+      ResourceRequest lastRequest \u003d asks.get(resourceName);\n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n-        // Increment the number of containers to 1, as it is recovering a\n-        // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n+      // Update asks\n       asks.put(resourceName, request);\n-      if (updatePendingResources) {\n-        \n-        // Similarly, deactivate application?\n-        if (request.getNumContainers() \u003c\u003d 0) {\n-          LOG.info(\"checking for deactivate of application :\"\n-              + this.applicationId);\n-          checkForDeactivation();\n+\n+      if (resourceName.equals(ResourceRequest.ANY)) {\n+        anyResourcesUpdated \u003d true;\n+\n+        // Activate application. Metrics activation is done here.\n+        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n+        if (request.getNumContainers() \u003e 0) {\n+          activeUsersManager.activateApplication(user, applicationId);\n         }\n-        \n-        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n-            .getNumContainers() : 0;\n-        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n-            .getCapability() : Resources.none();\n-        metrics.incrPendingResources(user, request.getNumContainers(),\n-            request.getCapability());\n-        metrics.decrPendingResources(user, lastRequestContainers,\n-            lastRequestCapability);\n-        \n-        // update queue:\n-        Resource increasedResource \u003d\n-            Resources.multiply(request.getCapability(),\n-                request.getNumContainers());\n-        queue.incPendingResource(request.getNodeLabelExpression(),\n-            increasedResource);\n-        appResourceUsage.incPending(request.getNodeLabelExpression(),\n-            increasedResource);\n-        if (lastRequest !\u003d null) {\n-          Resource decreasedResource \u003d\n-              Resources.multiply(lastRequestCapability, lastRequestContainers);\n-          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n-              decreasedResource);\n-          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n-              decreasedResource);\n-        }\n+\n+        // Update pendingResources\n+        updatePendingResources(lastRequest, request, queue.getMetrics());\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    // Flag to track if any incoming requests update \"ANY\" requests\n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n\n      // Update node labels if required\n      updateNodeLabels(request);\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003c\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n\n      // Increment number of containers if recovering preempted resources\n      ResourceRequest lastRequest \u003d asks.get(resourceName);\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      // Update asks\n      asks.put(resourceName, request);\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        anyResourcesUpdated \u003d true;\n\n        // Activate application. Metrics activation is done here.\n        // TODO: Shouldn\u0027t we activate even if numContainers \u003d 0?\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n\n        // Update pendingResources\n        updatePendingResources(lastRequest, request, queue.getMetrics());\n      }\n    }\n    return anyResourcesUpdated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "def374e666ed0c1d665aeb1b7307e09769448138": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4140. RM container allocation delayed incase of app submitted to Nodelabel partition. (Bibin A Chundatt via wangda)\n",
      "commitDate": "09/10/15 4:38 PM",
      "commitName": "def374e666ed0c1d665aeb1b7307e09769448138",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 16.13,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,110 @@\n   synchronized public boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         anyResourcesUpdated \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n+        ResourceRequest previousAnyRequest \u003d\n+            getResourceRequest(priority, resourceName);\n+\n+        // When there is change in ANY request label expression, we should\n+        // update label for all resource requests already added of same\n+        // priority as ANY resource request.\n+        if ((null \u003d\u003d previousAnyRequest)\n+            || isRequestLabelChanged(previousAnyRequest, request)) {\n+          Map\u003cString, ResourceRequest\u003e resourceRequest \u003d\n+              getResourceRequests(priority);\n+          if (resourceRequest !\u003d null) {\n+            for (ResourceRequest r : resourceRequest.values()) {\n+              if (!r.getResourceName().equals(ResourceRequest.ANY)) {\n+                r.setNodeLabelExpression(request.getNodeLabelExpression());\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        ResourceRequest anyRequest \u003d\n+            getResourceRequest(priority, ResourceRequest.ANY);\n+        if (anyRequest !\u003d null) {\n+          request.setNodeLabelExpression(anyRequest.getNodeLabelExpression());\n+        }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n         this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n         \n         // update queue:\n-        Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n-            request.getNumContainers());\n-        queue.incPendingResource(\n-            request.getNodeLabelExpression(),\n+        Resource increasedResource \u003d\n+            Resources.multiply(request.getCapability(),\n+                request.getNumContainers());\n+        queue.incPendingResource(request.getNodeLabelExpression(),\n             increasedResource);\n-        appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n+        appResourceUsage.incPending(request.getNodeLabelExpression(),\n+            increasedResource);\n         if (lastRequest !\u003d null) {\n           Resource decreasedResource \u003d\n               Resources.multiply(lastRequestCapability, lastRequestContainers);\n           queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n           appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n         }\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        anyResourcesUpdated \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n        ResourceRequest previousAnyRequest \u003d\n            getResourceRequest(priority, resourceName);\n\n        // When there is change in ANY request label expression, we should\n        // update label for all resource requests already added of same\n        // priority as ANY resource request.\n        if ((null \u003d\u003d previousAnyRequest)\n            || isRequestLabelChanged(previousAnyRequest, request)) {\n          Map\u003cString, ResourceRequest\u003e resourceRequest \u003d\n              getResourceRequests(priority);\n          if (resourceRequest !\u003d null) {\n            for (ResourceRequest r : resourceRequest.values()) {\n              if (!r.getResourceName().equals(ResourceRequest.ANY)) {\n                r.setNodeLabelExpression(request.getNodeLabelExpression());\n              }\n            }\n          }\n        }\n      } else {\n        ResourceRequest anyRequest \u003d\n            getResourceRequest(priority, ResourceRequest.ANY);\n        if (anyRequest !\u003d null) {\n          request.setNodeLabelExpression(anyRequest.getNodeLabelExpression());\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n        \n        // update queue:\n        Resource increasedResource \u003d\n            Resources.multiply(request.getCapability(),\n                request.getNumContainers());\n        queue.incPendingResource(request.getNodeLabelExpression(),\n            increasedResource);\n        appResourceUsage.incPending(request.getNodeLabelExpression(),\n            increasedResource);\n        if (lastRequest !\u003d null) {\n          Resource decreasedResource \u003d\n              Resources.multiply(lastRequestCapability, lastRequestContainers);\n          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n        }\n      }\n    }\n    return anyResourcesUpdated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.85,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   synchronized public boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     boolean anyResourcesUpdated \u003d false;\n \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         anyResourcesUpdated \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n-      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n+      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n-        this.requests.put(priority, asks);\n+        this.resourceRequestMap.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n         \n         // update queue:\n         Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n             request.getNumContainers());\n         queue.incPendingResource(\n             request.getNodeLabelExpression(),\n             increasedResource);\n         appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n         if (lastRequest !\u003d null) {\n           Resource decreasedResource \u003d\n               Resources.multiply(lastRequestCapability, lastRequestContainers);\n           queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n           appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n         }\n       }\n     }\n     return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        anyResourcesUpdated \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.resourceRequestMap.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.resourceRequestMap.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n        \n        // update queue:\n        Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers());\n        queue.incPendingResource(\n            request.getNodeLabelExpression(),\n            increasedResource);\n        appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n        if (lastRequest !\u003d null) {\n          Resource decreasedResource \u003d\n              Resources.multiply(lastRequestCapability, lastRequestContainers);\n          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n        }\n      }\n    }\n    return anyResourcesUpdated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "10732d515f62258309f98e4d7d23249f80b1847d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3632. Ordering policy should be allowed to reorder an application when demand changes. Contributed by Craig Welch\n",
      "commitDate": "26/05/15 12:00 PM",
      "commitName": "10732d515f62258309f98e4d7d23249f80b1847d",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3632. Ordering policy should be allowed to reorder an application when demand changes. Contributed by Craig Welch\n",
          "commitDate": "26/05/15 12:00 PM",
          "commitName": "10732d515f62258309f98e4d7d23249f80b1847d",
          "commitAuthor": "Jian He",
          "commitDateOld": "14/04/15 11:45 AM",
          "commitNameOld": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 42.01,
          "commitsBetweenForRepo": 421,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,85 @@\n-  synchronized public void updateResourceRequests(\n+  synchronized public boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n+    boolean anyResourcesUpdated \u003d false;\n+\n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n+        anyResourcesUpdated \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n         \n         // update queue:\n         Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n             request.getNumContainers());\n         queue.incPendingResource(\n             request.getNodeLabelExpression(),\n             increasedResource);\n         appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n         if (lastRequest !\u003d null) {\n           Resource decreasedResource \u003d\n               Resources.multiply(lastRequestCapability, lastRequestContainers);\n           queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n           appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n         }\n       }\n     }\n+    return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        anyResourcesUpdated \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n        \n        // update queue:\n        Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers());\n        queue.incPendingResource(\n            request.getNodeLabelExpression(),\n            increasedResource);\n        appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n        if (lastRequest !\u003d null) {\n          Resource decreasedResource \u003d\n              Resources.multiply(lastRequestCapability, lastRequestContainers);\n          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n        }\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3632. Ordering policy should be allowed to reorder an application when demand changes. Contributed by Craig Welch\n",
          "commitDate": "26/05/15 12:00 PM",
          "commitName": "10732d515f62258309f98e4d7d23249f80b1847d",
          "commitAuthor": "Jian He",
          "commitDateOld": "14/04/15 11:45 AM",
          "commitNameOld": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 42.01,
          "commitsBetweenForRepo": 421,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,85 @@\n-  synchronized public void updateResourceRequests(\n+  synchronized public boolean updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n+    boolean anyResourcesUpdated \u003d false;\n+\n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n+        anyResourcesUpdated \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n         \n         // update queue:\n         Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n             request.getNumContainers());\n         queue.incPendingResource(\n             request.getNodeLabelExpression(),\n             increasedResource);\n         appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n         if (lastRequest !\u003d null) {\n           Resource decreasedResource \u003d\n               Resources.multiply(lastRequestCapability, lastRequestContainers);\n           queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n           appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n               decreasedResource);\n         }\n       }\n     }\n+    return anyResourcesUpdated;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public boolean updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    boolean anyResourcesUpdated \u003d false;\n\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        anyResourcesUpdated \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n        \n        // update queue:\n        Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers());\n        queue.incPendingResource(\n            request.getNodeLabelExpression(),\n            increasedResource);\n        appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n        if (lastRequest !\u003d null) {\n          Resource decreasedResource \u003d\n              Resources.multiply(lastRequestCapability, lastRequestContainers);\n          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n        }\n      }\n    }\n    return anyResourcesUpdated;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/04/15 4:19 AM",
      "commitNameOld": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 13.31,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,81 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n         \n         // update queue:\n+        Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n+            request.getNumContainers());\n         queue.incPendingResource(\n             request.getNodeLabelExpression(),\n-            Resources.multiply(request.getCapability(),\n-                request.getNumContainers()));\n+            increasedResource);\n+        appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n         if (lastRequest !\u003d null) {\n+          Resource decreasedResource \u003d\n+              Resources.multiply(lastRequestCapability, lastRequestContainers);\n           queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n-              Resources.multiply(lastRequestCapability, lastRequestContainers));\n+              decreasedResource);\n+          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n+              decreasedResource);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n        \n        // update queue:\n        Resource increasedResource \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers());\n        queue.incPendingResource(\n            request.getNodeLabelExpression(),\n            increasedResource);\n        appResourceUsage.incPending(request.getNodeLabelExpression(), increasedResource);\n        if (lastRequest !\u003d null) {\n          Resource decreasedResource \u003d\n              Resources.multiply(lastRequestCapability, lastRequestContainers);\n          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n          appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n              decreasedResource);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/03/15 10:42 AM",
      "commitNameOld": "6bc7710ec7f2592c4c87dd940fbe5827ef81fe72",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,75 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n+        \n+        // update queue:\n+        queue.incPendingResource(\n+            request.getNodeLabelExpression(),\n+            Resources.multiply(request.getCapability(),\n+                request.getNumContainers()));\n+        if (lastRequest !\u003d null) {\n+          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n+              Resources.multiply(lastRequestCapability, lastRequestContainers));\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n        \n        // update queue:\n        queue.incPendingResource(\n            request.getNodeLabelExpression(),\n            Resources.multiply(request.getCapability(),\n                request.getNumContainers()));\n        if (lastRequest !\u003d null) {\n          queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n              Resources.multiply(lastRequestCapability, lastRequestContainers));\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "edcecedc1c39d54db0f86a1325b4db26c38d2d4d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3262. Surface application outstanding resource requests table in RM web UI. (Jian He via wangda)\n",
      "commitDate": "27/02/15 4:13 PM",
      "commitName": "edcecedc1c39d54db0f86a1325b4db26c38d2d4d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/02/15 8:53 AM",
      "commitNameOld": "556386a07084b70a5d2ae0c2bd4445a348306db8",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 11.31,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n-        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n+        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate of application :\"\n               + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new ConcurrentHashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "556386a07084b70a5d2ae0c2bd4445a348306db8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1299. Improve a log message in AppSchedulingInfo by adding application id. Contributed by Ashutosh Jindal and Devaraj K.\n",
      "commitDate": "16/02/15 8:53 AM",
      "commitName": "556386a07084b70a5d2ae0c2bd4445a348306db8",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "16/02/15 8:52 AM",
      "commitNameOld": "3f32357c368f4efac33835d719641c961f93a0be",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,65 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n-          LOG.info(\"checking for deactivate... \");\n+          LOG.info(\"checking for deactivate of application :\"\n+              + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "3f32357c368f4efac33835d719641c961f93a0be": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-1299. Improve a log message in AppSchedulingInfo by adding application id. Contributed by Ashutosh Jindal and devaraj.\"\n\nThis reverts commit 9aae81c93421874b726c7b6ff970895c429e502d.\n",
      "commitDate": "16/02/15 8:52 AM",
      "commitName": "3f32357c368f4efac33835d719641c961f93a0be",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "16/02/15 8:48 AM",
      "commitNameOld": "9aae81c93421874b726c7b6ff970895c429e502d",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,64 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n-          LOG.info(\"checking for deactivate of application :\"\n-              + this.applicationId);\n+          LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "9aae81c93421874b726c7b6ff970895c429e502d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1299. Improve a log message in AppSchedulingInfo by adding application id. Contributed by Ashutosh Jindal and devaraj.\n",
      "commitDate": "16/02/15 8:48 AM",
      "commitName": "9aae81c93421874b726c7b6ff970895c429e502d",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "12/09/14 10:33 AM",
      "commitNameOld": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 156.97,
      "commitsBetweenForRepo": 1312,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,65 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       }\n       lastRequest \u003d asks.get(resourceName);\n \n       if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n         // Increment the number of containers to 1, as it is recovering a\n         // single container.\n         request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n-          LOG.info(\"checking for deactivate... \");\n+          LOG.info(\"checking for deactivate of application :\"\n+              + this.applicationId);\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate of application :\"\n              + this.applicationId);\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "43589a8df70d4dbaf86609961e27cc4e23dda993": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1408 Preemption caused Invalid State Event: ACQUIRED at KILLED and caused a task timeout for 30mins. (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/14 2:48 PM",
      "commitName": "43589a8df70d4dbaf86609961e27cc4e23dda993",
      "commitAuthor": "Mayank Bansal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1408 Preemption caused Invalid State Event: ACQUIRED at KILLED and caused a task timeout for 30mins. (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610860 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/07/14 2:48 PM",
          "commitName": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "29/06/14 11:24 AM",
          "commitNameOld": "b0c51504c494847a5d0e98d212660297ed43ba56",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 16.14,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,64 @@\n   synchronized public void updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests) {\n+      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n-      } else if (updatePendingResources) {\n-        lastRequest \u003d asks.get(resourceName);\n+      }\n+      lastRequest \u003d asks.get(resourceName);\n+\n+      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+        // Increment the number of containers to 1, as it is recovering a\n+        // single container.\n+        request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, recoverPreemptedRequest-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1408 Preemption caused Invalid State Event: ACQUIRED at KILLED and caused a task timeout for 30mins. (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610860 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/07/14 2:48 PM",
          "commitName": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "29/06/14 11:24 AM",
          "commitNameOld": "b0c51504c494847a5d0e98d212660297ed43ba56",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 16.14,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,64 @@\n   synchronized public void updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests) {\n+      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n-      } else if (updatePendingResources) {\n-        lastRequest \u003d asks.get(resourceName);\n+      }\n+      lastRequest \u003d asks.get(resourceName);\n+\n+      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n+        // Increment the number of containers to 1, as it is recovering a\n+        // single container.\n+        request.setNumContainers(lastRequest.getNumContainers() + 1);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         metrics.decrPendingResources(user, lastRequestContainers,\n             lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests, boolean recoverPreemptedRequest) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      }\n      lastRequest \u003d asks.get(resourceName);\n\n      if (recoverPreemptedRequest \u0026\u0026 lastRequest !\u003d null) {\n        // Increment the number of containers to 1, as it is recovering a\n        // single container.\n        request.setNumContainers(lastRequest.getNumContainers() + 1);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "981679e6d7650141fc8737c7e13b16d8b795b408": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1498. Common scheduler changes for moving apps between queues (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563021 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 4:14 PM",
      "commitName": "981679e6d7650141fc8737c7e13b16d8b795b408",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "30/01/14 2:40 PM",
      "commitNameOld": "1cac66ce68d5f8d5f73920133eb91fa43e9bdb1c",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,59 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(resourceName);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n-        metrics.incrPendingResources(user, request.getNumContainers()\n-            - lastRequestContainers, Resources.subtractFrom( // save a clone\n-            Resources.multiply(request.getCapability(), request\n-                .getNumContainers()), Resources.multiply(lastRequestCapability,\n-                lastRequestContainers)));\n+        metrics.incrPendingResources(user, request.getNumContainers(),\n+            request.getCapability());\n+        metrics.decrPendingResources(user, lastRequestContainers,\n+            lastRequestCapability);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(resourceName);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        metrics.decrPendingResources(user, lastRequestContainers,\n            lastRequestCapability);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "0a6e275ee3360719290ad666629624450d4f0a6f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1141. Updating resource requests should be decoupled with updating blacklist (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528632 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/10/13 2:31 PM",
      "commitName": "0a6e275ee3360719290ad666629624450d4f0a6f",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1141. Updating resource requests should be decoupled with updating blacklist (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528632 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/10/13 2:31 PM",
          "commitName": "0a6e275ee3360719290ad666629624450d4f0a6f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "26/08/13 8:39 AM",
          "commitNameOld": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 37.24,
          "commitsBetweenForRepo": 210,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,60 @@\n   synchronized public void updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n-      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n+      List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(resourceName);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n-\n-    //\n-    // Update blacklist\n-    //\n-    \n-    // Add to blacklist\n-    if (blacklistAdditions !\u003d null) {\n-      blacklist.addAll(blacklistAdditions);\n-    }\n-\n-    // Remove from blacklist\n-    if (blacklistRemovals !\u003d null) {\n-      blacklist.removeAll(blacklistRemovals);\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(resourceName);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e]",
            "newValue": "[requests-List\u003cResourceRequest\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1141. Updating resource requests should be decoupled with updating blacklist (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528632 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/10/13 2:31 PM",
          "commitName": "0a6e275ee3360719290ad666629624450d4f0a6f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "26/08/13 8:39 AM",
          "commitNameOld": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 37.24,
          "commitsBetweenForRepo": 210,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,60 @@\n   synchronized public void updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests,\n-      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n+      List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(resourceName);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n-\n-    //\n-    // Update blacklist\n-    //\n-    \n-    // Add to blacklist\n-    if (blacklistAdditions !\u003d null) {\n-      blacklist.addAll(blacklistAdditions);\n-    }\n-\n-    // Remove from blacklist\n-    if (blacklistRemovals !\u003d null) {\n-      blacklist.removeAll(blacklistRemovals);\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(resourceName);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 11:46 AM",
      "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 11:46 AM",
          "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "02/06/13 3:53 PM",
          "commitNameOld": "f27e484636f9903bb80afac9c9e51a04a7dbce76",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 3.83,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,75 @@\n   synchronized public void updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests) {\n+      List\u003cResourceRequest\u003e requests,\n+      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n+    \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(resourceName);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n+\n+    //\n+    // Update blacklist\n+    //\n+    \n+    // Add to blacklist\n+    if (blacklistAdditions !\u003d null) {\n+      blacklist.addAll(blacklistAdditions);\n+    }\n+\n+    // Remove from blacklist\n+    if (blacklistRemovals !\u003d null) {\n+      blacklist.removeAll(blacklistRemovals);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(resourceName);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n\n    //\n    // Update blacklist\n    //\n    \n    // Add to blacklist\n    if (blacklistAdditions !\u003d null) {\n      blacklist.addAll(blacklistAdditions);\n    }\n\n    // Remove from blacklist\n    if (blacklistRemovals !\u003d null) {\n      blacklist.removeAll(blacklistRemovals);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[requests-List\u003cResourceRequest\u003e]",
            "newValue": "[requests-List\u003cResourceRequest\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 11:46 AM",
          "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "02/06/13 3:53 PM",
          "commitNameOld": "f27e484636f9903bb80afac9c9e51a04a7dbce76",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 3.83,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,75 @@\n   synchronized public void updateResourceRequests(\n-      List\u003cResourceRequest\u003e requests) {\n+      List\u003cResourceRequest\u003e requests,\n+      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n+    \n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(resourceName);\n       }\n \n       asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n+\n+    //\n+    // Update blacklist\n+    //\n+    \n+    // Add to blacklist\n+    if (blacklistAdditions !\u003d null) {\n+      blacklist.addAll(blacklistAdditions);\n+    }\n+\n+    // Remove from blacklist\n+    if (blacklistRemovals !\u003d null) {\n+      blacklist.removeAll(blacklistRemovals);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    \n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(resourceName);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n\n    //\n    // Update blacklist\n    //\n    \n    // Add to blacklist\n    if (blacklistAdditions !\u003d null) {\n      blacklist.addAll(blacklistAdditions);\n    }\n\n    // Remove from blacklist\n    if (blacklistRemovals !\u003d null) {\n      blacklist.removeAll(blacklistRemovals);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "f27e484636f9903bb80afac9c9e51a04a7dbce76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-749. Rename ResourceRequest.(get,set)HostName to ResourceRequest.(get,set)ResourceName. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488806 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/06/13 3:53 PM",
      "commitName": "f27e484636f9903bb80afac9c9e51a04a7dbce76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/03/13 12:44 PM",
      "commitNameOld": "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 66.13,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n-      String hostName \u003d request.getHostName();\n+      String resourceName \u003d request.getResourceName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n-      if (hostName.equals(ResourceRequest.ANY)) {\n+      if (resourceName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n-        lastRequest \u003d asks.get(hostName);\n+        lastRequest \u003d asks.get(resourceName);\n       }\n \n-      asks.put(hostName, request);\n+      asks.put(resourceName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String resourceName \u003d request.getResourceName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(resourceName);\n      }\n\n      asks.put(resourceName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-450. Define value for * in the scheduling protocol (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1462271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/13 12:44 PM",
      "commitName": "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 119.74,
      "commitsBetweenForRepo": 537,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String hostName \u003d request.getHostName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n-      if (hostName.equals(RMNode.ANY)) {\n+      if (hostName.equals(ResourceRequest.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(hostName);\n       }\n \n       asks.put(hostName, request);\n       if (updatePendingResources) {\n         \n         // Similarly, deactivate application?\n         if (request.getNumContainers() \u003c\u003d 0) {\n           LOG.info(\"checking for deactivate... \");\n           checkForDeactivation();\n         }\n         \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String hostName \u003d request.getHostName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (hostName.equals(ResourceRequest.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(hostName);\n      }\n\n      asks.put(hostName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String hostName \u003d request.getHostName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (hostName.equals(RMNode.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(hostName);\n      }\n\n      asks.put(hostName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java"
      }
    },
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3752. Modified application limits to include queue max-capacities besides the usual user limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239422 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 4:41 PM",
      "commitName": "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/01/12 5:32 PM",
      "commitNameOld": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,59 @@\n   synchronized public void updateResourceRequests(\n       List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String hostName \u003d request.getHostName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (hostName.equals(RMNode.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n         \n         // Premature optimization?\n         // Assumes that we won\u0027t see more than one priority request updated\n         // in one call, reasonable assumption... however, it\u0027s totally safe\n         // to activate same application more than once.\n         // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n         // which is needed during deactivate.\n         if (request.getNumContainers() \u003e 0) {\n           activeUsersManager.activateApplication(user, applicationId);\n         }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(hostName);\n       }\n \n       asks.put(hostName, request);\n       if (updatePendingResources) {\n+        \n+        // Similarly, deactivate application?\n+        if (request.getNumContainers() \u003c\u003d 0) {\n+          LOG.info(\"checking for deactivate... \");\n+          checkForDeactivation();\n+        }\n+        \n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String hostName \u003d request.getHostName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (hostName.equals(RMNode.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(hostName);\n      }\n\n      asks.put(hostName, request);\n      if (updatePendingResources) {\n        \n        // Similarly, deactivate application?\n        if (request.getNumContainers() \u003c\u003d 0) {\n          LOG.info(\"checking for deactivate... \");\n          checkForDeactivation();\n        }\n        \n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3732. Modified CapacityScheduler to use only users with pending requests for computing user-limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/12 5:32 PM",
      "commitName": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 156.05,
      "commitsBetweenForRepo": 968,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,52 @@\n-  synchronized public void updateResourceRequests(List\u003cResourceRequest\u003e requests) {\n+  synchronized public void updateResourceRequests(\n+      List\u003cResourceRequest\u003e requests) {\n     QueueMetrics metrics \u003d queue.getMetrics();\n     // Update resource requests\n     for (ResourceRequest request : requests) {\n       Priority priority \u003d request.getPriority();\n       String hostName \u003d request.getHostName();\n       boolean updatePendingResources \u003d false;\n       ResourceRequest lastRequest \u003d null;\n \n       if (hostName.equals(RMNode.ANY)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n               + request);\n         }\n         updatePendingResources \u003d true;\n+        \n+        // Premature optimization?\n+        // Assumes that we won\u0027t see more than one priority request updated\n+        // in one call, reasonable assumption... however, it\u0027s totally safe\n+        // to activate same application more than once.\n+        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n+        // which is needed during deactivate.\n+        if (request.getNumContainers() \u003e 0) {\n+          activeUsersManager.activateApplication(user, applicationId);\n+        }\n       }\n \n       Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n \n       if (asks \u003d\u003d null) {\n         asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n         this.requests.put(priority, asks);\n         this.priorities.add(priority);\n       } else if (updatePendingResources) {\n         lastRequest \u003d asks.get(hostName);\n       }\n \n       asks.put(hostName, request);\n       if (updatePendingResources) {\n         int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n             .getNumContainers() : 0;\n         Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n             .getCapability() : Resources.none();\n         metrics.incrPendingResources(user, request.getNumContainers()\n             - lastRequestContainers, Resources.subtractFrom( // save a clone\n             Resources.multiply(request.getCapability(), request\n                 .getNumContainers()), Resources.multiply(lastRequestCapability,\n                 lastRequestContainers)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(\n      List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String hostName \u003d request.getHostName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (hostName.equals(RMNode.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n        \n        // Premature optimization?\n        // Assumes that we won\u0027t see more than one priority request updated\n        // in one call, reasonable assumption... however, it\u0027s totally safe\n        // to activate same application more than once.\n        // Thus we don\u0027t need another loop ala the one in decrementOutstanding()  \n        // which is needed during deactivate.\n        if (request.getNumContainers() \u003e 0) {\n          activeUsersManager.activateApplication(user, applicationId);\n        }\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(hostName);\n      }\n\n      asks.put(hostName, request);\n      if (updatePendingResources) {\n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public void updateResourceRequests(List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String hostName \u003d request.getHostName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (hostName.equals(RMNode.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(hostName);\n      }\n\n      asks.put(hostName, request);\n      if (updatePendingResources) {\n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,41 @@\n+  synchronized public void updateResourceRequests(List\u003cResourceRequest\u003e requests) {\n+    QueueMetrics metrics \u003d queue.getMetrics();\n+    // Update resource requests\n+    for (ResourceRequest request : requests) {\n+      Priority priority \u003d request.getPriority();\n+      String hostName \u003d request.getHostName();\n+      boolean updatePendingResources \u003d false;\n+      ResourceRequest lastRequest \u003d null;\n+\n+      if (hostName.equals(RMNode.ANY)) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n+              + request);\n+        }\n+        updatePendingResources \u003d true;\n+      }\n+\n+      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n+\n+      if (asks \u003d\u003d null) {\n+        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n+        this.requests.put(priority, asks);\n+        this.priorities.add(priority);\n+      } else if (updatePendingResources) {\n+        lastRequest \u003d asks.get(hostName);\n+      }\n+\n+      asks.put(hostName, request);\n+      if (updatePendingResources) {\n+        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n+            .getNumContainers() : 0;\n+        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n+            .getCapability() : Resources.none();\n+        metrics.incrPendingResources(user, request.getNumContainers()\n+            - lastRequestContainers, Resources.subtractFrom( // save a clone\n+            Resources.multiply(request.getCapability(), request\n+                .getNumContainers()), Resources.multiply(lastRequestCapability,\n+                lastRequestContainers)));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void updateResourceRequests(List\u003cResourceRequest\u003e requests) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    // Update resource requests\n    for (ResourceRequest request : requests) {\n      Priority priority \u003d request.getPriority();\n      String hostName \u003d request.getHostName();\n      boolean updatePendingResources \u003d false;\n      ResourceRequest lastRequest \u003d null;\n\n      if (hostName.equals(RMNode.ANY)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"update:\" + \" application\u003d\" + applicationId + \" request\u003d\"\n              + request);\n        }\n        updatePendingResources \u003d true;\n      }\n\n      Map\u003cString, ResourceRequest\u003e asks \u003d this.requests.get(priority);\n\n      if (asks \u003d\u003d null) {\n        asks \u003d new HashMap\u003cString, ResourceRequest\u003e();\n        this.requests.put(priority, asks);\n        this.priorities.add(priority);\n      } else if (updatePendingResources) {\n        lastRequest \u003d asks.get(hostName);\n      }\n\n      asks.put(hostName, request);\n      if (updatePendingResources) {\n        int lastRequestContainers \u003d lastRequest !\u003d null ? lastRequest\n            .getNumContainers() : 0;\n        Resource lastRequestCapability \u003d lastRequest !\u003d null ? lastRequest\n            .getCapability() : Resources.none();\n        metrics.incrPendingResources(user, request.getNumContainers()\n            - lastRequestContainers, Resources.subtractFrom( // save a clone\n            Resources.multiply(request.getCapability(), request\n                .getNumContainers()), Resources.multiply(lastRequestCapability,\n                lastRequestContainers)));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java"
    }
  }
}