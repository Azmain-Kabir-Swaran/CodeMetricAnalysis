{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsyncLoggerSet.java",
  "functionName": "waitForWriteQuorum",
  "functionId": "waitForWriteQuorum___q-QuorumCall__AsyncLogger,V____timeoutMs-int__operationName-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java",
  "functionStartLine": 124,
  "functionEndLine": 148,
  "numCommitsSeen": 31,
  "timeTaken": 1477,
  "changeHistory": [
    "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38": "Ymultichange(Yparameterchange,Ybodychange)",
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3906. QJM: quorum timeout on failover with large log segment. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/12 11:31 PM",
      "commitName": "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3906. QJM: quorum timeout on failover with large log segment. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383251 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/12 11:31 PM",
          "commitName": "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "05/09/12 11:57 PM",
          "commitNameOld": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 4.98,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n-      int timeoutMs) throws IOException {\n+      int timeoutMs, String operationName) throws IOException {\n     int majority \u003d getMajoritySize();\n     try {\n       q.waitFor(\n           loggers.size(), // either all respond \n           majority, // or we get a majority successes\n           majority, // or we get a majority failures,\n-          timeoutMs);\n+          timeoutMs, operationName);\n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new IOException(\"Interrupted waiting \" + timeoutMs + \"ms for a \" +\n           \"quorum of nodes to respond.\");\n     } catch (TimeoutException e) {\n       throw new IOException(\"Timed out waiting \" + timeoutMs + \"ms for a \" +\n           \"quorum of nodes to respond.\");\n     }\n     \n     if (q.countSuccesses() \u003c majority) {\n       q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n           getMajorityString());\n     }\n     \n     return q.getResults();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n      int timeoutMs, String operationName) throws IOException {\n    int majority \u003d getMajoritySize();\n    try {\n      q.waitFor(\n          loggers.size(), // either all respond \n          majority, // or we get a majority successes\n          majority, // or we get a majority failures,\n          timeoutMs, operationName);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IOException(\"Interrupted waiting \" + timeoutMs + \"ms for a \" +\n          \"quorum of nodes to respond.\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting \" + timeoutMs + \"ms for a \" +\n          \"quorum of nodes to respond.\");\n    }\n    \n    if (q.countSuccesses() \u003c majority) {\n      q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n          getMajorityString());\n    }\n    \n    return q.getResults();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java",
          "extendedDetails": {
            "oldValue": "[q-QuorumCall\u003cAsyncLogger,V\u003e, timeoutMs-int]",
            "newValue": "[q-QuorumCall\u003cAsyncLogger,V\u003e, timeoutMs-int, operationName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3906. QJM: quorum timeout on failover with large log segment. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383251 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/12 11:31 PM",
          "commitName": "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "05/09/12 11:57 PM",
          "commitNameOld": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 4.98,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n-      int timeoutMs) throws IOException {\n+      int timeoutMs, String operationName) throws IOException {\n     int majority \u003d getMajoritySize();\n     try {\n       q.waitFor(\n           loggers.size(), // either all respond \n           majority, // or we get a majority successes\n           majority, // or we get a majority failures,\n-          timeoutMs);\n+          timeoutMs, operationName);\n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new IOException(\"Interrupted waiting \" + timeoutMs + \"ms for a \" +\n           \"quorum of nodes to respond.\");\n     } catch (TimeoutException e) {\n       throw new IOException(\"Timed out waiting \" + timeoutMs + \"ms for a \" +\n           \"quorum of nodes to respond.\");\n     }\n     \n     if (q.countSuccesses() \u003c majority) {\n       q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n           getMajorityString());\n     }\n     \n     return q.getResults();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n      int timeoutMs, String operationName) throws IOException {\n    int majority \u003d getMajoritySize();\n    try {\n      q.waitFor(\n          loggers.size(), // either all respond \n          majority, // or we get a majority successes\n          majority, // or we get a majority failures,\n          timeoutMs, operationName);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IOException(\"Interrupted waiting \" + timeoutMs + \"ms for a \" +\n          \"quorum of nodes to respond.\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting \" + timeoutMs + \"ms for a \" +\n          \"quorum of nodes to respond.\");\n    }\n    \n    if (q.countSuccesses() \u003c majority) {\n      q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n          getMajorityString());\n    }\n    \n    return q.getResults();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3891. Make selectInputStreams throw IOE instead of RTE. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381481 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 11:57 PM",
      "commitName": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/09/12 9:16 PM",
      "commitNameOld": "72485f3112832a6a32f912d59ecf303a0c7e919a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n       int timeoutMs) throws IOException {\n     int majority \u003d getMajoritySize();\n     try {\n       q.waitFor(\n           loggers.size(), // either all respond \n           majority, // or we get a majority successes\n           majority, // or we get a majority failures,\n           timeoutMs);\n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n-      throw new IOException(\"Interrupted waiting for quorum results\");\n+      throw new IOException(\"Interrupted waiting \" + timeoutMs + \"ms for a \" +\n+          \"quorum of nodes to respond.\");\n     } catch (TimeoutException e) {\n-      throw new IOException(\"Timed out waiting \" + timeoutMs + \" for write quorum\");\n+      throw new IOException(\"Timed out waiting \" + timeoutMs + \"ms for a \" +\n+          \"quorum of nodes to respond.\");\n     }\n     \n     if (q.countSuccesses() \u003c majority) {\n       q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n           getMajorityString());\n     }\n     \n     return q.getResults();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n      int timeoutMs) throws IOException {\n    int majority \u003d getMajoritySize();\n    try {\n      q.waitFor(\n          loggers.size(), // either all respond \n          majority, // or we get a majority successes\n          majority, // or we get a majority failures,\n          timeoutMs);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IOException(\"Interrupted waiting \" + timeoutMs + \"ms for a \" +\n          \"quorum of nodes to respond.\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting \" + timeoutMs + \"ms for a \" +\n          \"quorum of nodes to respond.\");\n    }\n    \n    if (q.countSuccesses() \u003c majority) {\n      q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n          getMajorityString());\n    }\n    \n    return q.getResults();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,23 @@\n+  \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n+      int timeoutMs) throws IOException {\n+    int majority \u003d getMajoritySize();\n+    try {\n+      q.waitFor(\n+          loggers.size(), // either all respond \n+          majority, // or we get a majority successes\n+          majority, // or we get a majority failures,\n+          timeoutMs);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new IOException(\"Interrupted waiting for quorum results\");\n+    } catch (TimeoutException e) {\n+      throw new IOException(\"Timed out waiting \" + timeoutMs + \" for write quorum\");\n+    }\n+    \n+    if (q.countSuccesses() \u003c majority) {\n+      q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n+          getMajorityString());\n+    }\n+    \n+    return q.getResults();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  \u003cV\u003e Map\u003cAsyncLogger, V\u003e waitForWriteQuorum(QuorumCall\u003cAsyncLogger, V\u003e q,\n      int timeoutMs) throws IOException {\n    int majority \u003d getMajoritySize();\n    try {\n      q.waitFor(\n          loggers.size(), // either all respond \n          majority, // or we get a majority successes\n          majority, // or we get a majority failures,\n          timeoutMs);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IOException(\"Interrupted waiting for quorum results\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting \" + timeoutMs + \" for write quorum\");\n    }\n    \n    if (q.countSuccesses() \u003c majority) {\n      q.rethrowException(\"Got too many exceptions to achieve quorum size \" +\n          getMajorityString());\n    }\n    \n    return q.getResults();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java"
    }
  }
}