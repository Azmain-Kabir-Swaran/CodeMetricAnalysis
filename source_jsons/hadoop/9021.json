{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "listOpenFiles",
  "functionId": "listOpenFiles___prevId-long__openFilesTypes-EnumSet__OpenFilesType____path-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 1923,
  "functionEndLine": 1955,
  "numCommitsSeen": 2430,
  "timeTaken": 15173,
  "changeHistory": [
    "4c53fb9ce102c46c6956b4aecdfd9dd513280b35",
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "24080666e5e2214d4a362c889cd9aa617be5de81",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "bf5c94899537011465350d5d999fad9ffaeb605d",
    "42a1c98597e6dba2e371510a6b2b6b1fb94e4090",
    "fb68980959f95f0d89e86f91909867724ad01791"
  ],
  "changeHistoryShort": {
    "4c53fb9ce102c46c6956b4aecdfd9dd513280b35": "Ybodychange",
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "24080666e5e2214d4a362c889cd9aa617be5de81": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "bf5c94899537011465350d5d999fad9ffaeb605d": "Ymultichange(Yparameterchange,Ybodychange)",
    "42a1c98597e6dba2e371510a6b2b6b1fb94e4090": "Ymultichange(Yparameterchange,Ybodychange)",
    "fb68980959f95f0d89e86f91909867724ad01791": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c53fb9ce102c46c6956b4aecdfd9dd513280b35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15338. listOpenFiles() should throw InvalidPathException in case of invalid paths. Contributed by Jinglun.\n",
      "commitDate": "11/05/20 4:18 AM",
      "commitName": "4c53fb9ce102c46c6956b4aecdfd9dd513280b35",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "27/04/20 1:20 AM",
      "commitNameOld": "62c26b91fd06f505a6e64fd32a36e5e67d06fa30",
      "commitAuthorOld": "Toshihiro Suzuki",
      "daysBetweenCommits": 14.12,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n       EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n+    INode.checkAbsolutePath(path);\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     String normalizedPath \u003d new Path(path).toString(); // normalize path.\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n           batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n               normalizedPath);\n         } else {\n           if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n             batchedListEntries \u003d getFilesBlockingDecom(prevId, normalizedPath);\n           } else {\n             throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                 + openFilesTypes);\n           }\n         }\n       } finally {\n         readUnlock(operationName, getLockReportInfoSupplier(null));\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n    INode.checkAbsolutePath(path);\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    String normalizedPath \u003d new Path(path).toString(); // normalize path.\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n          batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n              normalizedPath);\n        } else {\n          if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n            batchedListEntries \u003d getFilesBlockingDecom(prevId, normalizedPath);\n          } else {\n            throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                + openFilesTypes);\n          }\n        }\n      } finally {\n        readUnlock(operationName, getLockReportInfoSupplier(null));\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n       EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     String normalizedPath \u003d new Path(path).toString(); // normalize path.\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n           batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n               normalizedPath);\n         } else {\n           if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n             batchedListEntries \u003d getFilesBlockingDecom(prevId, normalizedPath);\n           } else {\n             throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                 + openFilesTypes);\n           }\n         }\n       } finally {\n-        readUnlock(operationName);\n+        readUnlock(operationName, getLockReportInfoSupplier(null));\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    String normalizedPath \u003d new Path(path).toString(); // normalize path.\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n          batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n              normalizedPath);\n        } else {\n          if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n            batchedListEntries \u003d getFilesBlockingDecom(prevId, normalizedPath);\n          } else {\n            throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                + openFilesTypes);\n          }\n        }\n      } finally {\n        readUnlock(operationName, getLockReportInfoSupplier(null));\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "24080666e5e2214d4a362c889cd9aa617be5de81": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14908. LeaseManager should check parent-child relationship when filter open files. Contributed by Jinglun.\n",
      "commitDate": "16/12/19 6:41 PM",
      "commitName": "24080666e5e2214d4a362c889cd9aa617be5de81",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "29/11/19 10:25 AM",
      "commitNameOld": "6b2d6d4aafb110bef1b77d4ccbba4350e624b57d",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 17.34,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n       EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n+    String normalizedPath \u003d new Path(path).toString(); // normalize path.\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n           batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n-              path);\n+              normalizedPath);\n         } else {\n           if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n-            batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n+            batchedListEntries \u003d getFilesBlockingDecom(prevId, normalizedPath);\n           } else {\n             throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                 + openFilesTypes);\n           }\n         }\n       } finally {\n         readUnlock(operationName);\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    String normalizedPath \u003d new Path(path).toString(); // normalize path.\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n          batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n              normalizedPath);\n        } else {\n          if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n            batchedListEntries \u003d getFilesBlockingDecom(prevId, normalizedPath);\n          } else {\n            throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                + openFilesTypes);\n          }\n        }\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n       EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n-    readLock();\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     try {\n-      checkOperation(OperationCategory.READ);\n-      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n-        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n-            path);\n-      } else {\n-        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n-          batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n+      readLock();\n+      try {\n+        checkOperation(OperationCategory.READ);\n+        if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n+          batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n+              path);\n         } else {\n-          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n-              + openFilesTypes);\n+          if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n+            batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n+          } else {\n+            throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n+                + openFilesTypes);\n+          }\n         }\n+      } finally {\n+        readUnlock(operationName);\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n-    } finally {\n-      readUnlock(operationName);\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        if (openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n          batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n              path);\n        } else {\n          if (openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n            batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n          } else {\n            throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n                + openFilesTypes);\n          }\n        }\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "bf5c94899537011465350d5d999fad9ffaeb605d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11848. Enhance dfsadmin listOpenFiles command to list files under a given path. Contributed by Yiqun Lin.\n",
      "commitDate": "05/01/18 10:31 PM",
      "commitName": "bf5c94899537011465350d5d999fad9ffaeb605d",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11848. Enhance dfsadmin listOpenFiles command to list files under a given path. Contributed by Yiqun Lin.\n",
          "commitDate": "05/01/18 10:31 PM",
          "commitName": "bf5c94899537011465350d5d999fad9ffaeb605d",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "02/01/18 2:59 PM",
          "commitNameOld": "42a1c98597e6dba2e371510a6b2b6b1fb94e4090",
          "commitAuthorOld": "Manoj Govindassamy",
          "daysBetweenCommits": 3.31,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n-      EnumSet\u003cOpenFilesType\u003e openFilesTypes) throws IOException {\n+      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     readLock();\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     try {\n       checkOperation(OperationCategory.READ);\n       if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n-        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n+            path);\n       } else {\n         if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n-          batchedListEntries \u003d getFilesBlockingDecom(prevId);\n+          batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n         } else {\n           throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n               + openFilesTypes);\n         }\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     } finally {\n       readUnlock(operationName);\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    readLock();\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    try {\n      checkOperation(OperationCategory.READ);\n      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n            path);\n      } else {\n        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n          batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n        } else {\n          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n              + openFilesTypes);\n        }\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[prevId-long, openFilesTypes-EnumSet\u003cOpenFilesType\u003e]",
            "newValue": "[prevId-long, openFilesTypes-EnumSet\u003cOpenFilesType\u003e, path-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11848. Enhance dfsadmin listOpenFiles command to list files under a given path. Contributed by Yiqun Lin.\n",
          "commitDate": "05/01/18 10:31 PM",
          "commitName": "bf5c94899537011465350d5d999fad9ffaeb605d",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "02/01/18 2:59 PM",
          "commitNameOld": "42a1c98597e6dba2e371510a6b2b6b1fb94e4090",
          "commitAuthorOld": "Manoj Govindassamy",
          "daysBetweenCommits": 3.31,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n-      EnumSet\u003cOpenFilesType\u003e openFilesTypes) throws IOException {\n+      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     readLock();\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     try {\n       checkOperation(OperationCategory.READ);\n       if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n-        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n+            path);\n       } else {\n         if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n-          batchedListEntries \u003d getFilesBlockingDecom(prevId);\n+          batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n         } else {\n           throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n               + openFilesTypes);\n         }\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     } finally {\n       readUnlock(operationName);\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes, String path) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    readLock();\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    try {\n      checkOperation(OperationCategory.READ);\n      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId,\n            path);\n      } else {\n        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n          batchedListEntries \u003d getFilesBlockingDecom(prevId, path);\n        } else {\n          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n              + openFilesTypes);\n        }\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "42a1c98597e6dba2e371510a6b2b6b1fb94e4090": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11847. Enhance dfsadmin listOpenFiles command to list files blocking datanode decommissioning.\n",
      "commitDate": "02/01/18 2:59 PM",
      "commitName": "42a1c98597e6dba2e371510a6b2b6b1fb94e4090",
      "commitAuthor": "Manoj Govindassamy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11847. Enhance dfsadmin listOpenFiles command to list files blocking datanode decommissioning.\n",
          "commitDate": "02/01/18 2:59 PM",
          "commitName": "42a1c98597e6dba2e371510a6b2b6b1fb94e4090",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "15/12/17 5:51 PM",
          "commitNameOld": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
          "commitAuthorOld": "Virajith Jalaparti",
          "daysBetweenCommits": 17.88,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,28 @@\n-  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId)\n-      throws IOException {\n+  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n+      EnumSet\u003cOpenFilesType\u003e openFilesTypes) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     readLock();\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     try {\n       checkOperation(OperationCategory.READ);\n-      batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n+        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+      } else {\n+        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n+          batchedListEntries \u003d getFilesBlockingDecom(prevId);\n+        } else {\n+          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n+              + openFilesTypes);\n+        }\n+      }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     } finally {\n       readUnlock(operationName);\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    readLock();\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    try {\n      checkOperation(OperationCategory.READ);\n      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n      } else {\n        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n          batchedListEntries \u003d getFilesBlockingDecom(prevId);\n        } else {\n          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n              + openFilesTypes);\n        }\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[prevId-long]",
            "newValue": "[prevId-long, openFilesTypes-EnumSet\u003cOpenFilesType\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11847. Enhance dfsadmin listOpenFiles command to list files blocking datanode decommissioning.\n",
          "commitDate": "02/01/18 2:59 PM",
          "commitName": "42a1c98597e6dba2e371510a6b2b6b1fb94e4090",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "15/12/17 5:51 PM",
          "commitNameOld": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
          "commitAuthorOld": "Virajith Jalaparti",
          "daysBetweenCommits": 17.88,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,28 @@\n-  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId)\n-      throws IOException {\n+  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n+      EnumSet\u003cOpenFilesType\u003e openFilesTypes) throws IOException {\n     final String operationName \u003d \"listOpenFiles\";\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.READ);\n     readLock();\n     BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n     try {\n       checkOperation(OperationCategory.READ);\n-      batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n+        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+      } else {\n+        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n+          batchedListEntries \u003d getFilesBlockingDecom(prevId);\n+        } else {\n+          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n+              + openFilesTypes);\n+        }\n+      }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, null);\n       throw e;\n     } finally {\n       readUnlock(operationName);\n     }\n     logAuditEvent(true, operationName, null);\n     return batchedListEntries;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId,\n      EnumSet\u003cOpenFilesType\u003e openFilesTypes) throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    readLock();\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    try {\n      checkOperation(OperationCategory.READ);\n      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {\n        batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n      } else {\n        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {\n          batchedListEntries \u003d getFilesBlockingDecom(prevId);\n        } else {\n          throw new IllegalArgumentException(\"Unknown OpenFileType: \"\n              + openFilesTypes);\n        }\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "fb68980959f95f0d89e86f91909867724ad01791": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10480. Add an admin command to list currently open files. Contributed by Manoj Govindassamy.\n",
      "commitDate": "15/06/17 2:46 PM",
      "commitName": "fb68980959f95f0d89e86f91909867724ad01791",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,19 @@\n+  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId)\n+      throws IOException {\n+    final String operationName \u003d \"listOpenFiles\";\n+    checkSuperuserPrivilege();\n+    checkOperation(OperationCategory.READ);\n+    readLock();\n+    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n+    try {\n+      checkOperation(OperationCategory.READ);\n+      batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n+    } catch (AccessControlException e) {\n+      logAuditEvent(false, operationName, null);\n+      throw e;\n+    } finally {\n+      readUnlock(operationName);\n+    }\n+    logAuditEvent(true, operationName, null);\n+    return batchedListEntries;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cOpenFileEntry\u003e listOpenFiles(long prevId)\n      throws IOException {\n    final String operationName \u003d \"listOpenFiles\";\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.READ);\n    readLock();\n    BatchedListEntries\u003cOpenFileEntry\u003e batchedListEntries;\n    try {\n      checkOperation(OperationCategory.READ);\n      batchedListEntries \u003d leaseManager.getUnderConstructionFiles(prevId);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, null);\n      throw e;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(true, operationName, null);\n    return batchedListEntries;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}