{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerUpdateContext.java",
  "functionName": "swapContainer",
  "functionId": "swapContainer___tempRMContainer-RMContainer__existingRMContainer-RMContainer__updateType-ContainerUpdateType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
  "functionStartLine": 313,
  "functionEndLine": 341,
  "numCommitsSeen": 80,
  "timeTaken": 5587,
  "changeHistory": [
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5168. Added exposed port information for Docker container.\n           Contributed by Xun Liu\n",
      "commitDate": "21/12/18 4:44 PM",
      "commitName": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 324.63,
      "commitsBetweenForRepo": 3083,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public RMContainer swapContainer(RMContainer tempRMContainer,\n       RMContainer existingRMContainer, ContainerUpdateType updateType) {\n     ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n     // Swap updated container with the existing container\n     Container tempContainer \u003d tempRMContainer.getContainer();\n \n     Resource updatedResource \u003d createUpdatedResource(\n         tempContainer, existingRMContainer.getContainer(), updateType);\n     Resource resourceToRelease \u003d createResourceToRelease(\n         existingRMContainer.getContainer(), updateType);\n     Container newContainer \u003d Container.newInstance(matchedContainerId,\n         existingRMContainer.getContainer().getNodeId(),\n         existingRMContainer.getContainer().getNodeHttpAddress(),\n         updatedResource,\n         existingRMContainer.getContainer().getPriority(), null,\n         tempContainer.getExecutionType());\n+    newContainer.setExposedPorts(\n+        existingRMContainer.getContainer().getExposedPorts());\n     newContainer.setAllocationRequestId(\n         existingRMContainer.getContainer().getAllocationRequestId());\n     newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n \n     tempRMContainer.getContainer().setResource(resourceToRelease);\n     tempRMContainer.getContainer().setExecutionType(\n         existingRMContainer.getContainer().getExecutionType());\n \n     ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n     return existingRMContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer swapContainer(RMContainer tempRMContainer,\n      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n    // Swap updated container with the existing container\n    Container tempContainer \u003d tempRMContainer.getContainer();\n\n    Resource updatedResource \u003d createUpdatedResource(\n        tempContainer, existingRMContainer.getContainer(), updateType);\n    Resource resourceToRelease \u003d createResourceToRelease(\n        existingRMContainer.getContainer(), updateType);\n    Container newContainer \u003d Container.newInstance(matchedContainerId,\n        existingRMContainer.getContainer().getNodeId(),\n        existingRMContainer.getContainer().getNodeHttpAddress(),\n        updatedResource,\n        existingRMContainer.getContainer().getPriority(), null,\n        tempContainer.getExecutionType());\n    newContainer.setExposedPorts(\n        existingRMContainer.getContainer().getExposedPorts());\n    newContainer.setAllocationRequestId(\n        existingRMContainer.getContainer().getAllocationRequestId());\n    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n\n    tempRMContainer.getContainer().setResource(resourceToRelease);\n    tempRMContainer.getContainer().setExecutionType(\n        existingRMContainer.getContainer().getExecutionType());\n\n    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n    return existingRMContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "28/02/17 9:27 AM",
          "commitNameOld": "480b4dd574d0355bf6c976a38bb45cb86adb2714",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private RMContainer swapContainer(RMContainer rmContainer, ContainerId\n-      matchedContainerId) {\n-    RMContainer existingRMContainer \u003d\n-        getRMContainer(matchedContainerId);\n-    if (existingRMContainer !\u003d null) {\n-      // Swap updated container with the existing container\n-      Container updatedContainer \u003d rmContainer.getContainer();\n+  public RMContainer swapContainer(RMContainer tempRMContainer,\n+      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n+    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n+    // Swap updated container with the existing container\n+    Container tempContainer \u003d tempRMContainer.getContainer();\n \n-      Container newContainer \u003d Container.newInstance(matchedContainerId,\n-          existingRMContainer.getContainer().getNodeId(),\n-          existingRMContainer.getContainer().getNodeHttpAddress(),\n-          updatedContainer.getResource(),\n-          existingRMContainer.getContainer().getPriority(), null,\n-          updatedContainer.getExecutionType());\n-      newContainer.setAllocationRequestId(\n-          existingRMContainer.getContainer().getAllocationRequestId());\n-      newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n+    Resource updatedResource \u003d createUpdatedResource(\n+        tempContainer, existingRMContainer.getContainer(), updateType);\n+    Resource resourceToRelease \u003d createResourceToRelease(\n+        existingRMContainer.getContainer(), updateType);\n+    Container newContainer \u003d Container.newInstance(matchedContainerId,\n+        existingRMContainer.getContainer().getNodeId(),\n+        existingRMContainer.getContainer().getNodeHttpAddress(),\n+        updatedResource,\n+        existingRMContainer.getContainer().getPriority(), null,\n+        tempContainer.getExecutionType());\n+    newContainer.setAllocationRequestId(\n+        existingRMContainer.getContainer().getAllocationRequestId());\n+    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n \n-      rmContainer.getContainer().setResource(\n-          existingRMContainer.getContainer().getResource());\n-      rmContainer.getContainer().setExecutionType(\n-          existingRMContainer.getContainer().getExecutionType());\n+    tempRMContainer.getContainer().setResource(resourceToRelease);\n+    tempRMContainer.getContainer().setExecutionType(\n+        existingRMContainer.getContainer().getExecutionType());\n \n-      ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n-    }\n+    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n     return existingRMContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer swapContainer(RMContainer tempRMContainer,\n      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n    // Swap updated container with the existing container\n    Container tempContainer \u003d tempRMContainer.getContainer();\n\n    Resource updatedResource \u003d createUpdatedResource(\n        tempContainer, existingRMContainer.getContainer(), updateType);\n    Resource resourceToRelease \u003d createResourceToRelease(\n        existingRMContainer.getContainer(), updateType);\n    Container newContainer \u003d Container.newInstance(matchedContainerId,\n        existingRMContainer.getContainer().getNodeId(),\n        existingRMContainer.getContainer().getNodeHttpAddress(),\n        updatedResource,\n        existingRMContainer.getContainer().getPriority(), null,\n        tempContainer.getExecutionType());\n    newContainer.setAllocationRequestId(\n        existingRMContainer.getContainer().getAllocationRequestId());\n    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n\n    tempRMContainer.getContainer().setResource(resourceToRelease);\n    tempRMContainer.getContainer().setExecutionType(\n        existingRMContainer.getContainer().getExecutionType());\n\n    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n    return existingRMContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
            "oldMethodName": "swapContainer",
            "newMethodName": "swapContainer"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "28/02/17 9:27 AM",
          "commitNameOld": "480b4dd574d0355bf6c976a38bb45cb86adb2714",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private RMContainer swapContainer(RMContainer rmContainer, ContainerId\n-      matchedContainerId) {\n-    RMContainer existingRMContainer \u003d\n-        getRMContainer(matchedContainerId);\n-    if (existingRMContainer !\u003d null) {\n-      // Swap updated container with the existing container\n-      Container updatedContainer \u003d rmContainer.getContainer();\n+  public RMContainer swapContainer(RMContainer tempRMContainer,\n+      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n+    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n+    // Swap updated container with the existing container\n+    Container tempContainer \u003d tempRMContainer.getContainer();\n \n-      Container newContainer \u003d Container.newInstance(matchedContainerId,\n-          existingRMContainer.getContainer().getNodeId(),\n-          existingRMContainer.getContainer().getNodeHttpAddress(),\n-          updatedContainer.getResource(),\n-          existingRMContainer.getContainer().getPriority(), null,\n-          updatedContainer.getExecutionType());\n-      newContainer.setAllocationRequestId(\n-          existingRMContainer.getContainer().getAllocationRequestId());\n-      newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n+    Resource updatedResource \u003d createUpdatedResource(\n+        tempContainer, existingRMContainer.getContainer(), updateType);\n+    Resource resourceToRelease \u003d createResourceToRelease(\n+        existingRMContainer.getContainer(), updateType);\n+    Container newContainer \u003d Container.newInstance(matchedContainerId,\n+        existingRMContainer.getContainer().getNodeId(),\n+        existingRMContainer.getContainer().getNodeHttpAddress(),\n+        updatedResource,\n+        existingRMContainer.getContainer().getPriority(), null,\n+        tempContainer.getExecutionType());\n+    newContainer.setAllocationRequestId(\n+        existingRMContainer.getContainer().getAllocationRequestId());\n+    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n \n-      rmContainer.getContainer().setResource(\n-          existingRMContainer.getContainer().getResource());\n-      rmContainer.getContainer().setExecutionType(\n-          existingRMContainer.getContainer().getExecutionType());\n+    tempRMContainer.getContainer().setResource(resourceToRelease);\n+    tempRMContainer.getContainer().setExecutionType(\n+        existingRMContainer.getContainer().getExecutionType());\n \n-      ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n-    }\n+    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n     return existingRMContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer swapContainer(RMContainer tempRMContainer,\n      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n    // Swap updated container with the existing container\n    Container tempContainer \u003d tempRMContainer.getContainer();\n\n    Resource updatedResource \u003d createUpdatedResource(\n        tempContainer, existingRMContainer.getContainer(), updateType);\n    Resource resourceToRelease \u003d createResourceToRelease(\n        existingRMContainer.getContainer(), updateType);\n    Container newContainer \u003d Container.newInstance(matchedContainerId,\n        existingRMContainer.getContainer().getNodeId(),\n        existingRMContainer.getContainer().getNodeHttpAddress(),\n        updatedResource,\n        existingRMContainer.getContainer().getPriority(), null,\n        tempContainer.getExecutionType());\n    newContainer.setAllocationRequestId(\n        existingRMContainer.getContainer().getAllocationRequestId());\n    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n\n    tempRMContainer.getContainer().setResource(resourceToRelease);\n    tempRMContainer.getContainer().setExecutionType(\n        existingRMContainer.getContainer().getExecutionType());\n\n    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n    return existingRMContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "28/02/17 9:27 AM",
          "commitNameOld": "480b4dd574d0355bf6c976a38bb45cb86adb2714",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private RMContainer swapContainer(RMContainer rmContainer, ContainerId\n-      matchedContainerId) {\n-    RMContainer existingRMContainer \u003d\n-        getRMContainer(matchedContainerId);\n-    if (existingRMContainer !\u003d null) {\n-      // Swap updated container with the existing container\n-      Container updatedContainer \u003d rmContainer.getContainer();\n+  public RMContainer swapContainer(RMContainer tempRMContainer,\n+      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n+    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n+    // Swap updated container with the existing container\n+    Container tempContainer \u003d tempRMContainer.getContainer();\n \n-      Container newContainer \u003d Container.newInstance(matchedContainerId,\n-          existingRMContainer.getContainer().getNodeId(),\n-          existingRMContainer.getContainer().getNodeHttpAddress(),\n-          updatedContainer.getResource(),\n-          existingRMContainer.getContainer().getPriority(), null,\n-          updatedContainer.getExecutionType());\n-      newContainer.setAllocationRequestId(\n-          existingRMContainer.getContainer().getAllocationRequestId());\n-      newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n+    Resource updatedResource \u003d createUpdatedResource(\n+        tempContainer, existingRMContainer.getContainer(), updateType);\n+    Resource resourceToRelease \u003d createResourceToRelease(\n+        existingRMContainer.getContainer(), updateType);\n+    Container newContainer \u003d Container.newInstance(matchedContainerId,\n+        existingRMContainer.getContainer().getNodeId(),\n+        existingRMContainer.getContainer().getNodeHttpAddress(),\n+        updatedResource,\n+        existingRMContainer.getContainer().getPriority(), null,\n+        tempContainer.getExecutionType());\n+    newContainer.setAllocationRequestId(\n+        existingRMContainer.getContainer().getAllocationRequestId());\n+    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n \n-      rmContainer.getContainer().setResource(\n-          existingRMContainer.getContainer().getResource());\n-      rmContainer.getContainer().setExecutionType(\n-          existingRMContainer.getContainer().getExecutionType());\n+    tempRMContainer.getContainer().setResource(resourceToRelease);\n+    tempRMContainer.getContainer().setExecutionType(\n+        existingRMContainer.getContainer().getExecutionType());\n \n-      ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n-    }\n+    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n     return existingRMContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer swapContainer(RMContainer tempRMContainer,\n      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n    // Swap updated container with the existing container\n    Container tempContainer \u003d tempRMContainer.getContainer();\n\n    Resource updatedResource \u003d createUpdatedResource(\n        tempContainer, existingRMContainer.getContainer(), updateType);\n    Resource resourceToRelease \u003d createResourceToRelease(\n        existingRMContainer.getContainer(), updateType);\n    Container newContainer \u003d Container.newInstance(matchedContainerId,\n        existingRMContainer.getContainer().getNodeId(),\n        existingRMContainer.getContainer().getNodeHttpAddress(),\n        updatedResource,\n        existingRMContainer.getContainer().getPriority(), null,\n        tempContainer.getExecutionType());\n    newContainer.setAllocationRequestId(\n        existingRMContainer.getContainer().getAllocationRequestId());\n    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n\n    tempRMContainer.getContainer().setResource(resourceToRelease);\n    tempRMContainer.getContainer().setExecutionType(\n        existingRMContainer.getContainer().getExecutionType());\n\n    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n    return existingRMContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "28/02/17 9:27 AM",
          "commitNameOld": "480b4dd574d0355bf6c976a38bb45cb86adb2714",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private RMContainer swapContainer(RMContainer rmContainer, ContainerId\n-      matchedContainerId) {\n-    RMContainer existingRMContainer \u003d\n-        getRMContainer(matchedContainerId);\n-    if (existingRMContainer !\u003d null) {\n-      // Swap updated container with the existing container\n-      Container updatedContainer \u003d rmContainer.getContainer();\n+  public RMContainer swapContainer(RMContainer tempRMContainer,\n+      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n+    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n+    // Swap updated container with the existing container\n+    Container tempContainer \u003d tempRMContainer.getContainer();\n \n-      Container newContainer \u003d Container.newInstance(matchedContainerId,\n-          existingRMContainer.getContainer().getNodeId(),\n-          existingRMContainer.getContainer().getNodeHttpAddress(),\n-          updatedContainer.getResource(),\n-          existingRMContainer.getContainer().getPriority(), null,\n-          updatedContainer.getExecutionType());\n-      newContainer.setAllocationRequestId(\n-          existingRMContainer.getContainer().getAllocationRequestId());\n-      newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n+    Resource updatedResource \u003d createUpdatedResource(\n+        tempContainer, existingRMContainer.getContainer(), updateType);\n+    Resource resourceToRelease \u003d createResourceToRelease(\n+        existingRMContainer.getContainer(), updateType);\n+    Container newContainer \u003d Container.newInstance(matchedContainerId,\n+        existingRMContainer.getContainer().getNodeId(),\n+        existingRMContainer.getContainer().getNodeHttpAddress(),\n+        updatedResource,\n+        existingRMContainer.getContainer().getPriority(), null,\n+        tempContainer.getExecutionType());\n+    newContainer.setAllocationRequestId(\n+        existingRMContainer.getContainer().getAllocationRequestId());\n+    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n \n-      rmContainer.getContainer().setResource(\n-          existingRMContainer.getContainer().getResource());\n-      rmContainer.getContainer().setExecutionType(\n-          existingRMContainer.getContainer().getExecutionType());\n+    tempRMContainer.getContainer().setResource(resourceToRelease);\n+    tempRMContainer.getContainer().setExecutionType(\n+        existingRMContainer.getContainer().getExecutionType());\n \n-      ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n-    }\n+    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n     return existingRMContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer swapContainer(RMContainer tempRMContainer,\n      RMContainer existingRMContainer, ContainerUpdateType updateType) {\n    ContainerId matchedContainerId \u003d existingRMContainer.getContainerId();\n    // Swap updated container with the existing container\n    Container tempContainer \u003d tempRMContainer.getContainer();\n\n    Resource updatedResource \u003d createUpdatedResource(\n        tempContainer, existingRMContainer.getContainer(), updateType);\n    Resource resourceToRelease \u003d createResourceToRelease(\n        existingRMContainer.getContainer(), updateType);\n    Container newContainer \u003d Container.newInstance(matchedContainerId,\n        existingRMContainer.getContainer().getNodeId(),\n        existingRMContainer.getContainer().getNodeHttpAddress(),\n        updatedResource,\n        existingRMContainer.getContainer().getPriority(), null,\n        tempContainer.getExecutionType());\n    newContainer.setAllocationRequestId(\n        existingRMContainer.getContainer().getAllocationRequestId());\n    newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n\n    tempRMContainer.getContainer().setResource(resourceToRelease);\n    tempRMContainer.getContainer().setExecutionType(\n        existingRMContainer.getContainer().getExecutionType());\n\n    ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n    return existingRMContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer, matchedContainerId-ContainerId]",
            "newValue": "[tempRMContainer-RMContainer, existingRMContainer-RMContainer, updateType-ContainerUpdateType]"
          }
        }
      ]
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,27 @@\n+  private RMContainer swapContainer(RMContainer rmContainer, ContainerId\n+      matchedContainerId) {\n+    RMContainer existingRMContainer \u003d\n+        getRMContainer(matchedContainerId);\n+    if (existingRMContainer !\u003d null) {\n+      // Swap updated container with the existing container\n+      Container updatedContainer \u003d rmContainer.getContainer();\n+\n+      Container newContainer \u003d Container.newInstance(matchedContainerId,\n+          existingRMContainer.getContainer().getNodeId(),\n+          existingRMContainer.getContainer().getNodeHttpAddress(),\n+          updatedContainer.getResource(),\n+          existingRMContainer.getContainer().getPriority(), null,\n+          updatedContainer.getExecutionType());\n+      newContainer.setAllocationRequestId(\n+          existingRMContainer.getContainer().getAllocationRequestId());\n+      newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n+\n+      rmContainer.getContainer().setResource(\n+          existingRMContainer.getContainer().getResource());\n+      rmContainer.getContainer().setExecutionType(\n+          existingRMContainer.getContainer().getExecutionType());\n+\n+      ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n+    }\n+    return existingRMContainer;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private RMContainer swapContainer(RMContainer rmContainer, ContainerId\n      matchedContainerId) {\n    RMContainer existingRMContainer \u003d\n        getRMContainer(matchedContainerId);\n    if (existingRMContainer !\u003d null) {\n      // Swap updated container with the existing container\n      Container updatedContainer \u003d rmContainer.getContainer();\n\n      Container newContainer \u003d Container.newInstance(matchedContainerId,\n          existingRMContainer.getContainer().getNodeId(),\n          existingRMContainer.getContainer().getNodeHttpAddress(),\n          updatedContainer.getResource(),\n          existingRMContainer.getContainer().getPriority(), null,\n          updatedContainer.getExecutionType());\n      newContainer.setAllocationRequestId(\n          existingRMContainer.getContainer().getAllocationRequestId());\n      newContainer.setVersion(existingRMContainer.getContainer().getVersion());\n\n      rmContainer.getContainer().setResource(\n          existingRMContainer.getContainer().getResource());\n      rmContainer.getContainer().setExecutionType(\n          existingRMContainer.getContainer().getExecutionType());\n\n      ((RMContainerImpl)existingRMContainer).setContainer(newContainer);\n    }\n    return existingRMContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"
    }
  }
}