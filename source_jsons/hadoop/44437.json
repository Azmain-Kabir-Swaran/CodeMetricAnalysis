{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "parseResourcesString",
  "functionId": "parseResourcesString___resourcesStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
  "functionStartLine": 1346,
  "functionEndLine": 1379,
  "numCommitsSeen": 73,
  "timeTaken": 1329,
  "changeHistory": [
    "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14"
  ],
  "changeHistoryShort": {
    "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7242. Support to specify values of different resource types in DistributedShell for easier testing. Contributed by Gergely Nov√°k.\n",
      "commitDate": "07/01/18 10:29 PM",
      "commitName": "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,34 @@\n+  static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n+    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n+\n+    // Ignore the grouping \"[]\"\n+    if (resourcesStr.startsWith(\"[\")) {\n+      resourcesStr \u003d resourcesStr.substring(1);\n+    }\n+    if (resourcesStr.endsWith(\"]\")) {\n+      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length());\n+    }\n+\n+    for (String resource : resourcesStr.trim().split(\",\")) {\n+      resource \u003d resource.trim();\n+      if (!resource.matches(\"^[^\u003d]+\u003d\\\\d+\\\\s?\\\\w*$\")) {\n+        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \" +\n+            \"valid resource type/amount pair. \" +\n+            \"Please provide key\u003damount pairs separated by commas.\");\n+      }\n+      String[] splits \u003d resource.split(\"\u003d\");\n+      String key \u003d splits[0], value \u003d splits[1];\n+      String units \u003d ResourceUtils.getUnits(value);\n+      String valueWithoutUnit \u003d value.substring(\n+          0, value.length() - units.length()).trim();\n+      Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n+      if (!units.isEmpty()) {\n+        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n+      }\n+      if (key.equals(\"memory\")) {\n+        key \u003d ResourceInformation.MEMORY_URI;\n+      }\n+      resources.put(key, resourceValue);\n+    }\n+    return resources;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n\n    // Ignore the grouping \"[]\"\n    if (resourcesStr.startsWith(\"[\")) {\n      resourcesStr \u003d resourcesStr.substring(1);\n    }\n    if (resourcesStr.endsWith(\"]\")) {\n      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length());\n    }\n\n    for (String resource : resourcesStr.trim().split(\",\")) {\n      resource \u003d resource.trim();\n      if (!resource.matches(\"^[^\u003d]+\u003d\\\\d+\\\\s?\\\\w*$\")) {\n        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \" +\n            \"valid resource type/amount pair. \" +\n            \"Please provide key\u003damount pairs separated by commas.\");\n      }\n      String[] splits \u003d resource.split(\"\u003d\");\n      String key \u003d splits[0], value \u003d splits[1];\n      String units \u003d ResourceUtils.getUnits(value);\n      String valueWithoutUnit \u003d value.substring(\n          0, value.length() - units.length()).trim();\n      Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n      if (!units.isEmpty()) {\n        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n      }\n      if (key.equals(\"memory\")) {\n        key \u003d ResourceInformation.MEMORY_URI;\n      }\n      resources.put(key, resourceValue);\n    }\n    return resources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java"
    }
  }
}