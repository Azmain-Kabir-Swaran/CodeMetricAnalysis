{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenAuthenticationHandler.java",
  "functionName": "authenticate",
  "functionId": "authenticate___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
  "functionStartLine": 386,
  "functionEndLine": 414,
  "numCommitsSeen": 29,
  "timeTaken": 3669,
  "changeHistory": [
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
    "e98c0c7a1c2fe9380c90f7530a46752153cc37f2",
    "35356de1ba1cad0fa469ff546263290109c61b77",
    "cdce88376a60918dfe2f3bcd82a7666d74992a19",
    "70b218748badf079c859c3af2b468a0b7b49c333",
    "d1ae479aa5ae4d3e7ec80e35892e1699c378f813",
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
    "be9c67930b57c516723d566625f9036a88a84055",
    "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
    "4d4560189adccb941a3dc5eee7add134adbf6519"
  ],
  "changeHistoryShort": {
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ybodychange",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ybodychange",
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e": "Ybodychange",
    "e98c0c7a1c2fe9380c90f7530a46752153cc37f2": "Ybodychange",
    "35356de1ba1cad0fa469ff546263290109c61b77": "Ybodychange",
    "cdce88376a60918dfe2f3bcd82a7666d74992a19": "Ybodychange",
    "70b218748badf079c859c3af2b468a0b7b49c333": "Ybodychange",
    "d1ae479aa5ae4d3e7ec80e35892e1699c378f813": "Ybodychange",
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509": "Ybodychange",
    "be9c67930b57c516723d566625f9036a88a84055": "Ybodychange",
    "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b": "Yfilerename",
    "4d4560189adccb941a3dc5eee7add134adbf6519": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "10/04/18 3:38 PM",
      "commitNameOld": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 26.91,
      "commitsBetweenForRepo": 686,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n     if (delegationParam !\u003d null) {\n       LOG.debug(\"Authenticating with dt param: {}\", delegationParam);\n       try {\n         Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         token \u003d null;\n         HttpExceptionUtils.createServletExceptionResponse(response,\n             HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n-      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(),\n-          request.getRequestURL());\n+      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(), request);\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      LOG.debug(\"Authenticating with dt param: {}\", delegationParam);\n      try {\n        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(), request);\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "06/10/17 10:12 AM",
      "commitNameOld": "2b08a1fc644904a37545107666efc25b3552542d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 186.23,
      "commitsBetweenForRepo": 1374,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n     if (delegationParam !\u003d null) {\n       LOG.debug(\"Authenticating with dt param: {}\", delegationParam);\n       try {\n         Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         token \u003d null;\n         HttpExceptionUtils.createServletExceptionResponse(response,\n             HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n-      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(), request);\n+      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(),\n+          request.getRequestURL());\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      LOG.debug(\"Authenticating with dt param: {}\", delegationParam);\n      try {\n        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(),\n          request.getRequestURL());\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13174. Add more debug logs for delegation tokens and authentication.\n",
      "commitDate": "08/06/17 9:34 PM",
      "commitName": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "28/11/16 9:07 PM",
      "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 191.98,
      "commitsBetweenForRepo": 1032,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n     if (delegationParam !\u003d null) {\n+      LOG.debug(\"Authenticating with dt param: {}\", delegationParam);\n       try {\n         Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         token \u003d null;\n         HttpExceptionUtils.createServletExceptionResponse(response,\n             HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n+      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(), request);\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      LOG.debug(\"Authenticating with dt param: {}\", delegationParam);\n      try {\n        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      LOG.debug(\"Falling back to {} (req\u003d{})\", authHandler.getClass(), request);\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "e98c0c7a1c2fe9380c90f7530a46752153cc37f2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13228. Add delegation token to the connection in DelegationTokenAuthenticator. Contributed by Xiao Chen.\"\n\nThis reverts commit 35356de1ba1cad0fa469ff546263290109c61b77.\n",
      "commitDate": "23/06/16 11:08 AM",
      "commitName": "e98c0c7a1c2fe9380c90f7530a46752153cc37f2",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "01/06/16 1:13 PM",
      "commitNameOld": "35356de1ba1cad0fa469ff546263290109c61b77",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 21.91,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n-    LOG.debug(\"Authenticating with delegationParam: {}, query string: {}\",\n-        delegationParam, request.getQueryString());\n     if (delegationParam !\u003d null) {\n       try {\n         Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         token \u003d null;\n         HttpExceptionUtils.createServletExceptionResponse(response,\n             HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "35356de1ba1cad0fa469ff546263290109c61b77": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13228. Add delegation token to the connection in DelegationTokenAuthenticator. Contributed by Xiao Chen.\n",
      "commitDate": "01/06/16 1:13 PM",
      "commitName": "35356de1ba1cad0fa469ff546263290109c61b77",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/04/15 11:31 AM",
      "commitNameOld": "424a00daa069bf2049014fd46ad152ec5fc77ac8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 407.07,
      "commitsBetweenForRepo": 3016,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n+    LOG.debug(\"Authenticating with delegationParam: {}, query string: {}\",\n+        delegationParam, request.getQueryString());\n     if (delegationParam !\u003d null) {\n       try {\n         Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         token \u003d null;\n         HttpExceptionUtils.createServletExceptionResponse(response,\n             HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    LOG.debug(\"Authenticating with delegationParam: {}, query string: {}\",\n        delegationParam, request.getQueryString());\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "cdce88376a60918dfe2f3bcd82a7666d74992a19": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11181. Generalized o.a.h.s.t.d.DelegationTokenManager to handle all sub-classes of AbstractDelegationTokenIdentifier. Contributed by Zhijie Shen.\n",
      "commitDate": "14/10/14 11:35 AM",
      "commitName": "cdce88376a60918dfe2f3bcd82a7666d74992a19",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "20/09/14 8:21 AM",
      "commitNameOld": "db890eef3208cc557476fa510f7a253ba22bc68a",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 24.13,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n     if (delegationParam !\u003d null) {\n       try {\n-        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n-            new Token\u003cDelegationTokenIdentifier\u003e();\n+        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         token \u003d null;\n         HttpExceptionUtils.createServletExceptionResponse(response,\n             HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cAbstractDelegationTokenIdentifier\u003e dt \u003d new Token();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "70b218748badf079c859c3af2b468a0b7b49c333": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
      "commitDate": "04/09/14 9:11 AM",
      "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/08/14 2:45 PM",
      "commitNameOld": "d1ae479aa5ae4d3e7ec80e35892e1699c378f813",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d getDelegationToken(request);\n     if (delegationParam !\u003d null) {\n       try {\n         Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n             new Token\u003cDelegationTokenIdentifier\u003e();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n-        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n-            ex.toString(), ex);\n+        token \u003d null;\n+        HttpExceptionUtils.createServletExceptionResponse(response,\n+            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n       }\n     } else {\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n            new Token\u003cDelegationTokenIdentifier\u003e();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        token \u003d null;\n        HttpExceptionUtils.createServletExceptionResponse(response,\n            HttpServletResponse.SC_FORBIDDEN, new AuthenticationException(ex));\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "d1ae479aa5ae4d3e7ec80e35892e1699c378f813": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10880. Move HTTP delegation tokens out of URL querystring to a header. (tucu)\n",
      "commitDate": "28/08/14 2:45 PM",
      "commitName": "d1ae479aa5ae4d3e7ec80e35892e1699c378f813",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "14/08/14 10:03 PM",
      "commitNameOld": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.7,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n-    String delegationParam \u003d ServletUtils.getParameter(request,\n-        KerberosDelegationTokenAuthenticator.DELEGATION_PARAM);\n+    String delegationParam \u003d getDelegationToken(request);\n     if (delegationParam !\u003d null) {\n       try {\n         Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n             new Token\u003cDelegationTokenIdentifier\u003e();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n         request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n             ex.toString(), ex);\n       }\n     } else {\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d getDelegationToken(request);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n            new Token\u003cDelegationTokenIdentifier\u003e();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n            ex.toString(), ex);\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10835. Implement HTTP proxyuser support in HTTP authentication client/server libraries. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617384 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/08/14 5:10 PM",
      "commitName": "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/14 9:58 PM",
      "commitNameOld": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 3.8,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n       throws IOException, AuthenticationException {\n     AuthenticationToken token;\n     String delegationParam \u003d ServletUtils.getParameter(request,\n         KerberosDelegationTokenAuthenticator.DELEGATION_PARAM);\n     if (delegationParam !\u003d null) {\n       try {\n         Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n             new Token\u003cDelegationTokenIdentifier\u003e();\n         dt.decodeFromUrlString(delegationParam);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n             getType());\n         token.setExpires(0);\n+        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n       } catch (Throwable ex) {\n         throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n             ex.toString(), ex);\n       }\n     } else {\n       token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d ServletUtils.getParameter(request,\n        KerberosDelegationTokenAuthenticator.DELEGATION_PARAM);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n            new Token\u003cDelegationTokenIdentifier\u003e();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n        request.setAttribute(DELEGATION_TOKEN_UGI_ATTRIBUTE, ugi);\n      } catch (Throwable ex) {\n        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n            ex.toString(), ex);\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "be9c67930b57c516723d566625f9036a88a84055": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:58 PM",
      "commitName": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/14 9:55 PM",
      "commitNameOld": "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n-                                          HttpServletResponse response)\n-    throws IOException, AuthenticationException {\n+      HttpServletResponse response)\n+      throws IOException, AuthenticationException {\n     AuthenticationToken token;\n-    String delegationParam \u003d\n-      request.getParameter(HttpFSKerberosAuthenticator.DELEGATION_PARAM);\n+    String delegationParam \u003d ServletUtils.getParameter(request,\n+        KerberosDelegationTokenAuthenticator.DELEGATION_PARAM);\n     if (delegationParam !\u003d null) {\n       try {\n         Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n-          new Token\u003cDelegationTokenIdentifier\u003e();\n+            new Token\u003cDelegationTokenIdentifier\u003e();\n         dt.decodeFromUrlString(delegationParam);\n-        DelegationTokenManager tokenManager \u003d\n-          HttpFSServerWebApp.get().get(DelegationTokenManager.class);\n         UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n         final String shortName \u003d ugi.getShortUserName();\n \n         // creating a ephemeral token\n         token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n-                                        getType());\n+            getType());\n         token.setExpires(0);\n       } catch (Throwable ex) {\n         throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n-                                          ex.toString(), ex);\n+            ex.toString(), ex);\n       }\n     } else {\n-      token \u003d super.authenticate(request, response);\n+      token \u003d authHandler.authenticate(request, response);\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d ServletUtils.getParameter(request,\n        KerberosDelegationTokenAuthenticator.DELEGATION_PARAM);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n            new Token\u003cDelegationTokenIdentifier\u003e();\n        dt.decodeFromUrlString(delegationParam);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n            getType());\n        token.setExpires(0);\n      } catch (Throwable ex) {\n        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n            ex.toString(), ex);\n      }\n    } else {\n      token \u003d authHandler.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 1. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616671 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:55 PM",
      "commitName": "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/14 9:27 PM",
      "commitNameOld": "2ac640ec751f665365d548104b3713e414f53351",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n                                          HttpServletResponse response)\n    throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d\n      request.getParameter(HttpFSKerberosAuthenticator.DELEGATION_PARAM);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n          new Token\u003cDelegationTokenIdentifier\u003e();\n        dt.decodeFromUrlString(delegationParam);\n        DelegationTokenManager tokenManager \u003d\n          HttpFSServerWebApp.get().get(DelegationTokenManager.class);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n                                        getType());\n        token.setExpires(0);\n      } catch (Throwable ex) {\n        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n                                          ex.toString(), ex);\n      }\n    } else {\n      token \u003d super.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSKerberosAuthenticationHandler.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java"
      }
    },
    "4d4560189adccb941a3dc5eee7add134adbf6519": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/12 6:39 AM",
      "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,29 @@\n+  public AuthenticationToken authenticate(HttpServletRequest request,\n+                                          HttpServletResponse response)\n+    throws IOException, AuthenticationException {\n+    AuthenticationToken token;\n+    String delegationParam \u003d\n+      request.getParameter(HttpFSKerberosAuthenticator.DELEGATION_PARAM);\n+    if (delegationParam !\u003d null) {\n+      try {\n+        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n+          new Token\u003cDelegationTokenIdentifier\u003e();\n+        dt.decodeFromUrlString(delegationParam);\n+        DelegationTokenManager tokenManager \u003d\n+          HttpFSServerWebApp.get().get(DelegationTokenManager.class);\n+        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n+        final String shortName \u003d ugi.getShortUserName();\n+\n+        // creating a ephemeral token\n+        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n+                                        getType());\n+        token.setExpires(0);\n+      } catch (Throwable ex) {\n+        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n+                                          ex.toString(), ex);\n+      }\n+    } else {\n+      token \u003d super.authenticate(request, response);\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n                                          HttpServletResponse response)\n    throws IOException, AuthenticationException {\n    AuthenticationToken token;\n    String delegationParam \u003d\n      request.getParameter(HttpFSKerberosAuthenticator.DELEGATION_PARAM);\n    if (delegationParam !\u003d null) {\n      try {\n        Token\u003cDelegationTokenIdentifier\u003e dt \u003d\n          new Token\u003cDelegationTokenIdentifier\u003e();\n        dt.decodeFromUrlString(delegationParam);\n        DelegationTokenManager tokenManager \u003d\n          HttpFSServerWebApp.get().get(DelegationTokenManager.class);\n        UserGroupInformation ugi \u003d tokenManager.verifyToken(dt);\n        final String shortName \u003d ugi.getShortUserName();\n\n        // creating a ephemeral token\n        token \u003d new AuthenticationToken(shortName, ugi.getUserName(),\n                                        getType());\n        token.setExpires(0);\n      } catch (Throwable ex) {\n        throw new AuthenticationException(\"Could not verify DelegationToken, \" +\n                                          ex.toString(), ex);\n      }\n    } else {\n      token \u003d super.authenticate(request, response);\n    }\n    return token;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSKerberosAuthenticationHandler.java"
    }
  }
}