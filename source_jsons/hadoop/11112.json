{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DiskBalancer.java",
  "functionName": "copyBlocks",
  "functionId": "copyBlocks___pair-VolumePair__item-DiskBalancerWorkItem",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
  "functionStartLine": 1004,
  "functionEndLine": 1145,
  "numCommitsSeen": 32,
  "timeTaken": 3036,
  "changeHistory": [
    "0e79a865822eed05f3f8433976b2cfef8f427f25",
    "59a3038bc3d7913dca3de971026bc32cef536a2d",
    "8641a2c08b0ce0f1f23cf2d508baccc4f627a385",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613",
    "03f519a757ce83d76e7fc9f6aadf271e38bb9f6d",
    "bee9f57f5ca9f037ade932c6fd01b0dad47a1296",
    "d84ab8a5786c9320e4708b2f0d54f978fee5ba95",
    "7e2be5c4a0b68b556ec6afcb0e14e0ab5ef1a9b2",
    "1594b472bb9df7537dbc001411c99058cc11ba41",
    "2b1b2faf76a7ff148650a7836935a85439f60c49"
  ],
  "changeHistoryShort": {
    "0e79a865822eed05f3f8433976b2cfef8f427f25": "Ybodychange",
    "59a3038bc3d7913dca3de971026bc32cef536a2d": "Ybodychange",
    "8641a2c08b0ce0f1f23cf2d508baccc4f627a385": "Ybodychange",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": "Ybodychange",
    "03f519a757ce83d76e7fc9f6aadf271e38bb9f6d": "Ybodychange",
    "bee9f57f5ca9f037ade932c6fd01b0dad47a1296": "Ybodychange",
    "d84ab8a5786c9320e4708b2f0d54f978fee5ba95": "Ybodychange",
    "7e2be5c4a0b68b556ec6afcb0e14e0ab5ef1a9b2": "Ybodychange",
    "1594b472bb9df7537dbc001411c99058cc11ba41": "Ybodychange",
    "2b1b2faf76a7ff148650a7836935a85439f60c49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e79a865822eed05f3f8433976b2cfef8f427f25": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14202. dfs.disk.balancer.max.disk.throughputInMBperSec property is not working as per set value. Contributed by Ranith Sardar.\n",
      "commitDate": "04/02/19 11:59 AM",
      "commitName": "0e79a865822eed05f3f8433976b2cfef8f427f25",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "02/07/18 9:43 PM",
      "commitNameOld": "59a3038bc3d7913dca3de971026bc32cef536a2d",
      "commitAuthorOld": "Bharat Viswanadham",
      "daysBetweenCommits": 216.64,
      "commitsBetweenForRepo": 1679,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,142 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       String sourceVolUuid \u003d pair.getSourceVolUuid();\n       String destVolUuuid \u003d pair.getDestVolUuid();\n \n       // When any of the DiskBalancerWorkItem volumes are not\n       // available, return after setting error in item.\n       FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n       if (source \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n       FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n       if (dest \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         final String errMsg \u003d \"Disk Balancer - Unable to support \" +\n                 \"transient storage type.\";\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n \n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBaseURI());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBaseURI(),\n                   dest.getBaseURI(), item.getErrorCount());\n               break;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBaseURI(), dest.getBaseURI(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n               this.setExitFlag();\n               continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                   \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n               this.setExitFlag();\n               continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n               continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n               break;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBaseURI(),\n                 dest.getBaseURI());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n-            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n+            Thread.sleep(computeDelay(block.getNumBytes(), TimeUnit.NANOSECONDS\n+                .toMillis(timeUsed), item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           } catch (RuntimeException ex) {\n             // Exiting if any run time exceptions.\n             LOG.error(\"Got an unexpected Runtime Exception {}\", ex);\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      String sourceVolUuid \u003d pair.getSourceVolUuid();\n      String destVolUuuid \u003d pair.getDestVolUuid();\n\n      // When any of the DiskBalancerWorkItem volumes are not\n      // available, return after setting error in item.\n      FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n      if (source \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n      FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n      if (dest \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        final String errMsg \u003d \"Disk Balancer - Unable to support \" +\n                \"transient storage type.\";\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBaseURI());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBaseURI(),\n                  dest.getBaseURI(), item.getErrorCount());\n              break;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBaseURI(), dest.getBaseURI(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n              this.setExitFlag();\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n              break;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBaseURI(),\n                dest.getBaseURI());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), TimeUnit.NANOSECONDS\n                .toMillis(timeUsed), item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          } catch (RuntimeException ex) {\n            // Exiting if any run time exceptions.\n            LOG.error(\"Got an unexpected Runtime Exception {}\", ex);\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "59a3038bc3d7913dca3de971026bc32cef536a2d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13715:diskbalancer does not work if one of the blockpools are empty on a Federated cluster. Contributed by Bharat Viswanadham\n",
      "commitDate": "02/07/18 9:43 PM",
      "commitName": "59a3038bc3d7913dca3de971026bc32cef536a2d",
      "commitAuthor": "Bharat Viswanadham",
      "commitDateOld": "06/03/18 9:09 AM",
      "commitNameOld": "7060725662cb3317ff2f0fcc38f965fd23e8e6aa",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 118.48,
      "commitsBetweenForRepo": 1461,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,136 +1,141 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       String sourceVolUuid \u003d pair.getSourceVolUuid();\n       String destVolUuuid \u003d pair.getDestVolUuid();\n \n       // When any of the DiskBalancerWorkItem volumes are not\n       // available, return after setting error in item.\n       FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n       if (source \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n       FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n       if (dest \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         final String errMsg \u003d \"Disk Balancer - Unable to support \" +\n                 \"transient storage type.\";\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n \n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBaseURI());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBaseURI(),\n                   dest.getBaseURI(), item.getErrorCount());\n               break;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBaseURI(), dest.getBaseURI(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n               this.setExitFlag();\n               continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                   \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n               this.setExitFlag();\n               continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n               continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n               break;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBaseURI(),\n                 dest.getBaseURI());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n+          } catch (RuntimeException ex) {\n+            // Exiting if any run time exceptions.\n+            LOG.error(\"Got an unexpected Runtime Exception {}\", ex);\n+            item.incErrorCount();\n+            this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      String sourceVolUuid \u003d pair.getSourceVolUuid();\n      String destVolUuuid \u003d pair.getDestVolUuid();\n\n      // When any of the DiskBalancerWorkItem volumes are not\n      // available, return after setting error in item.\n      FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n      if (source \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n      FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n      if (dest \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        final String errMsg \u003d \"Disk Balancer - Unable to support \" +\n                \"transient storage type.\";\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBaseURI());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBaseURI(),\n                  dest.getBaseURI(), item.getErrorCount());\n              break;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBaseURI(), dest.getBaseURI(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n              this.setExitFlag();\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n              break;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBaseURI(),\n                dest.getBaseURI());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          } catch (RuntimeException ex) {\n            // Exiting if any run time exceptions.\n            LOG.error(\"Got an unexpected Runtime Exception {}\", ex);\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "8641a2c08b0ce0f1f23cf2d508baccc4f627a385": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12045. Add log when Diskbalancer volume is transient storage type. Contributed by steven-wugang.\n",
      "commitDate": "27/06/17 12:39 AM",
      "commitName": "8641a2c08b0ce0f1f23cf2d508baccc4f627a385",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "10/10/16 3:30 PM",
      "commitNameOld": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 259.38,
      "commitsBetweenForRepo": 1515,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,132 +1,136 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       String sourceVolUuid \u003d pair.getSourceVolUuid();\n       String destVolUuuid \u003d pair.getDestVolUuid();\n \n       // When any of the DiskBalancerWorkItem volumes are not\n       // available, return after setting error in item.\n       FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n       if (source \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n       FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n       if (dest \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n \n+      if (source.isTransientStorage() || dest.isTransientStorage()) {\n+        final String errMsg \u003d \"Disk Balancer - Unable to support \" +\n+                \"transient storage type.\";\n+        LOG.error(errMsg);\n+        item.setErrMsg(errMsg);\n+        return;\n+      }\n+\n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n-      if (source.isTransientStorage() || dest.isTransientStorage()) {\n-        return;\n-      }\n-\n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBaseURI());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBaseURI(),\n                   dest.getBaseURI(), item.getErrorCount());\n               break;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBaseURI(), dest.getBaseURI(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n               this.setExitFlag();\n               continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                   \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n               this.setExitFlag();\n               continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n               continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n               break;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBaseURI(),\n                 dest.getBaseURI());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      String sourceVolUuid \u003d pair.getSourceVolUuid();\n      String destVolUuuid \u003d pair.getDestVolUuid();\n\n      // When any of the DiskBalancerWorkItem volumes are not\n      // available, return after setting error in item.\n      FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n      if (source \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n      FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n      if (dest \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        final String errMsg \u003d \"Disk Balancer - Unable to support \" +\n                \"transient storage type.\";\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBaseURI());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBaseURI(),\n                  dest.getBaseURI(), item.getErrorCount());\n              break;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBaseURI(), dest.getBaseURI(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n              this.setExitFlag();\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n              break;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBaseURI(),\n                dest.getBaseURI());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "10/10/16 3:30 PM",
      "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "27/09/16 9:35 PM",
      "commitNameOld": "03f519a757ce83d76e7fc9f6aadf271e38bb9f6d",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 12.75,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,134 +1,132 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       String sourceVolUuid \u003d pair.getSourceVolUuid();\n       String destVolUuuid \u003d pair.getDestVolUuid();\n \n       // When any of the DiskBalancerWorkItem volumes are not\n       // available, return after setting error in item.\n       FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n       if (source \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n       FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n       if (dest \u003d\u003d null) {\n         final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n             + pair.getDestVolBasePath();\n         LOG.error(errMsg);\n         item.setErrMsg(errMsg);\n         return;\n       }\n \n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         return;\n       }\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n-              source.getBasePath());\n+              source.getBaseURI());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n-                      \"error count: {}\", source.getBasePath(),\n-                  dest.getBasePath(), item.getErrorCount());\n-              this.setExitFlag();\n-              continue;\n+                      \"error count: {}\", source.getBaseURI(),\n+                  dest.getBaseURI(), item.getErrorCount());\n+              break;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n-                  source.getBasePath(), dest.getBasePath(),\n+                  source.getBaseURI(), dest.getBaseURI(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n               this.setExitFlag();\n               continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n-                  \"Dest:{}\", source.getBasePath(), dest.getBasePath());\n+                  \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n               this.setExitFlag();\n               continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n               continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n-                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n-              this.setExitFlag();\n-              continue;\n+                  \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n+              break;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n-                block.getNumBytes(), source.getBasePath(),\n-                dest.getBasePath());\n+                block.getNumBytes(), source.getBaseURI(),\n+                dest.getBaseURI());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      String sourceVolUuid \u003d pair.getSourceVolUuid();\n      String destVolUuuid \u003d pair.getDestVolUuid();\n\n      // When any of the DiskBalancerWorkItem volumes are not\n      // available, return after setting error in item.\n      FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n      if (source \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n      FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n      if (dest \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        return;\n      }\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBaseURI());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBaseURI(),\n                  dest.getBaseURI(), item.getErrorCount());\n              break;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBaseURI(), dest.getBaseURI(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"Dest:{}\", source.getBaseURI(), dest.getBaseURI());\n              this.setExitFlag();\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBaseURI(), block.getNumBytes());\n              break;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBaseURI(),\n                dest.getBaseURI());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "03f519a757ce83d76e7fc9f6aadf271e38bb9f6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9850. DiskBalancer: Explore removing references to FsVolumeSpi. Contributed by Manoj Govindassamy.\n",
      "commitDate": "27/09/16 9:35 PM",
      "commitName": "03f519a757ce83d76e7fc9f6aadf271e38bb9f6d",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "09/09/16 3:00 PM",
      "commitNameOld": "bee9f57f5ca9f037ade932c6fd01b0dad47a1296",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 18.27,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,134 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n-      FsVolumeSpi source \u003d pair.getSource();\n-      FsVolumeSpi dest \u003d pair.getDest();\n+      String sourceVolUuid \u003d pair.getSourceVolUuid();\n+      String destVolUuuid \u003d pair.getDestVolUuid();\n+\n+      // When any of the DiskBalancerWorkItem volumes are not\n+      // available, return after setting error in item.\n+      FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n+      if (source \u003d\u003d null) {\n+        final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n+            + pair.getDestVolBasePath();\n+        LOG.error(errMsg);\n+        item.setErrMsg(errMsg);\n+        return;\n+      }\n+      FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n+      if (dest \u003d\u003d null) {\n+        final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n+            + pair.getDestVolBasePath();\n+        LOG.error(errMsg);\n+        item.setErrMsg(errMsg);\n+        return;\n+      }\n+\n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         return;\n       }\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBasePath());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBasePath(),\n                   dest.getBasePath(), item.getErrorCount());\n               this.setExitFlag();\n               continue;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBasePath(), dest.getBasePath(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n               this.setExitFlag();\n               continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n-                  \"dest:{}\", source.getBasePath(), dest.getBasePath());\n+                  \"Dest:{}\", source.getBasePath(), dest.getBasePath());\n               this.setExitFlag();\n               continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n               continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n               this.setExitFlag();\n               continue;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBasePath(),\n                 dest.getBasePath());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      String sourceVolUuid \u003d pair.getSourceVolUuid();\n      String destVolUuuid \u003d pair.getDestVolUuid();\n\n      // When any of the DiskBalancerWorkItem volumes are not\n      // available, return after setting error in item.\n      FsVolumeSpi source \u003d getFsVolume(this.dataset, sourceVolUuid);\n      if (source \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find source volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n      FsVolumeSpi dest \u003d getFsVolume(this.dataset, destVolUuuid);\n      if (dest \u003d\u003d null) {\n        final String errMsg \u003d \"Disk Balancer - Unable to find dest volume: \"\n            + pair.getDestVolBasePath();\n        LOG.error(errMsg);\n        item.setErrMsg(errMsg);\n        return;\n      }\n\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        return;\n      }\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBasePath());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBasePath(),\n                  dest.getBasePath(), item.getErrorCount());\n              this.setExitFlag();\n              continue;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBasePath(), dest.getBasePath(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"Dest:{}\", source.getBasePath(), dest.getBasePath());\n              this.setExitFlag();\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n              this.setExitFlag();\n              continue;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBasePath(),\n                dest.getBasePath());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "bee9f57f5ca9f037ade932c6fd01b0dad47a1296": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10808. DiskBalancer does not execute multi-steps plan-redux. Contributed by Anu Engineer.\n",
      "commitDate": "09/09/16 3:00 PM",
      "commitName": "bee9f57f5ca9f037ade932c6fd01b0dad47a1296",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "08/09/16 8:00 PM",
      "commitNameOld": "baab48922a301d639ea84ecf00d8a7616acd950d",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,114 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       FsVolumeSpi source \u003d pair.getSource();\n       FsVolumeSpi dest \u003d pair.getDest();\n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         return;\n       }\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBasePath());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBasePath(),\n                   dest.getBasePath(), item.getErrorCount());\n-              break;\n+              this.setExitFlag();\n+              continue;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBasePath(), dest.getBasePath(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n-              break;\n+              this.setExitFlag();\n+              continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                   \"dest:{}\", source.getBasePath(), dest.getBasePath());\n-              break;\n+              this.setExitFlag();\n+              continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n-              break;\n+              continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n-              break;\n+              this.setExitFlag();\n+              continue;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBasePath(),\n                 dest.getBasePath());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      FsVolumeSpi source \u003d pair.getSource();\n      FsVolumeSpi dest \u003d pair.getDest();\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        return;\n      }\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBasePath());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBasePath(),\n                  dest.getBasePath(), item.getErrorCount());\n              this.setExitFlag();\n              continue;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBasePath(), dest.getBasePath(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"dest:{}\", source.getBasePath(), dest.getBasePath());\n              this.setExitFlag();\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n              this.setExitFlag();\n              continue;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBasePath(),\n                dest.getBasePath());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "d84ab8a5786c9320e4708b2f0d54f978fee5ba95": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10598. DiskBalancer does not execute multi-steps plan. Contributed by Lei (Eddy) Xu.\n",
      "commitDate": "26/07/16 4:01 PM",
      "commitName": "d84ab8a5786c9320e4708b2f0d54f978fee5ba95",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "14/07/16 10:40 AM",
      "commitNameOld": "382dff74751b745de28a212df4897f525111d228",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 12.22,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,110 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       FsVolumeSpi source \u003d pair.getSource();\n       FsVolumeSpi dest \u003d pair.getDest();\n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n       startTime \u003d Time.now();\n       item.setStartTime(startTime);\n       secondsElapsed \u003d 0;\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         return;\n       }\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBasePath());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBasePath(),\n                   dest.getBasePath(), item.getErrorCount());\n-              this.setExitFlag();\n-              continue;\n+              break;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBasePath(), dest.getBasePath(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n-              this.setExitFlag();\n-              continue;\n+              break;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n-              this.setExitFlag();\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                   \"dest:{}\", source.getBasePath(), dest.getBasePath());\n-              continue;\n+              break;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n-              continue;\n+              break;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n-              this.setExitFlag();\n-              continue;\n+              break;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBasePath(),\n                 dest.getBasePath());\n \n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n             // We delay updating the info to avoid confusing the user.\n             // This way we report the copy only if it is under the\n             // throughput threshold.\n             item.incCopiedSoFar(block.getNumBytes());\n             item.incBlocksCopied();\n             secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                 startTime);\n             item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      FsVolumeSpi source \u003d pair.getSource();\n      FsVolumeSpi dest \u003d pair.getDest();\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        return;\n      }\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBasePath());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBasePath(),\n                  dest.getBasePath(), item.getErrorCount());\n              break;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBasePath(), dest.getBasePath(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              break;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"dest:{}\", source.getBasePath(), dest.getBasePath());\n              break;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              break;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n              break;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBasePath(),\n                dest.getBasePath());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "7e2be5c4a0b68b556ec6afcb0e14e0ab5ef1a9b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10518. DiskBalancer: Pretty-print json in Query command. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "7e2be5c4a0b68b556ec6afcb0e14e0ab5ef1a9b2",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:20 PM",
      "commitNameOld": "1594b472bb9df7537dbc001411c99058cc11ba41",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,114 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n       FsVolumeSpi source \u003d pair.getSource();\n       FsVolumeSpi dest \u003d pair.getDest();\n       List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n+      startTime \u003d Time.now();\n+      item.setStartTime(startTime);\n+      secondsElapsed \u003d 0;\n \n       if (source.isTransientStorage() || dest.isTransientStorage()) {\n         return;\n       }\n \n       try {\n         openPoolIters(source, poolIters);\n         if (poolIters.size() \u003d\u003d 0) {\n           LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n               source.getBasePath());\n           return;\n         }\n \n         while (shouldRun()) {\n           try {\n \n             // Check for the max error count constraint.\n             if (item.getErrorCount() \u003e getMaxError(item)) {\n               LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                       \"error count: {}\", source.getBasePath(),\n                   dest.getBasePath(), item.getErrorCount());\n               this.setExitFlag();\n               continue;\n             }\n \n             // Check for the block tolerance constraint.\n             if (isCloseEnough(item)) {\n               LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                       \"blocks.\",\n                   source.getBasePath(), dest.getBasePath(),\n                   item.getBytesCopied(), item.getBlocksCopied());\n               this.setExitFlag();\n               continue;\n             }\n \n             ExtendedBlock block \u003d getNextBlock(poolIters, item);\n             // we are not able to find any blocks to copy.\n             if (block \u003d\u003d null) {\n               this.setExitFlag();\n               LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n-                      \"dest:{}\", source.getBasePath(), dest.getBasePath());\n+                  \"dest:{}\", source.getBasePath(), dest.getBasePath());\n               continue;\n             }\n \n             // check if someone told us exit, treat this as an interruption\n             // point\n             // for the thread, since both getNextBlock and moveBlocAcrossVolume\n             // can take some time.\n             if (!shouldRun()) {\n               continue;\n             }\n \n             long timeUsed;\n             // There is a race condition here, but we will get an IOException\n             // if dest has no space, which we handle anyway.\n             if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n               long begin \u003d System.nanoTime();\n               this.dataset.moveBlockAcrossVolumes(block, dest);\n               long now \u003d System.nanoTime();\n               timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n             } else {\n \n               // Technically it is possible for us to find a smaller block and\n               // make another copy, but opting for the safer choice of just\n               // exiting here.\n               LOG.error(\"Destination volume: {} does not have enough space to\" +\n                   \" accommodate a block. Block Size: {} Exiting from\" +\n                   \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n               this.setExitFlag();\n               continue;\n             }\n \n             LOG.debug(\"Moved block with size {} from  {} to {}\",\n                 block.getNumBytes(), source.getBasePath(),\n                 dest.getBasePath());\n \n-            item.incCopiedSoFar(block.getNumBytes());\n-            item.incBlocksCopied();\n-\n             // Check for the max throughput constraint.\n             // We sleep here to keep the promise that we will not\n             // copy more than Max MB/sec. we sleep enough time\n             // to make sure that our promise is good on average.\n             // Because we sleep, if a shutdown or cancel call comes in\n             // we exit via Thread Interrupted exception.\n             Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n \n+            // We delay updating the info to avoid confusing the user.\n+            // This way we report the copy only if it is under the\n+            // throughput threshold.\n+            item.incCopiedSoFar(block.getNumBytes());\n+            item.incBlocksCopied();\n+            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n+                startTime);\n+            item.setSecondsElapsed(secondsElapsed);\n           } catch (IOException ex) {\n             LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n             item.incErrorCount();\n           } catch (InterruptedException e) {\n             LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n             Thread.currentThread().interrupt();\n             item.incErrorCount();\n             this.setExitFlag();\n           }\n         }\n       } finally {\n         // Close all Iters.\n         closePoolIters(poolIters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      FsVolumeSpi source \u003d pair.getSource();\n      FsVolumeSpi dest \u003d pair.getDest();\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n      startTime \u003d Time.now();\n      item.setStartTime(startTime);\n      secondsElapsed \u003d 0;\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        return;\n      }\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBasePath());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBasePath(),\n                  dest.getBasePath(), item.getErrorCount());\n              this.setExitFlag();\n              continue;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBasePath(), dest.getBasePath(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              this.setExitFlag();\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                  \"dest:{}\", source.getBasePath(), dest.getBasePath());\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n              this.setExitFlag();\n              continue;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBasePath(),\n                dest.getBasePath());\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n            // We delay updating the info to avoid confusing the user.\n            // This way we report the copy only if it is under the\n            // throughput threshold.\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n            secondsElapsed \u003d TimeUnit.MILLISECONDS.toSeconds(Time.now() -\n                startTime);\n            item.setSecondsElapsed(secondsElapsed);\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "1594b472bb9df7537dbc001411c99058cc11ba41": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9543. DiskBalancer: Add Data mover. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:20 PM",
      "commitName": "1594b472bb9df7537dbc001411c99058cc11ba41",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:18 PM",
      "commitNameOld": "050677077beaf42255b3936952b8e816a9201203",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,106 @@\n     public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n+      FsVolumeSpi source \u003d pair.getSource();\n+      FsVolumeSpi dest \u003d pair.getDest();\n+      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n \n+      if (source.isTransientStorage() || dest.isTransientStorage()) {\n+        return;\n+      }\n+\n+      try {\n+        openPoolIters(source, poolIters);\n+        if (poolIters.size() \u003d\u003d 0) {\n+          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n+              source.getBasePath());\n+          return;\n+        }\n+\n+        while (shouldRun()) {\n+          try {\n+\n+            // Check for the max error count constraint.\n+            if (item.getErrorCount() \u003e getMaxError(item)) {\n+              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n+                      \"error count: {}\", source.getBasePath(),\n+                  dest.getBasePath(), item.getErrorCount());\n+              this.setExitFlag();\n+              continue;\n+            }\n+\n+            // Check for the block tolerance constraint.\n+            if (isCloseEnough(item)) {\n+              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n+                      \"blocks.\",\n+                  source.getBasePath(), dest.getBasePath(),\n+                  item.getBytesCopied(), item.getBlocksCopied());\n+              this.setExitFlag();\n+              continue;\n+            }\n+\n+            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n+            // we are not able to find any blocks to copy.\n+            if (block \u003d\u003d null) {\n+              this.setExitFlag();\n+              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n+                      \"dest:{}\", source.getBasePath(), dest.getBasePath());\n+              continue;\n+            }\n+\n+            // check if someone told us exit, treat this as an interruption\n+            // point\n+            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n+            // can take some time.\n+            if (!shouldRun()) {\n+              continue;\n+            }\n+\n+            long timeUsed;\n+            // There is a race condition here, but we will get an IOException\n+            // if dest has no space, which we handle anyway.\n+            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n+              long begin \u003d System.nanoTime();\n+              this.dataset.moveBlockAcrossVolumes(block, dest);\n+              long now \u003d System.nanoTime();\n+              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n+            } else {\n+\n+              // Technically it is possible for us to find a smaller block and\n+              // make another copy, but opting for the safer choice of just\n+              // exiting here.\n+              LOG.error(\"Destination volume: {} does not have enough space to\" +\n+                  \" accommodate a block. Block Size: {} Exiting from\" +\n+                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n+              this.setExitFlag();\n+              continue;\n+            }\n+\n+            LOG.debug(\"Moved block with size {} from  {} to {}\",\n+                block.getNumBytes(), source.getBasePath(),\n+                dest.getBasePath());\n+\n+            item.incCopiedSoFar(block.getNumBytes());\n+            item.incBlocksCopied();\n+\n+            // Check for the max throughput constraint.\n+            // We sleep here to keep the promise that we will not\n+            // copy more than Max MB/sec. we sleep enough time\n+            // to make sure that our promise is good on average.\n+            // Because we sleep, if a shutdown or cancel call comes in\n+            // we exit via Thread Interrupted exception.\n+            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n+\n+          } catch (IOException ex) {\n+            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n+            item.incErrorCount();\n+          } catch (InterruptedException e) {\n+            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n+            Thread.currentThread().interrupt();\n+            item.incErrorCount();\n+            this.setExitFlag();\n+          }\n+        }\n+      } finally {\n+        // Close all Iters.\n+        closePoolIters(poolIters);\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n      FsVolumeSpi source \u003d pair.getSource();\n      FsVolumeSpi dest \u003d pair.getDest();\n      List\u003cFsVolumeSpi.BlockIterator\u003e poolIters \u003d new LinkedList\u003c\u003e();\n\n      if (source.isTransientStorage() || dest.isTransientStorage()) {\n        return;\n      }\n\n      try {\n        openPoolIters(source, poolIters);\n        if (poolIters.size() \u003d\u003d 0) {\n          LOG.error(\"No block pools found on volume. volume : {}. Exiting.\",\n              source.getBasePath());\n          return;\n        }\n\n        while (shouldRun()) {\n          try {\n\n            // Check for the max error count constraint.\n            if (item.getErrorCount() \u003e getMaxError(item)) {\n              LOG.error(\"Exceeded the max error count. source {}, dest: {} \" +\n                      \"error count: {}\", source.getBasePath(),\n                  dest.getBasePath(), item.getErrorCount());\n              this.setExitFlag();\n              continue;\n            }\n\n            // Check for the block tolerance constraint.\n            if (isCloseEnough(item)) {\n              LOG.info(\"Copy from {} to {} done. copied {} bytes and {} \" +\n                      \"blocks.\",\n                  source.getBasePath(), dest.getBasePath(),\n                  item.getBytesCopied(), item.getBlocksCopied());\n              this.setExitFlag();\n              continue;\n            }\n\n            ExtendedBlock block \u003d getNextBlock(poolIters, item);\n            // we are not able to find any blocks to copy.\n            if (block \u003d\u003d null) {\n              this.setExitFlag();\n              LOG.error(\"No source blocks, exiting the copy. Source: {}, \" +\n                      \"dest:{}\", source.getBasePath(), dest.getBasePath());\n              continue;\n            }\n\n            // check if someone told us exit, treat this as an interruption\n            // point\n            // for the thread, since both getNextBlock and moveBlocAcrossVolume\n            // can take some time.\n            if (!shouldRun()) {\n              continue;\n            }\n\n            long timeUsed;\n            // There is a race condition here, but we will get an IOException\n            // if dest has no space, which we handle anyway.\n            if (dest.getAvailable() \u003e item.getBytesToCopy()) {\n              long begin \u003d System.nanoTime();\n              this.dataset.moveBlockAcrossVolumes(block, dest);\n              long now \u003d System.nanoTime();\n              timeUsed \u003d (now - begin) \u003e 0 ? now - begin : 0;\n            } else {\n\n              // Technically it is possible for us to find a smaller block and\n              // make another copy, but opting for the safer choice of just\n              // exiting here.\n              LOG.error(\"Destination volume: {} does not have enough space to\" +\n                  \" accommodate a block. Block Size: {} Exiting from\" +\n                  \" copyBlocks.\", dest.getBasePath(), block.getNumBytes());\n              this.setExitFlag();\n              continue;\n            }\n\n            LOG.debug(\"Moved block with size {} from  {} to {}\",\n                block.getNumBytes(), source.getBasePath(),\n                dest.getBasePath());\n\n            item.incCopiedSoFar(block.getNumBytes());\n            item.incBlocksCopied();\n\n            // Check for the max throughput constraint.\n            // We sleep here to keep the promise that we will not\n            // copy more than Max MB/sec. we sleep enough time\n            // to make sure that our promise is good on average.\n            // Because we sleep, if a shutdown or cancel call comes in\n            // we exit via Thread Interrupted exception.\n            Thread.sleep(computeDelay(block.getNumBytes(), timeUsed, item));\n\n          } catch (IOException ex) {\n            LOG.error(\"Exception while trying to copy blocks. error: {}\", ex);\n            item.incErrorCount();\n          } catch (InterruptedException e) {\n            LOG.error(\"Copy Block Thread interrupted, exiting the copy.\");\n            Thread.currentThread().interrupt();\n            item.incErrorCount();\n            this.setExitFlag();\n          }\n        }\n      } finally {\n        // Close all Iters.\n        closePoolIters(poolIters);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "2b1b2faf76a7ff148650a7836935a85439f60c49": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9671. DiskBalancer: SubmitPlan implementation. (Contributed by Anu Engineer)\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "2b1b2faf76a7ff148650a7836935a85439f60c49",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,3 @@\n+    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n+\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void copyBlocks(VolumePair pair, DiskBalancerWorkItem item) {\n\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java"
    }
  }
}