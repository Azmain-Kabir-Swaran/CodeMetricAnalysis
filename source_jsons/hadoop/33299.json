{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GpuDiscoverer.java",
  "functionName": "getGpuDeviceInformation",
  "functionId": "getGpuDeviceInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
  "functionStartLine": 113,
  "functionEndLine": 137,
  "numCommitsSeen": 12,
  "timeTaken": 5285,
  "changeHistory": [
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
    "18ee1092b471c5337f05809f8f01dae415e51a3a",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "46045c5cb3ab06a35df27879afbd1bc3c2a384dd",
    "dcaca19871a7aefc1f33cb6cb543ad4768ec6b50",
    "95fbbfed75dd309b5d56032ece64996165572287",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd"
  ],
  "changeHistoryShort": {
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "18ee1092b471c5337f05809f8f01dae415e51a3a": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "46045c5cb3ab06a35df27879afbd1bc3c2a384dd": "Ybodychange",
    "dcaca19871a7aefc1f33cb6cb543ad4768ec6b50": "Ybodychange",
    "95fbbfed75dd309b5d56032ece64996165572287": "Ymultichange(Ymodifierchange,Ybodychange)",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
      "commitDate": "21/08/19 7:44 AM",
      "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
          "commitDate": "21/08/19 7:44 AM",
          "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "02/08/19 2:24 AM",
          "commitNameOld": "95fc38f2e9011b16ca09ac44843a71a2cac45c99",
          "commitAuthorOld": "Adam Antal",
          "daysBetweenCommits": 19.22,
          "commitsBetweenForRepo": 196,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  synchronized GpuDeviceInformation getGpuDeviceInformation()\n+  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n-    validateConfOrThrowException();\n-\n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n-    String output;\n     try {\n-      output \u003d Shell.execCommand(environment,\n-          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n-      GpuDeviceInformationParser parser \u003d new GpuDeviceInformationParser();\n-      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n-      numOfErrorExecutionSinceLastSucceed \u003d 0;\n-      return lastDiscoveredGpuInformation;\n+      lastDiscoveredGpuInformation \u003d\n+          nvidiaBinaryHelper.getGpuDeviceInformation(pathOfGpuBinary);\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n       LOG.debug(msg);\n       throw new YarnException(msg, e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.warn(msg, e);\n-      }\n+      LOG.debug(msg, e);\n       throw e;\n     }\n+\n+    return lastDiscoveredGpuInformation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      lastDiscoveredGpuInformation \u003d\n          nvidiaBinaryHelper.getGpuDeviceInformation(pathOfGpuBinary);\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n      LOG.debug(msg);\n      throw new YarnException(msg, e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n      LOG.debug(msg, e);\n      throw e;\n    }\n\n    return lastDiscoveredGpuInformation;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
          "commitDate": "21/08/19 7:44 AM",
          "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "02/08/19 2:24 AM",
          "commitNameOld": "95fc38f2e9011b16ca09ac44843a71a2cac45c99",
          "commitAuthorOld": "Adam Antal",
          "daysBetweenCommits": 19.22,
          "commitsBetweenForRepo": 196,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  synchronized GpuDeviceInformation getGpuDeviceInformation()\n+  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n-    validateConfOrThrowException();\n-\n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n-    String output;\n     try {\n-      output \u003d Shell.execCommand(environment,\n-          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n-      GpuDeviceInformationParser parser \u003d new GpuDeviceInformationParser();\n-      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n-      numOfErrorExecutionSinceLastSucceed \u003d 0;\n-      return lastDiscoveredGpuInformation;\n+      lastDiscoveredGpuInformation \u003d\n+          nvidiaBinaryHelper.getGpuDeviceInformation(pathOfGpuBinary);\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n       LOG.debug(msg);\n       throw new YarnException(msg, e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.warn(msg, e);\n-      }\n+      LOG.debug(msg, e);\n       throw e;\n     }\n+\n+    return lastDiscoveredGpuInformation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      lastDiscoveredGpuInformation \u003d\n          nvidiaBinaryHelper.getGpuDeviceInformation(pathOfGpuBinary);\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n      LOG.debug(msg);\n      throw new YarnException(msg, e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n      LOG.debug(msg, e);\n      throw e;\n    }\n\n    return lastDiscoveredGpuInformation;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
          "extendedDetails": {}
        }
      ]
    },
    "18ee1092b471c5337f05809f8f01dae415e51a3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9127. Create more tests to verify GpuDeviceInformationParser. Contributed by Peter Bacsko\n",
      "commitDate": "15/07/19 2:59 AM",
      "commitName": "18ee1092b471c5337f05809f8f01dae415e51a3a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "12/07/19 8:28 AM",
      "commitNameOld": "61b0c2bb7c0f18c4a666b96ca1603cbd4d27eb6d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n     validateConfOrThrowException();\n \n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n     String output;\n     try {\n       output \u003d Shell.execCommand(environment,\n           new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n+      GpuDeviceInformationParser parser \u003d new GpuDeviceInformationParser();\n       lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n       numOfErrorExecutionSinceLastSucceed \u003d 0;\n       return lastDiscoveredGpuInformation;\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n       LOG.debug(msg);\n       throw new YarnException(msg, e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n       if (LOG.isDebugEnabled()) {\n         LOG.warn(msg, e);\n       }\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      GpuDeviceInformationParser parser \u003d new GpuDeviceInformationParser();\n      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      return lastDiscoveredGpuInformation;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n      LOG.debug(msg);\n      throw new YarnException(msg, e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/03/19 2:31 AM",
      "commitNameOld": "46045c5cb3ab06a35df27879afbd1bc3c2a384dd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 9.53,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n   synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n     validateConfOrThrowException();\n \n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n     String output;\n     try {\n       output \u003d Shell.execCommand(environment,\n           new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n       lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n       numOfErrorExecutionSinceLastSucceed \u003d 0;\n       return lastDiscoveredGpuInformation;\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(msg);\n-      }\n+      LOG.debug(msg);\n       throw new YarnException(msg, e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n       if (LOG.isDebugEnabled()) {\n         LOG.warn(msg, e);\n       }\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      return lastDiscoveredGpuInformation;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n      LOG.debug(msg);\n      throw new YarnException(msg, e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
      "extendedDetails": {}
    },
    "46045c5cb3ab06a35df27879afbd1bc3c2a384dd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9138. Improve test coverage for nvidia-smi binary execution of GpuDiscoverer. Contributed by Szilard Nemeth.\n",
      "commitDate": "06/03/19 2:31 AM",
      "commitName": "46045c5cb3ab06a35df27879afbd1bc3c2a384dd",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/03/19 5:54 AM",
      "commitNameOld": "dcaca19871a7aefc1f33cb6cb543ad4768ec6b50",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,33 @@\n   synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n     validateConfOrThrowException();\n \n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n-      String msg \u003d\n-          \"Failed to execute GPU device information detection script for \"\n-              + MAX_REPEATED_ERROR_ALLOWED\n-              + \" times, skip following executions.\";\n+      String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n     String output;\n     try {\n       output \u003d Shell.execCommand(environment,\n           new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n       lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n       numOfErrorExecutionSinceLastSucceed \u003d 0;\n       return lastDiscoveredGpuInformation;\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n-      String msg \u003d\n-          \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n-              .getMessage() + \", continue ...\";\n+      String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(msg);\n       }\n-      throw new YarnException(e);\n+      throw new YarnException(msg, e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n-      String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n+      String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n       if (LOG.isDebugEnabled()) {\n         LOG.warn(msg, e);\n       }\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d getErrorMessageOfScriptExecutionThresholdReached();\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      return lastDiscoveredGpuInformation;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getErrorMessageOfScriptExecution(e.getMessage());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(msg);\n      }\n      throw new YarnException(msg, e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d getFailedToParseErrorMessage(e.getMessage());\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
      "extendedDetails": {}
    },
    "dcaca19871a7aefc1f33cb6cb543ad4768ec6b50": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9139. Simplify initializer code of GpuDiscoverer. Contributed by Szilard Nemeth.\n",
      "commitDate": "01/03/19 5:54 AM",
      "commitName": "dcaca19871a7aefc1f33cb6cb543ad4768ec6b50",
      "commitAuthor": "Sunil G",
      "commitDateOld": "24/02/19 10:00 PM",
      "commitNameOld": "5e91ebd91a405e1585ef02b8fbf03f10d1398adf",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.33,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,38 @@\n   synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n     validateConfOrThrowException();\n \n-    if (null \u003d\u003d pathOfGpuBinary) {\n-      throw new YarnException(\n-          \"Failed to find GPU discovery executable, please double check \"\n-              + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n-    }\n-\n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d\n           \"Failed to execute GPU device information detection script for \"\n               + MAX_REPEATED_ERROR_ALLOWED\n               + \" times, skip following executions.\";\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n     String output;\n     try {\n       output \u003d Shell.execCommand(environment,\n           new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n       lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n       numOfErrorExecutionSinceLastSucceed \u003d 0;\n       return lastDiscoveredGpuInformation;\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d\n           \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n               .getMessage() + \", continue ...\";\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(msg);\n       }\n       throw new YarnException(e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n       if (LOG.isDebugEnabled()) {\n         LOG.warn(msg, e);\n       }\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d\n          \"Failed to execute GPU device information detection script for \"\n              + MAX_REPEATED_ERROR_ALLOWED\n              + \" times, skip following executions.\";\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      return lastDiscoveredGpuInformation;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d\n          \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n              .getMessage() + \", continue ...\";\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(msg);\n      }\n      throw new YarnException(e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
      "extendedDetails": {}
    },
    "95fbbfed75dd309b5d56032ece64996165572287": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9118. Handle exceptions with parsing user defined GPU devices in GpuDiscoverer. Contributed by Szilard Nemeth.\n",
      "commitDate": "22/02/19 6:52 AM",
      "commitName": "95fbbfed75dd309b5d56032ece64996165572287",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9118. Handle exceptions with parsing user defined GPU devices in GpuDiscoverer. Contributed by Szilard Nemeth.\n",
          "commitDate": "22/02/19 6:52 AM",
          "commitName": "95fbbfed75dd309b5d56032ece64996165572287",
          "commitAuthor": "Sunil G",
          "commitDateOld": "28/10/17 10:38 PM",
          "commitNameOld": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 481.38,
          "commitsBetweenForRepo": 4153,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n+  synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n     validateConfOrThrowException();\n \n     if (null \u003d\u003d pathOfGpuBinary) {\n       throw new YarnException(\n           \"Failed to find GPU discovery executable, please double check \"\n               + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n     }\n \n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d\n           \"Failed to execute GPU device information detection script for \"\n               + MAX_REPEATED_ERROR_ALLOWED\n               + \" times, skip following executions.\";\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n     String output;\n     try {\n       output \u003d Shell.execCommand(environment,\n           new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n-      GpuDeviceInformation info \u003d parser.parseXml(output);\n+      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n       numOfErrorExecutionSinceLastSucceed \u003d 0;\n-      lastDiscoveredGpuInformation \u003d info;\n-      return info;\n+      return lastDiscoveredGpuInformation;\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d\n           \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n               .getMessage() + \", continue ...\";\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(msg);\n       }\n       throw new YarnException(e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n       if (LOG.isDebugEnabled()) {\n         LOG.warn(msg, e);\n       }\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (null \u003d\u003d pathOfGpuBinary) {\n      throw new YarnException(\n          \"Failed to find GPU discovery executable, please double check \"\n              + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n    }\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d\n          \"Failed to execute GPU device information detection script for \"\n              + MAX_REPEATED_ERROR_ALLOWED\n              + \" times, skip following executions.\";\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      return lastDiscoveredGpuInformation;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d\n          \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n              .getMessage() + \", continue ...\";\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(msg);\n      }\n      throw new YarnException(e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9118. Handle exceptions with parsing user defined GPU devices in GpuDiscoverer. Contributed by Szilard Nemeth.\n",
          "commitDate": "22/02/19 6:52 AM",
          "commitName": "95fbbfed75dd309b5d56032ece64996165572287",
          "commitAuthor": "Sunil G",
          "commitDateOld": "28/10/17 10:38 PM",
          "commitNameOld": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 481.38,
          "commitsBetweenForRepo": 4153,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n+  synchronized GpuDeviceInformation getGpuDeviceInformation()\n       throws YarnException {\n     validateConfOrThrowException();\n \n     if (null \u003d\u003d pathOfGpuBinary) {\n       throw new YarnException(\n           \"Failed to find GPU discovery executable, please double check \"\n               + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n     }\n \n     if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n       String msg \u003d\n           \"Failed to execute GPU device information detection script for \"\n               + MAX_REPEATED_ERROR_ALLOWED\n               + \" times, skip following executions.\";\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n \n     String output;\n     try {\n       output \u003d Shell.execCommand(environment,\n           new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n-      GpuDeviceInformation info \u003d parser.parseXml(output);\n+      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n       numOfErrorExecutionSinceLastSucceed \u003d 0;\n-      lastDiscoveredGpuInformation \u003d info;\n-      return info;\n+      return lastDiscoveredGpuInformation;\n     } catch (IOException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d\n           \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n               .getMessage() + \", continue ...\";\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(msg);\n       }\n       throw new YarnException(e);\n     } catch (YarnException e) {\n       numOfErrorExecutionSinceLastSucceed++;\n       String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n       if (LOG.isDebugEnabled()) {\n         LOG.warn(msg, e);\n       }\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (null \u003d\u003d pathOfGpuBinary) {\n      throw new YarnException(\n          \"Failed to find GPU discovery executable, please double check \"\n              + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n    }\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d\n          \"Failed to execute GPU device information detection script for \"\n              + MAX_REPEATED_ERROR_ALLOWED\n              + \" times, skip following executions.\";\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      lastDiscoveredGpuInformation \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      return lastDiscoveredGpuInformation;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d\n          \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n              .getMessage() + \", continue ...\";\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(msg);\n      }\n      throw new YarnException(e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java",
          "extendedDetails": {}
        }
      ]
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,45 @@\n+  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n+      throws YarnException {\n+    validateConfOrThrowException();\n+\n+    if (null \u003d\u003d pathOfGpuBinary) {\n+      throw new YarnException(\n+          \"Failed to find GPU discovery executable, please double check \"\n+              + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n+    }\n+\n+    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n+      String msg \u003d\n+          \"Failed to execute GPU device information detection script for \"\n+              + MAX_REPEATED_ERROR_ALLOWED\n+              + \" times, skip following executions.\";\n+      LOG.error(msg);\n+      throw new YarnException(msg);\n+    }\n+\n+    String output;\n+    try {\n+      output \u003d Shell.execCommand(environment,\n+          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n+      GpuDeviceInformation info \u003d parser.parseXml(output);\n+      numOfErrorExecutionSinceLastSucceed \u003d 0;\n+      lastDiscoveredGpuInformation \u003d info;\n+      return info;\n+    } catch (IOException e) {\n+      numOfErrorExecutionSinceLastSucceed++;\n+      String msg \u003d\n+          \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n+              .getMessage() + \", continue ...\";\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(msg);\n+      }\n+      throw new YarnException(e);\n+    } catch (YarnException e) {\n+      numOfErrorExecutionSinceLastSucceed++;\n+      String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.warn(msg, e);\n+      }\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized GpuDeviceInformation getGpuDeviceInformation()\n      throws YarnException {\n    validateConfOrThrowException();\n\n    if (null \u003d\u003d pathOfGpuBinary) {\n      throw new YarnException(\n          \"Failed to find GPU discovery executable, please double check \"\n              + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\n    }\n\n    if (numOfErrorExecutionSinceLastSucceed \u003d\u003d MAX_REPEATED_ERROR_ALLOWED) {\n      String msg \u003d\n          \"Failed to execute GPU device information detection script for \"\n              + MAX_REPEATED_ERROR_ALLOWED\n              + \" times, skip following executions.\";\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n\n    String output;\n    try {\n      output \u003d Shell.execCommand(environment,\n          new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\n      GpuDeviceInformation info \u003d parser.parseXml(output);\n      numOfErrorExecutionSinceLastSucceed \u003d 0;\n      lastDiscoveredGpuInformation \u003d info;\n      return info;\n    } catch (IOException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d\n          \"Failed to execute \" + pathOfGpuBinary + \" exception message:\" + e\n              .getMessage() + \", continue ...\";\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(msg);\n      }\n      throw new YarnException(e);\n    } catch (YarnException e) {\n      numOfErrorExecutionSinceLastSucceed++;\n      String msg \u003d \"Failed to parse xml output\" + e.getMessage();\n      if (LOG.isDebugEnabled()) {\n        LOG.warn(msg, e);\n      }\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/GpuDiscoverer.java"
    }
  }
}