{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SlidingWindowRetryPolicy.java",
  "functionName": "calculateRemainingRetries",
  "functionId": "calculateRemainingRetries___retryContext-RetryContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
  "functionStartLine": 63,
  "functionEndLine": 82,
  "numCommitsSeen": 5,
  "timeTaken": 2940,
  "changeHistory": [
    "135941e00d762a417c3b4cc524cdc59b0d1810b1",
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde"
  ],
  "changeHistoryShort": {
    "135941e00d762a417c3b4cc524cdc59b0d1810b1": "Ymultichange(Yrename,Ybodychange)",
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde": "Yintroduced"
  },
  "changeHistoryDetails": {
    "135941e00d762a417c3b4cc524cdc59b0d1810b1": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-8362.  Bugfix logic in container retries in node manager.\n            Contributed by Chandni Singh\n",
      "commitDate": "29/05/18 1:56 PM",
      "commitName": "135941e00d762a417c3b4cc524cdc59b0d1810b1",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-8362.  Bugfix logic in container retries in node manager.\n            Contributed by Chandni Singh\n",
          "commitDate": "29/05/18 1:56 PM",
          "commitName": "135941e00d762a417c3b4cc524cdc59b0d1810b1",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "13/03/18 5:55 PM",
          "commitNameOld": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 76.83,
          "commitsBetweenForRepo": 1179,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,20 @@\n-  private int calculatePendingRetries(RetryContext retryContext) {\n+  private int calculateRemainingRetries(RetryContext retryContext) {\n     ContainerRetryContext containerRC \u003d\n         retryContext.containerRetryContext;\n     if (containerRC.getFailuresValidityInterval() \u003e 0) {\n-      Iterator\u003cLong\u003e iterator \u003d retryContext.getRestartTimes().iterator();\n+      int validFailuresCount \u003d 0;\n       long currentTime \u003d clock.getTime();\n-      while (iterator.hasNext()) {\n-        long restartTime \u003d iterator.next();\n+      for (int i \u003d retryContext.restartTimes.size() - 1; i \u003e\u003d 0; i--) {\n+        long restartTime \u003d retryContext.restartTimes.get(i);\n         if (currentTime - restartTime\n-            \u003e containerRC.getFailuresValidityInterval()) {\n-          iterator.remove();\n+            \u003c\u003d containerRC.getFailuresValidityInterval()) {\n+          validFailuresCount++;\n         } else {\n           break;\n         }\n       }\n-      return containerRC.getMaxRetries() -\n-          retryContext.getRestartTimes().size();\n+      return containerRC.getMaxRetries() - validFailuresCount;\n     } else {\n       return retryContext.getRemainingRetries();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int calculateRemainingRetries(RetryContext retryContext) {\n    ContainerRetryContext containerRC \u003d\n        retryContext.containerRetryContext;\n    if (containerRC.getFailuresValidityInterval() \u003e 0) {\n      int validFailuresCount \u003d 0;\n      long currentTime \u003d clock.getTime();\n      for (int i \u003d retryContext.restartTimes.size() - 1; i \u003e\u003d 0; i--) {\n        long restartTime \u003d retryContext.restartTimes.get(i);\n        if (currentTime - restartTime\n            \u003c\u003d containerRC.getFailuresValidityInterval()) {\n          validFailuresCount++;\n        } else {\n          break;\n        }\n      }\n      return containerRC.getMaxRetries() - validFailuresCount;\n    } else {\n      return retryContext.getRemainingRetries();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
          "extendedDetails": {
            "oldValue": "calculatePendingRetries",
            "newValue": "calculateRemainingRetries"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8362.  Bugfix logic in container retries in node manager.\n            Contributed by Chandni Singh\n",
          "commitDate": "29/05/18 1:56 PM",
          "commitName": "135941e00d762a417c3b4cc524cdc59b0d1810b1",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "13/03/18 5:55 PM",
          "commitNameOld": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 76.83,
          "commitsBetweenForRepo": 1179,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,20 @@\n-  private int calculatePendingRetries(RetryContext retryContext) {\n+  private int calculateRemainingRetries(RetryContext retryContext) {\n     ContainerRetryContext containerRC \u003d\n         retryContext.containerRetryContext;\n     if (containerRC.getFailuresValidityInterval() \u003e 0) {\n-      Iterator\u003cLong\u003e iterator \u003d retryContext.getRestartTimes().iterator();\n+      int validFailuresCount \u003d 0;\n       long currentTime \u003d clock.getTime();\n-      while (iterator.hasNext()) {\n-        long restartTime \u003d iterator.next();\n+      for (int i \u003d retryContext.restartTimes.size() - 1; i \u003e\u003d 0; i--) {\n+        long restartTime \u003d retryContext.restartTimes.get(i);\n         if (currentTime - restartTime\n-            \u003e containerRC.getFailuresValidityInterval()) {\n-          iterator.remove();\n+            \u003c\u003d containerRC.getFailuresValidityInterval()) {\n+          validFailuresCount++;\n         } else {\n           break;\n         }\n       }\n-      return containerRC.getMaxRetries() -\n-          retryContext.getRestartTimes().size();\n+      return containerRC.getMaxRetries() - validFailuresCount;\n     } else {\n       return retryContext.getRemainingRetries();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int calculateRemainingRetries(RetryContext retryContext) {\n    ContainerRetryContext containerRC \u003d\n        retryContext.containerRetryContext;\n    if (containerRC.getFailuresValidityInterval() \u003e 0) {\n      int validFailuresCount \u003d 0;\n      long currentTime \u003d clock.getTime();\n      for (int i \u003d retryContext.restartTimes.size() - 1; i \u003e\u003d 0; i--) {\n        long restartTime \u003d retryContext.restartTimes.get(i);\n        if (currentTime - restartTime\n            \u003c\u003d containerRC.getFailuresValidityInterval()) {\n          validFailuresCount++;\n        } else {\n          break;\n        }\n      }\n      return containerRC.getMaxRetries() - validFailuresCount;\n    } else {\n      return retryContext.getRemainingRetries();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
      "commitDate": "13/03/18 5:55 PM",
      "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,21 @@\n+  private int calculatePendingRetries(RetryContext retryContext) {\n+    ContainerRetryContext containerRC \u003d\n+        retryContext.containerRetryContext;\n+    if (containerRC.getFailuresValidityInterval() \u003e 0) {\n+      Iterator\u003cLong\u003e iterator \u003d retryContext.getRestartTimes().iterator();\n+      long currentTime \u003d clock.getTime();\n+      while (iterator.hasNext()) {\n+        long restartTime \u003d iterator.next();\n+        if (currentTime - restartTime\n+            \u003e containerRC.getFailuresValidityInterval()) {\n+          iterator.remove();\n+        } else {\n+          break;\n+        }\n+      }\n+      return containerRC.getMaxRetries() -\n+          retryContext.getRestartTimes().size();\n+    } else {\n+      return retryContext.getRemainingRetries();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int calculatePendingRetries(RetryContext retryContext) {\n    ContainerRetryContext containerRC \u003d\n        retryContext.containerRetryContext;\n    if (containerRC.getFailuresValidityInterval() \u003e 0) {\n      Iterator\u003cLong\u003e iterator \u003d retryContext.getRestartTimes().iterator();\n      long currentTime \u003d clock.getTime();\n      while (iterator.hasNext()) {\n        long restartTime \u003d iterator.next();\n        if (currentTime - restartTime\n            \u003e containerRC.getFailuresValidityInterval()) {\n          iterator.remove();\n        } else {\n          break;\n        }\n      }\n      return containerRC.getMaxRetries() -\n          retryContext.getRestartTimes().size();\n    } else {\n      return retryContext.getRemainingRetries();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java"
    }
  }
}