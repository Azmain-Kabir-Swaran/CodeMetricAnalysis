{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryServerLeveldbStateStoreService.java",
  "functionName": "startStorage",
  "functionId": "startStorage",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryServerLeveldbStateStoreService.java",
  "functionStartLine": 73,
  "functionEndLine": 97,
  "numCommitsSeen": 3,
  "timeTaken": 848,
  "changeHistory": [
    "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7",
    "56b7ec71a69820ae12b4b9e2eb04b7368f721dbf"
  ],
  "changeHistoryShort": {
    "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7": "Ybodychange",
    "56b7ec71a69820ae12b4b9e2eb04b7368f721dbf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8120. JVM can crash with SIGSEGV when exiting due to custom leveldb logger. Contributed by Jason Lowe.\n",
      "commitDate": "12/04/18 9:04 AM",
      "commitName": "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7",
      "commitAuthor": "Eric E Payne",
      "commitDateOld": "08/11/17 2:21 AM",
      "commitNameOld": "ffee10b68ef1f2d75c9d0df9140c2a605f826724",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 155.24,
      "commitsBetweenForRepo": 1065,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   protected void startStorage() throws IOException {\n     Path storeRoot \u003d createStorageDir(getConfig());\n     Options options \u003d new Options();\n     options.createIfMissing(false);\n-    options.logger(new LeveldbLogger());\n     LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n     File dbfile \u003d new File(storeRoot.toString());\n     try {\n       db \u003d JniDBFactory.factory.open(dbfile, options);\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         LOG.info(\"Creating state database at \" + dbfile);\n         options.createIfMissing(true);\n         try {\n           db \u003d JniDBFactory.factory.open(dbfile, options);\n           // store version\n           storeVersion();\n         } catch (DBException dbErr) {\n           throw new IOException(dbErr.getMessage(), dbErr);\n         }\n       } else {\n         throw e;\n       }\n     }\n     checkVersion();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startStorage() throws IOException {\n    Path storeRoot \u003d createStorageDir(getConfig());\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n    File dbfile \u003d new File(storeRoot.toString());\n    try {\n      db \u003d JniDBFactory.factory.open(dbfile, options);\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          db \u003d JniDBFactory.factory.open(dbfile, options);\n          // store version\n          storeVersion();\n        } catch (DBException dbErr) {\n          throw new IOException(dbErr.getMessage(), dbErr);\n        }\n      } else {\n        throw e;\n      }\n    }\n    checkVersion();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryServerLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "56b7ec71a69820ae12b4b9e2eb04b7368f721dbf": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6141. History server leveldb recovery store. Contributed by Jason Lowe\n",
      "commitDate": "26/01/15 8:28 AM",
      "commitName": "56b7ec71a69820ae12b4b9e2eb04b7368f721dbf",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,26 @@\n+  protected void startStorage() throws IOException {\n+    Path storeRoot \u003d createStorageDir(getConfig());\n+    Options options \u003d new Options();\n+    options.createIfMissing(false);\n+    options.logger(new LeveldbLogger());\n+    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n+    File dbfile \u003d new File(storeRoot.toString());\n+    try {\n+      db \u003d JniDBFactory.factory.open(dbfile, options);\n+    } catch (NativeDB.DBException e) {\n+      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n+        LOG.info(\"Creating state database at \" + dbfile);\n+        options.createIfMissing(true);\n+        try {\n+          db \u003d JniDBFactory.factory.open(dbfile, options);\n+          // store version\n+          storeVersion();\n+        } catch (DBException dbErr) {\n+          throw new IOException(dbErr.getMessage(), dbErr);\n+        }\n+      } else {\n+        throw e;\n+      }\n+    }\n+    checkVersion();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startStorage() throws IOException {\n    Path storeRoot \u003d createStorageDir(getConfig());\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    options.logger(new LeveldbLogger());\n    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n    File dbfile \u003d new File(storeRoot.toString());\n    try {\n      db \u003d JniDBFactory.factory.open(dbfile, options);\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          db \u003d JniDBFactory.factory.open(dbfile, options);\n          // store version\n          storeVersion();\n        } catch (DBException dbErr) {\n          throw new IOException(dbErr.getMessage(), dbErr);\n        }\n      } else {\n        throw e;\n      }\n    }\n    checkVersion();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryServerLeveldbStateStoreService.java"
    }
  }
}