{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerMetrics.java",
  "functionName": "updateQueueMetricsByRelease",
  "functionId": "updateQueueMetricsByRelease___releaseResource-Resource__queue-String",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
  "functionStartLine": 634,
  "functionEndLine": 650,
  "numCommitsSeen": 27,
  "timeTaken": 3753,
  "changeHistory": [
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "e07f3c87cd3542760efcf713f909375b69eec00f"
  ],
  "changeHistoryShort": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Yparameterchange",
    "e07f3c87cd3542760efcf713f909375b69eec00f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,17 @@\n-  private void updateQueueMetrics(String queue,\n-                                  long releasedMemory, int releasedVCores) {\n-    // update queue counters\n+  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n     SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n-    if (releasedMemory !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedMemory);\n+    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n+    if (!counterMap.containsKey(name)) {\n+      metrics.counter(name);\n+      counterMap \u003d metrics.getCounters();\n     }\n-    if (releasedVCores !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedVCores);\n+    counterMap.get(name).inc(-releaseResource.getMemorySize());\n+\n+    String vcoreMetric \u003d\n+        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n+    if (!counterMap.containsKey(vcoreMetric)) {\n+      metrics.counter(vcoreMetric);\n+      counterMap \u003d metrics.getCounters();\n     }\n+    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n    if (!counterMap.containsKey(name)) {\n      metrics.counter(name);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(name).inc(-releaseResource.getMemorySize());\n\n    String vcoreMetric \u003d\n        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n    if (!counterMap.containsKey(vcoreMetric)) {\n      metrics.counter(vcoreMetric);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
            "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
            "oldMethodName": "updateQueueMetrics",
            "newMethodName": "updateQueueMetricsByRelease"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,17 @@\n-  private void updateQueueMetrics(String queue,\n-                                  long releasedMemory, int releasedVCores) {\n-    // update queue counters\n+  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n     SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n-    if (releasedMemory !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedMemory);\n+    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n+    if (!counterMap.containsKey(name)) {\n+      metrics.counter(name);\n+      counterMap \u003d metrics.getCounters();\n     }\n-    if (releasedVCores !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedVCores);\n+    counterMap.get(name).inc(-releaseResource.getMemorySize());\n+\n+    String vcoreMetric \u003d\n+        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n+    if (!counterMap.containsKey(vcoreMetric)) {\n+      metrics.counter(vcoreMetric);\n+      counterMap \u003d metrics.getCounters();\n     }\n+    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n    if (!counterMap.containsKey(name)) {\n      metrics.counter(name);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(name).inc(-releaseResource.getMemorySize());\n\n    String vcoreMetric \u003d\n        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n    if (!counterMap.containsKey(vcoreMetric)) {\n      metrics.counter(vcoreMetric);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,17 @@\n-  private void updateQueueMetrics(String queue,\n-                                  long releasedMemory, int releasedVCores) {\n-    // update queue counters\n+  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n     SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n-    if (releasedMemory !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedMemory);\n+    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n+    if (!counterMap.containsKey(name)) {\n+      metrics.counter(name);\n+      counterMap \u003d metrics.getCounters();\n     }\n-    if (releasedVCores !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedVCores);\n+    counterMap.get(name).inc(-releaseResource.getMemorySize());\n+\n+    String vcoreMetric \u003d\n+        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n+    if (!counterMap.containsKey(vcoreMetric)) {\n+      metrics.counter(vcoreMetric);\n+      counterMap \u003d metrics.getCounters();\n     }\n+    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n    if (!counterMap.containsKey(name)) {\n      metrics.counter(name);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(name).inc(-releaseResource.getMemorySize());\n\n    String vcoreMetric \u003d\n        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n    if (!counterMap.containsKey(vcoreMetric)) {\n      metrics.counter(vcoreMetric);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,17 @@\n-  private void updateQueueMetrics(String queue,\n-                                  long releasedMemory, int releasedVCores) {\n-    // update queue counters\n+  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n     SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n-    if (releasedMemory !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedMemory);\n+    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n+    if (!counterMap.containsKey(name)) {\n+      metrics.counter(name);\n+      counterMap \u003d metrics.getCounters();\n     }\n-    if (releasedVCores !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedVCores);\n+    counterMap.get(name).inc(-releaseResource.getMemorySize());\n+\n+    String vcoreMetric \u003d\n+        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n+    if (!counterMap.containsKey(vcoreMetric)) {\n+      metrics.counter(vcoreMetric);\n+      counterMap \u003d metrics.getCounters();\n     }\n+    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n    if (!counterMap.containsKey(name)) {\n      metrics.counter(name);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(name).inc(-releaseResource.getMemorySize());\n\n    String vcoreMetric \u003d\n        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n    if (!counterMap.containsKey(vcoreMetric)) {\n      metrics.counter(vcoreMetric);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {
            "oldValue": "updateQueueMetrics",
            "newValue": "updateQueueMetricsByRelease"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,17 @@\n-  private void updateQueueMetrics(String queue,\n-                                  long releasedMemory, int releasedVCores) {\n-    // update queue counters\n+  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n     SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n-    if (releasedMemory !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedMemory);\n+    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n+    if (!counterMap.containsKey(name)) {\n+      metrics.counter(name);\n+      counterMap \u003d metrics.getCounters();\n     }\n-    if (releasedVCores !\u003d 0) {\n-      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n-      if (! counterMap.containsKey(name)) {\n-        metrics.counter(name);\n-        counterMap \u003d metrics.getCounters();\n-      }\n-      counterMap.get(name).inc(-releasedVCores);\n+    counterMap.get(name).inc(-releaseResource.getMemorySize());\n+\n+    String vcoreMetric \u003d\n+        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n+    if (!counterMap.containsKey(vcoreMetric)) {\n+      metrics.counter(vcoreMetric);\n+      counterMap \u003d metrics.getCounters();\n     }\n+    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateQueueMetricsByRelease(Resource releaseResource, String queue) {\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    String name \u003d getQueueMetricName(queue, QueueMetric.ALLOCATED_MEMORY);\n    if (!counterMap.containsKey(name)) {\n      metrics.counter(name);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(name).inc(-releaseResource.getMemorySize());\n\n    String vcoreMetric \u003d\n        getQueueMetricName(queue, QueueMetric.ALLOCATED_VCORES);\n    if (!counterMap.containsKey(vcoreMetric)) {\n      metrics.counter(vcoreMetric);\n      counterMap \u003d metrics.getCounters();\n    }\n    counterMap.get(vcoreMetric).inc(-releaseResource.getVirtualCores());\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {
            "oldValue": "[queue-String, releasedMemory-long, releasedVCores-int]",
            "newValue": "[releaseResource-Resource, queue-String]"
          }
        }
      ]
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 248.81,
      "commitsBetweenForRepo": 1666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private void updateQueueMetrics(String queue,\n-                                  int releasedMemory, int releasedVCores) {\n+                                  long releasedMemory, int releasedVCores) {\n     // update queue counters\n     SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n     if (releasedMemory !\u003d 0) {\n       String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n       if (! counterMap.containsKey(name)) {\n         metrics.counter(name);\n         counterMap \u003d metrics.getCounters();\n       }\n       counterMap.get(name).inc(-releasedMemory);\n     }\n     if (releasedVCores !\u003d 0) {\n       String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n       if (! counterMap.containsKey(name)) {\n         metrics.counter(name);\n         counterMap \u003d metrics.getCounters();\n       }\n       counterMap.get(name).inc(-releasedVCores);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateQueueMetrics(String queue,\n                                  long releasedMemory, int releasedVCores) {\n    // update queue counters\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    if (releasedMemory !\u003d 0) {\n      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n      if (! counterMap.containsKey(name)) {\n        metrics.counter(name);\n        counterMap \u003d metrics.getCounters();\n      }\n      counterMap.get(name).inc(-releasedMemory);\n    }\n    if (releasedVCores !\u003d 0) {\n      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n      if (! counterMap.containsKey(name)) {\n        metrics.counter(name);\n        counterMap \u003d metrics.getCounters();\n      }\n      counterMap.get(name).inc(-releasedVCores);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "[queue-String, releasedMemory-int, releasedVCores-int]",
        "newValue": "[queue-String, releasedMemory-long, releasedVCores-int]"
      }
    },
    "e07f3c87cd3542760efcf713f909375b69eec00f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1471. Preserve scheduler typeinfo in simulator to work with resource monitors.\nContributed by Carlo Curino.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 4:07 PM",
      "commitName": "e07f3c87cd3542760efcf713f909375b69eec00f",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,21 @@\n+  private void updateQueueMetrics(String queue,\n+                                  int releasedMemory, int releasedVCores) {\n+    // update queue counters\n+    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n+    if (releasedMemory !\u003d 0) {\n+      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n+      if (! counterMap.containsKey(name)) {\n+        metrics.counter(name);\n+        counterMap \u003d metrics.getCounters();\n+      }\n+      counterMap.get(name).inc(-releasedMemory);\n+    }\n+    if (releasedVCores !\u003d 0) {\n+      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n+      if (! counterMap.containsKey(name)) {\n+        metrics.counter(name);\n+        counterMap \u003d metrics.getCounters();\n+      }\n+      counterMap.get(name).inc(-releasedVCores);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateQueueMetrics(String queue,\n                                  int releasedMemory, int releasedVCores) {\n    // update queue counters\n    SortedMap\u003cString, Counter\u003e counterMap \u003d metrics.getCounters();\n    if (releasedMemory !\u003d 0) {\n      String name \u003d \"counter.queue.\" + queue + \".allocated.memory\";\n      if (! counterMap.containsKey(name)) {\n        metrics.counter(name);\n        counterMap \u003d metrics.getCounters();\n      }\n      counterMap.get(name).inc(-releasedMemory);\n    }\n    if (releasedVCores !\u003d 0) {\n      String name \u003d \"counter.queue.\" + queue + \".allocated.cores\";\n      if (! counterMap.containsKey(name)) {\n        metrics.counter(name);\n        counterMap \u003d metrics.getCounters();\n      }\n      counterMap.get(name).inc(-releasedVCores);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java"
    }
  }
}