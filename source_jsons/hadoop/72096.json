{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuthToken.java",
  "functionName": "parse",
  "functionId": "parse___tokenStr-String",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/AuthToken.java",
  "functionStartLine": 201,
  "functionEndLine": 225,
  "numCommitsSeen": 5,
  "timeTaken": 946,
  "changeHistory": [
    "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e",
    "71aedfabf39e03104c8d22456e95ef6349aae6c0",
    "875256834b892b574499d5fe68f95a9aed244f7d"
  ],
  "changeHistoryShort": {
    "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e": "Ybodychange",
    "71aedfabf39e03104c8d22456e95ef6349aae6c0": "Ybodychange",
    "875256834b892b574499d5fe68f95a9aed244f7d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12587. Hadoop AuthToken refuses to work without a maxinactive attribute in issued token. (Benoy Antony)\n",
      "commitDate": "09/01/16 1:41 PM",
      "commitName": "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "21/08/15 4:32 PM",
      "commitNameOld": "caa636bf10d96ca2d4e151225fb46134ce99f9cf",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 140.92,
      "commitsBetweenForRepo": 948,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n   public static AuthToken parse(String tokenStr) throws AuthenticationException {\n     if (tokenStr.length() \u003e\u003d 2) {\n       // strip the \\\" at the two ends of the tokenStr\n       if (tokenStr.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n           tokenStr.charAt(tokenStr.length()-1) \u003d\u003d \u0027\\\"\u0027) {\n         tokenStr \u003d tokenStr.substring(1, tokenStr.length()-1);\n       }\n     } \n     Map\u003cString, String\u003e map \u003d split(tokenStr);\n     // remove the signature part, since client doesn\u0027t care about it\n     map.remove(\"s\");\n \n-    if (!map.keySet().equals(ATTRIBUTES)) {\n+    if (!map.keySet().containsAll(ATTRIBUTES)) {\n       throw new AuthenticationException(\"Invalid token string, missing attributes\");\n     }\n-    long maxInactives \u003d Long.parseLong(map.get(MAX_INACTIVES));\n     long expires \u003d Long.parseLong(map.get(EXPIRES));\n     AuthToken token \u003d new AuthToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE));\n-    token.setMaxInactives(maxInactives);\n+    //process optional attributes\n+    if (map.containsKey(MAX_INACTIVES)) {\n+      long maxInactives \u003d Long.parseLong(map.get(MAX_INACTIVES));\n+      token.setMaxInactives(maxInactives);\n+    }\n     token.setExpires(expires);\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AuthToken parse(String tokenStr) throws AuthenticationException {\n    if (tokenStr.length() \u003e\u003d 2) {\n      // strip the \\\" at the two ends of the tokenStr\n      if (tokenStr.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n          tokenStr.charAt(tokenStr.length()-1) \u003d\u003d \u0027\\\"\u0027) {\n        tokenStr \u003d tokenStr.substring(1, tokenStr.length()-1);\n      }\n    } \n    Map\u003cString, String\u003e map \u003d split(tokenStr);\n    // remove the signature part, since client doesn\u0027t care about it\n    map.remove(\"s\");\n\n    if (!map.keySet().containsAll(ATTRIBUTES)) {\n      throw new AuthenticationException(\"Invalid token string, missing attributes\");\n    }\n    long expires \u003d Long.parseLong(map.get(EXPIRES));\n    AuthToken token \u003d new AuthToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE));\n    //process optional attributes\n    if (map.containsKey(MAX_INACTIVES)) {\n      long maxInactives \u003d Long.parseLong(map.get(MAX_INACTIVES));\n      token.setMaxInactives(maxInactives);\n    }\n    token.setExpires(expires);\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/AuthToken.java",
      "extendedDetails": {}
    },
    "71aedfabf39e03104c8d22456e95ef6349aae6c0": {
      "type": "Ybodychange",
      "commitMessage": "hadoop-12050. Enable MaxInactiveInterval for hadoop http auth token. Contributed by Huizhi Lu.\n",
      "commitDate": "18/08/15 1:43 PM",
      "commitName": "71aedfabf39e03104c8d22456e95ef6349aae6c0",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "13/02/15 2:01 PM",
      "commitNameOld": "875256834b892b574499d5fe68f95a9aed244f7d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 185.95,
      "commitsBetweenForRepo": 1467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   public static AuthToken parse(String tokenStr) throws AuthenticationException {\n     if (tokenStr.length() \u003e\u003d 2) {\n       // strip the \\\" at the two ends of the tokenStr\n       if (tokenStr.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n           tokenStr.charAt(tokenStr.length()-1) \u003d\u003d \u0027\\\"\u0027) {\n         tokenStr \u003d tokenStr.substring(1, tokenStr.length()-1);\n       }\n     } \n     Map\u003cString, String\u003e map \u003d split(tokenStr);\n     // remove the signature part, since client doesn\u0027t care about it\n     map.remove(\"s\");\n \n     if (!map.keySet().equals(ATTRIBUTES)) {\n       throw new AuthenticationException(\"Invalid token string, missing attributes\");\n     }\n+    long maxInactives \u003d Long.parseLong(map.get(MAX_INACTIVES));\n     long expires \u003d Long.parseLong(map.get(EXPIRES));\n     AuthToken token \u003d new AuthToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE));\n+    token.setMaxInactives(maxInactives);\n     token.setExpires(expires);\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AuthToken parse(String tokenStr) throws AuthenticationException {\n    if (tokenStr.length() \u003e\u003d 2) {\n      // strip the \\\" at the two ends of the tokenStr\n      if (tokenStr.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n          tokenStr.charAt(tokenStr.length()-1) \u003d\u003d \u0027\\\"\u0027) {\n        tokenStr \u003d tokenStr.substring(1, tokenStr.length()-1);\n      }\n    } \n    Map\u003cString, String\u003e map \u003d split(tokenStr);\n    // remove the signature part, since client doesn\u0027t care about it\n    map.remove(\"s\");\n\n    if (!map.keySet().equals(ATTRIBUTES)) {\n      throw new AuthenticationException(\"Invalid token string, missing attributes\");\n    }\n    long maxInactives \u003d Long.parseLong(map.get(MAX_INACTIVES));\n    long expires \u003d Long.parseLong(map.get(EXPIRES));\n    AuthToken token \u003d new AuthToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE));\n    token.setMaxInactives(maxInactives);\n    token.setExpires(expires);\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/AuthToken.java",
      "extendedDetails": {}
    },
    "875256834b892b574499d5fe68f95a9aed244f7d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11467. KerberosAuthenticator can connect to a non-secure cluster. (yzhangal via rkanter)\n",
      "commitDate": "13/02/15 2:01 PM",
      "commitName": "875256834b892b574499d5fe68f95a9aed244f7d",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,20 @@\n+  public static AuthToken parse(String tokenStr) throws AuthenticationException {\n+    if (tokenStr.length() \u003e\u003d 2) {\n+      // strip the \\\" at the two ends of the tokenStr\n+      if (tokenStr.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n+          tokenStr.charAt(tokenStr.length()-1) \u003d\u003d \u0027\\\"\u0027) {\n+        tokenStr \u003d tokenStr.substring(1, tokenStr.length()-1);\n+      }\n+    } \n+    Map\u003cString, String\u003e map \u003d split(tokenStr);\n+    // remove the signature part, since client doesn\u0027t care about it\n+    map.remove(\"s\");\n+\n+    if (!map.keySet().equals(ATTRIBUTES)) {\n+      throw new AuthenticationException(\"Invalid token string, missing attributes\");\n+    }\n+    long expires \u003d Long.parseLong(map.get(EXPIRES));\n+    AuthToken token \u003d new AuthToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE));\n+    token.setExpires(expires);\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AuthToken parse(String tokenStr) throws AuthenticationException {\n    if (tokenStr.length() \u003e\u003d 2) {\n      // strip the \\\" at the two ends of the tokenStr\n      if (tokenStr.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n          tokenStr.charAt(tokenStr.length()-1) \u003d\u003d \u0027\\\"\u0027) {\n        tokenStr \u003d tokenStr.substring(1, tokenStr.length()-1);\n      }\n    } \n    Map\u003cString, String\u003e map \u003d split(tokenStr);\n    // remove the signature part, since client doesn\u0027t care about it\n    map.remove(\"s\");\n\n    if (!map.keySet().equals(ATTRIBUTES)) {\n      throw new AuthenticationException(\"Invalid token string, missing attributes\");\n    }\n    long expires \u003d Long.parseLong(map.get(EXPIRES));\n    AuthToken token \u003d new AuthToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE));\n    token.setExpires(expires);\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/AuthToken.java"
    }
  }
}