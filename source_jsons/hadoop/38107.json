{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IntraQueueCandidatesSelector.java",
  "functionName": "computeIntraQueuePreemptionDemand",
  "functionId": "computeIntraQueuePreemptionDemand___clusterResource-Resource__totalPreemptedResourceAllowed-Resource__selectedCandidates-Map__ApplicationAttemptId,Set__RMContainer____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/IntraQueueCandidatesSelector.java",
  "functionStartLine": 278,
  "functionEndLine": 322,
  "numCommitsSeen": 13,
  "timeTaken": 1366,
  "changeHistory": [
    "c583ab02c730be0a63d974039a78f2dc67dc2db6",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9"
  ],
  "changeHistoryShort": {
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": "Ybodychange",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
      "commitDate": "22/05/17 2:26 PM",
      "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "08/03/17 2:46 PM",
      "commitNameOld": "d7762a55113a529abd6f4ecb8e6d9b0a84b56e08",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 74.94,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,45 @@\n   private void computeIntraQueuePreemptionDemand(Resource clusterResource,\n       Resource totalPreemptedResourceAllowed,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n \n     // 1. Iterate through all partition to calculate demand within a partition.\n     for (String partition : context.getAllPartitions()) {\n       LinkedHashSet\u003cString\u003e queueNames \u003d context\n           .getUnderServedQueuesPerPartition(partition);\n \n       if (null \u003d\u003d queueNames) {\n         continue;\n       }\n \n-      // 2. Its better to get partition based resource limit earlier before\n-      // starting calculation\n-      Resource partitionBasedResource \u003d\n-          context.getPartitionResource(partition);\n-\n-      // 3. loop through all queues corresponding to a partition.\n+      // 2. loop through all queues corresponding to a partition.\n       for (String queueName : queueNames) {\n         TempQueuePerPartition tq \u003d context.getQueueByPartition(queueName,\n             partition);\n         LeafQueue leafQueue \u003d tq.leafQueue;\n \n         // skip if its parent queue\n         if (null \u003d\u003d leafQueue) {\n           continue;\n         }\n \n-        // 4. Consider reassignableResource as (used - actuallyToBePreempted).\n+        // 3. Consider reassignableResource as (used - actuallyToBePreempted).\n         // This provides as upper limit to split apps quota in a queue.\n         Resource queueReassignableResource \u003d Resources.subtract(tq.getUsed(),\n             tq.getActuallyToBePreempted());\n \n-        // 5. Check queue\u0027s used capacity. Make sure that the used capacity is\n+        // 4. Check queue\u0027s used capacity. Make sure that the used capacity is\n         // above certain limit to consider for intra queue preemption.\n         if (leafQueue.getQueueCapacities().getUsedCapacity(partition) \u003c context\n             .getMinimumThresholdForIntraQueuePreemption()) {\n           continue;\n         }\n \n-        // 6. compute the allocation of all apps based on queue\u0027s unallocated\n+        // 5. compute the allocation of all apps based on queue\u0027s unallocated\n         // capacity\n         fifoPreemptionComputePlugin.computeAppsIdealAllocation(clusterResource,\n-            partitionBasedResource, tq, selectedCandidates,\n-            totalPreemptedResourceAllowed,\n+            tq, selectedCandidates, totalPreemptedResourceAllowed,\n             queueReassignableResource,\n             context.getMaxAllowableLimitForIntraQueuePreemption());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeIntraQueuePreemptionDemand(Resource clusterResource,\n      Resource totalPreemptedResourceAllowed,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n\n    // 1. Iterate through all partition to calculate demand within a partition.\n    for (String partition : context.getAllPartitions()) {\n      LinkedHashSet\u003cString\u003e queueNames \u003d context\n          .getUnderServedQueuesPerPartition(partition);\n\n      if (null \u003d\u003d queueNames) {\n        continue;\n      }\n\n      // 2. loop through all queues corresponding to a partition.\n      for (String queueName : queueNames) {\n        TempQueuePerPartition tq \u003d context.getQueueByPartition(queueName,\n            partition);\n        LeafQueue leafQueue \u003d tq.leafQueue;\n\n        // skip if its parent queue\n        if (null \u003d\u003d leafQueue) {\n          continue;\n        }\n\n        // 3. Consider reassignableResource as (used - actuallyToBePreempted).\n        // This provides as upper limit to split apps quota in a queue.\n        Resource queueReassignableResource \u003d Resources.subtract(tq.getUsed(),\n            tq.getActuallyToBePreempted());\n\n        // 4. Check queue\u0027s used capacity. Make sure that the used capacity is\n        // above certain limit to consider for intra queue preemption.\n        if (leafQueue.getQueueCapacities().getUsedCapacity(partition) \u003c context\n            .getMinimumThresholdForIntraQueuePreemption()) {\n          continue;\n        }\n\n        // 5. compute the allocation of all apps based on queue\u0027s unallocated\n        // capacity\n        fifoPreemptionComputePlugin.computeAppsIdealAllocation(clusterResource,\n            tq, selectedCandidates, totalPreemptedResourceAllowed,\n            queueReassignableResource,\n            context.getMaxAllowableLimitForIntraQueuePreemption());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/IntraQueueCandidatesSelector.java",
      "extendedDetails": {}
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,51 @@\n+  private void computeIntraQueuePreemptionDemand(Resource clusterResource,\n+      Resource totalPreemptedResourceAllowed,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n+\n+    // 1. Iterate through all partition to calculate demand within a partition.\n+    for (String partition : context.getAllPartitions()) {\n+      LinkedHashSet\u003cString\u003e queueNames \u003d context\n+          .getUnderServedQueuesPerPartition(partition);\n+\n+      if (null \u003d\u003d queueNames) {\n+        continue;\n+      }\n+\n+      // 2. Its better to get partition based resource limit earlier before\n+      // starting calculation\n+      Resource partitionBasedResource \u003d\n+          context.getPartitionResource(partition);\n+\n+      // 3. loop through all queues corresponding to a partition.\n+      for (String queueName : queueNames) {\n+        TempQueuePerPartition tq \u003d context.getQueueByPartition(queueName,\n+            partition);\n+        LeafQueue leafQueue \u003d tq.leafQueue;\n+\n+        // skip if its parent queue\n+        if (null \u003d\u003d leafQueue) {\n+          continue;\n+        }\n+\n+        // 4. Consider reassignableResource as (used - actuallyToBePreempted).\n+        // This provides as upper limit to split apps quota in a queue.\n+        Resource queueReassignableResource \u003d Resources.subtract(tq.getUsed(),\n+            tq.getActuallyToBePreempted());\n+\n+        // 5. Check queue\u0027s used capacity. Make sure that the used capacity is\n+        // above certain limit to consider for intra queue preemption.\n+        if (leafQueue.getQueueCapacities().getUsedCapacity(partition) \u003c context\n+            .getMinimumThresholdForIntraQueuePreemption()) {\n+          continue;\n+        }\n+\n+        // 6. compute the allocation of all apps based on queue\u0027s unallocated\n+        // capacity\n+        fifoPreemptionComputePlugin.computeAppsIdealAllocation(clusterResource,\n+            partitionBasedResource, tq, selectedCandidates,\n+            totalPreemptedResourceAllowed,\n+            queueReassignableResource,\n+            context.getMaxAllowableLimitForIntraQueuePreemption());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeIntraQueuePreemptionDemand(Resource clusterResource,\n      Resource totalPreemptedResourceAllowed,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n\n    // 1. Iterate through all partition to calculate demand within a partition.\n    for (String partition : context.getAllPartitions()) {\n      LinkedHashSet\u003cString\u003e queueNames \u003d context\n          .getUnderServedQueuesPerPartition(partition);\n\n      if (null \u003d\u003d queueNames) {\n        continue;\n      }\n\n      // 2. Its better to get partition based resource limit earlier before\n      // starting calculation\n      Resource partitionBasedResource \u003d\n          context.getPartitionResource(partition);\n\n      // 3. loop through all queues corresponding to a partition.\n      for (String queueName : queueNames) {\n        TempQueuePerPartition tq \u003d context.getQueueByPartition(queueName,\n            partition);\n        LeafQueue leafQueue \u003d tq.leafQueue;\n\n        // skip if its parent queue\n        if (null \u003d\u003d leafQueue) {\n          continue;\n        }\n\n        // 4. Consider reassignableResource as (used - actuallyToBePreempted).\n        // This provides as upper limit to split apps quota in a queue.\n        Resource queueReassignableResource \u003d Resources.subtract(tq.getUsed(),\n            tq.getActuallyToBePreempted());\n\n        // 5. Check queue\u0027s used capacity. Make sure that the used capacity is\n        // above certain limit to consider for intra queue preemption.\n        if (leafQueue.getQueueCapacities().getUsedCapacity(partition) \u003c context\n            .getMinimumThresholdForIntraQueuePreemption()) {\n          continue;\n        }\n\n        // 6. compute the allocation of all apps based on queue\u0027s unallocated\n        // capacity\n        fifoPreemptionComputePlugin.computeAppsIdealAllocation(clusterResource,\n            partitionBasedResource, tq, selectedCandidates,\n            totalPreemptedResourceAllowed,\n            queueReassignableResource,\n            context.getMaxAllowableLimitForIntraQueuePreemption());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/IntraQueueCandidatesSelector.java"
    }
  }
}