{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineEditsViewer.java",
  "functionName": "run",
  "functionId": "run___argv-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
  "functionStartLine": 207,
  "functionEndLine": 252,
  "numCommitsSeen": 11,
  "timeTaken": 5595,
  "changeHistory": [
    "08f5de1ef55f637b3bbde0ace28b42f155e285a1",
    "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e",
    "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "08f5de1ef55f637b3bbde0ace28b42f155e285a1": "Ybodychange",
    "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e": "Ybodychange",
    "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "08f5de1ef55f637b3bbde0ace28b42f155e285a1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9157. [OEV and OIV] : Unnecessary parsing for mandatory arguements if \u0027-h\u0027 option is specified as the only option (Contributed by nijel)\n",
      "commitDate": "15/10/15 5:07 AM",
      "commitName": "08f5de1ef55f637b3bbde0ace28b42f155e285a1",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "05/10/15 12:53 PM",
      "commitNameOld": "2fc2b50534c2052ed3f6f38f30d29d98d99fd10a",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,46 @@\n   public int run(String[] argv) throws Exception {\n     Options options \u003d buildOptions();\n     if(argv.length \u003d\u003d 0) {\n       printHelp();\n-      return -1;\n+      return 0;\n+    }\n+    // print help and exit with zero exit code\n+    if (argv.length \u003d\u003d 1 \u0026\u0026 isHelpOption(argv[0])) {\n+      printHelp();\n+      return 0;\n     }\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n         \"Error parsing command-line options: \" + e.getMessage());\n       printHelp();\n       return -1;\n     }\n     \n-    if(cmd.hasOption(\"h\")) { // print help and exit\n+    if (cmd.hasOption(\"h\")) {\n+      // print help and exit with non zero exit code since\n+      // it is not expected to give help and other options together.\n       printHelp();\n       return -1;\n     }\n     String inputFileName \u003d cmd.getOptionValue(\"i\");\n     String outputFileName \u003d cmd.getOptionValue(\"o\");\n     String processor \u003d cmd.getOptionValue(\"p\");\n     if(processor \u003d\u003d null) {\n       processor \u003d defaultProcessor;\n     }\n     Flags flags \u003d new Flags();\n     if (cmd.hasOption(\"r\")) {\n       flags.setRecoveryMode();\n     }\n     if (cmd.hasOption(\"f\")) {\n       flags.setFixTxIds();\n     }\n     if (cmd.hasOption(\"v\")) {\n       flags.setPrintToScreen();\n     }\n     return go(inputFileName, outputFileName, processor, flags, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d buildOptions();\n    if(argv.length \u003d\u003d 0) {\n      printHelp();\n      return 0;\n    }\n    // print help and exit with zero exit code\n    if (argv.length \u003d\u003d 1 \u0026\u0026 isHelpOption(argv[0])) {\n      printHelp();\n      return 0;\n    }\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n        \"Error parsing command-line options: \" + e.getMessage());\n      printHelp();\n      return -1;\n    }\n    \n    if (cmd.hasOption(\"h\")) {\n      // print help and exit with non zero exit code since\n      // it is not expected to give help and other options together.\n      printHelp();\n      return -1;\n    }\n    String inputFileName \u003d cmd.getOptionValue(\"i\");\n    String outputFileName \u003d cmd.getOptionValue(\"o\");\n    String processor \u003d cmd.getOptionValue(\"p\");\n    if(processor \u003d\u003d null) {\n      processor \u003d defaultProcessor;\n    }\n    Flags flags \u003d new Flags();\n    if (cmd.hasOption(\"r\")) {\n      flags.setRecoveryMode();\n    }\n    if (cmd.hasOption(\"f\")) {\n      flags.setFixTxIds();\n    }\n    if (cmd.hasOption(\"v\")) {\n      flags.setPrintToScreen();\n    }\n    return go(inputFileName, outputFileName, processor, flags, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
      "extendedDetails": {}
    },
    "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3372. offlineEditsViewer should be able to read a binary edits file with recovery mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349628 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/12 8:31 PM",
      "commitName": "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "04/04/12 5:02 PM",
      "commitNameOld": "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 69.15,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   public int run(String[] argv) throws Exception {\n     Options options \u003d buildOptions();\n     if(argv.length \u003d\u003d 0) {\n       printHelp();\n       return -1;\n     }\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n         \"Error parsing command-line options: \" + e.getMessage());\n       printHelp();\n       return -1;\n     }\n+    \n     if(cmd.hasOption(\"h\")) { // print help and exit\n       printHelp();\n       return -1;\n     }\n     String inputFileName \u003d cmd.getOptionValue(\"i\");\n     String outputFileName \u003d cmd.getOptionValue(\"o\");\n     String processor \u003d cmd.getOptionValue(\"p\");\n     if(processor \u003d\u003d null) {\n       processor \u003d defaultProcessor;\n     }\n-    boolean printToScreen \u003d cmd.hasOption(\"v\");\n-    boolean fixTxIds \u003d cmd.hasOption(\"f\");\n-    return go(inputFileName, outputFileName, processor,\n-        printToScreen, fixTxIds, null);\n+    Flags flags \u003d new Flags();\n+    if (cmd.hasOption(\"r\")) {\n+      flags.setRecoveryMode();\n+    }\n+    if (cmd.hasOption(\"f\")) {\n+      flags.setFixTxIds();\n+    }\n+    if (cmd.hasOption(\"v\")) {\n+      flags.setPrintToScreen();\n+    }\n+    return go(inputFileName, outputFileName, processor, flags, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d buildOptions();\n    if(argv.length \u003d\u003d 0) {\n      printHelp();\n      return -1;\n    }\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n        \"Error parsing command-line options: \" + e.getMessage());\n      printHelp();\n      return -1;\n    }\n    \n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printHelp();\n      return -1;\n    }\n    String inputFileName \u003d cmd.getOptionValue(\"i\");\n    String outputFileName \u003d cmd.getOptionValue(\"o\");\n    String processor \u003d cmd.getOptionValue(\"p\");\n    if(processor \u003d\u003d null) {\n      processor \u003d defaultProcessor;\n    }\n    Flags flags \u003d new Flags();\n    if (cmd.hasOption(\"r\")) {\n      flags.setRecoveryMode();\n    }\n    if (cmd.hasOption(\"f\")) {\n      flags.setFixTxIds();\n    }\n    if (cmd.hasOption(\"v\")) {\n      flags.setPrintToScreen();\n    }\n    return go(inputFileName, outputFileName, processor, flags, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
      "extendedDetails": {}
    },
    "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3050. rework OEV to share more code with the NameNode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 5:02 PM",
      "commitName": "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 223.99,
      "commitsBetweenForRepo": 1600,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,31 @@\n   public int run(String[] argv) throws Exception {\n-    int exitCode \u003d 0;\n-\n     Options options \u003d buildOptions();\n     if(argv.length \u003d\u003d 0) {\n       printHelp();\n       return -1;\n     }\n-\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n-\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n         \"Error parsing command-line options: \" + e.getMessage());\n       printHelp();\n       return -1;\n     }\n-\n     if(cmd.hasOption(\"h\")) { // print help and exit\n       printHelp();\n       return -1;\n     }\n-\n-    boolean printToScreen    \u003d false;\n-    String inputFilenameArg  \u003d cmd.getOptionValue(\"i\");\n-    String outputFilenameArg \u003d cmd.getOptionValue(\"o\");\n-    String processor         \u003d cmd.getOptionValue(\"p\");\n-    if(processor \u003d\u003d null) { processor \u003d defaultProcessor; }\n-\n-    if(cmd.hasOption(\"v\")) { // print output to screen too\n-      printToScreen \u003d true;\n-      System.out.println(\"input  [\" + inputFilenameArg  + \"]\");\n-      System.out.println(\"output [\" + outputFilenameArg + \"]\");\n+    String inputFileName \u003d cmd.getOptionValue(\"i\");\n+    String outputFileName \u003d cmd.getOptionValue(\"o\");\n+    String processor \u003d cmd.getOptionValue(\"p\");\n+    if(processor \u003d\u003d null) {\n+      processor \u003d defaultProcessor;\n     }\n-\n-    try {\n-      go(EditsVisitorFactory.getEditsVisitor(\n-        outputFilenameArg,\n-        processor,\n-        TokenizerFactory.getTokenizer(inputFilenameArg),\n-        printToScreen));\n-    } catch (EOFException e) {\n-      System.err.println(\"Input file ended unexpectedly. Exiting\");\n-    } catch(IOException e) {\n-      System.err.println(\"Encountered exception. Exiting: \" + e.getMessage());\n-    }\n-\n-    return exitCode;\n+    boolean printToScreen \u003d cmd.hasOption(\"v\");\n+    boolean fixTxIds \u003d cmd.hasOption(\"f\");\n+    return go(inputFileName, outputFileName, processor,\n+        printToScreen, fixTxIds, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d buildOptions();\n    if(argv.length \u003d\u003d 0) {\n      printHelp();\n      return -1;\n    }\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n        \"Error parsing command-line options: \" + e.getMessage());\n      printHelp();\n      return -1;\n    }\n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printHelp();\n      return -1;\n    }\n    String inputFileName \u003d cmd.getOptionValue(\"i\");\n    String outputFileName \u003d cmd.getOptionValue(\"o\");\n    String processor \u003d cmd.getOptionValue(\"p\");\n    if(processor \u003d\u003d null) {\n      processor \u003d defaultProcessor;\n    }\n    boolean printToScreen \u003d cmd.hasOption(\"v\");\n    boolean fixTxIds \u003d cmd.hasOption(\"f\");\n    return go(inputFileName, outputFileName, processor,\n        printToScreen, fixTxIds, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d 0;\n\n    Options options \u003d buildOptions();\n    if(argv.length \u003d\u003d 0) {\n      printHelp();\n      return -1;\n    }\n\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n        \"Error parsing command-line options: \" + e.getMessage());\n      printHelp();\n      return -1;\n    }\n\n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printHelp();\n      return -1;\n    }\n\n    boolean printToScreen    \u003d false;\n    String inputFilenameArg  \u003d cmd.getOptionValue(\"i\");\n    String outputFilenameArg \u003d cmd.getOptionValue(\"o\");\n    String processor         \u003d cmd.getOptionValue(\"p\");\n    if(processor \u003d\u003d null) { processor \u003d defaultProcessor; }\n\n    if(cmd.hasOption(\"v\")) { // print output to screen too\n      printToScreen \u003d true;\n      System.out.println(\"input  [\" + inputFilenameArg  + \"]\");\n      System.out.println(\"output [\" + outputFilenameArg + \"]\");\n    }\n\n    try {\n      go(EditsVisitorFactory.getEditsVisitor(\n        outputFilenameArg,\n        processor,\n        TokenizerFactory.getTokenizer(inputFilenameArg),\n        printToScreen));\n    } catch (EOFException e) {\n      System.err.println(\"Input file ended unexpectedly. Exiting\");\n    } catch(IOException e) {\n      System.err.println(\"Encountered exception. Exiting: \" + e.getMessage());\n    }\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d 0;\n\n    Options options \u003d buildOptions();\n    if(argv.length \u003d\u003d 0) {\n      printHelp();\n      return -1;\n    }\n\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n        \"Error parsing command-line options: \" + e.getMessage());\n      printHelp();\n      return -1;\n    }\n\n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printHelp();\n      return -1;\n    }\n\n    boolean printToScreen    \u003d false;\n    String inputFilenameArg  \u003d cmd.getOptionValue(\"i\");\n    String outputFilenameArg \u003d cmd.getOptionValue(\"o\");\n    String processor         \u003d cmd.getOptionValue(\"p\");\n    if(processor \u003d\u003d null) { processor \u003d defaultProcessor; }\n\n    if(cmd.hasOption(\"v\")) { // print output to screen too\n      printToScreen \u003d true;\n      System.out.println(\"input  [\" + inputFilenameArg  + \"]\");\n      System.out.println(\"output [\" + outputFilenameArg + \"]\");\n    }\n\n    try {\n      go(EditsVisitorFactory.getEditsVisitor(\n        outputFilenameArg,\n        processor,\n        TokenizerFactory.getTokenizer(inputFilenameArg),\n        printToScreen));\n    } catch (EOFException e) {\n      System.err.println(\"Input file ended unexpectedly. Exiting\");\n    } catch(IOException e) {\n      System.err.println(\"Encountered exception. Exiting: \" + e.getMessage());\n    }\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,52 @@\n+  public int run(String[] argv) throws Exception {\n+    int exitCode \u003d 0;\n+\n+    Options options \u003d buildOptions();\n+    if(argv.length \u003d\u003d 0) {\n+      printHelp();\n+      return -1;\n+    }\n+\n+    CommandLineParser parser \u003d new PosixParser();\n+    CommandLine cmd;\n+\n+    try {\n+      cmd \u003d parser.parse(options, argv);\n+    } catch (ParseException e) {\n+      System.out.println(\n+        \"Error parsing command-line options: \" + e.getMessage());\n+      printHelp();\n+      return -1;\n+    }\n+\n+    if(cmd.hasOption(\"h\")) { // print help and exit\n+      printHelp();\n+      return -1;\n+    }\n+\n+    boolean printToScreen    \u003d false;\n+    String inputFilenameArg  \u003d cmd.getOptionValue(\"i\");\n+    String outputFilenameArg \u003d cmd.getOptionValue(\"o\");\n+    String processor         \u003d cmd.getOptionValue(\"p\");\n+    if(processor \u003d\u003d null) { processor \u003d defaultProcessor; }\n+\n+    if(cmd.hasOption(\"v\")) { // print output to screen too\n+      printToScreen \u003d true;\n+      System.out.println(\"input  [\" + inputFilenameArg  + \"]\");\n+      System.out.println(\"output [\" + outputFilenameArg + \"]\");\n+    }\n+\n+    try {\n+      go(EditsVisitorFactory.getEditsVisitor(\n+        outputFilenameArg,\n+        processor,\n+        TokenizerFactory.getTokenizer(inputFilenameArg),\n+        printToScreen));\n+    } catch (EOFException e) {\n+      System.err.println(\"Input file ended unexpectedly. Exiting\");\n+    } catch(IOException e) {\n+      System.err.println(\"Encountered exception. Exiting: \" + e.getMessage());\n+    }\n+\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d 0;\n\n    Options options \u003d buildOptions();\n    if(argv.length \u003d\u003d 0) {\n      printHelp();\n      return -1;\n    }\n\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n        \"Error parsing command-line options: \" + e.getMessage());\n      printHelp();\n      return -1;\n    }\n\n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printHelp();\n      return -1;\n    }\n\n    boolean printToScreen    \u003d false;\n    String inputFilenameArg  \u003d cmd.getOptionValue(\"i\");\n    String outputFilenameArg \u003d cmd.getOptionValue(\"o\");\n    String processor         \u003d cmd.getOptionValue(\"p\");\n    if(processor \u003d\u003d null) { processor \u003d defaultProcessor; }\n\n    if(cmd.hasOption(\"v\")) { // print output to screen too\n      printToScreen \u003d true;\n      System.out.println(\"input  [\" + inputFilenameArg  + \"]\");\n      System.out.println(\"output [\" + outputFilenameArg + \"]\");\n    }\n\n    try {\n      go(EditsVisitorFactory.getEditsVisitor(\n        outputFilenameArg,\n        processor,\n        TokenizerFactory.getTokenizer(inputFilenameArg),\n        printToScreen));\n    } catch (EOFException e) {\n      System.err.println(\"Input file ended unexpectedly. Exiting\");\n    } catch(IOException e) {\n      System.err.println(\"Encountered exception. Exiting: \" + e.getMessage());\n    }\n\n    return exitCode;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsViewer.java"
    }
  }
}