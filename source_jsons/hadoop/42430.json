{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MemoryRMStateStore.java",
  "functionName": "updateApplicationAttemptStateInternal",
  "functionId": "updateApplicationAttemptStateInternal___appAttemptId-ApplicationAttemptId__attemptState-ApplicationAttemptStateData",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
  "functionStartLine": 142,
  "functionEndLine": 154,
  "numCommitsSeen": 91,
  "timeTaken": 4662,
  "changeHistory": [
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "d16470025aa0c51a04c530863a96108895d72ddf",
    "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
    "93907baa0b033c1431dc7055116746fc9db508cc",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
    "ec010a29362c6c5572f8681f4e7d0469176345e1",
    "74231f027607ff1a6fe7d72fad28108826963cf3",
    "ef9f251679d7e87698eecd6a119652900274a172",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39"
  ],
  "changeHistoryShort": {
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ymultichange(Yparameterchange,Ybodychange)",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "d16470025aa0c51a04c530863a96108895d72ddf": "Ybodychange",
    "c94f2cec3a4d46718aa4cd144fb32e328406b9b3": "Yparameterchange",
    "93907baa0b033c1431dc7055116746fc9db508cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Ymultichange(Yrename,Ybodychange)",
    "ec010a29362c6c5572f8681f4e7d0469176345e1": "Ybodychange",
    "74231f027607ff1a6fe7d72fad28108826963cf3": "Ybodychange",
    "ef9f251679d7e87698eecd6a119652900274a172": "Ybodychange",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "25/11/14 12:48 PM",
          "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
          "commitAuthor": "Jian He",
          "commitDateOld": "13/09/14 6:04 PM",
          "commitNameOld": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 72.82,
          "commitsBetweenForRepo": 703,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,13 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n       ApplicationAttemptId appAttemptId,\n-      ApplicationAttemptStateData attemptStateData)\n+      ApplicationAttemptStateData attemptState)\n       throws Exception {\n-    Credentials credentials \u003d null;\n-    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n-      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-      credentials \u003d new Credentials();\n-      dibb.reset(attemptStateData.getAppAttemptTokens());\n-      credentials.readTokenStorageStream(dibb);\n-    }\n-    ApplicationAttemptState updatedAttemptState \u003d\n-        new ApplicationAttemptState(appAttemptId,\n-          attemptStateData.getMasterContainer(), credentials,\n-          attemptStateData.getStartTime(), attemptStateData.getState(),\n-          attemptStateData.getFinalTrackingUrl(),\n-          attemptStateData.getDiagnostics(),\n-          attemptStateData.getFinalApplicationStatus(),\n-          attemptStateData.getAMContainerExitStatus(),\n-          attemptStateData.getFinishTime(),\n-          attemptStateData.getMemorySeconds(),\n-          attemptStateData.getVcoreSeconds());\n-\n-    ApplicationState appState \u003d\n-        state.getApplicationState().get(\n-          updatedAttemptState.getAttemptId().getApplicationId());\n+    ApplicationStateData appState \u003d\n+        state.getApplicationState().get(appAttemptId.getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n-    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n-        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n-    appState.attempts.put(updatedAttemptState.getAttemptId(),\n-      updatedAttemptState);\n+    LOG.info(\"Updating final state \" + attemptState.getState()\n+        + \" for attempt: \" + attemptState.getAttemptId());\n+    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateData attemptState)\n      throws Exception {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(appAttemptId.getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + attemptState.getState()\n        + \" for attempt: \" + attemptState.getAttemptId());\n    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[appAttemptId-ApplicationAttemptId, attemptStateData-ApplicationAttemptStateData]",
            "newValue": "[appAttemptId-ApplicationAttemptId, attemptState-ApplicationAttemptStateData]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "25/11/14 12:48 PM",
          "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
          "commitAuthor": "Jian He",
          "commitDateOld": "13/09/14 6:04 PM",
          "commitNameOld": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 72.82,
          "commitsBetweenForRepo": 703,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,13 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n       ApplicationAttemptId appAttemptId,\n-      ApplicationAttemptStateData attemptStateData)\n+      ApplicationAttemptStateData attemptState)\n       throws Exception {\n-    Credentials credentials \u003d null;\n-    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n-      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-      credentials \u003d new Credentials();\n-      dibb.reset(attemptStateData.getAppAttemptTokens());\n-      credentials.readTokenStorageStream(dibb);\n-    }\n-    ApplicationAttemptState updatedAttemptState \u003d\n-        new ApplicationAttemptState(appAttemptId,\n-          attemptStateData.getMasterContainer(), credentials,\n-          attemptStateData.getStartTime(), attemptStateData.getState(),\n-          attemptStateData.getFinalTrackingUrl(),\n-          attemptStateData.getDiagnostics(),\n-          attemptStateData.getFinalApplicationStatus(),\n-          attemptStateData.getAMContainerExitStatus(),\n-          attemptStateData.getFinishTime(),\n-          attemptStateData.getMemorySeconds(),\n-          attemptStateData.getVcoreSeconds());\n-\n-    ApplicationState appState \u003d\n-        state.getApplicationState().get(\n-          updatedAttemptState.getAttemptId().getApplicationId());\n+    ApplicationStateData appState \u003d\n+        state.getApplicationState().get(appAttemptId.getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n-    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n-        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n-    appState.attempts.put(updatedAttemptState.getAttemptId(),\n-      updatedAttemptState);\n+    LOG.info(\"Updating final state \" + attemptState.getState()\n+        + \" for attempt: \" + attemptState.getAttemptId());\n+    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateData attemptState)\n      throws Exception {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(appAttemptId.getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + attemptState.getState()\n        + \" for attempt: \" + attemptState.getAttemptId());\n    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": {
      "type": "Ybodychange",
      "commitMessage": "YARN-611. Added an API to let apps specify an interval beyond which AM failures should be ignored towards counting max-attempts. Contributed by Xuan Gong.\n",
      "commitDate": "13/09/14 6:04 PM",
      "commitName": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/09/14 10:33 AM",
      "commitNameOld": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n       ApplicationAttemptId appAttemptId,\n       ApplicationAttemptStateData attemptStateData)\n       throws Exception {\n     Credentials credentials \u003d null;\n     if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState updatedAttemptState \u003d\n         new ApplicationAttemptState(appAttemptId,\n           attemptStateData.getMasterContainer(), credentials,\n           attemptStateData.getStartTime(), attemptStateData.getState(),\n           attemptStateData.getFinalTrackingUrl(),\n           attemptStateData.getDiagnostics(),\n           attemptStateData.getFinalApplicationStatus(),\n           attemptStateData.getAMContainerExitStatus(),\n+          attemptStateData.getFinishTime(),\n           attemptStateData.getMemorySeconds(),\n           attemptStateData.getVcoreSeconds());\n \n     ApplicationState appState \u003d\n         state.getApplicationState().get(\n           updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n     LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n         + \" for attempt: \" + updatedAttemptState.getAttemptId());\n     appState.attempts.put(updatedAttemptState.getAttemptId(),\n       updatedAttemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateData attemptStateData)\n      throws Exception {\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(appAttemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus(),\n          attemptStateData.getAMContainerExitStatus(),\n          attemptStateData.getFinishTime(),\n          attemptStateData.getMemorySeconds(),\n          attemptStateData.getVcoreSeconds());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "31/07/14 2:27 AM",
      "commitNameOld": "1d6e178144e9e3915ceea92d8c5de8b14cd02714",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 41.66,
      "commitsBetweenForRepo": 335,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n       ApplicationAttemptId appAttemptId,\n       ApplicationAttemptStateData attemptStateData)\n       throws Exception {\n     Credentials credentials \u003d null;\n     if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState updatedAttemptState \u003d\n         new ApplicationAttemptState(appAttemptId,\n           attemptStateData.getMasterContainer(), credentials,\n           attemptStateData.getStartTime(), attemptStateData.getState(),\n           attemptStateData.getFinalTrackingUrl(),\n           attemptStateData.getDiagnostics(),\n           attemptStateData.getFinalApplicationStatus(),\n-          attemptStateData.getAMContainerExitStatus());\n+          attemptStateData.getAMContainerExitStatus(),\n+          attemptStateData.getMemorySeconds(),\n+          attemptStateData.getVcoreSeconds());\n \n     ApplicationState appState \u003d\n         state.getApplicationState().get(\n           updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n     LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n         + \" for attempt: \" + updatedAttemptState.getAttemptId());\n     appState.attempts.put(updatedAttemptState.getAttemptId(),\n       updatedAttemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateData attemptStateData)\n      throws Exception {\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(appAttemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus(),\n          attemptStateData.getAMContainerExitStatus(),\n          attemptStateData.getMemorySeconds(),\n          attemptStateData.getVcoreSeconds());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {}
    },
    "d16470025aa0c51a04c530863a96108895d72ddf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2074. Changed ResourceManager to not count AM preemptions towards app failures. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:15 AM",
      "commitName": "d16470025aa0c51a04c530863a96108895d72ddf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/06/14 12:44 PM",
      "commitNameOld": "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.81,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n       ApplicationAttemptId appAttemptId,\n       ApplicationAttemptStateData attemptStateData)\n       throws Exception {\n     Credentials credentials \u003d null;\n     if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState updatedAttemptState \u003d\n         new ApplicationAttemptState(appAttemptId,\n           attemptStateData.getMasterContainer(), credentials,\n           attemptStateData.getStartTime(), attemptStateData.getState(),\n           attemptStateData.getFinalTrackingUrl(),\n           attemptStateData.getDiagnostics(),\n-          attemptStateData.getFinalApplicationStatus());\n+          attemptStateData.getFinalApplicationStatus(),\n+          attemptStateData.getAMContainerExitStatus());\n \n     ApplicationState appState \u003d\n         state.getApplicationState().get(\n           updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n     LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n         + \" for attempt: \" + updatedAttemptState.getAttemptId());\n     appState.attempts.put(updatedAttemptState.getAttemptId(),\n       updatedAttemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateData attemptStateData)\n      throws Exception {\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(appAttemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus(),\n          attemptStateData.getAMContainerExitStatus());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {}
    },
    "c94f2cec3a4d46718aa4cd144fb32e328406b9b3": {
      "type": "Yparameterchange",
      "commitMessage": "Augmented RMStateStore with state machine. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/06/14 12:44 PM",
      "commitName": "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/04/14 1:27 PM",
      "commitNameOld": "bd43d2481e1084aeb228a262ceb00c4cbad142d4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 52.97,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n       ApplicationAttemptId appAttemptId,\n-      ApplicationAttemptStateDataPBImpl attemptStateData)\n+      ApplicationAttemptStateData attemptStateData)\n       throws Exception {\n     Credentials credentials \u003d null;\n     if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState updatedAttemptState \u003d\n         new ApplicationAttemptState(appAttemptId,\n           attemptStateData.getMasterContainer(), credentials,\n           attemptStateData.getStartTime(), attemptStateData.getState(),\n           attemptStateData.getFinalTrackingUrl(),\n           attemptStateData.getDiagnostics(),\n           attemptStateData.getFinalApplicationStatus());\n \n     ApplicationState appState \u003d\n         state.getApplicationState().get(\n           updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n     LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n         + \" for attempt: \" + updatedAttemptState.getAttemptId());\n     appState.attempts.put(updatedAttemptState.getAttemptId(),\n       updatedAttemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateData attemptStateData)\n      throws Exception {\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(appAttemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {
        "oldValue": "[appAttemptId-ApplicationAttemptId, attemptStateData-ApplicationAttemptStateDataPBImpl]",
        "newValue": "[appAttemptId-ApplicationAttemptId, attemptStateData-ApplicationAttemptStateData]"
      }
    },
    "93907baa0b033c1431dc7055116746fc9db508cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 6:33 PM",
      "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/12/13 6:33 PM",
          "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/12/13 8:17 PM",
          "commitNameOld": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 10.93,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,30 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n-      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)\n+      ApplicationAttemptId appAttemptId,\n+      ApplicationAttemptStateDataPBImpl attemptStateData)\n       throws Exception {\n-    ApplicationAttemptId attemptId \u003d\n-        ConverterUtils.toApplicationAttemptId(attemptIdStr);\n     Credentials credentials \u003d null;\n     if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState updatedAttemptState \u003d\n-        new ApplicationAttemptState(attemptId,\n+        new ApplicationAttemptState(appAttemptId,\n           attemptStateData.getMasterContainer(), credentials,\n           attemptStateData.getStartTime(), attemptStateData.getState(),\n           attemptStateData.getFinalTrackingUrl(),\n           attemptStateData.getDiagnostics(),\n           attemptStateData.getFinalApplicationStatus());\n \n     ApplicationState appState \u003d\n         state.getApplicationState().get(\n           updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n     LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n         + \" for attempt: \" + updatedAttemptState.getAttemptId());\n     appState.attempts.put(updatedAttemptState.getAttemptId(),\n       updatedAttemptState);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateDataPBImpl attemptStateData)\n      throws Exception {\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(appAttemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[attemptIdStr-String, attemptStateData-ApplicationAttemptStateDataPBImpl]",
            "newValue": "[appAttemptId-ApplicationAttemptId, attemptStateData-ApplicationAttemptStateDataPBImpl]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/12/13 6:33 PM",
          "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/12/13 8:17 PM",
          "commitNameOld": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 10.93,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,30 @@\n   public synchronized void updateApplicationAttemptStateInternal(\n-      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)\n+      ApplicationAttemptId appAttemptId,\n+      ApplicationAttemptStateDataPBImpl attemptStateData)\n       throws Exception {\n-    ApplicationAttemptId attemptId \u003d\n-        ConverterUtils.toApplicationAttemptId(attemptIdStr);\n     Credentials credentials \u003d null;\n     if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState updatedAttemptState \u003d\n-        new ApplicationAttemptState(attemptId,\n+        new ApplicationAttemptState(appAttemptId,\n           attemptStateData.getMasterContainer(), credentials,\n           attemptStateData.getStartTime(), attemptStateData.getState(),\n           attemptStateData.getFinalTrackingUrl(),\n           attemptStateData.getDiagnostics(),\n           attemptStateData.getFinalApplicationStatus());\n \n     ApplicationState appState \u003d\n         state.getApplicationState().get(\n           updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n     LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n         + \" for attempt: \" + updatedAttemptState.getAttemptId());\n     appState.attempts.put(updatedAttemptState.getAttemptId(),\n       updatedAttemptState);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      ApplicationAttemptId appAttemptId,\n      ApplicationAttemptStateDataPBImpl attemptStateData)\n      throws Exception {\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(appAttemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/10/13 10:25 AM",
          "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/13 6:01 PM",
          "commitNameOld": "ec010a29362c6c5572f8681f4e7d0469176345e1",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 46.68,
          "commitsBetweenForRepo": 323,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n-                            ApplicationAttemptStateDataPBImpl attemptStateData)\n-                            throws Exception {\n-    ApplicationAttemptId attemptId \u003d ConverterUtils\n-                                        .toApplicationAttemptId(attemptIdStr);\n+  public synchronized void updateApplicationAttemptStateInternal(\n+      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)\n+      throws Exception {\n+    ApplicationAttemptId attemptId \u003d\n+        ConverterUtils.toApplicationAttemptId(attemptIdStr);\n     Credentials credentials \u003d null;\n-    if(attemptStateData.getAppAttemptTokens() !\u003d null){\n+    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n-    ApplicationAttemptState attemptState \u003d\n+    ApplicationAttemptState updatedAttemptState \u003d\n         new ApplicationAttemptState(attemptId,\n-          attemptStateData.getMasterContainer(), credentials);\n+          attemptStateData.getMasterContainer(), credentials,\n+          attemptStateData.getStartTime(), attemptStateData.getState(),\n+          attemptStateData.getFinalTrackingUrl(),\n+          attemptStateData.getDiagnostics(),\n+          attemptStateData.getFinalApplicationStatus());\n \n-    ApplicationState appState \u003d state.getApplicationState().get(\n-        attemptState.getAttemptId().getApplicationId());\n+    ApplicationState appState \u003d\n+        state.getApplicationState().get(\n+          updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n-\n-    if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n-      Exception e \u003d new IOException(\"Attempt: \" +\n-          attemptState.getAttemptId() + \" is already stored.\");\n-      LOG.info(\"Error storing info for attempt: \" +\n-          attemptState.getAttemptId(), e);\n-      throw e;\n-    }\n-    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n+        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n+    appState.attempts.put(updatedAttemptState.getAttemptId(),\n+      updatedAttemptState);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)\n      throws Exception {\n    ApplicationAttemptId attemptId \u003d\n        ConverterUtils.toApplicationAttemptId(attemptIdStr);\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(attemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
          "extendedDetails": {
            "oldValue": "storeApplicationAttemptState",
            "newValue": "updateApplicationAttemptStateInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/10/13 10:25 AM",
          "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/13 6:01 PM",
          "commitNameOld": "ec010a29362c6c5572f8681f4e7d0469176345e1",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 46.68,
          "commitsBetweenForRepo": 323,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n-                            ApplicationAttemptStateDataPBImpl attemptStateData)\n-                            throws Exception {\n-    ApplicationAttemptId attemptId \u003d ConverterUtils\n-                                        .toApplicationAttemptId(attemptIdStr);\n+  public synchronized void updateApplicationAttemptStateInternal(\n+      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)\n+      throws Exception {\n+    ApplicationAttemptId attemptId \u003d\n+        ConverterUtils.toApplicationAttemptId(attemptIdStr);\n     Credentials credentials \u003d null;\n-    if(attemptStateData.getAppAttemptTokens() !\u003d null){\n+    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n-    ApplicationAttemptState attemptState \u003d\n+    ApplicationAttemptState updatedAttemptState \u003d\n         new ApplicationAttemptState(attemptId,\n-          attemptStateData.getMasterContainer(), credentials);\n+          attemptStateData.getMasterContainer(), credentials,\n+          attemptStateData.getStartTime(), attemptStateData.getState(),\n+          attemptStateData.getFinalTrackingUrl(),\n+          attemptStateData.getDiagnostics(),\n+          attemptStateData.getFinalApplicationStatus());\n \n-    ApplicationState appState \u003d state.getApplicationState().get(\n-        attemptState.getAttemptId().getApplicationId());\n+    ApplicationState appState \u003d\n+        state.getApplicationState().get(\n+          updatedAttemptState.getAttemptId().getApplicationId());\n     if (appState \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n     }\n-\n-    if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n-      Exception e \u003d new IOException(\"Attempt: \" +\n-          attemptState.getAttemptId() + \" is already stored.\");\n-      LOG.info(\"Error storing info for attempt: \" +\n-          attemptState.getAttemptId(), e);\n-      throw e;\n-    }\n-    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n+        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n+    appState.attempts.put(updatedAttemptState.getAttemptId(),\n+      updatedAttemptState);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateApplicationAttemptStateInternal(\n      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)\n      throws Exception {\n    ApplicationAttemptId attemptId \u003d\n        ConverterUtils.toApplicationAttemptId(attemptIdStr);\n    Credentials credentials \u003d null;\n    if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState updatedAttemptState \u003d\n        new ApplicationAttemptState(attemptId,\n          attemptStateData.getMasterContainer(), credentials,\n          attemptStateData.getStartTime(), attemptStateData.getState(),\n          attemptStateData.getFinalTrackingUrl(),\n          attemptStateData.getDiagnostics(),\n          attemptStateData.getFinalApplicationStatus());\n\n    ApplicationState appState \u003d\n        state.getApplicationState().get(\n          updatedAttemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n    LOG.info(\"Updating final state \" + updatedAttemptState.getState()\n        + \" for attempt: \" + updatedAttemptState.getAttemptId());\n    appState.attempts.put(updatedAttemptState.getAttemptId(),\n      updatedAttemptState);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "ec010a29362c6c5572f8681f4e7d0469176345e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-540. Race condition causing RM to potentially relaunch already unregistered AMs on RM restart (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/13 6:01 PM",
      "commitName": "ec010a29362c6c5572f8681f4e7d0469176345e1",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "21/08/13 4:55 PM",
      "commitNameOld": "ad0011a3405fee6c6e45996d39557e0f8d420633",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 24.05,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                             ApplicationAttemptStateDataPBImpl attemptStateData)\n                             throws Exception {\n     ApplicationAttemptId attemptId \u003d ConverterUtils\n                                         .toApplicationAttemptId(attemptIdStr);\n     Credentials credentials \u003d null;\n     if(attemptStateData.getAppAttemptTokens() !\u003d null){\n       DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n       credentials \u003d new Credentials();\n       dibb.reset(attemptStateData.getAppAttemptTokens());\n       credentials.readTokenStorageStream(dibb);\n     }\n     ApplicationAttemptState attemptState \u003d\n         new ApplicationAttemptState(attemptId,\n           attemptStateData.getMasterContainer(), credentials);\n \n     ApplicationState appState \u003d state.getApplicationState().get(\n         attemptState.getAttemptId().getApplicationId());\n-    assert appState !\u003d null;\n+    if (appState \u003d\u003d null) {\n+      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n+    }\n \n     if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n       Exception e \u003d new IOException(\"Attempt: \" +\n           attemptState.getAttemptId() + \" is already stored.\");\n       LOG.info(\"Error storing info for attempt: \" +\n           attemptState.getAttemptId(), e);\n       throw e;\n     }\n     appState.attempts.put(attemptState.getAttemptId(), attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                            ApplicationAttemptStateDataPBImpl attemptStateData)\n                            throws Exception {\n    ApplicationAttemptId attemptId \u003d ConverterUtils\n                                        .toApplicationAttemptId(attemptIdStr);\n    Credentials credentials \u003d null;\n    if(attemptStateData.getAppAttemptTokens() !\u003d null){\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(attemptId,\n          attemptStateData.getMasterContainer(), credentials);\n\n    ApplicationState appState \u003d state.getApplicationState().get(\n        attemptState.getAttemptId().getApplicationId());\n    if (appState \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Application doesn\u0027t exist\");\n    }\n\n    if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n      Exception e \u003d new IOException(\"Attempt: \" +\n          attemptState.getAttemptId() + \" is already stored.\");\n      LOG.info(\"Error storing info for attempt: \" +\n          attemptState.getAttemptId(), e);\n      throw e;\n    }\n    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {}
    },
    "74231f027607ff1a6fe7d72fad28108826963cf3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-582. Changed ResourceManager to recover Application token and client tokens for app attempt so that RM can be restarted while preserving current applications. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/13 11:20 PM",
      "commitName": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/04/13 11:02 AM",
      "commitNameOld": "f0ac5a849c24c20f891c2a43af412030e7af2b9b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.51,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,29 @@\n   public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                             ApplicationAttemptStateDataPBImpl attemptStateData)\n                             throws Exception {\n     ApplicationAttemptId attemptId \u003d ConverterUtils\n                                         .toApplicationAttemptId(attemptIdStr);\n-    ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n-                            attemptId, attemptStateData.getMasterContainer());\n+    Credentials credentials \u003d null;\n+    if(attemptStateData.getAppAttemptTokens() !\u003d null){\n+      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n+      credentials \u003d new Credentials();\n+      dibb.reset(attemptStateData.getAppAttemptTokens());\n+      credentials.readTokenStorageStream(dibb);\n+    }\n+    ApplicationAttemptState attemptState \u003d\n+        new ApplicationAttemptState(attemptId,\n+          attemptStateData.getMasterContainer(), credentials);\n \n     ApplicationState appState \u003d state.getApplicationState().get(\n         attemptState.getAttemptId().getApplicationId());\n     assert appState !\u003d null;\n \n     if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n       Exception e \u003d new IOException(\"Attempt: \" +\n           attemptState.getAttemptId() + \" is already stored.\");\n       LOG.info(\"Error storing info for attempt: \" +\n           attemptState.getAttemptId(), e);\n       throw e;\n     }\n     appState.attempts.put(attemptState.getAttemptId(), attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                            ApplicationAttemptStateDataPBImpl attemptStateData)\n                            throws Exception {\n    ApplicationAttemptId attemptId \u003d ConverterUtils\n                                        .toApplicationAttemptId(attemptIdStr);\n    Credentials credentials \u003d null;\n    if(attemptStateData.getAppAttemptTokens() !\u003d null){\n      DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n      credentials \u003d new Credentials();\n      dibb.reset(attemptStateData.getAppAttemptTokens());\n      credentials.readTokenStorageStream(dibb);\n    }\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(attemptId,\n          attemptStateData.getMasterContainer(), credentials);\n\n    ApplicationState appState \u003d state.getApplicationState().get(\n        attemptState.getAttemptId().getApplicationId());\n    assert appState !\u003d null;\n\n    if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n      Exception e \u003d new IOException(\"Attempt: \" +\n          attemptState.getAttemptId() + \" is already stored.\");\n      LOG.info(\"Error storing info for attempt: \" +\n          attemptState.getAttemptId(), e);\n      throw e;\n    }\n    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {}
    },
    "ef9f251679d7e87698eecd6a119652900274a172": {
      "type": "Ybodychange",
      "commitMessage": "YARN-514.Delayed store operations should not result in RM unavailability for app submission (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/13 1:19 PM",
      "commitName": "ef9f251679d7e87698eecd6a119652900274a172",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "18/12/12 8:21 PM",
      "commitNameOld": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 119.67,
      "commitsBetweenForRepo": 581,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,21 @@\n   public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                             ApplicationAttemptStateDataPBImpl attemptStateData)\n                             throws Exception {\n     ApplicationAttemptId attemptId \u003d ConverterUtils\n                                         .toApplicationAttemptId(attemptIdStr);\n     ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n                             attemptId, attemptStateData.getMasterContainer());\n \n     ApplicationState appState \u003d state.getApplicationState().get(\n         attemptState.getAttemptId().getApplicationId());\n     assert appState !\u003d null;\n \n+    if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n+      Exception e \u003d new IOException(\"Attempt: \" +\n+          attemptState.getAttemptId() + \" is already stored.\");\n+      LOG.info(\"Error storing info for attempt: \" +\n+          attemptState.getAttemptId(), e);\n+      throw e;\n+    }\n     appState.attempts.put(attemptState.getAttemptId(), attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                            ApplicationAttemptStateDataPBImpl attemptStateData)\n                            throws Exception {\n    ApplicationAttemptId attemptId \u003d ConverterUtils\n                                        .toApplicationAttemptId(attemptIdStr);\n    ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n                            attemptId, attemptStateData.getMasterContainer());\n\n    ApplicationState appState \u003d state.getApplicationState().get(\n        attemptState.getAttemptId().getApplicationId());\n    assert appState !\u003d null;\n\n    if (appState.attempts.containsKey(attemptState.getAttemptId())) {\n      Exception e \u003d new IOException(\"Attempt: \" +\n          attemptState.getAttemptId() + \" is already stored.\");\n      LOG.info(\"Error storing info for attempt: \" +\n          attemptState.getAttemptId(), e);\n      throw e;\n    }\n    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
      "extendedDetails": {}
    },
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": {
      "type": "Yintroduced",
      "commitMessage": "YARN-230. RM Restart phase 1 - includes support for saving/restarting all applications on an RM bounce. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423758 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 8:21 PM",
      "commitName": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,14 @@\n+  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n+                            ApplicationAttemptStateDataPBImpl attemptStateData)\n+                            throws Exception {\n+    ApplicationAttemptId attemptId \u003d ConverterUtils\n+                                        .toApplicationAttemptId(attemptIdStr);\n+    ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n+                            attemptId, attemptStateData.getMasterContainer());\n+\n+    ApplicationState appState \u003d state.getApplicationState().get(\n+        attemptState.getAttemptId().getApplicationId());\n+    assert appState !\u003d null;\n+\n+    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void storeApplicationAttemptState(String attemptIdStr, \n                            ApplicationAttemptStateDataPBImpl attemptStateData)\n                            throws Exception {\n    ApplicationAttemptId attemptId \u003d ConverterUtils\n                                        .toApplicationAttemptId(attemptIdStr);\n    ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n                            attemptId, attemptStateData.getMasterContainer());\n\n    ApplicationState appState \u003d state.getApplicationState().get(\n        attemptState.getAttemptId().getApplicationId());\n    assert appState !\u003d null;\n\n    appState.attempts.put(attemptState.getAttemptId(), attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java"
    }
  }
}