{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "getAndSetStartTime",
  "functionId": "getAndSetStartTime___entityId-String__entityType-String__startTime-Long__events-List__TimelineEvent__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 1273,
  "functionEndLine": 1293,
  "numCommitsSeen": 12,
  "timeTaken": 1039,
  "changeHistory": [
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,20 @@\n+  private Long getAndSetStartTime(String entityId, String entityType,\n+      Long startTime, List\u003cTimelineEvent\u003e events) throws IOException {\n+    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n+    Long time \u003d startTimeWriteCache.get(entity);\n+    if (time !\u003d null) {\n+      // return the value in the cache\n+      return time;\n+    }\n+    if (startTime \u003d\u003d null \u0026\u0026 events !\u003d null) {\n+      // calculate best guess start time based on lowest event time\n+      startTime \u003d Long.MAX_VALUE;\n+      for (TimelineEvent e : events) {\n+        if (e.getTimestamp() \u003c startTime) {\n+          startTime \u003d e.getTimestamp();\n+        }\n+      }\n+    }\n+    // check the provided start time matches the db\n+    return checkStartTimeInDb(entity, startTime);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Long getAndSetStartTime(String entityId, String entityType,\n      Long startTime, List\u003cTimelineEvent\u003e events) throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    Long time \u003d startTimeWriteCache.get(entity);\n    if (time !\u003d null) {\n      // return the value in the cache\n      return time;\n    }\n    if (startTime \u003d\u003d null \u0026\u0026 events !\u003d null) {\n      // calculate best guess start time based on lowest event time\n      startTime \u003d Long.MAX_VALUE;\n      for (TimelineEvent e : events) {\n        if (e.getTimestamp() \u003c startTime) {\n          startTime \u003d e.getTimestamp();\n        }\n      }\n    }\n    // check the provided start time matches the db\n    return checkStartTimeInDb(entity, startTime);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}