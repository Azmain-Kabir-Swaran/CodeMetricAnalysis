{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Anonymizer.java",
  "functionName": "initialize",
  "functionId": "initialize___args-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Anonymizer.java",
  "functionStartLine": 60,
  "functionEndLine": 109,
  "numCommitsSeen": 3,
  "timeTaken": 1506,
  "changeHistory": [
    "2cc841f16ec9aa5336495fc20ee781a1276fddc5",
    "10325d97329c214bb3899c8535df5a366bc86d2f",
    "a238f931ea7dce0ca620d1798156c84ff77097ff"
  ],
  "changeHistoryShort": {
    "2cc841f16ec9aa5336495fc20ee781a1276fddc5": "Ybodychange",
    "10325d97329c214bb3899c8535df5a366bc86d2f": "Yfilerename",
    "a238f931ea7dce0ca620d1798156c84ff77097ff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2cc841f16ec9aa5336495fc20ee781a1276fddc5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13678 Update jackson from 1.9.13 to 2.x in hadoop-tools. Contributed by Akira Ajisaka.\n",
      "commitDate": "06/10/16 8:31 AM",
      "commitName": "2cc841f16ec9aa5336495fc20ee781a1276fddc5",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/12 2:10 PM",
      "commitNameOld": "10325d97329c214bb3899c8535df5a366bc86d2f",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1722.72,
      "commitsBetweenForRepo": 12174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void initialize(String[] args) throws Exception {\n     try {\n       for (int i \u003d 0; i \u003c args.length; ++i) {\n         if (\"-trace\".equals(args[i])) {\n           anonymizeTrace \u003d true;\n           inputTracePath \u003d new Path(args[i+1]);\n           outputTracePath \u003d new Path(args[i+2]);\n           i +\u003d2;\n         }\n         if (\"-topology\".equals(args[i])) {\n           anonymizeTopology \u003d true;\n           inputTopologyPath \u003d new Path(args[i+1]);\n           outputTopologyPath \u003d new Path(args[i+2]);\n           i +\u003d2;\n         }\n       }\n     } catch (Exception e) {\n       throw new IllegalArgumentException(\"Illegal arguments list!\", e);\n     }\n     \n     if (!anonymizeTopology \u0026\u0026 !anonymizeTrace) {\n       throw new IllegalArgumentException(\"Invalid arguments list!\");\n     }\n     \n     statePool \u003d new StatePool();\n     // initialize the state manager after the anonymizers are registered\n     statePool.initialize(getConf());\n      \n     outMapper \u003d new ObjectMapper();\n     // define a module\n-    SimpleModule module \u003d new SimpleModule(\"Anonymization Serializer\",  \n-                                           new Version(0, 1, 1, \"FINAL\"));\n+    SimpleModule module \u003d new SimpleModule(\n+        \"Anonymization Serializer\", new Version(0, 1, 1, \"FINAL\", \"\", \"\"));\n     // add various serializers to the module\n     // use the default (as-is) serializer for default data types\n     module.addSerializer(DataType.class, new DefaultRumenSerializer());\n     // use a blocking serializer for Strings as they can contain sensitive \n     // information\n     module.addSerializer(String.class, new BlockingSerializer());\n     // use object.toString() for object of type ID\n     module.addSerializer(ID.class, new ObjectStringSerializer\u003cID\u003e());\n     // use getAnonymizedValue() for data types that have the anonymizing \n     // feature\n     module.addSerializer(AnonymizableDataType.class, \n         new DefaultAnonymizingRumenSerializer(statePool, getConf()));\n     \n     // register the module with the object-mapper\n     outMapper.registerModule(module);\n     \n-    outFactory \u003d outMapper.getJsonFactory();\n+    outFactory \u003d outMapper.getFactory();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(String[] args) throws Exception {\n    try {\n      for (int i \u003d 0; i \u003c args.length; ++i) {\n        if (\"-trace\".equals(args[i])) {\n          anonymizeTrace \u003d true;\n          inputTracePath \u003d new Path(args[i+1]);\n          outputTracePath \u003d new Path(args[i+2]);\n          i +\u003d2;\n        }\n        if (\"-topology\".equals(args[i])) {\n          anonymizeTopology \u003d true;\n          inputTopologyPath \u003d new Path(args[i+1]);\n          outputTopologyPath \u003d new Path(args[i+2]);\n          i +\u003d2;\n        }\n      }\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Illegal arguments list!\", e);\n    }\n    \n    if (!anonymizeTopology \u0026\u0026 !anonymizeTrace) {\n      throw new IllegalArgumentException(\"Invalid arguments list!\");\n    }\n    \n    statePool \u003d new StatePool();\n    // initialize the state manager after the anonymizers are registered\n    statePool.initialize(getConf());\n     \n    outMapper \u003d new ObjectMapper();\n    // define a module\n    SimpleModule module \u003d new SimpleModule(\n        \"Anonymization Serializer\", new Version(0, 1, 1, \"FINAL\", \"\", \"\"));\n    // add various serializers to the module\n    // use the default (as-is) serializer for default data types\n    module.addSerializer(DataType.class, new DefaultRumenSerializer());\n    // use a blocking serializer for Strings as they can contain sensitive \n    // information\n    module.addSerializer(String.class, new BlockingSerializer());\n    // use object.toString() for object of type ID\n    module.addSerializer(ID.class, new ObjectStringSerializer\u003cID\u003e());\n    // use getAnonymizedValue() for data types that have the anonymizing \n    // feature\n    module.addSerializer(AnonymizableDataType.class, \n        new DefaultAnonymizingRumenSerializer(statePool, getConf()));\n    \n    // register the module with the object-mapper\n    outMapper.registerModule(module);\n    \n    outFactory \u003d outMapper.getFactory();\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Anonymizer.java",
      "extendedDetails": {}
    },
    "10325d97329c214bb3899c8535df5a366bc86d2f": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3582. Move successfully passing MR1 tests to MR2 maven tree.(ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/01/12 2:10 PM",
      "commitName": "10325d97329c214bb3899c8535df5a366bc86d2f",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/01/12 10:20 AM",
      "commitNameOld": "8b2f6909ec7df5cffb5ef417f5c9cffdee43e38a",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initialize(String[] args) throws Exception {\n    try {\n      for (int i \u003d 0; i \u003c args.length; ++i) {\n        if (\"-trace\".equals(args[i])) {\n          anonymizeTrace \u003d true;\n          inputTracePath \u003d new Path(args[i+1]);\n          outputTracePath \u003d new Path(args[i+2]);\n          i +\u003d2;\n        }\n        if (\"-topology\".equals(args[i])) {\n          anonymizeTopology \u003d true;\n          inputTopologyPath \u003d new Path(args[i+1]);\n          outputTopologyPath \u003d new Path(args[i+2]);\n          i +\u003d2;\n        }\n      }\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Illegal arguments list!\", e);\n    }\n    \n    if (!anonymizeTopology \u0026\u0026 !anonymizeTrace) {\n      throw new IllegalArgumentException(\"Invalid arguments list!\");\n    }\n    \n    statePool \u003d new StatePool();\n    // initialize the state manager after the anonymizers are registered\n    statePool.initialize(getConf());\n     \n    outMapper \u003d new ObjectMapper();\n    // define a module\n    SimpleModule module \u003d new SimpleModule(\"Anonymization Serializer\",  \n                                           new Version(0, 1, 1, \"FINAL\"));\n    // add various serializers to the module\n    // use the default (as-is) serializer for default data types\n    module.addSerializer(DataType.class, new DefaultRumenSerializer());\n    // use a blocking serializer for Strings as they can contain sensitive \n    // information\n    module.addSerializer(String.class, new BlockingSerializer());\n    // use object.toString() for object of type ID\n    module.addSerializer(ID.class, new ObjectStringSerializer\u003cID\u003e());\n    // use getAnonymizedValue() for data types that have the anonymizing \n    // feature\n    module.addSerializer(AnonymizableDataType.class, \n        new DefaultAnonymizingRumenSerializer(statePool, getConf()));\n    \n    // register the module with the object-mapper\n    outMapper.registerModule(module);\n    \n    outFactory \u003d outMapper.getJsonFactory();\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Anonymizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/Anonymizer.java",
        "newPath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Anonymizer.java"
      }
    },
    "a238f931ea7dce0ca620d1798156c84ff77097ff": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-778. Rumen Anonymizer. (Amar Kamat and Chris Douglas via amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1215141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/11 6:20 AM",
      "commitName": "a238f931ea7dce0ca620d1798156c84ff77097ff",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,50 @@\n+  private void initialize(String[] args) throws Exception {\n+    try {\n+      for (int i \u003d 0; i \u003c args.length; ++i) {\n+        if (\"-trace\".equals(args[i])) {\n+          anonymizeTrace \u003d true;\n+          inputTracePath \u003d new Path(args[i+1]);\n+          outputTracePath \u003d new Path(args[i+2]);\n+          i +\u003d2;\n+        }\n+        if (\"-topology\".equals(args[i])) {\n+          anonymizeTopology \u003d true;\n+          inputTopologyPath \u003d new Path(args[i+1]);\n+          outputTopologyPath \u003d new Path(args[i+2]);\n+          i +\u003d2;\n+        }\n+      }\n+    } catch (Exception e) {\n+      throw new IllegalArgumentException(\"Illegal arguments list!\", e);\n+    }\n+    \n+    if (!anonymizeTopology \u0026\u0026 !anonymizeTrace) {\n+      throw new IllegalArgumentException(\"Invalid arguments list!\");\n+    }\n+    \n+    statePool \u003d new StatePool();\n+    // initialize the state manager after the anonymizers are registered\n+    statePool.initialize(getConf());\n+     \n+    outMapper \u003d new ObjectMapper();\n+    // define a module\n+    SimpleModule module \u003d new SimpleModule(\"Anonymization Serializer\",  \n+                                           new Version(0, 1, 1, \"FINAL\"));\n+    // add various serializers to the module\n+    // use the default (as-is) serializer for default data types\n+    module.addSerializer(DataType.class, new DefaultRumenSerializer());\n+    // use a blocking serializer for Strings as they can contain sensitive \n+    // information\n+    module.addSerializer(String.class, new BlockingSerializer());\n+    // use object.toString() for object of type ID\n+    module.addSerializer(ID.class, new ObjectStringSerializer\u003cID\u003e());\n+    // use getAnonymizedValue() for data types that have the anonymizing \n+    // feature\n+    module.addSerializer(AnonymizableDataType.class, \n+        new DefaultAnonymizingRumenSerializer(statePool, getConf()));\n+    \n+    // register the module with the object-mapper\n+    outMapper.registerModule(module);\n+    \n+    outFactory \u003d outMapper.getJsonFactory();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(String[] args) throws Exception {\n    try {\n      for (int i \u003d 0; i \u003c args.length; ++i) {\n        if (\"-trace\".equals(args[i])) {\n          anonymizeTrace \u003d true;\n          inputTracePath \u003d new Path(args[i+1]);\n          outputTracePath \u003d new Path(args[i+2]);\n          i +\u003d2;\n        }\n        if (\"-topology\".equals(args[i])) {\n          anonymizeTopology \u003d true;\n          inputTopologyPath \u003d new Path(args[i+1]);\n          outputTopologyPath \u003d new Path(args[i+2]);\n          i +\u003d2;\n        }\n      }\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Illegal arguments list!\", e);\n    }\n    \n    if (!anonymizeTopology \u0026\u0026 !anonymizeTrace) {\n      throw new IllegalArgumentException(\"Invalid arguments list!\");\n    }\n    \n    statePool \u003d new StatePool();\n    // initialize the state manager after the anonymizers are registered\n    statePool.initialize(getConf());\n     \n    outMapper \u003d new ObjectMapper();\n    // define a module\n    SimpleModule module \u003d new SimpleModule(\"Anonymization Serializer\",  \n                                           new Version(0, 1, 1, \"FINAL\"));\n    // add various serializers to the module\n    // use the default (as-is) serializer for default data types\n    module.addSerializer(DataType.class, new DefaultRumenSerializer());\n    // use a blocking serializer for Strings as they can contain sensitive \n    // information\n    module.addSerializer(String.class, new BlockingSerializer());\n    // use object.toString() for object of type ID\n    module.addSerializer(ID.class, new ObjectStringSerializer\u003cID\u003e());\n    // use getAnonymizedValue() for data types that have the anonymizing \n    // feature\n    module.addSerializer(AnonymizableDataType.class, \n        new DefaultAnonymizingRumenSerializer(statePool, getConf()));\n    \n    // register the module with the object-mapper\n    outMapper.registerModule(module);\n    \n    outFactory \u003d outMapper.getJsonFactory();\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/Anonymizer.java"
    }
  }
}