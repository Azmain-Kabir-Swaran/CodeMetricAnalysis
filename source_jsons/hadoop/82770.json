{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SampleQuantiles.java",
  "functionName": "allowableError",
  "functionId": "allowableError___rank-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java",
  "functionStartLine": 90,
  "functionEndLine": 106,
  "numCommitsSeen": 4,
  "timeTaken": 571,
  "changeHistory": [
    "b5b0ac64a18ccefe1626ce985adf576549172911"
  ],
  "changeHistoryShort": {
    "b5b0ac64a18ccefe1626ce985adf576549172911": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b5b0ac64a18ccefe1626ce985adf576549172911": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8541. Better high-percentile latency metrics. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 6:31 PM",
      "commitName": "b5b0ac64a18ccefe1626ce985adf576549172911",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,17 @@\n+  private double allowableError(int rank) {\n+    int size \u003d samples.size();\n+    double minError \u003d size + 1;\n+    for (Quantile q : quantiles) {\n+      double error;\n+      if (rank \u003c\u003d q.quantile * size) {\n+        error \u003d (2.0 * q.error * (size - rank)) / (1.0 - q.quantile);\n+      } else {\n+        error \u003d (2.0 * q.error * rank) / q.quantile;\n+      }\n+      if (error \u003c minError) {\n+        minError \u003d error;\n+      }\n+    }\n+\n+    return minError;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private double allowableError(int rank) {\n    int size \u003d samples.size();\n    double minError \u003d size + 1;\n    for (Quantile q : quantiles) {\n      double error;\n      if (rank \u003c\u003d q.quantile * size) {\n        error \u003d (2.0 * q.error * (size - rank)) / (1.0 - q.quantile);\n      } else {\n        error \u003d (2.0 * q.error * rank) / q.quantile;\n      }\n      if (error \u003c minError) {\n        minError \u003d error;\n      }\n    }\n\n    return minError;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java"
    }
  }
}