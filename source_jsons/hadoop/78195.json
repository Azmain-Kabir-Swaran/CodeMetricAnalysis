{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Truncate.java",
  "functionName": "processPath",
  "functionId": "processPath___item-PathData",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Truncate.java",
  "functionStartLine": 76,
  "functionEndLine": 97,
  "numCommitsSeen": 1,
  "timeTaken": 1019,
  "changeHistory": [
    "a0521bc83a168a06f21314a9aff78630a576fc75"
  ],
  "changeHistoryShort": {
    "a0521bc83a168a06f21314a9aff78630a576fc75": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0521bc83a168a06f21314a9aff78630a576fc75": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11490. Expose truncate API via FileSystem and shell command. Contributed by Milan Desai.",
      "commitDate": "21/01/15 4:00 PM",
      "commitName": "a0521bc83a168a06f21314a9aff78630a576fc75",
      "commitAuthor": "Konstantin V Shvachko",
      "diff": "@@ -0,0 +1,22 @@\n+  protected void processPath(PathData item) throws IOException {\n+    if(item.stat.isDirectory()) {\n+      throw new PathIsDirectoryException(item.toString());\n+    }\n+    long oldLength \u003d item.stat.getLen();\n+    if(newLength \u003e oldLength) {\n+      throw new IllegalArgumentException(\n+          \"Cannot truncate to a larger file size. Current size: \" + oldLength +\n+          \", truncate size: \" + newLength + \".\");\n+    }\n+    if(item.fs.truncate(item.path, newLength)) {\n+      out.println(\"Truncated \" + item + \" to length: \" + newLength);\n+    }\n+    else if(waitOpt) {\n+      waitList.add(item);\n+    }\n+    else {\n+      out.println(\"Truncating \" + item + \" to length: \" + newLength + \". \" +\n+          \"Wait for block recovery to complete before further updating this \" +\n+          \"file.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    if(item.stat.isDirectory()) {\n      throw new PathIsDirectoryException(item.toString());\n    }\n    long oldLength \u003d item.stat.getLen();\n    if(newLength \u003e oldLength) {\n      throw new IllegalArgumentException(\n          \"Cannot truncate to a larger file size. Current size: \" + oldLength +\n          \", truncate size: \" + newLength + \".\");\n    }\n    if(item.fs.truncate(item.path, newLength)) {\n      out.println(\"Truncated \" + item + \" to length: \" + newLength);\n    }\n    else if(waitOpt) {\n      waitList.add(item);\n    }\n    else {\n      out.println(\"Truncating \" + item + \" to length: \" + newLength + \". \" +\n          \"Wait for block recovery to complete before further updating this \" +\n          \"file.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Truncate.java"
    }
  }
}