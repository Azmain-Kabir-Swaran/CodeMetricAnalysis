{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BalanceProcedureScheduler.java",
  "functionName": "init",
  "functionId": "init___recoverJobs-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceProcedureScheduler.java",
  "functionStartLine": 96,
  "functionEndLine": 123,
  "numCommitsSeen": 1,
  "timeTaken": 374,
  "changeHistory": [
    "1983eea62def58fb769f44c1d41dc29690274809"
  ],
  "changeHistoryShort": {
    "1983eea62def58fb769f44c1d41dc29690274809": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1983eea62def58fb769f44c1d41dc29690274809": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-15340. RBF: Implement BalanceProcedureScheduler basic framework. Contributed by Jinglun.\n",
      "commitDate": "19/05/20 7:39 PM",
      "commitName": "1983eea62def58fb769f44c1d41dc29690274809",
      "commitAuthor": "Yiqun Lin",
      "diff": "@@ -0,0 +1,28 @@\n+  public synchronized void init(boolean recoverJobs) throws IOException {\n+    this.runningQueue \u003d new LinkedBlockingQueue\u003c\u003e();\n+    this.delayQueue \u003d new DelayQueue\u003c\u003e();\n+    this.recoverQueue \u003d new LinkedBlockingQueue\u003c\u003e();\n+    this.jobSet \u003d new ConcurrentHashMap\u003c\u003e();\n+\n+    // start threads.\n+    this.roosterThread \u003d new Rooster();\n+    this.roosterThread.setDaemon(true);\n+    roosterThread.start();\n+    this.recoverThread \u003d new Recover();\n+    this.recoverThread.setDaemon(true);\n+    recoverThread.start();\n+    int workerNum \u003d conf.getInt(WORK_THREAD_NUM, WORK_THREAD_NUM_DEFAULT);\n+    workersPool \u003d new ThreadPoolExecutor(workerNum, workerNum * 2, 1,\n+        TimeUnit.MILLISECONDS, new LinkedBlockingDeque\u003c\u003e());\n+    this.readerThread \u003d new Reader();\n+    this.readerThread.start();\n+\n+    // init journal.\n+    Class\u003cBalanceJournal\u003e clazz \u003d (Class\u003cBalanceJournal\u003e) conf\n+        .getClass(JOURNAL_CLASS, BalanceJournalInfoHDFS.class);\n+    journal \u003d ReflectionUtils.newInstance(clazz, conf);\n+\n+    if (recoverJobs) {\n+      recoverAllJobs();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(boolean recoverJobs) throws IOException {\n    this.runningQueue \u003d new LinkedBlockingQueue\u003c\u003e();\n    this.delayQueue \u003d new DelayQueue\u003c\u003e();\n    this.recoverQueue \u003d new LinkedBlockingQueue\u003c\u003e();\n    this.jobSet \u003d new ConcurrentHashMap\u003c\u003e();\n\n    // start threads.\n    this.roosterThread \u003d new Rooster();\n    this.roosterThread.setDaemon(true);\n    roosterThread.start();\n    this.recoverThread \u003d new Recover();\n    this.recoverThread.setDaemon(true);\n    recoverThread.start();\n    int workerNum \u003d conf.getInt(WORK_THREAD_NUM, WORK_THREAD_NUM_DEFAULT);\n    workersPool \u003d new ThreadPoolExecutor(workerNum, workerNum * 2, 1,\n        TimeUnit.MILLISECONDS, new LinkedBlockingDeque\u003c\u003e());\n    this.readerThread \u003d new Reader();\n    this.readerThread.start();\n\n    // init journal.\n    Class\u003cBalanceJournal\u003e clazz \u003d (Class\u003cBalanceJournal\u003e) conf\n        .getClass(JOURNAL_CLASS, BalanceJournalInfoHDFS.class);\n    journal \u003d ReflectionUtils.newInstance(clazz, conf);\n\n    if (recoverJobs) {\n      recoverAllJobs();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceProcedureScheduler.java"
    }
  }
}