{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NumaResourceAllocator.java",
  "functionName": "recoverNumaResource",
  "functionId": "recoverNumaResource___containerId-ContainerId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/numa/NumaResourceAllocator.java",
  "functionStartLine": 322,
  "functionEndLine": 345,
  "numCommitsSeen": 3,
  "timeTaken": 807,
  "changeHistory": [
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd"
  ],
  "changeHistoryShort": {
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5764. NUMA awareness support for launching containers. Contributed by Devaraj K.\n",
      "commitDate": "13/03/18 12:36 PM",
      "commitName": "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
      "commitAuthor": "Miklos Szegedi",
      "diff": "@@ -0,0 +1,24 @@\n+  public synchronized void recoverNumaResource(ContainerId containerId) {\n+    Container container \u003d context.getContainers().get(containerId);\n+    ResourceMappings resourceMappings \u003d container.getResourceMappings();\n+    List\u003cSerializable\u003e assignedResources \u003d resourceMappings\n+        .getAssignedResources(NUMA_RESOURCE_TYPE);\n+    if (assignedResources.size() \u003d\u003d 1) {\n+      NumaResourceAllocation numaResourceAllocation \u003d\n+          (NumaResourceAllocation) assignedResources.get(0);\n+      for (Entry\u003cString, Long\u003e nodeAndMemory : numaResourceAllocation\n+          .getNodeVsMemory().entrySet()) {\n+        numaNodeIdVsResource.get(nodeAndMemory.getKey())\n+            .recoverMemory(containerId, nodeAndMemory.getValue());\n+      }\n+      for (Entry\u003cString, Integer\u003e nodeAndCpus : numaResourceAllocation\n+          .getNodeVsCpus().entrySet()) {\n+        numaNodeIdVsResource.get(nodeAndCpus.getKey()).recoverCpus(containerId,\n+            nodeAndCpus.getValue());\n+      }\n+    } else {\n+      LOG.error(\"Unexpected number:\" + assignedResources.size()\n+          + \" of assigned numa resources for \" + containerId\n+          + \" while recovering.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverNumaResource(ContainerId containerId) {\n    Container container \u003d context.getContainers().get(containerId);\n    ResourceMappings resourceMappings \u003d container.getResourceMappings();\n    List\u003cSerializable\u003e assignedResources \u003d resourceMappings\n        .getAssignedResources(NUMA_RESOURCE_TYPE);\n    if (assignedResources.size() \u003d\u003d 1) {\n      NumaResourceAllocation numaResourceAllocation \u003d\n          (NumaResourceAllocation) assignedResources.get(0);\n      for (Entry\u003cString, Long\u003e nodeAndMemory : numaResourceAllocation\n          .getNodeVsMemory().entrySet()) {\n        numaNodeIdVsResource.get(nodeAndMemory.getKey())\n            .recoverMemory(containerId, nodeAndMemory.getValue());\n      }\n      for (Entry\u003cString, Integer\u003e nodeAndCpus : numaResourceAllocation\n          .getNodeVsCpus().entrySet()) {\n        numaNodeIdVsResource.get(nodeAndCpus.getKey()).recoverCpus(containerId,\n            nodeAndCpus.getValue());\n      }\n    } else {\n      LOG.error(\"Unexpected number:\" + assignedResources.size()\n          + \" of assigned numa resources for \" + containerId\n          + \" while recovering.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/numa/NumaResourceAllocator.java"
    }
  }
}