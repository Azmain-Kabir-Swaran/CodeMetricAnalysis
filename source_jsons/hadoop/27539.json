{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeTimelineCollectorManager.java",
  "functionName": "generateTokenAndSetTimer",
  "functionId": "generateTokenAndSetTimer___appId-ApplicationId__appCollector-AppLevelTimelineCollector",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
  "functionStartLine": 210,
  "functionEndLine": 233,
  "numCommitsSeen": 15,
  "timeTaken": 439,
  "changeHistory": [
    "7fd6ae24798cd3fdd77dbb00089a922407026e02"
  ],
  "changeHistoryShort": {
    "7fd6ae24798cd3fdd77dbb00089a922407026e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7fd6ae24798cd3fdd77dbb00089a922407026e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6134. [ATSv2 Security] Regenerate delegation token for app just before token expires if app collector is active. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "7fd6ae24798cd3fdd77dbb00089a922407026e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,24 @@\n+  private org.apache.hadoop.yarn.api.records.Token generateTokenAndSetTimer(\n+      ApplicationId appId, AppLevelTimelineCollector appCollector)\n+      throws IOException {\n+    Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n+        generateTokenForAppCollector(appCollector.getAppUser());\n+    TimelineDelegationTokenIdentifier tokenId \u003d\n+        timelineToken.decodeIdentifier();\n+    long renewalDelay \u003d getRenewalDelay(tokenRenewInterval);\n+    long regenerationDelay \u003d getRegenerationDelay(tokenId.getMaxDate());\n+    if (renewalDelay \u003e 0 || regenerationDelay \u003e 0) {\n+      boolean isTimerForRenewal \u003d renewalDelay \u003c regenerationDelay;\n+      Future\u003c?\u003e renewalOrRegenerationFuture \u003d tokenRenewalExecutor.schedule(\n+          new CollectorTokenRenewer(appId, isTimerForRenewal),\n+          isTimerForRenewal? renewalDelay : regenerationDelay,\n+          TimeUnit.MILLISECONDS);\n+      appCollector.setDelegationTokenAndFutureForApp(timelineToken,\n+          renewalOrRegenerationFuture, tokenId.getMaxDate(),\n+          tokenId.getRenewer().toString());\n+    }\n+    LOG.info(\"Generated a new token \" + timelineToken + \" for app \" + appId);\n+    return org.apache.hadoop.yarn.api.records.Token.newInstance(\n+        timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n+        timelineToken.getPassword(), timelineToken.getService().toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private org.apache.hadoop.yarn.api.records.Token generateTokenAndSetTimer(\n      ApplicationId appId, AppLevelTimelineCollector appCollector)\n      throws IOException {\n    Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n        generateTokenForAppCollector(appCollector.getAppUser());\n    TimelineDelegationTokenIdentifier tokenId \u003d\n        timelineToken.decodeIdentifier();\n    long renewalDelay \u003d getRenewalDelay(tokenRenewInterval);\n    long regenerationDelay \u003d getRegenerationDelay(tokenId.getMaxDate());\n    if (renewalDelay \u003e 0 || regenerationDelay \u003e 0) {\n      boolean isTimerForRenewal \u003d renewalDelay \u003c regenerationDelay;\n      Future\u003c?\u003e renewalOrRegenerationFuture \u003d tokenRenewalExecutor.schedule(\n          new CollectorTokenRenewer(appId, isTimerForRenewal),\n          isTimerForRenewal? renewalDelay : regenerationDelay,\n          TimeUnit.MILLISECONDS);\n      appCollector.setDelegationTokenAndFutureForApp(timelineToken,\n          renewalOrRegenerationFuture, tokenId.getMaxDate(),\n          tokenId.getRenewer().toString());\n    }\n    LOG.info(\"Generated a new token \" + timelineToken + \" for app \" + appId);\n    return org.apache.hadoop.yarn.api.records.Token.newInstance(\n        timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n        timelineToken.getPassword(), timelineToken.getService().toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java"
    }
  }
}