{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "throwInvalidResourceException",
  "functionId": "throwInvalidResourceException___reqResource-Resource__maxAllowedAllocation-Resource__reqResourceName-String__invalidResourceType-InvalidResourceType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 489,
  "functionEndLine": 514,
  "numCommitsSeen": 93,
  "timeTaken": 3096,
  "changeHistory": [
    "2cccf4061cc4021c48e29879700dbc94f832b7d1",
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba"
  ],
  "changeHistoryShort": {
    "2cccf4061cc4021c48e29879700dbc94f832b7d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2cccf4061cc4021c48e29879700dbc94f832b7d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8517. getContainer and getContainers ResourceManager REST API methods are not documented (snemeth via rkanter)\n",
      "commitDate": "27/07/18 2:35 PM",
      "commitName": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8517. getContainer and getContainers ResourceManager REST API methods are not documented (snemeth via rkanter)\n",
          "commitDate": "27/07/18 2:35 PM",
          "commitName": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 45.25,
          "commitsBetweenForRepo": 280,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,26 @@\n   private static void throwInvalidResourceException(Resource reqResource,\n-      Resource availableResource, String reqResourceName)\n+          Resource maxAllowedAllocation, String reqResourceName,\n+          InvalidResourceType invalidResourceType)\n       throws InvalidResourceRequestException {\n-    throw new InvalidResourceRequestException(\n-        \"Invalid resource request, requested resource type\u003d[\" + reqResourceName\n-            + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n-            + \"resource\u003d\" + reqResource + \", maximum allowed allocation\u003d\"\n-            + availableResource\n-            + \", please note that maximum allowed allocation is calculated \"\n-            + \"by scheduler based on maximum resource of registered \"\n-            + \"NodeManagers, which might be less than configured \"\n-            + \"maximum allocation\u003d\"\n-            + ResourceUtils.getResourceTypesMaximumAllocation());\n+    final String message;\n+\n+    if (invalidResourceType \u003d\u003d InvalidResourceType.LESS_THAN_ZERO) {\n+      message \u003d String.format(LESS_THAN_ZERO_RESOURCE_MESSAGE_TEMPLATE,\n+          reqResourceName, reqResource);\n+    } else if (invalidResourceType \u003d\u003d\n+            InvalidResourceType.GREATER_THEN_MAX_ALLOCATION) {\n+      message \u003d String.format(GREATER_THAN_MAX_RESOURCE_MESSAGE_TEMPLATE,\n+          reqResourceName, reqResource, maxAllowedAllocation,\n+          ResourceUtils.getResourceTypesMaximumAllocation());\n+    } else if (invalidResourceType \u003d\u003d InvalidResourceType.UNKNOWN) {\n+      message \u003d String.format(UNKNOWN_REASON_MESSAGE_TEMPLATE, reqResourceName,\n+          reqResource);\n+    } else {\n+      throw new IllegalArgumentException(String.format(\n+          \"InvalidResourceType argument should be either \" + \"%s, %s or %s\",\n+          InvalidResourceType.LESS_THAN_ZERO,\n+          InvalidResourceType.GREATER_THEN_MAX_ALLOCATION,\n+          InvalidResourceType.UNKNOWN));\n+    }\n+    throw new InvalidResourceRequestException(message, invalidResourceType);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void throwInvalidResourceException(Resource reqResource,\n          Resource maxAllowedAllocation, String reqResourceName,\n          InvalidResourceType invalidResourceType)\n      throws InvalidResourceRequestException {\n    final String message;\n\n    if (invalidResourceType \u003d\u003d InvalidResourceType.LESS_THAN_ZERO) {\n      message \u003d String.format(LESS_THAN_ZERO_RESOURCE_MESSAGE_TEMPLATE,\n          reqResourceName, reqResource);\n    } else if (invalidResourceType \u003d\u003d\n            InvalidResourceType.GREATER_THEN_MAX_ALLOCATION) {\n      message \u003d String.format(GREATER_THAN_MAX_RESOURCE_MESSAGE_TEMPLATE,\n          reqResourceName, reqResource, maxAllowedAllocation,\n          ResourceUtils.getResourceTypesMaximumAllocation());\n    } else if (invalidResourceType \u003d\u003d InvalidResourceType.UNKNOWN) {\n      message \u003d String.format(UNKNOWN_REASON_MESSAGE_TEMPLATE, reqResourceName,\n          reqResource);\n    } else {\n      throw new IllegalArgumentException(String.format(\n          \"InvalidResourceType argument should be either \" + \"%s, %s or %s\",\n          InvalidResourceType.LESS_THAN_ZERO,\n          InvalidResourceType.GREATER_THEN_MAX_ALLOCATION,\n          InvalidResourceType.UNKNOWN));\n    }\n    throw new InvalidResourceRequestException(message, invalidResourceType);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[reqResource-Resource, availableResource-Resource, reqResourceName-String]",
            "newValue": "[reqResource-Resource, maxAllowedAllocation-Resource, reqResourceName-String, invalidResourceType-InvalidResourceType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8517. getContainer and getContainers ResourceManager REST API methods are not documented (snemeth via rkanter)\n",
          "commitDate": "27/07/18 2:35 PM",
          "commitName": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 45.25,
          "commitsBetweenForRepo": 280,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,26 @@\n   private static void throwInvalidResourceException(Resource reqResource,\n-      Resource availableResource, String reqResourceName)\n+          Resource maxAllowedAllocation, String reqResourceName,\n+          InvalidResourceType invalidResourceType)\n       throws InvalidResourceRequestException {\n-    throw new InvalidResourceRequestException(\n-        \"Invalid resource request, requested resource type\u003d[\" + reqResourceName\n-            + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n-            + \"resource\u003d\" + reqResource + \", maximum allowed allocation\u003d\"\n-            + availableResource\n-            + \", please note that maximum allowed allocation is calculated \"\n-            + \"by scheduler based on maximum resource of registered \"\n-            + \"NodeManagers, which might be less than configured \"\n-            + \"maximum allocation\u003d\"\n-            + ResourceUtils.getResourceTypesMaximumAllocation());\n+    final String message;\n+\n+    if (invalidResourceType \u003d\u003d InvalidResourceType.LESS_THAN_ZERO) {\n+      message \u003d String.format(LESS_THAN_ZERO_RESOURCE_MESSAGE_TEMPLATE,\n+          reqResourceName, reqResource);\n+    } else if (invalidResourceType \u003d\u003d\n+            InvalidResourceType.GREATER_THEN_MAX_ALLOCATION) {\n+      message \u003d String.format(GREATER_THAN_MAX_RESOURCE_MESSAGE_TEMPLATE,\n+          reqResourceName, reqResource, maxAllowedAllocation,\n+          ResourceUtils.getResourceTypesMaximumAllocation());\n+    } else if (invalidResourceType \u003d\u003d InvalidResourceType.UNKNOWN) {\n+      message \u003d String.format(UNKNOWN_REASON_MESSAGE_TEMPLATE, reqResourceName,\n+          reqResource);\n+    } else {\n+      throw new IllegalArgumentException(String.format(\n+          \"InvalidResourceType argument should be either \" + \"%s, %s or %s\",\n+          InvalidResourceType.LESS_THAN_ZERO,\n+          InvalidResourceType.GREATER_THEN_MAX_ALLOCATION,\n+          InvalidResourceType.UNKNOWN));\n+    }\n+    throw new InvalidResourceRequestException(message, invalidResourceType);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void throwInvalidResourceException(Resource reqResource,\n          Resource maxAllowedAllocation, String reqResourceName,\n          InvalidResourceType invalidResourceType)\n      throws InvalidResourceRequestException {\n    final String message;\n\n    if (invalidResourceType \u003d\u003d InvalidResourceType.LESS_THAN_ZERO) {\n      message \u003d String.format(LESS_THAN_ZERO_RESOURCE_MESSAGE_TEMPLATE,\n          reqResourceName, reqResource);\n    } else if (invalidResourceType \u003d\u003d\n            InvalidResourceType.GREATER_THEN_MAX_ALLOCATION) {\n      message \u003d String.format(GREATER_THAN_MAX_RESOURCE_MESSAGE_TEMPLATE,\n          reqResourceName, reqResource, maxAllowedAllocation,\n          ResourceUtils.getResourceTypesMaximumAllocation());\n    } else if (invalidResourceType \u003d\u003d InvalidResourceType.UNKNOWN) {\n      message \u003d String.format(UNKNOWN_REASON_MESSAGE_TEMPLATE, reqResourceName,\n          reqResource);\n    } else {\n      throw new IllegalArgumentException(String.format(\n          \"InvalidResourceType argument should be either \" + \"%s, %s or %s\",\n          InvalidResourceType.LESS_THAN_ZERO,\n          InvalidResourceType.GREATER_THEN_MAX_ALLOCATION,\n          InvalidResourceType.UNKNOWN));\n    }\n    throw new InvalidResourceRequestException(message, invalidResourceType);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n",
      "commitDate": "10/05/18 9:31 AM",
      "commitName": "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,14 @@\n+  private static void throwInvalidResourceException(Resource reqResource,\n+      Resource availableResource, String reqResourceName)\n+      throws InvalidResourceRequestException {\n+    throw new InvalidResourceRequestException(\n+        \"Invalid resource request, requested resource type\u003d[\" + reqResourceName\n+            + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n+            + \"resource\u003d\" + reqResource + \", maximum allowed allocation\u003d\"\n+            + availableResource\n+            + \", please note that maximum allowed allocation is calculated \"\n+            + \"by scheduler based on maximum resource of registered \"\n+            + \"NodeManagers, which might be less than configured \"\n+            + \"maximum allocation\u003d\"\n+            + ResourceUtils.getResourceTypesMaximumAllocation());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void throwInvalidResourceException(Resource reqResource,\n      Resource availableResource, String reqResourceName)\n      throws InvalidResourceRequestException {\n    throw new InvalidResourceRequestException(\n        \"Invalid resource request, requested resource type\u003d[\" + reqResourceName\n            + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n            + \"resource\u003d\" + reqResource + \", maximum allowed allocation\u003d\"\n            + availableResource\n            + \", please note that maximum allowed allocation is calculated \"\n            + \"by scheduler based on maximum resource of registered \"\n            + \"NodeManagers, which might be less than configured \"\n            + \"maximum allocation\u003d\"\n            + ResourceUtils.getResourceTypesMaximumAllocation());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}