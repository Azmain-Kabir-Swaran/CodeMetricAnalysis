{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProtocMojo.java",
  "functionName": "execute",
  "functionId": "execute",
  "sourceFilePath": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
  "functionStartLine": 55,
  "functionEndLine": 59,
  "numCommitsSeen": 10,
  "timeTaken": 1523,
  "changeHistory": [
    "e1c6ef2efa9d87fdfc7474ca63998a13a3929874",
    "fdd740622459625efe5e12f37577aa3f5746177f",
    "625d7ed9eb65f0df204b506ce92c11803fbce273",
    "35f64962fccc472f5fbd172f3f824fdd72a43143",
    "8451ab5c01fdd290b33881daae8757c5f77a0d0d",
    "19b36f09009a6d74fe1273f93aa21d8f40969e80",
    "6bcbf492a2397db38c69eef427c62b909a0ac9e3"
  ],
  "changeHistoryShort": {
    "e1c6ef2efa9d87fdfc7474ca63998a13a3929874": "Ybodychange",
    "fdd740622459625efe5e12f37577aa3f5746177f": "Ybodychange",
    "625d7ed9eb65f0df204b506ce92c11803fbce273": "Ybodychange",
    "35f64962fccc472f5fbd172f3f824fdd72a43143": "Ybodychange",
    "8451ab5c01fdd290b33881daae8757c5f77a0d0d": "Ybodychange",
    "19b36f09009a6d74fe1273f93aa21d8f40969e80": "Ybodychange",
    "6bcbf492a2397db38c69eef427c62b909a0ac9e3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e1c6ef2efa9d87fdfc7474ca63998a13a3929874": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13789. Hadoop Common includes generated test protos in both jar and test-jar. Contributed by Sean Busbey.\n",
      "commitDate": "08/11/16 4:33 PM",
      "commitName": "e1c6ef2efa9d87fdfc7474ca63998a13a3929874",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "22/09/16 9:37 AM",
      "commitNameOld": "8d619b4896ac31f63fd0083594b6e7d207ef71a0",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 47.33,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,5 @@\n   public void execute() throws MojoExecutionException {\n-    try {\n-      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n-      command.add(protocCommand);\n-      command.add(\"--version\");\n-      Exec exec \u003d new Exec(this);\n-      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n-      if (exec.run(command, out) \u003d\u003d 127) {\n-        getLog().error(\"protoc, not found at: \" + protocCommand);\n-        throw new MojoExecutionException(\"protoc failure\");\n-      } else {\n-        if (out.isEmpty()) {\n-          getLog().error(\"stdout: \" + out);\n-          throw new MojoExecutionException(\n-              \"\u0027protoc --version\u0027 did not return a version\");\n-        } else {\n-          if (!out.get(0).endsWith(protocVersion)) {\n-            throw new MojoExecutionException(\n-                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\"\n-                    + protocVersion + \"\u0027\");\n-          }\n-        }\n-      }\n-      if (!output.mkdirs()) {\n-        if (!output.exists()) {\n-          throw new MojoExecutionException(\n-              \"Could not create directory: \" + output);\n-        }\n-      }\n-\n-      // Whether the import or source protoc files have changed.\n-      ChecksumComparator comparator \u003d new ChecksumComparator(checksumPath);\n-      boolean importsChanged \u003d false;\n-\n-      command \u003d new ArrayList\u003cString\u003e();\n-      command.add(protocCommand);\n-      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n-      if (imports !\u003d null) {\n-        for (File i : imports) {\n-          if (comparator.hasChanged(i)) {\n-            importsChanged \u003d true;\n-          }\n-          command.add(\"-I\" + i.getCanonicalPath());\n-        }\n-      }\n-      // Filter to generate classes for just the changed source files.\n-      List\u003cFile\u003e changedSources \u003d new ArrayList\u003c\u003e();\n-      boolean sourcesChanged \u003d false;\n-      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n-        // Need to recompile if the source has changed, or if any import has\n-        // changed.\n-        if (comparator.hasChanged(f) || importsChanged) {\n-          sourcesChanged \u003d true;\n-          changedSources.add(f);\n-          command.add(f.getCanonicalPath());\n-        }\n-      }\n-\n-      if (!sourcesChanged \u0026\u0026 !importsChanged) {\n-        getLog().info(\"No changes detected in protoc files, skipping \"\n-            + \"generation.\");\n-      } else {\n-        if (getLog().isDebugEnabled()) {\n-          StringBuilder b \u003d new StringBuilder();\n-          b.append(\"Generating classes for the following protoc files: [\");\n-          String prefix \u003d \"\";\n-          for (File f : changedSources) {\n-            b.append(prefix);\n-            b.append(f.toString());\n-            prefix \u003d \", \";\n-          }\n-          b.append(\"]\");\n-          getLog().debug(b.toString());\n-        }\n-\n-        exec \u003d new Exec(this);\n-        out \u003d new ArrayList\u003cString\u003e();\n-        List\u003cString\u003e err \u003d new ArrayList\u003c\u003e();\n-        if (exec.run(command, out, err) !\u003d 0) {\n-          getLog().error(\"protoc compiler error\");\n-          for (String s : out) {\n-            getLog().error(s);\n-          }\n-          for (String s : err) {\n-            getLog().error(s);\n-          }\n-          throw new MojoExecutionException(\"protoc failure\");\n-        }\n-        // Write the new checksum file on success.\n-        comparator.writeChecksums();\n-      }\n-    } catch (Throwable ex) {\n-      throw new MojoExecutionException(ex.toString(), ex);\n-    }\n-    project.addCompileSourceRoot(output.getAbsolutePath());\n+    final ProtocRunner protoc \u003d new ProtocRunner(project, imports, output,\n+        source, protocCommand, protocVersion, checksumPath, this, false);\n+    protoc.execute();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    final ProtocRunner protoc \u003d new ProtocRunner(project, imports, output,\n        source, protocCommand, protocVersion, checksumPath, this, false);\n    protoc.execute();\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
      "extendedDetails": {}
    },
    "fdd740622459625efe5e12f37577aa3f5746177f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12479. ProtocMojo does not log the reason for a protoc compilation failure. Contributed by Chris Nauroth.\n",
      "commitDate": "15/10/15 3:54 PM",
      "commitName": "fdd740622459625efe5e12f37577aa3f5746177f",
      "commitAuthor": "cnauroth",
      "commitDateOld": "08/07/15 11:09 AM",
      "commitNameOld": "625d7ed9eb65f0df204b506ce92c11803fbce273",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 99.2,
      "commitsBetweenForRepo": 659,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,96 @@\n   public void execute() throws MojoExecutionException {\n     try {\n       List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--version\");\n       Exec exec \u003d new Exec(this);\n       List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n       if (exec.run(command, out) \u003d\u003d 127) {\n         getLog().error(\"protoc, not found at: \" + protocCommand);\n         throw new MojoExecutionException(\"protoc failure\");\n       } else {\n         if (out.isEmpty()) {\n           getLog().error(\"stdout: \" + out);\n           throw new MojoExecutionException(\n               \"\u0027protoc --version\u0027 did not return a version\");\n         } else {\n           if (!out.get(0).endsWith(protocVersion)) {\n             throw new MojoExecutionException(\n                 \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\"\n                     + protocVersion + \"\u0027\");\n           }\n         }\n       }\n       if (!output.mkdirs()) {\n         if (!output.exists()) {\n           throw new MojoExecutionException(\n               \"Could not create directory: \" + output);\n         }\n       }\n \n       // Whether the import or source protoc files have changed.\n       ChecksumComparator comparator \u003d new ChecksumComparator(checksumPath);\n       boolean importsChanged \u003d false;\n \n       command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n       if (imports !\u003d null) {\n         for (File i : imports) {\n           if (comparator.hasChanged(i)) {\n             importsChanged \u003d true;\n           }\n           command.add(\"-I\" + i.getCanonicalPath());\n         }\n       }\n       // Filter to generate classes for just the changed source files.\n       List\u003cFile\u003e changedSources \u003d new ArrayList\u003c\u003e();\n       boolean sourcesChanged \u003d false;\n       for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n         // Need to recompile if the source has changed, or if any import has\n         // changed.\n         if (comparator.hasChanged(f) || importsChanged) {\n           sourcesChanged \u003d true;\n           changedSources.add(f);\n           command.add(f.getCanonicalPath());\n         }\n       }\n \n       if (!sourcesChanged \u0026\u0026 !importsChanged) {\n         getLog().info(\"No changes detected in protoc files, skipping \"\n             + \"generation.\");\n       } else {\n         if (getLog().isDebugEnabled()) {\n           StringBuilder b \u003d new StringBuilder();\n           b.append(\"Generating classes for the following protoc files: [\");\n           String prefix \u003d \"\";\n           for (File f : changedSources) {\n             b.append(prefix);\n             b.append(f.toString());\n             prefix \u003d \", \";\n           }\n           b.append(\"]\");\n           getLog().debug(b.toString());\n         }\n \n         exec \u003d new Exec(this);\n         out \u003d new ArrayList\u003cString\u003e();\n-        if (exec.run(command, out) !\u003d 0) {\n+        List\u003cString\u003e err \u003d new ArrayList\u003c\u003e();\n+        if (exec.run(command, out, err) !\u003d 0) {\n           getLog().error(\"protoc compiler error\");\n           for (String s : out) {\n             getLog().error(s);\n           }\n+          for (String s : err) {\n+            getLog().error(s);\n+          }\n           throw new MojoExecutionException(\"protoc failure\");\n         }\n         // Write the new checksum file on success.\n         comparator.writeChecksums();\n       }\n     } catch (Throwable ex) {\n       throw new MojoExecutionException(ex.toString(), ex);\n     }\n     project.addCompileSourceRoot(output.getAbsolutePath());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    try {\n      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--version\");\n      Exec exec \u003d new Exec(this);\n      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) \u003d\u003d 127) {\n        getLog().error(\"protoc, not found at: \" + protocCommand);\n        throw new MojoExecutionException(\"protoc failure\");\n      } else {\n        if (out.isEmpty()) {\n          getLog().error(\"stdout: \" + out);\n          throw new MojoExecutionException(\n              \"\u0027protoc --version\u0027 did not return a version\");\n        } else {\n          if (!out.get(0).endsWith(protocVersion)) {\n            throw new MojoExecutionException(\n                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\"\n                    + protocVersion + \"\u0027\");\n          }\n        }\n      }\n      if (!output.mkdirs()) {\n        if (!output.exists()) {\n          throw new MojoExecutionException(\n              \"Could not create directory: \" + output);\n        }\n      }\n\n      // Whether the import or source protoc files have changed.\n      ChecksumComparator comparator \u003d new ChecksumComparator(checksumPath);\n      boolean importsChanged \u003d false;\n\n      command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n      if (imports !\u003d null) {\n        for (File i : imports) {\n          if (comparator.hasChanged(i)) {\n            importsChanged \u003d true;\n          }\n          command.add(\"-I\" + i.getCanonicalPath());\n        }\n      }\n      // Filter to generate classes for just the changed source files.\n      List\u003cFile\u003e changedSources \u003d new ArrayList\u003c\u003e();\n      boolean sourcesChanged \u003d false;\n      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n        // Need to recompile if the source has changed, or if any import has\n        // changed.\n        if (comparator.hasChanged(f) || importsChanged) {\n          sourcesChanged \u003d true;\n          changedSources.add(f);\n          command.add(f.getCanonicalPath());\n        }\n      }\n\n      if (!sourcesChanged \u0026\u0026 !importsChanged) {\n        getLog().info(\"No changes detected in protoc files, skipping \"\n            + \"generation.\");\n      } else {\n        if (getLog().isDebugEnabled()) {\n          StringBuilder b \u003d new StringBuilder();\n          b.append(\"Generating classes for the following protoc files: [\");\n          String prefix \u003d \"\";\n          for (File f : changedSources) {\n            b.append(prefix);\n            b.append(f.toString());\n            prefix \u003d \", \";\n          }\n          b.append(\"]\");\n          getLog().debug(b.toString());\n        }\n\n        exec \u003d new Exec(this);\n        out \u003d new ArrayList\u003cString\u003e();\n        List\u003cString\u003e err \u003d new ArrayList\u003c\u003e();\n        if (exec.run(command, out, err) !\u003d 0) {\n          getLog().error(\"protoc compiler error\");\n          for (String s : out) {\n            getLog().error(s);\n          }\n          for (String s : err) {\n            getLog().error(s);\n          }\n          throw new MojoExecutionException(\"protoc failure\");\n        }\n        // Write the new checksum file on success.\n        comparator.writeChecksums();\n      }\n    } catch (Throwable ex) {\n      throw new MojoExecutionException(ex.toString(), ex);\n    }\n    project.addCompileSourceRoot(output.getAbsolutePath());\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
      "extendedDetails": {}
    },
    "625d7ed9eb65f0df204b506ce92c11803fbce273": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12194. Support for incremental generation in the protoc plugin.\n",
      "commitDate": "08/07/15 11:09 AM",
      "commitName": "625d7ed9eb65f0df204b506ce92c11803fbce273",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "25/01/15 8:13 AM",
      "commitNameOld": "35f64962fccc472f5fbd172f3f824fdd72a43143",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 164.08,
      "commitsBetweenForRepo": 1467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,92 @@\n   public void execute() throws MojoExecutionException {\n     try {\n       List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--version\");\n       Exec exec \u003d new Exec(this);\n       List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n       if (exec.run(command, out) \u003d\u003d 127) {\n         getLog().error(\"protoc, not found at: \" + protocCommand);\n-        throw new MojoExecutionException(\"protoc failure\");        \n+        throw new MojoExecutionException(\"protoc failure\");\n       } else {\n         if (out.isEmpty()) {\n           getLog().error(\"stdout: \" + out);\n           throw new MojoExecutionException(\n               \"\u0027protoc --version\u0027 did not return a version\");\n         } else {\n           if (!out.get(0).endsWith(protocVersion)) {\n             throw new MojoExecutionException(\n-                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n-                    + protocVersion + \"\u0027\");            \n+                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\"\n+                    + protocVersion + \"\u0027\");\n           }\n         }\n       }\n       if (!output.mkdirs()) {\n         if (!output.exists()) {\n-          throw new MojoExecutionException(\"Could not create directory: \" + \n-            output);\n+          throw new MojoExecutionException(\n+              \"Could not create directory: \" + output);\n         }\n       }\n+\n+      // Whether the import or source protoc files have changed.\n+      ChecksumComparator comparator \u003d new ChecksumComparator(checksumPath);\n+      boolean importsChanged \u003d false;\n+\n       command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n       if (imports !\u003d null) {\n         for (File i : imports) {\n+          if (comparator.hasChanged(i)) {\n+            importsChanged \u003d true;\n+          }\n           command.add(\"-I\" + i.getCanonicalPath());\n         }\n       }\n+      // Filter to generate classes for just the changed source files.\n+      List\u003cFile\u003e changedSources \u003d new ArrayList\u003c\u003e();\n+      boolean sourcesChanged \u003d false;\n       for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n-        command.add(f.getCanonicalPath());\n-      }\n-      exec \u003d new Exec(this);\n-      out \u003d new ArrayList\u003cString\u003e();\n-      if (exec.run(command, out) !\u003d 0) {\n-        getLog().error(\"protoc compiler error\");\n-        for (String s : out) {\n-          getLog().error(s);\n+        // Need to recompile if the source has changed, or if any import has\n+        // changed.\n+        if (comparator.hasChanged(f) || importsChanged) {\n+          sourcesChanged \u003d true;\n+          changedSources.add(f);\n+          command.add(f.getCanonicalPath());\n         }\n-        throw new MojoExecutionException(\"protoc failure\");\n+      }\n+\n+      if (!sourcesChanged \u0026\u0026 !importsChanged) {\n+        getLog().info(\"No changes detected in protoc files, skipping \"\n+            + \"generation.\");\n+      } else {\n+        if (getLog().isDebugEnabled()) {\n+          StringBuilder b \u003d new StringBuilder();\n+          b.append(\"Generating classes for the following protoc files: [\");\n+          String prefix \u003d \"\";\n+          for (File f : changedSources) {\n+            b.append(prefix);\n+            b.append(f.toString());\n+            prefix \u003d \", \";\n+          }\n+          b.append(\"]\");\n+          getLog().debug(b.toString());\n+        }\n+\n+        exec \u003d new Exec(this);\n+        out \u003d new ArrayList\u003cString\u003e();\n+        if (exec.run(command, out) !\u003d 0) {\n+          getLog().error(\"protoc compiler error\");\n+          for (String s : out) {\n+            getLog().error(s);\n+          }\n+          throw new MojoExecutionException(\"protoc failure\");\n+        }\n+        // Write the new checksum file on success.\n+        comparator.writeChecksums();\n       }\n     } catch (Throwable ex) {\n       throw new MojoExecutionException(ex.toString(), ex);\n     }\n     project.addCompileSourceRoot(output.getAbsolutePath());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    try {\n      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--version\");\n      Exec exec \u003d new Exec(this);\n      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) \u003d\u003d 127) {\n        getLog().error(\"protoc, not found at: \" + protocCommand);\n        throw new MojoExecutionException(\"protoc failure\");\n      } else {\n        if (out.isEmpty()) {\n          getLog().error(\"stdout: \" + out);\n          throw new MojoExecutionException(\n              \"\u0027protoc --version\u0027 did not return a version\");\n        } else {\n          if (!out.get(0).endsWith(protocVersion)) {\n            throw new MojoExecutionException(\n                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\"\n                    + protocVersion + \"\u0027\");\n          }\n        }\n      }\n      if (!output.mkdirs()) {\n        if (!output.exists()) {\n          throw new MojoExecutionException(\n              \"Could not create directory: \" + output);\n        }\n      }\n\n      // Whether the import or source protoc files have changed.\n      ChecksumComparator comparator \u003d new ChecksumComparator(checksumPath);\n      boolean importsChanged \u003d false;\n\n      command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n      if (imports !\u003d null) {\n        for (File i : imports) {\n          if (comparator.hasChanged(i)) {\n            importsChanged \u003d true;\n          }\n          command.add(\"-I\" + i.getCanonicalPath());\n        }\n      }\n      // Filter to generate classes for just the changed source files.\n      List\u003cFile\u003e changedSources \u003d new ArrayList\u003c\u003e();\n      boolean sourcesChanged \u003d false;\n      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n        // Need to recompile if the source has changed, or if any import has\n        // changed.\n        if (comparator.hasChanged(f) || importsChanged) {\n          sourcesChanged \u003d true;\n          changedSources.add(f);\n          command.add(f.getCanonicalPath());\n        }\n      }\n\n      if (!sourcesChanged \u0026\u0026 !importsChanged) {\n        getLog().info(\"No changes detected in protoc files, skipping \"\n            + \"generation.\");\n      } else {\n        if (getLog().isDebugEnabled()) {\n          StringBuilder b \u003d new StringBuilder();\n          b.append(\"Generating classes for the following protoc files: [\");\n          String prefix \u003d \"\";\n          for (File f : changedSources) {\n            b.append(prefix);\n            b.append(f.toString());\n            prefix \u003d \", \";\n          }\n          b.append(\"]\");\n          getLog().debug(b.toString());\n        }\n\n        exec \u003d new Exec(this);\n        out \u003d new ArrayList\u003cString\u003e();\n        if (exec.run(command, out) !\u003d 0) {\n          getLog().error(\"protoc compiler error\");\n          for (String s : out) {\n            getLog().error(s);\n          }\n          throw new MojoExecutionException(\"protoc failure\");\n        }\n        // Write the new checksum file on success.\n        comparator.writeChecksums();\n      }\n    } catch (Throwable ex) {\n      throw new MojoExecutionException(ex.toString(), ex);\n    }\n    project.addCompileSourceRoot(output.getAbsolutePath());\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
      "extendedDetails": {}
    },
    "35f64962fccc472f5fbd172f3f824fdd72a43143": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11419 improve hadoop-maven-plugins.  (Hervé Boutemy via stevel)\n",
      "commitDate": "25/01/15 8:13 AM",
      "commitName": "35f64962fccc472f5fbd172f3f824fdd72a43143",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "16/06/14 4:23 PM",
      "commitNameOld": "50cd2a6bed7521d517e69c38f3249c26b328fa8f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 222.7,
      "commitsBetweenForRepo": 1859,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,54 @@\n   public void execute() throws MojoExecutionException {\n     try {\n-      if (protocCommand \u003d\u003d null || protocCommand.trim().isEmpty()) {\n-        protocCommand \u003d \"protoc\";\n-      }\n       List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--version\");\n       Exec exec \u003d new Exec(this);\n       List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n       if (exec.run(command, out) \u003d\u003d 127) {\n         getLog().error(\"protoc, not found at: \" + protocCommand);\n         throw new MojoExecutionException(\"protoc failure\");        \n       } else {\n         if (out.isEmpty()) {\n           getLog().error(\"stdout: \" + out);\n           throw new MojoExecutionException(\n               \"\u0027protoc --version\u0027 did not return a version\");\n         } else {\n           if (!out.get(0).endsWith(protocVersion)) {\n             throw new MojoExecutionException(\n                 \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n                     + protocVersion + \"\u0027\");            \n           }\n         }\n       }\n       if (!output.mkdirs()) {\n         if (!output.exists()) {\n           throw new MojoExecutionException(\"Could not create directory: \" + \n             output);\n         }\n       }\n       command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n       if (imports !\u003d null) {\n         for (File i : imports) {\n           command.add(\"-I\" + i.getCanonicalPath());\n         }\n       }\n       for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n         command.add(f.getCanonicalPath());\n       }\n       exec \u003d new Exec(this);\n       out \u003d new ArrayList\u003cString\u003e();\n       if (exec.run(command, out) !\u003d 0) {\n         getLog().error(\"protoc compiler error\");\n         for (String s : out) {\n           getLog().error(s);\n         }\n         throw new MojoExecutionException(\"protoc failure\");\n       }\n     } catch (Throwable ex) {\n       throw new MojoExecutionException(ex.toString(), ex);\n     }\n     project.addCompileSourceRoot(output.getAbsolutePath());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    try {\n      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--version\");\n      Exec exec \u003d new Exec(this);\n      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) \u003d\u003d 127) {\n        getLog().error(\"protoc, not found at: \" + protocCommand);\n        throw new MojoExecutionException(\"protoc failure\");        \n      } else {\n        if (out.isEmpty()) {\n          getLog().error(\"stdout: \" + out);\n          throw new MojoExecutionException(\n              \"\u0027protoc --version\u0027 did not return a version\");\n        } else {\n          if (!out.get(0).endsWith(protocVersion)) {\n            throw new MojoExecutionException(\n                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n                    + protocVersion + \"\u0027\");            \n          }\n        }\n      }\n      if (!output.mkdirs()) {\n        if (!output.exists()) {\n          throw new MojoExecutionException(\"Could not create directory: \" + \n            output);\n        }\n      }\n      command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n      if (imports !\u003d null) {\n        for (File i : imports) {\n          command.add(\"-I\" + i.getCanonicalPath());\n        }\n      }\n      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n        command.add(f.getCanonicalPath());\n      }\n      exec \u003d new Exec(this);\n      out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) !\u003d 0) {\n        getLog().error(\"protoc compiler error\");\n        for (String s : out) {\n          getLog().error(s);\n        }\n        throw new MojoExecutionException(\"protoc failure\");\n      }\n    } catch (Throwable ex) {\n      throw new MojoExecutionException(ex.toString(), ex);\n    }\n    project.addCompileSourceRoot(output.getAbsolutePath());\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
      "extendedDetails": {}
    },
    "8451ab5c01fdd290b33881daae8757c5f77a0d0d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9872. Improve protoc version handling and detection. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514068 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/13 3:15 PM",
      "commitName": "8451ab5c01fdd290b33881daae8757c5f77a0d0d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "12/08/13 3:15 PM",
      "commitNameOld": "19b36f09009a6d74fe1273f93aa21d8f40969e80",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   public void execute() throws MojoExecutionException {\n     try {\n+      if (protocCommand \u003d\u003d null || protocCommand.trim().isEmpty()) {\n+        protocCommand \u003d \"protoc\";\n+      }\n       List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--version\");\n       Exec exec \u003d new Exec(this);\n       List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n-      if (exec.run(command, out) !\u003d 0) {\n-        getLog().error(\"protoc, could not get version\");\n-        for (String s : out) {\n-          getLog().error(s);\n-        }\n+      if (exec.run(command, out) \u003d\u003d 127) {\n+        getLog().error(\"protoc, not found at: \" + protocCommand);\n         throw new MojoExecutionException(\"protoc failure\");        \n       } else {\n-        if (out.size() \u003d\u003d 0) {\n+        if (out.isEmpty()) {\n+          getLog().error(\"stdout: \" + out);\n           throw new MojoExecutionException(\n-              \"\u0027protoc -version\u0027 did not return a version\");\n+              \"\u0027protoc --version\u0027 did not return a version\");\n         } else {\n           if (!out.get(0).endsWith(protocVersion)) {\n             throw new MojoExecutionException(\n                 \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n                     + protocVersion + \"\u0027\");            \n           }\n         }\n       }\n       if (!output.mkdirs()) {\n         if (!output.exists()) {\n           throw new MojoExecutionException(\"Could not create directory: \" + \n             output);\n         }\n       }\n       command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n       if (imports !\u003d null) {\n         for (File i : imports) {\n           command.add(\"-I\" + i.getCanonicalPath());\n         }\n       }\n       for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n         command.add(f.getCanonicalPath());\n       }\n       exec \u003d new Exec(this);\n       out \u003d new ArrayList\u003cString\u003e();\n       if (exec.run(command, out) !\u003d 0) {\n         getLog().error(\"protoc compiler error\");\n         for (String s : out) {\n           getLog().error(s);\n         }\n         throw new MojoExecutionException(\"protoc failure\");\n       }\n     } catch (Throwable ex) {\n       throw new MojoExecutionException(ex.toString(), ex);\n     }\n     project.addCompileSourceRoot(output.getAbsolutePath());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    try {\n      if (protocCommand \u003d\u003d null || protocCommand.trim().isEmpty()) {\n        protocCommand \u003d \"protoc\";\n      }\n      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--version\");\n      Exec exec \u003d new Exec(this);\n      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) \u003d\u003d 127) {\n        getLog().error(\"protoc, not found at: \" + protocCommand);\n        throw new MojoExecutionException(\"protoc failure\");        \n      } else {\n        if (out.isEmpty()) {\n          getLog().error(\"stdout: \" + out);\n          throw new MojoExecutionException(\n              \"\u0027protoc --version\u0027 did not return a version\");\n        } else {\n          if (!out.get(0).endsWith(protocVersion)) {\n            throw new MojoExecutionException(\n                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n                    + protocVersion + \"\u0027\");            \n          }\n        }\n      }\n      if (!output.mkdirs()) {\n        if (!output.exists()) {\n          throw new MojoExecutionException(\"Could not create directory: \" + \n            output);\n        }\n      }\n      command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n      if (imports !\u003d null) {\n        for (File i : imports) {\n          command.add(\"-I\" + i.getCanonicalPath());\n        }\n      }\n      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n        command.add(f.getCanonicalPath());\n      }\n      exec \u003d new Exec(this);\n      out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) !\u003d 0) {\n        getLog().error(\"protoc compiler error\");\n        for (String s : out) {\n          getLog().error(s);\n        }\n        throw new MojoExecutionException(\"protoc failure\");\n      }\n    } catch (Throwable ex) {\n      throw new MojoExecutionException(ex.toString(), ex);\n    }\n    project.addCompileSourceRoot(output.getAbsolutePath());\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
      "extendedDetails": {}
    },
    "19b36f09009a6d74fe1273f93aa21d8f40969e80": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9845. Update protobuf to 2.5 from 2.4.x. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1513281 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/13 3:15 PM",
      "commitName": "19b36f09009a6d74fe1273f93aa21d8f40969e80",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "12/03/13 6:33 PM",
      "commitNameOld": "7aa75756d653fd1c76a1b5eb64920890c37aded0",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 152.86,
      "commitsBetweenForRepo": 949,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,56 @@\n   public void execute() throws MojoExecutionException {\n     try {\n+      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n+      command.add(protocCommand);\n+      command.add(\"--version\");\n+      Exec exec \u003d new Exec(this);\n+      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n+      if (exec.run(command, out) !\u003d 0) {\n+        getLog().error(\"protoc, could not get version\");\n+        for (String s : out) {\n+          getLog().error(s);\n+        }\n+        throw new MojoExecutionException(\"protoc failure\");        \n+      } else {\n+        if (out.size() \u003d\u003d 0) {\n+          throw new MojoExecutionException(\n+              \"\u0027protoc -version\u0027 did not return a version\");\n+        } else {\n+          if (!out.get(0).endsWith(protocVersion)) {\n+            throw new MojoExecutionException(\n+                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n+                    + protocVersion + \"\u0027\");            \n+          }\n+        }\n+      }\n       if (!output.mkdirs()) {\n         if (!output.exists()) {\n           throw new MojoExecutionException(\"Could not create directory: \" + \n             output);\n         }\n       }\n-      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n+      command \u003d new ArrayList\u003cString\u003e();\n       command.add(protocCommand);\n       command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n       if (imports !\u003d null) {\n         for (File i : imports) {\n           command.add(\"-I\" + i.getCanonicalPath());\n         }\n       }\n       for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n         command.add(f.getCanonicalPath());\n       }\n-      Exec exec \u003d new Exec(this);\n-      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n+      exec \u003d new Exec(this);\n+      out \u003d new ArrayList\u003cString\u003e();\n       if (exec.run(command, out) !\u003d 0) {\n         getLog().error(\"protoc compiler error\");\n         for (String s : out) {\n           getLog().error(s);\n         }\n         throw new MojoExecutionException(\"protoc failure\");\n       }\n     } catch (Throwable ex) {\n       throw new MojoExecutionException(ex.toString(), ex);\n     }\n     project.addCompileSourceRoot(output.getAbsolutePath());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    try {\n      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--version\");\n      Exec exec \u003d new Exec(this);\n      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) !\u003d 0) {\n        getLog().error(\"protoc, could not get version\");\n        for (String s : out) {\n          getLog().error(s);\n        }\n        throw new MojoExecutionException(\"protoc failure\");        \n      } else {\n        if (out.size() \u003d\u003d 0) {\n          throw new MojoExecutionException(\n              \"\u0027protoc -version\u0027 did not return a version\");\n        } else {\n          if (!out.get(0).endsWith(protocVersion)) {\n            throw new MojoExecutionException(\n                \"protoc version is \u0027\" + out.get(0) + \"\u0027, expected version is \u0027\" \n                    + protocVersion + \"\u0027\");            \n          }\n        }\n      }\n      if (!output.mkdirs()) {\n        if (!output.exists()) {\n          throw new MojoExecutionException(\"Could not create directory: \" + \n            output);\n        }\n      }\n      command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n      if (imports !\u003d null) {\n        for (File i : imports) {\n          command.add(\"-I\" + i.getCanonicalPath());\n        }\n      }\n      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n        command.add(f.getCanonicalPath());\n      }\n      exec \u003d new Exec(this);\n      out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) !\u003d 0) {\n        getLog().error(\"protoc compiler error\");\n        for (String s : out) {\n          getLog().error(s);\n        }\n        throw new MojoExecutionException(\"protoc failure\");\n      }\n    } catch (Throwable ex) {\n      throw new MojoExecutionException(ex.toString(), ex);\n    }\n    project.addCompileSourceRoot(output.getAbsolutePath());\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java",
      "extendedDetails": {}
    },
    "6bcbf492a2397db38c69eef427c62b909a0ac9e3": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9117. replace protoc ant plugin exec with a maven plugin. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1445956 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/13 2:13 PM",
      "commitName": "6bcbf492a2397db38c69eef427c62b909a0ac9e3",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,33 @@\n+  public void execute() throws MojoExecutionException {\n+    try {\n+      if (!output.mkdirs()) {\n+        if (!output.exists()) {\n+          throw new MojoExecutionException(\"Could not create directory: \" + \n+            output);\n+        }\n+      }\n+      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n+      command.add(protocCommand);\n+      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n+      if (imports !\u003d null) {\n+        for (File i : imports) {\n+          command.add(\"-I\" + i.getCanonicalPath());\n+        }\n+      }\n+      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n+        command.add(f.getCanonicalPath());\n+      }\n+      Exec exec \u003d new Exec(this);\n+      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n+      if (exec.run(command, out) !\u003d 0) {\n+        getLog().error(\"protoc compiler error\");\n+        for (String s : out) {\n+          getLog().error(s);\n+        }\n+        throw new MojoExecutionException(\"protoc failure\");\n+      }\n+    } catch (Throwable ex) {\n+      throw new MojoExecutionException(ex.toString(), ex);\n+    }\n+    project.addCompileSourceRoot(output.getAbsolutePath());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    try {\n      if (!output.mkdirs()) {\n        if (!output.exists()) {\n          throw new MojoExecutionException(\"Could not create directory: \" + \n            output);\n        }\n      }\n      List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n      command.add(protocCommand);\n      command.add(\"--java_out\u003d\" + output.getCanonicalPath());\n      if (imports !\u003d null) {\n        for (File i : imports) {\n          command.add(\"-I\" + i.getCanonicalPath());\n        }\n      }\n      for (File f : FileSetUtils.convertFileSetToFiles(source)) {\n        command.add(f.getCanonicalPath());\n      }\n      Exec exec \u003d new Exec(this);\n      List\u003cString\u003e out \u003d new ArrayList\u003cString\u003e();\n      if (exec.run(command, out) !\u003d 0) {\n        getLog().error(\"protoc compiler error\");\n        for (String s : out) {\n          getLog().error(s);\n        }\n        throw new MojoExecutionException(\"protoc failure\");\n      }\n    } catch (Throwable ex) {\n      throw new MojoExecutionException(ex.toString(), ex);\n    }\n    project.addCompileSourceRoot(output.getAbsolutePath());\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/protoc/ProtocMojo.java"
    }
  }
}