{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "sendRpcRequest",
  "functionId": "sendRpcRequest___call-Call(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 1109,
  "functionEndLine": 1179,
  "numCommitsSeen": 184,
  "timeTaken": 6176,
  "changeHistory": [
    "e880660a204b6fd0e5a0799393a4d36359765a54",
    "9bf0696c7348879678693176da0071628ca42566",
    "5672ae7b37ce75086a1cb5bb9a388288fc913eb7",
    "d4d076876a8d0002bd3a73491d8459d11cb4896c",
    "23abb09c1f979d8c18ece81e32630a35ed569399",
    "8724ceb2359af66c800043e665c17a2a30981c7d",
    "a038ec6ceb3b02e5a82c99fb023ecf90865d5f69",
    "7f42befa70960b58d435d01a99df674a2ee56765",
    "eb2a60338715e517ba8e4d32ecfe28691a882188",
    "aa4fe26a01d2ca881cb458d49032ce419351bed1",
    "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
    "589c68ae09effd6c4f26505d61636f779c22e99f",
    "f42e58c381a1a8d4feb9384de3b8d8c857830d33",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "e880660a204b6fd0e5a0799393a4d36359765a54": "Ybodychange",
    "9bf0696c7348879678693176da0071628ca42566": "Ybodychange",
    "5672ae7b37ce75086a1cb5bb9a388288fc913eb7": "Ybodychange",
    "d4d076876a8d0002bd3a73491d8459d11cb4896c": "Ybodychange",
    "23abb09c1f979d8c18ece81e32630a35ed569399": "Ybodychange",
    "8724ceb2359af66c800043e665c17a2a30981c7d": "Ybodychange",
    "a038ec6ceb3b02e5a82c99fb023ecf90865d5f69": "Ybodychange",
    "7f42befa70960b58d435d01a99df674a2ee56765": "Ybodychange",
    "eb2a60338715e517ba8e4d32ecfe28691a882188": "Ybodychange",
    "aa4fe26a01d2ca881cb458d49032ce419351bed1": "Ymultichange(Yrename,Ybodychange)",
    "7ba12a628ad8de8c3e00afb45228b3e9d82c129b": "Ymultichange(Yexceptionschange,Ybodychange,Yparametermetachange)",
    "589c68ae09effd6c4f26505d61636f779c22e99f": "Ybodychange",
    "f42e58c381a1a8d4feb9384de3b8d8c857830d33": "Ybodychange",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e880660a204b6fd0e5a0799393a4d36359765a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13399. [SBN read] Make Client field AlignmentContext non-static. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "9bf0696c7348879678693176da0071628ca42566",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the sendParamsExecutor thread,\n       \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n           call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n-          clientId, alignmentContext);\n+          clientId, call.alignmentContext);\n \n       final ResponseBuffer buf \u003d new ResponseBuffer();\n       header.writeDelimitedTo(buf);\n       RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (ipcStreams.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n                   LOG.debug(getName() + \" sending #\" + call.id\n                       + \" \" + call.rpcRequest);\n                 }\n                 // RpcRequestHeader + RpcRequest\n                 ipcStreams.sendRequest(buf.toByteArray());\n                 ipcStreams.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(buf);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n          clientId, call.alignmentContext);\n\n      final ResponseBuffer buf \u003d new ResponseBuffer();\n      header.writeDelimitedTo(buf);\n      RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (ipcStreams.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id\n                      + \" \" + call.rpcRequest);\n                }\n                // RpcRequestHeader + RpcRequest\n                ipcStreams.sendRequest(buf.toByteArray());\n                ipcStreams.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "9bf0696c7348879678693176da0071628ca42566": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13331. [SBN read] Add lastSeenStateId to RpcRequestHeader. Contributed by Plamen Jeliazkov.\n",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "9bf0696c7348879678693176da0071628ca42566",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "c9d73437e881296282abe46a6b3196befc8cef72",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the sendParamsExecutor thread,\n       \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n           call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n-          clientId);\n+          clientId, alignmentContext);\n \n       final ResponseBuffer buf \u003d new ResponseBuffer();\n       header.writeDelimitedTo(buf);\n       RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (ipcStreams.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n                   LOG.debug(getName() + \" sending #\" + call.id\n                       + \" \" + call.rpcRequest);\n                 }\n                 // RpcRequestHeader + RpcRequest\n                 ipcStreams.sendRequest(buf.toByteArray());\n                 ipcStreams.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(buf);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n          clientId, alignmentContext);\n\n      final ResponseBuffer buf \u003d new ResponseBuffer();\n      header.writeDelimitedTo(buf);\n      RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (ipcStreams.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id\n                      + \" \" + call.rpcRequest);\n                }\n                // RpcRequestHeader + RpcRequest\n                ipcStreams.sendRequest(buf.toByteArray());\n                ipcStreams.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "5672ae7b37ce75086a1cb5bb9a388288fc913eb7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11861. ipc.Client.Connection#sendRpcRequest should log request name. Contributed by John Zhuge.\n",
      "commitDate": "07/06/17 3:52 PM",
      "commitName": "5672ae7b37ce75086a1cb5bb9a388288fc913eb7",
      "commitAuthor": "John Zhuge",
      "commitDateOld": "10/03/17 9:25 AM",
      "commitNameOld": "4478273e5fb731de93ff12e249a3137c38fcf46f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 89.23,
      "commitsBetweenForRepo": 489,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,71 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the sendParamsExecutor thread,\n       \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n           call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n           clientId);\n \n       final ResponseBuffer buf \u003d new ResponseBuffer();\n       header.writeDelimitedTo(buf);\n       RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (ipcStreams.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n-                  LOG.debug(getName() + \" sending #\" + call.id);\n+                  LOG.debug(getName() + \" sending #\" + call.id\n+                      + \" \" + call.rpcRequest);\n                 }\n                 // RpcRequestHeader + RpcRequest\n                 ipcStreams.sendRequest(buf.toByteArray());\n                 ipcStreams.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(buf);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n          clientId);\n\n      final ResponseBuffer buf \u003d new ResponseBuffer();\n      header.writeDelimitedTo(buf);\n      RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (ipcStreams.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id\n                      + \" \" + call.rpcRequest);\n                }\n                // RpcRequestHeader + RpcRequest\n                ipcStreams.sendRequest(buf.toByteArray());\n                ipcStreams.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "d4d076876a8d0002bd3a73491d8459d11cb4896c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10940. RPC client does no bounds checking of responses. Contributed by Daryn Sharp.\n",
      "commitDate": "09/09/16 8:39 AM",
      "commitName": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/09/16 9:03 AM",
      "commitNameOld": "23abb09c1f979d8c18ece81e32630a35ed569399",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.98,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,70 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the sendParamsExecutor thread,\n       \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n           call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n           clientId);\n \n       final ResponseBuffer buf \u003d new ResponseBuffer();\n       header.writeDelimitedTo(buf);\n       RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n-              synchronized (Connection.this.out) {\n+              synchronized (ipcStreams.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n                   LOG.debug(getName() + \" sending #\" + call.id);\n                 }\n-                buf.writeTo(out); // RpcRequestHeader + RpcRequest\n-                out.flush();\n+                // RpcRequestHeader + RpcRequest\n+                ipcStreams.sendRequest(buf.toByteArray());\n+                ipcStreams.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(buf);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n          clientId);\n\n      final ResponseBuffer buf \u003d new ResponseBuffer();\n      header.writeDelimitedTo(buf);\n      RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (ipcStreams.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id);\n                }\n                // RpcRequestHeader + RpcRequest\n                ipcStreams.sendRequest(buf.toByteArray());\n                ipcStreams.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "23abb09c1f979d8c18ece81e32630a35ed569399": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13547. Optimize IPC client protobuf decoding. Contributed by Daryn Sharp.\n",
      "commitDate": "02/09/16 9:03 AM",
      "commitName": "23abb09c1f979d8c18ece81e32630a35ed569399",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/06/16 12:45 AM",
      "commitNameOld": "d328e667067743f723e332d92154da8e84e65742",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 69.35,
      "commitsBetweenForRepo": 554,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,69 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the sendParamsExecutor thread,\n       \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n-      final DataOutputBuffer d \u003d new DataOutputBuffer();\n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n           call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n           clientId);\n-      header.writeDelimitedTo(d);\n-      call.rpcRequest.write(d);\n+\n+      final ResponseBuffer buf \u003d new ResponseBuffer();\n+      header.writeDelimitedTo(buf);\n+      RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n-                \n-                if (LOG.isDebugEnabled())\n+                if (LOG.isDebugEnabled()) {\n                   LOG.debug(getName() + \" sending #\" + call.id);\n-         \n-                byte[] data \u003d d.getData();\n-                int totalLength \u003d d.getLength();\n-                out.writeInt(totalLength); // Total Length\n-                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n+                }\n+                buf.writeTo(out); // RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n-              IOUtils.closeStream(d);\n+              IOUtils.closeStream(buf);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n          clientId);\n\n      final ResponseBuffer buf \u003d new ResponseBuffer();\n      header.writeDelimitedTo(buf);\n      RpcWritable.wrap(call.rpcRequest).writeTo(buf);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id);\n                }\n                buf.writeTo(out); // RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "8724ceb2359af66c800043e665c17a2a30981c7d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9717. Add retry attempt count to the RPC requests. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 4:44 PM",
      "commitName": "8724ceb2359af66c800043e665c17a2a30981c7d",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "17/07/13 9:42 PM",
      "commitNameOld": "7ec67c5118e8d13e2cb0ab09d04f0609b645a676",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,72 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the sendParamsExecutor thread,\n       \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       final DataOutputBuffer d \u003d new DataOutputBuffer();\n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n-         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, clientId);\n+          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n+          clientId);\n       header.writeDelimitedTo(d);\n       call.rpcRequest.write(d);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n                 out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry,\n          clientId);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "a038ec6ceb3b02e5a82c99fb023ecf90865d5f69": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9703.  org.apache.hadoop.ipc.Client leaks threads on stop (Tsuyoshi OZAWA via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/13 2:36 PM",
      "commitName": "a038ec6ceb3b02e5a82c99fb023ecf90865d5f69",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "11/07/13 11:02 AM",
      "commitNameOld": "7f42befa70960b58d435d01a99df674a2ee56765",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,71 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n-      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n+      // caller thread, rather than the sendParamsExecutor thread,\n+      \n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       final DataOutputBuffer d \u003d new DataOutputBuffer();\n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n          call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, clientId);\n       header.writeDelimitedTo(d);\n       call.rpcRequest.write(d);\n \n       synchronized (sendRpcRequestLock) {\n-        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n+        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n                 out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the sendParamsExecutor thread,\n      \n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, clientId);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d sendParamsExecutor.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "7f42befa70960b58d435d01a99df674a2ee56765": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9720. Rename Client#uuid to Client#clientId. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 11:02 AM",
      "commitName": "7f42befa70960b58d435d01a99df674a2ee56765",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/07/13 4:45 PM",
      "commitNameOld": "0a5f16a89e3942953d7d6c2d26542764298c6430",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 1.76,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       final DataOutputBuffer d \u003d new DataOutputBuffer();\n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n-         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, uuid);\n+         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, clientId);\n       header.writeDelimitedTo(d);\n       call.rpcRequest.write(d);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n                 out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, clientId);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "eb2a60338715e517ba8e4d32ecfe28691a882188": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9688. Add globally unique Client ID to RPC requests. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1500843 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/13 10:08 AM",
      "commitName": "eb2a60338715e517ba8e4d32ecfe28691a882188",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "21/06/13 1:09 PM",
      "commitNameOld": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n     public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n       // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n       // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       final DataOutputBuffer d \u003d new DataOutputBuffer();\n       RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n-         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id);\n+         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, uuid);\n       header.writeDelimitedTo(d);\n       call.rpcRequest.write(d);\n \n       synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n                 out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, uuid);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "aa4fe26a01d2ca881cb458d49032ce419351bed1": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/12 2:16 PM",
      "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/12/12 2:16 PM",
          "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "10/12/12 1:25 PM",
          "commitNameOld": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 7.04,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-    public void sendParam(final Call call)\n+    public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n-      // 1) PayloadHeader  - is serialized Delimited hence contains length\n-      // 2) the Payload - the RpcRequest\n+      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n+      // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       final DataOutputBuffer d \u003d new DataOutputBuffer();\n-      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n-         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n+      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n+         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id);\n       header.writeDelimitedTo(d);\n       call.rpcRequest.write(d);\n \n-      synchronized (sendParamsLock) {\n+      synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n-                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "sendParam",
            "newValue": "sendRpcRequest"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/12/12 2:16 PM",
          "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "10/12/12 1:25 PM",
          "commitNameOld": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 7.04,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-    public void sendParam(final Call call)\n+    public void sendRpcRequest(final Call call)\n         throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       // Serialize the call to be sent. This is done from the actual\n       // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n       // so that if the serialization throws an error, it is reported\n       // properly. This also parallelizes the serialization.\n       //\n       // Format of a call on the wire:\n       // 0) Length of rest below (1 + 2)\n-      // 1) PayloadHeader  - is serialized Delimited hence contains length\n-      // 2) the Payload - the RpcRequest\n+      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n+      // 2) RpcRequest\n       //\n       // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n       final DataOutputBuffer d \u003d new DataOutputBuffer();\n-      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n-         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n+      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n+         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id);\n       header.writeDelimitedTo(d);\n       call.rpcRequest.write(d);\n \n-      synchronized (sendParamsLock) {\n+      synchronized (sendRpcRequestLock) {\n         Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n           @Override\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n-                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n         });\n       \n         try {\n           senderFuture.get();\n         } catch (ExecutionException e) {\n           Throwable cause \u003d e.getCause();\n           \n           // cause should only be a RuntimeException as the Runnable above\n           // catches IOException\n           if (cause instanceof RuntimeException) {\n             throw (RuntimeException) cause;\n           } else {\n             throw new RuntimeException(\"unexpected checked exception\", cause);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void sendRpcRequest(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) RpcRequestHeader  - is serialized Delimited hence contains length\n      // 2) RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcRequestHeaderProto header \u003d ProtoUtil.makeRpcRequestHeader(\n         call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendRpcRequestLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ba12a628ad8de8c3e00afb45228b3e9d82c129b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-6762. Exception while doing RPC I/O closes channel. Contributed by Sam Rash and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 1:25 PM",
      "commitName": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-6762. Exception while doing RPC I/O closes channel. Contributed by Sam Rash and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/12 1:25 PM",
          "commitName": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/11/12 1:14 PM",
          "commitNameOld": "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 25.01,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,70 @@\n-    public void sendParam(Call call) {\n+    public void sendParam(final Call call)\n+        throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n-      DataOutputBuffer d\u003dnull;\n-      try {\n-        synchronized (this.out) {\n-          if (LOG.isDebugEnabled())\n-            LOG.debug(getName() + \" sending #\" + call.id);\n+      // Serialize the call to be sent. This is done from the actual\n+      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n+      // so that if the serialization throws an error, it is reported\n+      // properly. This also parallelizes the serialization.\n+      //\n+      // Format of a call on the wire:\n+      // 0) Length of rest below (1 + 2)\n+      // 1) PayloadHeader  - is serialized Delimited hence contains length\n+      // 2) the Payload - the RpcRequest\n+      //\n+      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n+      final DataOutputBuffer d \u003d new DataOutputBuffer();\n+      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n+         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n+      header.writeDelimitedTo(d);\n+      call.rpcRequest.write(d);\n+\n+      synchronized (sendParamsLock) {\n+        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              synchronized (Connection.this.out) {\n+                if (shouldCloseConnection.get()) {\n+                  return;\n+                }\n+                \n+                if (LOG.isDebugEnabled())\n+                  LOG.debug(getName() + \" sending #\" + call.id);\n+         \n+                byte[] data \u003d d.getData();\n+                int totalLength \u003d d.getLength();\n+                out.writeInt(totalLength); // Total Length\n+                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.flush();\n+              }\n+            } catch (IOException e) {\n+              // exception at this point would leave the connection in an\n+              // unrecoverable state (eg half a call left on the wire).\n+              // So, close the connection, killing any outstanding calls\n+              markClosed(e);\n+            } finally {\n+              //the buffer is just an in-memory buffer, but it is still polite to\n+              // close early\n+              IOUtils.closeStream(d);\n+            }\n+          }\n+        });\n+      \n+        try {\n+          senderFuture.get();\n+        } catch (ExecutionException e) {\n+          Throwable cause \u003d e.getCause();\n           \n-          // Serializing the data to be written.\n-          // Format:\n-          // 0) Length of rest below (1 + 2)\n-          // 1) PayloadHeader  - is serialized Delimited hence contains length\n-          // 2) the Payload - the RpcRequest\n-          //\n-          d \u003d new DataOutputBuffer();\n-          RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n-             call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n-          header.writeDelimitedTo(d);\n-          call.rpcRequest.write(d);\n-          byte[] data \u003d d.getData();\n-   \n-          int totalLength \u003d d.getLength();\n-          out.writeInt(totalLength); // Total Length\n-          out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n-          out.flush();\n+          // cause should only be a RuntimeException as the Runnable above\n+          // catches IOException\n+          if (cause instanceof RuntimeException) {\n+            throw (RuntimeException) cause;\n+          } else {\n+            throw new RuntimeException(\"unexpected checked exception\", cause);\n+          }\n         }\n-      } catch(IOException e) {\n-        markClosed(e);\n-      } finally {\n-        //the buffer is just an in-memory buffer, but it is still polite to\n-        // close early\n-        IOUtils.closeStream(d);\n       }\n-    }  \n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void sendParam(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) PayloadHeader  - is serialized Delimited hence contains length\n      // 2) the Payload - the RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendParamsLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[InterruptedException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6762. Exception while doing RPC I/O closes channel. Contributed by Sam Rash and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/12 1:25 PM",
          "commitName": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/11/12 1:14 PM",
          "commitNameOld": "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 25.01,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,70 @@\n-    public void sendParam(Call call) {\n+    public void sendParam(final Call call)\n+        throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n-      DataOutputBuffer d\u003dnull;\n-      try {\n-        synchronized (this.out) {\n-          if (LOG.isDebugEnabled())\n-            LOG.debug(getName() + \" sending #\" + call.id);\n+      // Serialize the call to be sent. This is done from the actual\n+      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n+      // so that if the serialization throws an error, it is reported\n+      // properly. This also parallelizes the serialization.\n+      //\n+      // Format of a call on the wire:\n+      // 0) Length of rest below (1 + 2)\n+      // 1) PayloadHeader  - is serialized Delimited hence contains length\n+      // 2) the Payload - the RpcRequest\n+      //\n+      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n+      final DataOutputBuffer d \u003d new DataOutputBuffer();\n+      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n+         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n+      header.writeDelimitedTo(d);\n+      call.rpcRequest.write(d);\n+\n+      synchronized (sendParamsLock) {\n+        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              synchronized (Connection.this.out) {\n+                if (shouldCloseConnection.get()) {\n+                  return;\n+                }\n+                \n+                if (LOG.isDebugEnabled())\n+                  LOG.debug(getName() + \" sending #\" + call.id);\n+         \n+                byte[] data \u003d d.getData();\n+                int totalLength \u003d d.getLength();\n+                out.writeInt(totalLength); // Total Length\n+                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.flush();\n+              }\n+            } catch (IOException e) {\n+              // exception at this point would leave the connection in an\n+              // unrecoverable state (eg half a call left on the wire).\n+              // So, close the connection, killing any outstanding calls\n+              markClosed(e);\n+            } finally {\n+              //the buffer is just an in-memory buffer, but it is still polite to\n+              // close early\n+              IOUtils.closeStream(d);\n+            }\n+          }\n+        });\n+      \n+        try {\n+          senderFuture.get();\n+        } catch (ExecutionException e) {\n+          Throwable cause \u003d e.getCause();\n           \n-          // Serializing the data to be written.\n-          // Format:\n-          // 0) Length of rest below (1 + 2)\n-          // 1) PayloadHeader  - is serialized Delimited hence contains length\n-          // 2) the Payload - the RpcRequest\n-          //\n-          d \u003d new DataOutputBuffer();\n-          RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n-             call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n-          header.writeDelimitedTo(d);\n-          call.rpcRequest.write(d);\n-          byte[] data \u003d d.getData();\n-   \n-          int totalLength \u003d d.getLength();\n-          out.writeInt(totalLength); // Total Length\n-          out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n-          out.flush();\n+          // cause should only be a RuntimeException as the Runnable above\n+          // catches IOException\n+          if (cause instanceof RuntimeException) {\n+            throw (RuntimeException) cause;\n+          } else {\n+            throw new RuntimeException(\"unexpected checked exception\", cause);\n+          }\n         }\n-      } catch(IOException e) {\n-        markClosed(e);\n-      } finally {\n-        //the buffer is just an in-memory buffer, but it is still polite to\n-        // close early\n-        IOUtils.closeStream(d);\n       }\n-    }  \n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void sendParam(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) PayloadHeader  - is serialized Delimited hence contains length\n      // 2) the Payload - the RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendParamsLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-6762. Exception while doing RPC I/O closes channel. Contributed by Sam Rash and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/12 1:25 PM",
          "commitName": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/11/12 1:14 PM",
          "commitNameOld": "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 25.01,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,70 @@\n-    public void sendParam(Call call) {\n+    public void sendParam(final Call call)\n+        throws InterruptedException, IOException {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n-      DataOutputBuffer d\u003dnull;\n-      try {\n-        synchronized (this.out) {\n-          if (LOG.isDebugEnabled())\n-            LOG.debug(getName() + \" sending #\" + call.id);\n+      // Serialize the call to be sent. This is done from the actual\n+      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n+      // so that if the serialization throws an error, it is reported\n+      // properly. This also parallelizes the serialization.\n+      //\n+      // Format of a call on the wire:\n+      // 0) Length of rest below (1 + 2)\n+      // 1) PayloadHeader  - is serialized Delimited hence contains length\n+      // 2) the Payload - the RpcRequest\n+      //\n+      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n+      final DataOutputBuffer d \u003d new DataOutputBuffer();\n+      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n+         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n+      header.writeDelimitedTo(d);\n+      call.rpcRequest.write(d);\n+\n+      synchronized (sendParamsLock) {\n+        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              synchronized (Connection.this.out) {\n+                if (shouldCloseConnection.get()) {\n+                  return;\n+                }\n+                \n+                if (LOG.isDebugEnabled())\n+                  LOG.debug(getName() + \" sending #\" + call.id);\n+         \n+                byte[] data \u003d d.getData();\n+                int totalLength \u003d d.getLength();\n+                out.writeInt(totalLength); // Total Length\n+                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.flush();\n+              }\n+            } catch (IOException e) {\n+              // exception at this point would leave the connection in an\n+              // unrecoverable state (eg half a call left on the wire).\n+              // So, close the connection, killing any outstanding calls\n+              markClosed(e);\n+            } finally {\n+              //the buffer is just an in-memory buffer, but it is still polite to\n+              // close early\n+              IOUtils.closeStream(d);\n+            }\n+          }\n+        });\n+      \n+        try {\n+          senderFuture.get();\n+        } catch (ExecutionException e) {\n+          Throwable cause \u003d e.getCause();\n           \n-          // Serializing the data to be written.\n-          // Format:\n-          // 0) Length of rest below (1 + 2)\n-          // 1) PayloadHeader  - is serialized Delimited hence contains length\n-          // 2) the Payload - the RpcRequest\n-          //\n-          d \u003d new DataOutputBuffer();\n-          RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n-             call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n-          header.writeDelimitedTo(d);\n-          call.rpcRequest.write(d);\n-          byte[] data \u003d d.getData();\n-   \n-          int totalLength \u003d d.getLength();\n-          out.writeInt(totalLength); // Total Length\n-          out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n-          out.flush();\n+          // cause should only be a RuntimeException as the Runnable above\n+          // catches IOException\n+          if (cause instanceof RuntimeException) {\n+            throw (RuntimeException) cause;\n+          } else {\n+            throw new RuntimeException(\"unexpected checked exception\", cause);\n+          }\n         }\n-      } catch(IOException e) {\n-        markClosed(e);\n-      } finally {\n-        //the buffer is just an in-memory buffer, but it is still polite to\n-        // close early\n-        IOUtils.closeStream(d);\n       }\n-    }  \n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void sendParam(final Call call)\n        throws InterruptedException, IOException {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      // Serialize the call to be sent. This is done from the actual\n      // caller thread, rather than the SEND_PARAMS_EXECUTOR thread,\n      // so that if the serialization throws an error, it is reported\n      // properly. This also parallelizes the serialization.\n      //\n      // Format of a call on the wire:\n      // 0) Length of rest below (1 + 2)\n      // 1) PayloadHeader  - is serialized Delimited hence contains length\n      // 2) the Payload - the RpcRequest\n      //\n      // Items \u00271\u0027 and \u00272\u0027 are prepared here. \n      final DataOutputBuffer d \u003d new DataOutputBuffer();\n      RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n         call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n      header.writeDelimitedTo(d);\n      call.rpcRequest.write(d);\n\n      synchronized (sendParamsLock) {\n        Future\u003c?\u003e senderFuture \u003d SEND_PARAMS_EXECUTOR.submit(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }\n        });\n      \n        try {\n          senderFuture.get();\n        } catch (ExecutionException e) {\n          Throwable cause \u003d e.getCause();\n          \n          // cause should only be a RuntimeException as the Runnable above\n          // catches IOException\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(\"unexpected checked exception\", cause);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[call-Call]",
            "newValue": "[call-Call(modifiers-final)]"
          }
        }
      ]
    },
    "589c68ae09effd6c4f26505d61636f779c22e99f": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-8285 Use ProtoBuf for RpcPayLoadHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/12 9:34 AM",
      "commitName": "589c68ae09effd6c4f26505d61636f779c22e99f",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "12/04/12 1:43 PM",
      "commitNameOld": "047a7b276c497a4ebb896c93a24e2f0edf258a7b",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 10.83,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n     public void sendParam(Call call) {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       DataOutputBuffer d\u003dnull;\n       try {\n         synchronized (this.out) {\n           if (LOG.isDebugEnabled())\n             LOG.debug(getName() + \" sending #\" + call.id);\n           \n-          //for serializing the\n-          //data to be written\n+          // Serializing the data to be written.\n+          // Format:\n+          // 0) Length of rest below (1 + 2)\n+          // 1) PayloadHeader  - is serialized Delimited hence contains length\n+          // 2) the Payload - the RpcRequest\n+          //\n           d \u003d new DataOutputBuffer();\n-          d.writeInt(0); // placeholder for data length\n-          RpcPayloadHeader header \u003d new RpcPayloadHeader(\n-              call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);\n-          header.write(d);\n+          RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n+             call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n+          header.writeDelimitedTo(d);\n           call.rpcRequest.write(d);\n           byte[] data \u003d d.getData();\n-          int dataLength \u003d d.getLength() - 4;\n-          data[0] \u003d (byte)((dataLength \u003e\u003e\u003e 24) \u0026 0xff);\n-          data[1] \u003d (byte)((dataLength \u003e\u003e\u003e 16) \u0026 0xff);\n-          data[2] \u003d (byte)((dataLength \u003e\u003e\u003e 8) \u0026 0xff);\n-          data[3] \u003d (byte)(dataLength \u0026 0xff);\n-          out.write(data, 0, dataLength + 4);//write the data\n+   \n+          int totalLength \u003d d.getLength();\n+          out.writeInt(totalLength); // Total Length\n+          out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n           out.flush();\n         }\n       } catch(IOException e) {\n         markClosed(e);\n       } finally {\n         //the buffer is just an in-memory buffer, but it is still polite to\n         // close early\n         IOUtils.closeStream(d);\n       }\n     }  \n\\ No newline at end of file\n",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          // Serializing the data to be written.\n          // Format:\n          // 0) Length of rest below (1 + 2)\n          // 1) PayloadHeader  - is serialized Delimited hence contains length\n          // 2) the Payload - the RpcRequest\n          //\n          d \u003d new DataOutputBuffer();\n          RpcPayloadHeaderProto header \u003d ProtoUtil.makeRpcPayloadHeader(\n             call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);\n          header.writeDelimitedTo(d);\n          call.rpcRequest.write(d);\n          byte[] data \u003d d.getData();\n   \n          int totalLength \u003d d.getLength();\n          out.writeInt(totalLength); // Total Length\n          out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "f42e58c381a1a8d4feb9384de3b8d8c857830d33": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8071. Avoid an extra packet in client code when nagling is disabled. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1244189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/12 11:47 AM",
      "commitName": "f42e58c381a1a8d4feb9384de3b8d8c857830d33",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "05/01/12 10:41 AM",
      "commitNameOld": "4bb572d3366c478924fa95e513858e8a8c793774",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 40.05,
      "commitsBetweenForRepo": 254,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n     public void sendParam(Call call) {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       DataOutputBuffer d\u003dnull;\n       try {\n         synchronized (this.out) {\n           if (LOG.isDebugEnabled())\n             LOG.debug(getName() + \" sending #\" + call.id);\n           \n           //for serializing the\n           //data to be written\n           d \u003d new DataOutputBuffer();\n+          d.writeInt(0); // placeholder for data length\n           RpcPayloadHeader header \u003d new RpcPayloadHeader(\n               call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);\n           header.write(d);\n           call.rpcRequest.write(d);\n           byte[] data \u003d d.getData();\n-          int dataLength \u003d d.getLength();\n-          out.writeInt(dataLength);      //first put the data length\n-          out.write(data, 0, dataLength);//write the data\n+          int dataLength \u003d d.getLength() - 4;\n+          data[0] \u003d (byte)((dataLength \u003e\u003e\u003e 24) \u0026 0xff);\n+          data[1] \u003d (byte)((dataLength \u003e\u003e\u003e 16) \u0026 0xff);\n+          data[2] \u003d (byte)((dataLength \u003e\u003e\u003e 8) \u0026 0xff);\n+          data[3] \u003d (byte)(dataLength \u0026 0xff);\n+          out.write(data, 0, dataLength + 4);//write the data\n           out.flush();\n         }\n       } catch(IOException e) {\n         markClosed(e);\n       } finally {\n         //the buffer is just an in-memory buffer, but it is still polite to\n         // close early\n         IOUtils.closeStream(d);\n       }\n     }  \n\\ No newline at end of file\n",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          //for serializing the\n          //data to be written\n          d \u003d new DataOutputBuffer();\n          d.writeInt(0); // placeholder for data length\n          RpcPayloadHeader header \u003d new RpcPayloadHeader(\n              call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);\n          header.write(d);\n          call.rpcRequest.write(d);\n          byte[] data \u003d d.getData();\n          int dataLength \u003d d.getLength() - 4;\n          data[0] \u003d (byte)((dataLength \u003e\u003e\u003e 24) \u0026 0xff);\n          data[1] \u003d (byte)((dataLength \u003e\u003e\u003e 16) \u0026 0xff);\n          data[2] \u003d (byte)((dataLength \u003e\u003e\u003e 8) \u0026 0xff);\n          data[3] \u003d (byte)(dataLength \u0026 0xff);\n          out.write(data, 0, dataLength + 4);//write the data\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": {
      "type": "Ybodychange",
      "commitMessage": "\t\tHADOOP-7776 Make the Ipc-Header in a RPC-Payload an explicit header (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1197885 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/11/11 10:06 PM",
      "commitName": "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "30/09/11 6:22 AM",
      "commitNameOld": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 35.66,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n     public void sendParam(Call call) {\n       if (shouldCloseConnection.get()) {\n         return;\n       }\n \n       DataOutputBuffer d\u003dnull;\n       try {\n         synchronized (this.out) {\n           if (LOG.isDebugEnabled())\n             LOG.debug(getName() + \" sending #\" + call.id);\n           \n           //for serializing the\n           //data to be written\n           d \u003d new DataOutputBuffer();\n-          d.writeInt(call.id);\n-          call.param.write(d);\n+          RpcPayloadHeader header \u003d new RpcPayloadHeader(\n+              call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);\n+          header.write(d);\n+          call.rpcRequest.write(d);\n           byte[] data \u003d d.getData();\n           int dataLength \u003d d.getLength();\n           out.writeInt(dataLength);      //first put the data length\n           out.write(data, 0, dataLength);//write the data\n           out.flush();\n         }\n       } catch(IOException e) {\n         markClosed(e);\n       } finally {\n         //the buffer is just an in-memory buffer, but it is still polite to\n         // close early\n         IOUtils.closeStream(d);\n       }\n     }  \n\\ No newline at end of file\n",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          //for serializing the\n          //data to be written\n          d \u003d new DataOutputBuffer();\n          RpcPayloadHeader header \u003d new RpcPayloadHeader(\n              call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);\n          header.write(d);\n          call.rpcRequest.write(d);\n          byte[] data \u003d d.getData();\n          int dataLength \u003d d.getLength();\n          out.writeInt(dataLength);      //first put the data length\n          out.write(data, 0, dataLength);//write the data\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          //for serializing the\n          //data to be written\n          d \u003d new DataOutputBuffer();\n          d.writeInt(call.id);\n          call.param.write(d);\n          byte[] data \u003d d.getData();\n          int dataLength \u003d d.getLength();\n          out.writeInt(dataLength);      //first put the data length\n          out.write(data, 0, dataLength);//write the data\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          //for serializing the\n          //data to be written\n          d \u003d new DataOutputBuffer();\n          d.writeInt(call.id);\n          call.param.write(d);\n          byte[] data \u003d d.getData();\n          int dataLength \u003d d.getLength();\n          out.writeInt(dataLength);      //first put the data length\n          out.write(data, 0, dataLength);//write the data\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          //for serializing the\n          //data to be written\n          d \u003d new DataOutputBuffer();\n          d.writeInt(call.id);\n          call.param.write(d);\n          byte[] data \u003d d.getData();\n          int dataLength \u003d d.getLength();\n          out.writeInt(dataLength);      //first put the data length\n          out.write(data, 0, dataLength);//write the data\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,30 @@\n+    public void sendParam(Call call) {\n+      if (shouldCloseConnection.get()) {\n+        return;\n+      }\n+\n+      DataOutputBuffer d\u003dnull;\n+      try {\n+        synchronized (this.out) {\n+          if (LOG.isDebugEnabled())\n+            LOG.debug(getName() + \" sending #\" + call.id);\n+          \n+          //for serializing the\n+          //data to be written\n+          d \u003d new DataOutputBuffer();\n+          d.writeInt(call.id);\n+          call.param.write(d);\n+          byte[] data \u003d d.getData();\n+          int dataLength \u003d d.getLength();\n+          out.writeInt(dataLength);      //first put the data length\n+          out.write(data, 0, dataLength);//write the data\n+          out.flush();\n+        }\n+      } catch(IOException e) {\n+        markClosed(e);\n+      } finally {\n+        //the buffer is just an in-memory buffer, but it is still polite to\n+        // close early\n+        IOUtils.closeStream(d);\n+      }\n+    }  \n\\ No newline at end of file\n",
      "actualSource": "    public void sendParam(Call call) {\n      if (shouldCloseConnection.get()) {\n        return;\n      }\n\n      DataOutputBuffer d\u003dnull;\n      try {\n        synchronized (this.out) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(getName() + \" sending #\" + call.id);\n          \n          //for serializing the\n          //data to be written\n          d \u003d new DataOutputBuffer();\n          d.writeInt(call.id);\n          call.param.write(d);\n          byte[] data \u003d d.getData();\n          int dataLength \u003d d.getLength();\n          out.writeInt(dataLength);      //first put the data length\n          out.write(data, 0, dataLength);//write the data\n          out.flush();\n        }\n      } catch(IOException e) {\n        markClosed(e);\n      } finally {\n        //the buffer is just an in-memory buffer, but it is still polite to\n        // close early\n        IOUtils.closeStream(d);\n      }\n    }  ",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}