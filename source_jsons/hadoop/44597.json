{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "getContainersLogRequestForRunningApplication",
  "functionId": "getContainersLogRequestForRunningApplication___options-ContainerLogsRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 1284,
  "functionEndLine": 1303,
  "numCommitsSeen": 52,
  "timeTaken": 2255,
  "changeHistory": [
    "7e5355c14e55fd6540f7f070df4b78fa94a81618",
    "429347289c7787364e654334cd84115ae40bb22d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "4e1f56e111a88c2bc600aaa601010295075676c9"
  ],
  "changeHistoryShort": {
    "7e5355c14e55fd6540f7f070df4b78fa94a81618": "Ybodychange",
    "429347289c7787364e654334cd84115ae40bb22d": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ybodychange",
    "4e1f56e111a88c2bc600aaa601010295075676c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7e5355c14e55fd6540f7f070df4b78fa94a81618": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5339. Passing file to -out for YARN log CLI doesnt give warning or error code. Contributed by Xuan Gong.\n",
      "commitDate": "15/07/16 9:23 AM",
      "commitName": "7e5355c14e55fd6540f7f070df4b78fa94a81618",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/07/16 10:20 AM",
      "commitNameOld": "429347289c7787364e654334cd84115ae40bb22d",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n       getContainersLogRequestForRunningApplication(\n           ContainerLogsRequest options) throws YarnException, IOException {\n     List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     List\u003cContainerReport\u003e reports \u003d\n         getContainerReportsFromRunningApplication(options);\n     for (ContainerReport container : reports) {\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n       newOptions.setContainerId(container.getContainerId().toString());\n       newOptions.setNodeId(container.getAssignedNode().toString());\n       String httpAddress \u003d container.getNodeHttpAddress();\n       if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n         newOptions.setNodeHttpAddress(httpAddress\n             .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n       }\n+      newOptions.setContainerState(container.getContainerState());\n       newOptionsList.add(newOptions);\n     }\n     return newOptionsList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getContainersLogRequestForRunningApplication(\n          ContainerLogsRequest options) throws YarnException, IOException {\n    List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    for (ContainerReport container : reports) {\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n      newOptions.setContainerId(container.getContainerId().toString());\n      newOptions.setNodeId(container.getAssignedNode().toString());\n      String httpAddress \u003d container.getNodeHttpAddress();\n      if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n        newOptions.setNodeHttpAddress(httpAddress\n            .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n      }\n      newOptions.setContainerState(container.getContainerState());\n      newOptionsList.add(newOptions);\n    }\n    return newOptionsList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "429347289c7787364e654334cd84115ae40bb22d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5363. For AM containers, or for containers of running-apps, \"yarn logs\" incorrectly only (tries to) shows syslog file-type by default. (Contributed by Vinod Kumar Vavilapalli)\n",
      "commitDate": "14/07/16 10:20 AM",
      "commitName": "429347289c7787364e654334cd84115ae40bb22d",
      "commitAuthor": "Xuan",
      "commitDateOld": "13/07/16 2:52 PM",
      "commitNameOld": "d18050522c5c6bd9e32eb9a1be4ffe2288624c40",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,19 @@\n       getContainersLogRequestForRunningApplication(\n           ContainerLogsRequest options) throws YarnException, IOException {\n     List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     List\u003cContainerReport\u003e reports \u003d\n         getContainerReportsFromRunningApplication(options);\n     for (ContainerReport container : reports) {\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n       newOptions.setContainerId(container.getContainerId().toString());\n       newOptions.setNodeId(container.getAssignedNode().toString());\n       String httpAddress \u003d container.getNodeHttpAddress();\n       if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n         newOptions.setNodeHttpAddress(httpAddress\n             .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n       }\n-      // if we do not specify the value for CONTAINER_LOG_FILES option,\n-      // we will only output syslog\n-      List\u003cString\u003e logFiles \u003d newOptions.getLogTypes();\n-      if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n-        logFiles \u003d Arrays.asList(\"syslog\");\n-        newOptions.setLogTypes(logFiles);\n-      }\n       newOptionsList.add(newOptions);\n     }\n     return newOptionsList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getContainersLogRequestForRunningApplication(\n          ContainerLogsRequest options) throws YarnException, IOException {\n    List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    for (ContainerReport container : reports) {\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n      newOptions.setContainerId(container.getContainerId().toString());\n      newOptions.setNodeId(container.getAssignedNode().toString());\n      String httpAddress \u003d container.getNodeHttpAddress();\n      if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n        newOptions.setNodeHttpAddress(httpAddress\n            .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n      }\n      newOptionsList.add(newOptions);\n    }\n    return newOptionsList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/07/16 8:29 AM",
      "commitNameOld": "7705812c7e3a9f3f774130e25443fda249c08c9c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,26 @@\n       getContainersLogRequestForRunningApplication(\n           ContainerLogsRequest options) throws YarnException, IOException {\n     List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n-    YarnClient yarnClient \u003d createYarnClient();\n-    try {\n-      List\u003cApplicationAttemptReport\u003e attempts \u003d\n-          yarnClient.getApplicationAttempts(options.getAppId());\n-      for (ApplicationAttemptReport attempt : attempts) {\n-        List\u003cContainerReport\u003e containers \u003d yarnClient.getContainers(\n-            attempt.getApplicationAttemptId());\n-        for (ContainerReport container : containers) {\n-          ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n-          newOptions.setContainerId(container.getContainerId().toString());\n-          newOptions.setNodeId(container.getAssignedNode().toString());\n-          newOptions.setNodeHttpAddress(container.getNodeHttpAddress()\n-              .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n-          // if we do not specify the value for CONTAINER_LOG_FILES option,\n-          // we will only output syslog\n-          List\u003cString\u003e logFiles \u003d newOptions.getLogTypes();\n-          if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n-            logFiles \u003d Arrays.asList(\"syslog\");\n-            newOptions.setLogTypes(logFiles);\n-          }\n-          newOptionsList.add(newOptions);\n-        }\n+    List\u003cContainerReport\u003e reports \u003d\n+        getContainerReportsFromRunningApplication(options);\n+    for (ContainerReport container : reports) {\n+      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n+      newOptions.setContainerId(container.getContainerId().toString());\n+      newOptions.setNodeId(container.getAssignedNode().toString());\n+      String httpAddress \u003d container.getNodeHttpAddress();\n+      if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n+        newOptions.setNodeHttpAddress(httpAddress\n+            .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n       }\n-      return newOptionsList;\n-    } finally {\n-      yarnClient.close();\n+      // if we do not specify the value for CONTAINER_LOG_FILES option,\n+      // we will only output syslog\n+      List\u003cString\u003e logFiles \u003d newOptions.getLogTypes();\n+      if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n+        logFiles \u003d Arrays.asList(\"syslog\");\n+        newOptions.setLogTypes(logFiles);\n+      }\n+      newOptionsList.add(newOptions);\n     }\n+    return newOptionsList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getContainersLogRequestForRunningApplication(\n          ContainerLogsRequest options) throws YarnException, IOException {\n    List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    for (ContainerReport container : reports) {\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n      newOptions.setContainerId(container.getContainerId().toString());\n      newOptions.setNodeId(container.getAssignedNode().toString());\n      String httpAddress \u003d container.getNodeHttpAddress();\n      if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n        newOptions.setNodeHttpAddress(httpAddress\n            .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n      }\n      // if we do not specify the value for CONTAINER_LOG_FILES option,\n      // we will only output syslog\n      List\u003cString\u003e logFiles \u003d newOptions.getLogTypes();\n      if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n        logFiles \u003d Arrays.asList(\"syslog\");\n        newOptions.setLogTypes(logFiles);\n      }\n      newOptionsList.add(newOptions);\n    }\n    return newOptionsList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "4e1f56e111a88c2bc600aaa601010295075676c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5141. Get Container logs for the Running application from Yarn Logs CommandLine. Contributed by Xuan Gong.\n",
      "commitDate": "29/05/16 9:23 AM",
      "commitName": "4e1f56e111a88c2bc600aaa601010295075676c9",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,32 @@\n+      getContainersLogRequestForRunningApplication(\n+          ContainerLogsRequest options) throws YarnException, IOException {\n+    List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n+        new ArrayList\u003cContainerLogsRequest\u003e();\n+    YarnClient yarnClient \u003d createYarnClient();\n+    try {\n+      List\u003cApplicationAttemptReport\u003e attempts \u003d\n+          yarnClient.getApplicationAttempts(options.getAppId());\n+      for (ApplicationAttemptReport attempt : attempts) {\n+        List\u003cContainerReport\u003e containers \u003d yarnClient.getContainers(\n+            attempt.getApplicationAttemptId());\n+        for (ContainerReport container : containers) {\n+          ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n+          newOptions.setContainerId(container.getContainerId().toString());\n+          newOptions.setNodeId(container.getAssignedNode().toString());\n+          newOptions.setNodeHttpAddress(container.getNodeHttpAddress()\n+              .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n+          // if we do not specify the value for CONTAINER_LOG_FILES option,\n+          // we will only output syslog\n+          List\u003cString\u003e logFiles \u003d newOptions.getLogTypes();\n+          if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n+            logFiles \u003d Arrays.asList(\"syslog\");\n+            newOptions.setLogTypes(logFiles);\n+          }\n+          newOptionsList.add(newOptions);\n+        }\n+      }\n+      return newOptionsList;\n+    } finally {\n+      yarnClient.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getContainersLogRequestForRunningApplication(\n          ContainerLogsRequest options) throws YarnException, IOException {\n    List\u003cContainerLogsRequest\u003e newOptionsList \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    YarnClient yarnClient \u003d createYarnClient();\n    try {\n      List\u003cApplicationAttemptReport\u003e attempts \u003d\n          yarnClient.getApplicationAttempts(options.getAppId());\n      for (ApplicationAttemptReport attempt : attempts) {\n        List\u003cContainerReport\u003e containers \u003d yarnClient.getContainers(\n            attempt.getApplicationAttemptId());\n        for (ContainerReport container : containers) {\n          ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(options);\n          newOptions.setContainerId(container.getContainerId().toString());\n          newOptions.setNodeId(container.getAssignedNode().toString());\n          newOptions.setNodeHttpAddress(container.getNodeHttpAddress()\n              .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\n          // if we do not specify the value for CONTAINER_LOG_FILES option,\n          // we will only output syslog\n          List\u003cString\u003e logFiles \u003d newOptions.getLogTypes();\n          if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n            logFiles \u003d Arrays.asList(\"syslog\");\n            newOptions.setLogTypes(logFiles);\n          }\n          newOptionsList.add(newOptions);\n        }\n      }\n      return newOptionsList;\n    } finally {\n      yarnClient.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}