{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "normalize",
  "functionId": "normalize___r-Resource__minimumResource-Resource__maximumResource-Resource__stepFactor-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 446,
  "functionEndLine": 469,
  "numCommitsSeen": 37,
  "timeTaken": 6120,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "ca2808d8bbe49766029e5dba88ff863f6c993287",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "239c1824a07fede71dd751ed2c1f40036b22170e",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c",
    "25f9872be63423ada6a18481eaad2888e731fdac",
    "819224dcf9c683aa52f58633ac8e13663f1916d8",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "ca2808d8bbe49766029e5dba88ff863f6c993287": "Ybodychange",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ybodychange",
    "239c1824a07fede71dd751ed2c1f40036b22170e": "Ybodychange",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": "Ybodychange",
    "25f9872be63423ada6a18481eaad2888e731fdac": "Ybodychange",
    "819224dcf9c683aa52f58633ac8e13663f1916d8": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation minimumResourceInformation \u003d minimumResource\n           .getResourceInformation(i);\n       ResourceInformation maximumResourceInformation \u003d maximumResource\n           .getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n       long value \u003d Math.max(rValue, minimumResourceInformation.getValue());\n       if (stepFactorResourceInformation.getValue() !\u003d 0) {\n         value \u003d roundUp(value, stepFactorResourceInformation.getValue());\n       }\n       tmp.setValue(Math.min(value, maximumResourceInformation.getValue()));\n       ret.setResourceInformation(i, tmp);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation minimumResourceInformation \u003d minimumResource\n          .getResourceInformation(i);\n      ResourceInformation maximumResourceInformation \u003d maximumResource\n          .getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long value \u003d Math.max(rValue, minimumResourceInformation.getValue());\n      if (stepFactorResourceInformation.getValue() !\u003d 0) {\n        value \u003d roundUp(value, stepFactorResourceInformation.getValue());\n      }\n      tmp.setValue(Math.min(value, maximumResourceInformation.getValue()));\n      ret.setResourceInformation(i, tmp);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/05/18 9:06 AM",
      "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 69.04,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,24 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation minimumResourceInformation \u003d minimumResource\n           .getResourceInformation(i);\n       ResourceInformation maximumResourceInformation \u003d maximumResource\n           .getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n-      long minimumValue \u003d UnitsConversionUtil.convert(\n-          minimumResourceInformation.getUnits(),\n-          rResourceInformation.getUnits(),\n-          minimumResourceInformation.getValue());\n-      long maximumValue \u003d UnitsConversionUtil.convert(\n-          maximumResourceInformation.getUnits(),\n-          rResourceInformation.getUnits(),\n-          maximumResourceInformation.getValue());\n-      long stepFactorValue \u003d UnitsConversionUtil.convert(\n-          stepFactorResourceInformation.getUnits(),\n-          rResourceInformation.getUnits(),\n-          stepFactorResourceInformation.getValue());\n-      long value \u003d Math.max(rValue, minimumValue);\n-      if (stepFactorValue !\u003d 0) {\n-        value \u003d roundUp(value, stepFactorValue);\n+      long value \u003d Math.max(rValue, minimumResourceInformation.getValue());\n+      if (stepFactorResourceInformation.getValue() !\u003d 0) {\n+        value \u003d roundUp(value, stepFactorResourceInformation.getValue());\n       }\n-      tmp.setValue(Math.min(value, maximumValue));\n+      tmp.setValue(Math.min(value, maximumResourceInformation.getValue()));\n       ret.setResourceInformation(i, tmp);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation minimumResourceInformation \u003d minimumResource\n          .getResourceInformation(i);\n      ResourceInformation maximumResourceInformation \u003d maximumResource\n          .getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long value \u003d Math.max(rValue, minimumResourceInformation.getValue());\n      if (stepFactorResourceInformation.getValue() !\u003d 0) {\n        value \u003d roundUp(value, stepFactorResourceInformation.getValue());\n      }\n      tmp.setValue(Math.min(value, maximumResourceInformation.getValue()));\n      ret.setResourceInformation(i, tmp);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n-    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation minimumResourceInformation \u003d minimumResource\n           .getResourceInformation(i);\n       ResourceInformation maximumResourceInformation \u003d maximumResource\n           .getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n       long minimumValue \u003d UnitsConversionUtil.convert(\n           minimumResourceInformation.getUnits(),\n           rResourceInformation.getUnits(),\n           minimumResourceInformation.getValue());\n       long maximumValue \u003d UnitsConversionUtil.convert(\n           maximumResourceInformation.getUnits(),\n           rResourceInformation.getUnits(),\n           maximumResourceInformation.getValue());\n       long stepFactorValue \u003d UnitsConversionUtil.convert(\n           stepFactorResourceInformation.getUnits(),\n           rResourceInformation.getUnits(),\n           stepFactorResourceInformation.getValue());\n       long value \u003d Math.max(rValue, minimumValue);\n       if (stepFactorValue !\u003d 0) {\n         value \u003d roundUp(value, stepFactorValue);\n       }\n       tmp.setValue(Math.min(value, maximumValue));\n       ret.setResourceInformation(i, tmp);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation minimumResourceInformation \u003d minimumResource\n          .getResourceInformation(i);\n      ResourceInformation maximumResourceInformation \u003d maximumResource\n          .getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long minimumValue \u003d UnitsConversionUtil.convert(\n          minimumResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          minimumResourceInformation.getValue());\n      long maximumValue \u003d UnitsConversionUtil.convert(\n          maximumResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          maximumResourceInformation.getValue());\n      long stepFactorValue \u003d UnitsConversionUtil.convert(\n          stepFactorResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          stepFactorResourceInformation.getValue());\n      long value \u003d Math.max(rValue, minimumValue);\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp(value, stepFactorValue);\n      }\n      tmp.setValue(Math.min(value, maximumValue));\n      ret.setResourceInformation(i, tmp);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6892. [YARN-3926] Improve API implementation in Resources and DominantResourceCalculator class. Contributed by Sunil G.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "2b51b262aba0191b80dc93799574c0b959cb4f4e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,36 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n-    for (String resource : resourceNames) {\n-      try {\n-        ResourceInformation rResourceInformation \u003d\n-            r.getResourceInformation(resource);\n-        ResourceInformation minimumResourceInformation \u003d\n-            minimumResource.getResourceInformation(resource);\n-        ResourceInformation maximumResourceInformation \u003d\n-            maximumResource.getResourceInformation(resource);\n-        ResourceInformation stepFactorResourceInformation \u003d\n-            stepFactor.getResourceInformation(resource);\n-        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n+    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n+      ResourceInformation minimumResourceInformation \u003d minimumResource\n+          .getResourceInformation(i);\n+      ResourceInformation maximumResourceInformation \u003d maximumResource\n+          .getResourceInformation(i);\n+      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n+          .getResourceInformation(i);\n+      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n-        long rValue \u003d rResourceInformation.getValue();\n-        long minimumValue \u003d UnitsConversionUtil\n-            .convert(minimumResourceInformation.getUnits(),\n-                rResourceInformation.getUnits(),\n-                minimumResourceInformation.getValue());\n-        long maximumValue \u003d UnitsConversionUtil\n-            .convert(maximumResourceInformation.getUnits(),\n-                rResourceInformation.getUnits(),\n-                maximumResourceInformation.getValue());\n-        long stepFactorValue \u003d UnitsConversionUtil\n-            .convert(stepFactorResourceInformation.getUnits(),\n-                rResourceInformation.getUnits(),\n-                stepFactorResourceInformation.getValue());\n-        long value \u003d Math.max(rValue, minimumValue);\n-        if (stepFactorValue !\u003d 0) {\n-          value \u003d roundUp(value, stepFactorValue);\n-        }\n-        tmp.setValue(Math.min(value, maximumValue));\n-        ret.setResourceInformation(resource, tmp);\n-      } catch (ResourceNotFoundException ye) {\n-        throw new IllegalArgumentException(\n-            \"Error getting resource information for \" + resource, ye);\n+      long rValue \u003d rResourceInformation.getValue();\n+      long minimumValue \u003d UnitsConversionUtil.convert(\n+          minimumResourceInformation.getUnits(),\n+          rResourceInformation.getUnits(),\n+          minimumResourceInformation.getValue());\n+      long maximumValue \u003d UnitsConversionUtil.convert(\n+          maximumResourceInformation.getUnits(),\n+          rResourceInformation.getUnits(),\n+          maximumResourceInformation.getValue());\n+      long stepFactorValue \u003d UnitsConversionUtil.convert(\n+          stepFactorResourceInformation.getUnits(),\n+          rResourceInformation.getUnits(),\n+          stepFactorResourceInformation.getValue());\n+      long value \u003d Math.max(rValue, minimumValue);\n+      if (stepFactorValue !\u003d 0) {\n+        value \u003d roundUp(value, stepFactorValue);\n       }\n+      tmp.setValue(Math.min(value, maximumValue));\n+      ret.setResourceInformation(i, tmp);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation minimumResourceInformation \u003d minimumResource\n          .getResourceInformation(i);\n      ResourceInformation maximumResourceInformation \u003d maximumResource\n          .getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long minimumValue \u003d UnitsConversionUtil.convert(\n          minimumResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          minimumResourceInformation.getValue());\n      long maximumValue \u003d UnitsConversionUtil.convert(\n          maximumResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          maximumResourceInformation.getValue());\n      long stepFactorValue \u003d UnitsConversionUtil.convert(\n          stepFactorResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          stepFactorResourceInformation.getValue());\n      long value \u003d Math.max(rValue, minimumValue);\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp(value, stepFactorValue);\n      }\n      tmp.setValue(Math.min(value, maximumValue));\n      ret.setResourceInformation(i, tmp);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation rResourceInformation \u003d\n             r.getResourceInformation(resource);\n         ResourceInformation minimumResourceInformation \u003d\n             minimumResource.getResourceInformation(resource);\n         ResourceInformation maximumResourceInformation \u003d\n             maximumResource.getResourceInformation(resource);\n         ResourceInformation stepFactorResourceInformation \u003d\n             stepFactor.getResourceInformation(resource);\n         ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n \n         long rValue \u003d rResourceInformation.getValue();\n         long minimumValue \u003d UnitsConversionUtil\n             .convert(minimumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 minimumResourceInformation.getValue());\n         long maximumValue \u003d UnitsConversionUtil\n             .convert(maximumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 maximumResourceInformation.getValue());\n         long stepFactorValue \u003d UnitsConversionUtil\n             .convert(stepFactorResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 stepFactorResourceInformation.getValue());\n         long value \u003d Math.max(rValue, minimumValue);\n         if (stepFactorValue !\u003d 0) {\n           value \u003d roundUp(value, stepFactorValue);\n         }\n         tmp.setValue(Math.min(value, maximumValue));\n         ret.setResourceInformation(resource, tmp);\n-      } catch (YarnException ye) {\n+      } catch (ResourceNotFoundException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation minimumResourceInformation \u003d\n            minimumResource.getResourceInformation(resource);\n        ResourceInformation maximumResourceInformation \u003d\n            maximumResource.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n\n        long rValue \u003d rResourceInformation.getValue();\n        long minimumValue \u003d UnitsConversionUtil\n            .convert(minimumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                minimumResourceInformation.getValue());\n        long maximumValue \u003d UnitsConversionUtil\n            .convert(maximumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                maximumResourceInformation.getValue());\n        long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n        long value \u003d Math.max(rValue, minimumValue);\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp(value, stepFactorValue);\n        }\n        tmp.setValue(Math.min(value, maximumValue));\n        ret.setResourceInformation(resource, tmp);\n      } catch (ResourceNotFoundException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "ca2808d8bbe49766029e5dba88ff863f6c993287": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6761. Fix build for YARN-3926 branch. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation rResourceInformation \u003d\n             r.getResourceInformation(resource);\n         ResourceInformation minimumResourceInformation \u003d\n             minimumResource.getResourceInformation(resource);\n         ResourceInformation maximumResourceInformation \u003d\n             maximumResource.getResourceInformation(resource);\n         ResourceInformation stepFactorResourceInformation \u003d\n             stepFactor.getResourceInformation(resource);\n         ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n \n         long rValue \u003d rResourceInformation.getValue();\n         long minimumValue \u003d UnitsConversionUtil\n             .convert(minimumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 minimumResourceInformation.getValue());\n         long maximumValue \u003d UnitsConversionUtil\n             .convert(maximumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 maximumResourceInformation.getValue());\n         long stepFactorValue \u003d UnitsConversionUtil\n             .convert(stepFactorResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 stepFactorResourceInformation.getValue());\n         long value \u003d Math.max(rValue, minimumValue);\n         if (stepFactorValue !\u003d 0) {\n           value \u003d roundUp(value, stepFactorValue);\n         }\n         tmp.setValue(Math.min(value, maximumValue));\n+        ret.setResourceInformation(resource, tmp);\n       } catch (YarnException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation minimumResourceInformation \u003d\n            minimumResource.getResourceInformation(resource);\n        ResourceInformation maximumResourceInformation \u003d\n            maximumResource.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n\n        long rValue \u003d rResourceInformation.getValue();\n        long minimumValue \u003d UnitsConversionUtil\n            .convert(minimumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                minimumResourceInformation.getValue());\n        long maximumValue \u003d UnitsConversionUtil\n            .convert(maximumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                maximumResourceInformation.getValue());\n        long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n        long value \u003d Math.max(rValue, minimumValue);\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp(value, stepFactorValue);\n        }\n        tmp.setValue(Math.min(value, maximumValue));\n        ret.setResourceInformation(resource, tmp);\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n-    Resource ret \u003d Resources.createResource(0, 0);\n+    Resource ret \u003d Resource.newInstance(r);\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation rResourceInformation \u003d\n             r.getResourceInformation(resource);\n         ResourceInformation minimumResourceInformation \u003d\n             minimumResource.getResourceInformation(resource);\n         ResourceInformation maximumResourceInformation \u003d\n             maximumResource.getResourceInformation(resource);\n         ResourceInformation stepFactorResourceInformation \u003d\n             stepFactor.getResourceInformation(resource);\n-        ResourceInformation tmp \u003d\n-            ResourceInformation.newInstance(rResourceInformation);\n+        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n \n-        Long rValue \u003d rResourceInformation.getValue();\n-        Long minimumValue \u003d UnitsConversionUtil\n+        long rValue \u003d rResourceInformation.getValue();\n+        long minimumValue \u003d UnitsConversionUtil\n             .convert(minimumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 minimumResourceInformation.getValue());\n-        Long maximumValue \u003d UnitsConversionUtil\n+        long maximumValue \u003d UnitsConversionUtil\n             .convert(maximumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 maximumResourceInformation.getValue());\n-        Long stepFactorValue \u003d UnitsConversionUtil\n+        long stepFactorValue \u003d UnitsConversionUtil\n             .convert(stepFactorResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 stepFactorResourceInformation.getValue());\n-        Long value \u003d Math.max(rValue, minimumValue);\n+        long value \u003d Math.max(rValue, minimumValue);\n         if (stepFactorValue !\u003d 0) {\n           value \u003d roundUp(value, stepFactorValue);\n         }\n         tmp.setValue(Math.min(value, maximumValue));\n-        ret.setResourceInformation(resource, tmp);\n       } catch (YarnException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation minimumResourceInformation \u003d\n            minimumResource.getResourceInformation(resource);\n        ResourceInformation maximumResourceInformation \u003d\n            maximumResource.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n\n        long rValue \u003d rResourceInformation.getValue();\n        long minimumValue \u003d UnitsConversionUtil\n            .convert(minimumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                minimumResourceInformation.getValue());\n        long maximumValue \u003d UnitsConversionUtil\n            .convert(maximumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                maximumResourceInformation.getValue());\n        long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n        long value \u003d Math.max(rValue, minimumValue);\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp(value, stepFactorValue);\n        }\n        tmp.setValue(Math.min(value, maximumValue));\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "239c1824a07fede71dd751ed2c1f40036b22170e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5586. Update the Resources class to consider all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n     Resource ret \u003d Resources.createResource(0, 0);\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation rResourceInformation \u003d\n             r.getResourceInformation(resource);\n         ResourceInformation minimumResourceInformation \u003d\n             minimumResource.getResourceInformation(resource);\n         ResourceInformation maximumResourceInformation \u003d\n             maximumResource.getResourceInformation(resource);\n         ResourceInformation stepFactorResourceInformation \u003d\n             stepFactor.getResourceInformation(resource);\n         ResourceInformation tmp \u003d\n             ResourceInformation.newInstance(rResourceInformation);\n \n         Long rValue \u003d rResourceInformation.getValue();\n         Long minimumValue \u003d UnitsConversionUtil\n             .convert(minimumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 minimumResourceInformation.getValue());\n         Long maximumValue \u003d UnitsConversionUtil\n             .convert(maximumResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 maximumResourceInformation.getValue());\n         Long stepFactorValue \u003d UnitsConversionUtil\n             .convert(stepFactorResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 stepFactorResourceInformation.getValue());\n-\n-        tmp.setValue(\n-            Math.min(roundUp(Math.max(rValue, minimumValue), stepFactorValue),\n-                maximumValue));\n+        Long value \u003d Math.max(rValue, minimumValue);\n+        if (stepFactorValue !\u003d 0) {\n+          value \u003d roundUp(value, stepFactorValue);\n+        }\n+        tmp.setValue(Math.min(value, maximumValue));\n         ret.setResourceInformation(resource, tmp);\n       } catch (YarnException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resources.createResource(0, 0);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation minimumResourceInformation \u003d\n            minimumResource.getResourceInformation(resource);\n        ResourceInformation maximumResourceInformation \u003d\n            maximumResource.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d\n            ResourceInformation.newInstance(rResourceInformation);\n\n        Long rValue \u003d rResourceInformation.getValue();\n        Long minimumValue \u003d UnitsConversionUtil\n            .convert(minimumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                minimumResourceInformation.getValue());\n        Long maximumValue \u003d UnitsConversionUtil\n            .convert(maximumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                maximumResourceInformation.getValue());\n        Long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n        Long value \u003d Math.max(rValue, minimumValue);\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp(value, stepFactorValue);\n        }\n        tmp.setValue(Math.min(value, maximumValue));\n        ret.setResourceInformation(resource, tmp);\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4172. Extend DominantResourceCalculator to account for all resources. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "32c91223f1bd06561ea4ce2d1944e8d9a847f18c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/07/17 4:56 AM",
      "commitNameOld": "626d730bfc4c1f6ea54e8a246a0a676cdb74937f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 65.18,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,41 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n-                            Resource maximumResource, Resource stepFactor) {\n-    if (stepFactor.getMemorySize() \u003d\u003d 0 || stepFactor.getVirtualCores() \u003d\u003d 0) {\n-      Resource step \u003d Resources.clone(stepFactor);\n-      if (stepFactor.getMemorySize() \u003d\u003d 0) {\n-        LOG.error(\"Memory cannot be allocated in increments of zero. Assuming \"\n-            + minimumResource.getMemorySize() + \"MB increment size. \"\n-            + \"Please ensure the scheduler configuration is correct.\");\n-        step.setMemorySize(minimumResource.getMemorySize());\n-      }\n+      Resource maximumResource, Resource stepFactor) {\n+    Resource ret \u003d Resources.createResource(0, 0);\n+    for (String resource : resourceNames) {\n+      try {\n+        ResourceInformation rResourceInformation \u003d\n+            r.getResourceInformation(resource);\n+        ResourceInformation minimumResourceInformation \u003d\n+            minimumResource.getResourceInformation(resource);\n+        ResourceInformation maximumResourceInformation \u003d\n+            maximumResource.getResourceInformation(resource);\n+        ResourceInformation stepFactorResourceInformation \u003d\n+            stepFactor.getResourceInformation(resource);\n+        ResourceInformation tmp \u003d\n+            ResourceInformation.newInstance(rResourceInformation);\n \n-      if (stepFactor.getVirtualCores() \u003d\u003d 0) {\n-        LOG.error(\"VCore cannot be allocated in increments of zero. Assuming \"\n-            + minimumResource.getVirtualCores() + \"VCores increment size. \"\n-            + \"Please ensure the scheduler configuration is correct.\");\n-        step.setVirtualCores(minimumResource.getVirtualCores());\n-      }\n+        Long rValue \u003d rResourceInformation.getValue();\n+        Long minimumValue \u003d UnitsConversionUtil\n+            .convert(minimumResourceInformation.getUnits(),\n+                rResourceInformation.getUnits(),\n+                minimumResourceInformation.getValue());\n+        Long maximumValue \u003d UnitsConversionUtil\n+            .convert(maximumResourceInformation.getUnits(),\n+                rResourceInformation.getUnits(),\n+                maximumResourceInformation.getValue());\n+        Long stepFactorValue \u003d UnitsConversionUtil\n+            .convert(stepFactorResourceInformation.getUnits(),\n+                rResourceInformation.getUnits(),\n+                stepFactorResourceInformation.getValue());\n \n-      stepFactor \u003d step;\n+        tmp.setValue(\n+            Math.min(roundUp(Math.max(rValue, minimumValue), stepFactorValue),\n+                maximumValue));\n+        ret.setResourceInformation(resource, tmp);\n+      } catch (YarnException ye) {\n+        throw new IllegalArgumentException(\n+            \"Error getting resource information for \" + resource, ye);\n+      }\n     }\n-\n-    long normalizedMemory \u003d Math.min(\n-      roundUp(\n-        Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n-        stepFactor.getMemorySize()),\n-      maximumResource.getMemorySize());\n-    int normalizedCores \u003d Math.min(\n-      roundUp(\n-        Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n-        stepFactor.getVirtualCores()),\n-      maximumResource.getVirtualCores());\n-    return Resources.createResource(normalizedMemory,\n-      normalizedCores);\n+    return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    Resource ret \u003d Resources.createResource(0, 0);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation minimumResourceInformation \u003d\n            minimumResource.getResourceInformation(resource);\n        ResourceInformation maximumResourceInformation \u003d\n            maximumResource.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d\n            ResourceInformation.newInstance(rResourceInformation);\n\n        Long rValue \u003d rResourceInformation.getValue();\n        Long minimumValue \u003d UnitsConversionUtil\n            .convert(minimumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                minimumResourceInformation.getValue());\n        Long maximumValue \u003d UnitsConversionUtil\n            .convert(maximumResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                maximumResourceInformation.getValue());\n        Long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n\n        tmp.setValue(\n            Math.min(roundUp(Math.max(rValue, minimumValue), stepFactorValue),\n                maximumValue));\n        ret.setResourceInformation(resource, tmp);\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "25f9872be63423ada6a18481eaad2888e731fdac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 9:40 AM",
      "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 140.5,
      "commitsBetweenForRepo": 1014,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,34 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n                             Resource maximumResource, Resource stepFactor) {\n+    if (stepFactor.getMemorySize() \u003d\u003d 0 || stepFactor.getVirtualCores() \u003d\u003d 0) {\n+      Resource step \u003d Resources.clone(stepFactor);\n+      if (stepFactor.getMemorySize() \u003d\u003d 0) {\n+        LOG.error(\"Memory cannot be allocated in increments of zero. Assuming \"\n+            + minimumResource.getMemorySize() + \"MB increment size. \"\n+            + \"Please ensure the scheduler configuration is correct.\");\n+        step.setMemorySize(minimumResource.getMemorySize());\n+      }\n+\n+      if (stepFactor.getVirtualCores() \u003d\u003d 0) {\n+        LOG.error(\"VCore cannot be allocated in increments of zero. Assuming \"\n+            + minimumResource.getVirtualCores() + \"VCores increment size. \"\n+            + \"Please ensure the scheduler configuration is correct.\");\n+        step.setVirtualCores(minimumResource.getVirtualCores());\n+      }\n+\n+      stepFactor \u003d step;\n+    }\n+\n     long normalizedMemory \u003d Math.min(\n       roundUp(\n         Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n         stepFactor.getMemorySize()),\n       maximumResource.getMemorySize());\n     int normalizedCores \u003d Math.min(\n       roundUp(\n         Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n         stepFactor.getVirtualCores()),\n       maximumResource.getVirtualCores());\n     return Resources.createResource(normalizedMemory,\n       normalizedCores);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n                            Resource maximumResource, Resource stepFactor) {\n    if (stepFactor.getMemorySize() \u003d\u003d 0 || stepFactor.getVirtualCores() \u003d\u003d 0) {\n      Resource step \u003d Resources.clone(stepFactor);\n      if (stepFactor.getMemorySize() \u003d\u003d 0) {\n        LOG.error(\"Memory cannot be allocated in increments of zero. Assuming \"\n            + minimumResource.getMemorySize() + \"MB increment size. \"\n            + \"Please ensure the scheduler configuration is correct.\");\n        step.setMemorySize(minimumResource.getMemorySize());\n      }\n\n      if (stepFactor.getVirtualCores() \u003d\u003d 0) {\n        LOG.error(\"VCore cannot be allocated in increments of zero. Assuming \"\n            + minimumResource.getVirtualCores() + \"VCores increment size. \"\n            + \"Please ensure the scheduler configuration is correct.\");\n        step.setVirtualCores(minimumResource.getVirtualCores());\n      }\n\n      stepFactor \u003d step;\n    }\n\n    long normalizedMemory \u003d Math.min(\n      roundUp(\n        Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n        stepFactor.getMemorySize()),\n      maximumResource.getMemorySize());\n    int normalizedCores \u003d Math.min(\n      roundUp(\n        Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n        stepFactor.getVirtualCores()),\n      maximumResource.getVirtualCores());\n    return Resources.createResource(normalizedMemory,\n      normalizedCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "819224dcf9c683aa52f58633ac8e13663f1916d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5270. Solve miscellaneous issues caused by YARN-4844. Contributed by Wangda Tan\n",
      "commitDate": "11/07/16 10:36 PM",
      "commitName": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 43.57,
      "commitsBetweenForRepo": 400,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n                             Resource maximumResource, Resource stepFactor) {\n     long normalizedMemory \u003d Math.min(\n       roundUp(\n         Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n         stepFactor.getMemorySize()),\n       maximumResource.getMemorySize());\n-    long normalizedCores \u003d Math.min(\n+    int normalizedCores \u003d Math.min(\n       roundUp(\n         Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n         stepFactor.getVirtualCores()),\n       maximumResource.getVirtualCores());\n     return Resources.createResource(normalizedMemory,\n       normalizedCores);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n                            Resource maximumResource, Resource stepFactor) {\n    long normalizedMemory \u003d Math.min(\n      roundUp(\n        Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n        stepFactor.getMemorySize()),\n      maximumResource.getMemorySize());\n    int normalizedCores \u003d Math.min(\n      roundUp(\n        Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n        stepFactor.getVirtualCores()),\n      maximumResource.getVirtualCores());\n    return Resources.createResource(normalizedMemory,\n      normalizedCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 248.81,
      "commitsBetweenForRepo": 1666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n                             Resource maximumResource, Resource stepFactor) {\n-    int normalizedMemory \u003d Math.min(\n+    long normalizedMemory \u003d Math.min(\n       roundUp(\n-        Math.max(r.getMemory(), minimumResource.getMemory()),\n-        stepFactor.getMemory()),\n-      maximumResource.getMemory());\n-    int normalizedCores \u003d Math.min(\n+        Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n+        stepFactor.getMemorySize()),\n+      maximumResource.getMemorySize());\n+    long normalizedCores \u003d Math.min(\n       roundUp(\n         Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n         stepFactor.getVirtualCores()),\n       maximumResource.getVirtualCores());\n     return Resources.createResource(normalizedMemory,\n       normalizedCores);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n                            Resource maximumResource, Resource stepFactor) {\n    long normalizedMemory \u003d Math.min(\n      roundUp(\n        Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n        stepFactor.getMemorySize()),\n      maximumResource.getMemorySize());\n    long normalizedCores \u003d Math.min(\n      roundUp(\n        Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n        stepFactor.getVirtualCores()),\n      maximumResource.getVirtualCores());\n    return Resources.createResource(normalizedMemory,\n      normalizedCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-827. Need to make Resource arithmetic methods accessible^CJian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495533 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 11:28 AM",
      "commitName": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,15 @@\n+  public Resource normalize(Resource r, Resource minimumResource,\n+                            Resource maximumResource, Resource stepFactor) {\n+    int normalizedMemory \u003d Math.min(\n+      roundUp(\n+        Math.max(r.getMemory(), minimumResource.getMemory()),\n+        stepFactor.getMemory()),\n+      maximumResource.getMemory());\n+    int normalizedCores \u003d Math.min(\n+      roundUp(\n+        Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n+        stepFactor.getVirtualCores()),\n+      maximumResource.getVirtualCores());\n+    return Resources.createResource(normalizedMemory,\n+      normalizedCores);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n                            Resource maximumResource, Resource stepFactor) {\n    int normalizedMemory \u003d Math.min(\n      roundUp(\n        Math.max(r.getMemory(), minimumResource.getMemory()),\n        stepFactor.getMemory()),\n      maximumResource.getMemory());\n    int normalizedCores \u003d Math.min(\n      roundUp(\n        Math.max(r.getVirtualCores(), minimumResource.getVirtualCores()),\n        stepFactor.getVirtualCores()),\n      maximumResource.getVirtualCores());\n    return Resources.createResource(normalizedMemory,\n      normalizedCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}