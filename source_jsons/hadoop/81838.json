{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeLibraryChecker.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
  "functionStartLine": 46,
  "functionEndLine": 172,
  "numCommitsSeen": 13,
  "timeTaken": 3212,
  "changeHistory": [
    "659c88801d008bb352d10a1cb3bd0e401486cc9b",
    "a0a276162147e843a5a4e028abdca5b66f5118da",
    "19639785f5e9c483558ce585287b9dda9d626263",
    "bc7242298118c701598cb2095f840fb487a230e6",
    "482e35c55a4bec27fa62b29d9e5f125816f1d8bd",
    "dfa78484633b3ce21471d527b9c24671e3ca5df9",
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
    "84d50003f6e46f9f9ac2b9d7bb937de757be161b",
    "6dae4b430c342f9ad44ad8659c372e519f3931c9",
    "6fac3e9b611c43b4f7a97c80f86dd761782cef09",
    "bfef9807a08435822546dd66dc72531465f34743",
    "ba3d29a2e28a102e8ae850d1ddc18a9c9005077a",
    "9ad8639e1cfd9e39d83dd4228f9e7fa7c66af3bb"
  ],
  "changeHistoryShort": {
    "659c88801d008bb352d10a1cb3bd0e401486cc9b": "Ybodychange",
    "a0a276162147e843a5a4e028abdca5b66f5118da": "Ybodychange",
    "19639785f5e9c483558ce585287b9dda9d626263": "Ybodychange",
    "bc7242298118c701598cb2095f840fb487a230e6": "Ybodychange",
    "482e35c55a4bec27fa62b29d9e5f125816f1d8bd": "Ybodychange",
    "dfa78484633b3ce21471d527b9c24671e3ca5df9": "Ybodychange",
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec": "Ybodychange",
    "84d50003f6e46f9f9ac2b9d7bb937de757be161b": "Ybodychange",
    "6dae4b430c342f9ad44ad8659c372e519f3931c9": "Ybodychange",
    "6fac3e9b611c43b4f7a97c80f86dd761782cef09": "Ybodychange",
    "bfef9807a08435822546dd66dc72531465f34743": "Ybodychange",
    "ba3d29a2e28a102e8ae850d1ddc18a9c9005077a": "Ybodychange",
    "9ad8639e1cfd9e39d83dd4228f9e7fa7c66af3bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "659c88801d008bb352d10a1cb3bd0e401486cc9b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14818. Check native pmdk lib by \u0027hadoop checknative\u0027 command. Contributed by Feilong He.\n",
      "commitDate": "22/09/19 9:32 AM",
      "commitName": "659c88801d008bb352d10a1cb3bd0e401486cc9b",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "04/01/17 6:46 AM",
      "commitNameOld": "a0a276162147e843a5a4e028abdca5b66f5118da",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 991.07,
      "commitsBetweenForRepo": 7696,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,127 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     boolean isalLoaded \u003d false;\n     boolean zStdLoaded \u003d false;\n+    boolean pmdkLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String isalDetail \u003d \"\";\n+    String pmdkDetail \u003d \"\";\n     String zstdLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       zStdLoaded \u003d NativeCodeLoader.buildSupportsZstd() \u0026\u0026\n         ZStandardCodec.isNativeCodeLoaded();\n       if (zStdLoaded \u0026\u0026 NativeCodeLoader.buildSupportsZstd()) {\n         zstdLibraryName \u003d ZStandardCodec.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n \n       isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n       if (isalDetail !\u003d null) {\n         isalLoaded \u003d false;\n       } else {\n         isalDetail \u003d ErasureCodeNative.getLibraryName();\n         isalLoaded \u003d true;\n       }\n \n+      pmdkDetail \u003d NativeIO.POSIX.getPmdkSupportStateMessage();\n+      pmdkLoaded \u003d NativeIO.POSIX.isPmdkAvailable();\n+      if (pmdkLoaded) {\n+        pmdkDetail \u003d NativeIO.POSIX.Pmem.getPmdkLibPath();\n+      }\n+\n       openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n       if (openSslDetail !\u003d null) {\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n \n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     if (Shell.WINDOWS) {\n       // winutils.exe is required on Windows\n       try {\n         winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n         winutilsExists \u003d true;\n       } catch (IOException e) {\n         LOG.debug(\"No Winutils: \", e);\n         winutilsPath \u003d e.getMessage();\n         winutilsExists \u003d false;\n       }\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"zstd  :  %b %s%n\", zStdLoaded, zstdLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n+    System.out.printf(\"PMDK:    %b %s%n\", pmdkLoaded, pmdkDetail);\n \n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded\n             \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded \u0026\u0026 zStdLoaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    boolean isalLoaded \u003d false;\n    boolean zStdLoaded \u003d false;\n    boolean pmdkLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String isalDetail \u003d \"\";\n    String pmdkDetail \u003d \"\";\n    String zstdLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      zStdLoaded \u003d NativeCodeLoader.buildSupportsZstd() \u0026\u0026\n        ZStandardCodec.isNativeCodeLoaded();\n      if (zStdLoaded \u0026\u0026 NativeCodeLoader.buildSupportsZstd()) {\n        zstdLibraryName \u003d ZStandardCodec.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n\n      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n      if (isalDetail !\u003d null) {\n        isalLoaded \u003d false;\n      } else {\n        isalDetail \u003d ErasureCodeNative.getLibraryName();\n        isalLoaded \u003d true;\n      }\n\n      pmdkDetail \u003d NativeIO.POSIX.getPmdkSupportStateMessage();\n      pmdkLoaded \u003d NativeIO.POSIX.isPmdkAvailable();\n      if (pmdkLoaded) {\n        pmdkDetail \u003d NativeIO.POSIX.Pmem.getPmdkLibPath();\n      }\n\n      openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n      if (openSslDetail !\u003d null) {\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"zstd  :  %b %s%n\", zStdLoaded, zstdLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n    System.out.printf(\"PMDK:    %b %s%n\", pmdkLoaded, pmdkDetail);\n\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded\n            \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded \u0026\u0026 zStdLoaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "a0a276162147e843a5a4e028abdca5b66f5118da": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13578. Add Codec for ZStandard Compression. Contributed by churro morales\n",
      "commitDate": "04/01/17 6:46 AM",
      "commitName": "a0a276162147e843a5a4e028abdca5b66f5118da",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "31/03/16 3:09 PM",
      "commitNameOld": "19639785f5e9c483558ce585287b9dda9d626263",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 278.69,
      "commitsBetweenForRepo": 1981,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,118 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     boolean isalLoaded \u003d false;\n+    boolean zStdLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String isalDetail \u003d \"\";\n+    String zstdLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n-\n+      zStdLoaded \u003d NativeCodeLoader.buildSupportsZstd() \u0026\u0026\n+        ZStandardCodec.isNativeCodeLoaded();\n+      if (zStdLoaded \u0026\u0026 NativeCodeLoader.buildSupportsZstd()) {\n+        zstdLibraryName \u003d ZStandardCodec.getLibraryName();\n+      }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n \n       isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n       if (isalDetail !\u003d null) {\n         isalLoaded \u003d false;\n       } else {\n         isalDetail \u003d ErasureCodeNative.getLibraryName();\n         isalLoaded \u003d true;\n       }\n \n       openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n       if (openSslDetail !\u003d null) {\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n \n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     if (Shell.WINDOWS) {\n       // winutils.exe is required on Windows\n       try {\n         winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n         winutilsExists \u003d true;\n       } catch (IOException e) {\n         LOG.debug(\"No Winutils: \", e);\n         winutilsPath \u003d e.getMessage();\n         winutilsExists \u003d false;\n       }\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n+    System.out.printf(\"zstd  :  %b %s%n\", zStdLoaded, zstdLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n \n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n-        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded))) {\n+        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded\n+            \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded \u0026\u0026 zStdLoaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    boolean isalLoaded \u003d false;\n    boolean zStdLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String isalDetail \u003d \"\";\n    String zstdLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      zStdLoaded \u003d NativeCodeLoader.buildSupportsZstd() \u0026\u0026\n        ZStandardCodec.isNativeCodeLoaded();\n      if (zStdLoaded \u0026\u0026 NativeCodeLoader.buildSupportsZstd()) {\n        zstdLibraryName \u003d ZStandardCodec.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n\n      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n      if (isalDetail !\u003d null) {\n        isalLoaded \u003d false;\n      } else {\n        isalDetail \u003d ErasureCodeNative.getLibraryName();\n        isalLoaded \u003d true;\n      }\n\n      openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n      if (openSslDetail !\u003d null) {\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"zstd  :  %b %s%n\", zStdLoaded, zstdLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded\n            \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded \u0026\u0026 zStdLoaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "19639785f5e9c483558ce585287b9dda9d626263": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12955. Fix bugs in the initialization of the ISA-L library JNI bindings (Kai Zheng via cmccabe)\n",
      "commitDate": "31/03/16 3:09 PM",
      "commitName": "19639785f5e9c483558ce585287b9dda9d626263",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "14/12/15 1:12 PM",
      "commitNameOld": "bc7242298118c701598cb2095f840fb487a230e6",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 108.04,
      "commitsBetweenForRepo": 681,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,110 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     boolean isalLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String isalDetail \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n \n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n \n-      try {\n-        isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n+      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n+      if (isalDetail !\u003d null) {\n+        isalLoaded \u003d false;\n+      } else {\n         isalDetail \u003d ErasureCodeNative.getLibraryName();\n         isalLoaded \u003d true;\n-      } catch (UnsatisfiedLinkError e) {\n-        isalLoaded \u003d false;\n       }\n \n       openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n       if (openSslDetail !\u003d null) {\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n \n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     if (Shell.WINDOWS) {\n       // winutils.exe is required on Windows\n       try {\n         winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n         winutilsExists \u003d true;\n       } catch (IOException e) {\n         LOG.debug(\"No Winutils: \", e);\n         winutilsPath \u003d e.getMessage();\n         winutilsExists \u003d false;\n       }\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n \n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    boolean isalLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String isalDetail \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n\n      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n      if (isalDetail !\u003d null) {\n        isalLoaded \u003d false;\n      } else {\n        isalDetail \u003d ErasureCodeNative.getLibraryName();\n        isalLoaded \u003d true;\n      }\n\n      openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n      if (openSslDetail !\u003d null) {\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "bc7242298118c701598cb2095f840fb487a230e6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12638. UnsatisfiedLinkError while checking ISA-L in checknative command. (Kai Sasaki via Colin P. McCabe)\n",
      "commitDate": "14/12/15 1:12 PM",
      "commitName": "bc7242298118c701598cb2095f840fb487a230e6",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "05/11/15 10:44 AM",
      "commitNameOld": "482e35c55a4bec27fa62b29d9e5f125816f1d8bd",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 39.1,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,110 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     boolean isalLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String isalDetail \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n \n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n \n-      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n-      if (isalDetail !\u003d null) {\n-        isalLoaded \u003d false;\n-      } else {\n+      try {\n+        isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n         isalDetail \u003d ErasureCodeNative.getLibraryName();\n         isalLoaded \u003d true;\n+      } catch (UnsatisfiedLinkError e) {\n+        isalLoaded \u003d false;\n       }\n \n       openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n       if (openSslDetail !\u003d null) {\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n \n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     if (Shell.WINDOWS) {\n       // winutils.exe is required on Windows\n       try {\n         winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n         winutilsExists \u003d true;\n       } catch (IOException e) {\n         LOG.debug(\"No Winutils: \", e);\n         winutilsPath \u003d e.getMessage();\n         winutilsExists \u003d false;\n       }\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n \n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n-        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n+        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    boolean isalLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String isalDetail \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n\n      try {\n        isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n        isalDetail \u003d ErasureCodeNative.getLibraryName();\n        isalLoaded \u003d true;\n      } catch (UnsatisfiedLinkError e) {\n        isalLoaded \u003d false;\n      }\n\n      openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n      if (openSslDetail !\u003d null) {\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded \u0026\u0026 isalLoaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "482e35c55a4bec27fa62b29d9e5f125816f1d8bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11887. Introduce Intel ISA-L erasure coding library for native erasure encoding support (Kai Zheng via Colin P. McCabe)\n",
      "commitDate": "05/11/15 10:44 AM",
      "commitName": "482e35c55a4bec27fa62b29d9e5f125816f1d8bd",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "14/10/15 12:25 PM",
      "commitNameOld": "dfa78484633b3ce21471d527b9c24671e3ca5df9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 21.97,
      "commitsBetweenForRepo": 205,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,110 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n+    boolean isalLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n+    String isalDetail \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n+\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n-      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n-        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n+\n+      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n+      if (isalDetail !\u003d null) {\n+        isalLoaded \u003d false;\n+      } else {\n+        isalDetail \u003d ErasureCodeNative.getLibraryName();\n+        isalLoaded \u003d true;\n+      }\n+\n+      openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n+      if (openSslDetail !\u003d null) {\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n+\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     if (Shell.WINDOWS) {\n       // winutils.exe is required on Windows\n       try {\n         winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n         winutilsExists \u003d true;\n       } catch (IOException e) {\n         LOG.debug(\"No Winutils: \", e);\n         winutilsPath \u003d e.getMessage();\n         winutilsExists \u003d false;\n       }\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n+    System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n+\n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    boolean isalLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String isalDetail \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n\n      isalDetail \u003d ErasureCodeNative.getLoadingFailureReason();\n      if (isalDetail !\u003d null) {\n        isalLoaded \u003d false;\n      } else {\n        isalDetail \u003d ErasureCodeNative.getLibraryName();\n        isalLoaded \u003d true;\n      }\n\n      openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n      if (openSslDetail !\u003d null) {\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    System.out.printf(\"ISA-L:   %b %s%n\", isalLoaded, isalDetail);\n\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "dfa78484633b3ce21471d527b9c24671e3ca5df9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12478. Shell.getWinUtilsPath() has been renamed Shell.getWinutilsPath(). (stevel)\n",
      "commitDate": "14/10/15 12:25 PM",
      "commitName": "dfa78484633b3ce21471d527b9c24671e3ca5df9",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "13/10/15 1:49 PM",
      "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,95 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n       if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n         openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     if (Shell.WINDOWS) {\n       // winutils.exe is required on Windows\n       try {\n-        winutilsPath \u003d Shell.getWinutilsFile().getCanonicalPath();\n+        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n         winutilsExists \u003d true;\n       } catch (IOException e) {\n         LOG.debug(\"No Winutils: \", e);\n         winutilsPath \u003d e.getMessage();\n         winutilsExists \u003d false;\n       }\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinUtilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10775. Shell operations to fail with meaningful errors on windows if winutils.exe not found. (stevel)\n",
      "commitDate": "13/10/15 1:49 PM",
      "commitName": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/12/14 2:37 PM",
      "commitNameOld": "84d50003f6e46f9f9ac2b9d7bb937de757be161b",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 306.92,
      "commitsBetweenForRepo": 2524,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,95 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n       if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n         openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n-    // winutils.exe is required on Windows\n-    winutilsPath \u003d Shell.getWinUtilsPath();\n-    if (winutilsPath !\u003d null) {\n-      winutilsExists \u003d true;\n-    } else {\n-      winutilsPath \u003d \"\";\n+    if (Shell.WINDOWS) {\n+      // winutils.exe is required on Windows\n+      try {\n+        winutilsPath \u003d Shell.getWinutilsFile().getCanonicalPath();\n+        winutilsExists \u003d true;\n+      } catch (IOException e) {\n+        LOG.debug(\"No Winutils: \", e);\n+        winutilsPath \u003d e.getMessage();\n+        winutilsExists \u003d false;\n+      }\n+      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     if (Shell.WINDOWS) {\n       System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    if (Shell.WINDOWS) {\n      // winutils.exe is required on Windows\n      try {\n        winutilsPath \u003d Shell.getWinutilsFile().getCanonicalPath();\n        winutilsExists \u003d true;\n      } catch (IOException e) {\n        LOG.debug(\"No Winutils: \", e);\n        winutilsPath \u003d e.getMessage();\n        winutilsExists \u003d false;\n      }\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "84d50003f6e46f9f9ac2b9d7bb937de757be161b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11386. Replace \\n by %n in format hadoop-common format strings. Contributed by Li Lu.\n",
      "commitDate": "10/12/14 2:37 PM",
      "commitName": "84d50003f6e46f9f9ac2b9d7bb937de757be161b",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "09/09/14 9:38 PM",
      "commitNameOld": "6dae4b430c342f9ad44ad8659c372e519f3931c9",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 91.75,
      "commitsBetweenForRepo": 850,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,90 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library (and\\n\"\n         + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n     boolean winutilsExists \u003d false;\n \n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     String winutilsPath \u003d null;\n \n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n       if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n         openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n \n     // winutils.exe is required on Windows\n     winutilsPath \u003d Shell.getWinUtilsPath();\n     if (winutilsPath !\u003d null) {\n       winutilsExists \u003d true;\n     } else {\n       winutilsPath \u003d \"\";\n     }\n \n     System.out.println(\"Native library checking:\");\n-    System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n-    System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n-    System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n-    System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n-    System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n-    System.out.printf(\"openssl: %b %s\\n\", openSslLoaded, openSslDetail);\n+    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n+    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n+    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n+    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n+    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n+    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n     if (Shell.WINDOWS) {\n-      System.out.printf(\"winutils: %b %s\\n\", winutilsExists, winutilsPath);\n+      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n     }\n \n     if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    // winutils.exe is required on Windows\n    winutilsPath \u003d Shell.getWinUtilsPath();\n    if (winutilsPath !\u003d null) {\n      winutilsExists \u003d true;\n    } else {\n      winutilsPath \u003d \"\";\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s%n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s%n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s%n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s%n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s%n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s%n\", openSslLoaded, openSslDetail);\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s%n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "6dae4b430c342f9ad44ad8659c372e519f3931c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11057. checknative command to probe for winutils.exe on windows. Contributed by Xiaoyu Yao.\n",
      "commitDate": "09/09/14 9:38 PM",
      "commitName": "6dae4b430c342f9ad44ad8659c372e519f3931c9",
      "commitAuthor": "cnauroth",
      "commitDateOld": "21/07/14 5:58 PM",
      "commitNameOld": "6fac3e9b611c43b4f7a97c80f86dd761782cef09",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 50.15,
      "commitsBetweenForRepo": 405,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,90 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n-        + \"      by default just check hadoop library is available\\n\"\n+        + \"      by default just check hadoop library (and\\n\"\n+        + \"      winutils.exe on Windows OS) is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     boolean openSslLoaded \u003d false;\n+    boolean winutilsExists \u003d false;\n+\n     String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n+    String winutilsPath \u003d null;\n+\n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n       if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n         openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n         openSslLoaded \u003d false;\n       } else {\n         openSslDetail \u003d OpensslCipher.getLibraryName();\n         openSslLoaded \u003d true;\n       }\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n+\n+    // winutils.exe is required on Windows\n+    winutilsPath \u003d Shell.getWinUtilsPath();\n+    if (winutilsPath !\u003d null) {\n+      winutilsExists \u003d true;\n+    } else {\n+      winutilsPath \u003d \"\";\n+    }\n+\n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n     System.out.printf(\"openssl: %b %s\\n\", openSslLoaded, openSslDetail);\n-    if ((!nativeHadoopLoaded) ||\n+    if (Shell.WINDOWS) {\n+      System.out.printf(\"winutils: %b %s\\n\", winutilsExists, winutilsPath);\n+    }\n+\n+    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library (and\\n\"\n        + \"      winutils.exe on Windows OS) is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    boolean winutilsExists \u003d false;\n\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    String winutilsPath \u003d null;\n\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n\n    // winutils.exe is required on Windows\n    winutilsPath \u003d Shell.getWinUtilsPath();\n    if (winutilsPath !\u003d null) {\n      winutilsExists \u003d true;\n    } else {\n      winutilsPath \u003d \"\";\n    }\n\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s\\n\", openSslLoaded, openSslDetail);\n    if (Shell.WINDOWS) {\n      System.out.printf(\"winutils: %b %s\\n\", winutilsExists, winutilsPath);\n    }\n\n    if ((!nativeHadoopLoaded) || (Shell.WINDOWS \u0026\u0026 (!winutilsExists)) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "6fac3e9b611c43b4f7a97c80f86dd761782cef09": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10870. Failed to load OpenSSL cipher error logs on systems with old openssl versions (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612440 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 5:58 PM",
      "commitName": "6fac3e9b611c43b4f7a97c80f86dd761782cef09",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/07/14 4:40 PM",
      "commitNameOld": "bfef9807a08435822546dd66dc72531465f34743",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,72 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n-    boolean opensslLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n+    boolean openSslLoaded \u003d false;\n+    String openSslDetail \u003d \"\";\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n-    String opensslLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n-      opensslLoaded \u003d NativeCodeLoader.buildSupportsOpenssl() \u0026\u0026\n-          OpensslCipher.isNativeCodeLoaded();\n-      if (opensslLoaded) {\n-        opensslLibraryName \u003d OpensslCipher.getLibraryName();\n+      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n+        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n+        openSslLoaded \u003d false;\n+      } else {\n+        openSslDetail \u003d OpensslCipher.getLibraryName();\n+        openSslLoaded \u003d true;\n       }\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n     System.out.println(\"Native library checking:\");\n     System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n     System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n     System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n     System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n     System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n-    System.out.printf(\"openssl: %b %s\\n\", opensslLoaded, opensslLibraryName);\n+    System.out.printf(\"openssl: %b %s\\n\", openSslLoaded, openSslDetail);\n     if ((!nativeHadoopLoaded) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    boolean openSslLoaded \u003d false;\n    String openSslDetail \u003d \"\";\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      if (OpensslCipher.getLoadingFailureReason() !\u003d null) {\n        openSslDetail \u003d OpensslCipher.getLoadingFailureReason();\n        openSslLoaded \u003d false;\n      } else {\n        openSslDetail \u003d OpensslCipher.getLibraryName();\n        openSslLoaded \u003d true;\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s\\n\", openSslLoaded, openSslDetail);\n    if ((!nativeHadoopLoaded) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "bfef9807a08435822546dd66dc72531465f34743": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10693. Implementation of AES-CTR CryptoCodec using JNI to OpenSSL (hitliuyi via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 4:40 PM",
      "commitName": "bfef9807a08435822546dd66dc72531465f34743",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "18/07/13 3:38 PM",
      "commitNameOld": "ba3d29a2e28a102e8ae850d1ddc18a9c9005077a",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 350.04,
      "commitsBetweenForRepo": 2255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,70 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library is available\\n\"\n         + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n     Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n+    boolean opensslLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n     boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n     String hadoopLibraryName \u003d \"\";\n     String zlibLibraryName \u003d \"\";\n     String snappyLibraryName \u003d \"\";\n+    String opensslLibraryName \u003d \"\";\n     String lz4LibraryName \u003d \"\";\n     String bzip2LibraryName \u003d \"\";\n     if (nativeHadoopLoaded) {\n       hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n       zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n       if (zlibLoaded) {\n         zlibLibraryName \u003d ZlibFactory.getLibraryName();\n       }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n       if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n         snappyLibraryName \u003d SnappyCodec.getLibraryName();\n       }\n+      opensslLoaded \u003d NativeCodeLoader.buildSupportsOpenssl() \u0026\u0026\n+          OpensslCipher.isNativeCodeLoaded();\n+      if (opensslLoaded) {\n+        opensslLibraryName \u003d OpensslCipher.getLibraryName();\n+      }\n       if (lz4Loaded) {\n         lz4LibraryName \u003d Lz4Codec.getLibraryName();\n       }\n       if (bzip2Loaded) {\n         bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n       }\n     }\n     System.out.println(\"Native library checking:\");\n-    System.out.printf(\"hadoop: %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n-    System.out.printf(\"zlib:   %b %s\\n\", zlibLoaded, zlibLibraryName);\n-    System.out.printf(\"snappy: %b %s\\n\", snappyLoaded, snappyLibraryName);\n-    System.out.printf(\"lz4:    %b %s\\n\", lz4Loaded, lz4LibraryName);\n-    System.out.printf(\"bzip2:  %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n+    System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n+    System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n+    System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n+    System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n+    System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n+    System.out.printf(\"openssl: %b %s\\n\", opensslLoaded, opensslLibraryName);\n     if ((!nativeHadoopLoaded) ||\n         (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    boolean opensslLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String opensslLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      opensslLoaded \u003d NativeCodeLoader.buildSupportsOpenssl() \u0026\u0026\n          OpensslCipher.isNativeCodeLoaded();\n      if (opensslLoaded) {\n        opensslLibraryName \u003d OpensslCipher.getLibraryName();\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop:  %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:    %b %s\\n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy:  %b %s\\n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:     %b %s\\n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:   %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n    System.out.printf(\"openssl: %b %s\\n\", opensslLoaded, opensslLibraryName);\n    if ((!nativeHadoopLoaded) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "ba3d29a2e28a102e8ae850d1ddc18a9c9005077a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9164. Print paths of loaded native libraries in NativeLibraryChecker. (Binglin Chang via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 3:38 PM",
      "commitName": "ba3d29a2e28a102e8ae850d1ddc18a9c9005077a",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "22/12/12 6:08 PM",
      "commitNameOld": "9ad8639e1cfd9e39d83dd4228f9e7fa7c66af3bb",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 207.85,
      "commitsBetweenForRepo": 1201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,62 @@\n   public static void main(String[] args) {\n     String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n         + \"  -a  use -a to check all libraries are available\\n\"\n         + \"      by default just check hadoop library is available\\n\"\n-        + \"      exit with error code if check failed\\n\"\n+        + \"      exit with error code 1 if check failed\\n\"\n         + \"  -h  print this message\\n\";\n     if (args.length \u003e 1 ||\n         (args.length \u003d\u003d 1 \u0026\u0026\n             !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n       System.err.println(usage);\n       ExitUtil.terminate(1);\n     }\n     boolean checkAll \u003d false;\n     if (args.length \u003d\u003d 1) {\n       if (args[0].equals(\"-h\")) {\n         System.out.println(usage);\n         return;\n       }\n       checkAll \u003d true;\n     }\n+    Configuration conf \u003d new Configuration();\n     boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n     boolean zlibLoaded \u003d false;\n     boolean snappyLoaded \u003d false;\n     // lz4 is linked within libhadoop\n     boolean lz4Loaded \u003d nativeHadoopLoaded;\n+    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n+    String hadoopLibraryName \u003d \"\";\n+    String zlibLibraryName \u003d \"\";\n+    String snappyLibraryName \u003d \"\";\n+    String lz4LibraryName \u003d \"\";\n+    String bzip2LibraryName \u003d \"\";\n     if (nativeHadoopLoaded) {\n-      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(new Configuration());\n+      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n+      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n+      if (zlibLoaded) {\n+        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n+      }\n       snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n           SnappyCodec.isNativeCodeLoaded();\n+      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n+        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n+      }\n+      if (lz4Loaded) {\n+        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n+      }\n+      if (bzip2Loaded) {\n+        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n+      }\n     }\n     System.out.println(\"Native library checking:\");\n-    System.out.printf(\"hadoop: %b\\n\", nativeHadoopLoaded);\n-    System.out.printf(\"zlib:   %b\\n\", zlibLoaded);\n-    System.out.printf(\"snappy: %b\\n\", snappyLoaded);\n-    System.out.printf(\"lz4:    %b\\n\", lz4Loaded);\n+    System.out.printf(\"hadoop: %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n+    System.out.printf(\"zlib:   %b %s\\n\", zlibLoaded, zlibLibraryName);\n+    System.out.printf(\"snappy: %b %s\\n\", snappyLoaded, snappyLibraryName);\n+    System.out.printf(\"lz4:    %b %s\\n\", lz4Loaded, lz4LibraryName);\n+    System.out.printf(\"bzip2:  %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n     if ((!nativeHadoopLoaded) ||\n-        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded))) {\n+        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n       // return 1 to indicated check failed\n       ExitUtil.terminate(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library is available\\n\"\n        + \"      exit with error code 1 if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    Configuration conf \u003d new Configuration();\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    boolean bzip2Loaded \u003d Bzip2Factory.isNativeBzip2Loaded(conf);\n    String hadoopLibraryName \u003d \"\";\n    String zlibLibraryName \u003d \"\";\n    String snappyLibraryName \u003d \"\";\n    String lz4LibraryName \u003d \"\";\n    String bzip2LibraryName \u003d \"\";\n    if (nativeHadoopLoaded) {\n      hadoopLibraryName \u003d NativeCodeLoader.getLibraryName();\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(conf);\n      if (zlibLoaded) {\n        zlibLibraryName \u003d ZlibFactory.getLibraryName();\n      }\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n      if (snappyLoaded \u0026\u0026 NativeCodeLoader.buildSupportsSnappy()) {\n        snappyLibraryName \u003d SnappyCodec.getLibraryName();\n      }\n      if (lz4Loaded) {\n        lz4LibraryName \u003d Lz4Codec.getLibraryName();\n      }\n      if (bzip2Loaded) {\n        bzip2LibraryName \u003d Bzip2Factory.getLibraryName(conf);\n      }\n    }\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop: %b %s\\n\", nativeHadoopLoaded, hadoopLibraryName);\n    System.out.printf(\"zlib:   %b %s\\n\", zlibLoaded, zlibLibraryName);\n    System.out.printf(\"snappy: %b %s\\n\", snappyLoaded, snappyLibraryName);\n    System.out.printf(\"lz4:    %b %s\\n\", lz4Loaded, lz4LibraryName);\n    System.out.printf(\"bzip2:  %b %s\\n\", bzip2Loaded, bzip2LibraryName);\n    if ((!nativeHadoopLoaded) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded \u0026\u0026 bzip2Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java",
      "extendedDetails": {}
    },
    "9ad8639e1cfd9e39d83dd4228f9e7fa7c66af3bb": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9162. Add utility to check native library availability. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1425390 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/12/12 6:08 PM",
      "commitName": "9ad8639e1cfd9e39d83dd4228f9e7fa7c66af3bb",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,41 @@\n+  public static void main(String[] args) {\n+    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n+        + \"  -a  use -a to check all libraries are available\\n\"\n+        + \"      by default just check hadoop library is available\\n\"\n+        + \"      exit with error code if check failed\\n\"\n+        + \"  -h  print this message\\n\";\n+    if (args.length \u003e 1 ||\n+        (args.length \u003d\u003d 1 \u0026\u0026\n+            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n+      System.err.println(usage);\n+      ExitUtil.terminate(1);\n+    }\n+    boolean checkAll \u003d false;\n+    if (args.length \u003d\u003d 1) {\n+      if (args[0].equals(\"-h\")) {\n+        System.out.println(usage);\n+        return;\n+      }\n+      checkAll \u003d true;\n+    }\n+    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n+    boolean zlibLoaded \u003d false;\n+    boolean snappyLoaded \u003d false;\n+    // lz4 is linked within libhadoop\n+    boolean lz4Loaded \u003d nativeHadoopLoaded;\n+    if (nativeHadoopLoaded) {\n+      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(new Configuration());\n+      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n+          SnappyCodec.isNativeCodeLoaded();\n+    }\n+    System.out.println(\"Native library checking:\");\n+    System.out.printf(\"hadoop: %b\\n\", nativeHadoopLoaded);\n+    System.out.printf(\"zlib:   %b\\n\", zlibLoaded);\n+    System.out.printf(\"snappy: %b\\n\", snappyLoaded);\n+    System.out.printf(\"lz4:    %b\\n\", lz4Loaded);\n+    if ((!nativeHadoopLoaded) ||\n+        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded))) {\n+      // return 1 to indicated check failed\n+      ExitUtil.terminate(1);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    String usage \u003d \"NativeLibraryChecker [-a|-h]\\n\"\n        + \"  -a  use -a to check all libraries are available\\n\"\n        + \"      by default just check hadoop library is available\\n\"\n        + \"      exit with error code if check failed\\n\"\n        + \"  -h  print this message\\n\";\n    if (args.length \u003e 1 ||\n        (args.length \u003d\u003d 1 \u0026\u0026\n            !(args[0].equals(\"-a\") || args[0].equals(\"-h\")))) {\n      System.err.println(usage);\n      ExitUtil.terminate(1);\n    }\n    boolean checkAll \u003d false;\n    if (args.length \u003d\u003d 1) {\n      if (args[0].equals(\"-h\")) {\n        System.out.println(usage);\n        return;\n      }\n      checkAll \u003d true;\n    }\n    boolean nativeHadoopLoaded \u003d NativeCodeLoader.isNativeCodeLoaded();\n    boolean zlibLoaded \u003d false;\n    boolean snappyLoaded \u003d false;\n    // lz4 is linked within libhadoop\n    boolean lz4Loaded \u003d nativeHadoopLoaded;\n    if (nativeHadoopLoaded) {\n      zlibLoaded \u003d ZlibFactory.isNativeZlibLoaded(new Configuration());\n      snappyLoaded \u003d NativeCodeLoader.buildSupportsSnappy() \u0026\u0026\n          SnappyCodec.isNativeCodeLoaded();\n    }\n    System.out.println(\"Native library checking:\");\n    System.out.printf(\"hadoop: %b\\n\", nativeHadoopLoaded);\n    System.out.printf(\"zlib:   %b\\n\", zlibLoaded);\n    System.out.printf(\"snappy: %b\\n\", snappyLoaded);\n    System.out.printf(\"lz4:    %b\\n\", lz4Loaded);\n    if ((!nativeHadoopLoaded) ||\n        (checkAll \u0026\u0026 !(zlibLoaded \u0026\u0026 snappyLoaded \u0026\u0026 lz4Loaded))) {\n      // return 1 to indicated check failed\n      ExitUtil.terminate(1);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NativeLibraryChecker.java"
    }
  }
}