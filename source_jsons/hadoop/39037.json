{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeAllocation.java",
  "functionName": "transformToTree",
  "functionId": "transformToTree",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/NodeAllocation.java",
  "functionStartLine": 82,
  "functionEndLine": 115,
  "numCommitsSeen": 4,
  "timeTaken": 1063,
  "changeHistory": [
    "e0d131f055ee126052ad4d0f7b0d192e6c730188"
  ],
  "changeHistoryShort": {
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,34 @@\n+  public void transformToTree() {\n+    List\u003cActivityNode\u003e allocationTree \u003d new ArrayList\u003c\u003e();\n+\n+    if (root \u003d\u003d null) {\n+      Set\u003cString\u003e names \u003d Collections.newSetFromMap(new ConcurrentHashMap\u003c\u003e());\n+      ListIterator\u003cAllocationActivity\u003e ite \u003d allocationOperations.listIterator(\n+          allocationOperations.size());\n+      while (ite.hasPrevious()) {\n+        String name \u003d ite.previous().getName();\n+        if (name !\u003d null) {\n+          if (!names.contains(name)) {\n+            names.add(name);\n+          } else {\n+            ite.remove();\n+          }\n+        }\n+      }\n+\n+      for (AllocationActivity allocationOperation : allocationOperations) {\n+        ActivityNode node \u003d allocationOperation.createTreeNode();\n+        String name \u003d node.getName();\n+        for (int i \u003d allocationTree.size() - 1; i \u003e -1; i--) {\n+          if (allocationTree.get(i).getParentName().equals(name)) {\n+            node.addChild(allocationTree.get(i));\n+            allocationTree.remove(i);\n+          } else {\n+            break;\n+          }\n+        }\n+        allocationTree.add(node);\n+      }\n+      root \u003d allocationTree.get(0);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void transformToTree() {\n    List\u003cActivityNode\u003e allocationTree \u003d new ArrayList\u003c\u003e();\n\n    if (root \u003d\u003d null) {\n      Set\u003cString\u003e names \u003d Collections.newSetFromMap(new ConcurrentHashMap\u003c\u003e());\n      ListIterator\u003cAllocationActivity\u003e ite \u003d allocationOperations.listIterator(\n          allocationOperations.size());\n      while (ite.hasPrevious()) {\n        String name \u003d ite.previous().getName();\n        if (name !\u003d null) {\n          if (!names.contains(name)) {\n            names.add(name);\n          } else {\n            ite.remove();\n          }\n        }\n      }\n\n      for (AllocationActivity allocationOperation : allocationOperations) {\n        ActivityNode node \u003d allocationOperation.createTreeNode();\n        String name \u003d node.getName();\n        for (int i \u003d allocationTree.size() - 1; i \u003e -1; i--) {\n          if (allocationTree.get(i).getParentName().equals(name)) {\n            node.addChild(allocationTree.get(i));\n            allocationTree.remove(i);\n          } else {\n            break;\n          }\n        }\n        allocationTree.add(node);\n      }\n      root \u003d allocationTree.get(0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/NodeAllocation.java"
    }
  }
}