{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuxServices.java",
  "functionName": "maybeDownloadJars",
  "functionId": "maybeDownloadJars___sName-String__className-String__remoteFile-String__type-AuxServiceFile.TypeEnum__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
  "functionStartLine": 315,
  "functionEndLine": 396,
  "numCommitsSeen": 28,
  "timeTaken": 3265,
  "changeHistory": [
    "dc3f4fc2f44c22300cd0b4832469b8cd59a1f228",
    "516377bfa6faa21f50b7e7c3889e4196c6d464b8",
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61"
  ],
  "changeHistoryShort": {
    "dc3f4fc2f44c22300cd0b4832469b8cd59a1f228": "Ymodifierchange",
    "516377bfa6faa21f50b7e7c3889e4196c6d464b8": "Ybodychange",
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dc3f4fc2f44c22300cd0b4832469b8cd59a1f228": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-9965. Fix NodeManager failing to start on subsequent times when Hdfs Auxillary Jar is set (addendum). Contributed by Prabhu Joseph.\n",
      "commitDate": "18/11/19 6:38 PM",
      "commitName": "dc3f4fc2f44c22300cd0b4832469b8cd59a1f228",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "11/11/19 2:31 AM",
      "commitNameOld": "516377bfa6faa21f50b7e7c3889e4196c6d464b8",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 7.67,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n-  private Path maybeDownloadJars(String sName, String className, String\n+  protected Path maybeDownloadJars(String sName, String className, String\n       remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)\n       throws IOException {\n     // load AuxiliaryService from remote classpath\n     FileContext localLFS \u003d getLocalFileContext(conf);\n     // create NM aux-service dir in NM localdir if it does not exist.\n     Path nmAuxDir \u003d dirsHandler.getLocalPathForWrite(\".\"\n         + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\n     if (!localLFS.util().exists(nmAuxDir)) {\n       try {\n         localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\n       } catch (IOException ex) {\n         throw new YarnRuntimeException(\"Fail to create dir:\"\n             + nmAuxDir.toString(), ex);\n       }\n     }\n     Path src \u003d new Path(remoteFile);\n     FileContext remoteLFS \u003d getRemoteFileContext(src.toUri(), conf);\n     FileStatus scFileStatus \u003d remoteLFS.getFileStatus(src);\n     if (!scFileStatus.getOwner().equals(\n         this.userUGI.getShortUserName())) {\n       throw new YarnRuntimeException(\"The remote jarfile owner:\"\n           + scFileStatus.getOwner() + \" is not the same as the NM user:\"\n           + this.userUGI.getShortUserName() + \".\");\n     }\n     if ((scFileStatus.getPermission().toShort() \u0026 0022) !\u003d 0) {\n       throw new YarnRuntimeException(\"The remote jarfile should not \"\n           + \"be writable by group or others. \"\n           + \"The current Permission is \"\n           + scFileStatus.getPermission().toShort());\n     }\n     Path downloadDest \u003d new Path(nmAuxDir,\n         className + \"_\" + scFileStatus.getModificationTime());\n     // check whether we need to re-download the jar\n     // from remote directory\n     Path targetDirPath \u003d new Path(downloadDest,\n         scFileStatus.getPath().getName());\n     FileStatus[] allSubDirs \u003d localLFS.util().listStatus(nmAuxDir);\n     for (FileStatus sub : allSubDirs) {\n       if (sub.getPath().getName().equals(downloadDest.getName())) {\n         return targetDirPath;\n       } else {\n         if (sub.getPath().getName().contains(className) \u0026\u0026\n             !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\n           Path delPath \u003d new Path(sub.getPath().getParent(),\n               sub.getPath().getName() + DEL_SUFFIX);\n           localLFS.rename(sub.getPath(), delPath);\n           LOG.info(\"delete old aux service jar dir:\"\n               + delPath.toString());\n           FileDeletionTask deletionTask \u003d new FileDeletionTask(\n               this.delService, null, delPath, null);\n           this.delService.delete(deletionTask);\n         }\n       }\n     }\n     LocalResourceType srcType;\n     if (type \u003d\u003d AuxServiceFile.TypeEnum.STATIC) {\n       srcType \u003d LocalResourceType.FILE;\n     } else if (type \u003d\u003d AuxServiceFile.TypeEnum.ARCHIVE) {\n       srcType \u003d LocalResourceType.ARCHIVE;\n     } else {\n       throw new YarnRuntimeException(\n           \"Cannot unpack file of type \" + type + \" from remote-file-path:\" +\n               src + \"for aux-service:\" + \".\\n\");\n     }\n     LocalResource scRsrc \u003d LocalResource.newInstance(\n         URL.fromURI(src.toUri()),\n         srcType, LocalResourceVisibility.PRIVATE,\n         scFileStatus.getLen(), scFileStatus.getModificationTime());\n     FSDownload download \u003d new FSDownload(localLFS, null, conf,\n         downloadDest, scRsrc, null);\n     try {\n       // don\u0027t need to convert downloaded path into a dir\n       // since it\u0027s already a jar path.\n       return download.call();\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(\n           \"Exception happend while downloading files \"\n               + \"for aux-service:\" + sName + \" and remote-file-path:\"\n               + src + \".\\n\" + ex.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path maybeDownloadJars(String sName, String className, String\n      remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)\n      throws IOException {\n    // load AuxiliaryService from remote classpath\n    FileContext localLFS \u003d getLocalFileContext(conf);\n    // create NM aux-service dir in NM localdir if it does not exist.\n    Path nmAuxDir \u003d dirsHandler.getLocalPathForWrite(\".\"\n        + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\n    if (!localLFS.util().exists(nmAuxDir)) {\n      try {\n        localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\n      } catch (IOException ex) {\n        throw new YarnRuntimeException(\"Fail to create dir:\"\n            + nmAuxDir.toString(), ex);\n      }\n    }\n    Path src \u003d new Path(remoteFile);\n    FileContext remoteLFS \u003d getRemoteFileContext(src.toUri(), conf);\n    FileStatus scFileStatus \u003d remoteLFS.getFileStatus(src);\n    if (!scFileStatus.getOwner().equals(\n        this.userUGI.getShortUserName())) {\n      throw new YarnRuntimeException(\"The remote jarfile owner:\"\n          + scFileStatus.getOwner() + \" is not the same as the NM user:\"\n          + this.userUGI.getShortUserName() + \".\");\n    }\n    if ((scFileStatus.getPermission().toShort() \u0026 0022) !\u003d 0) {\n      throw new YarnRuntimeException(\"The remote jarfile should not \"\n          + \"be writable by group or others. \"\n          + \"The current Permission is \"\n          + scFileStatus.getPermission().toShort());\n    }\n    Path downloadDest \u003d new Path(nmAuxDir,\n        className + \"_\" + scFileStatus.getModificationTime());\n    // check whether we need to re-download the jar\n    // from remote directory\n    Path targetDirPath \u003d new Path(downloadDest,\n        scFileStatus.getPath().getName());\n    FileStatus[] allSubDirs \u003d localLFS.util().listStatus(nmAuxDir);\n    for (FileStatus sub : allSubDirs) {\n      if (sub.getPath().getName().equals(downloadDest.getName())) {\n        return targetDirPath;\n      } else {\n        if (sub.getPath().getName().contains(className) \u0026\u0026\n            !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\n          Path delPath \u003d new Path(sub.getPath().getParent(),\n              sub.getPath().getName() + DEL_SUFFIX);\n          localLFS.rename(sub.getPath(), delPath);\n          LOG.info(\"delete old aux service jar dir:\"\n              + delPath.toString());\n          FileDeletionTask deletionTask \u003d new FileDeletionTask(\n              this.delService, null, delPath, null);\n          this.delService.delete(deletionTask);\n        }\n      }\n    }\n    LocalResourceType srcType;\n    if (type \u003d\u003d AuxServiceFile.TypeEnum.STATIC) {\n      srcType \u003d LocalResourceType.FILE;\n    } else if (type \u003d\u003d AuxServiceFile.TypeEnum.ARCHIVE) {\n      srcType \u003d LocalResourceType.ARCHIVE;\n    } else {\n      throw new YarnRuntimeException(\n          \"Cannot unpack file of type \" + type + \" from remote-file-path:\" +\n              src + \"for aux-service:\" + \".\\n\");\n    }\n    LocalResource scRsrc \u003d LocalResource.newInstance(\n        URL.fromURI(src.toUri()),\n        srcType, LocalResourceVisibility.PRIVATE,\n        scFileStatus.getLen(), scFileStatus.getModificationTime());\n    FSDownload download \u003d new FSDownload(localLFS, null, conf,\n        downloadDest, scRsrc, null);\n    try {\n      // don\u0027t need to convert downloaded path into a dir\n      // since it\u0027s already a jar path.\n      return download.call();\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(\n          \"Exception happend while downloading files \"\n              + \"for aux-service:\" + sName + \" and remote-file-path:\"\n              + src + \".\\n\" + ex.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "516377bfa6faa21f50b7e7c3889e4196c6d464b8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9965. Fix NodeManager failing to start when Hdfs Auxillary Jar is set. Contributed by Prabhu Joseph.\n",
      "commitDate": "11/11/19 2:31 AM",
      "commitName": "516377bfa6faa21f50b7e7c3889e4196c6d464b8",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 240.47,
      "commitsBetweenForRepo": 1721,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n   private Path maybeDownloadJars(String sName, String className, String\n       remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)\n       throws IOException {\n     // load AuxiliaryService from remote classpath\n     FileContext localLFS \u003d getLocalFileContext(conf);\n     // create NM aux-service dir in NM localdir if it does not exist.\n     Path nmAuxDir \u003d dirsHandler.getLocalPathForWrite(\".\"\n         + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\n     if (!localLFS.util().exists(nmAuxDir)) {\n       try {\n         localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\n       } catch (IOException ex) {\n         throw new YarnRuntimeException(\"Fail to create dir:\"\n             + nmAuxDir.toString(), ex);\n       }\n     }\n     Path src \u003d new Path(remoteFile);\n     FileContext remoteLFS \u003d getRemoteFileContext(src.toUri(), conf);\n     FileStatus scFileStatus \u003d remoteLFS.getFileStatus(src);\n     if (!scFileStatus.getOwner().equals(\n         this.userUGI.getShortUserName())) {\n       throw new YarnRuntimeException(\"The remote jarfile owner:\"\n           + scFileStatus.getOwner() + \" is not the same as the NM user:\"\n           + this.userUGI.getShortUserName() + \".\");\n     }\n     if ((scFileStatus.getPermission().toShort() \u0026 0022) !\u003d 0) {\n       throw new YarnRuntimeException(\"The remote jarfile should not \"\n           + \"be writable by group or others. \"\n           + \"The current Permission is \"\n           + scFileStatus.getPermission().toShort());\n     }\n     Path downloadDest \u003d new Path(nmAuxDir,\n         className + \"_\" + scFileStatus.getModificationTime());\n     // check whether we need to re-download the jar\n     // from remote directory\n     Path targetDirPath \u003d new Path(downloadDest,\n         scFileStatus.getPath().getName());\n     FileStatus[] allSubDirs \u003d localLFS.util().listStatus(nmAuxDir);\n     for (FileStatus sub : allSubDirs) {\n       if (sub.getPath().getName().equals(downloadDest.getName())) {\n-        return new Path(targetDirPath + Path.SEPARATOR + \"*\");\n+        return targetDirPath;\n       } else {\n         if (sub.getPath().getName().contains(className) \u0026\u0026\n             !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\n           Path delPath \u003d new Path(sub.getPath().getParent(),\n               sub.getPath().getName() + DEL_SUFFIX);\n           localLFS.rename(sub.getPath(), delPath);\n           LOG.info(\"delete old aux service jar dir:\"\n               + delPath.toString());\n           FileDeletionTask deletionTask \u003d new FileDeletionTask(\n               this.delService, null, delPath, null);\n           this.delService.delete(deletionTask);\n         }\n       }\n     }\n     LocalResourceType srcType;\n     if (type \u003d\u003d AuxServiceFile.TypeEnum.STATIC) {\n       srcType \u003d LocalResourceType.FILE;\n     } else if (type \u003d\u003d AuxServiceFile.TypeEnum.ARCHIVE) {\n       srcType \u003d LocalResourceType.ARCHIVE;\n     } else {\n       throw new YarnRuntimeException(\n           \"Cannot unpack file of type \" + type + \" from remote-file-path:\" +\n               src + \"for aux-service:\" + \".\\n\");\n     }\n     LocalResource scRsrc \u003d LocalResource.newInstance(\n         URL.fromURI(src.toUri()),\n         srcType, LocalResourceVisibility.PRIVATE,\n         scFileStatus.getLen(), scFileStatus.getModificationTime());\n     FSDownload download \u003d new FSDownload(localLFS, null, conf,\n         downloadDest, scRsrc, null);\n     try {\n       // don\u0027t need to convert downloaded path into a dir\n       // since it\u0027s already a jar path.\n       return download.call();\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(\n           \"Exception happend while downloading files \"\n               + \"for aux-service:\" + sName + \" and remote-file-path:\"\n               + src + \".\\n\" + ex.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Path maybeDownloadJars(String sName, String className, String\n      remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)\n      throws IOException {\n    // load AuxiliaryService from remote classpath\n    FileContext localLFS \u003d getLocalFileContext(conf);\n    // create NM aux-service dir in NM localdir if it does not exist.\n    Path nmAuxDir \u003d dirsHandler.getLocalPathForWrite(\".\"\n        + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\n    if (!localLFS.util().exists(nmAuxDir)) {\n      try {\n        localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\n      } catch (IOException ex) {\n        throw new YarnRuntimeException(\"Fail to create dir:\"\n            + nmAuxDir.toString(), ex);\n      }\n    }\n    Path src \u003d new Path(remoteFile);\n    FileContext remoteLFS \u003d getRemoteFileContext(src.toUri(), conf);\n    FileStatus scFileStatus \u003d remoteLFS.getFileStatus(src);\n    if (!scFileStatus.getOwner().equals(\n        this.userUGI.getShortUserName())) {\n      throw new YarnRuntimeException(\"The remote jarfile owner:\"\n          + scFileStatus.getOwner() + \" is not the same as the NM user:\"\n          + this.userUGI.getShortUserName() + \".\");\n    }\n    if ((scFileStatus.getPermission().toShort() \u0026 0022) !\u003d 0) {\n      throw new YarnRuntimeException(\"The remote jarfile should not \"\n          + \"be writable by group or others. \"\n          + \"The current Permission is \"\n          + scFileStatus.getPermission().toShort());\n    }\n    Path downloadDest \u003d new Path(nmAuxDir,\n        className + \"_\" + scFileStatus.getModificationTime());\n    // check whether we need to re-download the jar\n    // from remote directory\n    Path targetDirPath \u003d new Path(downloadDest,\n        scFileStatus.getPath().getName());\n    FileStatus[] allSubDirs \u003d localLFS.util().listStatus(nmAuxDir);\n    for (FileStatus sub : allSubDirs) {\n      if (sub.getPath().getName().equals(downloadDest.getName())) {\n        return targetDirPath;\n      } else {\n        if (sub.getPath().getName().contains(className) \u0026\u0026\n            !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\n          Path delPath \u003d new Path(sub.getPath().getParent(),\n              sub.getPath().getName() + DEL_SUFFIX);\n          localLFS.rename(sub.getPath(), delPath);\n          LOG.info(\"delete old aux service jar dir:\"\n              + delPath.toString());\n          FileDeletionTask deletionTask \u003d new FileDeletionTask(\n              this.delService, null, delPath, null);\n          this.delService.delete(deletionTask);\n        }\n      }\n    }\n    LocalResourceType srcType;\n    if (type \u003d\u003d AuxServiceFile.TypeEnum.STATIC) {\n      srcType \u003d LocalResourceType.FILE;\n    } else if (type \u003d\u003d AuxServiceFile.TypeEnum.ARCHIVE) {\n      srcType \u003d LocalResourceType.ARCHIVE;\n    } else {\n      throw new YarnRuntimeException(\n          \"Cannot unpack file of type \" + type + \" from remote-file-path:\" +\n              src + \"for aux-service:\" + \".\\n\");\n    }\n    LocalResource scRsrc \u003d LocalResource.newInstance(\n        URL.fromURI(src.toUri()),\n        srcType, LocalResourceVisibility.PRIVATE,\n        scFileStatus.getLen(), scFileStatus.getModificationTime());\n    FSDownload download \u003d new FSDownload(localLFS, null, conf,\n        downloadDest, scRsrc, null);\n    try {\n      // don\u0027t need to convert downloaded path into a dir\n      // since it\u0027s already a jar path.\n      return download.call();\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(\n          \"Exception happend while downloading files \"\n              + \"for aux-service:\" + sName + \" and remote-file-path:\"\n              + src + \".\\n\" + ex.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
      "extendedDetails": {}
    },
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "18/12/18 2:05 PM",
      "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,82 @@\n+  private Path maybeDownloadJars(String sName, String className, String\n+      remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)\n+      throws IOException {\n+    // load AuxiliaryService from remote classpath\n+    FileContext localLFS \u003d getLocalFileContext(conf);\n+    // create NM aux-service dir in NM localdir if it does not exist.\n+    Path nmAuxDir \u003d dirsHandler.getLocalPathForWrite(\".\"\n+        + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\n+    if (!localLFS.util().exists(nmAuxDir)) {\n+      try {\n+        localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\n+      } catch (IOException ex) {\n+        throw new YarnRuntimeException(\"Fail to create dir:\"\n+            + nmAuxDir.toString(), ex);\n+      }\n+    }\n+    Path src \u003d new Path(remoteFile);\n+    FileContext remoteLFS \u003d getRemoteFileContext(src.toUri(), conf);\n+    FileStatus scFileStatus \u003d remoteLFS.getFileStatus(src);\n+    if (!scFileStatus.getOwner().equals(\n+        this.userUGI.getShortUserName())) {\n+      throw new YarnRuntimeException(\"The remote jarfile owner:\"\n+          + scFileStatus.getOwner() + \" is not the same as the NM user:\"\n+          + this.userUGI.getShortUserName() + \".\");\n+    }\n+    if ((scFileStatus.getPermission().toShort() \u0026 0022) !\u003d 0) {\n+      throw new YarnRuntimeException(\"The remote jarfile should not \"\n+          + \"be writable by group or others. \"\n+          + \"The current Permission is \"\n+          + scFileStatus.getPermission().toShort());\n+    }\n+    Path downloadDest \u003d new Path(nmAuxDir,\n+        className + \"_\" + scFileStatus.getModificationTime());\n+    // check whether we need to re-download the jar\n+    // from remote directory\n+    Path targetDirPath \u003d new Path(downloadDest,\n+        scFileStatus.getPath().getName());\n+    FileStatus[] allSubDirs \u003d localLFS.util().listStatus(nmAuxDir);\n+    for (FileStatus sub : allSubDirs) {\n+      if (sub.getPath().getName().equals(downloadDest.getName())) {\n+        return new Path(targetDirPath + Path.SEPARATOR + \"*\");\n+      } else {\n+        if (sub.getPath().getName().contains(className) \u0026\u0026\n+            !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\n+          Path delPath \u003d new Path(sub.getPath().getParent(),\n+              sub.getPath().getName() + DEL_SUFFIX);\n+          localLFS.rename(sub.getPath(), delPath);\n+          LOG.info(\"delete old aux service jar dir:\"\n+              + delPath.toString());\n+          FileDeletionTask deletionTask \u003d new FileDeletionTask(\n+              this.delService, null, delPath, null);\n+          this.delService.delete(deletionTask);\n+        }\n+      }\n+    }\n+    LocalResourceType srcType;\n+    if (type \u003d\u003d AuxServiceFile.TypeEnum.STATIC) {\n+      srcType \u003d LocalResourceType.FILE;\n+    } else if (type \u003d\u003d AuxServiceFile.TypeEnum.ARCHIVE) {\n+      srcType \u003d LocalResourceType.ARCHIVE;\n+    } else {\n+      throw new YarnRuntimeException(\n+          \"Cannot unpack file of type \" + type + \" from remote-file-path:\" +\n+              src + \"for aux-service:\" + \".\\n\");\n+    }\n+    LocalResource scRsrc \u003d LocalResource.newInstance(\n+        URL.fromURI(src.toUri()),\n+        srcType, LocalResourceVisibility.PRIVATE,\n+        scFileStatus.getLen(), scFileStatus.getModificationTime());\n+    FSDownload download \u003d new FSDownload(localLFS, null, conf,\n+        downloadDest, scRsrc, null);\n+    try {\n+      // don\u0027t need to convert downloaded path into a dir\n+      // since it\u0027s already a jar path.\n+      return download.call();\n+    } catch (Exception ex) {\n+      throw new YarnRuntimeException(\n+          \"Exception happend while downloading files \"\n+              + \"for aux-service:\" + sName + \" and remote-file-path:\"\n+              + src + \".\\n\" + ex.getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Path maybeDownloadJars(String sName, String className, String\n      remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)\n      throws IOException {\n    // load AuxiliaryService from remote classpath\n    FileContext localLFS \u003d getLocalFileContext(conf);\n    // create NM aux-service dir in NM localdir if it does not exist.\n    Path nmAuxDir \u003d dirsHandler.getLocalPathForWrite(\".\"\n        + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\n    if (!localLFS.util().exists(nmAuxDir)) {\n      try {\n        localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\n      } catch (IOException ex) {\n        throw new YarnRuntimeException(\"Fail to create dir:\"\n            + nmAuxDir.toString(), ex);\n      }\n    }\n    Path src \u003d new Path(remoteFile);\n    FileContext remoteLFS \u003d getRemoteFileContext(src.toUri(), conf);\n    FileStatus scFileStatus \u003d remoteLFS.getFileStatus(src);\n    if (!scFileStatus.getOwner().equals(\n        this.userUGI.getShortUserName())) {\n      throw new YarnRuntimeException(\"The remote jarfile owner:\"\n          + scFileStatus.getOwner() + \" is not the same as the NM user:\"\n          + this.userUGI.getShortUserName() + \".\");\n    }\n    if ((scFileStatus.getPermission().toShort() \u0026 0022) !\u003d 0) {\n      throw new YarnRuntimeException(\"The remote jarfile should not \"\n          + \"be writable by group or others. \"\n          + \"The current Permission is \"\n          + scFileStatus.getPermission().toShort());\n    }\n    Path downloadDest \u003d new Path(nmAuxDir,\n        className + \"_\" + scFileStatus.getModificationTime());\n    // check whether we need to re-download the jar\n    // from remote directory\n    Path targetDirPath \u003d new Path(downloadDest,\n        scFileStatus.getPath().getName());\n    FileStatus[] allSubDirs \u003d localLFS.util().listStatus(nmAuxDir);\n    for (FileStatus sub : allSubDirs) {\n      if (sub.getPath().getName().equals(downloadDest.getName())) {\n        return new Path(targetDirPath + Path.SEPARATOR + \"*\");\n      } else {\n        if (sub.getPath().getName().contains(className) \u0026\u0026\n            !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\n          Path delPath \u003d new Path(sub.getPath().getParent(),\n              sub.getPath().getName() + DEL_SUFFIX);\n          localLFS.rename(sub.getPath(), delPath);\n          LOG.info(\"delete old aux service jar dir:\"\n              + delPath.toString());\n          FileDeletionTask deletionTask \u003d new FileDeletionTask(\n              this.delService, null, delPath, null);\n          this.delService.delete(deletionTask);\n        }\n      }\n    }\n    LocalResourceType srcType;\n    if (type \u003d\u003d AuxServiceFile.TypeEnum.STATIC) {\n      srcType \u003d LocalResourceType.FILE;\n    } else if (type \u003d\u003d AuxServiceFile.TypeEnum.ARCHIVE) {\n      srcType \u003d LocalResourceType.ARCHIVE;\n    } else {\n      throw new YarnRuntimeException(\n          \"Cannot unpack file of type \" + type + \" from remote-file-path:\" +\n              src + \"for aux-service:\" + \".\\n\");\n    }\n    LocalResource scRsrc \u003d LocalResource.newInstance(\n        URL.fromURI(src.toUri()),\n        srcType, LocalResourceVisibility.PRIVATE,\n        scFileStatus.getLen(), scFileStatus.getModificationTime());\n    FSDownload download \u003d new FSDownload(localLFS, null, conf,\n        downloadDest, scRsrc, null);\n    try {\n      // don\u0027t need to convert downloaded path into a dir\n      // since it\u0027s already a jar path.\n      return download.call();\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(\n          \"Exception happend while downloading files \"\n              + \"for aux-service:\" + sName + \" and remote-file-path:\"\n              + src + \".\\n\" + ex.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java"
    }
  }
}