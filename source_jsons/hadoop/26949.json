{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNativeFileSystemStore.java",
  "functionName": "list",
  "functionId": "list___prefix-String__delimiter-String__maxListingLength-int__priorLastKey-String",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java",
  "functionStartLine": 514,
  "functionEndLine": 596,
  "numCommitsSeen": 2,
  "timeTaken": 385,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,83 @@\n+  private PartialListing list(String prefix, String delimiter,\n+      int maxListingLength, String priorLastKey) throws IOException {\n+    LOG.debug(\"List objects. prefix: [{}], delimiter: [{}], \" +\n+            \"maxListLength: [{}], priorLastKey: [{}].\",\n+        prefix, delimiter, maxListingLength, priorLastKey);\n+\n+    if (!prefix.startsWith(CosNFileSystem.PATH_DELIMITER)) {\n+      prefix +\u003d CosNFileSystem.PATH_DELIMITER;\n+    }\n+    ListObjectsRequest listObjectsRequest \u003d new ListObjectsRequest();\n+    listObjectsRequest.setBucketName(bucketName);\n+    listObjectsRequest.setPrefix(prefix);\n+    listObjectsRequest.setDelimiter(delimiter);\n+    listObjectsRequest.setMarker(priorLastKey);\n+    listObjectsRequest.setMaxKeys(maxListingLength);\n+    ObjectListing objectListing \u003d null;\n+    try {\n+      objectListing \u003d\n+          (ObjectListing) callCOSClientWithRetry(listObjectsRequest);\n+    } catch (Exception e) {\n+      String errMsg \u003d String.format(\"prefix: [%s], delimiter: [%s], \"\n+              + \"maxListingLength: [%d], priorLastKey: [%s]. \"\n+              + \"List objects occur an exception: [%s].\", prefix,\n+          (delimiter \u003d\u003d null) ? \"\" : delimiter, maxListingLength, priorLastKey,\n+          e.toString());\n+      LOG.error(errMsg);\n+      handleException(new Exception(errMsg), prefix);\n+    }\n+    ArrayList\u003cFileMetadata\u003e fileMetadataArray \u003d new ArrayList\u003c\u003e();\n+    ArrayList\u003cFileMetadata\u003e commonPrefixArray \u003d new ArrayList\u003c\u003e();\n+\n+    if (null \u003d\u003d objectListing) {\n+      String errMsg \u003d String.format(\"List the prefix: [%s] failed. \" +\n+              \"delimiter: [%s], max listing length:\" +\n+              \" [%s], prior last key: [%s]\",\n+          prefix, delimiter, maxListingLength, priorLastKey);\n+      handleException(new Exception(errMsg), prefix);\n+    }\n+\n+    List\u003cCOSObjectSummary\u003e summaries \u003d objectListing.getObjectSummaries();\n+    for (COSObjectSummary cosObjectSummary : summaries) {\n+      String filePath \u003d cosObjectSummary.getKey();\n+      if (!filePath.startsWith(CosNFileSystem.PATH_DELIMITER)) {\n+        filePath \u003d CosNFileSystem.PATH_DELIMITER + filePath;\n+      }\n+      if (filePath.equals(prefix)) {\n+        continue;\n+      }\n+      long mtime \u003d 0;\n+      if (cosObjectSummary.getLastModified() !\u003d null) {\n+        mtime \u003d cosObjectSummary.getLastModified().getTime();\n+      }\n+      long fileLen \u003d cosObjectSummary.getSize();\n+      fileMetadataArray.add(\n+          new FileMetadata(filePath, fileLen, mtime, true));\n+    }\n+    List\u003cString\u003e commonPrefixes \u003d objectListing.getCommonPrefixes();\n+    for (String commonPrefix : commonPrefixes) {\n+      if (!commonPrefix.startsWith(CosNFileSystem.PATH_DELIMITER)) {\n+        commonPrefix \u003d CosNFileSystem.PATH_DELIMITER + commonPrefix;\n+      }\n+      commonPrefixArray.add(\n+          new FileMetadata(commonPrefix, 0, 0, false));\n+    }\n+\n+    FileMetadata[] fileMetadata \u003d new FileMetadata[fileMetadataArray.size()];\n+    for (int i \u003d 0; i \u003c fileMetadataArray.size(); ++i) {\n+      fileMetadata[i] \u003d fileMetadataArray.get(i);\n+    }\n+    FileMetadata[] commonPrefixMetaData \u003d\n+        new FileMetadata[commonPrefixArray.size()];\n+    for (int i \u003d 0; i \u003c commonPrefixArray.size(); ++i) {\n+      commonPrefixMetaData[i] \u003d commonPrefixArray.get(i);\n+    }\n+    // when truncated is false, it means that listing is finished.\n+    if (!objectListing.isTruncated()) {\n+      return new PartialListing(\n+          null, fileMetadata, commonPrefixMetaData);\n+    } else {\n+      return new PartialListing(\n+          objectListing.getNextMarker(), fileMetadata, commonPrefixMetaData);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PartialListing list(String prefix, String delimiter,\n      int maxListingLength, String priorLastKey) throws IOException {\n    LOG.debug(\"List objects. prefix: [{}], delimiter: [{}], \" +\n            \"maxListLength: [{}], priorLastKey: [{}].\",\n        prefix, delimiter, maxListingLength, priorLastKey);\n\n    if (!prefix.startsWith(CosNFileSystem.PATH_DELIMITER)) {\n      prefix +\u003d CosNFileSystem.PATH_DELIMITER;\n    }\n    ListObjectsRequest listObjectsRequest \u003d new ListObjectsRequest();\n    listObjectsRequest.setBucketName(bucketName);\n    listObjectsRequest.setPrefix(prefix);\n    listObjectsRequest.setDelimiter(delimiter);\n    listObjectsRequest.setMarker(priorLastKey);\n    listObjectsRequest.setMaxKeys(maxListingLength);\n    ObjectListing objectListing \u003d null;\n    try {\n      objectListing \u003d\n          (ObjectListing) callCOSClientWithRetry(listObjectsRequest);\n    } catch (Exception e) {\n      String errMsg \u003d String.format(\"prefix: [%s], delimiter: [%s], \"\n              + \"maxListingLength: [%d], priorLastKey: [%s]. \"\n              + \"List objects occur an exception: [%s].\", prefix,\n          (delimiter \u003d\u003d null) ? \"\" : delimiter, maxListingLength, priorLastKey,\n          e.toString());\n      LOG.error(errMsg);\n      handleException(new Exception(errMsg), prefix);\n    }\n    ArrayList\u003cFileMetadata\u003e fileMetadataArray \u003d new ArrayList\u003c\u003e();\n    ArrayList\u003cFileMetadata\u003e commonPrefixArray \u003d new ArrayList\u003c\u003e();\n\n    if (null \u003d\u003d objectListing) {\n      String errMsg \u003d String.format(\"List the prefix: [%s] failed. \" +\n              \"delimiter: [%s], max listing length:\" +\n              \" [%s], prior last key: [%s]\",\n          prefix, delimiter, maxListingLength, priorLastKey);\n      handleException(new Exception(errMsg), prefix);\n    }\n\n    List\u003cCOSObjectSummary\u003e summaries \u003d objectListing.getObjectSummaries();\n    for (COSObjectSummary cosObjectSummary : summaries) {\n      String filePath \u003d cosObjectSummary.getKey();\n      if (!filePath.startsWith(CosNFileSystem.PATH_DELIMITER)) {\n        filePath \u003d CosNFileSystem.PATH_DELIMITER + filePath;\n      }\n      if (filePath.equals(prefix)) {\n        continue;\n      }\n      long mtime \u003d 0;\n      if (cosObjectSummary.getLastModified() !\u003d null) {\n        mtime \u003d cosObjectSummary.getLastModified().getTime();\n      }\n      long fileLen \u003d cosObjectSummary.getSize();\n      fileMetadataArray.add(\n          new FileMetadata(filePath, fileLen, mtime, true));\n    }\n    List\u003cString\u003e commonPrefixes \u003d objectListing.getCommonPrefixes();\n    for (String commonPrefix : commonPrefixes) {\n      if (!commonPrefix.startsWith(CosNFileSystem.PATH_DELIMITER)) {\n        commonPrefix \u003d CosNFileSystem.PATH_DELIMITER + commonPrefix;\n      }\n      commonPrefixArray.add(\n          new FileMetadata(commonPrefix, 0, 0, false));\n    }\n\n    FileMetadata[] fileMetadata \u003d new FileMetadata[fileMetadataArray.size()];\n    for (int i \u003d 0; i \u003c fileMetadataArray.size(); ++i) {\n      fileMetadata[i] \u003d fileMetadataArray.get(i);\n    }\n    FileMetadata[] commonPrefixMetaData \u003d\n        new FileMetadata[commonPrefixArray.size()];\n    for (int i \u003d 0; i \u003c commonPrefixArray.size(); ++i) {\n      commonPrefixMetaData[i] \u003d commonPrefixArray.get(i);\n    }\n    // when truncated is false, it means that listing is finished.\n    if (!objectListing.isTruncated()) {\n      return new PartialListing(\n          null, fileMetadata, commonPrefixMetaData);\n    } else {\n      return new PartialListing(\n          objectListing.getNextMarker(), fileMetadata, commonPrefixMetaData);\n    }\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java"
    }
  }
}