{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "updateReservation",
  "functionId": "updateReservation___reservation-ReservationAllocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 382,
  "functionEndLine": 423,
  "numCommitsSeen": 19,
  "timeTaken": 1695,
  "changeHistory": [
    "1bbd023275db535ab80fcb60e022151e9679d468",
    "2798723a5443d04455b9d79c48d61f435ab52267",
    "5e10a13bb4759984494c6a870c7f08fb6693c9c0",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "1bbd023275db535ab80fcb60e022151e9679d468": "Ybodychange",
    "2798723a5443d04455b9d79c48d61f435ab52267": "Ybodychange",
    "5e10a13bb4759984494c6a870c7f08fb6693c9c0": "Ybodychange",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1bbd023275db535ab80fcb60e022151e9679d468": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5962. Spelling errors in logging and exceptions for resource manager code (gsohn via rkanter)\n",
      "commitDate": "27/12/16 1:35 PM",
      "commitName": "1bbd023275db535ab80fcb60e022151e9679d468",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "11/02/16 10:47 AM",
      "commitNameOld": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 320.12,
      "commitsBetweenForRepo": 2250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public boolean updateReservation(ReservationAllocation reservation)\n       throws PlanningException {\n     writeLock.lock();\n     boolean result \u003d false;\n     try {\n       ReservationId resId \u003d reservation.getReservationId();\n       ReservationAllocation currReservation \u003d getReservationById(resId);\n       if (currReservation \u003d\u003d null) {\n         String errMsg \u003d\n             \"The specified Reservation with ID \" + resId\n                 + \" does not exist in the plan\";\n         LOG.error(errMsg);\n         throw new IllegalArgumentException(errMsg);\n       }\n       // validate if we can accept this reservation, throws exception if\n       // validation fails\n       policy.validate(this, reservation);\n       if (!removeReservation(currReservation)) {\n         LOG.error(\"Unable to replace reservation: {} from plan.\",\n             reservation.getReservationId());\n         return result;\n       }\n       try {\n         result \u003d addReservation(reservation, false);\n       } catch (PlanningException e) {\n         LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n             reservation.getReservationId(), e.getMessage());\n       }\n       if (result) {\n-        LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n+        LOG.info(\"Successfully updated reservation: {} in plan.\",\n             reservation.getReservationId());\n         return result;\n       } else {\n         // rollback delete\n         addReservation(currReservation, false);\n         LOG.info(\"Rollbacked update reservation: {} from plan.\",\n             reservation.getReservationId());\n         return result;\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean updateReservation(ReservationAllocation reservation)\n      throws PlanningException {\n    writeLock.lock();\n    boolean result \u003d false;\n    try {\n      ReservationId resId \u003d reservation.getReservationId();\n      ReservationAllocation currReservation \u003d getReservationById(resId);\n      if (currReservation \u003d\u003d null) {\n        String errMsg \u003d\n            \"The specified Reservation with ID \" + resId\n                + \" does not exist in the plan\";\n        LOG.error(errMsg);\n        throw new IllegalArgumentException(errMsg);\n      }\n      // validate if we can accept this reservation, throws exception if\n      // validation fails\n      policy.validate(this, reservation);\n      if (!removeReservation(currReservation)) {\n        LOG.error(\"Unable to replace reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n      try {\n        result \u003d addReservation(reservation, false);\n      } catch (PlanningException e) {\n        LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n            reservation.getReservationId(), e.getMessage());\n      }\n      if (result) {\n        LOG.info(\"Successfully updated reservation: {} in plan.\",\n            reservation.getReservationId());\n        return result;\n      } else {\n        // rollback delete\n        addReservation(currReservation, false);\n        LOG.info(\"Rollbacked update reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "2798723a5443d04455b9d79c48d61f435ab52267": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3739. Add reservation system recovery to RM recovery process. Contributed by  Subru Krishnan.\n",
      "commitDate": "22/10/15 6:51 AM",
      "commitName": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthor": "Anubhav Dhoot",
      "commitDateOld": "20/10/15 4:46 PM",
      "commitNameOld": "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public boolean updateReservation(ReservationAllocation reservation)\n       throws PlanningException {\n     writeLock.lock();\n     boolean result \u003d false;\n     try {\n       ReservationId resId \u003d reservation.getReservationId();\n       ReservationAllocation currReservation \u003d getReservationById(resId);\n       if (currReservation \u003d\u003d null) {\n         String errMsg \u003d\n             \"The specified Reservation with ID \" + resId\n                 + \" does not exist in the plan\";\n         LOG.error(errMsg);\n         throw new IllegalArgumentException(errMsg);\n       }\n       // validate if we can accept this reservation, throws exception if\n       // validation fails\n       policy.validate(this, reservation);\n       if (!removeReservation(currReservation)) {\n         LOG.error(\"Unable to replace reservation: {} from plan.\",\n             reservation.getReservationId());\n         return result;\n       }\n       try {\n-        result \u003d addReservation(reservation);\n+        result \u003d addReservation(reservation, false);\n       } catch (PlanningException e) {\n         LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n             reservation.getReservationId(), e.getMessage());\n       }\n       if (result) {\n         LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n             reservation.getReservationId());\n         return result;\n       } else {\n         // rollback delete\n-        addReservation(currReservation);\n+        addReservation(currReservation, false);\n         LOG.info(\"Rollbacked update reservation: {} from plan.\",\n             reservation.getReservationId());\n         return result;\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean updateReservation(ReservationAllocation reservation)\n      throws PlanningException {\n    writeLock.lock();\n    boolean result \u003d false;\n    try {\n      ReservationId resId \u003d reservation.getReservationId();\n      ReservationAllocation currReservation \u003d getReservationById(resId);\n      if (currReservation \u003d\u003d null) {\n        String errMsg \u003d\n            \"The specified Reservation with ID \" + resId\n                + \" does not exist in the plan\";\n        LOG.error(errMsg);\n        throw new IllegalArgumentException(errMsg);\n      }\n      // validate if we can accept this reservation, throws exception if\n      // validation fails\n      policy.validate(this, reservation);\n      if (!removeReservation(currReservation)) {\n        LOG.error(\"Unable to replace reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n      try {\n        result \u003d addReservation(reservation, false);\n      } catch (PlanningException e) {\n        LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n            reservation.getReservationId(), e.getMessage());\n      }\n      if (result) {\n        LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n            reservation.getReservationId());\n        return result;\n      } else {\n        // rollback delete\n        addReservation(currReservation, false);\n        LOG.info(\"Rollbacked update reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "5e10a13bb4759984494c6a870c7f08fb6693c9c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2576. Making test patch pass in branch. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 90ac0be86b898aefec5471db4027554c8e1b310c)\n",
      "commitDate": "03/10/14 3:43 PM",
      "commitName": "5e10a13bb4759984494c6a870c7f08fb6693c9c0",
      "commitAuthor": "subru",
      "commitDateOld": "03/10/14 3:41 PM",
      "commitNameOld": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthorOld": "subru",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   public boolean updateReservation(ReservationAllocation reservation)\n       throws PlanningException {\n     writeLock.lock();\n     boolean result \u003d false;\n     try {\n       ReservationId resId \u003d reservation.getReservationId();\n       ReservationAllocation currReservation \u003d getReservationById(resId);\n       if (currReservation \u003d\u003d null) {\n         String errMsg \u003d\n             \"The specified Reservation with ID \" + resId\n                 + \" does not exist in the plan\";\n         LOG.error(errMsg);\n         throw new IllegalArgumentException(errMsg);\n       }\n+      // validate if we can accept this reservation, throws exception if\n+      // validation fails\n+      policy.validate(this, reservation);\n       if (!removeReservation(currReservation)) {\n         LOG.error(\"Unable to replace reservation: {} from plan.\",\n             reservation.getReservationId());\n         return result;\n       }\n       try {\n         result \u003d addReservation(reservation);\n       } catch (PlanningException e) {\n         LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n             reservation.getReservationId(), e.getMessage());\n       }\n       if (result) {\n         LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n             reservation.getReservationId());\n         return result;\n       } else {\n         // rollback delete\n         addReservation(currReservation);\n         LOG.info(\"Rollbacked update reservation: {} from plan.\",\n             reservation.getReservationId());\n         return result;\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean updateReservation(ReservationAllocation reservation)\n      throws PlanningException {\n    writeLock.lock();\n    boolean result \u003d false;\n    try {\n      ReservationId resId \u003d reservation.getReservationId();\n      ReservationAllocation currReservation \u003d getReservationById(resId);\n      if (currReservation \u003d\u003d null) {\n        String errMsg \u003d\n            \"The specified Reservation with ID \" + resId\n                + \" does not exist in the plan\";\n        LOG.error(errMsg);\n        throw new IllegalArgumentException(errMsg);\n      }\n      // validate if we can accept this reservation, throws exception if\n      // validation fails\n      policy.validate(this, reservation);\n      if (!removeReservation(currReservation)) {\n        LOG.error(\"Unable to replace reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n      try {\n        result \u003d addReservation(reservation);\n      } catch (PlanningException e) {\n        LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n            reservation.getReservationId(), e.getMessage());\n      }\n      if (result) {\n        LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n            reservation.getReservationId());\n        return result;\n      } else {\n        // rollback delete\n        addReservation(currReservation);\n        LOG.info(\"Rollbacked update reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,40 @@\n+  public boolean updateReservation(ReservationAllocation reservation)\n+      throws PlanningException {\n+    writeLock.lock();\n+    boolean result \u003d false;\n+    try {\n+      ReservationId resId \u003d reservation.getReservationId();\n+      ReservationAllocation currReservation \u003d getReservationById(resId);\n+      if (currReservation \u003d\u003d null) {\n+        String errMsg \u003d\n+            \"The specified Reservation with ID \" + resId\n+                + \" does not exist in the plan\";\n+        LOG.error(errMsg);\n+        throw new IllegalArgumentException(errMsg);\n+      }\n+      if (!removeReservation(currReservation)) {\n+        LOG.error(\"Unable to replace reservation: {} from plan.\",\n+            reservation.getReservationId());\n+        return result;\n+      }\n+      try {\n+        result \u003d addReservation(reservation);\n+      } catch (PlanningException e) {\n+        LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n+            reservation.getReservationId(), e.getMessage());\n+      }\n+      if (result) {\n+        LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n+            reservation.getReservationId());\n+        return result;\n+      } else {\n+        // rollback delete\n+        addReservation(currReservation);\n+        LOG.info(\"Rollbacked update reservation: {} from plan.\",\n+            reservation.getReservationId());\n+        return result;\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean updateReservation(ReservationAllocation reservation)\n      throws PlanningException {\n    writeLock.lock();\n    boolean result \u003d false;\n    try {\n      ReservationId resId \u003d reservation.getReservationId();\n      ReservationAllocation currReservation \u003d getReservationById(resId);\n      if (currReservation \u003d\u003d null) {\n        String errMsg \u003d\n            \"The specified Reservation with ID \" + resId\n                + \" does not exist in the plan\";\n        LOG.error(errMsg);\n        throw new IllegalArgumentException(errMsg);\n      }\n      if (!removeReservation(currReservation)) {\n        LOG.error(\"Unable to replace reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n      try {\n        result \u003d addReservation(reservation);\n      } catch (PlanningException e) {\n        LOG.error(\"Unable to update reservation: {} from plan due to {}.\",\n            reservation.getReservationId(), e.getMessage());\n      }\n      if (result) {\n        LOG.info(\"Sucessfully updated reservation: {} in plan.\",\n            reservation.getReservationId());\n        return result;\n      } else {\n        // rollback delete\n        addReservation(currReservation);\n        LOG.info(\"Rollbacked update reservation: {} from plan.\",\n            reservation.getReservationId());\n        return result;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}