{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionStart",
  "functionId": "actionStart___serviceName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1349,
  "functionEndLine": 1352,
  "numCommitsSeen": 56,
  "timeTaken": 4982,
  "changeHistory": [
    "69b05968974994c6e22d6562a67b9392d1700094",
    "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7",
    "27d60a16342fd39973d43b61008f54a8815a6237",
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "69b05968974994c6e22d6562a67b9392d1700094": "Ybodychange",
    "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7": "Ybodychange",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Ybodychange",
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa": "Ybodychange",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69b05968974994c6e22d6562a67b9392d1700094": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8411.  Restart stopped system service during RM start.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "13/06/18 4:05 PM",
      "commitName": "69b05968974994c6e22d6562a67b9392d1700094",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,4 @@\n   public int actionStart(String serviceName) throws YarnException, IOException {\n-    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n-    Service liveService \u003d getStatus(serviceName);\n-    if (liveService \u003d\u003d null ||\n-        !liveService.getState().equals(ServiceState.UPGRADING)) {\n-      Path appDir \u003d checkAppExistOnHdfs(serviceName);\n-      Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n-      ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n-      // see if it is actually running and bail out;\n-      verifyNoLiveAppInRM(serviceName, \"start\");\n-      ApplicationId appId \u003d submitApp(service);\n-      cachedAppInfo.put(serviceName, new AppInfo(appId, service\n-          .getKerberosPrincipal().getPrincipalName()));\n-      service.setId(appId.toString());\n-      // write app definition on to hdfs\n-      Path appJson \u003d ServiceApiUtil.writeAppDefinition(fs, appDir, service);\n-      LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n-      return 0;\n-    } else {\n-      LOG.info(\"Finalize service {} upgrade\");\n-      ApplicationReport appReport \u003d\n-          yarnClient.getApplicationReport(getAppId(serviceName));\n-      if (StringUtils.isEmpty(appReport.getHost())) {\n-        throw new YarnException(serviceName + \" AM hostname is empty\");\n-      }\n-      ClientAMProtocol proxy \u003d createAMProxy(serviceName, appReport);\n-\n-      RestartServiceRequestProto.Builder requestBuilder \u003d\n-          RestartServiceRequestProto.newBuilder();\n-      proxy.restart(requestBuilder.build());\n-      return 0;\n-    }\n+    actionStartAndGetId(serviceName);\n+    return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    actionStartAndGetId(serviceName);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8368. yarn app start cli should print applicationId. Contributed by Rohith Sharma K S\n",
      "commitDate": "30/05/18 12:37 PM",
      "commitName": "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "24/05/18 1:32 PM",
      "commitNameOld": "d9852eb5897a25323ab0302c2c0decb61d310e5e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 5.96,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   public int actionStart(String serviceName) throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     Service liveService \u003d getStatus(serviceName);\n     if (liveService \u003d\u003d null ||\n         !liveService.getState().equals(ServiceState.UPGRADING)) {\n       Path appDir \u003d checkAppExistOnHdfs(serviceName);\n       Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n       ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n       // see if it is actually running and bail out;\n       verifyNoLiveAppInRM(serviceName, \"start\");\n       ApplicationId appId \u003d submitApp(service);\n+      cachedAppInfo.put(serviceName, new AppInfo(appId, service\n+          .getKerberosPrincipal().getPrincipalName()));\n       service.setId(appId.toString());\n       // write app definition on to hdfs\n       Path appJson \u003d ServiceApiUtil.writeAppDefinition(fs, appDir, service);\n       LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n       return 0;\n     } else {\n       LOG.info(\"Finalize service {} upgrade\");\n       ApplicationReport appReport \u003d\n           yarnClient.getApplicationReport(getAppId(serviceName));\n       if (StringUtils.isEmpty(appReport.getHost())) {\n         throw new YarnException(serviceName + \" AM hostname is empty\");\n       }\n       ClientAMProtocol proxy \u003d createAMProxy(serviceName, appReport);\n \n       RestartServiceRequestProto.Builder requestBuilder \u003d\n           RestartServiceRequestProto.newBuilder();\n       proxy.restart(requestBuilder.build());\n       return 0;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Service liveService \u003d getStatus(serviceName);\n    if (liveService \u003d\u003d null ||\n        !liveService.getState().equals(ServiceState.UPGRADING)) {\n      Path appDir \u003d checkAppExistOnHdfs(serviceName);\n      Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n      ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n      // see if it is actually running and bail out;\n      verifyNoLiveAppInRM(serviceName, \"start\");\n      ApplicationId appId \u003d submitApp(service);\n      cachedAppInfo.put(serviceName, new AppInfo(appId, service\n          .getKerberosPrincipal().getPrincipalName()));\n      service.setId(appId.toString());\n      // write app definition on to hdfs\n      Path appJson \u003d ServiceApiUtil.writeAppDefinition(fs, appDir, service);\n      LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n      return 0;\n    } else {\n      LOG.info(\"Finalize service {} upgrade\");\n      ApplicationReport appReport \u003d\n          yarnClient.getApplicationReport(getAppId(serviceName));\n      if (StringUtils.isEmpty(appReport.getHost())) {\n        throw new YarnException(serviceName + \" AM hostname is empty\");\n      }\n      ClientAMProtocol proxy \u003d createAMProxy(serviceName, appReport);\n\n      RestartServiceRequestProto.Builder requestBuilder \u003d\n          RestartServiceRequestProto.newBuilder();\n      proxy.restart(requestBuilder.build());\n      return 0;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/02/18 5:48 PM",
      "commitNameOld": "17f387e3c2123010a4b2ea5f3db631d15bacab35",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 25.87,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,31 @@\n   public int actionStart(String serviceName) throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n-    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n-    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n-    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n-    // see if it is actually running and bail out;\n-    verifyNoLiveAppInRM(serviceName, \"start\");\n-    ApplicationId appId \u003d submitApp(service);\n-    service.setId(appId.toString());\n-    // write app definition on to hdfs\n-    Path appJson \u003d persistAppDef(appDir, service);\n-    LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n-    return 0;\n+    Service liveService \u003d getStatus(serviceName);\n+    if (liveService \u003d\u003d null ||\n+        !liveService.getState().equals(ServiceState.UPGRADING)) {\n+      Path appDir \u003d checkAppExistOnHdfs(serviceName);\n+      Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n+      ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n+      // see if it is actually running and bail out;\n+      verifyNoLiveAppInRM(serviceName, \"start\");\n+      ApplicationId appId \u003d submitApp(service);\n+      service.setId(appId.toString());\n+      // write app definition on to hdfs\n+      Path appJson \u003d ServiceApiUtil.writeAppDefinition(fs, appDir, service);\n+      LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n+      return 0;\n+    } else {\n+      LOG.info(\"Finalize service {} upgrade\");\n+      ApplicationReport appReport \u003d\n+          yarnClient.getApplicationReport(getAppId(serviceName));\n+      if (StringUtils.isEmpty(appReport.getHost())) {\n+        throw new YarnException(serviceName + \" AM hostname is empty\");\n+      }\n+      ClientAMProtocol proxy \u003d createAMProxy(serviceName, appReport);\n+\n+      RestartServiceRequestProto.Builder requestBuilder \u003d\n+          RestartServiceRequestProto.newBuilder();\n+      proxy.restart(requestBuilder.build());\n+      return 0;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Service liveService \u003d getStatus(serviceName);\n    if (liveService \u003d\u003d null ||\n        !liveService.getState().equals(ServiceState.UPGRADING)) {\n      Path appDir \u003d checkAppExistOnHdfs(serviceName);\n      Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n      ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n      // see if it is actually running and bail out;\n      verifyNoLiveAppInRM(serviceName, \"start\");\n      ApplicationId appId \u003d submitApp(service);\n      service.setId(appId.toString());\n      // write app definition on to hdfs\n      Path appJson \u003d ServiceApiUtil.writeAppDefinition(fs, appDir, service);\n      LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n      return 0;\n    } else {\n      LOG.info(\"Finalize service {} upgrade\");\n      ApplicationReport appReport \u003d\n          yarnClient.getApplicationReport(getAppId(serviceName));\n      if (StringUtils.isEmpty(appReport.getHost())) {\n        throw new YarnException(serviceName + \" AM hostname is empty\");\n      }\n      ClientAMProtocol proxy \u003d createAMProxy(serviceName, appReport);\n\n      RestartServiceRequestProto.Builder requestBuilder \u003d\n          RestartServiceRequestProto.newBuilder();\n      proxy.restart(requestBuilder.build());\n      return 0;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7955. Improve result of calling stop on an already stopped service. Contributed by Gour Saha\n",
      "commitDate": "28/02/18 3:01 PM",
      "commitName": "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "31/01/18 5:51 PM",
      "commitNameOld": "0bee3849e323bf71925024992f9e655aee2d75f9",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 27.88,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public int actionStart(String serviceName) throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     Path appDir \u003d checkAppExistOnHdfs(serviceName);\n     Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     // see if it is actually running and bail out;\n-    verifyNoLiveAppInRM(serviceName, \"thaw\");\n+    verifyNoLiveAppInRM(serviceName, \"start\");\n     ApplicationId appId \u003d submitApp(service);\n     service.setId(appId.toString());\n     // write app definition on to hdfs\n     Path appJson \u003d persistAppDef(appDir, service);\n     LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    // see if it is actually running and bail out;\n    verifyNoLiveAppInRM(serviceName, \"start\");\n    ApplicationId appId \u003d submitApp(service);\n    service.setId(appId.toString());\n    // write app definition on to hdfs\n    Path appJson \u003d persistAppDef(appDir, service);\n    LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,14 @@\n   public int actionStart(String serviceName) throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     Path appDir \u003d checkAppExistOnHdfs(serviceName);\n     Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     // see if it is actually running and bail out;\n     verifyNoLiveAppInRM(serviceName, \"thaw\");\n     ApplicationId appId \u003d submitApp(service);\n     service.setId(appId.toString());\n     // write app definition on to hdfs\n-    createDirAndPersistApp(appDir, service);\n+    Path appJson \u003d persistAppDef(appDir, service);\n+    LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    // see if it is actually running and bail out;\n    verifyNoLiveAppInRM(serviceName, \"thaw\");\n    ApplicationId appId \u003d submitApp(service);\n    service.setId(appId.toString());\n    // write app definition on to hdfs\n    Path appJson \u003d persistAppDef(appDir, service);\n    LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  public int actionStart(String appName) throws YarnException, IOException {\n-    validateClusterName(appName);\n-    Path appDir \u003d checkAppExistOnHdfs(appName);\n-    Application application \u003d ServiceApiUtil.loadApplication(fs, appName);\n-    ServiceApiUtil.validateAndResolveApplication(application, fs, getConfig());\n+  public int actionStart(String serviceName) throws YarnException, IOException {\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n+    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     // see if it is actually running and bail out;\n-    verifyNoLiveAppInRM(appName, \"thaw\");\n-    ApplicationId appId \u003d submitApp(application);\n-    application.setId(appId.toString());\n+    verifyNoLiveAppInRM(serviceName, \"thaw\");\n+    ApplicationId appId \u003d submitApp(service);\n+    service.setId(appId.toString());\n     // write app definition on to hdfs\n-    createDirAndPersistApp(appDir, application);\n+    createDirAndPersistApp(appDir, service);\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    // see if it is actually running and bail out;\n    verifyNoLiveAppInRM(serviceName, \"thaw\");\n    ApplicationId appId \u003d submitApp(service);\n    service.setId(appId.toString());\n    // write app definition on to hdfs\n    createDirAndPersistApp(appDir, service);\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  public int actionStart(String appName) throws YarnException, IOException {\n-    validateClusterName(appName);\n-    Path appDir \u003d checkAppExistOnHdfs(appName);\n-    Application application \u003d ServiceApiUtil.loadApplication(fs, appName);\n-    ServiceApiUtil.validateAndResolveApplication(application, fs, getConfig());\n+  public int actionStart(String serviceName) throws YarnException, IOException {\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n+    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     // see if it is actually running and bail out;\n-    verifyNoLiveAppInRM(appName, \"thaw\");\n-    ApplicationId appId \u003d submitApp(application);\n-    application.setId(appId.toString());\n+    verifyNoLiveAppInRM(serviceName, \"thaw\");\n+    ApplicationId appId \u003d submitApp(service);\n+    service.setId(appId.toString());\n     // write app definition on to hdfs\n-    createDirAndPersistApp(appDir, application);\n+    createDirAndPersistApp(appDir, service);\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    // see if it is actually running and bail out;\n    verifyNoLiveAppInRM(serviceName, \"thaw\");\n    ApplicationId appId \u003d submitApp(service);\n    service.setId(appId.toString());\n    // write app definition on to hdfs\n    createDirAndPersistApp(appDir, service);\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  public int actionStart(String appName) throws YarnException, IOException {\n-    validateClusterName(appName);\n-    Path appDir \u003d checkAppExistOnHdfs(appName);\n-    Application application \u003d ServiceApiUtil.loadApplication(fs, appName);\n-    ServiceApiUtil.validateAndResolveApplication(application, fs, getConfig());\n+  public int actionStart(String serviceName) throws YarnException, IOException {\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n+    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     // see if it is actually running and bail out;\n-    verifyNoLiveAppInRM(appName, \"thaw\");\n-    ApplicationId appId \u003d submitApp(application);\n-    application.setId(appId.toString());\n+    verifyNoLiveAppInRM(serviceName, \"thaw\");\n+    ApplicationId appId \u003d submitApp(service);\n+    service.setId(appId.toString());\n     // write app definition on to hdfs\n-    createDirAndPersistApp(appDir, application);\n+    createDirAndPersistApp(appDir, service);\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStart(String serviceName) throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Path appDir \u003d checkAppExistOnHdfs(serviceName);\n    Service service \u003d ServiceApiUtil.loadService(fs, serviceName);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    // see if it is actually running and bail out;\n    verifyNoLiveAppInRM(serviceName, \"thaw\");\n    ApplicationId appId \u003d submitApp(service);\n    service.setId(appId.toString());\n    // write app definition on to hdfs\n    createDirAndPersistApp(appDir, service);\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String]",
            "newValue": "[serviceName-String]"
          }
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,13 @@\n+  public int actionStart(String appName) throws YarnException, IOException {\n+    validateClusterName(appName);\n+    Path appDir \u003d checkAppExistOnHdfs(appName);\n+    Application application \u003d ServiceApiUtil.loadApplication(fs, appName);\n+    ServiceApiUtil.validateAndResolveApplication(application, fs, getConfig());\n+    // see if it is actually running and bail out;\n+    verifyNoLiveAppInRM(appName, \"thaw\");\n+    ApplicationId appId \u003d submitApp(application);\n+    application.setId(appId.toString());\n+    // write app definition on to hdfs\n+    createDirAndPersistApp(appDir, application);\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStart(String appName) throws YarnException, IOException {\n    validateClusterName(appName);\n    Path appDir \u003d checkAppExistOnHdfs(appName);\n    Application application \u003d ServiceApiUtil.loadApplication(fs, appName);\n    ServiceApiUtil.validateAndResolveApplication(application, fs, getConfig());\n    // see if it is actually running and bail out;\n    verifyNoLiveAppInRM(appName, \"thaw\");\n    ApplicationId appId \u003d submitApp(application);\n    application.setId(appId.toString());\n    // write app definition on to hdfs\n    createDirAndPersistApp(appDir, application);\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}