{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeProxiesClient.java",
  "functionName": "createHAProxy",
  "functionId": "createHAProxy___conf-Configuration__nameNodeUri-URI__xface-Class__T____failoverProxyProvider-AbstractNNFailoverProxyProvider__T__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
  "functionStartLine": 320,
  "functionEndLine": 342,
  "numCommitsSeen": 8,
  "timeTaken": 1514,
  "changeHistory": [
    "73b94d789969354bb9a6872d99976763ca8470d7",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90"
  ],
  "changeHistoryShort": {
    "73b94d789969354bb9a6872d99976763ca8470d7": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Yexceptionschange",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": "Yintroduced"
  },
  "changeHistoryDetails": {
    "73b94d789969354bb9a6872d99976763ca8470d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9364. Unnecessary DNS resolution attempts when creating NameNodeProxies. Contributed by Xiao Chen.\n\nChange-Id: I9e42f724f27924cf73891425a832de37ce014a1e\n",
      "commitDate": "10/11/15 9:55 AM",
      "commitName": "73b94d789969354bb9a6872d99976763ca8470d7",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 37.97,
      "commitsBetweenForRepo": 315,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createHAProxy(\n       Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface,\n       AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider) {\n     Preconditions.checkNotNull(failoverProxyProvider);\n     // HA case\n     DfsClientConf config \u003d new DfsClientConf(conf);\n     T proxy \u003d (T) RetryProxy.create(xface, failoverProxyProvider,\n         RetryPolicies.failoverOnNetworkException(\n             RetryPolicies.TRY_ONCE_THEN_FAIL, config.getMaxFailoverAttempts(),\n             config.getMaxRetryAttempts(), config.getFailoverSleepBaseMillis(),\n             config.getFailoverSleepMaxMillis()));\n \n     Text dtService;\n     if (failoverProxyProvider.useLogicalURI()) {\n       dtService \u003d HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,\n           HdfsConstants.HDFS_URI_SCHEME);\n     } else {\n       dtService \u003d SecurityUtil.buildTokenService(\n           DFSUtilClient.getNNAddress(nameNodeUri));\n     }\n     return new ProxyAndInfo\u003c\u003e(proxy, dtService,\n-        DFSUtilClient.getNNAddress(nameNodeUri));\n+        DFSUtilClient.getNNAddressCheckLogical(conf, nameNodeUri));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createHAProxy(\n      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface,\n      AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider) {\n    Preconditions.checkNotNull(failoverProxyProvider);\n    // HA case\n    DfsClientConf config \u003d new DfsClientConf(conf);\n    T proxy \u003d (T) RetryProxy.create(xface, failoverProxyProvider,\n        RetryPolicies.failoverOnNetworkException(\n            RetryPolicies.TRY_ONCE_THEN_FAIL, config.getMaxFailoverAttempts(),\n            config.getMaxRetryAttempts(), config.getFailoverSleepBaseMillis(),\n            config.getFailoverSleepMaxMillis()));\n\n    Text dtService;\n    if (failoverProxyProvider.useLogicalURI()) {\n      dtService \u003d HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,\n          HdfsConstants.HDFS_URI_SCHEME);\n    } else {\n      dtService \u003d SecurityUtil.buildTokenService(\n          DFSUtilClient.getNNAddress(nameNodeUri));\n    }\n    return new ProxyAndInfo\u003c\u003e(proxy, dtService,\n        DFSUtilClient.getNNAddressCheckLogical(conf, nameNodeUri));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/09/15 8:52 PM",
      "commitNameOld": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 10.62,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createHAProxy(\n       Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface,\n-      AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider)\n-      throws IOException {\n+      AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider) {\n     Preconditions.checkNotNull(failoverProxyProvider);\n     // HA case\n     DfsClientConf config \u003d new DfsClientConf(conf);\n     T proxy \u003d (T) RetryProxy.create(xface, failoverProxyProvider,\n         RetryPolicies.failoverOnNetworkException(\n             RetryPolicies.TRY_ONCE_THEN_FAIL, config.getMaxFailoverAttempts(),\n             config.getMaxRetryAttempts(), config.getFailoverSleepBaseMillis(),\n             config.getFailoverSleepMaxMillis()));\n \n     Text dtService;\n     if (failoverProxyProvider.useLogicalURI()) {\n       dtService \u003d HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,\n           HdfsConstants.HDFS_URI_SCHEME);\n     } else {\n       dtService \u003d SecurityUtil.buildTokenService(\n           DFSUtilClient.getNNAddress(nameNodeUri));\n     }\n     return new ProxyAndInfo\u003c\u003e(proxy, dtService,\n         DFSUtilClient.getNNAddress(nameNodeUri));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createHAProxy(\n      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface,\n      AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider) {\n    Preconditions.checkNotNull(failoverProxyProvider);\n    // HA case\n    DfsClientConf config \u003d new DfsClientConf(conf);\n    T proxy \u003d (T) RetryProxy.create(xface, failoverProxyProvider,\n        RetryPolicies.failoverOnNetworkException(\n            RetryPolicies.TRY_ONCE_THEN_FAIL, config.getMaxFailoverAttempts(),\n            config.getMaxRetryAttempts(), config.getFailoverSleepBaseMillis(),\n            config.getFailoverSleepMaxMillis()));\n\n    Text dtService;\n    if (failoverProxyProvider.useLogicalURI()) {\n      dtService \u003d HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,\n          HdfsConstants.HDFS_URI_SCHEME);\n    } else {\n      dtService \u003d SecurityUtil.buildTokenService(\n          DFSUtilClient.getNNAddress(nameNodeUri));\n    }\n    return new ProxyAndInfo\u003c\u003e(proxy, dtService,\n        DFSUtilClient.getNNAddress(nameNodeUri));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[]"
      }
    },
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
      "commitDate": "22/09/15 8:52 PM",
      "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,24 @@\n+  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createHAProxy(\n+      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface,\n+      AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider)\n+      throws IOException {\n+    Preconditions.checkNotNull(failoverProxyProvider);\n+    // HA case\n+    DfsClientConf config \u003d new DfsClientConf(conf);\n+    T proxy \u003d (T) RetryProxy.create(xface, failoverProxyProvider,\n+        RetryPolicies.failoverOnNetworkException(\n+            RetryPolicies.TRY_ONCE_THEN_FAIL, config.getMaxFailoverAttempts(),\n+            config.getMaxRetryAttempts(), config.getFailoverSleepBaseMillis(),\n+            config.getFailoverSleepMaxMillis()));\n+\n+    Text dtService;\n+    if (failoverProxyProvider.useLogicalURI()) {\n+      dtService \u003d HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,\n+          HdfsConstants.HDFS_URI_SCHEME);\n+    } else {\n+      dtService \u003d SecurityUtil.buildTokenService(\n+          DFSUtilClient.getNNAddress(nameNodeUri));\n+    }\n+    return new ProxyAndInfo\u003c\u003e(proxy, dtService,\n+        DFSUtilClient.getNNAddress(nameNodeUri));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createHAProxy(\n      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface,\n      AbstractNNFailoverProxyProvider\u003cT\u003e failoverProxyProvider)\n      throws IOException {\n    Preconditions.checkNotNull(failoverProxyProvider);\n    // HA case\n    DfsClientConf config \u003d new DfsClientConf(conf);\n    T proxy \u003d (T) RetryProxy.create(xface, failoverProxyProvider,\n        RetryPolicies.failoverOnNetworkException(\n            RetryPolicies.TRY_ONCE_THEN_FAIL, config.getMaxFailoverAttempts(),\n            config.getMaxRetryAttempts(), config.getFailoverSleepBaseMillis(),\n            config.getFailoverSleepMaxMillis()));\n\n    Text dtService;\n    if (failoverProxyProvider.useLogicalURI()) {\n      dtService \u003d HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,\n          HdfsConstants.HDFS_URI_SCHEME);\n    } else {\n      dtService \u003d SecurityUtil.buildTokenService(\n          DFSUtilClient.getNNAddress(nameNodeUri));\n    }\n    return new ProxyAndInfo\u003c\u003e(proxy, dtService,\n        DFSUtilClient.getNNAddress(nameNodeUri));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java"
    }
  }
}