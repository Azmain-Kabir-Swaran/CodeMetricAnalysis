{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "accept",
  "functionId": "accept___cluster-Resource__request-ResourceCommitRequest__FiCaSchedulerApp,FiCaSchedulerNode__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1206,
  "functionEndLine": 1248,
  "numCommitsSeen": 176,
  "timeTaken": 4892,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c",
    "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c": "Ybodychange",
    "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,43 @@\n   public boolean accept(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n         request.getFirstAllocatedOrReservedContainer();\n     SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n         allocation.getAllocatedOrReservedContainer();\n \n     // Do not check limits when allocation from a reserved container\n     if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n       readLock.lock();\n       try {\n         FiCaSchedulerApp app \u003d\n             schedulerContainer.getSchedulerApplicationAttempt();\n         String username \u003d app.getUser();\n         String p \u003d schedulerContainer.getNodePartition();\n \n         // check user-limit\n         Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n             allocation.getSchedulingMode(), null);\n \n         // Deduct resources that we can release\n         User user \u003d getUser(username);\n         if (user \u003d\u003d null) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"User \" + username + \" has been removed!\");\n-          }\n+          LOG.debug(\"User {} has been removed!\", username);\n           return false;\n         }\n         Resource usedResource \u003d Resources.clone(user.getUsed(p));\n         Resources.subtractFrom(usedResource,\n             request.getTotalReleasedResource());\n \n         if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n             userLimit)) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n-                + userLimit);\n-          }\n+          LOG.debug(\"Used resource\u003d{} exceeded user-limit\u003d{}\",\n+              usedResource, userLimit);\n           return false;\n         }\n       } finally {\n         readLock.unlock();\n       }\n     }\n \n     return super.accept(cluster, request);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean accept(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n        request.getFirstAllocatedOrReservedContainer();\n    SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n        allocation.getAllocatedOrReservedContainer();\n\n    // Do not check limits when allocation from a reserved container\n    if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n      readLock.lock();\n      try {\n        FiCaSchedulerApp app \u003d\n            schedulerContainer.getSchedulerApplicationAttempt();\n        String username \u003d app.getUser();\n        String p \u003d schedulerContainer.getNodePartition();\n\n        // check user-limit\n        Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n            allocation.getSchedulingMode(), null);\n\n        // Deduct resources that we can release\n        User user \u003d getUser(username);\n        if (user \u003d\u003d null) {\n          LOG.debug(\"User {} has been removed!\", username);\n          return false;\n        }\n        Resource usedResource \u003d Resources.clone(user.getUsed(p));\n        Resources.subtractFrom(usedResource,\n            request.getTotalReleasedResource());\n\n        if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n            userLimit)) {\n          LOG.debug(\"Used resource\u003d{} exceeded user-limit\u003d{}\",\n              usedResource, userLimit);\n          return false;\n        }\n      } finally {\n        readLock.unlock();\n      }\n    }\n\n    return super.accept(cluster, request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public boolean accept(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n         request.getFirstAllocatedOrReservedContainer();\n     SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n         allocation.getAllocatedOrReservedContainer();\n \n     // Do not check limits when allocation from a reserved container\n     if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n+      readLock.lock();\n       try {\n-        readLock.lock();\n         FiCaSchedulerApp app \u003d\n             schedulerContainer.getSchedulerApplicationAttempt();\n         String username \u003d app.getUser();\n         String p \u003d schedulerContainer.getNodePartition();\n \n         // check user-limit\n         Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n             allocation.getSchedulingMode(), null);\n \n         // Deduct resources that we can release\n         User user \u003d getUser(username);\n         if (user \u003d\u003d null) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"User \" + username + \" has been removed!\");\n           }\n           return false;\n         }\n         Resource usedResource \u003d Resources.clone(user.getUsed(p));\n         Resources.subtractFrom(usedResource,\n             request.getTotalReleasedResource());\n \n         if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n             userLimit)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                 + userLimit);\n           }\n           return false;\n         }\n       } finally {\n         readLock.unlock();\n       }\n     }\n \n     return super.accept(cluster, request);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean accept(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n        request.getFirstAllocatedOrReservedContainer();\n    SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n        allocation.getAllocatedOrReservedContainer();\n\n    // Do not check limits when allocation from a reserved container\n    if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n      readLock.lock();\n      try {\n        FiCaSchedulerApp app \u003d\n            schedulerContainer.getSchedulerApplicationAttempt();\n        String username \u003d app.getUser();\n        String p \u003d schedulerContainer.getNodePartition();\n\n        // check user-limit\n        Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n            allocation.getSchedulingMode(), null);\n\n        // Deduct resources that we can release\n        User user \u003d getUser(username);\n        if (user \u003d\u003d null) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"User \" + username + \" has been removed!\");\n          }\n          return false;\n        }\n        Resource usedResource \u003d Resources.clone(user.getUsed(p));\n        Resources.subtractFrom(usedResource,\n            request.getTotalReleasedResource());\n\n        if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n            userLimit)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                + userLimit);\n          }\n          return false;\n        }\n      } finally {\n        readLock.unlock();\n      }\n    }\n\n    return super.accept(cluster, request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7591. NPE in async-scheduling mode of CapacityScheduler. (Tao Yang via wangda)\n\nChange-Id: I46689e530550ee0a6ac7a29786aab2cc1bdf314f\n",
      "commitDate": "08/12/17 3:17 PM",
      "commitName": "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "08/12/17 3:10 PM",
      "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,47 @@\n   public boolean accept(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n         request.getFirstAllocatedOrReservedContainer();\n     SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n         allocation.getAllocatedOrReservedContainer();\n \n     // Do not check limits when allocation from a reserved container\n     if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n       try {\n         readLock.lock();\n         FiCaSchedulerApp app \u003d\n             schedulerContainer.getSchedulerApplicationAttempt();\n         String username \u003d app.getUser();\n         String p \u003d schedulerContainer.getNodePartition();\n \n         // check user-limit\n         Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n             allocation.getSchedulingMode(), null);\n \n         // Deduct resources that we can release\n-        Resource usedResource \u003d Resources.clone(getUser(username).getUsed(p));\n+        User user \u003d getUser(username);\n+        if (user \u003d\u003d null) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"User \" + username + \" has been removed!\");\n+          }\n+          return false;\n+        }\n+        Resource usedResource \u003d Resources.clone(user.getUsed(p));\n         Resources.subtractFrom(usedResource,\n             request.getTotalReleasedResource());\n \n         if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n             userLimit)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                 + userLimit);\n           }\n           return false;\n         }\n       } finally {\n         readLock.unlock();\n       }\n     }\n \n     return super.accept(cluster, request);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean accept(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n        request.getFirstAllocatedOrReservedContainer();\n    SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n        allocation.getAllocatedOrReservedContainer();\n\n    // Do not check limits when allocation from a reserved container\n    if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n      try {\n        readLock.lock();\n        FiCaSchedulerApp app \u003d\n            schedulerContainer.getSchedulerApplicationAttempt();\n        String username \u003d app.getUser();\n        String p \u003d schedulerContainer.getNodePartition();\n\n        // check user-limit\n        Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n            allocation.getSchedulingMode(), null);\n\n        // Deduct resources that we can release\n        User user \u003d getUser(username);\n        if (user \u003d\u003d null) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"User \" + username + \" has been removed!\");\n          }\n          return false;\n        }\n        Resource usedResource \u003d Resources.clone(user.getUsed(p));\n        Resources.subtractFrom(usedResource,\n            request.getTotalReleasedResource());\n\n        if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n            userLimit)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                + userLimit);\n          }\n          return false;\n        }\n      } finally {\n        readLock.unlock();\n      }\n    }\n\n    return super.accept(cluster, request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6775. CapacityScheduler: Improvements to assignContainers, avoid unnecessary canAssignToUser/Queue calls. (Nathan Roberts via wangda)\n\nChange-Id: I84ccd54200ccbaae23018ef320028e42b4c3509a\n",
      "commitDate": "13/07/17 10:30 AM",
      "commitName": "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "22/06/17 11:50 PM",
      "commitNameOld": "ca13b224b2feb9c44de861da9cbba8dd2a12cb35",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 20.44,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public boolean accept(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n         request.getFirstAllocatedOrReservedContainer();\n     SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n         allocation.getAllocatedOrReservedContainer();\n \n     // Do not check limits when allocation from a reserved container\n     if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n       try {\n         readLock.lock();\n         FiCaSchedulerApp app \u003d\n             schedulerContainer.getSchedulerApplicationAttempt();\n         String username \u003d app.getUser();\n         String p \u003d schedulerContainer.getNodePartition();\n \n         // check user-limit\n         Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n-            allocation.getSchedulingMode());\n+            allocation.getSchedulingMode(), null);\n \n         // Deduct resources that we can release\n         Resource usedResource \u003d Resources.clone(getUser(username).getUsed(p));\n         Resources.subtractFrom(usedResource,\n             request.getTotalReleasedResource());\n \n         if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n             userLimit)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                 + userLimit);\n           }\n           return false;\n         }\n       } finally {\n         readLock.unlock();\n       }\n     }\n \n     return super.accept(cluster, request);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean accept(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n        request.getFirstAllocatedOrReservedContainer();\n    SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n        allocation.getAllocatedOrReservedContainer();\n\n    // Do not check limits when allocation from a reserved container\n    if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n      try {\n        readLock.lock();\n        FiCaSchedulerApp app \u003d\n            schedulerContainer.getSchedulerApplicationAttempt();\n        String username \u003d app.getUser();\n        String p \u003d schedulerContainer.getNodePartition();\n\n        // check user-limit\n        Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n            allocation.getSchedulingMode(), null);\n\n        // Deduct resources that we can release\n        Resource usedResource \u003d Resources.clone(getUser(username).getUsed(p));\n        Resources.subtractFrom(usedResource,\n            request.getTotalReleasedResource());\n\n        if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n            userLimit)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                + userLimit);\n          }\n          return false;\n        }\n      } finally {\n        readLock.unlock();\n      }\n    }\n\n    return super.accept(cluster, request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,40 @@\n+  public boolean accept(Resource cluster,\n+      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n+    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n+        request.getFirstAllocatedOrReservedContainer();\n+    SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n+        allocation.getAllocatedOrReservedContainer();\n+\n+    // Do not check limits when allocation from a reserved container\n+    if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n+      try {\n+        readLock.lock();\n+        FiCaSchedulerApp app \u003d\n+            schedulerContainer.getSchedulerApplicationAttempt();\n+        String username \u003d app.getUser();\n+        String p \u003d schedulerContainer.getNodePartition();\n+\n+        // check user-limit\n+        Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n+            allocation.getSchedulingMode());\n+\n+        // Deduct resources that we can release\n+        Resource usedResource \u003d Resources.clone(getUser(username).getUsed(p));\n+        Resources.subtractFrom(usedResource,\n+            request.getTotalReleasedResource());\n+\n+        if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n+            userLimit)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n+                + userLimit);\n+          }\n+          return false;\n+        }\n+      } finally {\n+        readLock.unlock();\n+      }\n+    }\n+\n+    return super.accept(cluster, request);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean accept(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocation \u003d\n        request.getFirstAllocatedOrReservedContainer();\n    SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer \u003d\n        allocation.getAllocatedOrReservedContainer();\n\n    // Do not check limits when allocation from a reserved container\n    if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n      try {\n        readLock.lock();\n        FiCaSchedulerApp app \u003d\n            schedulerContainer.getSchedulerApplicationAttempt();\n        String username \u003d app.getUser();\n        String p \u003d schedulerContainer.getNodePartition();\n\n        // check user-limit\n        Resource userLimit \u003d computeUserLimitAndSetHeadroom(app, cluster, p,\n            allocation.getSchedulingMode());\n\n        // Deduct resources that we can release\n        Resource usedResource \u003d Resources.clone(getUser(username).getUsed(p));\n        Resources.subtractFrom(usedResource,\n            request.getTotalReleasedResource());\n\n        if (Resources.greaterThan(resourceCalculator, cluster, usedResource,\n            userLimit)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Used resource\u003d\" + usedResource + \" exceeded user-limit\u003d\"\n                + userLimit);\n          }\n          return false;\n        }\n      } finally {\n        readLock.unlock();\n      }\n    }\n\n    return super.accept(cluster, request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}