{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExceptionHandler.java",
  "functionName": "exceptionCaught",
  "functionId": "exceptionCaught___cause-Throwable",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/webhdfs/ExceptionHandler.java",
  "functionStartLine": 48,
  "functionEndLine": 93,
  "numCommitsSeen": 6,
  "timeTaken": 1535,
  "changeHistory": [
    "c2356cb0bc3a0ad7d15c03fc63591608bfd5cbe9",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4"
  ],
  "changeHistoryShort": {
    "c2356cb0bc3a0ad7d15c03fc63591608bfd5cbe9": "Ybodychange",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2356cb0bc3a0ad7d15c03fc63591608bfd5cbe9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8490. Typo in trace enabled log in ExceptionHandler of WebHDFS. Contributed by Archana T.\n",
      "commitDate": "31/05/15 8:41 AM",
      "commitName": "c2356cb0bc3a0ad7d15c03fc63591608bfd5cbe9",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/05/15 10:30 PM",
      "commitNameOld": "ada233b7cd7db39e609bb57e487fee8cec59cd48",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.42,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   static DefaultFullHttpResponse exceptionCaught(Throwable cause) {\n     Exception e \u003d cause instanceof Exception ? (Exception) cause : new Exception(cause);\n \n     if (LOG.isTraceEnabled()) {\n-      LOG.trace(\"GOT EXCEPITION\", e);\n+      LOG.trace(\"GOT EXCEPTION\", e);\n     }\n \n     //Convert exception\n     if (e instanceof ParamException) {\n       final ParamException paramexception \u003d (ParamException)e;\n       e \u003d new IllegalArgumentException(\"Invalid value for webhdfs parameter \\\"\"\n                                          + paramexception.getParameterName() + \"\\\": \"\n                                          + e.getCause().getMessage(), e);\n     } else if (e instanceof ContainerException || e instanceof SecurityException) {\n       e \u003d toCause(e);\n     } else if (e instanceof RemoteException) {\n       e \u003d ((RemoteException)e).unwrapRemoteException();\n     }\n \n     //Map response status\n     final HttpResponseStatus s;\n     if (e instanceof SecurityException) {\n       s \u003d FORBIDDEN;\n     } else if (e instanceof AuthorizationException) {\n       s \u003d FORBIDDEN;\n     } else if (e instanceof FileNotFoundException) {\n       s \u003d NOT_FOUND;\n     } else if (e instanceof IOException) {\n       s \u003d FORBIDDEN;\n     } else if (e instanceof UnsupportedOperationException) {\n       s \u003d BAD_REQUEST;\n     } else if (e instanceof IllegalArgumentException) {\n       s \u003d BAD_REQUEST;\n     } else {\n       LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n       s \u003d INTERNAL_SERVER_ERROR;\n     }\n \n     final byte[] js \u003d JsonUtil.toJsonString(e).getBytes(Charsets.UTF_8);\n     DefaultFullHttpResponse resp \u003d\n       new DefaultFullHttpResponse(HTTP_1_1, s, Unpooled.wrappedBuffer(js));\n \n     resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n     resp.headers().set(CONTENT_LENGTH, js.length);\n     return resp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DefaultFullHttpResponse exceptionCaught(Throwable cause) {\n    Exception e \u003d cause instanceof Exception ? (Exception) cause : new Exception(cause);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPTION\", e);\n    }\n\n    //Convert exception\n    if (e instanceof ParamException) {\n      final ParamException paramexception \u003d (ParamException)e;\n      e \u003d new IllegalArgumentException(\"Invalid value for webhdfs parameter \\\"\"\n                                         + paramexception.getParameterName() + \"\\\": \"\n                                         + e.getCause().getMessage(), e);\n    } else if (e instanceof ContainerException || e instanceof SecurityException) {\n      e \u003d toCause(e);\n    } else if (e instanceof RemoteException) {\n      e \u003d ((RemoteException)e).unwrapRemoteException();\n    }\n\n    //Map response status\n    final HttpResponseStatus s;\n    if (e instanceof SecurityException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d INTERNAL_SERVER_ERROR;\n    }\n\n    final byte[] js \u003d JsonUtil.toJsonString(e).getBytes(Charsets.UTF_8);\n    DefaultFullHttpResponse resp \u003d\n      new DefaultFullHttpResponse(HTTP_1_1, s, Unpooled.wrappedBuffer(js));\n\n    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n    resp.headers().set(CONTENT_LENGTH, js.length);\n    return resp;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/webhdfs/ExceptionHandler.java",
      "extendedDetails": {}
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 11:42 AM",
      "commitNameOld": "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.04,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   static DefaultFullHttpResponse exceptionCaught(Throwable cause) {\n     Exception e \u003d cause instanceof Exception ? (Exception) cause : new Exception(cause);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"GOT EXCEPITION\", e);\n     }\n \n     //Convert exception\n     if (e instanceof ParamException) {\n       final ParamException paramexception \u003d (ParamException)e;\n       e \u003d new IllegalArgumentException(\"Invalid value for webhdfs parameter \\\"\"\n                                          + paramexception.getParameterName() + \"\\\": \"\n                                          + e.getCause().getMessage(), e);\n     } else if (e instanceof ContainerException || e instanceof SecurityException) {\n       e \u003d toCause(e);\n     } else if (e instanceof RemoteException) {\n       e \u003d ((RemoteException)e).unwrapRemoteException();\n     }\n \n     //Map response status\n     final HttpResponseStatus s;\n     if (e instanceof SecurityException) {\n       s \u003d FORBIDDEN;\n     } else if (e instanceof AuthorizationException) {\n       s \u003d FORBIDDEN;\n     } else if (e instanceof FileNotFoundException) {\n       s \u003d NOT_FOUND;\n     } else if (e instanceof IOException) {\n       s \u003d FORBIDDEN;\n     } else if (e instanceof UnsupportedOperationException) {\n       s \u003d BAD_REQUEST;\n     } else if (e instanceof IllegalArgumentException) {\n       s \u003d BAD_REQUEST;\n     } else {\n       LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n       s \u003d INTERNAL_SERVER_ERROR;\n     }\n \n-    final byte[] js \u003d JsonUtil.toJsonString(e).getBytes();\n+    final byte[] js \u003d JsonUtil.toJsonString(e).getBytes(Charsets.UTF_8);\n     DefaultFullHttpResponse resp \u003d\n       new DefaultFullHttpResponse(HTTP_1_1, s, Unpooled.wrappedBuffer(js));\n \n-    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON);\n+    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n     resp.headers().set(CONTENT_LENGTH, js.length);\n     return resp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DefaultFullHttpResponse exceptionCaught(Throwable cause) {\n    Exception e \u003d cause instanceof Exception ? (Exception) cause : new Exception(cause);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n\n    //Convert exception\n    if (e instanceof ParamException) {\n      final ParamException paramexception \u003d (ParamException)e;\n      e \u003d new IllegalArgumentException(\"Invalid value for webhdfs parameter \\\"\"\n                                         + paramexception.getParameterName() + \"\\\": \"\n                                         + e.getCause().getMessage(), e);\n    } else if (e instanceof ContainerException || e instanceof SecurityException) {\n      e \u003d toCause(e);\n    } else if (e instanceof RemoteException) {\n      e \u003d ((RemoteException)e).unwrapRemoteException();\n    }\n\n    //Map response status\n    final HttpResponseStatus s;\n    if (e instanceof SecurityException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d INTERNAL_SERVER_ERROR;\n    }\n\n    final byte[] js \u003d JsonUtil.toJsonString(e).getBytes(Charsets.UTF_8);\n    DefaultFullHttpResponse resp \u003d\n      new DefaultFullHttpResponse(HTTP_1_1, s, Unpooled.wrappedBuffer(js));\n\n    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n    resp.headers().set(CONTENT_LENGTH, js.length);\n    return resp;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/webhdfs/ExceptionHandler.java",
      "extendedDetails": {}
    },
    "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7279. Use netty to implement DatanodeWebHdfsMethods. Contributed by Haohui Mai.\n",
      "commitDate": "17/11/14 11:42 AM",
      "commitName": "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,46 @@\n+  static DefaultFullHttpResponse exceptionCaught(Throwable cause) {\n+    Exception e \u003d cause instanceof Exception ? (Exception) cause : new Exception(cause);\n+\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"GOT EXCEPITION\", e);\n+    }\n+\n+    //Convert exception\n+    if (e instanceof ParamException) {\n+      final ParamException paramexception \u003d (ParamException)e;\n+      e \u003d new IllegalArgumentException(\"Invalid value for webhdfs parameter \\\"\"\n+                                         + paramexception.getParameterName() + \"\\\": \"\n+                                         + e.getCause().getMessage(), e);\n+    } else if (e instanceof ContainerException || e instanceof SecurityException) {\n+      e \u003d toCause(e);\n+    } else if (e instanceof RemoteException) {\n+      e \u003d ((RemoteException)e).unwrapRemoteException();\n+    }\n+\n+    //Map response status\n+    final HttpResponseStatus s;\n+    if (e instanceof SecurityException) {\n+      s \u003d FORBIDDEN;\n+    } else if (e instanceof AuthorizationException) {\n+      s \u003d FORBIDDEN;\n+    } else if (e instanceof FileNotFoundException) {\n+      s \u003d NOT_FOUND;\n+    } else if (e instanceof IOException) {\n+      s \u003d FORBIDDEN;\n+    } else if (e instanceof UnsupportedOperationException) {\n+      s \u003d BAD_REQUEST;\n+    } else if (e instanceof IllegalArgumentException) {\n+      s \u003d BAD_REQUEST;\n+    } else {\n+      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n+      s \u003d INTERNAL_SERVER_ERROR;\n+    }\n+\n+    final byte[] js \u003d JsonUtil.toJsonString(e).getBytes();\n+    DefaultFullHttpResponse resp \u003d\n+      new DefaultFullHttpResponse(HTTP_1_1, s, Unpooled.wrappedBuffer(js));\n+\n+    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON);\n+    resp.headers().set(CONTENT_LENGTH, js.length);\n+    return resp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static DefaultFullHttpResponse exceptionCaught(Throwable cause) {\n    Exception e \u003d cause instanceof Exception ? (Exception) cause : new Exception(cause);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n\n    //Convert exception\n    if (e instanceof ParamException) {\n      final ParamException paramexception \u003d (ParamException)e;\n      e \u003d new IllegalArgumentException(\"Invalid value for webhdfs parameter \\\"\"\n                                         + paramexception.getParameterName() + \"\\\": \"\n                                         + e.getCause().getMessage(), e);\n    } else if (e instanceof ContainerException || e instanceof SecurityException) {\n      e \u003d toCause(e);\n    } else if (e instanceof RemoteException) {\n      e \u003d ((RemoteException)e).unwrapRemoteException();\n    }\n\n    //Map response status\n    final HttpResponseStatus s;\n    if (e instanceof SecurityException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d FORBIDDEN;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d INTERNAL_SERVER_ERROR;\n    }\n\n    final byte[] js \u003d JsonUtil.toJsonString(e).getBytes();\n    DefaultFullHttpResponse resp \u003d\n      new DefaultFullHttpResponse(HTTP_1_1, s, Unpooled.wrappedBuffer(js));\n\n    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON);\n    resp.headers().set(CONTENT_LENGTH, js.length);\n    return resp;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/webhdfs/ExceptionHandler.java"
    }
  }
}