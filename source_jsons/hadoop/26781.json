{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobEndNotifier.java",
  "functionName": "notify",
  "functionId": "notify___jobReport-JobReport",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/JobEndNotifier.java",
  "functionStartLine": 154,
  "functionEndLine": 189,
  "numCommitsSeen": 11,
  "timeTaken": 1363,
  "changeHistory": [
    "6ed54f3439ea9c7af6bf129ebe1938380febb5e2",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "6288dfa873364d1bb735bdb811002f0080e9a1be"
  ],
  "changeHistoryShort": {
    "6ed54f3439ea9c7af6bf129ebe1938380febb5e2": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "6288dfa873364d1bb735bdb811002f0080e9a1be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ed54f3439ea9c7af6bf129ebe1938380febb5e2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6895. Job end notification not send due to YarnRuntimeException. Contributed by yunjiong zhao.\n",
      "commitDate": "13/06/17 3:21 PM",
      "commitName": "6ed54f3439ea9c7af6bf129ebe1938380febb5e2",
      "commitAuthor": "Junping Du",
      "commitDateOld": "27/10/16 4:09 PM",
      "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 228.97,
      "commitsBetweenForRepo": 1289,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,36 @@\n   public void notify(JobReport jobReport)\n     throws InterruptedException {\n-    // Do we need job-end notification?\n-    if (userUrl \u003d\u003d null) {\n-      Log.getLog().info(\"Job end notification URL not set, skipping.\");\n-      return;\n-    }\n \n     //Do string replacements for jobId and jobStatus\n     if (userUrl.contains(JOB_ID)) {\n       userUrl \u003d userUrl.replace(JOB_ID, jobReport.getJobId().toString());\n     }\n     if (userUrl.contains(JOB_STATUS)) {\n       userUrl \u003d userUrl.replace(JOB_STATUS, jobReport.getJobState().toString());\n     }\n \n     // Create the URL, ensure sanity\n     try {\n       urlToNotify \u003d new URL(userUrl);\n     } catch (MalformedURLException mue) {\n       Log.getLog().warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n       return;\n     }\n \n     // Send notification\n     boolean success \u003d false;\n     while (numTries-- \u003e 0 \u0026\u0026 !success) {\n       Log.getLog().info(\"Job end notification attempts left \" + numTries);\n       success \u003d notifyURLOnce();\n       if (!success) {\n         Thread.sleep(waitInterval);\n       }\n     }\n     if (!success) {\n       Log.getLog().warn(\"Job end notification failed to notify : \"\n           + urlToNotify);\n     } else {\n       Log.getLog().info(\"Job end notification succeeded for \"\n           + jobReport.getJobId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void notify(JobReport jobReport)\n    throws InterruptedException {\n\n    //Do string replacements for jobId and jobStatus\n    if (userUrl.contains(JOB_ID)) {\n      userUrl \u003d userUrl.replace(JOB_ID, jobReport.getJobId().toString());\n    }\n    if (userUrl.contains(JOB_STATUS)) {\n      userUrl \u003d userUrl.replace(JOB_STATUS, jobReport.getJobState().toString());\n    }\n\n    // Create the URL, ensure sanity\n    try {\n      urlToNotify \u003d new URL(userUrl);\n    } catch (MalformedURLException mue) {\n      Log.getLog().warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n      return;\n    }\n\n    // Send notification\n    boolean success \u003d false;\n    while (numTries-- \u003e 0 \u0026\u0026 !success) {\n      Log.getLog().info(\"Job end notification attempts left \" + numTries);\n      success \u003d notifyURLOnce();\n      if (!success) {\n        Thread.sleep(waitInterval);\n      }\n    }\n    if (!success) {\n      Log.getLog().warn(\"Job end notification failed to notify : \"\n          + urlToNotify);\n    } else {\n      Log.getLog().info(\"Job end notification succeeded for \"\n          + jobReport.getJobId());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/JobEndNotifier.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "03/03/15 1:06 AM",
      "commitNameOld": "9ae7f9eb7baeb244e1b95aabc93ad8124870b9a9",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 604.59,
      "commitsBetweenForRepo": 4588,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void notify(JobReport jobReport)\n     throws InterruptedException {\n     // Do we need job-end notification?\n     if (userUrl \u003d\u003d null) {\n-      Log.info(\"Job end notification URL not set, skipping.\");\n+      Log.getLog().info(\"Job end notification URL not set, skipping.\");\n       return;\n     }\n \n     //Do string replacements for jobId and jobStatus\n     if (userUrl.contains(JOB_ID)) {\n       userUrl \u003d userUrl.replace(JOB_ID, jobReport.getJobId().toString());\n     }\n     if (userUrl.contains(JOB_STATUS)) {\n       userUrl \u003d userUrl.replace(JOB_STATUS, jobReport.getJobState().toString());\n     }\n \n     // Create the URL, ensure sanity\n     try {\n       urlToNotify \u003d new URL(userUrl);\n     } catch (MalformedURLException mue) {\n-      Log.warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n+      Log.getLog().warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n       return;\n     }\n \n     // Send notification\n     boolean success \u003d false;\n     while (numTries-- \u003e 0 \u0026\u0026 !success) {\n-      Log.info(\"Job end notification attempts left \" + numTries);\n+      Log.getLog().info(\"Job end notification attempts left \" + numTries);\n       success \u003d notifyURLOnce();\n       if (!success) {\n         Thread.sleep(waitInterval);\n       }\n     }\n     if (!success) {\n-      Log.warn(\"Job end notification failed to notify : \" + urlToNotify);\n+      Log.getLog().warn(\"Job end notification failed to notify : \"\n+          + urlToNotify);\n     } else {\n-      Log.info(\"Job end notification succeeded for \" + jobReport.getJobId());\n+      Log.getLog().info(\"Job end notification succeeded for \"\n+          + jobReport.getJobId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void notify(JobReport jobReport)\n    throws InterruptedException {\n    // Do we need job-end notification?\n    if (userUrl \u003d\u003d null) {\n      Log.getLog().info(\"Job end notification URL not set, skipping.\");\n      return;\n    }\n\n    //Do string replacements for jobId and jobStatus\n    if (userUrl.contains(JOB_ID)) {\n      userUrl \u003d userUrl.replace(JOB_ID, jobReport.getJobId().toString());\n    }\n    if (userUrl.contains(JOB_STATUS)) {\n      userUrl \u003d userUrl.replace(JOB_STATUS, jobReport.getJobState().toString());\n    }\n\n    // Create the URL, ensure sanity\n    try {\n      urlToNotify \u003d new URL(userUrl);\n    } catch (MalformedURLException mue) {\n      Log.getLog().warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n      return;\n    }\n\n    // Send notification\n    boolean success \u003d false;\n    while (numTries-- \u003e 0 \u0026\u0026 !success) {\n      Log.getLog().info(\"Job end notification attempts left \" + numTries);\n      success \u003d notifyURLOnce();\n      if (!success) {\n        Thread.sleep(waitInterval);\n      }\n    }\n    if (!success) {\n      Log.getLog().warn(\"Job end notification failed to notify : \"\n          + urlToNotify);\n    } else {\n      Log.getLog().info(\"Job end notification succeeded for \"\n          + jobReport.getJobId());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/JobEndNotifier.java",
      "extendedDetails": {}
    },
    "6288dfa873364d1bb735bdb811002f0080e9a1be": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3028. Added job-end notification support. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188377 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 2:02 PM",
      "commitName": "6288dfa873364d1bb735bdb811002f0080e9a1be",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,39 @@\n+  public void notify(JobReport jobReport)\n+    throws InterruptedException {\n+    // Do we need job-end notification?\n+    if (userUrl \u003d\u003d null) {\n+      Log.info(\"Job end notification URL not set, skipping.\");\n+      return;\n+    }\n+\n+    //Do string replacements for jobId and jobStatus\n+    if (userUrl.contains(JOB_ID)) {\n+      userUrl \u003d userUrl.replace(JOB_ID, jobReport.getJobId().toString());\n+    }\n+    if (userUrl.contains(JOB_STATUS)) {\n+      userUrl \u003d userUrl.replace(JOB_STATUS, jobReport.getJobState().toString());\n+    }\n+\n+    // Create the URL, ensure sanity\n+    try {\n+      urlToNotify \u003d new URL(userUrl);\n+    } catch (MalformedURLException mue) {\n+      Log.warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n+      return;\n+    }\n+\n+    // Send notification\n+    boolean success \u003d false;\n+    while (numTries-- \u003e 0 \u0026\u0026 !success) {\n+      Log.info(\"Job end notification attempts left \" + numTries);\n+      success \u003d notifyURLOnce();\n+      if (!success) {\n+        Thread.sleep(waitInterval);\n+      }\n+    }\n+    if (!success) {\n+      Log.warn(\"Job end notification failed to notify : \" + urlToNotify);\n+    } else {\n+      Log.info(\"Job end notification succeeded for \" + jobReport.getJobId());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void notify(JobReport jobReport)\n    throws InterruptedException {\n    // Do we need job-end notification?\n    if (userUrl \u003d\u003d null) {\n      Log.info(\"Job end notification URL not set, skipping.\");\n      return;\n    }\n\n    //Do string replacements for jobId and jobStatus\n    if (userUrl.contains(JOB_ID)) {\n      userUrl \u003d userUrl.replace(JOB_ID, jobReport.getJobId().toString());\n    }\n    if (userUrl.contains(JOB_STATUS)) {\n      userUrl \u003d userUrl.replace(JOB_STATUS, jobReport.getJobState().toString());\n    }\n\n    // Create the URL, ensure sanity\n    try {\n      urlToNotify \u003d new URL(userUrl);\n    } catch (MalformedURLException mue) {\n      Log.warn(\"Job end notification couldn\u0027t parse \" + userUrl, mue);\n      return;\n    }\n\n    // Send notification\n    boolean success \u003d false;\n    while (numTries-- \u003e 0 \u0026\u0026 !success) {\n      Log.info(\"Job end notification attempts left \" + numTries);\n      success \u003d notifyURLOnce();\n      if (!success) {\n        Thread.sleep(waitInterval);\n      }\n    }\n    if (!success) {\n      Log.warn(\"Job end notification failed to notify : \" + urlToNotify);\n    } else {\n      Log.info(\"Job end notification succeeded for \" + jobReport.getJobId());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/JobEndNotifier.java"
    }
  }
}