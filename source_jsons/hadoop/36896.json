{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerPage.java",
  "functionName": "renderQueueCapacityInfo",
  "functionId": "renderQueueCapacityInfo___ri-ResponseInfo__label-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
  "functionStartLine": 138,
  "functionEndLine": 192,
  "numCommitsSeen": 73,
  "timeTaken": 5045,
  "changeHistory": [
    "3b38f2019e4f8d056580f3ed67ecef591011d7a6",
    "0c75d0634bcbdc29e804035b3b84ae6a38d6a110",
    "4db4a4a165d3936d59f5e67947c6bfbc9c3270a5",
    "d52627a7cbddfd981db973e223aefffde1ebf82d",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "b08ecf5c7589b055e93b2907413213f36097724d",
    "4337b263aa23464a01c316336db2319e2858a2b3",
    "0e85044e26da698c45185585310ae0e99448cd80"
  ],
  "changeHistoryShort": {
    "3b38f2019e4f8d056580f3ed67ecef591011d7a6": "Ybodychange",
    "0c75d0634bcbdc29e804035b3b84ae6a38d6a110": "Ybodychange",
    "4db4a4a165d3936d59f5e67947c6bfbc9c3270a5": "Ybodychange",
    "d52627a7cbddfd981db973e223aefffde1ebf82d": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "b08ecf5c7589b055e93b2907413213f36097724d": "Ybodychange",
    "4337b263aa23464a01c316336db2319e2858a2b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "0e85044e26da698c45185585310ae0e99448cd80": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3b38f2019e4f8d056580f3ed67ecef591011d7a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9685: NPE when rendering the info table of leaf queue in non-accessible partitions. Contributed by Tao Yang.\n",
      "commitDate": "08/08/19 5:37 AM",
      "commitName": "3b38f2019e4f8d056580f3ed67ecef591011d7a6",
      "commitAuthor": "Eric E Payne",
      "commitDateOld": "19/02/18 12:06 PM",
      "commitNameOld": "949721508467968d5f46170353716ad04349cd6f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 534.69,
      "commitsBetweenForRepo": 4640,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n     private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n       PartitionQueueCapacitiesInfo capacities \u003d\n           lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n       PartitionResourcesInfo resourceUsages \u003d\n           lqinfo.getResources().getPartitionResourceUsageInfo(label);\n \n       // Get UserInfo from first user to calculate AM Resource Limit per user.\n       ResourceInfo userAMResourceLimit \u003d null;\n       ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n       if (!usersList.isEmpty()) {\n         userAMResourceLimit \u003d resourceUsages.getUserAmLimit();\n       }\n       // If no users are present or if AM limit per user doesn\u0027t exist, retrieve\n       // AM Limit for that queue.\n       if (userAMResourceLimit \u003d\u003d null) {\n         userAMResourceLimit \u003d resourceUsages.getAMLimit();\n       }\n       ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n           ? new ResourceInfo(Resources.none())\n           : resourceUsages.getAmUsed();\n       ri.\n           __(\"Used Capacity:\",\n-              appendPercent(resourceUsages.getUsed().toString(),\n+              appendPercent(resourceUsages.getUsed(),\n                   capacities.getUsedCapacity() / 100))\n           .__(\"Configured Capacity:\",\n-              capacities.getConfiguredMinResource().toString())\n+              capacities.getConfiguredMinResource() \u003d\u003d null ?\n+                  Resources.none().toString() :\n+                  capacities.getConfiguredMinResource().toString())\n           .__(\"Configured Max Capacity:\",\n               (capacities.getConfiguredMaxResource() \u003d\u003d null\n                   || capacities.getConfiguredMaxResource().getResource()\n                       .equals(Resources.none()))\n                           ? \"unlimited\"\n                           : capacities.getConfiguredMaxResource().toString())\n           .__(\"Effective Capacity:\",\n-              appendPercent(capacities.getEffectiveMinResource().toString(),\n+              appendPercent(capacities.getEffectiveMinResource(),\n                   capacities.getCapacity() / 100))\n           .__(\"Effective Max Capacity:\",\n-              appendPercent(capacities.getEffectiveMaxResource().toString(),\n+              appendPercent(capacities.getEffectiveMaxResource(),\n                   capacities.getMaxCapacity() / 100))\n           .__(\"Absolute Used Capacity:\",\n               percent(capacities.getAbsoluteUsedCapacity() / 100))\n           .__(\"Absolute Configured Capacity:\",\n               percent(capacities.getAbsoluteCapacity() / 100))\n           .__(\"Absolute Configured Max Capacity:\",\n               percent(capacities.getAbsoluteMaxCapacity() / 100))\n           .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n           .__(\"Configured Max Application Master Limit:\",\n               StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n           .__(\"Max Application Master Resources:\",\n               resourceUsages.getAMLimit().toString())\n           .__(\"Used Application Master Resources:\", amUsed.toString())\n           .__(\"Max Application Master Resources Per User:\",\n               userAMResourceLimit.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourcesInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n\n      // Get UserInfo from first user to calculate AM Resource Limit per user.\n      ResourceInfo userAMResourceLimit \u003d null;\n      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n      if (!usersList.isEmpty()) {\n        userAMResourceLimit \u003d resourceUsages.getUserAmLimit();\n      }\n      // If no users are present or if AM limit per user doesn\u0027t exist, retrieve\n      // AM Limit for that queue.\n      if (userAMResourceLimit \u003d\u003d null) {\n        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n      }\n      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n          ? new ResourceInfo(Resources.none())\n          : resourceUsages.getAmUsed();\n      ri.\n          __(\"Used Capacity:\",\n              appendPercent(resourceUsages.getUsed(),\n                  capacities.getUsedCapacity() / 100))\n          .__(\"Configured Capacity:\",\n              capacities.getConfiguredMinResource() \u003d\u003d null ?\n                  Resources.none().toString() :\n                  capacities.getConfiguredMinResource().toString())\n          .__(\"Configured Max Capacity:\",\n              (capacities.getConfiguredMaxResource() \u003d\u003d null\n                  || capacities.getConfiguredMaxResource().getResource()\n                      .equals(Resources.none()))\n                          ? \"unlimited\"\n                          : capacities.getConfiguredMaxResource().toString())\n          .__(\"Effective Capacity:\",\n              appendPercent(capacities.getEffectiveMinResource(),\n                  capacities.getCapacity() / 100))\n          .__(\"Effective Max Capacity:\",\n              appendPercent(capacities.getEffectiveMaxResource(),\n                  capacities.getMaxCapacity() / 100))\n          .__(\"Absolute Used Capacity:\",\n              percent(capacities.getAbsoluteUsedCapacity() / 100))\n          .__(\"Absolute Configured Capacity:\",\n              percent(capacities.getAbsoluteCapacity() / 100))\n          .__(\"Absolute Configured Max Capacity:\",\n              percent(capacities.getAbsoluteMaxCapacity() / 100))\n          .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n          .__(\"Configured Max Application Master Limit:\",\n              StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n          .__(\"Max Application Master Resources:\",\n              resourceUsages.getAMLimit().toString())\n          .__(\"Used Application Master Resources:\", amUsed.toString())\n          .__(\"Max Application Master Resources Per User:\",\n              userAMResourceLimit.toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
      "extendedDetails": {}
    },
    "0c75d0634bcbdc29e804035b3b84ae6a38d6a110": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7619. Max AM Resource value in Capacity Scheduler UI has to be refreshed for every user. Contributed by Eric Payne.\n",
      "commitDate": "05/01/18 1:12 AM",
      "commitName": "0c75d0634bcbdc29e804035b3b84ae6a38d6a110",
      "commitAuthor": "Sunil G",
      "commitDateOld": "08/12/17 3:10 PM",
      "commitNameOld": "f548bfffbdcd426811352d6920ee5fe50cd0182c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 27.42,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n     private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n       PartitionQueueCapacitiesInfo capacities \u003d\n           lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n       PartitionResourcesInfo resourceUsages \u003d\n           lqinfo.getResources().getPartitionResourceUsageInfo(label);\n \n       // Get UserInfo from first user to calculate AM Resource Limit per user.\n       ResourceInfo userAMResourceLimit \u003d null;\n       ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n-      if (usersList.isEmpty()) {\n-        // If no users are present, consider AM Limit for that queue.\n+      if (!usersList.isEmpty()) {\n+        userAMResourceLimit \u003d resourceUsages.getUserAmLimit();\n+      }\n+      // If no users are present or if AM limit per user doesn\u0027t exist, retrieve\n+      // AM Limit for that queue.\n+      if (userAMResourceLimit \u003d\u003d null) {\n         userAMResourceLimit \u003d resourceUsages.getAMLimit();\n-      } else {\n-        userAMResourceLimit \u003d usersList.get(0)\n-            .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n-            .getAMLimit();\n       }\n       ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n           ? new ResourceInfo(Resources.none())\n           : resourceUsages.getAmUsed();\n       ri.\n           __(\"Used Capacity:\",\n               appendPercent(resourceUsages.getUsed().toString(),\n                   capacities.getUsedCapacity() / 100))\n           .__(\"Configured Capacity:\",\n               capacities.getConfiguredMinResource().toString())\n           .__(\"Configured Max Capacity:\",\n               (capacities.getConfiguredMaxResource() \u003d\u003d null\n                   || capacities.getConfiguredMaxResource().getResource()\n                       .equals(Resources.none()))\n                           ? \"unlimited\"\n                           : capacities.getConfiguredMaxResource().toString())\n           .__(\"Effective Capacity:\",\n               appendPercent(capacities.getEffectiveMinResource().toString(),\n                   capacities.getCapacity() / 100))\n           .__(\"Effective Max Capacity:\",\n               appendPercent(capacities.getEffectiveMaxResource().toString(),\n                   capacities.getMaxCapacity() / 100))\n           .__(\"Absolute Used Capacity:\",\n               percent(capacities.getAbsoluteUsedCapacity() / 100))\n           .__(\"Absolute Configured Capacity:\",\n               percent(capacities.getAbsoluteCapacity() / 100))\n           .__(\"Absolute Configured Max Capacity:\",\n               percent(capacities.getAbsoluteMaxCapacity() / 100))\n           .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n           .__(\"Configured Max Application Master Limit:\",\n               StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n           .__(\"Max Application Master Resources:\",\n               resourceUsages.getAMLimit().toString())\n           .__(\"Used Application Master Resources:\", amUsed.toString())\n           .__(\"Max Application Master Resources Per User:\",\n               userAMResourceLimit.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourcesInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n\n      // Get UserInfo from first user to calculate AM Resource Limit per user.\n      ResourceInfo userAMResourceLimit \u003d null;\n      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n      if (!usersList.isEmpty()) {\n        userAMResourceLimit \u003d resourceUsages.getUserAmLimit();\n      }\n      // If no users are present or if AM limit per user doesn\u0027t exist, retrieve\n      // AM Limit for that queue.\n      if (userAMResourceLimit \u003d\u003d null) {\n        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n      }\n      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n          ? new ResourceInfo(Resources.none())\n          : resourceUsages.getAmUsed();\n      ri.\n          __(\"Used Capacity:\",\n              appendPercent(resourceUsages.getUsed().toString(),\n                  capacities.getUsedCapacity() / 100))\n          .__(\"Configured Capacity:\",\n              capacities.getConfiguredMinResource().toString())\n          .__(\"Configured Max Capacity:\",\n              (capacities.getConfiguredMaxResource() \u003d\u003d null\n                  || capacities.getConfiguredMaxResource().getResource()\n                      .equals(Resources.none()))\n                          ? \"unlimited\"\n                          : capacities.getConfiguredMaxResource().toString())\n          .__(\"Effective Capacity:\",\n              appendPercent(capacities.getEffectiveMinResource().toString(),\n                  capacities.getCapacity() / 100))\n          .__(\"Effective Max Capacity:\",\n              appendPercent(capacities.getEffectiveMaxResource().toString(),\n                  capacities.getMaxCapacity() / 100))\n          .__(\"Absolute Used Capacity:\",\n              percent(capacities.getAbsoluteUsedCapacity() / 100))\n          .__(\"Absolute Configured Capacity:\",\n              percent(capacities.getAbsoluteCapacity() / 100))\n          .__(\"Absolute Configured Max Capacity:\",\n              percent(capacities.getAbsoluteMaxCapacity() / 100))\n          .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n          .__(\"Configured Max Application Master Limit:\",\n              StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n          .__(\"Max Application Master Resources:\",\n              resourceUsages.getAMLimit().toString())\n          .__(\"Used Application Master Resources:\", amUsed.toString())\n          .__(\"Max Application Master Resources Per User:\",\n              userAMResourceLimit.toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
      "extendedDetails": {}
    },
    "4db4a4a165d3936d59f5e67947c6bfbc9c3270a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7575. NPE in scheduler UI when max-capacity is not configured. Contributed by Sunil G.\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "4db4a4a165d3936d59f5e67947c6bfbc9c3270a5",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "d52627a7cbddfd981db973e223aefffde1ebf82d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n     private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n       PartitionQueueCapacitiesInfo capacities \u003d\n           lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n       PartitionResourcesInfo resourceUsages \u003d\n           lqinfo.getResources().getPartitionResourceUsageInfo(label);\n \n       // Get UserInfo from first user to calculate AM Resource Limit per user.\n       ResourceInfo userAMResourceLimit \u003d null;\n       ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n       if (usersList.isEmpty()) {\n         // If no users are present, consider AM Limit for that queue.\n         userAMResourceLimit \u003d resourceUsages.getAMLimit();\n       } else {\n         userAMResourceLimit \u003d usersList.get(0)\n             .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n             .getAMLimit();\n       }\n       ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n           ? new ResourceInfo(Resources.none())\n           : resourceUsages.getAmUsed();\n       ri.\n           __(\"Used Capacity:\",\n               appendPercent(resourceUsages.getUsed().toString(),\n                   capacities.getUsedCapacity() / 100))\n           .__(\"Configured Capacity:\",\n               capacities.getConfiguredMinResource().toString())\n           .__(\"Configured Max Capacity:\",\n-              capacities.getConfiguredMaxResource().getResource()\n-                  .equals(Resources.none())\n-                      ? \"unlimited\"\n-                      : capacities.getConfiguredMaxResource().toString())\n+              (capacities.getConfiguredMaxResource() \u003d\u003d null\n+                  || capacities.getConfiguredMaxResource().getResource()\n+                      .equals(Resources.none()))\n+                          ? \"unlimited\"\n+                          : capacities.getConfiguredMaxResource().toString())\n           .__(\"Effective Capacity:\",\n               appendPercent(capacities.getEffectiveMinResource().toString(),\n                   capacities.getCapacity() / 100))\n           .__(\"Effective Max Capacity:\",\n               appendPercent(capacities.getEffectiveMaxResource().toString(),\n                   capacities.getMaxCapacity() / 100))\n           .__(\"Absolute Used Capacity:\",\n               percent(capacities.getAbsoluteUsedCapacity() / 100))\n           .__(\"Absolute Configured Capacity:\",\n               percent(capacities.getAbsoluteCapacity() / 100))\n           .__(\"Absolute Configured Max Capacity:\",\n               percent(capacities.getAbsoluteMaxCapacity() / 100))\n           .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n           .__(\"Configured Max Application Master Limit:\",\n               StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n           .__(\"Max Application Master Resources:\",\n               resourceUsages.getAMLimit().toString())\n           .__(\"Used Application Master Resources:\", amUsed.toString())\n           .__(\"Max Application Master Resources Per User:\",\n               userAMResourceLimit.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourcesInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n\n      // Get UserInfo from first user to calculate AM Resource Limit per user.\n      ResourceInfo userAMResourceLimit \u003d null;\n      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n      if (usersList.isEmpty()) {\n        // If no users are present, consider AM Limit for that queue.\n        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n      } else {\n        userAMResourceLimit \u003d usersList.get(0)\n            .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n            .getAMLimit();\n      }\n      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n          ? new ResourceInfo(Resources.none())\n          : resourceUsages.getAmUsed();\n      ri.\n          __(\"Used Capacity:\",\n              appendPercent(resourceUsages.getUsed().toString(),\n                  capacities.getUsedCapacity() / 100))\n          .__(\"Configured Capacity:\",\n              capacities.getConfiguredMinResource().toString())\n          .__(\"Configured Max Capacity:\",\n              (capacities.getConfiguredMaxResource() \u003d\u003d null\n                  || capacities.getConfiguredMaxResource().getResource()\n                      .equals(Resources.none()))\n                          ? \"unlimited\"\n                          : capacities.getConfiguredMaxResource().toString())\n          .__(\"Effective Capacity:\",\n              appendPercent(capacities.getEffectiveMinResource().toString(),\n                  capacities.getCapacity() / 100))\n          .__(\"Effective Max Capacity:\",\n              appendPercent(capacities.getEffectiveMaxResource().toString(),\n                  capacities.getMaxCapacity() / 100))\n          .__(\"Absolute Used Capacity:\",\n              percent(capacities.getAbsoluteUsedCapacity() / 100))\n          .__(\"Absolute Configured Capacity:\",\n              percent(capacities.getAbsoluteCapacity() / 100))\n          .__(\"Absolute Configured Max Capacity:\",\n              percent(capacities.getAbsoluteMaxCapacity() / 100))\n          .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n          .__(\"Configured Max Application Master Limit:\",\n              StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n          .__(\"Max Application Master Resources:\",\n              resourceUsages.getAMLimit().toString())\n          .__(\"Used Application Master Resources:\", amUsed.toString())\n          .__(\"Max Application Master Resources Per User:\",\n              userAMResourceLimit.toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
      "extendedDetails": {}
    },
    "d52627a7cbddfd981db973e223aefffde1ebf82d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7254. UI and metrics changes related to absolute resource configuration. (Sunil G via wangda)\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "d52627a7cbddfd981db973e223aefffde1ebf82d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 2:09 AM",
      "commitNameOld": "8137254a1f4367974bf1883f1982e31ab2865107",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 59.74,
      "commitsBetweenForRepo": 457,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,52 @@\n     private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n       PartitionQueueCapacitiesInfo capacities \u003d\n           lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n       PartitionResourcesInfo resourceUsages \u003d\n           lqinfo.getResources().getPartitionResourceUsageInfo(label);\n \n       // Get UserInfo from first user to calculate AM Resource Limit per user.\n       ResourceInfo userAMResourceLimit \u003d null;\n       ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n       if (usersList.isEmpty()) {\n         // If no users are present, consider AM Limit for that queue.\n         userAMResourceLimit \u003d resourceUsages.getAMLimit();\n       } else {\n         userAMResourceLimit \u003d usersList.get(0)\n             .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n             .getAMLimit();\n       }\n       ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n           ? new ResourceInfo(Resources.none())\n           : resourceUsages.getAmUsed();\n       ri.\n-          __(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n-          __(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n-          __(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n-          __(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n-          __(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n-          __(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n-          __(\"Used Resources:\", resourceUsages.getUsed().toString()).\n-          __(\"Configured Max Application Master Limit:\", StringUtils.format(\"%.1f\",\n-          capacities.getMaxAMLimitPercentage())).\n-          __(\"Max Application Master Resources:\",\n-          resourceUsages.getAMLimit().toString()).\n-          __(\"Used Application Master Resources:\",\n-          amUsed.toString()).\n-          __(\"Max Application Master Resources Per User:\",\n-          userAMResourceLimit.toString());\n+          __(\"Used Capacity:\",\n+              appendPercent(resourceUsages.getUsed().toString(),\n+                  capacities.getUsedCapacity() / 100))\n+          .__(\"Configured Capacity:\",\n+              capacities.getConfiguredMinResource().toString())\n+          .__(\"Configured Max Capacity:\",\n+              capacities.getConfiguredMaxResource().getResource()\n+                  .equals(Resources.none())\n+                      ? \"unlimited\"\n+                      : capacities.getConfiguredMaxResource().toString())\n+          .__(\"Effective Capacity:\",\n+              appendPercent(capacities.getEffectiveMinResource().toString(),\n+                  capacities.getCapacity() / 100))\n+          .__(\"Effective Max Capacity:\",\n+              appendPercent(capacities.getEffectiveMaxResource().toString(),\n+                  capacities.getMaxCapacity() / 100))\n+          .__(\"Absolute Used Capacity:\",\n+              percent(capacities.getAbsoluteUsedCapacity() / 100))\n+          .__(\"Absolute Configured Capacity:\",\n+              percent(capacities.getAbsoluteCapacity() / 100))\n+          .__(\"Absolute Configured Max Capacity:\",\n+              percent(capacities.getAbsoluteMaxCapacity() / 100))\n+          .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n+          .__(\"Configured Max Application Master Limit:\",\n+              StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n+          .__(\"Max Application Master Resources:\",\n+              resourceUsages.getAMLimit().toString())\n+          .__(\"Used Application Master Resources:\", amUsed.toString())\n+          .__(\"Max Application Master Resources Per User:\",\n+              userAMResourceLimit.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourcesInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n\n      // Get UserInfo from first user to calculate AM Resource Limit per user.\n      ResourceInfo userAMResourceLimit \u003d null;\n      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n      if (usersList.isEmpty()) {\n        // If no users are present, consider AM Limit for that queue.\n        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n      } else {\n        userAMResourceLimit \u003d usersList.get(0)\n            .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n            .getAMLimit();\n      }\n      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n          ? new ResourceInfo(Resources.none())\n          : resourceUsages.getAmUsed();\n      ri.\n          __(\"Used Capacity:\",\n              appendPercent(resourceUsages.getUsed().toString(),\n                  capacities.getUsedCapacity() / 100))\n          .__(\"Configured Capacity:\",\n              capacities.getConfiguredMinResource().toString())\n          .__(\"Configured Max Capacity:\",\n              capacities.getConfiguredMaxResource().getResource()\n                  .equals(Resources.none())\n                      ? \"unlimited\"\n                      : capacities.getConfiguredMaxResource().toString())\n          .__(\"Effective Capacity:\",\n              appendPercent(capacities.getEffectiveMinResource().toString(),\n                  capacities.getCapacity() / 100))\n          .__(\"Effective Max Capacity:\",\n              appendPercent(capacities.getEffectiveMaxResource().toString(),\n                  capacities.getMaxCapacity() / 100))\n          .__(\"Absolute Used Capacity:\",\n              percent(capacities.getAbsoluteUsedCapacity() / 100))\n          .__(\"Absolute Configured Capacity:\",\n              percent(capacities.getAbsoluteCapacity() / 100))\n          .__(\"Absolute Configured Max Capacity:\",\n              percent(capacities.getAbsoluteMaxCapacity() / 100))\n          .__(\"Used Resources:\", resourceUsages.getUsed().toString())\n          .__(\"Configured Max Application Master Limit:\",\n              StringUtils.format(\"%.1f\", capacities.getMaxAMLimitPercentage()))\n          .__(\"Max Application Master Resources:\",\n              resourceUsages.getAMLimit().toString())\n          .__(\"Used Application Master Resources:\", amUsed.toString())\n          .__(\"Max Application Master Resources Per User:\",\n              userAMResourceLimit.toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "22/06/17 11:50 PM",
      "commitNameOld": "ca13b224b2feb9c44de861da9cbba8dd2a12cb35",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 34.72,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n       PartitionQueueCapacitiesInfo capacities \u003d\n           lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n       PartitionResourcesInfo resourceUsages \u003d\n           lqinfo.getResources().getPartitionResourceUsageInfo(label);\n \n       // Get UserInfo from first user to calculate AM Resource Limit per user.\n       ResourceInfo userAMResourceLimit \u003d null;\n       ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n       if (usersList.isEmpty()) {\n         // If no users are present, consider AM Limit for that queue.\n         userAMResourceLimit \u003d resourceUsages.getAMLimit();\n       } else {\n         userAMResourceLimit \u003d usersList.get(0)\n             .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n             .getAMLimit();\n       }\n       ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n           ? new ResourceInfo(Resources.none())\n           : resourceUsages.getAmUsed();\n       ri.\n-      _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n-      _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n-      _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n-      _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n-      _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n-      _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n-      _(\"Used Resources:\", resourceUsages.getUsed().toString()).\n-      _(\"Configured Max Application Master Limit:\", StringUtils.format(\"%.1f\",\n+          __(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n+          __(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n+          __(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n+          __(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n+          __(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n+          __(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n+          __(\"Used Resources:\", resourceUsages.getUsed().toString()).\n+          __(\"Configured Max Application Master Limit:\", StringUtils.format(\"%.1f\",\n           capacities.getMaxAMLimitPercentage())).\n-      _(\"Max Application Master Resources:\",\n+          __(\"Max Application Master Resources:\",\n           resourceUsages.getAMLimit().toString()).\n-      _(\"Used Application Master Resources:\",\n+          __(\"Used Application Master Resources:\",\n           amUsed.toString()).\n-      _(\"Max Application Master Resources Per User:\",\n+          __(\"Max Application Master Resources Per User:\",\n           userAMResourceLimit.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourcesInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n\n      // Get UserInfo from first user to calculate AM Resource Limit per user.\n      ResourceInfo userAMResourceLimit \u003d null;\n      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n      if (usersList.isEmpty()) {\n        // If no users are present, consider AM Limit for that queue.\n        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n      } else {\n        userAMResourceLimit \u003d usersList.get(0)\n            .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n            .getAMLimit();\n      }\n      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n          ? new ResourceInfo(Resources.none())\n          : resourceUsages.getAmUsed();\n      ri.\n          __(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n          __(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n          __(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n          __(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n          __(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n          __(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n          __(\"Used Resources:\", resourceUsages.getUsed().toString()).\n          __(\"Configured Max Application Master Limit:\", StringUtils.format(\"%.1f\",\n          capacities.getMaxAMLimitPercentage())).\n          __(\"Max Application Master Resources:\",\n          resourceUsages.getAMLimit().toString()).\n          __(\"Used Application Master Resources:\",\n          amUsed.toString()).\n          __(\"Max Application Master Resources Per User:\",\n          userAMResourceLimit.toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
      "extendedDetails": {}
    },
    "b08ecf5c7589b055e93b2907413213f36097724d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4304. AM max resource configuration per partition to be displayed/updated correctly in UI and in various partition related metrics. (Sunil G via wangda)\n",
      "commitDate": "17/01/16 7:11 PM",
      "commitName": "b08ecf5c7589b055e93b2907413213f36097724d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "22/12/15 7:42 PM",
      "commitNameOld": "8c180a13c82ab9d60f595e6942e35d51024dab53",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 25.98,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,37 @@\n     private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n       PartitionQueueCapacitiesInfo capacities \u003d\n           lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n-      PartitionResourceUsageInfo resourceUsages \u003d\n+      PartitionResourcesInfo resourceUsages \u003d\n           lqinfo.getResources().getPartitionResourceUsageInfo(label);\n+\n+      // Get UserInfo from first user to calculate AM Resource Limit per user.\n+      ResourceInfo userAMResourceLimit \u003d null;\n+      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n+      if (usersList.isEmpty()) {\n+        // If no users are present, consider AM Limit for that queue.\n+        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n+      } else {\n+        userAMResourceLimit \u003d usersList.get(0)\n+            .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n+            .getAMLimit();\n+      }\n+      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n+          ? new ResourceInfo(Resources.none())\n+          : resourceUsages.getAmUsed();\n       ri.\n       _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n       _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n       _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n       _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n       _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n       _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n-      _(\"Used Resources:\", resourceUsages.getUsed().toString());\n+      _(\"Used Resources:\", resourceUsages.getUsed().toString()).\n+      _(\"Configured Max Application Master Limit:\", StringUtils.format(\"%.1f\",\n+          capacities.getMaxAMLimitPercentage())).\n+      _(\"Max Application Master Resources:\",\n+          resourceUsages.getAMLimit().toString()).\n+      _(\"Used Application Master Resources:\",\n+          amUsed.toString()).\n+      _(\"Max Application Master Resources Per User:\",\n+          userAMResourceLimit.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourcesInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n\n      // Get UserInfo from first user to calculate AM Resource Limit per user.\n      ResourceInfo userAMResourceLimit \u003d null;\n      ArrayList\u003cUserInfo\u003e usersList \u003d lqinfo.getUsers().getUsersList();\n      if (usersList.isEmpty()) {\n        // If no users are present, consider AM Limit for that queue.\n        userAMResourceLimit \u003d resourceUsages.getAMLimit();\n      } else {\n        userAMResourceLimit \u003d usersList.get(0)\n            .getResourceUsageInfo().getPartitionResourceUsageInfo(label)\n            .getAMLimit();\n      }\n      ResourceInfo amUsed \u003d (resourceUsages.getAmUsed() \u003d\u003d null)\n          ? new ResourceInfo(Resources.none())\n          : resourceUsages.getAmUsed();\n      ri.\n      _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n      _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n      _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n      _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n      _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n      _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n      _(\"Used Resources:\", resourceUsages.getUsed().toString()).\n      _(\"Configured Max Application Master Limit:\", StringUtils.format(\"%.1f\",\n          capacities.getMaxAMLimitPercentage())).\n      _(\"Max Application Master Resources:\",\n          resourceUsages.getAMLimit().toString()).\n      _(\"Used Application Master Resources:\",\n          amUsed.toString()).\n      _(\"Max Application Master Resources Per User:\",\n          userAMResourceLimit.toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
      "extendedDetails": {}
    },
    "4337b263aa23464a01c316336db2319e2858a2b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4162. CapacityScheduler: Add resource usage by partition and queue capacity by partition to REST API. (Naganarasimha G R via wangda)\n",
      "commitDate": "16/10/15 3:06 PM",
      "commitName": "4337b263aa23464a01c316336db2319e2858a2b3",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4162. CapacityScheduler: Add resource usage by partition and queue capacity by partition to REST API. (Naganarasimha G R via wangda)\n",
          "commitDate": "16/10/15 3:06 PM",
          "commitName": "4337b263aa23464a01c316336db2319e2858a2b3",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "16/09/15 11:55 PM",
          "commitNameOld": "6c6e734f0baaa7b0f8d6b85963e1ce87bac28b17",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 29.63,
          "commitsBetweenForRepo": 232,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,14 @@\n-    private void renderQueueCapacityInfo(ResponseInfo ri) {\n+    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n+      PartitionQueueCapacitiesInfo capacities \u003d\n+          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n+      PartitionResourceUsageInfo resourceUsages \u003d\n+          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n       ri.\n-      _(\"Used Capacity:\", percent(lqinfo.getUsedCapacity() / 100)).\n-      _(\"Configured Capacity:\", percent(lqinfo.getCapacity() / 100)).\n-      _(\"Configured Max Capacity:\", percent(lqinfo.getMaxCapacity() / 100)).\n-      _(\"Absolute Used Capacity:\", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).\n-      _(\"Absolute Configured Capacity:\", percent(lqinfo.getAbsoluteCapacity() / 100)).\n-      _(\"Absolute Configured Max Capacity:\", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).\n-      _(\"Used Resources:\", lqinfo.getResourcesUsed().toString());\n+      _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n+      _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n+      _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n+      _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n+      _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n+      _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n+      _(\"Used Resources:\", resourceUsages.getUsed().toString());\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourceUsageInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n      ri.\n      _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n      _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n      _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n      _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n      _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n      _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n      _(\"Used Resources:\", resourceUsages.getUsed().toString());\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
          "extendedDetails": {
            "oldValue": "[ri-ResponseInfo]",
            "newValue": "[ri-ResponseInfo, label-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4162. CapacityScheduler: Add resource usage by partition and queue capacity by partition to REST API. (Naganarasimha G R via wangda)\n",
          "commitDate": "16/10/15 3:06 PM",
          "commitName": "4337b263aa23464a01c316336db2319e2858a2b3",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "16/09/15 11:55 PM",
          "commitNameOld": "6c6e734f0baaa7b0f8d6b85963e1ce87bac28b17",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 29.63,
          "commitsBetweenForRepo": 232,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,14 @@\n-    private void renderQueueCapacityInfo(ResponseInfo ri) {\n+    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n+      PartitionQueueCapacitiesInfo capacities \u003d\n+          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n+      PartitionResourceUsageInfo resourceUsages \u003d\n+          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n       ri.\n-      _(\"Used Capacity:\", percent(lqinfo.getUsedCapacity() / 100)).\n-      _(\"Configured Capacity:\", percent(lqinfo.getCapacity() / 100)).\n-      _(\"Configured Max Capacity:\", percent(lqinfo.getMaxCapacity() / 100)).\n-      _(\"Absolute Used Capacity:\", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).\n-      _(\"Absolute Configured Capacity:\", percent(lqinfo.getAbsoluteCapacity() / 100)).\n-      _(\"Absolute Configured Max Capacity:\", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).\n-      _(\"Used Resources:\", lqinfo.getResourcesUsed().toString());\n+      _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n+      _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n+      _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n+      _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n+      _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n+      _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n+      _(\"Used Resources:\", resourceUsages.getUsed().toString());\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {\n      PartitionQueueCapacitiesInfo capacities \u003d\n          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);\n      PartitionResourceUsageInfo resourceUsages \u003d\n          lqinfo.getResources().getPartitionResourceUsageInfo(label);\n      ri.\n      _(\"Used Capacity:\", percent(capacities.getUsedCapacity() / 100)).\n      _(\"Configured Capacity:\", percent(capacities.getCapacity() / 100)).\n      _(\"Configured Max Capacity:\", percent(capacities.getMaxCapacity() / 100)).\n      _(\"Absolute Used Capacity:\", percent(capacities.getAbsoluteUsedCapacity() / 100)).\n      _(\"Absolute Configured Capacity:\", percent(capacities.getAbsoluteCapacity() / 100)).\n      _(\"Absolute Configured Max Capacity:\", percent(capacities.getAbsoluteMaxCapacity() / 100)).\n      _(\"Used Resources:\", resourceUsages.getUsed().toString());\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java",
          "extendedDetails": {}
        }
      ]
    },
    "0e85044e26da698c45185585310ae0e99448cd80": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3362. Add node label usage in RM CapacityScheduler web UI. (Naganarasimha G R via wangda)\n",
      "commitDate": "13/05/15 5:00 PM",
      "commitName": "0e85044e26da698c45185585310ae0e99448cd80",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,10 @@\n+    private void renderQueueCapacityInfo(ResponseInfo ri) {\n+      ri.\n+      _(\"Used Capacity:\", percent(lqinfo.getUsedCapacity() / 100)).\n+      _(\"Configured Capacity:\", percent(lqinfo.getCapacity() / 100)).\n+      _(\"Configured Max Capacity:\", percent(lqinfo.getMaxCapacity() / 100)).\n+      _(\"Absolute Used Capacity:\", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).\n+      _(\"Absolute Configured Capacity:\", percent(lqinfo.getAbsoluteCapacity() / 100)).\n+      _(\"Absolute Configured Max Capacity:\", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).\n+      _(\"Used Resources:\", lqinfo.getResourcesUsed().toString());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void renderQueueCapacityInfo(ResponseInfo ri) {\n      ri.\n      _(\"Used Capacity:\", percent(lqinfo.getUsedCapacity() / 100)).\n      _(\"Configured Capacity:\", percent(lqinfo.getCapacity() / 100)).\n      _(\"Configured Max Capacity:\", percent(lqinfo.getMaxCapacity() / 100)).\n      _(\"Absolute Used Capacity:\", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).\n      _(\"Absolute Configured Capacity:\", percent(lqinfo.getAbsoluteCapacity() / 100)).\n      _(\"Absolute Configured Max Capacity:\", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).\n      _(\"Used Resources:\", lqinfo.getResourcesUsed().toString());\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/CapacitySchedulerPage.java"
    }
  }
}