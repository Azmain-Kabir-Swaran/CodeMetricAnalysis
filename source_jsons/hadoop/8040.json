{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicySummary.java",
  "functionName": "getStoragePolicy",
  "functionId": "getStoragePolicy___storageTypes-StorageType[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySummary.java",
  "functionStartLine": 134,
  "functionEndLine": 162,
  "numCommitsSeen": 2,
  "timeTaken": 852,
  "changeHistory": [
    "d140d76a43c88e326b9c2818578f22bd3563b969"
  ],
  "changeHistoryShort": {
    "d140d76a43c88e326b9c2818578f22bd3563b969": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d140d76a43c88e326b9c2818578f22bd3563b969": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7467. Provide storage tier information for a directory via fsck. (Benoy Antony)\n",
      "commitDate": "25/02/15 4:19 PM",
      "commitName": "d140d76a43c88e326b9c2818578f22bd3563b969",
      "commitAuthor": "Benoy Antony",
      "diff": "@@ -0,0 +1,29 @@\n+  private BlockStoragePolicy getStoragePolicy(StorageType[] storageTypes) {\n+    for (BlockStoragePolicy storagePolicy:storagePolicies) {\n+      StorageType[] policyStorageTypes \u003d storagePolicy.getStorageTypes();\n+      policyStorageTypes \u003d Arrays.copyOf(policyStorageTypes, policyStorageTypes.length);\n+      Arrays.sort(policyStorageTypes);\n+      if (policyStorageTypes.length \u003c\u003d storageTypes.length) {\n+        int i \u003d 0; \n+        for (; i \u003c policyStorageTypes.length; i++) {\n+          if (policyStorageTypes[i] !\u003d storageTypes[i]) {\n+            break;\n+          }\n+        }\n+        if (i \u003c policyStorageTypes.length) {\n+          continue;\n+        }\n+        int j\u003dpolicyStorageTypes.length;\n+        for (; j \u003c storageTypes.length; j++) {\n+          if (policyStorageTypes[i-1] !\u003d storageTypes[j]) {\n+            break;\n+          }\n+        }\n+\n+        if (j\u003d\u003dstorageTypes.length) {\n+          return storagePolicy;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockStoragePolicy getStoragePolicy(StorageType[] storageTypes) {\n    for (BlockStoragePolicy storagePolicy:storagePolicies) {\n      StorageType[] policyStorageTypes \u003d storagePolicy.getStorageTypes();\n      policyStorageTypes \u003d Arrays.copyOf(policyStorageTypes, policyStorageTypes.length);\n      Arrays.sort(policyStorageTypes);\n      if (policyStorageTypes.length \u003c\u003d storageTypes.length) {\n        int i \u003d 0; \n        for (; i \u003c policyStorageTypes.length; i++) {\n          if (policyStorageTypes[i] !\u003d storageTypes[i]) {\n            break;\n          }\n        }\n        if (i \u003c policyStorageTypes.length) {\n          continue;\n        }\n        int j\u003dpolicyStorageTypes.length;\n        for (; j \u003c storageTypes.length; j++) {\n          if (policyStorageTypes[i-1] !\u003d storageTypes[j]) {\n            break;\n          }\n        }\n\n        if (j\u003d\u003dstorageTypes.length) {\n          return storagePolicy;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySummary.java"
    }
  }
}