{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "onReload",
  "functionId": "onReload___queueInfo-AllocationConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1636,
  "functionEndLine": 1659,
  "numCommitsSeen": 226,
  "timeTaken": 6876,
  "changeHistory": [
    "86bc6425d425913899f1d951498bd040e453b3d0",
    "b10e962224a8ae1c6031a05322b0cc5e564bd078",
    "b3befc021b0e2d63d1a3710ea450797d1129f1f5",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "22426a1c9f4bd616558089b6862fd34ab42d19a7",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc"
  ],
  "changeHistoryShort": {
    "86bc6425d425913899f1d951498bd040e453b3d0": "Ybodychange",
    "b10e962224a8ae1c6031a05322b0cc5e564bd078": "Ybodychange",
    "b3befc021b0e2d63d1a3710ea450797d1129f1f5": "Ymultichange(Yexceptionschange,Ybodychange)",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ybodychange",
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "22426a1c9f4bd616558089b6862fd34ab42d19a7": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86bc6425d425913899f1d951498bd040e453b3d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8191. Fair scheduler: queue deletion without RM restart. (Gergo Repas via Haibo Chen)\n",
      "commitDate": "24/05/18 5:12 PM",
      "commitName": "86bc6425d425913899f1d951498bd040e453b3d0",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "21/05/18 8:10 AM",
      "commitNameOld": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 3.38,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n     public void onReload(AllocationConfiguration queueInfo)\n         throws IOException {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n \n+      Set\u003cString\u003e removedStaticQueues \u003d getRemovedStaticQueues(queueInfo);\n       writeLock.lock();\n       try {\n         if (queueInfo \u003d\u003d null) {\n           authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n               UserGroupInformation.getCurrentUser());\n         } else {\n           allocConf \u003d queueInfo;\n           setQueueAcls(allocConf.getQueueAcls());\n           allocConf.getDefaultSchedulingPolicy().initialize(getContext());\n           queueMgr.updateAllocationConfiguration(allocConf);\n+          queueMgr.setQueuesToDynamic(removedStaticQueues);\n           applyChildDefaults();\n           maxRunningEnforcer.updateRunnabilityOnReload();\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo)\n        throws IOException {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n\n      Set\u003cString\u003e removedStaticQueues \u003d getRemovedStaticQueues(queueInfo);\n      writeLock.lock();\n      try {\n        if (queueInfo \u003d\u003d null) {\n          authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n              UserGroupInformation.getCurrentUser());\n        } else {\n          allocConf \u003d queueInfo;\n          setQueueAcls(allocConf.getQueueAcls());\n          allocConf.getDefaultSchedulingPolicy().initialize(getContext());\n          queueMgr.updateAllocationConfiguration(allocConf);\n          queueMgr.setQueuesToDynamic(removedStaticQueues);\n          applyChildDefaults();\n          maxRunningEnforcer.updateRunnabilityOnReload();\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "b10e962224a8ae1c6031a05322b0cc5e564bd078": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6194. Cluster capacity in SchedulingPolicy is updated only on allocation file reload. (Yufei Gu via kasha)\n",
      "commitDate": "22/02/17 3:58 PM",
      "commitName": "b10e962224a8ae1c6031a05322b0cc5e564bd078",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/02/17 2:54 PM",
      "commitNameOld": "a77f432449aad67da31bd8bf8644b71def741bde",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,22 @@\n     public void onReload(AllocationConfiguration queueInfo)\n         throws IOException {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n \n       writeLock.lock();\n       try {\n         if (queueInfo \u003d\u003d null) {\n           authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n               UserGroupInformation.getCurrentUser());\n         } else {\n           allocConf \u003d queueInfo;\n           setQueueAcls(allocConf.getQueueAcls());\n-          allocConf.getDefaultSchedulingPolicy().initialize(\n-              getClusterResource());\n+          allocConf.getDefaultSchedulingPolicy().initialize(getContext());\n           queueMgr.updateAllocationConfiguration(allocConf);\n           applyChildDefaults();\n           maxRunningEnforcer.updateRunnabilityOnReload();\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo)\n        throws IOException {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n\n      writeLock.lock();\n      try {\n        if (queueInfo \u003d\u003d null) {\n          authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n              UserGroupInformation.getCurrentUser());\n        } else {\n          allocConf \u003d queueInfo;\n          setQueueAcls(allocConf.getQueueAcls());\n          allocConf.getDefaultSchedulingPolicy().initialize(getContext());\n          queueMgr.updateAllocationConfiguration(allocConf);\n          applyChildDefaults();\n          maxRunningEnforcer.updateRunnabilityOnReload();\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "b3befc021b0e2d63d1a3710ea450797d1129f1f5": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-4997. Update fair scheduler to use pluggable auth provider (Contributed by Tao Jie via Daniel Templeton)\n",
      "commitDate": "30/11/16 9:50 AM",
      "commitName": "b3befc021b0e2d63d1a3710ea450797d1129f1f5",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4997. Update fair scheduler to use pluggable auth provider (Contributed by Tao Jie via Daniel Templeton)\n",
          "commitDate": "30/11/16 9:50 AM",
          "commitName": "b3befc021b0e2d63d1a3710ea450797d1129f1f5",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "29/11/16 9:40 AM",
          "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,23 @@\n-    public void onReload(AllocationConfiguration queueInfo) {\n+    public void onReload(AllocationConfiguration queueInfo)\n+        throws IOException {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n \n       writeLock.lock();\n       try {\n-        allocConf \u003d queueInfo;\n-        allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n-        queueMgr.updateAllocationConfiguration(allocConf);\n-        applyChildDefaults();\n-        maxRunningEnforcer.updateRunnabilityOnReload();\n+        if (queueInfo \u003d\u003d null) {\n+          authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n+              UserGroupInformation.getCurrentUser());\n+        } else {\n+          allocConf \u003d queueInfo;\n+          setQueueAcls(allocConf.getQueueAcls());\n+          allocConf.getDefaultSchedulingPolicy().initialize(\n+              getClusterResource());\n+          queueMgr.updateAllocationConfiguration(allocConf);\n+          applyChildDefaults();\n+          maxRunningEnforcer.updateRunnabilityOnReload();\n+        }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void onReload(AllocationConfiguration queueInfo)\n        throws IOException {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n\n      writeLock.lock();\n      try {\n        if (queueInfo \u003d\u003d null) {\n          authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n              UserGroupInformation.getCurrentUser());\n        } else {\n          allocConf \u003d queueInfo;\n          setQueueAcls(allocConf.getQueueAcls());\n          allocConf.getDefaultSchedulingPolicy().initialize(\n              getClusterResource());\n          queueMgr.updateAllocationConfiguration(allocConf);\n          applyChildDefaults();\n          maxRunningEnforcer.updateRunnabilityOnReload();\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4997. Update fair scheduler to use pluggable auth provider (Contributed by Tao Jie via Daniel Templeton)\n",
          "commitDate": "30/11/16 9:50 AM",
          "commitName": "b3befc021b0e2d63d1a3710ea450797d1129f1f5",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "29/11/16 9:40 AM",
          "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,23 @@\n-    public void onReload(AllocationConfiguration queueInfo) {\n+    public void onReload(AllocationConfiguration queueInfo)\n+        throws IOException {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n \n       writeLock.lock();\n       try {\n-        allocConf \u003d queueInfo;\n-        allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n-        queueMgr.updateAllocationConfiguration(allocConf);\n-        applyChildDefaults();\n-        maxRunningEnforcer.updateRunnabilityOnReload();\n+        if (queueInfo \u003d\u003d null) {\n+          authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n+              UserGroupInformation.getCurrentUser());\n+        } else {\n+          allocConf \u003d queueInfo;\n+          setQueueAcls(allocConf.getQueueAcls());\n+          allocConf.getDefaultSchedulingPolicy().initialize(\n+              getClusterResource());\n+          queueMgr.updateAllocationConfiguration(allocConf);\n+          applyChildDefaults();\n+          maxRunningEnforcer.updateRunnabilityOnReload();\n+        }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void onReload(AllocationConfiguration queueInfo)\n        throws IOException {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n\n      writeLock.lock();\n      try {\n        if (queueInfo \u003d\u003d null) {\n          authorizer.setPermission(allocsLoader.getDefaultPermissions(),\n              UserGroupInformation.getCurrentUser());\n        } else {\n          allocConf \u003d queueInfo;\n          setQueueAcls(allocConf.getQueueAcls());\n          allocConf.getDefaultSchedulingPolicy().initialize(\n              getClusterResource());\n          queueMgr.updateAllocationConfiguration(allocConf);\n          applyChildDefaults();\n          maxRunningEnforcer.updateRunnabilityOnReload();\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/10/16 6:03 AM",
      "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,15 @@\n     public void onReload(AllocationConfiguration queueInfo) {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n-      synchronized (FairScheduler.this) {\n+\n+      writeLock.lock();\n+      try {\n         allocConf \u003d queueInfo;\n         allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n         queueMgr.updateAllocationConfiguration(allocConf);\n         applyChildDefaults();\n         maxRunningEnforcer.updateRunnabilityOnReload();\n+      } finally {\n+        writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo) {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n\n      writeLock.lock();\n      try {\n        allocConf \u003d queueInfo;\n        allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n        queueMgr.updateAllocationConfiguration(allocConf);\n        applyChildDefaults();\n        maxRunningEnforcer.updateRunnabilityOnReload();\n      } finally {\n        writeLock.unlock();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
      "commitDate": "17/08/16 5:40 PM",
      "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "26/07/16 2:54 PM",
      "commitNameOld": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 22.12,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,11 @@\n     public void onReload(AllocationConfiguration queueInfo) {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n       synchronized (FairScheduler.this) {\n         allocConf \u003d queueInfo;\n         allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n         queueMgr.updateAllocationConfiguration(allocConf);\n+        applyChildDefaults();\n         maxRunningEnforcer.updateRunnabilityOnReload();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo) {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n      synchronized (FairScheduler.this) {\n        allocConf \u003d queueInfo;\n        allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n        queueMgr.updateAllocationConfiguration(allocConf);\n        applyChildDefaults();\n        maxRunningEnforcer.updateRunnabilityOnReload();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/03/16 7:46 PM",
      "commitNameOld": "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 7.73,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n     public void onReload(AllocationConfiguration queueInfo) {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n       synchronized (FairScheduler.this) {\n         allocConf \u003d queueInfo;\n-        allocConf.getDefaultSchedulingPolicy().initialize(clusterResource);\n+        allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n         queueMgr.updateAllocationConfiguration(allocConf);\n         maxRunningEnforcer.updateRunnabilityOnReload();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo) {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n      synchronized (FairScheduler.this) {\n        allocConf \u003d queueInfo;\n        allocConf.getDefaultSchedulingPolicy().initialize(getClusterResource());\n        queueMgr.updateAllocationConfiguration(allocConf);\n        maxRunningEnforcer.updateRunnabilityOnReload();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "22426a1c9f4bd616558089b6862fd34ab42d19a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3231. FairScheduler: Changing queueMaxRunningApps interferes with pending jobs. (Siqi Li via kasha)\n",
      "commitDate": "04/03/15 6:06 PM",
      "commitName": "22426a1c9f4bd616558089b6862fd34ab42d19a7",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "05/02/15 9:39 AM",
      "commitNameOld": "b6466deac6d5d6344f693144290b46e2bef83a02",
      "commitAuthorOld": "Sandy Ryza",
      "daysBetweenCommits": 27.35,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,10 @@\n     public void onReload(AllocationConfiguration queueInfo) {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n       synchronized (FairScheduler.this) {\n         allocConf \u003d queueInfo;\n         allocConf.getDefaultSchedulingPolicy().initialize(clusterResource);\n         queueMgr.updateAllocationConfiguration(allocConf);\n+        maxRunningEnforcer.updateRunnabilityOnReload();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo) {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n      synchronized (FairScheduler.this) {\n        allocConf \u003d queueInfo;\n        allocConf.getDefaultSchedulingPolicy().initialize(clusterResource);\n        queueMgr.updateAllocationConfiguration(allocConf);\n        maxRunningEnforcer.updateRunnabilityOnReload();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/03/14 4:40 PM",
      "commitNameOld": "7bd62b8da03642612fae8349e967b9c0aa290843",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 51.24,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n     public void onReload(AllocationConfiguration queueInfo) {\n       // Commit the reload; also create any queue defined in the alloc file\n       // if it does not already exist, so it can be displayed on the web UI.\n       synchronized (FairScheduler.this) {\n         allocConf \u003d queueInfo;\n-        allocConf.getDefaultSchedulingPolicy().initialize(clusterCapacity);\n+        allocConf.getDefaultSchedulingPolicy().initialize(clusterResource);\n         queueMgr.updateAllocationConfiguration(allocConf);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo) {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n      synchronized (FairScheduler.this) {\n        allocConf \u003d queueInfo;\n        allocConf.getDefaultSchedulingPolicy().initialize(clusterResource);\n        queueMgr.updateAllocationConfiguration(allocConf);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 7:26 PM",
      "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,9 @@\n+    public void onReload(AllocationConfiguration queueInfo) {\n+      // Commit the reload; also create any queue defined in the alloc file\n+      // if it does not already exist, so it can be displayed on the web UI.\n+      synchronized (FairScheduler.this) {\n+        allocConf \u003d queueInfo;\n+        allocConf.getDefaultSchedulingPolicy().initialize(clusterCapacity);\n+        queueMgr.updateAllocationConfiguration(allocConf);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onReload(AllocationConfiguration queueInfo) {\n      // Commit the reload; also create any queue defined in the alloc file\n      // if it does not already exist, so it can be displayed on the web UI.\n      synchronized (FairScheduler.this) {\n        allocConf \u003d queueInfo;\n        allocConf.getDefaultSchedulingPolicy().initialize(clusterCapacity);\n        queueMgr.updateAllocationConfiguration(allocConf);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}