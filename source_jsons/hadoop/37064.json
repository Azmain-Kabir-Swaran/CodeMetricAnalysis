{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "getConsumptionForUserOverTime",
  "functionId": "getConsumptionForUserOverTime___user-String__start-long__end-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 555,
  "functionEndLine": 581,
  "numCommitsSeen": 27,
  "timeTaken": 3633,
  "changeHistory": [
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
    "e3345e985bff93c6c74a76747e45376c6027f42c",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
    "742632e346604fd2b263bd42367165638fcf2416",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Ybodychange",
    "e3345e985bff93c6c74a76747e45376c6027f42c": "Ybodychange",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": "Ybodychange",
    "742632e346604fd2b263bd42367165638fcf2416": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:39 PM",
      "commitNameOld": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,27 @@\n   public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n       long start, long end) {\n     readLock.lock();\n     try {\n+      // merge periodic and non-periodic allocations\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+      RLESparseResourceAllocation userPeriodicResAlloc \u003d\n+          userPeriodicResourceAlloc.get(user);\n \n+      if (userResAlloc !\u003d null \u0026\u0026 userPeriodicResAlloc !\u003d null) {\n+        return RLESparseResourceAllocation.merge(resCalc, totalCapacity,\n+            userResAlloc, userPeriodicResAlloc, RLEOperator.add, start, end);\n+      }\n       if (userResAlloc !\u003d null) {\n         return userResAlloc.getRangeOverlapping(start, end);\n-      } else {\n-        return new RLESparseResourceAllocation(resCalc);\n       }\n+      if (userPeriodicResAlloc !\u003d null) {\n+        return userPeriodicResAlloc.getRangeOverlapping(start, end);\n+      }\n+    } catch (PlanningException e) {\n+      LOG.warn(\"Exception while trying to merge periodic\"\n+          + \" and non-periodic user allocations: {}\", e.getMessage(), e);\n     } finally {\n       readLock.unlock();\n     }\n+    return new RLESparseResourceAllocation(resCalc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      // merge periodic and non-periodic allocations\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n      RLESparseResourceAllocation userPeriodicResAlloc \u003d\n          userPeriodicResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null \u0026\u0026 userPeriodicResAlloc !\u003d null) {\n        return RLESparseResourceAllocation.merge(resCalc, totalCapacity,\n            userResAlloc, userPeriodicResAlloc, RLEOperator.add, start, end);\n      }\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      }\n      if (userPeriodicResAlloc !\u003d null) {\n        return userPeriodicResAlloc.getRangeOverlapping(start, end);\n      }\n    } catch (PlanningException e) {\n      LOG.warn(\"Exception while trying to merge periodic\"\n          + \" and non-periodic user allocations: {}\", e.getMessage(), e);\n    } finally {\n      readLock.unlock();\n    }\n    return new RLESparseResourceAllocation(resCalc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "e3345e985bff93c6c74a76747e45376c6027f42c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
      "commitDate": "06/09/17 4:39 PM",
      "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/09/17 3:16 PM",
      "commitNameOld": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,15 @@\n   public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n       long start, long end) {\n     readLock.lock();\n     try {\n-      // merge periodic and non-periodic allocations\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n-      RLESparseResourceAllocation userPeriodicResAlloc \u003d\n-          userPeriodicResourceAlloc.get(user);\n \n-      if (userResAlloc !\u003d null \u0026\u0026 userPeriodicResAlloc !\u003d null) {\n-        return RLESparseResourceAllocation.merge(resCalc, totalCapacity,\n-            userResAlloc, userPeriodicResAlloc, RLEOperator.add, start, end);\n-      }\n       if (userResAlloc !\u003d null) {\n         return userResAlloc.getRangeOverlapping(start, end);\n+      } else {\n+        return new RLESparseResourceAllocation(resCalc);\n       }\n-      if (userPeriodicResAlloc !\u003d null) {\n-        return userPeriodicResAlloc.getRangeOverlapping(start, end);\n-      }\n-    } catch (PlanningException e) {\n-      LOG.warn(\"Exception while trying to merge periodic\"\n-          + \" and non-periodic user allocations: {}\", e.getMessage(), e);\n     } finally {\n       readLock.unlock();\n     }\n-    return new RLESparseResourceAllocation(resCalc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      } else {\n        return new RLESparseResourceAllocation(resCalc);\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": {
      "type": "Ybodychange",
      "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "01/09/17 3:16 PM",
      "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/05/17 4:01 PM",
      "commitNameOld": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 122.97,
      "commitsBetweenForRepo": 775,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,27 @@\n   public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n       long start, long end) {\n     readLock.lock();\n     try {\n+      // merge periodic and non-periodic allocations\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+      RLESparseResourceAllocation userPeriodicResAlloc \u003d\n+          userPeriodicResourceAlloc.get(user);\n \n+      if (userResAlloc !\u003d null \u0026\u0026 userPeriodicResAlloc !\u003d null) {\n+        return RLESparseResourceAllocation.merge(resCalc, totalCapacity,\n+            userResAlloc, userPeriodicResAlloc, RLEOperator.add, start, end);\n+      }\n       if (userResAlloc !\u003d null) {\n         return userResAlloc.getRangeOverlapping(start, end);\n-      } else {\n-        return new RLESparseResourceAllocation(resCalc);\n       }\n+      if (userPeriodicResAlloc !\u003d null) {\n+        return userPeriodicResAlloc.getRangeOverlapping(start, end);\n+      }\n+    } catch (PlanningException e) {\n+      LOG.warn(\"Exception while trying to merge periodic\"\n+          + \" and non-periodic user allocations: {}\", e.getMessage(), e);\n     } finally {\n       readLock.unlock();\n     }\n+    return new RLESparseResourceAllocation(resCalc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      // merge periodic and non-periodic allocations\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n      RLESparseResourceAllocation userPeriodicResAlloc \u003d\n          userPeriodicResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null \u0026\u0026 userPeriodicResAlloc !\u003d null) {\n        return RLESparseResourceAllocation.merge(resCalc, totalCapacity,\n            userResAlloc, userPeriodicResAlloc, RLEOperator.add, start, end);\n      }\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      }\n      if (userPeriodicResAlloc !\u003d null) {\n        return userPeriodicResAlloc.getRangeOverlapping(start, end);\n      }\n    } catch (PlanningException e) {\n      LOG.warn(\"Exception while trying to merge periodic\"\n          + \" and non-periodic user allocations: {}\", e.getMessage(), e);\n    } finally {\n      readLock.unlock();\n    }\n    return new RLESparseResourceAllocation(resCalc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "742632e346604fd2b263bd42367165638fcf2416": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)\n",
      "commitDate": "05/12/15 9:26 PM",
      "commitName": "742632e346604fd2b263bd42367165638fcf2416",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)\n",
          "commitDate": "05/12/15 9:26 PM",
          "commitName": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "21/11/15 9:59 AM",
          "commitNameOld": "da1016365aba1cee9c06771ab142d077379f27af",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 14.48,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public Resource getConsumptionForUser(String user, long t) {\n+  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n+      long start, long end) {\n     readLock.lock();\n     try {\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+\n       if (userResAlloc !\u003d null) {\n-        return userResAlloc.getCapacityAtTime(t);\n+        return userResAlloc.getRangeOverlapping(start, end);\n       } else {\n-        return Resources.clone(ZERO_RESOURCE);\n+        return new RLESparseResourceAllocation(resCalc);\n       }\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      } else {\n        return new RLESparseResourceAllocation(resCalc);\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "getConsumptionForUser",
            "newValue": "getConsumptionForUserOverTime"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)\n",
          "commitDate": "05/12/15 9:26 PM",
          "commitName": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "21/11/15 9:59 AM",
          "commitNameOld": "da1016365aba1cee9c06771ab142d077379f27af",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 14.48,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public Resource getConsumptionForUser(String user, long t) {\n+  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n+      long start, long end) {\n     readLock.lock();\n     try {\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+\n       if (userResAlloc !\u003d null) {\n-        return userResAlloc.getCapacityAtTime(t);\n+        return userResAlloc.getRangeOverlapping(start, end);\n       } else {\n-        return Resources.clone(ZERO_RESOURCE);\n+        return new RLESparseResourceAllocation(resCalc);\n       }\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      } else {\n        return new RLESparseResourceAllocation(resCalc);\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "[user-String, t-long]",
            "newValue": "[user-String, start-long, end-long]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)\n",
          "commitDate": "05/12/15 9:26 PM",
          "commitName": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "21/11/15 9:59 AM",
          "commitNameOld": "da1016365aba1cee9c06771ab142d077379f27af",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 14.48,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public Resource getConsumptionForUser(String user, long t) {\n+  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n+      long start, long end) {\n     readLock.lock();\n     try {\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+\n       if (userResAlloc !\u003d null) {\n-        return userResAlloc.getCapacityAtTime(t);\n+        return userResAlloc.getRangeOverlapping(start, end);\n       } else {\n-        return Resources.clone(ZERO_RESOURCE);\n+        return new RLESparseResourceAllocation(resCalc);\n       }\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      } else {\n        return new RLESparseResourceAllocation(resCalc);\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "Resource",
            "newValue": "RLESparseResourceAllocation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)\n",
          "commitDate": "05/12/15 9:26 PM",
          "commitName": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "21/11/15 9:59 AM",
          "commitNameOld": "da1016365aba1cee9c06771ab142d077379f27af",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 14.48,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public Resource getConsumptionForUser(String user, long t) {\n+  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n+      long start, long end) {\n     readLock.lock();\n     try {\n       RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+\n       if (userResAlloc !\u003d null) {\n-        return userResAlloc.getCapacityAtTime(t);\n+        return userResAlloc.getRangeOverlapping(start, end);\n       } else {\n-        return Resources.clone(ZERO_RESOURCE);\n+        return new RLESparseResourceAllocation(resCalc);\n       }\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,\n      long start, long end) {\n    readLock.lock();\n    try {\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getRangeOverlapping(start, end);\n      } else {\n        return new RLESparseResourceAllocation(resCalc);\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {}
        }
      ]
    },
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,13 @@\n+  public Resource getConsumptionForUser(String user, long t) {\n+    readLock.lock();\n+    try {\n+      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n+      if (userResAlloc !\u003d null) {\n+        return userResAlloc.getCapacityAtTime(t);\n+      } else {\n+        return Resources.clone(ZERO_RESOURCE);\n+      }\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getConsumptionForUser(String user, long t) {\n    readLock.lock();\n    try {\n      RLESparseResourceAllocation userResAlloc \u003d userResourceAlloc.get(user);\n      if (userResAlloc !\u003d null) {\n        return userResAlloc.getCapacityAtTime(t);\n      } else {\n        return Resources.clone(ZERO_RESOURCE);\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}