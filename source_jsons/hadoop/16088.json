{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemAccessService.java",
  "functionName": "execute",
  "functionId": "execute___user-String__conf-Configuration(modifiers-final)__executor-FileSystemExecutor__T__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
  "functionStartLine": 329,
  "functionEndLine": 370,
  "numCommitsSeen": 14,
  "timeTaken": 1216,
  "changeHistory": [
    "263c76b678275dfff867415c71ba9dc00a9235ef",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "8bda086d046b12e8efed834f39a775e710ca0962",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "263c76b678275dfff867415c71ba9dc00a9235ef": "Ybodychange",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "8bda086d046b12e8efed834f39a775e710ca0962": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "263c76b678275dfff867415c71ba9dc00a9235ef": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-17011. Tolerate leading and trailing spaces in fs.defaultFS. Contributed by Ctest\n\nSigned-off-by: Ayush Saxena \u003cayushsaxena@apache.org\u003e\n",
      "commitDate": "30/04/20 2:15 PM",
      "commitName": "263c76b678275dfff867415c71ba9dc00a9235ef",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "28/09/19 5:20 PM",
      "commitNameOld": "d8313b227495d748abe8884eee34db507476cee1",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 214.87,
      "commitsBetweenForRepo": 803,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n     throws FileSystemAccessException {\n     Check.notEmpty(user, \"user\");\n     Check.notNull(conf, \"conf\");\n     Check.notNull(executor, \"executor\");\n     if (!conf.getBoolean(FILE_SYSTEM_SERVICE_CREATED, false)) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H04);\n     }\n     if (conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY) \u003d\u003d null ||\n         conf.getTrimmed(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY).length() \u003d\u003d 0) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06,\n                                           CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);\n     }\n     try {\n       validateNamenode(\n-        new URI(conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n-          getAuthority());\n+          new URI(conf.getTrimmed(\n+              CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n+                  getAuthority());\n       UserGroupInformation ugi \u003d getUGI(user);\n       return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n         @Override\n         public T run() throws Exception {\n           FileSystem fs \u003d createFileSystem(conf);\n           Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n           Instrumentation.Cron cron \u003d instrumentation.createCron();\n           try {\n             checkNameNodeHealth(fs);\n             cron.start();\n             return executor.execute(fs);\n           } finally {\n             cron.stop();\n             instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n             closeFileSystem(fs);\n           }\n         }\n       });\n     } catch (FileSystemAccessException ex) {\n       throw ex;\n     } catch (Exception ex) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n    throws FileSystemAccessException {\n    Check.notEmpty(user, \"user\");\n    Check.notNull(conf, \"conf\");\n    Check.notNull(executor, \"executor\");\n    if (!conf.getBoolean(FILE_SYSTEM_SERVICE_CREATED, false)) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H04);\n    }\n    if (conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY) \u003d\u003d null ||\n        conf.getTrimmed(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY).length() \u003d\u003d 0) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06,\n                                          CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);\n    }\n    try {\n      validateNamenode(\n          new URI(conf.getTrimmed(\n              CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n                  getAuthority());\n      UserGroupInformation ugi \u003d getUGI(user);\n      return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n        @Override\n        public T run() throws Exception {\n          FileSystem fs \u003d createFileSystem(conf);\n          Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n          Instrumentation.Cron cron \u003d instrumentation.createCron();\n          try {\n            checkNameNodeHealth(fs);\n            cron.start();\n            return executor.execute(fs);\n          } finally {\n            cron.stop();\n            instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n            closeFileSystem(fs);\n          }\n        }\n      });\n    } catch (FileSystemAccessException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/08/12 4:14 PM",
      "commitNameOld": "08e89662170010dd619c0df859c670cb37b630dd",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n     throws FileSystemAccessException {\n     Check.notEmpty(user, \"user\");\n     Check.notNull(conf, \"conf\");\n     Check.notNull(executor, \"executor\");\n     if (!conf.getBoolean(FILE_SYSTEM_SERVICE_CREATED, false)) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H04);\n     }\n     if (conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY) \u003d\u003d null ||\n         conf.getTrimmed(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY).length() \u003d\u003d 0) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06,\n                                           CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);\n     }\n     try {\n       validateNamenode(\n         new URI(conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n           getAuthority());\n       UserGroupInformation ugi \u003d getUGI(user);\n       return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n+        @Override\n         public T run() throws Exception {\n           FileSystem fs \u003d createFileSystem(conf);\n           Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n           Instrumentation.Cron cron \u003d instrumentation.createCron();\n           try {\n             checkNameNodeHealth(fs);\n             cron.start();\n             return executor.execute(fs);\n           } finally {\n             cron.stop();\n             instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n             closeFileSystem(fs);\n           }\n         }\n       });\n     } catch (FileSystemAccessException ex) {\n       throw ex;\n     } catch (Exception ex) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n    throws FileSystemAccessException {\n    Check.notEmpty(user, \"user\");\n    Check.notNull(conf, \"conf\");\n    Check.notNull(executor, \"executor\");\n    if (!conf.getBoolean(FILE_SYSTEM_SERVICE_CREATED, false)) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H04);\n    }\n    if (conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY) \u003d\u003d null ||\n        conf.getTrimmed(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY).length() \u003d\u003d 0) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06,\n                                          CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);\n    }\n    try {\n      validateNamenode(\n        new URI(conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n          getAuthority());\n      UserGroupInformation ugi \u003d getUGI(user);\n      return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n        @Override\n        public T run() throws Exception {\n          FileSystem fs \u003d createFileSystem(conf);\n          Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n          Instrumentation.Cron cron \u003d instrumentation.createCron();\n          try {\n            checkNameNodeHealth(fs);\n            cron.start();\n            return executor.execute(fs);\n          } finally {\n            cron.stop();\n            instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n            closeFileSystem(fs);\n          }\n        }\n      });\n    } catch (FileSystemAccessException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "8bda086d046b12e8efed834f39a775e710ca0962": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3263. HttpFS should read HDFS config from Hadoop site.xml files (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327627 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:51 AM",
      "commitName": "8bda086d046b12e8efed834f39a775e710ca0962",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "08/12/11 11:25 AM",
      "commitNameOld": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 131.98,
      "commitsBetweenForRepo": 974,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,40 @@\n   public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n     throws FileSystemAccessException {\n     Check.notEmpty(user, \"user\");\n     Check.notNull(conf, \"conf\");\n     Check.notNull(executor, \"executor\");\n-    if (conf.get(NAME_NODE_PROPERTY) \u003d\u003d null || conf.getTrimmed(NAME_NODE_PROPERTY).length() \u003d\u003d 0) {\n-      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06, NAME_NODE_PROPERTY);\n+    if (!conf.getBoolean(FILE_SYSTEM_SERVICE_CREATED, false)) {\n+      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H04);\n+    }\n+    if (conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY) \u003d\u003d null ||\n+        conf.getTrimmed(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY).length() \u003d\u003d 0) {\n+      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06,\n+                                          CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);\n     }\n     try {\n-      validateNamenode(new URI(conf.get(NAME_NODE_PROPERTY)).getAuthority());\n+      validateNamenode(\n+        new URI(conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n+          getAuthority());\n       UserGroupInformation ugi \u003d getUGI(user);\n       return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n         public T run() throws Exception {\n-          Configuration namenodeConf \u003d createNameNodeConf(conf);\n-          FileSystem fs \u003d createFileSystem(namenodeConf);\n+          FileSystem fs \u003d createFileSystem(conf);\n           Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n           Instrumentation.Cron cron \u003d instrumentation.createCron();\n           try {\n             checkNameNodeHealth(fs);\n             cron.start();\n             return executor.execute(fs);\n           } finally {\n             cron.stop();\n             instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n             closeFileSystem(fs);\n           }\n         }\n       });\n     } catch (FileSystemAccessException ex) {\n       throw ex;\n     } catch (Exception ex) {\n       throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n    throws FileSystemAccessException {\n    Check.notEmpty(user, \"user\");\n    Check.notNull(conf, \"conf\");\n    Check.notNull(executor, \"executor\");\n    if (!conf.getBoolean(FILE_SYSTEM_SERVICE_CREATED, false)) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H04);\n    }\n    if (conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY) \u003d\u003d null ||\n        conf.getTrimmed(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY).length() \u003d\u003d 0) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06,\n                                          CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);\n    }\n    try {\n      validateNamenode(\n        new URI(conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)).\n          getAuthority());\n      UserGroupInformation ugi \u003d getUGI(user);\n      return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n        public T run() throws Exception {\n          FileSystem fs \u003d createFileSystem(conf);\n          Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n          Instrumentation.Cron cron \u003d instrumentation.createCron();\n          try {\n            checkNameNodeHealth(fs);\n            cron.start();\n            return executor.execute(fs);\n          } finally {\n            cron.stop();\n            instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n            closeFileSystem(fs);\n          }\n        }\n      });\n    } catch (FileSystemAccessException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,34 @@\n+  public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n+    throws FileSystemAccessException {\n+    Check.notEmpty(user, \"user\");\n+    Check.notNull(conf, \"conf\");\n+    Check.notNull(executor, \"executor\");\n+    if (conf.get(NAME_NODE_PROPERTY) \u003d\u003d null || conf.getTrimmed(NAME_NODE_PROPERTY).length() \u003d\u003d 0) {\n+      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06, NAME_NODE_PROPERTY);\n+    }\n+    try {\n+      validateNamenode(new URI(conf.get(NAME_NODE_PROPERTY)).getAuthority());\n+      UserGroupInformation ugi \u003d getUGI(user);\n+      return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n+        public T run() throws Exception {\n+          Configuration namenodeConf \u003d createNameNodeConf(conf);\n+          FileSystem fs \u003d createFileSystem(namenodeConf);\n+          Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n+          Instrumentation.Cron cron \u003d instrumentation.createCron();\n+          try {\n+            checkNameNodeHealth(fs);\n+            cron.start();\n+            return executor.execute(fs);\n+          } finally {\n+            cron.stop();\n+            instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n+            closeFileSystem(fs);\n+          }\n+        }\n+      });\n+    } catch (FileSystemAccessException ex) {\n+      throw ex;\n+    } catch (Exception ex) {\n+      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T execute(String user, final Configuration conf, final FileSystemExecutor\u003cT\u003e executor)\n    throws FileSystemAccessException {\n    Check.notEmpty(user, \"user\");\n    Check.notNull(conf, \"conf\");\n    Check.notNull(executor, \"executor\");\n    if (conf.get(NAME_NODE_PROPERTY) \u003d\u003d null || conf.getTrimmed(NAME_NODE_PROPERTY).length() \u003d\u003d 0) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H06, NAME_NODE_PROPERTY);\n    }\n    try {\n      validateNamenode(new URI(conf.get(NAME_NODE_PROPERTY)).getAuthority());\n      UserGroupInformation ugi \u003d getUGI(user);\n      return ugi.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n        public T run() throws Exception {\n          Configuration namenodeConf \u003d createNameNodeConf(conf);\n          FileSystem fs \u003d createFileSystem(namenodeConf);\n          Instrumentation instrumentation \u003d getServer().get(Instrumentation.class);\n          Instrumentation.Cron cron \u003d instrumentation.createCron();\n          try {\n            checkNameNodeHealth(fs);\n            cron.start();\n            return executor.execute(fs);\n          } finally {\n            cron.stop();\n            instrumentation.addCron(INSTRUMENTATION_GROUP, executor.getClass().getSimpleName(), cron);\n            closeFileSystem(fs);\n          }\n        }\n      });\n    } catch (FileSystemAccessException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new FileSystemAccessException(FileSystemAccessException.ERROR.H03, ex);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java"
    }
  }
}