{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAttrOp.java",
  "functionName": "unprotectedSetQuota",
  "functionId": "unprotectedSetQuota___fsd-FSDirectory__iip-INodesInPath__nsQuota-long__ssQuota-long__type-StorageType",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
  "functionStartLine": 308,
  "functionEndLine": 365,
  "numCommitsSeen": 298,
  "timeTaken": 16757,
  "changeHistory": [
    "f4ae00c5301c0dd8923783ac6dca2d296c289254",
    "48b9d5fd2a96728b1118be217ca597c4098e99ca",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
    "80691b073fe7c104a8684c0a8900a1657bcdc03f",
    "0689363343a281a6f7f6f395227668bddc2663eb",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
    "5f458ef23f097c784f12a973b326f7e1254ae0b2",
    "3a3e0f573129c8308332d4b301a9319ee579d85a",
    "5276f4e04dbeabe4dbcddafaa1cd386b912f6345",
    "fa500825fab5fcdba20cb2b940c9ee94ccdfa1dd",
    "43ac0739ce63c14c6eb8ad86cdb73b69ebdff6cd",
    "06fb184d4d0278cfb57df70ec3c264ec3e8886eb",
    "3b3ea5c4220e674064c7603a449f63904c10bac1",
    "c7cf85ccb4ff2f58839e113f1baf903a468b606d",
    "2372e394dd99d69d396327d5a5e172953a8b8c6a",
    "c82961be0fbd56dde68fe49965b5c6ee976ba73e",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16",
    "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
    "39d25fbac331ede57196f7a2d2d5e26e2fbc1c9f",
    "9821af9ce8a56a2c583f1ed938902c20e897048f",
    "9047eb516261b8c9c380d140a43dfdd5d701dee5",
    "2116d0520e528c44fa280f2a5b28594c6d6fc28a",
    "0f7a4337ac96141db4a3400fd8308436d87042f4",
    "34413c2000d9262faa37fde88a72939587edc776",
    "7ee5ce3176a74d217551b5981f809a56c719424b",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "f4ae00c5301c0dd8923783ac6dca2d296c289254": "Ybodychange",
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": "Ymultichange(Yparameterchange,Ybodychange)",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "80691b073fe7c104a8684c0a8900a1657bcdc03f": "Ybodychange",
    "0689363343a281a6f7f6f395227668bddc2663eb": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange",
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b": "Ybodychange",
    "5f458ef23f097c784f12a973b326f7e1254ae0b2": "Ybodychange",
    "3a3e0f573129c8308332d4b301a9319ee579d85a": "Ybodychange",
    "5276f4e04dbeabe4dbcddafaa1cd386b912f6345": "Ybodychange",
    "fa500825fab5fcdba20cb2b940c9ee94ccdfa1dd": "Ybodychange",
    "43ac0739ce63c14c6eb8ad86cdb73b69ebdff6cd": "Ybodychange",
    "06fb184d4d0278cfb57df70ec3c264ec3e8886eb": "Ybodychange",
    "3b3ea5c4220e674064c7603a449f63904c10bac1": "Ybodychange",
    "c7cf85ccb4ff2f58839e113f1baf903a468b606d": "Ybodychange",
    "2372e394dd99d69d396327d5a5e172953a8b8c6a": "Ybodychange",
    "c82961be0fbd56dde68fe49965b5c6ee976ba73e": "Ybodychange",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": "Ybodychange",
    "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d": "Ybodychange",
    "39d25fbac331ede57196f7a2d2d5e26e2fbc1c9f": "Ybodychange",
    "9821af9ce8a56a2c583f1ed938902c20e897048f": "Ybodychange",
    "9047eb516261b8c9c380d140a43dfdd5d701dee5": "Ymultichange(Yexceptionschange,Ybodychange)",
    "2116d0520e528c44fa280f2a5b28594c6d6fc28a": "Ymultichange(Yexceptionschange,Ybodychange)",
    "0f7a4337ac96141db4a3400fd8308436d87042f4": "Ybodychange",
    "34413c2000d9262faa37fde88a72939587edc776": "Ybodychange",
    "7ee5ce3176a74d217551b5981f809a56c719424b": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f4ae00c5301c0dd8923783ac6dca2d296c289254": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7133. Support clearing namespace quota on \u0027/\u0027. Contributed by Ayush Saxena.\"\n",
      "commitDate": "25/02/19 11:06 AM",
      "commitName": "f4ae00c5301c0dd8923783ac6dca2d296c289254",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "5ce332dc9a072f8850ab71ba16898faf8e866c06",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 197.38,
      "commitsBetweenForRepo": 1579,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,58 @@\n   static INodeDirectory unprotectedSetQuota(\n       FSDirectory fsd, INodesInPath iip, long nsQuota,\n       long ssQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n         (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"ssQuota : \" + nsQuota + \" and \" +\n                                          ssQuota);\n     }\n     // sanity check for quota by storage type\n     if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n         nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n       throw new UnsupportedActionException(\n           \"Failed to set quota by storage type because either\" +\n           DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n           fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n           nsQuota);\n     }\n \n     INodeDirectory dirNode \u003d\n         INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());\n+    final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n+    final long oldNsQuota \u003d oldQuota.getNameSpace();\n+    final long oldSsQuota \u003d oldQuota.getStorageSpace();\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n-      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n-    } else { // a directory inode\n-      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n-      final long oldNsQuota \u003d oldQuota.getNameSpace();\n-      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n+      nsQuota \u003d HdfsConstants.QUOTA_DONT_SET;\n+    } else if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+      nsQuota \u003d oldNsQuota;\n+    } // a directory inode\n+    if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+      ssQuota \u003d oldSsQuota;\n+    }\n \n-      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n-        nsQuota \u003d oldNsQuota;\n-      }\n-      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n-        ssQuota \u003d oldSsQuota;\n-      }\n+    // unchanged space/namespace quota\n+    if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n+      return null;\n+    }\n \n-      // unchanged space/namespace quota\n-      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n+    // unchanged type quota\n+    if (type !\u003d null) {\n+      EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n+      if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n         return null;\n       }\n-\n-      // unchanged type quota\n-      if (type !\u003d null) {\n-          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n-          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n-              return null;\n-          }\n-      }\n-\n-      final int latest \u003d iip.getLatestSnapshotId();\n-      dirNode.recordModification(latest);\n-      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n-      return dirNode;\n     }\n+\n+    final int latest \u003d iip.getLatestSnapshotId();\n+    dirNode.recordModification(latest);\n+    dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n+    return dirNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, INodesInPath iip, long nsQuota,\n      long ssQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"ssQuota : \" + nsQuota + \" and \" +\n                                         ssQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    INodeDirectory dirNode \u003d\n        INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());\n    final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n    final long oldNsQuota \u003d oldQuota.getNameSpace();\n    final long oldSsQuota \u003d oldQuota.getStorageSpace();\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      nsQuota \u003d HdfsConstants.QUOTA_DONT_SET;\n    } else if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n      nsQuota \u003d oldNsQuota;\n    } // a directory inode\n    if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n      ssQuota \u003d oldSsQuota;\n    }\n\n    // unchanged space/namespace quota\n    if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n      return null;\n    }\n\n    // unchanged type quota\n    if (type !\u003d null) {\n      EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n      if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n        return null;\n      }\n    }\n\n    final int latest \u003d iip.getLatestSnapshotId();\n    dirNode.recordModification(latest);\n    dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n    return dirNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
      "commitDate": "06/10/16 2:33 PM",
      "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
          "commitDate": "06/10/16 2:33 PM",
          "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "23/09/16 10:37 AM",
          "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 13.16,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)\n+      FSDirectory fsd, INodesInPath iip, long nsQuota,\n+      long ssQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n         (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"ssQuota : \" + nsQuota + \" and \" +\n                                          ssQuota);\n     }\n     // sanity check for quota by storage type\n     if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n         nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n       throw new UnsupportedActionException(\n           \"Failed to set quota by storage type because either\" +\n           DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n           fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n           nsQuota);\n     }\n \n-    String srcs \u003d FSDirectory.normalizePath(src);\n-    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n-    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n+    INodeDirectory dirNode \u003d\n+        INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.getNameSpace();\n       final long oldSsQuota \u003d oldQuota.getStorageSpace();\n \n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         ssQuota \u003d oldSsQuota;\n       }\n \n       // unchanged space/namespace quota\n       if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n         return null;\n       }\n \n       // unchanged type quota\n       if (type !\u003d null) {\n           EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n           if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n               return null;\n           }\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n       dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, INodesInPath iip, long nsQuota,\n      long ssQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"ssQuota : \" + nsQuota + \" and \" +\n                                         ssQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    INodeDirectory dirNode \u003d\n        INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssQuota \u003d oldSsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String, nsQuota-long, ssQuota-long, type-StorageType]",
            "newValue": "[fsd-FSDirectory, iip-INodesInPath, nsQuota-long, ssQuota-long, type-StorageType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
          "commitDate": "06/10/16 2:33 PM",
          "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "23/09/16 10:37 AM",
          "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 13.16,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)\n+      FSDirectory fsd, INodesInPath iip, long nsQuota,\n+      long ssQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n         (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"ssQuota : \" + nsQuota + \" and \" +\n                                          ssQuota);\n     }\n     // sanity check for quota by storage type\n     if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n         nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n       throw new UnsupportedActionException(\n           \"Failed to set quota by storage type because either\" +\n           DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n           fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n           nsQuota);\n     }\n \n-    String srcs \u003d FSDirectory.normalizePath(src);\n-    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n-    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n+    INodeDirectory dirNode \u003d\n+        INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.getNameSpace();\n       final long oldSsQuota \u003d oldQuota.getStorageSpace();\n \n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         ssQuota \u003d oldSsQuota;\n       }\n \n       // unchanged space/namespace quota\n       if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n         return null;\n       }\n \n       // unchanged type quota\n       if (type !\u003d null) {\n           EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n           if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n               return null;\n           }\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n       dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, INodesInPath iip, long nsQuota,\n      long ssQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"ssQuota : \" + nsQuota + \" and \" +\n                                         ssQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    INodeDirectory dirNode \u003d\n        INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssQuota \u003d oldSsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
      "commitDate": "13/02/15 9:01 PM",
      "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
          "commitDate": "13/02/15 9:01 PM",
          "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "11/02/15 10:41 AM",
          "commitNameOld": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n+      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n-          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n+        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n-                                         \"dsQuota : \" + nsQuota + \" and \" +\n-                                         dsQuota);\n+                                         \"ssQuota : \" + nsQuota + \" and \" +\n+                                         ssQuota);\n     }\n     // sanity check for quota by storage type\n     if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n         nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n       throw new UnsupportedActionException(\n           \"Failed to set quota by storage type because either\" +\n           DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n           fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n           nsQuota);\n     }\n \n     String srcs \u003d FSDirectory.normalizePath(src);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.getNameSpace();\n-      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n+      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n \n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n-      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n-        dsQuota \u003d oldDsQuota;\n+      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+        ssQuota \u003d oldSsQuota;\n       }\n \n       // unchanged space/namespace quota\n-      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n+      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n         return null;\n       }\n \n       // unchanged type quota\n       if (type !\u003d null) {\n           EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n-          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n+          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n               return null;\n           }\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n-      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n+      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"ssQuota : \" + nsQuota + \" and \" +\n                                         ssQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssQuota \u003d oldSsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String, nsQuota-long, dsQuota-long, type-StorageType]",
            "newValue": "[fsd-FSDirectory, src-String, nsQuota-long, ssQuota-long, type-StorageType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
          "commitDate": "13/02/15 9:01 PM",
          "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "11/02/15 10:41 AM",
          "commitNameOld": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n+      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n-          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n+        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n-                                         \"dsQuota : \" + nsQuota + \" and \" +\n-                                         dsQuota);\n+                                         \"ssQuota : \" + nsQuota + \" and \" +\n+                                         ssQuota);\n     }\n     // sanity check for quota by storage type\n     if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n         nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n       throw new UnsupportedActionException(\n           \"Failed to set quota by storage type because either\" +\n           DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n           fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n           nsQuota);\n     }\n \n     String srcs \u003d FSDirectory.normalizePath(src);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.getNameSpace();\n-      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n+      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n \n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n-      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n-        dsQuota \u003d oldDsQuota;\n+      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+        ssQuota \u003d oldSsQuota;\n       }\n \n       // unchanged space/namespace quota\n-      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n+      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n         return null;\n       }\n \n       // unchanged type quota\n       if (type !\u003d null) {\n           EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n-          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n+          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n               return null;\n           }\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n-      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n+      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (ssQuota \u003c 0 \u0026\u0026 ssQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          ssQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"ssQuota : \" + nsQuota + \" and \" +\n                                         ssQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldSsQuota \u003d oldQuota.getStorageSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssQuota \u003d oldSsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldSsQuota \u003d\u003d ssQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d ssQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, ssQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 54.97,
          "commitsBetweenForRepo": 369,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n-      SnapshotAccessControlException {\n+      SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n+    // sanity check for quota by storage type\n+    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n+        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n+      throw new UnsupportedActionException(\n+          \"Failed to set quota by storage type because either\" +\n+          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n+          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n+          nsQuota);\n+    }\n \n     String srcs \u003d FSDirectory.normalizePath(src);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n-      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n-      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n-      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n+      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n+      final long oldNsQuota \u003d oldQuota.getNameSpace();\n+      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n+\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }\n-      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n+\n+      // unchanged space/namespace quota\n+      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n+      // unchanged type quota\n+      if (type !\u003d null) {\n+          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n+          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n+              return null;\n+          }\n+      }\n+\n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n-      dirNode.setQuota(nsQuota, dsQuota);\n+      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String, nsQuota-long, dsQuota-long]",
            "newValue": "[fsd-FSDirectory, src-String, nsQuota-long, dsQuota-long, type-StorageType]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 54.97,
          "commitsBetweenForRepo": 369,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n-      SnapshotAccessControlException {\n+      SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n+    // sanity check for quota by storage type\n+    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n+        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n+      throw new UnsupportedActionException(\n+          \"Failed to set quota by storage type because either\" +\n+          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n+          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n+          nsQuota);\n+    }\n \n     String srcs \u003d FSDirectory.normalizePath(src);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n-      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n-      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n-      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n+      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n+      final long oldNsQuota \u003d oldQuota.getNameSpace();\n+      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n+\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }\n-      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n+\n+      // unchanged space/namespace quota\n+      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n+      // unchanged type quota\n+      if (type !\u003d null) {\n+          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n+          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n+              return null;\n+          }\n+      }\n+\n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n-      dirNode.setQuota(nsQuota, dsQuota);\n+      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[FileNotFoundException, PathIsNotDirectoryException, QuotaExceededException, UnresolvedLinkException, SnapshotAccessControlException]",
            "newValue": "[FileNotFoundException, PathIsNotDirectoryException, QuotaExceededException, UnresolvedLinkException, SnapshotAccessControlException, UnsupportedActionException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 54.97,
          "commitsBetweenForRepo": 369,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,61 @@\n   static INodeDirectory unprotectedSetQuota(\n-      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n-      SnapshotAccessControlException {\n+      SnapshotAccessControlException, UnsupportedActionException {\n     assert fsd.hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n+    // sanity check for quota by storage type\n+    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n+        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n+      throw new UnsupportedActionException(\n+          \"Failed to set quota by storage type because either\" +\n+          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n+          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n+          nsQuota);\n+    }\n \n     String srcs \u003d FSDirectory.normalizePath(src);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n-      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n-      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n-      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n+      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n+      final long oldNsQuota \u003d oldQuota.getNameSpace();\n+      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n+\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }\n-      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n+\n+      // unchanged space/namespace quota\n+      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n+      // unchanged type quota\n+      if (type !\u003d null) {\n+          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n+          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n+              return null;\n+          }\n+      }\n+\n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n-      dirNode.setQuota(nsQuota, dsQuota);\n+      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota, StorageType type)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException, UnsupportedActionException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    // sanity check for quota by storage type\n    if ((type !\u003d null) \u0026\u0026 (!fsd.isQuotaByStorageTypeEnabled() ||\n        nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new UnsupportedActionException(\n          \"Failed to set quota by storage type because either\" +\n          DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY + \" is set to \" +\n          fsd.isQuotaByStorageTypeEnabled() + \" or nsQuota value is illegal \" +\n          nsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final QuotaCounts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.getNameSpace();\n      final long oldDsQuota \u003d oldQuota.getDiskSpace();\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n\n      // unchanged space/namespace quota\n      if (type \u003d\u003d null \u0026\u0026 oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      // unchanged type quota\n      if (type !\u003d null) {\n          EnumCounters\u003cStorageType\u003e oldTypeQuotas \u003d oldQuota.getTypeSpaces();\n          if (oldTypeQuotas !\u003d null \u0026\u0026 oldTypeQuotas.get(type) \u003d\u003d dsQuota) {\n              return null;\n          }\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(fsd.getBlockStoragePolicySuite(), nsQuota, dsQuota, type);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "15/12/14 10:40 AM",
      "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n+  static INodeDirectory unprotectedSetQuota(\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     // sanity check\n-    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n-         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n+    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n+        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n-    \n-    String srcs \u003d normalizePath(src);\n-    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n+\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n-      }        \n+      }\n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
            "oldMethodName": "unprotectedSetQuota",
            "newMethodName": "unprotectedSetQuota"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n+  static INodeDirectory unprotectedSetQuota(\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     // sanity check\n-    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n-         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n+    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n+        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n-    \n-    String srcs \u003d normalizePath(src);\n-    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n+\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n-      }        \n+      }\n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n+  static INodeDirectory unprotectedSetQuota(\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     // sanity check\n-    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n-         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n+    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n+        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n-    \n-    String srcs \u003d normalizePath(src);\n-    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n+\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n-      }        \n+      }\n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n+  static INodeDirectory unprotectedSetQuota(\n+      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     // sanity check\n-    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n-         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n+    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n+        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n-    \n-    String srcs \u003d normalizePath(src);\n-    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n+\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n-      }        \n+      }\n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeDirectory unprotectedSetQuota(\n      FSDirectory fsd, String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert fsd.hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) ||\n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n\n    String srcs \u003d FSDirectory.normalizePath(src);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }\n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[src-String, nsQuota-long, dsQuota-long]",
            "newValue": "[fsd-FSDirectory, src-String, nsQuota-long, dsQuota-long]"
          }
        }
      ]
    },
    "80691b073fe7c104a8684c0a8900a1657bcdc03f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6838. Code cleanup for unnecessary INode replacement. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/08/14 2:28 PM",
      "commitName": "80691b073fe7c104a8684c0a8900a1657bcdc03f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "04/08/14 8:44 AM",
      "commitNameOld": "431857d09dac2a9554f7ee8a6a92ae05844d0066",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 7.24,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n-      dirNode \u003d dirNode.recordModification(latest);\n+      dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "0689363343a281a6f7f6f395227668bddc2663eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6304. Consolidate the logic of path resolution in FSDirectory. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1591411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/14 10:44 AM",
      "commitName": "0689363343a281a6f7f6f395227668bddc2663eb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/04/14 7:05 PM",
      "commitNameOld": "10a037cccb00c9f791da394bf2dc05985fb80612",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.65,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n-    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n+    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final int latest \u003d iip.getLatestSnapshotId();\n       dirNode \u003d dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode \u003d dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/12/13 2:13 AM",
      "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 24.44,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n-      final Snapshot latest \u003d iip.getLatestSnapshot();\n+      final int latest \u003d iip.getLatestSnapshotId();\n       dirNode \u003d dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final int latest \u003d iip.getLatestSnapshotId();\n      dirNode \u003d dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/12/13 9:41 AM",
      "commitNameOld": "18159be495f96bde4bd4fa2cacb14aafb87e87bc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 11.69,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n       if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n         return null;\n       }\n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n-      dirNode \u003d dirNode.recordModification(latest, inodeMap);\n+      dirNode \u003d dirNode.recordModification(latest);\n       dirNode.setQuota(nsQuota, dsQuota);\n       return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      dirNode \u003d dirNode.recordModification(latest);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5286. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithQuota with DirectoryWithQuotaFeature.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/13 10:33 AM",
      "commitName": "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "21/11/13 5:39 PM",
      "commitNameOld": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,40 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n       final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n       final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n+      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n+        return null;\n+      }\n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n-      if (dirNode instanceof INodeDirectoryWithQuota) {\n-        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n-        Quota.Counts counts \u003d null;\n-        if (!quotaNode.isQuotaSet()) {\n-          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n-          // been set yet\n-          counts \u003d quotaNode.computeQuotaUsage();\n-        }\n-        // a directory with quota; so set the quota to the new value\n-        quotaNode.setQuota(nsQuota, dsQuota);\n-        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n-          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n-              counts.get(Quota.DISKSPACE));\n-        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n-          // do not replace the node if the node is a snapshottable directory\n-          // without snapshots\n-          if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n-            // will not come here for root because root is snapshottable and\n-            // root\u0027s nsQuota is always set\n-            return quotaNode.replaceSelf4INodeDirectory(inodeMap);\n-          }\n-        }\n-      } else {\n-        // a non-quota directory; so replace it with a directory with quota\n-        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota, inodeMap);\n-      }\n-      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n+      dirNode \u003d dirNode.recordModification(latest, inodeMap);\n+      dirNode.setQuota(nsQuota, dsQuota);\n+      return dirNode;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n      if (oldNsQuota \u003d\u003d nsQuota \u0026\u0026 oldDsQuota \u003d\u003d dsQuota) {\n        return null;\n      }\n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      dirNode \u003d dirNode.recordModification(latest, inodeMap);\n      dirNode.setQuota(nsQuota, dsQuota);\n      return dirNode;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "5f458ef23f097c784f12a973b326f7e1254ae0b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5531. Combine the getNsQuota() and getDsQuota() methods in INode.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544018 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/11/13 7:17 PM",
      "commitName": "5f458ef23f097c784f12a973b326f7e1254ae0b2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/11/13 8:49 AM",
      "commitNameOld": "fe67e30bc2794e7ff073cf938ee80eba805d1e69",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.44,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n-      long oldNsQuota \u003d dirNode.getNsQuota();\n-      long oldDsQuota \u003d dirNode.getDsQuota();\n+      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n+      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n+      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) {\n         INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n         Quota.Counts counts \u003d null;\n         if (!quotaNode.isQuotaSet()) {\n           // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n           // been set yet\n           counts \u003d quotaNode.computeQuotaUsage();\n         }\n         // a directory with quota; so set the quota to the new value\n         quotaNode.setQuota(nsQuota, dsQuota);\n         if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n           quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n               counts.get(Quota.DISKSPACE));\n         } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // do not replace the node if the node is a snapshottable directory\n           // without snapshots\n           if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n             // will not come here for root because root is snapshottable and\n             // root\u0027s nsQuota is always set\n             return quotaNode.replaceSelf4INodeDirectory(inodeMap);\n           }\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota, inodeMap);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      final Quota.Counts oldQuota \u003d dirNode.getQuotaCounts();\n      final long oldNsQuota \u003d oldQuota.get(Quota.NAMESPACE);\n      final long oldDsQuota \u003d oldQuota.get(Quota.DISKSPACE);\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) {\n        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n        Quota.Counts counts \u003d null;\n        if (!quotaNode.isQuotaSet()) {\n          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n          // been set yet\n          counts \u003d quotaNode.computeQuotaUsage();\n        }\n        // a directory with quota; so set the quota to the new value\n        quotaNode.setQuota(nsQuota, dsQuota);\n        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n              counts.get(Quota.DISKSPACE));\n        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // do not replace the node if the node is a snapshottable directory\n          // without snapshots\n          if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n            // will not come here for root because root is snapshottable and\n            // root\u0027s nsQuota is always set\n            return quotaNode.replaceSelf4INodeDirectory(inodeMap);\n          }\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota, inodeMap);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "3a3e0f573129c8308332d4b301a9319ee579d85a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4760. Update inodeMap after node replacement.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1477827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/13 2:05 PM",
      "commitName": "3a3e0f573129c8308332d4b301a9319ee579d85a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/04/13 5:05 PM",
      "commitNameOld": "5276f4e04dbeabe4dbcddafaa1cd386b912f6345",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.87,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,60 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) {\n         INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n         Quota.Counts counts \u003d null;\n         if (!quotaNode.isQuotaSet()) {\n           // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n           // been set yet\n           counts \u003d quotaNode.computeQuotaUsage();\n         }\n         // a directory with quota; so set the quota to the new value\n         quotaNode.setQuota(nsQuota, dsQuota);\n         if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n           quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n               counts.get(Quota.DISKSPACE));\n         } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // do not replace the node if the node is a snapshottable directory\n           // without snapshots\n           if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n             // will not come here for root because root is snapshottable and\n             // root\u0027s nsQuota is always set\n-            INodeDirectory newNode \u003d quotaNode.replaceSelf4INodeDirectory();\n-            // update the inodeMap\n-            inodeMap.put(newNode);\n-            return newNode;\n-          } \n+            return quotaNode.replaceSelf4INodeDirectory(inodeMap);\n+          }\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n-        INodeDirectory newNode \u003d dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n-        // update the inodeMap\n-        inodeMap.put(newNode);\n-        return newNode;\n+        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota, inodeMap);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) {\n        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n        Quota.Counts counts \u003d null;\n        if (!quotaNode.isQuotaSet()) {\n          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n          // been set yet\n          counts \u003d quotaNode.computeQuotaUsage();\n        }\n        // a directory with quota; so set the quota to the new value\n        quotaNode.setQuota(nsQuota, dsQuota);\n        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n              counts.get(Quota.DISKSPACE));\n        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // do not replace the node if the node is a snapshottable directory\n          // without snapshots\n          if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n            // will not come here for root because root is snapshottable and\n            // root\u0027s nsQuota is always set\n            return quotaNode.replaceSelf4INodeDirectory(inodeMap);\n          }\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota, inodeMap);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "5276f4e04dbeabe4dbcddafaa1cd386b912f6345": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4767. If a directory is snapshottable, do not replace it when clearing quota.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1476454 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 5:05 PM",
      "commitName": "5276f4e04dbeabe4dbcddafaa1cd386b912f6345",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/04/13 4:50 PM",
      "commitNameOld": "60341dae1922c37acadc8629bff7443a6a0871cb",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,66 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) {\n         INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n         Quota.Counts counts \u003d null;\n         if (!quotaNode.isQuotaSet()) {\n           // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n           // been set yet\n           counts \u003d quotaNode.computeQuotaUsage();\n         }\n         // a directory with quota; so set the quota to the new value\n         quotaNode.setQuota(nsQuota, dsQuota);\n         if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n           quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n               counts.get(Quota.DISKSPACE));\n         } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n-          // will not come here for root because root\u0027s nsQuota is always set\n-          INodeDirectory newNode \u003d quotaNode.replaceSelf4INodeDirectory();\n-          // update the inodeMap\n-          inodeMap.put(newNode);\n-          return newNode;\n+          // do not replace the node if the node is a snapshottable directory\n+          // without snapshots\n+          if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n+            // will not come here for root because root is snapshottable and\n+            // root\u0027s nsQuota is always set\n+            INodeDirectory newNode \u003d quotaNode.replaceSelf4INodeDirectory();\n+            // update the inodeMap\n+            inodeMap.put(newNode);\n+            return newNode;\n+          } \n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectory newNode \u003d dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n         // update the inodeMap\n         inodeMap.put(newNode);\n         return newNode;\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) {\n        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n        Quota.Counts counts \u003d null;\n        if (!quotaNode.isQuotaSet()) {\n          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n          // been set yet\n          counts \u003d quotaNode.computeQuotaUsage();\n        }\n        // a directory with quota; so set the quota to the new value\n        quotaNode.setQuota(nsQuota, dsQuota);\n        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n              counts.get(Quota.DISKSPACE));\n        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // do not replace the node if the node is a snapshottable directory\n          // without snapshots\n          if (!(quotaNode instanceof INodeDirectoryWithSnapshot)) {\n            // will not come here for root because root is snapshottable and\n            // root\u0027s nsQuota is always set\n            INodeDirectory newNode \u003d quotaNode.replaceSelf4INodeDirectory();\n            // update the inodeMap\n            inodeMap.put(newNode);\n            return newNode;\n          } \n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectory newNode \u003d dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n        // update the inodeMap\n        inodeMap.put(newNode);\n        return newNode;\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "fa500825fab5fcdba20cb2b940c9ee94ccdfa1dd": {
      "type": "Ybodychange",
      "commitMessage": "Merge r1471229 through r1476009 from trunk.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1476011 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 6:19 PM",
      "commitName": "fa500825fab5fcdba20cb2b940c9ee94ccdfa1dd",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/04/13 6:05 PM",
      "commitNameOld": "76b80b48ec3850a2873c2f1e5f319150bf3ccd03",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,61 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) {\n         INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n         Quota.Counts counts \u003d null;\n         if (!quotaNode.isQuotaSet()) {\n           // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n           // been set yet\n           counts \u003d quotaNode.computeQuotaUsage();\n         }\n         // a directory with quota; so set the quota to the new value\n         quotaNode.setQuota(nsQuota, dsQuota);\n         if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n           quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n               counts.get(Quota.DISKSPACE));\n         } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n-          return quotaNode.replaceSelf4INodeDirectory();\n+          INodeDirectory newNode \u003d quotaNode.replaceSelf4INodeDirectory();\n+          // update the inodeMap\n+          inodeMap.put(newNode);\n+          return newNode;\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n-        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n+        INodeDirectory newNode \u003d dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n+        // update the inodeMap\n+        inodeMap.put(newNode);\n+        return newNode;\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) {\n        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n        Quota.Counts counts \u003d null;\n        if (!quotaNode.isQuotaSet()) {\n          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n          // been set yet\n          counts \u003d quotaNode.computeQuotaUsage();\n        }\n        // a directory with quota; so set the quota to the new value\n        quotaNode.setQuota(nsQuota, dsQuota);\n        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n              counts.get(Quota.DISKSPACE));\n        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d quotaNode.replaceSelf4INodeDirectory();\n          // update the inodeMap\n          inodeMap.put(newNode);\n          return newNode;\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectory newNode \u003d dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n        // update the inodeMap\n        inodeMap.put(newNode);\n        return newNode;\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "43ac0739ce63c14c6eb8ad86cdb73b69ebdff6cd": {
      "type": "Ybodychange",
      "commitMessage": "svn merge -c -1476006 . for reverting the previous trunk merge.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1476008 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 6:02 PM",
      "commitName": "43ac0739ce63c14c6eb8ad86cdb73b69ebdff6cd",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/04/13 5:55 PM",
      "commitNameOld": "a259e0ba79dbae55e4faf99e457949e95b9b24ef",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,55 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) {\n         INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n         Quota.Counts counts \u003d null;\n         if (!quotaNode.isQuotaSet()) {\n           // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n           // been set yet\n           counts \u003d quotaNode.computeQuotaUsage();\n         }\n         // a directory with quota; so set the quota to the new value\n         quotaNode.setQuota(nsQuota, dsQuota);\n         if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n           quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n               counts.get(Quota.DISKSPACE));\n         } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           return quotaNode.replaceSelf4INodeDirectory();\n-          // update the inodeMap\n-          inodeMap.put(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n-        // update the inodeMap\n-        inodeMap.put(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) {\n        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n        Quota.Counts counts \u003d null;\n        if (!quotaNode.isQuotaSet()) {\n          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n          // been set yet\n          counts \u003d quotaNode.computeQuotaUsage();\n        }\n        // a directory with quota; so set the quota to the new value\n        quotaNode.setQuota(nsQuota, dsQuota);\n        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n              counts.get(Quota.DISKSPACE));\n        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          return quotaNode.replaceSelf4INodeDirectory();\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "06fb184d4d0278cfb57df70ec3c264ec3e8886eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4757. Update FSDirectory#inodeMap when replacing an INodeDirectory while setting quota.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476005 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 5:50 PM",
      "commitName": "06fb184d4d0278cfb57df70ec3c264ec3e8886eb",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/04/13 5:10 PM",
      "commitNameOld": "980e6c54bab4ffc87e168cd5c217fef44c72a878",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n     final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n     final INode[] inodes \u003d inodesInPath.getINodes();\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n+          // update the inodeMap\n+          inodeMap.put(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n+        // update the inodeMap\n+        inodeMap.put(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n    final INode[] inodes \u003d inodesInPath.getINodes();\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n          // update the inodeMap\n          inodeMap.put(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n        // update the inodeMap\n        inodeMap.put(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "3b3ea5c4220e674064c7603a449f63904c10bac1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/03/13 7:41 PM",
      "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/03/13 8:45 PM",
      "commitNameOld": "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,55 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n-      if (dirNode instanceof INodeDirectoryWithQuota) { \n+      if (dirNode instanceof INodeDirectoryWithQuota) {\n+        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n+        Quota.Counts counts \u003d null;\n+        if (!quotaNode.isQuotaSet()) {\n+          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n+          // been set yet\n+          counts \u003d quotaNode.computeQuotaUsage();\n+        }\n         // a directory with quota; so set the quota to the new value\n-        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n-        if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n+        quotaNode.setQuota(nsQuota, dsQuota);\n+        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n+          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n+              counts.get(Quota.DISKSPACE));\n+        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n-          return dirNode.replaceSelf4INodeDirectory();\n+          return quotaNode.replaceSelf4INodeDirectory();\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) {\n        INodeDirectoryWithQuota quotaNode \u003d (INodeDirectoryWithQuota) dirNode;\n        Quota.Counts counts \u003d null;\n        if (!quotaNode.isQuotaSet()) {\n          // dirNode must be an INodeDirectoryWithSnapshot whose quota has not\n          // been set yet\n          counts \u003d quotaNode.computeQuotaUsage();\n        }\n        // a directory with quota; so set the quota to the new value\n        quotaNode.setQuota(nsQuota, dsQuota);\n        if (quotaNode.isQuotaSet() \u0026\u0026 counts !\u003d null) {\n          quotaNode.setSpaceConsumed(counts.get(Quota.NAMESPACE),\n              counts.get(Quota.DISKSPACE));\n        } else if (!quotaNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          return quotaNode.replaceSelf4INodeDirectory();\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "c7cf85ccb4ff2f58839e113f1baf903a468b606d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4507. Update quota verification for snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1451081 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/13 7:08 PM",
      "commitName": "c7cf85ccb4ff2f58839e113f1baf903a468b606d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/02/13 2:04 PM",
      "commitNameOld": "e2a618e1cc3fb99115547af6540932860dc6766e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n-        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n+        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           return dirNode.replaceSelf4INodeDirectory();\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          return dirNode.replaceSelf4INodeDirectory();\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "2372e394dd99d69d396327d5a5e172953a8b8c6a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4189. Renames the getMutableXxx methods to getXxx4Write and fix a bug that some getExistingPathINodes calls should be getINodesInPath4Write.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441193 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/13 1:13 PM",
      "commitName": "2372e394dd99d69d396327d5a5e172953a8b8c6a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/01/13 4:01 PM",
      "commitNameOld": "a3bf2083867db5d848ea14f145d120f02b820af2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.88,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n-    final INodesInPath iip \u003d rootDir.getMutableINodesInPath(srcs, true);\n+    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n         if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           return dirNode.replaceSelf4INodeDirectory();\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getINodesInPath4Write(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n        if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          return dirNode.replaceSelf4INodeDirectory();\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "c82961be0fbd56dde68fe49965b5c6ee976ba73e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4330. Support snapshots up to the snapshot limit.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1426432 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/12/12 12:49 AM",
      "commitName": "c82961be0fbd56dde68fe49965b5c6ee976ba73e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "20/12/12 5:30 PM",
      "commitNameOld": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.3,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INodesInPath iip \u003d rootDir.getMutableINodesInPath(srcs, true);\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n         if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           return dirNode.replaceSelf4INodeDirectory();\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n-        return dirNode.replaceSelf4Quota(latest, oldNsQuota, oldDsQuota);\n+        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getMutableINodesInPath(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n        if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          return dirNode.replaceSelf4INodeDirectory();\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, nsQuota, dsQuota);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/12 5:30 PM",
      "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/12/12 7:40 PM",
      "commitNameOld": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,45 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n-    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n-        .getINodes();\n-    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n+    final INodesInPath iip \u003d rootDir.getMutableINodesInPath(srcs, true);\n+    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n+      final Snapshot latest \u003d iip.getLatestSnapshot();\n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n-        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n-        if (!dirNode.isQuotaSet()) {\n+        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n+        if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n           // will not come here for root because root\u0027s nsQuota is always set\n-          INodeDirectory newNode \u003d new INodeDirectory(dirNode, true);\n-          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n-          dirNode \u003d newNode;\n-          parent.replaceChild(newNode);\n+          return dirNode.replaceSelf4INodeDirectory();\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n-        final INodeDirectoryWithQuota newNode \u003d new INodeDirectoryWithQuota(\n-            dirNode, true, nsQuota, dsQuota);\n-        // non-root directory node; parent !\u003d null\n-        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n-        dirNode \u003d newNode;\n-        parent.replaceChild(newNode);\n+        return dirNode.replaceSelf4Quota(latest, oldNsQuota, oldDsQuota);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INodesInPath iip \u003d rootDir.getMutableINodesInPath(srcs, true);\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(iip.getLastINode(), srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      final Snapshot latest \u003d iip.getLatestSnapshot();\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);\n        if (!dirNode.isQuotaSet() \u0026\u0026 latest \u003d\u003d null) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          return dirNode.replaceSelf4INodeDirectory();\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        return dirNode.replaceSelf4Quota(latest, oldNsQuota, oldDsQuota);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4317. Change INode and its subclasses to support HDFS-4103.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1422748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/12 7:40 PM",
      "commitName": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/12/12 3:54 PM",
      "commitNameOld": "39d25fbac331ede57196f7a2d2d5e26e2fbc1c9f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n         .getINodes();\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode, true);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n-        INodeDirectoryWithQuota newNode \u003d \n-          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n+        final INodeDirectoryWithQuota newNode \u003d new INodeDirectoryWithQuota(\n+            dirNode, true, nsQuota, dsQuota);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n        .getINodes();\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode, true);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        final INodeDirectoryWithQuota newNode \u003d new INodeDirectoryWithQuota(\n            dirNode, true, nsQuota, dsQuota);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "39d25fbac331ede57196f7a2d2d5e26e2fbc1c9f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4293. Fix TestSnapshot failure. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1419882 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 3:54 PM",
      "commitName": "39d25fbac331ede57196f7a2d2d5e26e2fbc1c9f",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/12/12 7:37 PM",
      "commitNameOld": "f4a723249eebe019de0188b715904bbc35e34fbf",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n     final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n         .getINodes();\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n-          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n+          INodeDirectory newNode \u003d new INodeDirectory(dirNode, true);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n        .getINodes();\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode, true);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "9821af9ce8a56a2c583f1ed938902c20e897048f": {
      "type": "Ybodychange",
      "commitMessage": "Reverting the previous merge r1416603 which committed some extra changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/12 2:43 PM",
      "commitName": "9821af9ce8a56a2c583f1ed938902c20e897048f",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "03/12/12 10:04 AM",
      "commitNameOld": "d500d59cbef51f1b0b0291995893b85a139bcec9",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n       throws FileNotFoundException, PathIsNotDirectoryException,\n       QuotaExceededException, UnresolvedLinkException,\n       SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n-    final INodesInPath inodesInPath \u003d rootDir.getMutableINodesInPath(srcs, true);\n-    final INode[] inodes \u003d inodesInPath.getINodes();\n+    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n+        .getINodes();\n     INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n     if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n-          parent.replaceChild(newNode, inodesInPath.getLatestSnapshot());\n+          parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n-        parent.replaceChild(newNode, inodesInPath.getLatestSnapshot());\n+        parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException,\n      SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n        .getINodes();\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "9047eb516261b8c9c380d140a43dfdd5d701dee5": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-4209. Clean up the addNode/addChild/addChildNoQuotaCheck methods in FSDirectory and INodeDirectory.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414447 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/12 2:36 PM",
      "commitName": "9047eb516261b8c9c380d140a43dfdd5d701dee5",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-4209. Clean up the addNode/addChild/addChildNoQuotaCheck methods in FSDirectory and INodeDirectory.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414447 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/11/12 2:36 PM",
          "commitName": "9047eb516261b8c9c380d140a43dfdd5d701dee5",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/11/12 11:27 AM",
          "commitNameOld": "0f1899ee19ab13d5128801063b0ce17612c0e96f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,53 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n-    throws FileNotFoundException, QuotaExceededException, \n-      UnresolvedLinkException {\n+      throws FileNotFoundException, PathIsNotDirectoryException,\n+      QuotaExceededException, UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n     final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n     final INode[] inodes \u003d inodesInPath.getINodes();\n-    INode targetNode \u003d inodes[inodes.length-1];\n-    if (targetNode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n-    } else if (!targetNode.isDirectory()) {\n-      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n-    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n+    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n+    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n-      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n    final INode[] inodes \u003d inodesInPath.getINodes();\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[FileNotFoundException, QuotaExceededException, UnresolvedLinkException]",
            "newValue": "[FileNotFoundException, PathIsNotDirectoryException, QuotaExceededException, UnresolvedLinkException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4209. Clean up the addNode/addChild/addChildNoQuotaCheck methods in FSDirectory and INodeDirectory.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414447 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/11/12 2:36 PM",
          "commitName": "9047eb516261b8c9c380d140a43dfdd5d701dee5",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/11/12 11:27 AM",
          "commitNameOld": "0f1899ee19ab13d5128801063b0ce17612c0e96f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,53 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n-    throws FileNotFoundException, QuotaExceededException, \n-      UnresolvedLinkException {\n+      throws FileNotFoundException, PathIsNotDirectoryException,\n+      QuotaExceededException, UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n     final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n     final INode[] inodes \u003d inodesInPath.getINodes();\n-    INode targetNode \u003d inodes[inodes.length-1];\n-    if (targetNode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n-    } else if (!targetNode.isDirectory()) {\n-      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n-    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n+    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n+    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n-      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, PathIsNotDirectoryException,\n      QuotaExceededException, UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n    final INode[] inodes \u003d inodesInPath.getINodes();\n    INodeDirectory dirNode \u003d INodeDirectory.valueOf(inodes[inodes.length-1], srcs);\n    if (dirNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "2116d0520e528c44fa280f2a5b28594c6d6fc28a": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-4148. Disallow write/modify operations on files and directories in a snapshot. Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1409023 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/12 3:26 PM",
      "commitName": "2116d0520e528c44fa280f2a5b28594c6d6fc28a",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-4148. Disallow write/modify operations on files and directories in a snapshot. Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1409023 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/11/12 3:26 PM",
          "commitName": "2116d0520e528c44fa280f2a5b28594c6d6fc28a",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "13/11/12 11:59 AM",
          "commitNameOld": "099762a0bc960066f8157fdd1e495b6752a6f802",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n-    throws FileNotFoundException, QuotaExceededException, \n-      UnresolvedLinkException {\n+      throws FileNotFoundException, QuotaExceededException,\n+      UnresolvedLinkException, SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n-\n-    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n-    final INode[] inodes \u003d inodesInPath.getINodes();\n+    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n+        .getINodes();\n     INode targetNode \u003d inodes[inodes.length-1];\n     if (targetNode \u003d\u003d null) {\n       throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n     } else if (!targetNode.isDirectory()) {\n       throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n     } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, QuotaExceededException,\n      UnresolvedLinkException, SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n        .getINodes();\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[FileNotFoundException, QuotaExceededException, UnresolvedLinkException]",
            "newValue": "[FileNotFoundException, QuotaExceededException, UnresolvedLinkException, SnapshotAccessControlException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4148. Disallow write/modify operations on files and directories in a snapshot. Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1409023 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/11/12 3:26 PM",
          "commitName": "2116d0520e528c44fa280f2a5b28594c6d6fc28a",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "13/11/12 11:59 AM",
          "commitNameOld": "099762a0bc960066f8157fdd1e495b6752a6f802",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n-    throws FileNotFoundException, QuotaExceededException, \n-      UnresolvedLinkException {\n+      throws FileNotFoundException, QuotaExceededException,\n+      UnresolvedLinkException, SnapshotAccessControlException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n-\n-    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n-    final INode[] inodes \u003d inodesInPath.getINodes();\n+    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n+        .getINodes();\n     INode targetNode \u003d inodes[inodes.length-1];\n     if (targetNode \u003d\u003d null) {\n       throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n     } else if (!targetNode.isDirectory()) {\n       throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n     } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n      throws FileNotFoundException, QuotaExceededException,\n      UnresolvedLinkException, SnapshotAccessControlException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n    final INode[] inodes \u003d rootDir.getMutableINodesInPath(srcs, true)\n        .getINodes();\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "0f7a4337ac96141db4a3400fd8308436d87042f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4165. Faulty sanity check in FsDirectory.unprotectedSetQuota. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407245 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/12 11:54 AM",
      "commitName": "0f7a4337ac96141db4a3400fd8308436d87042f4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "06/11/12 1:04 PM",
      "commitNameOld": "1734215a10fd93e38849ed0235b5e026b7f50f83",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n     throws FileNotFoundException, QuotaExceededException, \n       UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n-         nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n+         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n-          dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n+          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n     final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n     final INode[] inodes \u003d inodesInPath.getINodes();\n     INode targetNode \u003d inodes[inodes.length-1];\n     if (targetNode \u003d\u003d null) {\n       throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n     } else if (!targetNode.isDirectory()) {\n       throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n     } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota !\u003d HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota !\u003d HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n    final INode[] inodes \u003d inodesInPath.getINodes();\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "34413c2000d9262faa37fde88a72939587edc776": {
      "type": "Ybodychange",
      "commitMessage": "svn merge -c 1406006 from trunk for HDFS-4151. Change the methods in FSDirectory to pass INodesInPath instead of INode[] as a parameter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1406014 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/11/12 3:56 PM",
      "commitName": "34413c2000d9262faa37fde88a72939587edc776",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/11/12 5:22 PM",
      "commitNameOld": "b3bc2fb76e1aca8e7327d1d1a6e4c8a013c575de",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n     throws FileNotFoundException, QuotaExceededException, \n       UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n-    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n+    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n+    final INode[] inodes \u003d inodesInPath.getINodes();\n     INode targetNode \u003d inodes[inodes.length-1];\n     if (targetNode \u003d\u003d null) {\n       throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n     } else if (!targetNode.isDirectory()) {\n       throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n     } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n    final INode[] inodes \u003d inodesInPath.getINodes();\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "7ee5ce3176a74d217551b5981f809a56c719424b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4151. Change the methods in FSDirectory to pass INodesInPath instead of INode[] as a parameter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/11/12 3:26 PM",
      "commitName": "7ee5ce3176a74d217551b5981f809a56c719424b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/11/12 5:20 PM",
      "commitNameOld": "d174f574bafcfefc635c64a47f258b1ce5d5c84e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n     throws FileNotFoundException, QuotaExceededException, \n       UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n     if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n         (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n           dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n-    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n+    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n+    final INode[] inodes \u003d inodesInPath.getINodes();\n     INode targetNode \u003d inodes[inodes.length-1];\n     if (targetNode \u003d\u003d null) {\n       throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n     } else if (!targetNode.isDirectory()) {\n       throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n     } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n       if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    final INodesInPath inodesInPath \u003d rootDir.getExistingPathINodes(src, true);\n    final INode[] inodes \u003d inodesInPath.getINodes();\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n     throws FileNotFoundException, QuotaExceededException, \n       UnresolvedLinkException {\n     assert hasWriteLock();\n     // sanity check\n-    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n-         nsQuota \u003c FSConstants.QUOTA_RESET) || \n-        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n-          dsQuota \u003c FSConstants.QUOTA_RESET)) {\n+    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n+         nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n+        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n+          dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n       throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                          \"dsQuota : \" + nsQuota + \" and \" +\n                                          dsQuota);\n     }\n     \n     String srcs \u003d normalizePath(src);\n \n     INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n     INode targetNode \u003d inodes[inodes.length-1];\n     if (targetNode \u003d\u003d null) {\n       throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n     } else if (!targetNode.isDirectory()) {\n       throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n-    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d FSConstants.QUOTA_RESET) {\n+    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n     } else { // a directory inode\n       INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n       long oldNsQuota \u003d dirNode.getNsQuota();\n       long oldDsQuota \u003d dirNode.getDsQuota();\n-      if (nsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n+      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsQuota \u003d oldNsQuota;\n       }\n-      if (dsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n+      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         dsQuota \u003d oldDsQuota;\n       }        \n \n       if (dirNode instanceof INodeDirectoryWithQuota) { \n         // a directory with quota; so set the quota to the new value\n         ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n         if (!dirNode.isQuotaSet()) {\n           // will not come here for root because root\u0027s nsQuota is always set\n           INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n           INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n           dirNode \u003d newNode;\n           parent.replaceChild(newNode);\n         }\n       } else {\n         // a non-quota directory; so replace it with a directory with quota\n         INodeDirectoryWithQuota newNode \u003d \n           new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n         // non-root directory node; parent !\u003d null\n         INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n         dirNode \u003d newNode;\n         parent.replaceChild(newNode);\n       }\n       return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota \u003c HdfsConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota \u003c HdfsConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota \u003c FSConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota \u003c FSConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d FSConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota \u003c FSConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota \u003c FSConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d FSConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,57 @@\n+  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n+    throws FileNotFoundException, QuotaExceededException, \n+      UnresolvedLinkException {\n+    assert hasWriteLock();\n+    // sanity check\n+    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n+         nsQuota \u003c FSConstants.QUOTA_RESET) || \n+        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n+          dsQuota \u003c FSConstants.QUOTA_RESET)) {\n+      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n+                                         \"dsQuota : \" + nsQuota + \" and \" +\n+                                         dsQuota);\n+    }\n+    \n+    String srcs \u003d normalizePath(src);\n+\n+    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n+    INode targetNode \u003d inodes[inodes.length-1];\n+    if (targetNode \u003d\u003d null) {\n+      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n+    } else if (!targetNode.isDirectory()) {\n+      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n+    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d FSConstants.QUOTA_RESET) {\n+      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n+    } else { // a directory inode\n+      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n+      long oldNsQuota \u003d dirNode.getNsQuota();\n+      long oldDsQuota \u003d dirNode.getDsQuota();\n+      if (nsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n+        nsQuota \u003d oldNsQuota;\n+      }\n+      if (dsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n+        dsQuota \u003d oldDsQuota;\n+      }        \n+\n+      if (dirNode instanceof INodeDirectoryWithQuota) { \n+        // a directory with quota; so set the quota to the new value\n+        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n+        if (!dirNode.isQuotaSet()) {\n+          // will not come here for root because root\u0027s nsQuota is always set\n+          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n+          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n+          dirNode \u003d newNode;\n+          parent.replaceChild(newNode);\n+        }\n+      } else {\n+        // a non-quota directory; so replace it with a directory with quota\n+        INodeDirectoryWithQuota newNode \u003d \n+          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n+        // non-root directory node; parent !\u003d null\n+        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n+        dirNode \u003d newNode;\n+        parent.replaceChild(newNode);\n+      }\n+      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  INodeDirectory unprotectedSetQuota(String src, long nsQuota, long dsQuota)\n    throws FileNotFoundException, QuotaExceededException, \n      UnresolvedLinkException {\n    assert hasWriteLock();\n    // sanity check\n    if ((nsQuota \u003c 0 \u0026\u0026 nsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n         nsQuota \u003c FSConstants.QUOTA_RESET) || \n        (dsQuota \u003c 0 \u0026\u0026 dsQuota !\u003d FSConstants.QUOTA_DONT_SET \u0026\u0026 \n          dsQuota \u003c FSConstants.QUOTA_RESET)) {\n      throw new IllegalArgumentException(\"Illegal value for nsQuota or \" +\n                                         \"dsQuota : \" + nsQuota + \" and \" +\n                                         dsQuota);\n    }\n    \n    String srcs \u003d normalizePath(src);\n\n    INode[] inodes \u003d rootDir.getExistingPathINodes(src, true);\n    INode targetNode \u003d inodes[inodes.length-1];\n    if (targetNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Directory does not exist: \" + srcs);\n    } else if (!targetNode.isDirectory()) {\n      throw new FileNotFoundException(\"Cannot set quota on a file: \" + srcs);  \n    } else if (targetNode.isRoot() \u0026\u0026 nsQuota \u003d\u003d FSConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Cannot clear namespace quota on root.\");\n    } else { // a directory inode\n      INodeDirectory dirNode \u003d (INodeDirectory)targetNode;\n      long oldNsQuota \u003d dirNode.getNsQuota();\n      long oldDsQuota \u003d dirNode.getDsQuota();\n      if (nsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n        nsQuota \u003d oldNsQuota;\n      }\n      if (dsQuota \u003d\u003d FSConstants.QUOTA_DONT_SET) {\n        dsQuota \u003d oldDsQuota;\n      }        \n\n      if (dirNode instanceof INodeDirectoryWithQuota) { \n        // a directory with quota; so set the quota to the new value\n        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);\n        if (!dirNode.isQuotaSet()) {\n          // will not come here for root because root\u0027s nsQuota is always set\n          INodeDirectory newNode \u003d new INodeDirectory(dirNode);\n          INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n          dirNode \u003d newNode;\n          parent.replaceChild(newNode);\n        }\n      } else {\n        // a non-quota directory; so replace it with a directory with quota\n        INodeDirectoryWithQuota newNode \u003d \n          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);\n        // non-root directory node; parent !\u003d null\n        INodeDirectory parent \u003d (INodeDirectory)inodes[inodes.length-2];\n        dirNode \u003d newNode;\n        parent.replaceChild(newNode);\n      }\n      return (oldNsQuota !\u003d nsQuota || oldDsQuota !\u003d dsQuota) ? dirNode : null;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
    }
  }
}