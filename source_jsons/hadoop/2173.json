{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClient.java",
  "functionName": "create",
  "functionId": "create___src-String__permission-FsPermission__flag-EnumSet__CreateFlag____createParent-boolean__replication-short__blockSize-long__progress-Progressable__buffersize-int__checksumOpt-ChecksumOpt__favoredNodes-InetSocketAddress[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
  "functionStartLine": 1219,
  "functionEndLine": 1226,
  "numCommitsSeen": 330,
  "timeTaken": 9448,
  "changeHistory": [
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "89a544928083501625bc69f96b530040228f0a5f",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "51b97a1396a4cb32aaa08b451985a6af236c0c4b",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
    "4bb72210c266707806f3ce3e974968a9a137b25b",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec"
  ],
  "changeHistoryShort": {
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ybodychange",
    "89a544928083501625bc69f96b530040228f0a5f": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange",
    "51b97a1396a4cb32aaa08b451985a6af236c0c4b": "Ybodychange",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": "Ybodychange",
    "4bb72210c266707806f3ce3e974968a9a137b25b": "Ybodychange",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10996. Ability to specify per-file EC policy at create time. Contributed by SammiChen.\n",
      "commitDate": "12/04/17 12:27 PM",
      "commitName": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/04/17 1:38 PM",
      "commitNameOld": "18432130a7f580f206adf023507678c534487f2e",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,8 @@\n   public DFSOutputStream create(String src, FsPermission permission,\n       EnumSet\u003cCreateFlag\u003e flag, boolean createParent, short replication,\n       long blockSize, Progressable progress, int buffersize,\n       ChecksumOpt checksumOpt, InetSocketAddress[] favoredNodes)\n       throws IOException {\n-    checkOpen();\n-    final FsPermission masked \u003d applyUMask(permission);\n-    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n-    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n-        src, masked, flag, createParent, replication, blockSize, progress,\n-        dfsClientConf.createChecksum(checksumOpt),\n-        getFavoredNodesStr(favoredNodes));\n-    beginFileLease(result.getFileId(), result);\n-    return result;\n+    return create(src, permission, flag, createParent, replication, blockSize,\n+        progress, buffersize, checksumOpt, favoredNodes, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, FsPermission permission,\n      EnumSet\u003cCreateFlag\u003e flag, boolean createParent, short replication,\n      long blockSize, Progressable progress, int buffersize,\n      ChecksumOpt checksumOpt, InetSocketAddress[] favoredNodes)\n      throws IOException {\n    return create(src, permission, flag, createParent, replication, blockSize,\n        progress, buffersize, checksumOpt, favoredNodes, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,15 @@\n-  public DFSOutputStream create(String src, \n-                             FsPermission permission,\n-                             EnumSet\u003cCreateFlag\u003e flag, \n-                             boolean createParent,\n-                             short replication,\n-                             long blockSize,\n-                             Progressable progress,\n-                             int buffersize,\n-                             ChecksumOpt checksumOpt,\n-                             InetSocketAddress[] favoredNodes) throws IOException {\n+  public DFSOutputStream create(String src, FsPermission permission,\n+      EnumSet\u003cCreateFlag\u003e flag, boolean createParent, short replication,\n+      long blockSize, Progressable progress, int buffersize,\n+      ChecksumOpt checksumOpt, InetSocketAddress[] favoredNodes)\n+      throws IOException {\n     checkOpen();\n     final FsPermission masked \u003d applyUMask(permission);\n     LOG.debug(\"{}: masked\u003d{}\", src, masked);\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n-        buffersize, dfsClientConf.createChecksum(checksumOpt),\n+        dfsClientConf.createChecksum(checksumOpt),\n         getFavoredNodesStr(favoredNodes));\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, FsPermission permission,\n      EnumSet\u003cCreateFlag\u003e flag, boolean createParent, short replication,\n      long blockSize, Progressable progress, int buffersize,\n      ChecksumOpt checksumOpt, InetSocketAddress[] favoredNodes)\n      throws IOException {\n    checkOpen();\n    final FsPermission masked \u003d applyUMask(permission);\n    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,20 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     final FsPermission masked \u003d applyUMask(permission);\n-    if(LOG.isDebugEnabled()) {\n-      LOG.debug(src + \": masked\u003d\" + masked);\n-    }\n+    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt),\n         getFavoredNodesStr(favoredNodes));\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    final FsPermission masked \u003d applyUMask(permission);\n    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     final FsPermission masked \u003d applyUMask(permission);\n-    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n+    if(LOG.isDebugEnabled()) {\n+      LOG.debug(src + \": masked\u003d\" + masked);\n+    }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt),\n         getFavoredNodesStr(favoredNodes));\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    final FsPermission masked \u003d applyUMask(permission);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,20 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     final FsPermission masked \u003d applyUMask(permission);\n-    if(LOG.isDebugEnabled()) {\n-      LOG.debug(src + \": masked\u003d\" + masked);\n-    }\n+    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt),\n         getFavoredNodesStr(favoredNodes));\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    final FsPermission masked \u003d applyUMask(permission);\n    LOG.debug(\"{}: masked\u003d{}\", src, masked);\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    final FsPermission masked \u003d applyUMask(permission);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "10/04/15 11:40 AM",
      "commitNameOld": "7660da95cb67cbfe034aa8fa2a5bf0f8c9fdf41a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,22 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n-    if (permission \u003d\u003d null) {\n-      permission \u003d FsPermission.getFileDefault();\n-    }\n-    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n+    final FsPermission masked \u003d applyUMask(permission);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + masked);\n     }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt),\n         getFavoredNodesStr(favoredNodes));\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    final FsPermission masked \u003d applyUMask(permission);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "89a544928083501625bc69f96b530040228f0a5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7703. Support favouredNodes for the append for new blocks ( Contributed by Vinayakumar B)\n",
      "commitDate": "11/02/15 11:08 PM",
      "commitName": "89a544928083501625bc69f96b530040228f0a5f",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "09/02/15 8:23 PM",
      "commitNameOld": "02340a24f211212b91dc7380c1e5b54ddb5e82eb",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,25 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getFileDefault();\n     }\n     FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + masked);\n     }\n-    String[] favoredNodeStrs \u003d null;\n-    if (favoredNodes !\u003d null) {\n-      favoredNodeStrs \u003d new String[favoredNodes.length];\n-      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n-        favoredNodeStrs[i] \u003d \n-            favoredNodes[i].getHostName() + \":\" \n-                         + favoredNodes[i].getPort();\n-      }\n-    }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt),\n-        favoredNodeStrs);\n+        getFavoredNodesStr(favoredNodes));\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getFileDefault();\n    }\n    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        getFavoredNodesStr(favoredNodes));\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/09/14 7:11 PM",
      "commitNameOld": "428a76663a0de5d0d74cc9525273ddc470760e44",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getFileDefault();\n     }\n     FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + masked);\n     }\n     String[] favoredNodeStrs \u003d null;\n     if (favoredNodes !\u003d null) {\n       favoredNodeStrs \u003d new String[favoredNodes.length];\n       for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n         favoredNodeStrs[i] \u003d \n             favoredNodes[i].getHostName() + \":\" \n                          + favoredNodes[i].getPort();\n       }\n     }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt),\n-        favoredNodeStrs, cipherSuites);\n+        favoredNodeStrs);\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getFileDefault();\n    }\n    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    String[] favoredNodeStrs \u003d null;\n    if (favoredNodes !\u003d null) {\n      favoredNodeStrs \u003d new String[favoredNodes.length];\n      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n        favoredNodeStrs[i] \u003d \n            favoredNodes[i].getHostName() + \":\" \n                         + favoredNodes[i].getPort();\n      }\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        favoredNodeStrs);\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "51b97a1396a4cb32aaa08b451985a6af236c0c4b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6605.Client server negotiation of cipher suite. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607499 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/14 4:08 PM",
      "commitName": "51b97a1396a4cb32aaa08b451985a6af236c0c4b",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/06/14 1:43 PM",
      "commitNameOld": "2efea952139b30dd1c881eed0b443ffa72be6dce",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getFileDefault();\n     }\n     FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + masked);\n     }\n     String[] favoredNodeStrs \u003d null;\n     if (favoredNodes !\u003d null) {\n       favoredNodeStrs \u003d new String[favoredNodes.length];\n       for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n         favoredNodeStrs[i] \u003d \n             favoredNodes[i].getHostName() + \":\" \n                          + favoredNodes[i].getPort();\n       }\n     }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n-        buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n+        buffersize, dfsClientConf.createChecksum(checksumOpt),\n+        favoredNodeStrs, cipherSuites);\n     beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getFileDefault();\n    }\n    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    String[] favoredNodeStrs \u003d null;\n    if (favoredNodes !\u003d null) {\n      favoredNodeStrs \u003d new String[favoredNodes.length];\n      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n        favoredNodeStrs[i] \u003d \n            favoredNodes[i].getHostName() + \":\" \n                         + favoredNodes[i].getPort();\n      }\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt),\n        favoredNodeStrs, cipherSuites);\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/14 3:36 PM",
      "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "23/04/14 1:13 PM",
      "commitNameOld": "876fd8ab7913a259ff9f69c16cc2d9af46ad3f9b",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 16.1,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getFileDefault();\n     }\n     FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + masked);\n     }\n     String[] favoredNodeStrs \u003d null;\n     if (favoredNodes !\u003d null) {\n       favoredNodeStrs \u003d new String[favoredNodes.length];\n       for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n         favoredNodeStrs[i] \u003d \n             favoredNodes[i].getHostName() + \":\" \n                          + favoredNodes[i].getPort();\n       }\n     }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n-    beginFileLease(src, result);\n+    beginFileLease(result.getFileId(), result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getFileDefault();\n    }\n    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    String[] favoredNodeStrs \u003d null;\n    if (favoredNodes !\u003d null) {\n      favoredNodeStrs \u003d new String[favoredNodes.length];\n      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n        favoredNodeStrs[i] \u003d \n            favoredNodes[i].getHostName() + \":\" \n                         + favoredNodes[i].getPort();\n      }\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n    beginFileLease(result.getFileId(), result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "4bb72210c266707806f3ce3e974968a9a137b25b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4827. Slight update to the implementation of API for handling favored nodes in DFSClient. Contributed by Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487093 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/13 1:17 PM",
      "commitName": "4bb72210c266707806f3ce3e974968a9a137b25b",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "30/04/13 3:55 PM",
      "commitNameOld": "98c0421fbfb8dcb123aad2a9077d1f0e5390b5ce",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 27.89,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public DFSOutputStream create(String src, \n                              FsPermission permission,\n                              EnumSet\u003cCreateFlag\u003e flag, \n                              boolean createParent,\n                              short replication,\n                              long blockSize,\n                              Progressable progress,\n                              int buffersize,\n                              ChecksumOpt checksumOpt,\n                              InetSocketAddress[] favoredNodes) throws IOException {\n     checkOpen();\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getFileDefault();\n     }\n     FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + masked);\n     }\n     String[] favoredNodeStrs \u003d null;\n     if (favoredNodes !\u003d null) {\n       favoredNodeStrs \u003d new String[favoredNodes.length];\n       for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n         favoredNodeStrs[i] \u003d \n-            favoredNodes[i].getAddress().getHostAddress() + \":\" \n+            favoredNodes[i].getHostName() + \":\" \n                          + favoredNodes[i].getPort();\n       }\n     }\n     final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n         src, masked, flag, createParent, replication, blockSize, progress,\n         buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n     beginFileLease(src, result);\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getFileDefault();\n    }\n    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    String[] favoredNodeStrs \u003d null;\n    if (favoredNodes !\u003d null) {\n      favoredNodeStrs \u003d new String[favoredNodes.length];\n      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n        favoredNodeStrs[i] \u003d \n            favoredNodes[i].getHostName() + \":\" \n                         + favoredNodes[i].getPort();\n      }\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n    beginFileLease(src, result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 1:39 PM",
      "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,33 @@\n+  public DFSOutputStream create(String src, \n+                             FsPermission permission,\n+                             EnumSet\u003cCreateFlag\u003e flag, \n+                             boolean createParent,\n+                             short replication,\n+                             long blockSize,\n+                             Progressable progress,\n+                             int buffersize,\n+                             ChecksumOpt checksumOpt,\n+                             InetSocketAddress[] favoredNodes) throws IOException {\n+    checkOpen();\n+    if (permission \u003d\u003d null) {\n+      permission \u003d FsPermission.getFileDefault();\n+    }\n+    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n+    if(LOG.isDebugEnabled()) {\n+      LOG.debug(src + \": masked\u003d\" + masked);\n+    }\n+    String[] favoredNodeStrs \u003d null;\n+    if (favoredNodes !\u003d null) {\n+      favoredNodeStrs \u003d new String[favoredNodes.length];\n+      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n+        favoredNodeStrs[i] \u003d \n+            favoredNodes[i].getAddress().getHostAddress() + \":\" \n+                         + favoredNodes[i].getPort();\n+      }\n+    }\n+    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n+        src, masked, flag, createParent, replication, blockSize, progress,\n+        buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n+    beginFileLease(src, result);\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DFSOutputStream create(String src, \n                             FsPermission permission,\n                             EnumSet\u003cCreateFlag\u003e flag, \n                             boolean createParent,\n                             short replication,\n                             long blockSize,\n                             Progressable progress,\n                             int buffersize,\n                             ChecksumOpt checksumOpt,\n                             InetSocketAddress[] favoredNodes) throws IOException {\n    checkOpen();\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getFileDefault();\n    }\n    FsPermission masked \u003d permission.applyUMask(dfsClientConf.uMask);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + masked);\n    }\n    String[] favoredNodeStrs \u003d null;\n    if (favoredNodes !\u003d null) {\n      favoredNodeStrs \u003d new String[favoredNodes.length];\n      for (int i \u003d 0; i \u003c favoredNodes.length; i++) {\n        favoredNodeStrs[i] \u003d \n            favoredNodes[i].getAddress().getHostAddress() + \":\" \n                         + favoredNodes[i].getPort();\n      }\n    }\n    final DFSOutputStream result \u003d DFSOutputStream.newStreamForCreate(this,\n        src, masked, flag, createParent, replication, blockSize, progress,\n        buffersize, dfsClientConf.createChecksum(checksumOpt), favoredNodeStrs);\n    beginFileLease(src, result);\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
    }
  }
}