{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetadataStoreListFilesIterator.java",
  "functionName": "prefetch",
  "functionId": "prefetch___meta-PathMetadata",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreListFilesIterator.java",
  "functionStartLine": 124,
  "functionEndLine": 186,
  "numCommitsSeen": 3,
  "timeTaken": 2547,
  "changeHistory": [
    "5977360878e6780bd04842c8a2156f9848e1d088",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "5977360878e6780bd04842c8a2156f9848e1d088": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5977360878e6780bd04842c8a2156f9848e1d088": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16801. S3Guard listFiles will not query S3 if all listings are authoritative (#1815). Contributed by Mustafa İman.\n\n",
      "commitDate": "30/01/20 2:16 AM",
      "commitName": "5977360878e6780bd04842c8a2156f9848e1d088",
      "commitAuthor": "Mustafa İman",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16801. S3Guard listFiles will not query S3 if all listings are authoritative (#1815). Contributed by Mustafa İman.\n\n",
          "commitDate": "30/01/20 2:16 AM",
          "commitName": "5977360878e6780bd04842c8a2156f9848e1d088",
          "commitAuthor": "Mustafa İman",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 255.53,
          "commitsBetweenForRepo": 1639,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,63 @@\n-  private void prefetch(PathMetadata meta) throws IOException {\n+  private boolean prefetch(PathMetadata meta) throws IOException {\n     final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n     final Collection\u003cS3AFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n \n+    boolean allListingsAuthoritative \u003d true;\n     if (meta !\u003d null) {\n       final Path path \u003d meta.getFileStatus().getPath();\n       if (path.isRoot()) {\n         DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n         if (rootListing !\u003d null) {\n+          if (!rootListing.isAuthoritative()) {\n+            allListingsAuthoritative \u003d false;\n+          }\n           tombstones.addAll(rootListing.listTombstones());\n           queue.addAll(rootListing.withoutTombstones().getListing());\n         }\n       } else {\n         queue.add(meta);\n       }\n+    } else {\n+      allListingsAuthoritative \u003d false;\n     }\n \n     while(!queue.isEmpty()) {\n       PathMetadata nextMetadata \u003d queue.poll();\n       S3AFileStatus nextStatus \u003d nextMetadata.getFileStatus();\n       if (nextStatus.isFile()) {\n         // All files are leaf nodes by definition\n         leafNodes.add(nextStatus);\n         continue;\n       }\n       if (nextStatus.isDirectory()) {\n         final Path path \u003d nextStatus.getPath();\n         DirListingMetadata children \u003d metadataStore.listChildren(path);\n         if (children !\u003d null) {\n+          if (!children.isAuthoritative()) {\n+            allListingsAuthoritative \u003d false;\n+          }\n           tombstones.addAll(children.listTombstones());\n           Collection\u003cPathMetadata\u003e liveChildren \u003d\n               children.withoutTombstones().getListing();\n           if (!liveChildren.isEmpty()) {\n             // If it\u0027s a directory, has children, not all deleted, then we\n             // add the children to the queue and move on to the next node\n             queue.addAll(liveChildren);\n             continue;\n           } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n             leafNodes.add(nextStatus);\n           }\n+        } else {\n+          // we do not have a listing, so directory definitely non-authoritative\n+          allListingsAuthoritative \u003d false;\n         }\n       }\n       // Directories that *might* be empty are ignored for now, since we\n       // cannot confirm that they are empty without incurring other costs.\n       // Users of this class can still discover empty directories via S3\u0027s\n       // fake directories, subject to the same consistency semantics as before.\n       // The only other possibility is a symlink, which is unsupported on S3A.\n     }\n     leafNodesIterator \u003d leafNodes.iterator();\n+    return allListingsAuthoritative;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean prefetch(PathMetadata meta) throws IOException {\n    final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n    final Collection\u003cS3AFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n\n    boolean allListingsAuthoritative \u003d true;\n    if (meta !\u003d null) {\n      final Path path \u003d meta.getFileStatus().getPath();\n      if (path.isRoot()) {\n        DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n        if (rootListing !\u003d null) {\n          if (!rootListing.isAuthoritative()) {\n            allListingsAuthoritative \u003d false;\n          }\n          tombstones.addAll(rootListing.listTombstones());\n          queue.addAll(rootListing.withoutTombstones().getListing());\n        }\n      } else {\n        queue.add(meta);\n      }\n    } else {\n      allListingsAuthoritative \u003d false;\n    }\n\n    while(!queue.isEmpty()) {\n      PathMetadata nextMetadata \u003d queue.poll();\n      S3AFileStatus nextStatus \u003d nextMetadata.getFileStatus();\n      if (nextStatus.isFile()) {\n        // All files are leaf nodes by definition\n        leafNodes.add(nextStatus);\n        continue;\n      }\n      if (nextStatus.isDirectory()) {\n        final Path path \u003d nextStatus.getPath();\n        DirListingMetadata children \u003d metadataStore.listChildren(path);\n        if (children !\u003d null) {\n          if (!children.isAuthoritative()) {\n            allListingsAuthoritative \u003d false;\n          }\n          tombstones.addAll(children.listTombstones());\n          Collection\u003cPathMetadata\u003e liveChildren \u003d\n              children.withoutTombstones().getListing();\n          if (!liveChildren.isEmpty()) {\n            // If it\u0027s a directory, has children, not all deleted, then we\n            // add the children to the queue and move on to the next node\n            queue.addAll(liveChildren);\n            continue;\n          } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n            leafNodes.add(nextStatus);\n          }\n        } else {\n          // we do not have a listing, so directory definitely non-authoritative\n          allListingsAuthoritative \u003d false;\n        }\n      }\n      // Directories that *might* be empty are ignored for now, since we\n      // cannot confirm that they are empty without incurring other costs.\n      // Users of this class can still discover empty directories via S3\u0027s\n      // fake directories, subject to the same consistency semantics as before.\n      // The only other possibility is a symlink, which is unsupported on S3A.\n    }\n    leafNodesIterator \u003d leafNodes.iterator();\n    return allListingsAuthoritative;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreListFilesIterator.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16801. S3Guard listFiles will not query S3 if all listings are authoritative (#1815). Contributed by Mustafa İman.\n\n",
          "commitDate": "30/01/20 2:16 AM",
          "commitName": "5977360878e6780bd04842c8a2156f9848e1d088",
          "commitAuthor": "Mustafa İman",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 255.53,
          "commitsBetweenForRepo": 1639,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,63 @@\n-  private void prefetch(PathMetadata meta) throws IOException {\n+  private boolean prefetch(PathMetadata meta) throws IOException {\n     final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n     final Collection\u003cS3AFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n \n+    boolean allListingsAuthoritative \u003d true;\n     if (meta !\u003d null) {\n       final Path path \u003d meta.getFileStatus().getPath();\n       if (path.isRoot()) {\n         DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n         if (rootListing !\u003d null) {\n+          if (!rootListing.isAuthoritative()) {\n+            allListingsAuthoritative \u003d false;\n+          }\n           tombstones.addAll(rootListing.listTombstones());\n           queue.addAll(rootListing.withoutTombstones().getListing());\n         }\n       } else {\n         queue.add(meta);\n       }\n+    } else {\n+      allListingsAuthoritative \u003d false;\n     }\n \n     while(!queue.isEmpty()) {\n       PathMetadata nextMetadata \u003d queue.poll();\n       S3AFileStatus nextStatus \u003d nextMetadata.getFileStatus();\n       if (nextStatus.isFile()) {\n         // All files are leaf nodes by definition\n         leafNodes.add(nextStatus);\n         continue;\n       }\n       if (nextStatus.isDirectory()) {\n         final Path path \u003d nextStatus.getPath();\n         DirListingMetadata children \u003d metadataStore.listChildren(path);\n         if (children !\u003d null) {\n+          if (!children.isAuthoritative()) {\n+            allListingsAuthoritative \u003d false;\n+          }\n           tombstones.addAll(children.listTombstones());\n           Collection\u003cPathMetadata\u003e liveChildren \u003d\n               children.withoutTombstones().getListing();\n           if (!liveChildren.isEmpty()) {\n             // If it\u0027s a directory, has children, not all deleted, then we\n             // add the children to the queue and move on to the next node\n             queue.addAll(liveChildren);\n             continue;\n           } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n             leafNodes.add(nextStatus);\n           }\n+        } else {\n+          // we do not have a listing, so directory definitely non-authoritative\n+          allListingsAuthoritative \u003d false;\n         }\n       }\n       // Directories that *might* be empty are ignored for now, since we\n       // cannot confirm that they are empty without incurring other costs.\n       // Users of this class can still discover empty directories via S3\u0027s\n       // fake directories, subject to the same consistency semantics as before.\n       // The only other possibility is a symlink, which is unsupported on S3A.\n     }\n     leafNodesIterator \u003d leafNodes.iterator();\n+    return allListingsAuthoritative;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean prefetch(PathMetadata meta) throws IOException {\n    final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n    final Collection\u003cS3AFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n\n    boolean allListingsAuthoritative \u003d true;\n    if (meta !\u003d null) {\n      final Path path \u003d meta.getFileStatus().getPath();\n      if (path.isRoot()) {\n        DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n        if (rootListing !\u003d null) {\n          if (!rootListing.isAuthoritative()) {\n            allListingsAuthoritative \u003d false;\n          }\n          tombstones.addAll(rootListing.listTombstones());\n          queue.addAll(rootListing.withoutTombstones().getListing());\n        }\n      } else {\n        queue.add(meta);\n      }\n    } else {\n      allListingsAuthoritative \u003d false;\n    }\n\n    while(!queue.isEmpty()) {\n      PathMetadata nextMetadata \u003d queue.poll();\n      S3AFileStatus nextStatus \u003d nextMetadata.getFileStatus();\n      if (nextStatus.isFile()) {\n        // All files are leaf nodes by definition\n        leafNodes.add(nextStatus);\n        continue;\n      }\n      if (nextStatus.isDirectory()) {\n        final Path path \u003d nextStatus.getPath();\n        DirListingMetadata children \u003d metadataStore.listChildren(path);\n        if (children !\u003d null) {\n          if (!children.isAuthoritative()) {\n            allListingsAuthoritative \u003d false;\n          }\n          tombstones.addAll(children.listTombstones());\n          Collection\u003cPathMetadata\u003e liveChildren \u003d\n              children.withoutTombstones().getListing();\n          if (!liveChildren.isEmpty()) {\n            // If it\u0027s a directory, has children, not all deleted, then we\n            // add the children to the queue and move on to the next node\n            queue.addAll(liveChildren);\n            continue;\n          } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n            leafNodes.add(nextStatus);\n          }\n        } else {\n          // we do not have a listing, so directory definitely non-authoritative\n          allListingsAuthoritative \u003d false;\n        }\n      }\n      // Directories that *might* be empty are ignored for now, since we\n      // cannot confirm that they are empty without incurring other costs.\n      // Users of this class can still discover empty directories via S3\u0027s\n      // fake directories, subject to the same consistency semantics as before.\n      // The only other possibility is a symlink, which is unsupported on S3A.\n    }\n    leafNodesIterator \u003d leafNodes.iterator();\n    return allListingsAuthoritative;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreListFilesIterator.java",
          "extendedDetails": {}
        }
      ]
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "01/09/17 6:13 AM",
      "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 625.34,
      "commitsBetweenForRepo": 5211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void prefetch(PathMetadata meta) throws IOException {\n     final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n-    final Collection\u003cFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n+    final Collection\u003cS3AFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n \n     if (meta !\u003d null) {\n       final Path path \u003d meta.getFileStatus().getPath();\n       if (path.isRoot()) {\n         DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n         if (rootListing !\u003d null) {\n           tombstones.addAll(rootListing.listTombstones());\n           queue.addAll(rootListing.withoutTombstones().getListing());\n         }\n       } else {\n         queue.add(meta);\n       }\n     }\n \n     while(!queue.isEmpty()) {\n       PathMetadata nextMetadata \u003d queue.poll();\n-      FileStatus nextStatus \u003d nextMetadata.getFileStatus();\n+      S3AFileStatus nextStatus \u003d nextMetadata.getFileStatus();\n       if (nextStatus.isFile()) {\n         // All files are leaf nodes by definition\n         leafNodes.add(nextStatus);\n         continue;\n       }\n       if (nextStatus.isDirectory()) {\n         final Path path \u003d nextStatus.getPath();\n         DirListingMetadata children \u003d metadataStore.listChildren(path);\n         if (children !\u003d null) {\n           tombstones.addAll(children.listTombstones());\n           Collection\u003cPathMetadata\u003e liveChildren \u003d\n               children.withoutTombstones().getListing();\n           if (!liveChildren.isEmpty()) {\n             // If it\u0027s a directory, has children, not all deleted, then we\n             // add the children to the queue and move on to the next node\n             queue.addAll(liveChildren);\n             continue;\n           } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n             leafNodes.add(nextStatus);\n           }\n         }\n       }\n       // Directories that *might* be empty are ignored for now, since we\n       // cannot confirm that they are empty without incurring other costs.\n       // Users of this class can still discover empty directories via S3\u0027s\n       // fake directories, subject to the same consistency semantics as before.\n       // The only other possibility is a symlink, which is unsupported on S3A.\n     }\n     leafNodesIterator \u003d leafNodes.iterator();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void prefetch(PathMetadata meta) throws IOException {\n    final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n    final Collection\u003cS3AFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n\n    if (meta !\u003d null) {\n      final Path path \u003d meta.getFileStatus().getPath();\n      if (path.isRoot()) {\n        DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n        if (rootListing !\u003d null) {\n          tombstones.addAll(rootListing.listTombstones());\n          queue.addAll(rootListing.withoutTombstones().getListing());\n        }\n      } else {\n        queue.add(meta);\n      }\n    }\n\n    while(!queue.isEmpty()) {\n      PathMetadata nextMetadata \u003d queue.poll();\n      S3AFileStatus nextStatus \u003d nextMetadata.getFileStatus();\n      if (nextStatus.isFile()) {\n        // All files are leaf nodes by definition\n        leafNodes.add(nextStatus);\n        continue;\n      }\n      if (nextStatus.isDirectory()) {\n        final Path path \u003d nextStatus.getPath();\n        DirListingMetadata children \u003d metadataStore.listChildren(path);\n        if (children !\u003d null) {\n          tombstones.addAll(children.listTombstones());\n          Collection\u003cPathMetadata\u003e liveChildren \u003d\n              children.withoutTombstones().getListing();\n          if (!liveChildren.isEmpty()) {\n            // If it\u0027s a directory, has children, not all deleted, then we\n            // add the children to the queue and move on to the next node\n            queue.addAll(liveChildren);\n            continue;\n          } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n            leafNodes.add(nextStatus);\n          }\n        }\n      }\n      // Directories that *might* be empty are ignored for now, since we\n      // cannot confirm that they are empty without incurring other costs.\n      // Users of this class can still discover empty directories via S3\u0027s\n      // fake directories, subject to the same consistency semantics as before.\n      // The only other possibility is a symlink, which is unsupported on S3A.\n    }\n    leafNodesIterator \u003d leafNodes.iterator();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreListFilesIterator.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,50 @@\n+  private void prefetch(PathMetadata meta) throws IOException {\n+    final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n+    final Collection\u003cFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n+\n+    if (meta !\u003d null) {\n+      final Path path \u003d meta.getFileStatus().getPath();\n+      if (path.isRoot()) {\n+        DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n+        if (rootListing !\u003d null) {\n+          tombstones.addAll(rootListing.listTombstones());\n+          queue.addAll(rootListing.withoutTombstones().getListing());\n+        }\n+      } else {\n+        queue.add(meta);\n+      }\n+    }\n+\n+    while(!queue.isEmpty()) {\n+      PathMetadata nextMetadata \u003d queue.poll();\n+      FileStatus nextStatus \u003d nextMetadata.getFileStatus();\n+      if (nextStatus.isFile()) {\n+        // All files are leaf nodes by definition\n+        leafNodes.add(nextStatus);\n+        continue;\n+      }\n+      if (nextStatus.isDirectory()) {\n+        final Path path \u003d nextStatus.getPath();\n+        DirListingMetadata children \u003d metadataStore.listChildren(path);\n+        if (children !\u003d null) {\n+          tombstones.addAll(children.listTombstones());\n+          Collection\u003cPathMetadata\u003e liveChildren \u003d\n+              children.withoutTombstones().getListing();\n+          if (!liveChildren.isEmpty()) {\n+            // If it\u0027s a directory, has children, not all deleted, then we\n+            // add the children to the queue and move on to the next node\n+            queue.addAll(liveChildren);\n+            continue;\n+          } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n+            leafNodes.add(nextStatus);\n+          }\n+        }\n+      }\n+      // Directories that *might* be empty are ignored for now, since we\n+      // cannot confirm that they are empty without incurring other costs.\n+      // Users of this class can still discover empty directories via S3\u0027s\n+      // fake directories, subject to the same consistency semantics as before.\n+      // The only other possibility is a symlink, which is unsupported on S3A.\n+    }\n+    leafNodesIterator \u003d leafNodes.iterator();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void prefetch(PathMetadata meta) throws IOException {\n    final Queue\u003cPathMetadata\u003e queue \u003d new LinkedList\u003c\u003e();\n    final Collection\u003cFileStatus\u003e leafNodes \u003d new ArrayList\u003c\u003e();\n\n    if (meta !\u003d null) {\n      final Path path \u003d meta.getFileStatus().getPath();\n      if (path.isRoot()) {\n        DirListingMetadata rootListing \u003d metadataStore.listChildren(path);\n        if (rootListing !\u003d null) {\n          tombstones.addAll(rootListing.listTombstones());\n          queue.addAll(rootListing.withoutTombstones().getListing());\n        }\n      } else {\n        queue.add(meta);\n      }\n    }\n\n    while(!queue.isEmpty()) {\n      PathMetadata nextMetadata \u003d queue.poll();\n      FileStatus nextStatus \u003d nextMetadata.getFileStatus();\n      if (nextStatus.isFile()) {\n        // All files are leaf nodes by definition\n        leafNodes.add(nextStatus);\n        continue;\n      }\n      if (nextStatus.isDirectory()) {\n        final Path path \u003d nextStatus.getPath();\n        DirListingMetadata children \u003d metadataStore.listChildren(path);\n        if (children !\u003d null) {\n          tombstones.addAll(children.listTombstones());\n          Collection\u003cPathMetadata\u003e liveChildren \u003d\n              children.withoutTombstones().getListing();\n          if (!liveChildren.isEmpty()) {\n            // If it\u0027s a directory, has children, not all deleted, then we\n            // add the children to the queue and move on to the next node\n            queue.addAll(liveChildren);\n            continue;\n          } else if (allowAuthoritative \u0026\u0026 children.isAuthoritative()) {\n            leafNodes.add(nextStatus);\n          }\n        }\n      }\n      // Directories that *might* be empty are ignored for now, since we\n      // cannot confirm that they are empty without incurring other costs.\n      // Users of this class can still discover empty directories via S3\u0027s\n      // fake directories, subject to the same consistency semantics as before.\n      // The only other possibility is a symlink, which is unsupported on S3A.\n    }\n    leafNodesIterator \u003d leafNodes.iterator();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreListFilesIterator.java"
    }
  }
}