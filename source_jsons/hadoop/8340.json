{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirErasureCodingOp.java",
  "functionName": "getEnabledErasureCodingPolicyByName",
  "functionId": "getEnabledErasureCodingPolicyByName___fsn-FSNamesystem(modifiers-final)__ecPolicyName-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
  "functionStartLine": 71,
  "functionEndLine": 93,
  "numCommitsSeen": 79,
  "timeTaken": 4115,
  "changeHistory": [
    "92c58901d767f4fea571274544a590608c911cb8",
    "e0b3c644e186d89138d4174efe0cbe77a0200315",
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1"
  ],
  "changeHistoryShort": {
    "92c58901d767f4fea571274544a590608c911cb8": "Yrename",
    "e0b3c644e186d89138d4174efe0cbe77a0200315": "Ybodychange",
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "92c58901d767f4fea571274544a590608c911cb8": {
      "type": "Yrename",
      "commitMessage": "HDFS-15117. EC: Add getECTopologyResultForPolicies to DistributedFileSystem. Contributed by Ayush Saxena\n",
      "commitDate": "23/01/20 4:48 AM",
      "commitName": "92c58901d767f4fea571274544a590608c911cb8",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "09/09/18 8:40 PM",
      "commitNameOld": "30eceec3420fc6be00d3878ba787bd9518d3ca0e",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 500.38,
      "commitsBetweenForRepo": 3530,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  static ErasureCodingPolicy getErasureCodingPolicyByName(\n+  static ErasureCodingPolicy getEnabledErasureCodingPolicyByName(\n       final FSNamesystem fsn, final String ecPolicyName) throws IOException {\n     assert fsn.hasReadLock();\n     ErasureCodingPolicy ecPolicy \u003d fsn.getErasureCodingPolicyManager()\n         .getEnabledPolicyByName(ecPolicyName);\n     if (ecPolicy \u003d\u003d null) {\n       final String sysPolicies \u003d\n           Arrays.asList(\n               fsn.getErasureCodingPolicyManager().getEnabledPolicies())\n               .stream()\n               .map(ErasureCodingPolicy::getName)\n               .collect(Collectors.joining(\", \"));\n       final String message \u003d String.format(\"Policy \u0027%s\u0027 does not match any \" +\n               \"enabled erasure\" +\n               \" coding policies: [%s]. An erasure coding policy can be\" +\n               \" enabled by enableErasureCodingPolicy API.\",\n           ecPolicyName,\n           sysPolicies\n       );\n       throw new HadoopIllegalArgumentException(message);\n     }\n     return ecPolicy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingPolicy getEnabledErasureCodingPolicyByName(\n      final FSNamesystem fsn, final String ecPolicyName) throws IOException {\n    assert fsn.hasReadLock();\n    ErasureCodingPolicy ecPolicy \u003d fsn.getErasureCodingPolicyManager()\n        .getEnabledPolicyByName(ecPolicyName);\n    if (ecPolicy \u003d\u003d null) {\n      final String sysPolicies \u003d\n          Arrays.asList(\n              fsn.getErasureCodingPolicyManager().getEnabledPolicies())\n              .stream()\n              .map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \"));\n      final String message \u003d String.format(\"Policy \u0027%s\u0027 does not match any \" +\n              \"enabled erasure\" +\n              \" coding policies: [%s]. An erasure coding policy can be\" +\n              \" enabled by enableErasureCodingPolicy API.\",\n          ecPolicyName,\n          sysPolicies\n      );\n      throw new HadoopIllegalArgumentException(message);\n    }\n    return ecPolicy;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {
        "oldValue": "getErasureCodingPolicyByName",
        "newValue": "getEnabledErasureCodingPolicyByName"
      }
    },
    "e0b3c644e186d89138d4174efe0cbe77a0200315": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12414. Ensure to use CLI command to enable/disable erasure coding policy. Contributed by Sammi Chen\n",
      "commitDate": "13/09/17 6:15 PM",
      "commitName": "e0b3c644e186d89138d4174efe0cbe77a0200315",
      "commitAuthor": "ChenSammi",
      "commitDateOld": "07/09/17 5:38 AM",
      "commitNameOld": "2adf8bed712e6d770a0d53eea198d8911ae1a258",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 6.53,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   static ErasureCodingPolicy getErasureCodingPolicyByName(\n       final FSNamesystem fsn, final String ecPolicyName) throws IOException {\n     assert fsn.hasReadLock();\n     ErasureCodingPolicy ecPolicy \u003d fsn.getErasureCodingPolicyManager()\n         .getEnabledPolicyByName(ecPolicyName);\n     if (ecPolicy \u003d\u003d null) {\n       final String sysPolicies \u003d\n           Arrays.asList(\n               fsn.getErasureCodingPolicyManager().getEnabledPolicies())\n               .stream()\n               .map(ErasureCodingPolicy::getName)\n               .collect(Collectors.joining(\", \"));\n       final String message \u003d String.format(\"Policy \u0027%s\u0027 does not match any \" +\n               \"enabled erasure\" +\n-              \" coding policies: [%s]. The set of enabled erasure coding \" +\n-              \"policies can be configured at \u0027%s\u0027.\",\n+              \" coding policies: [%s]. An erasure coding policy can be\" +\n+              \" enabled by enableErasureCodingPolicy API.\",\n           ecPolicyName,\n-          sysPolicies,\n-          DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY\n+          sysPolicies\n       );\n       throw new HadoopIllegalArgumentException(message);\n     }\n     return ecPolicy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicyByName(\n      final FSNamesystem fsn, final String ecPolicyName) throws IOException {\n    assert fsn.hasReadLock();\n    ErasureCodingPolicy ecPolicy \u003d fsn.getErasureCodingPolicyManager()\n        .getEnabledPolicyByName(ecPolicyName);\n    if (ecPolicy \u003d\u003d null) {\n      final String sysPolicies \u003d\n          Arrays.asList(\n              fsn.getErasureCodingPolicyManager().getEnabledPolicies())\n              .stream()\n              .map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \"));\n      final String message \u003d String.format(\"Policy \u0027%s\u0027 does not match any \" +\n              \"enabled erasure\" +\n              \" coding policies: [%s]. An erasure coding policy can be\" +\n              \" enabled by enableErasureCodingPolicy API.\",\n          ecPolicyName,\n          sysPolicies\n      );\n      throw new HadoopIllegalArgumentException(message);\n    }\n    return ecPolicy;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10996. Ability to specify per-file EC policy at create time. Contributed by SammiChen.\n",
      "commitDate": "12/04/17 12:27 PM",
      "commitName": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,24 @@\n+  static ErasureCodingPolicy getErasureCodingPolicyByName(\n+      final FSNamesystem fsn, final String ecPolicyName) throws IOException {\n+    assert fsn.hasReadLock();\n+    ErasureCodingPolicy ecPolicy \u003d fsn.getErasureCodingPolicyManager()\n+        .getEnabledPolicyByName(ecPolicyName);\n+    if (ecPolicy \u003d\u003d null) {\n+      final String sysPolicies \u003d\n+          Arrays.asList(\n+              fsn.getErasureCodingPolicyManager().getEnabledPolicies())\n+              .stream()\n+              .map(ErasureCodingPolicy::getName)\n+              .collect(Collectors.joining(\", \"));\n+      final String message \u003d String.format(\"Policy \u0027%s\u0027 does not match any \" +\n+              \"enabled erasure\" +\n+              \" coding policies: [%s]. The set of enabled erasure coding \" +\n+              \"policies can be configured at \u0027%s\u0027.\",\n+          ecPolicyName,\n+          sysPolicies,\n+          DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY\n+      );\n+      throw new HadoopIllegalArgumentException(message);\n+    }\n+    return ecPolicy;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicyByName(\n      final FSNamesystem fsn, final String ecPolicyName) throws IOException {\n    assert fsn.hasReadLock();\n    ErasureCodingPolicy ecPolicy \u003d fsn.getErasureCodingPolicyManager()\n        .getEnabledPolicyByName(ecPolicyName);\n    if (ecPolicy \u003d\u003d null) {\n      final String sysPolicies \u003d\n          Arrays.asList(\n              fsn.getErasureCodingPolicyManager().getEnabledPolicies())\n              .stream()\n              .map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \"));\n      final String message \u003d String.format(\"Policy \u0027%s\u0027 does not match any \" +\n              \"enabled erasure\" +\n              \" coding policies: [%s]. The set of enabled erasure coding \" +\n              \"policies can be configured at \u0027%s\u0027.\",\n          ecPolicyName,\n          sysPolicies,\n          DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY\n      );\n      throw new HadoopIllegalArgumentException(message);\n    }\n    return ecPolicy;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java"
    }
  }
}