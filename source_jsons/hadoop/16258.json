{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterWebHdfsMethods.java",
  "functionName": "get",
  "functionId": "get___ugi-UserGroupInformation(modifiers-final)__delegation-DelegationParam(modifiers-final)__username-UserParam(modifiers-final)__doAsUser-DoAsParam(modifiers-final)__fullpath-String(modifiers-final)__op-GetOpParam(modifiers-final)__offset-OffsetParam(modifiers-final)__length-LengthParam(modifiers-final)__renewer-RenewerParam(modifiers-final)__bufferSize-BufferSizeParam(modifiers-final)__xattrNames-List__XAttrNameParam__(modifiers-final)__xattrEncoding-XAttrEncodingParam(modifiers-final)__excludeDatanodes-ExcludeDatanodesParam(modifiers-final)__fsAction-FsActionParam(modifiers-final)__snapshotName-SnapshotNameParam(modifiers-final)__oldSnapshotName-OldSnapshotNameParam(modifiers-final)__tokenKind-TokenKindParam(modifiers-final)__tokenService-TokenServiceParam(modifiers-final)__noredirectParam-NoRedirectParam(modifiers-final)__startAfter-StartAfterParam(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterWebHdfsMethods.java",
  "functionStartLine": 320,
  "functionEndLine": 393,
  "numCommitsSeen": 6,
  "timeTaken": 1214,
  "changeHistory": [
    "021a43b1a4bbc8a68c31461e206214a5eadc38dd",
    "6e31a090842f8aeedb331b653b075499f8df6c60"
  ],
  "changeHistoryShort": {
    "021a43b1a4bbc8a68c31461e206214a5eadc38dd": "Ybodychange",
    "6e31a090842f8aeedb331b653b075499f8df6c60": "Yintroduced"
  },
  "changeHistoryDetails": {
    "021a43b1a4bbc8a68c31461e206214a5eadc38dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13972. RBF: Support for Delegation Token (WebHDFS). Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "021a43b1a4bbc8a68c31461e206214a5eadc38dd",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "26/03/19 11:27 AM",
      "commitNameOld": "55fb3c32fb48ca26a629d4d5f3f07e2858d09594",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 89.92,
      "commitsBetweenForRepo": 632,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,74 @@\n   protected Response get(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final GetOpParam op,\n       final OffsetParam offset,\n       final LengthParam length,\n       final RenewerParam renewer,\n       final BufferSizeParam bufferSize,\n       final List\u003cXAttrNameParam\u003e xattrNames,\n       final XAttrEncodingParam xattrEncoding,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final FsActionParam fsAction,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final TokenKindParam tokenKind,\n       final TokenServiceParam tokenService,\n       final NoRedirectParam noredirectParam,\n       final StartAfterParam startAfter\n   ) throws IOException, URISyntaxException {\n     try {\n       final Router router \u003d getRouter();\n \n       switch (op.getValue()) {\n       case OPEN:\n       {\n         final URI uri \u003d redirectURI(router, ugi, delegation, username,\n             doAsUser, fullpath, op.getValue(), offset.getValue(),\n             excludeDatanodes.getValue(), offset, length, bufferSize);\n         if (!noredirectParam.getValue()) {\n           return Response.temporaryRedirect(uri)\n               .type(MediaType.APPLICATION_OCTET_STREAM).build();\n         } else {\n           final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n           return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n         }\n       }\n       case GETFILECHECKSUM:\n       {\n         final URI uri \u003d redirectURI(router, ugi, delegation, username,\n             doAsUser, fullpath, op.getValue(), -1L, null);\n         if (!noredirectParam.getValue()) {\n           return Response.temporaryRedirect(uri)\n               .type(MediaType.APPLICATION_OCTET_STREAM).build();\n         } else {\n           final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n           return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n         }\n       }\n+      case GETDELEGATIONTOKEN:\n       case GET_BLOCK_LOCATIONS:\n       case GETFILESTATUS:\n       case LISTSTATUS:\n       case GETCONTENTSUMMARY:\n       case GETHOMEDIRECTORY:\n       case GETACLSTATUS:\n       case GETXATTRS:\n       case LISTXATTRS:\n       case CHECKACCESS:\n       {\n         return super.get(ugi, delegation, username, doAsUser, fullpath, op,\n             offset, length, renewer, bufferSize, xattrNames, xattrEncoding,\n             excludeDatanodes, fsAction, snapshotName, oldSnapshotName,\n             tokenKind, tokenService, noredirectParam, startAfter);\n       }\n       default:\n         throw new UnsupportedOperationException(op + \" is not supported\");\n       }\n     } finally {\n       reset();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response get(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final GetOpParam op,\n      final OffsetParam offset,\n      final LengthParam length,\n      final RenewerParam renewer,\n      final BufferSizeParam bufferSize,\n      final List\u003cXAttrNameParam\u003e xattrNames,\n      final XAttrEncodingParam xattrEncoding,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final FsActionParam fsAction,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final TokenKindParam tokenKind,\n      final TokenServiceParam tokenService,\n      final NoRedirectParam noredirectParam,\n      final StartAfterParam startAfter\n  ) throws IOException, URISyntaxException {\n    try {\n      final Router router \u003d getRouter();\n\n      switch (op.getValue()) {\n      case OPEN:\n      {\n        final URI uri \u003d redirectURI(router, ugi, delegation, username,\n            doAsUser, fullpath, op.getValue(), offset.getValue(),\n            excludeDatanodes.getValue(), offset, length, bufferSize);\n        if (!noredirectParam.getValue()) {\n          return Response.temporaryRedirect(uri)\n              .type(MediaType.APPLICATION_OCTET_STREAM).build();\n        } else {\n          final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n        }\n      }\n      case GETFILECHECKSUM:\n      {\n        final URI uri \u003d redirectURI(router, ugi, delegation, username,\n            doAsUser, fullpath, op.getValue(), -1L, null);\n        if (!noredirectParam.getValue()) {\n          return Response.temporaryRedirect(uri)\n              .type(MediaType.APPLICATION_OCTET_STREAM).build();\n        } else {\n          final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n        }\n      }\n      case GETDELEGATIONTOKEN:\n      case GET_BLOCK_LOCATIONS:\n      case GETFILESTATUS:\n      case LISTSTATUS:\n      case GETCONTENTSUMMARY:\n      case GETHOMEDIRECTORY:\n      case GETACLSTATUS:\n      case GETXATTRS:\n      case LISTXATTRS:\n      case CHECKACCESS:\n      {\n        return super.get(ugi, delegation, username, doAsUser, fullpath, op,\n            offset, length, renewer, bufferSize, xattrNames, xattrEncoding,\n            excludeDatanodes, fsAction, snapshotName, oldSnapshotName,\n            tokenKind, tokenService, noredirectParam, startAfter);\n      }\n      default:\n        throw new UnsupportedOperationException(op + \" is not supported\");\n      }\n    } finally {\n      reset();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "6e31a090842f8aeedb331b653b075499f8df6c60": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
      "commitDate": "23/03/18 8:32 AM",
      "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
      "commitAuthor": "weiy",
      "diff": "@@ -0,0 +1,73 @@\n+  protected Response get(\n+      final UserGroupInformation ugi,\n+      final DelegationParam delegation,\n+      final UserParam username,\n+      final DoAsParam doAsUser,\n+      final String fullpath,\n+      final GetOpParam op,\n+      final OffsetParam offset,\n+      final LengthParam length,\n+      final RenewerParam renewer,\n+      final BufferSizeParam bufferSize,\n+      final List\u003cXAttrNameParam\u003e xattrNames,\n+      final XAttrEncodingParam xattrEncoding,\n+      final ExcludeDatanodesParam excludeDatanodes,\n+      final FsActionParam fsAction,\n+      final SnapshotNameParam snapshotName,\n+      final OldSnapshotNameParam oldSnapshotName,\n+      final TokenKindParam tokenKind,\n+      final TokenServiceParam tokenService,\n+      final NoRedirectParam noredirectParam,\n+      final StartAfterParam startAfter\n+  ) throws IOException, URISyntaxException {\n+    try {\n+      final Router router \u003d getRouter();\n+\n+      switch (op.getValue()) {\n+      case OPEN:\n+      {\n+        final URI uri \u003d redirectURI(router, ugi, delegation, username,\n+            doAsUser, fullpath, op.getValue(), offset.getValue(),\n+            excludeDatanodes.getValue(), offset, length, bufferSize);\n+        if (!noredirectParam.getValue()) {\n+          return Response.temporaryRedirect(uri)\n+              .type(MediaType.APPLICATION_OCTET_STREAM).build();\n+        } else {\n+          final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n+          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+        }\n+      }\n+      case GETFILECHECKSUM:\n+      {\n+        final URI uri \u003d redirectURI(router, ugi, delegation, username,\n+            doAsUser, fullpath, op.getValue(), -1L, null);\n+        if (!noredirectParam.getValue()) {\n+          return Response.temporaryRedirect(uri)\n+              .type(MediaType.APPLICATION_OCTET_STREAM).build();\n+        } else {\n+          final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n+          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+        }\n+      }\n+      case GET_BLOCK_LOCATIONS:\n+      case GETFILESTATUS:\n+      case LISTSTATUS:\n+      case GETCONTENTSUMMARY:\n+      case GETHOMEDIRECTORY:\n+      case GETACLSTATUS:\n+      case GETXATTRS:\n+      case LISTXATTRS:\n+      case CHECKACCESS:\n+      {\n+        return super.get(ugi, delegation, username, doAsUser, fullpath, op,\n+            offset, length, renewer, bufferSize, xattrNames, xattrEncoding,\n+            excludeDatanodes, fsAction, snapshotName, oldSnapshotName,\n+            tokenKind, tokenService, noredirectParam, startAfter);\n+      }\n+      default:\n+        throw new UnsupportedOperationException(op + \" is not supported\");\n+      }\n+    } finally {\n+      reset();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response get(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final GetOpParam op,\n      final OffsetParam offset,\n      final LengthParam length,\n      final RenewerParam renewer,\n      final BufferSizeParam bufferSize,\n      final List\u003cXAttrNameParam\u003e xattrNames,\n      final XAttrEncodingParam xattrEncoding,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final FsActionParam fsAction,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final TokenKindParam tokenKind,\n      final TokenServiceParam tokenService,\n      final NoRedirectParam noredirectParam,\n      final StartAfterParam startAfter\n  ) throws IOException, URISyntaxException {\n    try {\n      final Router router \u003d getRouter();\n\n      switch (op.getValue()) {\n      case OPEN:\n      {\n        final URI uri \u003d redirectURI(router, ugi, delegation, username,\n            doAsUser, fullpath, op.getValue(), offset.getValue(),\n            excludeDatanodes.getValue(), offset, length, bufferSize);\n        if (!noredirectParam.getValue()) {\n          return Response.temporaryRedirect(uri)\n              .type(MediaType.APPLICATION_OCTET_STREAM).build();\n        } else {\n          final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n        }\n      }\n      case GETFILECHECKSUM:\n      {\n        final URI uri \u003d redirectURI(router, ugi, delegation, username,\n            doAsUser, fullpath, op.getValue(), -1L, null);\n        if (!noredirectParam.getValue()) {\n          return Response.temporaryRedirect(uri)\n              .type(MediaType.APPLICATION_OCTET_STREAM).build();\n        } else {\n          final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n        }\n      }\n      case GET_BLOCK_LOCATIONS:\n      case GETFILESTATUS:\n      case LISTSTATUS:\n      case GETCONTENTSUMMARY:\n      case GETHOMEDIRECTORY:\n      case GETACLSTATUS:\n      case GETXATTRS:\n      case LISTXATTRS:\n      case CHECKACCESS:\n      {\n        return super.get(ugi, delegation, username, doAsUser, fullpath, op,\n            offset, length, renewer, bufferSize, xattrNames, xattrEncoding,\n            excludeDatanodes, fsAction, snapshotName, oldSnapshotName,\n            tokenKind, tokenService, noredirectParam, startAfter);\n      }\n      default:\n        throw new UnsupportedOperationException(op + \" is not supported\");\n      }\n    } finally {\n      reset();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterWebHdfsMethods.java"
    }
  }
}