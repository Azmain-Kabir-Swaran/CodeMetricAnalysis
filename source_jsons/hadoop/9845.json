{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Util.java",
  "functionName": "getAddressesList",
  "functionId": "getAddressesList___uri-URI",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Util.java",
  "functionStartLine": 362,
  "functionEndLine": 383,
  "numCommitsSeen": 38,
  "timeTaken": 3717,
  "changeHistory": [
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
    "cd5e10ccca9b919d55ef7a500e61b44bd1a00171",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename)",
    "cd5e10ccca9b919d55ef7a500e61b44bd1a00171": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename)",
      "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/02/17 4:33 PM",
      "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
          "commitDate": "22/02/17 4:33 PM",
          "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "22/02/17 3:58 PM",
          "commitNameOld": "b10e962224a8ae1c6031a05322b0cc5e564bd078",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,22 @@\n-  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n-      throws IOException {\n+  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n+      throws IOException{\n     String authority \u003d uri.getAuthority();\n     Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n         \"URI has no authority: \" + uri);\n-    \n+\n     String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n     for (int i \u003d 0; i \u003c parts.length; i++) {\n       parts[i] \u003d parts[i].trim();\n     }\n \n-    if (parts.length % 2 \u003d\u003d 0) {\n-      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n-          \"of Journal Nodes specified. This is not recommended!\");\n-    }\n-    \n     List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n     for (String addr : parts) {\n       InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n           addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n       if (isa.isUnresolved()) {\n         throw new UnknownHostException(addr);\n       }\n       addrs.add(isa);\n     }\n     return addrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n      throws IOException{\n    String authority \u003d uri.getAuthority();\n    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n        \"URI has no authority: \" + uri);\n\n    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n    for (int i \u003d 0; i \u003c parts.length; i++) {\n      parts[i] \u003d parts[i].trim();\n    }\n\n    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n    for (String addr : parts) {\n      InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n      if (isa.isUnresolved()) {\n        throw new UnknownHostException(addr);\n      }\n      addrs.add(isa);\n    }\n    return addrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Util.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Util.java",
            "oldMethodName": "getLoggerAddresses",
            "newMethodName": "getAddressesList"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
          "commitDate": "22/02/17 4:33 PM",
          "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "22/02/17 3:58 PM",
          "commitNameOld": "b10e962224a8ae1c6031a05322b0cc5e564bd078",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,22 @@\n-  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n-      throws IOException {\n+  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n+      throws IOException{\n     String authority \u003d uri.getAuthority();\n     Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n         \"URI has no authority: \" + uri);\n-    \n+\n     String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n     for (int i \u003d 0; i \u003c parts.length; i++) {\n       parts[i] \u003d parts[i].trim();\n     }\n \n-    if (parts.length % 2 \u003d\u003d 0) {\n-      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n-          \"of Journal Nodes specified. This is not recommended!\");\n-    }\n-    \n     List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n     for (String addr : parts) {\n       InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n           addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n       if (isa.isUnresolved()) {\n         throw new UnknownHostException(addr);\n       }\n       addrs.add(isa);\n     }\n     return addrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n      throws IOException{\n    String authority \u003d uri.getAuthority();\n    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n        \"URI has no authority: \" + uri);\n\n    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n    for (int i \u003d 0; i \u003c parts.length; i++) {\n      parts[i] \u003d parts[i].trim();\n    }\n\n    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n    for (String addr : parts) {\n      InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n      if (isa.isUnresolved()) {\n        throw new UnknownHostException(addr);\n      }\n      addrs.add(isa);\n    }\n    return addrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Util.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
          "commitDate": "22/02/17 4:33 PM",
          "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "22/02/17 3:58 PM",
          "commitNameOld": "b10e962224a8ae1c6031a05322b0cc5e564bd078",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,22 @@\n-  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n-      throws IOException {\n+  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n+      throws IOException{\n     String authority \u003d uri.getAuthority();\n     Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n         \"URI has no authority: \" + uri);\n-    \n+\n     String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n     for (int i \u003d 0; i \u003c parts.length; i++) {\n       parts[i] \u003d parts[i].trim();\n     }\n \n-    if (parts.length % 2 \u003d\u003d 0) {\n-      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n-          \"of Journal Nodes specified. This is not recommended!\");\n-    }\n-    \n     List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n     for (String addr : parts) {\n       InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n           addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n       if (isa.isUnresolved()) {\n         throw new UnknownHostException(addr);\n       }\n       addrs.add(isa);\n     }\n     return addrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n      throws IOException{\n    String authority \u003d uri.getAuthority();\n    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n        \"URI has no authority: \" + uri);\n\n    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n    for (int i \u003d 0; i \u003c parts.length; i++) {\n      parts[i] \u003d parts[i].trim();\n    }\n\n    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n    for (String addr : parts) {\n      InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n      if (isa.isUnresolved()) {\n        throw new UnknownHostException(addr);\n      }\n      addrs.add(isa);\n    }\n    return addrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Util.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
          "commitDate": "22/02/17 4:33 PM",
          "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "22/02/17 3:58 PM",
          "commitNameOld": "b10e962224a8ae1c6031a05322b0cc5e564bd078",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,22 @@\n-  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n-      throws IOException {\n+  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n+      throws IOException{\n     String authority \u003d uri.getAuthority();\n     Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n         \"URI has no authority: \" + uri);\n-    \n+\n     String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n     for (int i \u003d 0; i \u003c parts.length; i++) {\n       parts[i] \u003d parts[i].trim();\n     }\n \n-    if (parts.length % 2 \u003d\u003d 0) {\n-      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n-          \"of Journal Nodes specified. This is not recommended!\");\n-    }\n-    \n     List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n     for (String addr : parts) {\n       InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n           addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n       if (isa.isUnresolved()) {\n         throw new UnknownHostException(addr);\n       }\n       addrs.add(isa);\n     }\n     return addrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cInetSocketAddress\u003e getAddressesList(URI uri)\n      throws IOException{\n    String authority \u003d uri.getAuthority();\n    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n        \"URI has no authority: \" + uri);\n\n    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n    for (int i \u003d 0; i \u003c parts.length; i++) {\n      parts[i] \u003d parts[i].trim();\n    }\n\n    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n    for (String addr : parts) {\n      InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n      if (isa.isUnresolved()) {\n        throw new UnknownHostException(addr);\n      }\n      addrs.add(isa);\n    }\n    return addrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Util.java",
          "extendedDetails": {
            "oldValue": "getLoggerAddresses",
            "newValue": "getAddressesList"
          }
        }
      ]
    },
    "cd5e10ccca9b919d55ef7a500e61b44bd1a00171": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4210. Throw helpful exception when DNS entry for JournalNode cannot be resolved. Contributed by Charles Lamb and John Zhuge.\n",
      "commitDate": "29/08/16 5:48 PM",
      "commitName": "cd5e10ccca9b919d55ef7a500e61b44bd1a00171",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "27/07/16 5:55 PM",
      "commitNameOld": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 32.99,
      "commitsBetweenForRepo": 239,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n       throws IOException {\n     String authority \u003d uri.getAuthority();\n     Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n         \"URI has no authority: \" + uri);\n     \n     String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n     for (int i \u003d 0; i \u003c parts.length; i++) {\n       parts[i] \u003d parts[i].trim();\n     }\n \n     if (parts.length % 2 \u003d\u003d 0) {\n       LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n           \"of Journal Nodes specified. This is not recommended!\");\n     }\n     \n     List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n     for (String addr : parts) {\n-      addrs.add(NetUtils.createSocketAddr(\n-          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT));\n+      InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n+          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n+      if (isa.isUnresolved()) {\n+        throw new UnknownHostException(addr);\n+      }\n+      addrs.add(isa);\n     }\n     return addrs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n      throws IOException {\n    String authority \u003d uri.getAuthority();\n    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n        \"URI has no authority: \" + uri);\n    \n    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n    for (int i \u003d 0; i \u003c parts.length; i++) {\n      parts[i] \u003d parts[i].trim();\n    }\n\n    if (parts.length % 2 \u003d\u003d 0) {\n      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n          \"of Journal Nodes specified. This is not recommended!\");\n    }\n    \n    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n    for (String addr : parts) {\n      InetSocketAddress isa \u003d NetUtils.createSocketAddr(\n          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT);\n      if (isa.isUnresolved()) {\n        throw new UnknownHostException(addr);\n      }\n      addrs.add(isa);\n    }\n    return addrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,23 @@\n+  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n+      throws IOException {\n+    String authority \u003d uri.getAuthority();\n+    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n+        \"URI has no authority: \" + uri);\n+    \n+    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n+    for (int i \u003d 0; i \u003c parts.length; i++) {\n+      parts[i] \u003d parts[i].trim();\n+    }\n+\n+    if (parts.length % 2 \u003d\u003d 0) {\n+      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n+          \"of Journal Nodes specified. This is not recommended!\");\n+    }\n+    \n+    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n+    for (String addr : parts) {\n+      addrs.add(NetUtils.createSocketAddr(\n+          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT));\n+    }\n+    return addrs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getLoggerAddresses(URI uri)\n      throws IOException {\n    String authority \u003d uri.getAuthority();\n    Preconditions.checkArgument(authority !\u003d null \u0026\u0026 !authority.isEmpty(),\n        \"URI has no authority: \" + uri);\n    \n    String[] parts \u003d StringUtils.split(authority, \u0027;\u0027);\n    for (int i \u003d 0; i \u003c parts.length; i++) {\n      parts[i] \u003d parts[i].trim();\n    }\n\n    if (parts.length % 2 \u003d\u003d 0) {\n      LOG.warn(\"Quorum journal URI \u0027\" + uri + \"\u0027 has an even number \" +\n          \"of Journal Nodes specified. This is not recommended!\");\n    }\n    \n    List\u003cInetSocketAddress\u003e addrs \u003d Lists.newArrayList();\n    for (String addr : parts) {\n      addrs.add(NetUtils.createSocketAddr(\n          addr, DFSConfigKeys.DFS_JOURNALNODE_RPC_PORT_DEFAULT));\n    }\n    return addrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java"
    }
  }
}