{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainersMonitorImpl.java",
  "functionName": "recordUsage",
  "functionId": "recordUsage___containerId-ContainerId__pId-String__pTree-ResourceCalculatorProcessTree__ptInfo-ProcessTreeInfo__currentVmemUsage-long__currentPmemUsage-long__trackedContainersUtilization-ResourceUtilization",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
  "functionStartLine": 633,
  "functionEndLine": 679,
  "numCommitsSeen": 66,
  "timeTaken": 3055,
  "changeHistory": [
    "221089760910743eae58eb2cbd5ac86c4ee96a17",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
    "d795661868e330ac55d6ac7b0ee62fb658e03ff7",
    "41ac190dba782a59669bd622f572f452267c808e",
    "9449519a2503c55d9eac8fd7519df28aa0760059"
  ],
  "changeHistoryShort": {
    "221089760910743eae58eb2cbd5ac86c4ee96a17": "Ybodychange",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": "Ybodychange",
    "d795661868e330ac55d6ac7b0ee62fb658e03ff7": "Ybodychange",
    "41ac190dba782a59669bd622f572f452267c808e": "Ybodychange",
    "9449519a2503c55d9eac8fd7519df28aa0760059": "Yintroduced"
  },
  "changeHistoryDetails": {
    "221089760910743eae58eb2cbd5ac86c4ee96a17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9592. Use Logger format in ContainersMonitorImpl. Contributed by Inigo Goiri.\n",
      "commitDate": "31/05/19 5:35 PM",
      "commitName": "221089760910743eae58eb2cbd5ac86c4ee96a17",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 77.05,
      "commitsBetweenForRepo": 469,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     private void recordUsage(ContainerId containerId, String pId,\n                              ResourceCalculatorProcessTree pTree,\n                              ProcessTreeInfo ptInfo,\n                              long currentVmemUsage, long currentPmemUsage,\n                              ResourceUtilization trackedContainersUtilization) {\n       // if machine has 6 cores and 3 are used,\n       // cpuUsagePercentPerCore should be 300% and\n       // cpuUsageTotalCoresPercentage should be 50%\n       float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n       float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n               resourceCalculatorPlugin.getNumProcessors();\n \n       // Multiply by 1000 to avoid losing data when converting to int\n       int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n               * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n       long vmemLimit \u003d ptInfo.getVmemLimit();\n       long pmemLimit \u003d ptInfo.getPmemLimit();\n       if (AUDITLOG.isDebugEnabled()) {\n-        AUDITLOG.debug(String.format(\n-            \"Resource usage of ProcessTree %s for container-id %s:\" +\n-                \" %s CPU:%f CPU/core:%f\",\n-            pId, containerId.toString(),\n+        AUDITLOG.debug(\n+            \"Resource usage of ProcessTree {} for container-id {}:\" +\n+            \" {} CPU:{} CPU/core:{}\",\n+            pId, containerId,\n             formatUsageString(\n                 currentVmemUsage, vmemLimit,\n                 currentPmemUsage, pmemLimit),\n             cpuUsagePercentPerCore,\n-            cpuUsageTotalCoresPercentage));\n+            cpuUsageTotalCoresPercentage);\n       }\n \n       // Add resource utilization for this container\n       trackedContainersUtilization.addTo(\n               (int) (currentPmemUsage \u003e\u003e 20),\n               (int) (currentVmemUsage \u003e\u003e 20),\n               milliVcoresUsed / 1000.0f);\n \n       // Add usage to container metrics\n       if (containerMetricsEnabled) {\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                 (int) (currentPmemUsage \u003e\u003e 20));\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                 cpuUsagePercentPerCore, milliVcoresUsed);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void recordUsage(ContainerId containerId, String pId,\n                             ResourceCalculatorProcessTree pTree,\n                             ProcessTreeInfo ptInfo,\n                             long currentVmemUsage, long currentPmemUsage,\n                             ResourceUtilization trackedContainersUtilization) {\n      // if machine has 6 cores and 3 are used,\n      // cpuUsagePercentPerCore should be 300% and\n      // cpuUsageTotalCoresPercentage should be 50%\n      float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n      float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n              resourceCalculatorPlugin.getNumProcessors();\n\n      // Multiply by 1000 to avoid losing data when converting to int\n      int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n              * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n      long vmemLimit \u003d ptInfo.getVmemLimit();\n      long pmemLimit \u003d ptInfo.getPmemLimit();\n      if (AUDITLOG.isDebugEnabled()) {\n        AUDITLOG.debug(\n            \"Resource usage of ProcessTree {} for container-id {}:\" +\n            \" {} CPU:{} CPU/core:{}\",\n            pId, containerId,\n            formatUsageString(\n                currentVmemUsage, vmemLimit,\n                currentPmemUsage, pmemLimit),\n            cpuUsagePercentPerCore,\n            cpuUsageTotalCoresPercentage);\n      }\n\n      // Add resource utilization for this container\n      trackedContainersUtilization.addTo(\n              (int) (currentPmemUsage \u003e\u003e 20),\n              (int) (currentVmemUsage \u003e\u003e 20),\n              milliVcoresUsed / 1000.0f);\n\n      // Add usage to container metrics\n      if (containerMetricsEnabled) {\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                (int) (currentPmemUsage \u003e\u003e 20));\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                cpuUsagePercentPerCore, milliVcoresUsed);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7064. Use cgroup to get container resource utilization. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "26/01/18 4:27 PM",
      "commitName": "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "04/01/18 8:15 AM",
      "commitNameOld": "d795661868e330ac55d6ac7b0ee62fb658e03ff7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 22.34,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n     private void recordUsage(ContainerId containerId, String pId,\n                              ResourceCalculatorProcessTree pTree,\n                              ProcessTreeInfo ptInfo,\n                              long currentVmemUsage, long currentPmemUsage,\n                              ResourceUtilization trackedContainersUtilization) {\n       // if machine has 6 cores and 3 are used,\n       // cpuUsagePercentPerCore should be 300% and\n       // cpuUsageTotalCoresPercentage should be 50%\n       float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n       float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n               resourceCalculatorPlugin.getNumProcessors();\n \n       // Multiply by 1000 to avoid losing data when converting to int\n       int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n               * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n       long vmemLimit \u003d ptInfo.getVmemLimit();\n       long pmemLimit \u003d ptInfo.getPmemLimit();\n       if (AUDITLOG.isDebugEnabled()) {\n         AUDITLOG.debug(String.format(\n-                \"Memory usage of ProcessTree %s for container-id %s: \",\n-                pId, containerId.toString()) +\n-                formatUsageString(\n-                      currentVmemUsage, vmemLimit,\n-                      currentPmemUsage, pmemLimit));\n+            \"Resource usage of ProcessTree %s for container-id %s:\" +\n+                \" %s CPU:%f CPU/core:%f\",\n+            pId, containerId.toString(),\n+            formatUsageString(\n+                currentVmemUsage, vmemLimit,\n+                currentPmemUsage, pmemLimit),\n+            cpuUsagePercentPerCore,\n+            cpuUsageTotalCoresPercentage));\n       }\n \n       // Add resource utilization for this container\n       trackedContainersUtilization.addTo(\n               (int) (currentPmemUsage \u003e\u003e 20),\n               (int) (currentVmemUsage \u003e\u003e 20),\n               milliVcoresUsed / 1000.0f);\n \n       // Add usage to container metrics\n       if (containerMetricsEnabled) {\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                 (int) (currentPmemUsage \u003e\u003e 20));\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                 cpuUsagePercentPerCore, milliVcoresUsed);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void recordUsage(ContainerId containerId, String pId,\n                             ResourceCalculatorProcessTree pTree,\n                             ProcessTreeInfo ptInfo,\n                             long currentVmemUsage, long currentPmemUsage,\n                             ResourceUtilization trackedContainersUtilization) {\n      // if machine has 6 cores and 3 are used,\n      // cpuUsagePercentPerCore should be 300% and\n      // cpuUsageTotalCoresPercentage should be 50%\n      float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n      float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n              resourceCalculatorPlugin.getNumProcessors();\n\n      // Multiply by 1000 to avoid losing data when converting to int\n      int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n              * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n      long vmemLimit \u003d ptInfo.getVmemLimit();\n      long pmemLimit \u003d ptInfo.getPmemLimit();\n      if (AUDITLOG.isDebugEnabled()) {\n        AUDITLOG.debug(String.format(\n            \"Resource usage of ProcessTree %s for container-id %s:\" +\n                \" %s CPU:%f CPU/core:%f\",\n            pId, containerId.toString(),\n            formatUsageString(\n                currentVmemUsage, vmemLimit,\n                currentPmemUsage, pmemLimit),\n            cpuUsagePercentPerCore,\n            cpuUsageTotalCoresPercentage));\n      }\n\n      // Add resource utilization for this container\n      trackedContainersUtilization.addTo(\n              (int) (currentPmemUsage \u003e\u003e 20),\n              (int) (currentVmemUsage \u003e\u003e 20),\n              milliVcoresUsed / 1000.0f);\n\n      // Add usage to container metrics\n      if (containerMetricsEnabled) {\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                (int) (currentPmemUsage \u003e\u003e 20));\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                cpuUsagePercentPerCore, milliVcoresUsed);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "d795661868e330ac55d6ac7b0ee62fb658e03ff7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7678. Ability to enable logging of container memory stats. Contributed by Jim Brennan\n",
      "commitDate": "04/01/18 8:15 AM",
      "commitName": "d795661868e330ac55d6ac7b0ee62fb658e03ff7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "29/12/17 12:49 PM",
      "commitNameOld": "b82049b4f0065b76c3eb590d57eb5bf0ebc2f204",
      "commitAuthorOld": "Miklos Szegedi",
      "daysBetweenCommits": 5.81,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private void recordUsage(ContainerId containerId, String pId,\n                              ResourceCalculatorProcessTree pTree,\n                              ProcessTreeInfo ptInfo,\n                              long currentVmemUsage, long currentPmemUsage,\n                              ResourceUtilization trackedContainersUtilization) {\n       // if machine has 6 cores and 3 are used,\n       // cpuUsagePercentPerCore should be 300% and\n       // cpuUsageTotalCoresPercentage should be 50%\n       float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n       float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n               resourceCalculatorPlugin.getNumProcessors();\n \n       // Multiply by 1000 to avoid losing data when converting to int\n       int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n               * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n       long vmemLimit \u003d ptInfo.getVmemLimit();\n       long pmemLimit \u003d ptInfo.getPmemLimit();\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(String.format(\n+      if (AUDITLOG.isDebugEnabled()) {\n+        AUDITLOG.debug(String.format(\n                 \"Memory usage of ProcessTree %s for container-id %s: \",\n                 pId, containerId.toString()) +\n                 formatUsageString(\n                       currentVmemUsage, vmemLimit,\n                       currentPmemUsage, pmemLimit));\n       }\n \n       // Add resource utilization for this container\n       trackedContainersUtilization.addTo(\n               (int) (currentPmemUsage \u003e\u003e 20),\n               (int) (currentVmemUsage \u003e\u003e 20),\n               milliVcoresUsed / 1000.0f);\n \n       // Add usage to container metrics\n       if (containerMetricsEnabled) {\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                 (int) (currentPmemUsage \u003e\u003e 20));\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                 cpuUsagePercentPerCore, milliVcoresUsed);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void recordUsage(ContainerId containerId, String pId,\n                             ResourceCalculatorProcessTree pTree,\n                             ProcessTreeInfo ptInfo,\n                             long currentVmemUsage, long currentPmemUsage,\n                             ResourceUtilization trackedContainersUtilization) {\n      // if machine has 6 cores and 3 are used,\n      // cpuUsagePercentPerCore should be 300% and\n      // cpuUsageTotalCoresPercentage should be 50%\n      float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n      float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n              resourceCalculatorPlugin.getNumProcessors();\n\n      // Multiply by 1000 to avoid losing data when converting to int\n      int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n              * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n      long vmemLimit \u003d ptInfo.getVmemLimit();\n      long pmemLimit \u003d ptInfo.getPmemLimit();\n      if (AUDITLOG.isDebugEnabled()) {\n        AUDITLOG.debug(String.format(\n                \"Memory usage of ProcessTree %s for container-id %s: \",\n                pId, containerId.toString()) +\n                formatUsageString(\n                      currentVmemUsage, vmemLimit,\n                      currentPmemUsage, pmemLimit));\n      }\n\n      // Add resource utilization for this container\n      trackedContainersUtilization.addTo(\n              (int) (currentPmemUsage \u003e\u003e 20),\n              (int) (currentVmemUsage \u003e\u003e 20),\n              milliVcoresUsed / 1000.0f);\n\n      // Add usage to container metrics\n      if (containerMetricsEnabled) {\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                (int) (currentPmemUsage \u003e\u003e 20));\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                cpuUsagePercentPerCore, milliVcoresUsed);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "41ac190dba782a59669bd622f572f452267c808e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6438. Code can be improved in ContainersMonitorImpl.java\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "19/04/17 10:53 AM",
      "commitName": "41ac190dba782a59669bd622f572f452267c808e",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "28/11/16 3:19 PM",
      "commitNameOld": "62b42ef5dd04d516d33bf0890ac5cd49f8184a73",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 141.77,
      "commitsBetweenForRepo": 766,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n     private void recordUsage(ContainerId containerId, String pId,\n                              ResourceCalculatorProcessTree pTree,\n                              ProcessTreeInfo ptInfo,\n                              long currentVmemUsage, long currentPmemUsage,\n                              ResourceUtilization trackedContainersUtilization) {\n+      // if machine has 6 cores and 3 are used,\n+      // cpuUsagePercentPerCore should be 300% and\n+      // cpuUsageTotalCoresPercentage should be 50%\n       float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n       float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n               resourceCalculatorPlugin.getNumProcessors();\n \n       // Multiply by 1000 to avoid losing data when converting to int\n       int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n               * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n       long vmemLimit \u003d ptInfo.getVmemLimit();\n       long pmemLimit \u003d ptInfo.getPmemLimit();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(String.format(\n                 \"Memory usage of ProcessTree %s for container-id %s: \",\n                 pId, containerId.toString()) +\n                 formatUsageString(\n                       currentVmemUsage, vmemLimit,\n                       currentPmemUsage, pmemLimit));\n       }\n \n       // Add resource utilization for this container\n       trackedContainersUtilization.addTo(\n               (int) (currentPmemUsage \u003e\u003e 20),\n               (int) (currentVmemUsage \u003e\u003e 20),\n               milliVcoresUsed / 1000.0f);\n \n       // Add usage to container metrics\n       if (containerMetricsEnabled) {\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                 (int) (currentPmemUsage \u003e\u003e 20));\n         ContainerMetrics.forContainer(\n                 containerId, containerMetricsPeriodMs,\n                 containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                 cpuUsagePercentPerCore, milliVcoresUsed);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void recordUsage(ContainerId containerId, String pId,\n                             ResourceCalculatorProcessTree pTree,\n                             ProcessTreeInfo ptInfo,\n                             long currentVmemUsage, long currentPmemUsage,\n                             ResourceUtilization trackedContainersUtilization) {\n      // if machine has 6 cores and 3 are used,\n      // cpuUsagePercentPerCore should be 300% and\n      // cpuUsageTotalCoresPercentage should be 50%\n      float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n      float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n              resourceCalculatorPlugin.getNumProcessors();\n\n      // Multiply by 1000 to avoid losing data when converting to int\n      int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n              * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n      long vmemLimit \u003d ptInfo.getVmemLimit();\n      long pmemLimit \u003d ptInfo.getPmemLimit();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\n                \"Memory usage of ProcessTree %s for container-id %s: \",\n                pId, containerId.toString()) +\n                formatUsageString(\n                      currentVmemUsage, vmemLimit,\n                      currentPmemUsage, pmemLimit));\n      }\n\n      // Add resource utilization for this container\n      trackedContainersUtilization.addTo(\n              (int) (currentPmemUsage \u003e\u003e 20),\n              (int) (currentVmemUsage \u003e\u003e 20),\n              milliVcoresUsed / 1000.0f);\n\n      // Add usage to container metrics\n      if (containerMetricsEnabled) {\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                (int) (currentPmemUsage \u003e\u003e 20));\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                cpuUsagePercentPerCore, milliVcoresUsed);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "9449519a2503c55d9eac8fd7519df28aa0760059": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5776. Checkstyle: MonitoringThread.Run method length is too long (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "27/10/16 2:36 PM",
      "commitName": "9449519a2503c55d9eac8fd7519df28aa0760059",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,41 @@\n+    private void recordUsage(ContainerId containerId, String pId,\n+                             ResourceCalculatorProcessTree pTree,\n+                             ProcessTreeInfo ptInfo,\n+                             long currentVmemUsage, long currentPmemUsage,\n+                             ResourceUtilization trackedContainersUtilization) {\n+      float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n+      float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n+              resourceCalculatorPlugin.getNumProcessors();\n+\n+      // Multiply by 1000 to avoid losing data when converting to int\n+      int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n+              * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n+      long vmemLimit \u003d ptInfo.getVmemLimit();\n+      long pmemLimit \u003d ptInfo.getPmemLimit();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(String.format(\n+                \"Memory usage of ProcessTree %s for container-id %s: \",\n+                pId, containerId.toString()) +\n+                formatUsageString(\n+                      currentVmemUsage, vmemLimit,\n+                      currentPmemUsage, pmemLimit));\n+      }\n+\n+      // Add resource utilization for this container\n+      trackedContainersUtilization.addTo(\n+              (int) (currentPmemUsage \u003e\u003e 20),\n+              (int) (currentVmemUsage \u003e\u003e 20),\n+              milliVcoresUsed / 1000.0f);\n+\n+      // Add usage to container metrics\n+      if (containerMetricsEnabled) {\n+        ContainerMetrics.forContainer(\n+                containerId, containerMetricsPeriodMs,\n+                containerMetricsUnregisterDelayMs).recordMemoryUsage(\n+                (int) (currentPmemUsage \u003e\u003e 20));\n+        ContainerMetrics.forContainer(\n+                containerId, containerMetricsPeriodMs,\n+                containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n+                cpuUsagePercentPerCore, milliVcoresUsed);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void recordUsage(ContainerId containerId, String pId,\n                             ResourceCalculatorProcessTree pTree,\n                             ProcessTreeInfo ptInfo,\n                             long currentVmemUsage, long currentPmemUsage,\n                             ResourceUtilization trackedContainersUtilization) {\n      float cpuUsagePercentPerCore \u003d pTree.getCpuUsagePercent();\n      float cpuUsageTotalCoresPercentage \u003d cpuUsagePercentPerCore /\n              resourceCalculatorPlugin.getNumProcessors();\n\n      // Multiply by 1000 to avoid losing data when converting to int\n      int milliVcoresUsed \u003d (int) (cpuUsageTotalCoresPercentage * 1000\n              * maxVCoresAllottedForContainers /nodeCpuPercentageForYARN);\n      long vmemLimit \u003d ptInfo.getVmemLimit();\n      long pmemLimit \u003d ptInfo.getPmemLimit();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\n                \"Memory usage of ProcessTree %s for container-id %s: \",\n                pId, containerId.toString()) +\n                formatUsageString(\n                      currentVmemUsage, vmemLimit,\n                      currentPmemUsage, pmemLimit));\n      }\n\n      // Add resource utilization for this container\n      trackedContainersUtilization.addTo(\n              (int) (currentPmemUsage \u003e\u003e 20),\n              (int) (currentVmemUsage \u003e\u003e 20),\n              milliVcoresUsed / 1000.0f);\n\n      // Add usage to container metrics\n      if (containerMetricsEnabled) {\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordMemoryUsage(\n                (int) (currentPmemUsage \u003e\u003e 20));\n        ContainerMetrics.forContainer(\n                containerId, containerMetricsPeriodMs,\n                containerMetricsUnregisterDelayMs).recordCpuUsage((int)\n                cpuUsagePercentPerCore, milliVcoresUsed);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
    }
  }
}