{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YARNRunner.java",
  "functionName": "killJob",
  "functionId": "killJob___arg0-JobID",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
  "functionStartLine": 924,
  "functionEndLine": 969,
  "numCommitsSeen": 82,
  "timeTaken": 8221,
  "changeHistory": [
    "d39bc903a0069a740744bafe10e506e452ed7018",
    "209b1699fcd150676d4cc47e8e817796086c1986",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "92b7165a71656468f17ce8b760ce11e648932f0e",
    "0d2bb0623696c2cc822cb44e431345b2c773dbff",
    "f2b91a8367a762091482074505618b570a520b19",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "d39bc903a0069a740744bafe10e506e452ed7018": "Ybodychange",
    "209b1699fcd150676d4cc47e8e817796086c1986": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "92b7165a71656468f17ce8b760ce11e648932f0e": "Ybodychange",
    "0d2bb0623696c2cc822cb44e431345b2c773dbff": "Ybodychange",
    "f2b91a8367a762091482074505618b570a520b19": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d39bc903a0069a740744bafe10e506e452ed7018": {
      "type": "Ybodychange",
      "commitMessage": "Configurable timeout between YARNRunner terminate the application and forcefully kill. Contributed by Eric Payne.\n",
      "commitDate": "10/03/15 6:21 AM",
      "commitName": "d39bc903a0069a740744bafe10e506e452ed7018",
      "commitAuthor": "Junping Du",
      "commitDateOld": "03/12/14 9:02 AM",
      "commitNameOld": "03ab24aa01ffea1cacf1fa9cbbf73c3f2904d981",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 96.85,
      "commitsBetweenForRepo": 739,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   public void killJob(JobID arg0) throws IOException, InterruptedException {\n     /* check if the status is not running, if not send kill to RM */\n     JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n     ApplicationId appId \u003d TypeConverter.toYarn(arg0).getAppId();\n \n     // get status from RM and return\n     if (status \u003d\u003d null) {\n       killUnFinishedApplication(appId);\n       return;\n     }\n \n     if (status.getState() !\u003d JobStatus.State.RUNNING) {\n       killApplication(appId);\n       return;\n     }\n \n     try {\n       /* send a kill to the AM */\n       clientCache.getClient(arg0).killJob(arg0);\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       long timeKillIssued \u003d currentTimeMillis;\n-      while ((currentTimeMillis \u003c timeKillIssued + 10000L)\n+      long killTimeOut \u003d\n+          conf.getLong(MRJobConfig.MR_AM_HARD_KILL_TIMEOUT_MS,\n+                       MRJobConfig.DEFAULT_MR_AM_HARD_KILL_TIMEOUT_MS);\n+      while ((currentTimeMillis \u003c timeKillIssued + killTimeOut)\n           \u0026\u0026 !isJobInTerminalState(status)) {\n         try {\n           Thread.sleep(1000L);\n         } catch (InterruptedException ie) {\n           /** interrupted, just break */\n           break;\n         }\n         currentTimeMillis \u003d System.currentTimeMillis();\n         status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n         if (status \u003d\u003d null) {\n           killUnFinishedApplication(appId);\n           return;\n         }\n       }\n     } catch(IOException io) {\n       LOG.debug(\"Error when checking for application status\", io);\n     }\n     if (status !\u003d null \u0026\u0026 !isJobInTerminalState(status)) {\n       killApplication(appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    /* check if the status is not running, if not send kill to RM */\n    JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n    ApplicationId appId \u003d TypeConverter.toYarn(arg0).getAppId();\n\n    // get status from RM and return\n    if (status \u003d\u003d null) {\n      killUnFinishedApplication(appId);\n      return;\n    }\n\n    if (status.getState() !\u003d JobStatus.State.RUNNING) {\n      killApplication(appId);\n      return;\n    }\n\n    try {\n      /* send a kill to the AM */\n      clientCache.getClient(arg0).killJob(arg0);\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      long timeKillIssued \u003d currentTimeMillis;\n      long killTimeOut \u003d\n          conf.getLong(MRJobConfig.MR_AM_HARD_KILL_TIMEOUT_MS,\n                       MRJobConfig.DEFAULT_MR_AM_HARD_KILL_TIMEOUT_MS);\n      while ((currentTimeMillis \u003c timeKillIssued + killTimeOut)\n          \u0026\u0026 !isJobInTerminalState(status)) {\n        try {\n          Thread.sleep(1000L);\n        } catch (InterruptedException ie) {\n          /** interrupted, just break */\n          break;\n        }\n        currentTimeMillis \u003d System.currentTimeMillis();\n        status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n        if (status \u003d\u003d null) {\n          killUnFinishedApplication(appId);\n          return;\n        }\n      }\n    } catch(IOException io) {\n      LOG.debug(\"Error when checking for application status\", io);\n    }\n    if (status !\u003d null \u0026\u0026 !isJobInTerminalState(status)) {\n      killApplication(appId);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "209b1699fcd150676d4cc47e8e817796086c1986": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5542. Killing a job just as it finishes can generate an NPE in client. Contributed by Rohith\n",
      "commitDate": "17/10/14 12:51 PM",
      "commitName": "209b1699fcd150676d4cc47e8e817796086c1986",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/10/14 10:50 AM",
      "commitNameOld": "f19771a24c2f90982cf6dec35889836a6146c968",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   public void killJob(JobID arg0) throws IOException, InterruptedException {\n     /* check if the status is not running, if not send kill to RM */\n     JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n+    ApplicationId appId \u003d TypeConverter.toYarn(arg0).getAppId();\n+\n+    // get status from RM and return\n+    if (status \u003d\u003d null) {\n+      killUnFinishedApplication(appId);\n+      return;\n+    }\n+\n     if (status.getState() !\u003d JobStatus.State.RUNNING) {\n-      try {\n-        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n-      } catch (YarnException e) {\n-        throw new IOException(e);\n-      }\n+      killApplication(appId);\n       return;\n     }\n \n     try {\n       /* send a kill to the AM */\n       clientCache.getClient(arg0).killJob(arg0);\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       long timeKillIssued \u003d currentTimeMillis;\n-      while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n-          !\u003d JobStatus.State.KILLED)) {\n-          try {\n-            Thread.sleep(1000L);\n-          } catch(InterruptedException ie) {\n-            /** interrupted, just break */\n-            break;\n-          }\n-          currentTimeMillis \u003d System.currentTimeMillis();\n-          status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n+      while ((currentTimeMillis \u003c timeKillIssued + 10000L)\n+          \u0026\u0026 !isJobInTerminalState(status)) {\n+        try {\n+          Thread.sleep(1000L);\n+        } catch (InterruptedException ie) {\n+          /** interrupted, just break */\n+          break;\n+        }\n+        currentTimeMillis \u003d System.currentTimeMillis();\n+        status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n+        if (status \u003d\u003d null) {\n+          killUnFinishedApplication(appId);\n+          return;\n+        }\n       }\n     } catch(IOException io) {\n       LOG.debug(\"Error when checking for application status\", io);\n     }\n-    if (status.getState() !\u003d JobStatus.State.KILLED) {\n-      try {\n-        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n-      } catch (YarnException e) {\n-        throw new IOException(e);\n-      }\n+    if (status !\u003d null \u0026\u0026 !isJobInTerminalState(status)) {\n+      killApplication(appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    /* check if the status is not running, if not send kill to RM */\n    JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n    ApplicationId appId \u003d TypeConverter.toYarn(arg0).getAppId();\n\n    // get status from RM and return\n    if (status \u003d\u003d null) {\n      killUnFinishedApplication(appId);\n      return;\n    }\n\n    if (status.getState() !\u003d JobStatus.State.RUNNING) {\n      killApplication(appId);\n      return;\n    }\n\n    try {\n      /* send a kill to the AM */\n      clientCache.getClient(arg0).killJob(arg0);\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      long timeKillIssued \u003d currentTimeMillis;\n      while ((currentTimeMillis \u003c timeKillIssued + 10000L)\n          \u0026\u0026 !isJobInTerminalState(status)) {\n        try {\n          Thread.sleep(1000L);\n        } catch (InterruptedException ie) {\n          /** interrupted, just break */\n          break;\n        }\n        currentTimeMillis \u003d System.currentTimeMillis();\n        status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n        if (status \u003d\u003d null) {\n          killUnFinishedApplication(appId);\n          return;\n        }\n      }\n    } catch(IOException io) {\n      LOG.debug(\"Error when checking for application status\", io);\n    }\n    if (status !\u003d null \u0026\u0026 !isJobInTerminalState(status)) {\n      killApplication(appId);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/06/13 2:43 PM",
      "commitNameOld": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.27,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void killJob(JobID arg0) throws IOException, InterruptedException {\n     /* check if the status is not running, if not send kill to RM */\n     JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n     if (status.getState() !\u003d JobStatus.State.RUNNING) {\n       try {\n         resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n-      } catch (YarnRemoteException e) {\n+      } catch (YarnException e) {\n         throw new IOException(e);\n       }\n       return;\n     }\n \n     try {\n       /* send a kill to the AM */\n       clientCache.getClient(arg0).killJob(arg0);\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       long timeKillIssued \u003d currentTimeMillis;\n       while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n           !\u003d JobStatus.State.KILLED)) {\n           try {\n             Thread.sleep(1000L);\n           } catch(InterruptedException ie) {\n             /** interrupted, just break */\n             break;\n           }\n           currentTimeMillis \u003d System.currentTimeMillis();\n           status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n       }\n     } catch(IOException io) {\n       LOG.debug(\"Error when checking for application status\", io);\n     }\n     if (status.getState() !\u003d JobStatus.State.KILLED) {\n       try {\n         resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n-      } catch (YarnRemoteException e) {\n+      } catch (YarnException e) {\n         throw new IOException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    /* check if the status is not running, if not send kill to RM */\n    JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n    if (status.getState() !\u003d JobStatus.State.RUNNING) {\n      try {\n        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n      } catch (YarnException e) {\n        throw new IOException(e);\n      }\n      return;\n    }\n\n    try {\n      /* send a kill to the AM */\n      clientCache.getClient(arg0).killJob(arg0);\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      long timeKillIssued \u003d currentTimeMillis;\n      while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n          !\u003d JobStatus.State.KILLED)) {\n          try {\n            Thread.sleep(1000L);\n          } catch(InterruptedException ie) {\n            /** interrupted, just break */\n            break;\n          }\n          currentTimeMillis \u003d System.currentTimeMillis();\n          status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n      }\n    } catch(IOException io) {\n      LOG.debug(\"Error when checking for application status\", io);\n    }\n    if (status.getState() !\u003d JobStatus.State.KILLED) {\n      try {\n        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n      } catch (YarnException e) {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "92b7165a71656468f17ce8b760ce11e648932f0e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-629. Make YarnRemoteException not be rooted at IOException. Contributed by Xuan Gong.\nMAPREDUCE-5204. Handling YarnRemoteException separately from IOException in MR app after YARN-629. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479680 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/13 12:04 PM",
      "commitName": "92b7165a71656468f17ce8b760ce11e648932f0e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/04/13 12:28 PM",
      "commitNameOld": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 24.98,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   public void killJob(JobID arg0) throws IOException, InterruptedException {\n     /* check if the status is not running, if not send kill to RM */\n     JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n     if (status.getState() !\u003d JobStatus.State.RUNNING) {\n-      resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+      try {\n+        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+      } catch (YarnRemoteException e) {\n+        throw new IOException(e);\n+      }\n       return;\n     }\n \n     try {\n       /* send a kill to the AM */\n       clientCache.getClient(arg0).killJob(arg0);\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       long timeKillIssued \u003d currentTimeMillis;\n       while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n           !\u003d JobStatus.State.KILLED)) {\n           try {\n             Thread.sleep(1000L);\n           } catch(InterruptedException ie) {\n             /** interrupted, just break */\n             break;\n           }\n           currentTimeMillis \u003d System.currentTimeMillis();\n           status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n       }\n     } catch(IOException io) {\n       LOG.debug(\"Error when checking for application status\", io);\n     }\n     if (status.getState() !\u003d JobStatus.State.KILLED) {\n-      resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+      try {\n+        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+      } catch (YarnRemoteException e) {\n+        throw new IOException(e);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    /* check if the status is not running, if not send kill to RM */\n    JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n    if (status.getState() !\u003d JobStatus.State.RUNNING) {\n      try {\n        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n      } catch (YarnRemoteException e) {\n        throw new IOException(e);\n      }\n      return;\n    }\n\n    try {\n      /* send a kill to the AM */\n      clientCache.getClient(arg0).killJob(arg0);\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      long timeKillIssued \u003d currentTimeMillis;\n      while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n          !\u003d JobStatus.State.KILLED)) {\n          try {\n            Thread.sleep(1000L);\n          } catch(InterruptedException ie) {\n            /** interrupted, just break */\n            break;\n          }\n          currentTimeMillis \u003d System.currentTimeMillis();\n          status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n      }\n    } catch(IOException io) {\n      LOG.debug(\"Error when checking for application status\", io);\n    }\n    if (status.getState() !\u003d JobStatus.State.KILLED) {\n      try {\n        resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n      } catch (YarnRemoteException e) {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "0d2bb0623696c2cc822cb44e431345b2c773dbff": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3054. Unable to kill submitted jobs. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 1:30 PM",
      "commitName": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "23/09/11 7:07 AM",
      "commitNameOld": "b549c107825581b15fd14494099a943ff3213c6f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.27,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,31 @@\n   public void killJob(JobID arg0) throws IOException, InterruptedException {\n-    if (!clientCache.getClient(arg0).killJob(arg0)) {\n-    resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n-  }\n+    /* check if the status is not running, if not send kill to RM */\n+    JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n+    if (status.getState() !\u003d JobStatus.State.RUNNING) {\n+      resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+      return;\n+    } \n+    \n+    try {\n+      /* send a kill to the AM */\n+      clientCache.getClient(arg0).killJob(arg0);\n+      long currentTimeMillis \u003d System.currentTimeMillis();\n+      long timeKillIssued \u003d currentTimeMillis;\n+      while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n+          !\u003d JobStatus.State.KILLED)) {\n+          try {\n+            Thread.sleep(1000L);\n+          } catch(InterruptedException ie) {\n+            /** interrupted, just break */\n+            break;\n+          }\n+          currentTimeMillis \u003d System.currentTimeMillis();\n+          status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n+      }\n+    } catch(IOException io) {\n+      LOG.debug(\"Error when checking for application status\", io);\n+    }\n+    if (status.getState() !\u003d JobStatus.State.KILLED) {\n+      resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    /* check if the status is not running, if not send kill to RM */\n    JobStatus status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n    if (status.getState() !\u003d JobStatus.State.RUNNING) {\n      resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n      return;\n    } \n    \n    try {\n      /* send a kill to the AM */\n      clientCache.getClient(arg0).killJob(arg0);\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      long timeKillIssued \u003d currentTimeMillis;\n      while ((currentTimeMillis \u003c timeKillIssued + 10000L) \u0026\u0026 (status.getState()\n          !\u003d JobStatus.State.KILLED)) {\n          try {\n            Thread.sleep(1000L);\n          } catch(InterruptedException ie) {\n            /** interrupted, just break */\n            break;\n          }\n          currentTimeMillis \u003d System.currentTimeMillis();\n          status \u003d clientCache.getClient(arg0).getJobStatus(arg0);\n      }\n    } catch(IOException io) {\n      LOG.debug(\"Error when checking for application status\", io);\n    }\n    if (status.getState() !\u003d JobStatus.State.KILLED) {\n      resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "f2b91a8367a762091482074505618b570a520b19": {
      "type": "Ybodychange",
      "commitMessage": " MAPREDUCE-2807. Fix AM restart and client redirection. Contributed by Sharad Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 11:35 PM",
      "commitName": "f2b91a8367a762091482074505618b570a520b19",
      "commitAuthor": "Sharad Agarwal",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   public void killJob(JobID arg0) throws IOException, InterruptedException {\n-    if (!clientServiceDelegate.killJob(arg0)) {\n+    if (!clientCache.getClient(arg0).killJob(arg0)) {\n     resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n   }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    if (!clientCache.getClient(arg0).killJob(arg0)) {\n    resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n  }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    if (!clientServiceDelegate.killJob(arg0)) {\n    resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n  }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,5 @@\n+  public void killJob(JobID arg0) throws IOException, InterruptedException {\n+    if (!clientServiceDelegate.killJob(arg0)) {\n+    resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n+  }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void killJob(JobID arg0) throws IOException, InterruptedException {\n    if (!clientServiceDelegate.killJob(arg0)) {\n    resMgrDelegate.killApplication(TypeConverter.toYarn(arg0).getAppId());\n  }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
    }
  }
}