{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppImpl.java",
  "functionName": "createNewAttempt",
  "functionId": "createNewAttempt___appAttemptId-ApplicationAttemptId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
  "functionStartLine": 974,
  "functionEndLine": 994,
  "numCommitsSeen": 170,
  "timeTaken": 3904,
  "changeHistory": [
    "9bae6720cb8432efd78c909dc624c00e367cedf5",
    "235203dffda1482fb38762fde544c4dd9c3e1fa8",
    "b7613e0f406fb2b9bd5b1b3c79658e801f63c587",
    "620325e81696fca140195b74929ed9eda2d5eb16",
    "d6258b33a7428a0725ead96bc43f4dd444c7c8f1"
  ],
  "changeHistoryShort": {
    "9bae6720cb8432efd78c909dc624c00e367cedf5": "Ybodychange",
    "235203dffda1482fb38762fde544c4dd9c3e1fa8": "Ybodychange",
    "b7613e0f406fb2b9bd5b1b3c79658e801f63c587": "Ybodychange",
    "620325e81696fca140195b74929ed9eda2d5eb16": "Ybodychange",
    "d6258b33a7428a0725ead96bc43f4dd444c7c8f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9bae6720cb8432efd78c909dc624c00e367cedf5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6050. AMs can\u0027t be scheduled on racks or nodes (rkanter)\n",
      "commitDate": "27/03/17 5:23 PM",
      "commitName": "9bae6720cb8432efd78c909dc624c00e367cedf5",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "27/03/17 1:29 PM",
      "commitNameOld": "cd014d57aa8b896da02b5bcadafbd404bca2bc12",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n     BlacklistManager currentAMBlacklistManager;\n     if (currentAttempt !\u003d null) {\n       // Transfer over the blacklist from the previous app-attempt.\n       currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n     } else {\n       if (amBlacklistingEnabled \u0026\u0026 !submissionContext.getUnmanagedAM()) {\n         currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n             RMServerUtils.getApplicableNodeCountForAM(rmContext, conf,\n-                getAMResourceRequest()),\n+                getAMResourceRequests()),\n             blacklistDisableThreshold);\n       } else {\n         currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n       }\n     }\n     RMAppAttempt attempt \u003d\n         new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n-          submissionContext, conf, amReq, this, currentAMBlacklistManager);\n+          submissionContext, conf, amReqs, this, currentAMBlacklistManager);\n     attempts.put(appAttemptId, attempt);\n     currentAttempt \u003d attempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n    BlacklistManager currentAMBlacklistManager;\n    if (currentAttempt !\u003d null) {\n      // Transfer over the blacklist from the previous app-attempt.\n      currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n    } else {\n      if (amBlacklistingEnabled \u0026\u0026 !submissionContext.getUnmanagedAM()) {\n        currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n            RMServerUtils.getApplicableNodeCountForAM(rmContext, conf,\n                getAMResourceRequests()),\n            blacklistDisableThreshold);\n      } else {\n        currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n      }\n    }\n    RMAppAttempt attempt \u003d\n        new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n          submissionContext, conf, amReqs, this, currentAMBlacklistManager);\n    attempts.put(appAttemptId, attempt);\n    currentAttempt \u003d attempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "235203dffda1482fb38762fde544c4dd9c3e1fa8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6153. KeepContainer does not work when AM retry window is set. Contributed by kyungwan nam\n",
      "commitDate": "28/02/17 1:23 PM",
      "commitName": "235203dffda1482fb38762fde544c4dd9c3e1fa8",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/02/17 1:18 AM",
      "commitNameOld": "b7613e0f406fb2b9bd5b1b3c79658e801f63c587",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 13.5,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,21 @@\n   private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n     BlacklistManager currentAMBlacklistManager;\n     if (currentAttempt !\u003d null) {\n       // Transfer over the blacklist from the previous app-attempt.\n       currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n     } else {\n       if (amBlacklistingEnabled \u0026\u0026 !submissionContext.getUnmanagedAM()) {\n         currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n             RMServerUtils.getApplicableNodeCountForAM(rmContext, conf,\n                 getAMResourceRequest()),\n             blacklistDisableThreshold);\n       } else {\n         currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n       }\n     }\n     RMAppAttempt attempt \u003d\n         new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n-          submissionContext, conf,\n-          // The newly created attempt maybe last attempt if (number of\n-          // previously failed attempts(which should not include Preempted,\n-          // hardware error and NM resync) + 1) equal to the max-attempt\n-          // limit.\n-          maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n-          currentAMBlacklistManager);\n+          submissionContext, conf, amReq, this, currentAMBlacklistManager);\n     attempts.put(appAttemptId, attempt);\n     currentAttempt \u003d attempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n    BlacklistManager currentAMBlacklistManager;\n    if (currentAttempt !\u003d null) {\n      // Transfer over the blacklist from the previous app-attempt.\n      currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n    } else {\n      if (amBlacklistingEnabled \u0026\u0026 !submissionContext.getUnmanagedAM()) {\n        currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n            RMServerUtils.getApplicableNodeCountForAM(rmContext, conf,\n                getAMResourceRequest()),\n            blacklistDisableThreshold);\n      } else {\n        currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n      }\n    }\n    RMAppAttempt attempt \u003d\n        new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n          submissionContext, conf, amReq, this, currentAMBlacklistManager);\n    attempts.put(appAttemptId, attempt);\n    currentAttempt \u003d attempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "b7613e0f406fb2b9bd5b1b3c79658e801f63c587": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6156. AM blacklisting to consider node label partition (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "15/02/17 1:18 AM",
      "commitName": "b7613e0f406fb2b9bd5b1b3c79658e801f63c587",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "23/01/17 9:12 AM",
      "commitNameOld": "69fa81679f59378fd19a2c65db8019393d7c05a2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 22.67,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n     BlacklistManager currentAMBlacklistManager;\n     if (currentAttempt !\u003d null) {\n       // Transfer over the blacklist from the previous app-attempt.\n       currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n     } else {\n-      if (amBlacklistingEnabled) {\n+      if (amBlacklistingEnabled \u0026\u0026 !submissionContext.getUnmanagedAM()) {\n         currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n-            scheduler.getNumClusterNodes(), blacklistDisableThreshold);\n+            RMServerUtils.getApplicableNodeCountForAM(rmContext, conf,\n+                getAMResourceRequest()),\n+            blacklistDisableThreshold);\n       } else {\n         currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n       }\n     }\n     RMAppAttempt attempt \u003d\n         new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n           submissionContext, conf,\n           // The newly created attempt maybe last attempt if (number of\n           // previously failed attempts(which should not include Preempted,\n           // hardware error and NM resync) + 1) equal to the max-attempt\n           // limit.\n           maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n           currentAMBlacklistManager);\n     attempts.put(appAttemptId, attempt);\n     currentAttempt \u003d attempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n    BlacklistManager currentAMBlacklistManager;\n    if (currentAttempt !\u003d null) {\n      // Transfer over the blacklist from the previous app-attempt.\n      currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n    } else {\n      if (amBlacklistingEnabled \u0026\u0026 !submissionContext.getUnmanagedAM()) {\n        currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n            RMServerUtils.getApplicableNodeCountForAM(rmContext, conf,\n                getAMResourceRequest()),\n            blacklistDisableThreshold);\n      } else {\n        currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n      }\n    }\n    RMAppAttempt attempt \u003d\n        new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n          submissionContext, conf,\n          // The newly created attempt maybe last attempt if (number of\n          // previously failed attempts(which should not include Preempted,\n          // hardware error and NM resync) + 1) equal to the max-attempt\n          // limit.\n          maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n          currentAMBlacklistManager);\n    attempts.put(appAttemptId, attempt);\n    currentAttempt \u003d attempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "620325e81696fca140195b74929ed9eda2d5eb16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
      "commitDate": "07/06/16 3:06 PM",
      "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/05/16 9:28 AM",
      "commitNameOld": "39f2bac38b111f90d3402229201cdb4315f5d4f5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 27.23,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n-    BlacklistManager currentAMBlacklist;\n+    BlacklistManager currentAMBlacklistManager;\n     if (currentAttempt !\u003d null) {\n-      currentAMBlacklist \u003d currentAttempt.getAMBlacklist();\n+      // Transfer over the blacklist from the previous app-attempt.\n+      currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n     } else {\n       if (amBlacklistingEnabled) {\n-        currentAMBlacklist \u003d new SimpleBlacklistManager(\n+        currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n             scheduler.getNumClusterNodes(), blacklistDisableThreshold);\n       } else {\n-        currentAMBlacklist \u003d new DisabledBlacklistManager();\n+        currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n       }\n     }\n     RMAppAttempt attempt \u003d\n         new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n           submissionContext, conf,\n           // The newly created attempt maybe last attempt if (number of\n           // previously failed attempts(which should not include Preempted,\n           // hardware error and NM resync) + 1) equal to the max-attempt\n           // limit.\n           maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n-          currentAMBlacklist);\n+          currentAMBlacklistManager);\n     attempts.put(appAttemptId, attempt);\n     currentAttempt \u003d attempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n    BlacklistManager currentAMBlacklistManager;\n    if (currentAttempt !\u003d null) {\n      // Transfer over the blacklist from the previous app-attempt.\n      currentAMBlacklistManager \u003d currentAttempt.getAMBlacklistManager();\n    } else {\n      if (amBlacklistingEnabled) {\n        currentAMBlacklistManager \u003d new SimpleBlacklistManager(\n            scheduler.getNumClusterNodes(), blacklistDisableThreshold);\n      } else {\n        currentAMBlacklistManager \u003d new DisabledBlacklistManager();\n      }\n    }\n    RMAppAttempt attempt \u003d\n        new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n          submissionContext, conf,\n          // The newly created attempt maybe last attempt if (number of\n          // previously failed attempts(which should not include Preempted,\n          // hardware error and NM resync) + 1) equal to the max-attempt\n          // limit.\n          maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n          currentAMBlacklistManager);\n    attempts.put(appAttemptId, attempt);\n    currentAttempt \u003d attempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "d6258b33a7428a0725ead96bc43f4dd444c7c8f1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4497. RM might fail to restart when recovering apps whose attempts are missing. (Jun Gong via rohithsharmaks)\n",
      "commitDate": "22/01/16 6:57 AM",
      "commitName": "d6258b33a7428a0725ead96bc43f4dd444c7c8f1",
      "commitAuthor": "rohithsharmaks",
      "diff": "@@ -0,0 +1,24 @@\n+  private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n+    BlacklistManager currentAMBlacklist;\n+    if (currentAttempt !\u003d null) {\n+      currentAMBlacklist \u003d currentAttempt.getAMBlacklist();\n+    } else {\n+      if (amBlacklistingEnabled) {\n+        currentAMBlacklist \u003d new SimpleBlacklistManager(\n+            scheduler.getNumClusterNodes(), blacklistDisableThreshold);\n+      } else {\n+        currentAMBlacklist \u003d new DisabledBlacklistManager();\n+      }\n+    }\n+    RMAppAttempt attempt \u003d\n+        new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n+          submissionContext, conf,\n+          // The newly created attempt maybe last attempt if (number of\n+          // previously failed attempts(which should not include Preempted,\n+          // hardware error and NM resync) + 1) equal to the max-attempt\n+          // limit.\n+          maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n+          currentAMBlacklist);\n+    attempts.put(appAttemptId, attempt);\n+    currentAttempt \u003d attempt;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createNewAttempt(ApplicationAttemptId appAttemptId) {\n    BlacklistManager currentAMBlacklist;\n    if (currentAttempt !\u003d null) {\n      currentAMBlacklist \u003d currentAttempt.getAMBlacklist();\n    } else {\n      if (amBlacklistingEnabled) {\n        currentAMBlacklist \u003d new SimpleBlacklistManager(\n            scheduler.getNumClusterNodes(), blacklistDisableThreshold);\n      } else {\n        currentAMBlacklist \u003d new DisabledBlacklistManager();\n      }\n    }\n    RMAppAttempt attempt \u003d\n        new RMAppAttemptImpl(appAttemptId, rmContext, scheduler, masterService,\n          submissionContext, conf,\n          // The newly created attempt maybe last attempt if (number of\n          // previously failed attempts(which should not include Preempted,\n          // hardware error and NM resync) + 1) equal to the max-attempt\n          // limit.\n          maxAppAttempts \u003d\u003d (getNumFailedAppAttempts() + 1), amReq,\n          currentAMBlacklist);\n    attempts.put(appAttemptId, attempt);\n    currentAttempt \u003d attempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}