{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Dispatcher.java",
  "functionName": "service",
  "functionId": "service___req-HttpServletRequest__res-HttpServletResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
  "functionStartLine": 78,
  "functionEndLine": 184,
  "numCommitsSeen": 11,
  "timeTaken": 8067,
  "changeHistory": [
    "294695dd57cb75f2756a31a54264bdd37b32bb01",
    "5a58bfee30a662b1b556048504f66f9cf00d182a",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "bdf837a64a33b1ed051edeed6b9ed70b82b0a80e",
    "87b969c83541c6719abcc1dabc38dc41704876ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "294695dd57cb75f2756a31a54264bdd37b32bb01": "Ybodychange",
    "5a58bfee30a662b1b556048504f66f9cf00d182a": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "bdf837a64a33b1ed051edeed6b9ed70b82b0a80e": "Ybodychange",
    "87b969c83541c6719abcc1dabc38dc41704876ee": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "294695dd57cb75f2756a31a54264bdd37b32bb01": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16314.  Make sure all web end points are covered by the same authentication filter.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "05/06/19 3:55 PM",
      "commitName": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/10/18 2:53 AM",
      "commitNameOld": "2202e00ba8a44ad70f0a90e6c519257e3ae56a36",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 230.54,
      "commitsBetweenForRepo": 1605,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,107 @@\n   public void service(HttpServletRequest req, HttpServletResponse res)\n       throws ServletException, IOException {\n     res.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n       // quick hack to restart servers in dev mode without OS commands\n       res.setStatus(res.SC_NO_CONTENT);\n       LOG.info(\"dev mode restart requested\");\n       prepareToExit();\n       return;\n     }\n     // if they provide a redirectPath go there instead of going to\n     // \"/\" so that filters can differentiate the webapps.\n     if (uri.equals(\"/\")) {\n       String redirectPath \u003d webApp.getRedirectPath();\n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n+        if (req.getQueryString()!\u003dnull) {\n+          StringBuilder query \u003d new StringBuilder();\n+          query.append(redirectPath);\n+          query.append(\"?\");\n+          // Prevent HTTP response splitting vulnerability\n+          query.append(req.getQueryString().replaceAll(\"\\r\", \"\")\n+              .replaceAll(\"\\n\", \"\"));\n+          redirectPath \u003d query.toString();\n+        }\n         res.sendRedirect(redirectPath);\n         return;\n       }\n     }\n     String method \u003d req.getMethod();\n     if (method.equals(\"OPTIONS\")) {\n       doOptions(req, res);\n       return;\n     }\n     if (method.equals(\"TRACE\")) {\n       doTrace(req, res);\n       return;\n     }\n     if (method.equals(\"HEAD\")) {\n       doGet(req, res); // default to bad request\n       return;\n     }\n     String pathInfo \u003d req.getPathInfo();\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d \"/\";\n     }\n     Controller.RequestContext rc \u003d\n         injector.getInstance(Controller.RequestContext.class);\n \n     //short-circuit robots.txt serving for all YARN webapps.\n     if (uri.equals(RobotsTextPage.ROBOTS_TXT_PATH)) {\n       rc.setStatus(HttpServletResponse.SC_FOUND);\n       render(RobotsTextPage.class);\n       return;\n     }\n \n     if (setCookieParams(rc, req) \u003e 0) {\n       Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n       if (ec !\u003d null) {\n         rc.setStatus(Integer.parseInt(rc.cookies().\n             get(STATUS_COOKIE).getValue()));\n         removeErrorCookies(res, uri);\n         rc.set(Params.ERROR_DETAILS, ec.getValue());\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     rc.prefix \u003d webApp.name();\n     Router.Dest dest \u003d null;\n     try {\n       dest \u003d router.resolve(method, pathInfo);\n     } catch (WebAppException e) {\n       rc.error \u003d e;\n       if (!e.getMessage().contains(\"not found\")) {\n         rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     if (dest \u003d\u003d null) {\n       rc.setStatus(res.SC_NOT_FOUND);\n       render(ErrorPage.class);\n       return;\n     }\n     rc.devMode \u003d devMode;\n     setMoreParams(rc, pathInfo, dest);\n     Controller controller \u003d injector.getInstance(dest.controllerClass);\n     try {\n       // TODO: support args converted from /path/:arg1/...\n       dest.action.invoke(controller, (Object[]) null);\n       if (!rc.rendered) {\n         if (dest.defaultViewClass !\u003d null) {\n           render(dest.defaultViewClass);\n         } else if (rc.status \u003d\u003d 200) {\n           throw new IllegalStateException(\"No view rendered for 200\");\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"error handling URI: \"+ uri, e);\n       // Page could be half rendered (but still not flushed). So redirect.\n       redirectToErrorPage(res, e, uri, devMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    // if they provide a redirectPath go there instead of going to\n    // \"/\" so that filters can differentiate the webapps.\n    if (uri.equals(\"/\")) {\n      String redirectPath \u003d webApp.getRedirectPath();\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        if (req.getQueryString()!\u003dnull) {\n          StringBuilder query \u003d new StringBuilder();\n          query.append(redirectPath);\n          query.append(\"?\");\n          // Prevent HTTP response splitting vulnerability\n          query.append(req.getQueryString().replaceAll(\"\\r\", \"\")\n              .replaceAll(\"\\n\", \"\"));\n          redirectPath \u003d query.toString();\n        }\n        res.sendRedirect(redirectPath);\n        return;\n      }\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n\n    //short-circuit robots.txt serving for all YARN webapps.\n    if (uri.equals(RobotsTextPage.ROBOTS_TXT_PATH)) {\n      rc.setStatus(HttpServletResponse.SC_FOUND);\n      render(RobotsTextPage.class);\n      return;\n    }\n\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
      "extendedDetails": {}
    },
    "5a58bfee30a662b1b556048504f66f9cf00d182a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4591. YARN Web UIs should provide a robots.txt. (Sidharta Seethana via wangda)\n",
      "commitDate": "20/09/16 5:20 PM",
      "commitName": "5a58bfee30a662b1b556048504f66f9cf00d182a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "13/03/14 7:39 PM",
      "commitNameOld": "d9cdcb9474528733c488d4a5c73d2e4abb1af6fb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 921.9,
      "commitsBetweenForRepo": 7083,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,98 @@\n   public void service(HttpServletRequest req, HttpServletResponse res)\n       throws ServletException, IOException {\n     res.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n       // quick hack to restart servers in dev mode without OS commands\n       res.setStatus(res.SC_NO_CONTENT);\n       LOG.info(\"dev mode restart requested\");\n       prepareToExit();\n       return;\n     }\n     // if they provide a redirectPath go there instead of going to\n     // \"/\" so that filters can differentiate the webapps.\n     if (uri.equals(\"/\")) {\n       String redirectPath \u003d webApp.getRedirectPath();\n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         res.sendRedirect(redirectPath);\n         return;\n       }\n     }\n     String method \u003d req.getMethod();\n     if (method.equals(\"OPTIONS\")) {\n       doOptions(req, res);\n       return;\n     }\n     if (method.equals(\"TRACE\")) {\n       doTrace(req, res);\n       return;\n     }\n     if (method.equals(\"HEAD\")) {\n       doGet(req, res); // default to bad request\n       return;\n     }\n     String pathInfo \u003d req.getPathInfo();\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d \"/\";\n     }\n     Controller.RequestContext rc \u003d\n         injector.getInstance(Controller.RequestContext.class);\n+\n+    //short-circuit robots.txt serving for all YARN webapps.\n+    if (uri.equals(RobotsTextPage.ROBOTS_TXT_PATH)) {\n+      rc.setStatus(HttpServletResponse.SC_FOUND);\n+      render(RobotsTextPage.class);\n+      return;\n+    }\n+\n     if (setCookieParams(rc, req) \u003e 0) {\n       Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n       if (ec !\u003d null) {\n         rc.setStatus(Integer.parseInt(rc.cookies().\n             get(STATUS_COOKIE).getValue()));\n         removeErrorCookies(res, uri);\n         rc.set(Params.ERROR_DETAILS, ec.getValue());\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     rc.prefix \u003d webApp.name();\n     Router.Dest dest \u003d null;\n     try {\n       dest \u003d router.resolve(method, pathInfo);\n     } catch (WebAppException e) {\n       rc.error \u003d e;\n       if (!e.getMessage().contains(\"not found\")) {\n         rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     if (dest \u003d\u003d null) {\n       rc.setStatus(res.SC_NOT_FOUND);\n       render(ErrorPage.class);\n       return;\n     }\n     rc.devMode \u003d devMode;\n     setMoreParams(rc, pathInfo, dest);\n     Controller controller \u003d injector.getInstance(dest.controllerClass);\n     try {\n       // TODO: support args converted from /path/:arg1/...\n       dest.action.invoke(controller, (Object[]) null);\n       if (!rc.rendered) {\n         if (dest.defaultViewClass !\u003d null) {\n           render(dest.defaultViewClass);\n         } else if (rc.status \u003d\u003d 200) {\n           throw new IllegalStateException(\"No view rendered for 200\");\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"error handling URI: \"+ uri, e);\n       // Page could be half rendered (but still not flushed). So redirect.\n       redirectToErrorPage(res, e, uri, devMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    // if they provide a redirectPath go there instead of going to\n    // \"/\" so that filters can differentiate the webapps.\n    if (uri.equals(\"/\")) {\n      String redirectPath \u003d webApp.getRedirectPath();\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        res.sendRedirect(redirectPath);\n        return;\n      }\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n\n    //short-circuit robots.txt serving for all YARN webapps.\n    if (uri.equals(RobotsTextPage.ROBOTS_TXT_PATH)) {\n      rc.setStatus(HttpServletResponse.SC_FOUND);\n      render(RobotsTextPage.class);\n      return;\n    }\n\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    // if they provide a redirectPath go there instead of going to\n    // \"/\" so that filters can differentiate the webapps.\n    if (uri.equals(\"/\")) {\n      String redirectPath \u003d webApp.getRedirectPath();\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        res.sendRedirect(redirectPath);\n        return;\n      }\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java"
      }
    },
    "bdf837a64a33b1ed051edeed6b9ed70b82b0a80e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3804. yarn webapp interface vulnerable to cross scripting attacks (Dave Thompson via bobby)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241225 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:34 PM",
      "commitName": "bdf837a64a33b1ed051edeed6b9ed70b82b0a80e",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "27/09/11 10:03 AM",
      "commitNameOld": "87b969c83541c6719abcc1dabc38dc41704876ee",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 132.23,
      "commitsBetweenForRepo": 836,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,90 @@\n   public void service(HttpServletRequest req, HttpServletResponse res)\n       throws ServletException, IOException {\n     res.setCharacterEncoding(\"UTF-8\");\n-    String uri \u003d req.getRequestURI();\n+    String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n+\n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n       // quick hack to restart servers in dev mode without OS commands\n       res.setStatus(res.SC_NO_CONTENT);\n       LOG.info(\"dev mode restart requested\");\n       prepareToExit();\n       return;\n     }\n     // if they provide a redirectPath go there instead of going to\n     // \"/\" so that filters can differentiate the webapps.\n     if (uri.equals(\"/\")) {\n       String redirectPath \u003d webApp.getRedirectPath();\n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         res.sendRedirect(redirectPath);\n         return;\n       }\n     }\n     String method \u003d req.getMethod();\n     if (method.equals(\"OPTIONS\")) {\n       doOptions(req, res);\n       return;\n     }\n     if (method.equals(\"TRACE\")) {\n       doTrace(req, res);\n       return;\n     }\n     if (method.equals(\"HEAD\")) {\n       doGet(req, res); // default to bad request\n       return;\n     }\n     String pathInfo \u003d req.getPathInfo();\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d \"/\";\n     }\n     Controller.RequestContext rc \u003d\n         injector.getInstance(Controller.RequestContext.class);\n     if (setCookieParams(rc, req) \u003e 0) {\n       Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n       if (ec !\u003d null) {\n         rc.setStatus(Integer.parseInt(rc.cookies().\n             get(STATUS_COOKIE).getValue()));\n         removeErrorCookies(res, uri);\n         rc.set(Params.ERROR_DETAILS, ec.getValue());\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     rc.prefix \u003d webApp.name();\n     Router.Dest dest \u003d null;\n     try {\n       dest \u003d router.resolve(method, pathInfo);\n     } catch (WebAppException e) {\n       rc.error \u003d e;\n       if (!e.getMessage().contains(\"not found\")) {\n         rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     if (dest \u003d\u003d null) {\n       rc.setStatus(res.SC_NOT_FOUND);\n       render(ErrorPage.class);\n       return;\n     }\n     rc.devMode \u003d devMode;\n     setMoreParams(rc, pathInfo, dest);\n     Controller controller \u003d injector.getInstance(dest.controllerClass);\n     try {\n       // TODO: support args converted from /path/:arg1/...\n       dest.action.invoke(controller, (Object[]) null);\n       if (!rc.rendered) {\n         if (dest.defaultViewClass !\u003d null) {\n           render(dest.defaultViewClass);\n         } else if (rc.status \u003d\u003d 200) {\n           throw new IllegalStateException(\"No view rendered for 200\");\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"error handling URI: \"+ uri, e);\n       // Page could be half rendered (but still not flushed). So redirect.\n       redirectToErrorPage(res, e, uri, devMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(req.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    // if they provide a redirectPath go there instead of going to\n    // \"/\" so that filters can differentiate the webapps.\n    if (uri.equals(\"/\")) {\n      String redirectPath \u003d webApp.getRedirectPath();\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        res.sendRedirect(redirectPath);\n        return;\n      }\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
      "extendedDetails": {}
    },
    "87b969c83541c6719abcc1dabc38dc41704876ee": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2999. Fix YARN webapp framework to properly filter servlet paths. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176469 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 10:03 AM",
      "commitName": "87b969c83541c6719abcc1dabc38dc41704876ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 33.7,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,89 @@\n   public void service(HttpServletRequest req, HttpServletResponse res)\n       throws ServletException, IOException {\n     res.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d req.getRequestURI();\n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n       // quick hack to restart servers in dev mode without OS commands\n       res.setStatus(res.SC_NO_CONTENT);\n       LOG.info(\"dev mode restart requested\");\n       prepareToExit();\n       return;\n     }\n+    // if they provide a redirectPath go there instead of going to\n+    // \"/\" so that filters can differentiate the webapps.\n+    if (uri.equals(\"/\")) {\n+      String redirectPath \u003d webApp.getRedirectPath();\n+      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n+        res.sendRedirect(redirectPath);\n+        return;\n+      }\n+    }\n     String method \u003d req.getMethod();\n     if (method.equals(\"OPTIONS\")) {\n       doOptions(req, res);\n       return;\n     }\n     if (method.equals(\"TRACE\")) {\n       doTrace(req, res);\n       return;\n     }\n     if (method.equals(\"HEAD\")) {\n       doGet(req, res); // default to bad request\n       return;\n     }\n     String pathInfo \u003d req.getPathInfo();\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d \"/\";\n     }\n     Controller.RequestContext rc \u003d\n         injector.getInstance(Controller.RequestContext.class);\n     if (setCookieParams(rc, req) \u003e 0) {\n       Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n       if (ec !\u003d null) {\n         rc.setStatus(Integer.parseInt(rc.cookies().\n             get(STATUS_COOKIE).getValue()));\n         removeErrorCookies(res, uri);\n         rc.set(Params.ERROR_DETAILS, ec.getValue());\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     rc.prefix \u003d webApp.name();\n     Router.Dest dest \u003d null;\n     try {\n       dest \u003d router.resolve(method, pathInfo);\n     } catch (WebAppException e) {\n       rc.error \u003d e;\n       if (!e.getMessage().contains(\"not found\")) {\n         rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n         render(ErrorPage.class);\n         return;\n       }\n     }\n     if (dest \u003d\u003d null) {\n       rc.setStatus(res.SC_NOT_FOUND);\n       render(ErrorPage.class);\n       return;\n     }\n     rc.devMode \u003d devMode;\n     setMoreParams(rc, pathInfo, dest);\n     Controller controller \u003d injector.getInstance(dest.controllerClass);\n     try {\n       // TODO: support args converted from /path/:arg1/...\n       dest.action.invoke(controller, (Object[]) null);\n       if (!rc.rendered) {\n         if (dest.defaultViewClass !\u003d null) {\n           render(dest.defaultViewClass);\n         } else if (rc.status \u003d\u003d 200) {\n           throw new IllegalStateException(\"No view rendered for 200\");\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"error handling URI: \"+ uri, e);\n       // Page could be half rendered (but still not flushed). So redirect.\n       redirectToErrorPage(res, e, uri, devMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d req.getRequestURI();\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    // if they provide a redirectPath go there instead of going to\n    // \"/\" so that filters can differentiate the webapps.\n    if (uri.equals(\"/\")) {\n      String redirectPath \u003d webApp.getRedirectPath();\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        res.sendRedirect(redirectPath);\n        return;\n      }\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d req.getRequestURI();\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,80 @@\n+  public void service(HttpServletRequest req, HttpServletResponse res)\n+      throws ServletException, IOException {\n+    res.setCharacterEncoding(\"UTF-8\");\n+    String uri \u003d req.getRequestURI();\n+    if (uri \u003d\u003d null) {\n+      uri \u003d \"/\";\n+    }\n+    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n+      // quick hack to restart servers in dev mode without OS commands\n+      res.setStatus(res.SC_NO_CONTENT);\n+      LOG.info(\"dev mode restart requested\");\n+      prepareToExit();\n+      return;\n+    }\n+    String method \u003d req.getMethod();\n+    if (method.equals(\"OPTIONS\")) {\n+      doOptions(req, res);\n+      return;\n+    }\n+    if (method.equals(\"TRACE\")) {\n+      doTrace(req, res);\n+      return;\n+    }\n+    if (method.equals(\"HEAD\")) {\n+      doGet(req, res); // default to bad request\n+      return;\n+    }\n+    String pathInfo \u003d req.getPathInfo();\n+    if (pathInfo \u003d\u003d null) {\n+      pathInfo \u003d \"/\";\n+    }\n+    Controller.RequestContext rc \u003d\n+        injector.getInstance(Controller.RequestContext.class);\n+    if (setCookieParams(rc, req) \u003e 0) {\n+      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n+      if (ec !\u003d null) {\n+        rc.setStatus(Integer.parseInt(rc.cookies().\n+            get(STATUS_COOKIE).getValue()));\n+        removeErrorCookies(res, uri);\n+        rc.set(Params.ERROR_DETAILS, ec.getValue());\n+        render(ErrorPage.class);\n+        return;\n+      }\n+    }\n+    rc.prefix \u003d webApp.name();\n+    Router.Dest dest \u003d null;\n+    try {\n+      dest \u003d router.resolve(method, pathInfo);\n+    } catch (WebAppException e) {\n+      rc.error \u003d e;\n+      if (!e.getMessage().contains(\"not found\")) {\n+        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n+        render(ErrorPage.class);\n+        return;\n+      }\n+    }\n+    if (dest \u003d\u003d null) {\n+      rc.setStatus(res.SC_NOT_FOUND);\n+      render(ErrorPage.class);\n+      return;\n+    }\n+    rc.devMode \u003d devMode;\n+    setMoreParams(rc, pathInfo, dest);\n+    Controller controller \u003d injector.getInstance(dest.controllerClass);\n+    try {\n+      // TODO: support args converted from /path/:arg1/...\n+      dest.action.invoke(controller, (Object[]) null);\n+      if (!rc.rendered) {\n+        if (dest.defaultViewClass !\u003d null) {\n+          render(dest.defaultViewClass);\n+        } else if (rc.status \u003d\u003d 200) {\n+          throw new IllegalStateException(\"No view rendered for 200\");\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"error handling URI: \"+ uri, e);\n+      // Page could be half rendered (but still not flushed). So redirect.\n+      redirectToErrorPage(res, e, uri, devMode);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void service(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    res.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d req.getRequestURI();\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    if (devMode \u0026\u0026 uri.equals(\"/__stop\")) {\n      // quick hack to restart servers in dev mode without OS commands\n      res.setStatus(res.SC_NO_CONTENT);\n      LOG.info(\"dev mode restart requested\");\n      prepareToExit();\n      return;\n    }\n    String method \u003d req.getMethod();\n    if (method.equals(\"OPTIONS\")) {\n      doOptions(req, res);\n      return;\n    }\n    if (method.equals(\"TRACE\")) {\n      doTrace(req, res);\n      return;\n    }\n    if (method.equals(\"HEAD\")) {\n      doGet(req, res); // default to bad request\n      return;\n    }\n    String pathInfo \u003d req.getPathInfo();\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d \"/\";\n    }\n    Controller.RequestContext rc \u003d\n        injector.getInstance(Controller.RequestContext.class);\n    if (setCookieParams(rc, req) \u003e 0) {\n      Cookie ec \u003d rc.cookies().get(ERROR_COOKIE);\n      if (ec !\u003d null) {\n        rc.setStatus(Integer.parseInt(rc.cookies().\n            get(STATUS_COOKIE).getValue()));\n        removeErrorCookies(res, uri);\n        rc.set(Params.ERROR_DETAILS, ec.getValue());\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    rc.prefix \u003d webApp.name();\n    Router.Dest dest \u003d null;\n    try {\n      dest \u003d router.resolve(method, pathInfo);\n    } catch (WebAppException e) {\n      rc.error \u003d e;\n      if (!e.getMessage().contains(\"not found\")) {\n        rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\n        render(ErrorPage.class);\n        return;\n      }\n    }\n    if (dest \u003d\u003d null) {\n      rc.setStatus(res.SC_NOT_FOUND);\n      render(ErrorPage.class);\n      return;\n    }\n    rc.devMode \u003d devMode;\n    setMoreParams(rc, pathInfo, dest);\n    Controller controller \u003d injector.getInstance(dest.controllerClass);\n    try {\n      // TODO: support args converted from /path/:arg1/...\n      dest.action.invoke(controller, (Object[]) null);\n      if (!rc.rendered) {\n        if (dest.defaultViewClass !\u003d null) {\n          render(dest.defaultViewClass);\n        } else if (rc.status \u003d\u003d 200) {\n          throw new IllegalStateException(\"No view rendered for 200\");\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"error handling URI: \"+ uri, e);\n      // Page could be half rendered (but still not flushed). So redirect.\n      redirectToErrorPage(res, e, uri, devMode);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/Dispatcher.java"
    }
  }
}