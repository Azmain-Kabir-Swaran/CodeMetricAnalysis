{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "calculateShares",
  "functionId": "calculateShares___clusterRes-ResourceInformation[]__first-Resource__second-Resource__firstShares-double[]__secondShares-double[]__max-double[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 272,
  "functionEndLine": 299,
  "numCommitsSeen": 37,
  "timeTaken": 2196,
  "changeHistory": [
    "bb26514ba9e8a038749c4acd592a47d5cd5bf92a",
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "a0030c8c6f5489d8285632a651394b2b2320255c"
  ],
  "changeHistoryShort": {
    "bb26514ba9e8a038749c4acd592a47d5cd5bf92a": "Ybodychange",
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "a0030c8c6f5489d8285632a651394b2b2320255c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb26514ba9e8a038749c4acd592a47d5cd5bf92a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9785. Fix DominantResourceCalculator when one resource is zero. Contributed by Bibin A Chundatt, Sunil Govindan, Bilwa S T.\n",
      "commitDate": "02/09/19 11:55 PM",
      "commitName": "bb26514ba9e8a038749c4acd592a47d5cd5bf92a",
      "commitAuthor": "Zhankun Tang",
      "commitDateOld": "06/05/19 5:00 AM",
      "commitNameOld": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 119.79,
      "commitsBetweenForRepo": 980,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n       Resource second, double[] firstShares, double[] secondShares,\n       double[] max) {\n     ResourceInformation[] firstRes \u003d first.getResources();\n     ResourceInformation[] secondRes \u003d second.getResources();\n \n     max[0] \u003d 0.0;\n     max[1] \u003d 0.0;\n \n     int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n       secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n \n+      if (firstShares[i] \u003d\u003d Float.POSITIVE_INFINITY ||\n+              secondShares[i] \u003d\u003d Float.POSITIVE_INFINITY) {\n+        continue;\n+      }\n+\n       if (firstShares[i] \u003e max[0]) {\n         max[0] \u003d firstShares[i];\n       }\n \n       if (secondShares[i] \u003e max[1]) {\n         max[1] \u003d secondShares[i];\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n      Resource second, double[] firstShares, double[] secondShares,\n      double[] max) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n\n    max[0] \u003d 0.0;\n    max[1] \u003d 0.0;\n\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n\n      if (firstShares[i] \u003d\u003d Float.POSITIVE_INFINITY ||\n              secondShares[i] \u003d\u003d Float.POSITIVE_INFINITY) {\n        continue;\n      }\n\n      if (firstShares[i] \u003e max[0]) {\n        max[0] \u003d firstShares[i];\n      }\n\n      if (secondShares[i] \u003e max[1]) {\n        max[1] \u003d secondShares[i];\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n       Resource second, double[] firstShares, double[] secondShares,\n       double[] max) {\n     ResourceInformation[] firstRes \u003d first.getResources();\n     ResourceInformation[] secondRes \u003d second.getResources();\n \n     max[0] \u003d 0.0;\n     max[1] \u003d 0.0;\n \n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n       secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n \n       if (firstShares[i] \u003e max[0]) {\n         max[0] \u003d firstShares[i];\n       }\n \n       if (secondShares[i] \u003e max[1]) {\n         max[1] \u003d secondShares[i];\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n      Resource second, double[] firstShares, double[] secondShares,\n      double[] max) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n\n    max[0] \u003d 0.0;\n    max[1] \u003d 0.0;\n\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n\n      if (firstShares[i] \u003e max[0]) {\n        max[0] \u003d firstShares[i];\n      }\n\n      if (secondShares[i] \u003e max[1]) {\n        max[1] \u003d secondShares[i];\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n       Resource second, double[] firstShares, double[] secondShares,\n       double[] max) {\n     ResourceInformation[] firstRes \u003d first.getResources();\n     ResourceInformation[] secondRes \u003d second.getResources();\n \n     max[0] \u003d 0.0;\n     max[1] \u003d 0.0;\n \n-    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n       firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n       secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n \n       if (firstShares[i] \u003e max[0]) {\n         max[0] \u003d firstShares[i];\n       }\n \n       if (secondShares[i] \u003e max[1]) {\n         max[1] \u003d secondShares[i];\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n      Resource second, double[] firstShares, double[] secondShares,\n      double[] max) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n\n    max[0] \u003d 0.0;\n    max[1] \u003d 0.0;\n\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n\n      if (firstShares[i] \u003e max[0]) {\n        max[0] \u003d firstShares[i];\n      }\n\n      if (secondShares[i] \u003e max[1]) {\n        max[1] \u003d secondShares[i];\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "a0030c8c6f5489d8285632a651394b2b2320255c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6610. [YARN-3926] DominantResourceCalculator#getResourceAsValue dominant param is updated to handle multiple resources. Contributed by Daniel Templeton.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "a0030c8c6f5489d8285632a651394b2b2320255c",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,22 @@\n+  private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n+      Resource second, double[] firstShares, double[] secondShares,\n+      double[] max) {\n+    ResourceInformation[] firstRes \u003d first.getResources();\n+    ResourceInformation[] secondRes \u003d second.getResources();\n+\n+    max[0] \u003d 0.0;\n+    max[1] \u003d 0.0;\n+\n+    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n+      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n+      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n+\n+      if (firstShares[i] \u003e max[0]) {\n+        max[0] \u003d firstShares[i];\n+      }\n+\n+      if (secondShares[i] \u003e max[1]) {\n+        max[1] \u003d secondShares[i];\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void calculateShares(ResourceInformation[] clusterRes, Resource first,\n      Resource second, double[] firstShares, double[] secondShares,\n      double[] max) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n\n    max[0] \u003d 0.0;\n    max[1] \u003d 0.0;\n\n    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n\n      if (firstShares[i] \u003e max[0]) {\n        max[0] \u003d firstShares[i];\n      }\n\n      if (secondShares[i] \u003e max[1]) {\n        max[1] \u003d secondShares[i];\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}