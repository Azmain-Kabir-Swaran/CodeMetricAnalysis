{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnitsConversionUtil.java",
  "functionName": "compare",
  "functionId": "compare___unitA-String__valueA-long__unitB-String__valueB-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
  "functionStartLine": 176,
  "functionEndLine": 212,
  "numCommitsSeen": 8,
  "timeTaken": 2212,
  "changeHistory": [
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137"
  ],
  "changeHistoryShort": {
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n",
      "commitDate": "10/05/18 9:31 AM",
      "commitName": "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 240.01,
      "commitsBetweenForRepo": 2291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,37 @@\n   public static int compare(String unitA, long valueA, String unitB,\n       long valueB) {\n-    if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n-        || !KNOWN_UNITS.contains(unitB)) {\n-      throw new IllegalArgumentException(\"Units cannot be null\");\n-    }\n-    if (!KNOWN_UNITS.contains(unitA)) {\n-      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n-    }\n-    if (!KNOWN_UNITS.contains(unitB)) {\n-      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n-    }\n+    checkUnitArgument(unitA);\n+    checkUnitArgument(unitB);\n     if (unitA.equals(unitB)) {\n       return Long.compare(valueA, valueB);\n     }\n     Converter unitAC \u003d getConverter(unitA);\n     Converter unitBC \u003d getConverter(unitB);\n     int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n     int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n     try {\n       long tmpA \u003d valueA;\n       long tmpB \u003d valueB;\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d convert(unitB, unitA, valueB);\n       } else {\n         tmpA \u003d convert(unitA, unitB, valueA);\n       }\n       return Long.compare(tmpA, tmpB);\n     } catch (IllegalArgumentException ie) {\n       BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n       BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n       } else {\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n       }\n       return tmpA.compareTo(tmpB);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compare(String unitA, long valueA, String unitB,\n      long valueB) {\n    checkUnitArgument(unitA);\n    checkUnitArgument(unitB);\n    if (unitA.equals(unitB)) {\n      return Long.compare(valueA, valueB);\n    }\n    Converter unitAC \u003d getConverter(unitA);\n    Converter unitBC \u003d getConverter(unitB);\n    int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n    int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n    try {\n      long tmpA \u003d valueA;\n      long tmpB \u003d valueB;\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d convert(unitB, unitA, valueB);\n      } else {\n        tmpA \u003d convert(unitA, unitB, valueA);\n      }\n      return Long.compare(tmpA, tmpB);\n    } catch (IllegalArgumentException ie) {\n      BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n      BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n      } else {\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n      }\n      return tmpA.compareTo(tmpB);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public static int compare(String unitA, long valueA, String unitB,\n       long valueB) {\n     if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n         || !KNOWN_UNITS.contains(unitB)) {\n       throw new IllegalArgumentException(\"Units cannot be null\");\n     }\n     if (!KNOWN_UNITS.contains(unitA)) {\n       throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n     }\n     if (!KNOWN_UNITS.contains(unitB)) {\n       throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n     }\n+    if (unitA.equals(unitB)) {\n+      return Long.compare(valueA, valueB);\n+    }\n     Converter unitAC \u003d getConverter(unitA);\n     Converter unitBC \u003d getConverter(unitB);\n-    if (unitA.equals(unitB)) {\n-      return Long.valueOf(valueA).compareTo(valueB);\n-    }\n     int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n     int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n     try {\n       long tmpA \u003d valueA;\n       long tmpB \u003d valueB;\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d convert(unitB, unitA, valueB);\n       } else {\n         tmpA \u003d convert(unitA, unitB, valueA);\n       }\n-      return Long.valueOf(tmpA).compareTo(tmpB);\n+      return Long.compare(tmpA, tmpB);\n     } catch (IllegalArgumentException ie) {\n       BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n       BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n       } else {\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n       }\n       return tmpA.compareTo(tmpB);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compare(String unitA, long valueA, String unitB,\n      long valueB) {\n    if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n        || !KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Units cannot be null\");\n    }\n    if (!KNOWN_UNITS.contains(unitA)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n    }\n    if (!KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n    }\n    if (unitA.equals(unitB)) {\n      return Long.compare(valueA, valueB);\n    }\n    Converter unitAC \u003d getConverter(unitA);\n    Converter unitBC \u003d getConverter(unitB);\n    int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n    int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n    try {\n      long tmpA \u003d valueA;\n      long tmpB \u003d valueB;\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d convert(unitB, unitA, valueB);\n      } else {\n        tmpA \u003d convert(unitA, unitB, valueA);\n      }\n      return Long.compare(tmpA, tmpB);\n    } catch (IllegalArgumentException ie) {\n      BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n      BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n      } else {\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n      }\n      return tmpA.compareTo(tmpB);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
      "extendedDetails": {}
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "7ba698997b6845b664b2f8c82e384b457c30d176",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  public static int compare(String unitA, Long valueA, String unitB,\n-      Long valueB) {\n+  public static int compare(String unitA, long valueA, String unitB,\n+      long valueB) {\n     if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n         || !KNOWN_UNITS.contains(unitB)) {\n       throw new IllegalArgumentException(\"Units cannot be null\");\n     }\n     if (!KNOWN_UNITS.contains(unitA)) {\n       throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n     }\n     if (!KNOWN_UNITS.contains(unitB)) {\n       throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n     }\n     Converter unitAC \u003d getConverter(unitA);\n     Converter unitBC \u003d getConverter(unitB);\n     if (unitA.equals(unitB)) {\n-      return valueA.compareTo(valueB);\n+      return Long.valueOf(valueA).compareTo(valueB);\n     }\n     int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n     int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n     try {\n-      Long tmpA \u003d valueA;\n-      Long tmpB \u003d valueB;\n+      long tmpA \u003d valueA;\n+      long tmpB \u003d valueB;\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d convert(unitB, unitA, valueB);\n       } else {\n         tmpA \u003d convert(unitA, unitB, valueA);\n       }\n-      return tmpA.compareTo(tmpB);\n+      return Long.valueOf(tmpA).compareTo(tmpB);\n     } catch (IllegalArgumentException ie) {\n       BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n       BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n       } else {\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n       }\n       return tmpA.compareTo(tmpB);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static int compare(String unitA, long valueA, String unitB,\n      long valueB) {\n    if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n        || !KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Units cannot be null\");\n    }\n    if (!KNOWN_UNITS.contains(unitA)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n    }\n    if (!KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n    }\n    Converter unitAC \u003d getConverter(unitA);\n    Converter unitBC \u003d getConverter(unitB);\n    if (unitA.equals(unitB)) {\n      return Long.valueOf(valueA).compareTo(valueB);\n    }\n    int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n    int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n    try {\n      long tmpA \u003d valueA;\n      long tmpB \u003d valueB;\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d convert(unitB, unitA, valueB);\n      } else {\n        tmpA \u003d convert(unitA, unitB, valueA);\n      }\n      return Long.valueOf(tmpA).compareTo(tmpB);\n    } catch (IllegalArgumentException ie) {\n      BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n      BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n      } else {\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n      }\n      return tmpA.compareTo(tmpB);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
          "extendedDetails": {
            "oldValue": "[unitA-String, valueA-Long, unitB-String, valueB-Long]",
            "newValue": "[unitA-String, valueA-long, unitB-String, valueB-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "7ba698997b6845b664b2f8c82e384b457c30d176",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  public static int compare(String unitA, Long valueA, String unitB,\n-      Long valueB) {\n+  public static int compare(String unitA, long valueA, String unitB,\n+      long valueB) {\n     if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n         || !KNOWN_UNITS.contains(unitB)) {\n       throw new IllegalArgumentException(\"Units cannot be null\");\n     }\n     if (!KNOWN_UNITS.contains(unitA)) {\n       throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n     }\n     if (!KNOWN_UNITS.contains(unitB)) {\n       throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n     }\n     Converter unitAC \u003d getConverter(unitA);\n     Converter unitBC \u003d getConverter(unitB);\n     if (unitA.equals(unitB)) {\n-      return valueA.compareTo(valueB);\n+      return Long.valueOf(valueA).compareTo(valueB);\n     }\n     int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n     int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n     try {\n-      Long tmpA \u003d valueA;\n-      Long tmpB \u003d valueB;\n+      long tmpA \u003d valueA;\n+      long tmpB \u003d valueB;\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d convert(unitB, unitA, valueB);\n       } else {\n         tmpA \u003d convert(unitA, unitB, valueA);\n       }\n-      return tmpA.compareTo(tmpB);\n+      return Long.valueOf(tmpA).compareTo(tmpB);\n     } catch (IllegalArgumentException ie) {\n       BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n       BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n       if (unitAPos \u003c unitBPos) {\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n         tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n         tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n       } else {\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n         tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n         tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n       }\n       return tmpA.compareTo(tmpB);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static int compare(String unitA, long valueA, String unitB,\n      long valueB) {\n    if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n        || !KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Units cannot be null\");\n    }\n    if (!KNOWN_UNITS.contains(unitA)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n    }\n    if (!KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n    }\n    Converter unitAC \u003d getConverter(unitA);\n    Converter unitBC \u003d getConverter(unitB);\n    if (unitA.equals(unitB)) {\n      return Long.valueOf(valueA).compareTo(valueB);\n    }\n    int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n    int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n    try {\n      long tmpA \u003d valueA;\n      long tmpB \u003d valueB;\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d convert(unitB, unitA, valueB);\n      } else {\n        tmpA \u003d convert(unitA, unitB, valueA);\n      }\n      return Long.valueOf(tmpA).compareTo(tmpB);\n    } catch (IllegalArgumentException ie) {\n      BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n      BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n      } else {\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n      }\n      return tmpA.compareTo(tmpB);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,45 @@\n+  public static int compare(String unitA, Long valueA, String unitB,\n+      Long valueB) {\n+    if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n+        || !KNOWN_UNITS.contains(unitB)) {\n+      throw new IllegalArgumentException(\"Units cannot be null\");\n+    }\n+    if (!KNOWN_UNITS.contains(unitA)) {\n+      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n+    }\n+    if (!KNOWN_UNITS.contains(unitB)) {\n+      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n+    }\n+    Converter unitAC \u003d getConverter(unitA);\n+    Converter unitBC \u003d getConverter(unitB);\n+    if (unitA.equals(unitB)) {\n+      return valueA.compareTo(valueB);\n+    }\n+    int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n+    int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n+    try {\n+      Long tmpA \u003d valueA;\n+      Long tmpB \u003d valueB;\n+      if (unitAPos \u003c unitBPos) {\n+        tmpB \u003d convert(unitB, unitA, valueB);\n+      } else {\n+        tmpA \u003d convert(unitA, unitB, valueA);\n+      }\n+      return tmpA.compareTo(tmpB);\n+    } catch (IllegalArgumentException ie) {\n+      BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n+      BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n+      if (unitAPos \u003c unitBPos) {\n+        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n+        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n+        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n+        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n+      } else {\n+        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n+        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n+        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n+        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n+      }\n+      return tmpA.compareTo(tmpB);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compare(String unitA, Long valueA, String unitB,\n      Long valueB) {\n    if (unitA \u003d\u003d null || unitB \u003d\u003d null || !KNOWN_UNITS.contains(unitA)\n        || !KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Units cannot be null\");\n    }\n    if (!KNOWN_UNITS.contains(unitA)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitA + \"\u0027\");\n    }\n    if (!KNOWN_UNITS.contains(unitB)) {\n      throw new IllegalArgumentException(\"Unknown unit \u0027\" + unitB + \"\u0027\");\n    }\n    Converter unitAC \u003d getConverter(unitA);\n    Converter unitBC \u003d getConverter(unitB);\n    if (unitA.equals(unitB)) {\n      return valueA.compareTo(valueB);\n    }\n    int unitAPos \u003d SORTED_UNITS.indexOf(unitA);\n    int unitBPos \u003d SORTED_UNITS.indexOf(unitB);\n    try {\n      Long tmpA \u003d valueA;\n      Long tmpB \u003d valueB;\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d convert(unitB, unitA, valueB);\n      } else {\n        tmpA \u003d convert(unitA, unitB, valueA);\n      }\n      return tmpA.compareTo(tmpB);\n    } catch (IllegalArgumentException ie) {\n      BigInteger tmpA \u003d BigInteger.valueOf(valueA);\n      BigInteger tmpB \u003d BigInteger.valueOf(valueB);\n      if (unitAPos \u003c unitBPos) {\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitBC.numerator));\n        tmpB \u003d tmpB.multiply(BigInteger.valueOf(unitAC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitBC.denominator));\n        tmpB \u003d tmpB.divide(BigInteger.valueOf(unitAC.numerator));\n      } else {\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitAC.numerator));\n        tmpA \u003d tmpA.multiply(BigInteger.valueOf(unitBC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitAC.denominator));\n        tmpA \u003d tmpA.divide(BigInteger.valueOf(unitBC.numerator));\n      }\n      return tmpA.compareTo(tmpB);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java"
    }
  }
}