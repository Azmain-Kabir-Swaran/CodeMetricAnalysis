{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "getFileLinkStatus",
  "functionId": "getFileLinkStatus___f-Path(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 1770,
  "functionEndLine": 1797,
  "numCommitsSeen": 210,
  "timeTaken": 5730,
  "changeHistory": [
    "687233f20d24c29041929dd0a99d963cec54b6df",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "1c030c6e58dc83152f933323bb7743ad47f5af27",
    "8767e4cde172b6e6070e3fd45325ede617b99343"
  ],
  "changeHistoryShort": {
    "687233f20d24c29041929dd0a99d963cec54b6df": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1c030c6e58dc83152f933323bb7743ad47f5af27": "Yfilerename",
    "8767e4cde172b6e6070e3fd45325ede617b99343": "Yintroduced"
  },
  "changeHistoryDetails": {
    "687233f20d24c29041929dd0a99d963cec54b6df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13065. Add a new interface for retrieving FS and FC Statistics (Mingliang Liu via cmccabe)\n",
      "commitDate": "11/05/16 1:45 PM",
      "commitName": "687233f20d24c29041929dd0a99d963cec54b6df",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/05/16 7:30 PM",
      "commitNameOld": "45a753ccf79d334513c7bc8f2b81c89a4697075d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 8.76,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public FileStatus getFileLinkStatus(final Path f) throws IOException {\n     statistics.incrementReadOps(1);\n+    storageStatistics.incrementOpCounter(OpType.GET_FILE_LINK_STATUS);\n     final Path absF \u003d fixRelativePart(f);\n     FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n       @Override\n       public FileStatus doCall(final Path p) throws IOException {\n         HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n         if (fi !\u003d null) {\n           return fi.makeQualified(getUri(), p);\n         } else {\n           throw new FileNotFoundException(\"File does not exist: \" + p);\n         }\n       }\n       @Override\n       public FileStatus next(final FileSystem fs, final Path p)\n           throws IOException {\n         return fs.getFileLinkStatus(p);\n       }\n     }.resolve(this, absF);\n     // Fully-qualify the symlink\n     if (status.isSymlink()) {\n       Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n           status.getPath(), status.getSymlink());\n       status.setSymlink(targetQual);\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileLinkStatus(final Path f) throws IOException {\n    statistics.incrementReadOps(1);\n    storageStatistics.incrementOpCounter(OpType.GET_FILE_LINK_STATUS);\n    final Path absF \u003d fixRelativePart(f);\n    FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n      @Override\n      public FileStatus doCall(final Path p) throws IOException {\n        HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n        if (fi !\u003d null) {\n          return fi.makeQualified(getUri(), p);\n        } else {\n          throw new FileNotFoundException(\"File does not exist: \" + p);\n        }\n      }\n      @Override\n      public FileStatus next(final FileSystem fs, final Path p)\n          throws IOException {\n        return fs.getFileLinkStatus(p);\n      }\n    }.resolve(this, absF);\n    // Fully-qualify the symlink\n    if (status.isSymlink()) {\n      Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n          status.getPath(), status.getSymlink());\n      status.setSymlink(targetQual);\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
          "commitDate": "03/10/15 11:38 AM",
          "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "29/09/15 1:39 AM",
          "commitNameOld": "8fd55202468b28422b0df888641c9b08906fe4a7",
          "commitAuthorOld": "",
          "daysBetweenCommits": 4.42,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,27 @@\n-  public FileStatus getFileLinkStatus(final Path f)\n-      throws AccessControlException, FileNotFoundException,\n-      UnsupportedFileSystemException, IOException {\n+  public FileStatus getFileLinkStatus(final Path f) throws IOException {\n     statistics.incrementReadOps(1);\n     final Path absF \u003d fixRelativePart(f);\n     FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n       @Override\n-      public FileStatus doCall(final Path p) throws IOException,\n-          UnresolvedLinkException {\n+      public FileStatus doCall(final Path p) throws IOException {\n         HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n         if (fi !\u003d null) {\n           return fi.makeQualified(getUri(), p);\n         } else {\n           throw new FileNotFoundException(\"File does not exist: \" + p);\n         }\n       }\n       @Override\n       public FileStatus next(final FileSystem fs, final Path p)\n-        throws IOException, UnresolvedLinkException {\n+          throws IOException {\n         return fs.getFileLinkStatus(p);\n       }\n     }.resolve(this, absF);\n     // Fully-qualify the symlink\n     if (status.isSymlink()) {\n       Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n           status.getPath(), status.getSymlink());\n       status.setSymlink(targetQual);\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileLinkStatus(final Path f) throws IOException {\n    statistics.incrementReadOps(1);\n    final Path absF \u003d fixRelativePart(f);\n    FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n      @Override\n      public FileStatus doCall(final Path p) throws IOException {\n        HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n        if (fi !\u003d null) {\n          return fi.makeQualified(getUri(), p);\n        } else {\n          throw new FileNotFoundException(\"File does not exist: \" + p);\n        }\n      }\n      @Override\n      public FileStatus next(final FileSystem fs, final Path p)\n          throws IOException {\n        return fs.getFileLinkStatus(p);\n      }\n    }.resolve(this, absF);\n    // Fully-qualify the symlink\n    if (status.isSymlink()) {\n      Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n          status.getPath(), status.getSymlink());\n      status.setSymlink(targetQual);\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[AccessControlException, FileNotFoundException, UnsupportedFileSystemException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
          "commitDate": "03/10/15 11:38 AM",
          "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "29/09/15 1:39 AM",
          "commitNameOld": "8fd55202468b28422b0df888641c9b08906fe4a7",
          "commitAuthorOld": "",
          "daysBetweenCommits": 4.42,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,27 @@\n-  public FileStatus getFileLinkStatus(final Path f)\n-      throws AccessControlException, FileNotFoundException,\n-      UnsupportedFileSystemException, IOException {\n+  public FileStatus getFileLinkStatus(final Path f) throws IOException {\n     statistics.incrementReadOps(1);\n     final Path absF \u003d fixRelativePart(f);\n     FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n       @Override\n-      public FileStatus doCall(final Path p) throws IOException,\n-          UnresolvedLinkException {\n+      public FileStatus doCall(final Path p) throws IOException {\n         HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n         if (fi !\u003d null) {\n           return fi.makeQualified(getUri(), p);\n         } else {\n           throw new FileNotFoundException(\"File does not exist: \" + p);\n         }\n       }\n       @Override\n       public FileStatus next(final FileSystem fs, final Path p)\n-        throws IOException, UnresolvedLinkException {\n+          throws IOException {\n         return fs.getFileLinkStatus(p);\n       }\n     }.resolve(this, absF);\n     // Fully-qualify the symlink\n     if (status.isSymlink()) {\n       Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n           status.getPath(), status.getSymlink());\n       status.setSymlink(targetQual);\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileLinkStatus(final Path f) throws IOException {\n    statistics.incrementReadOps(1);\n    final Path absF \u003d fixRelativePart(f);\n    FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n      @Override\n      public FileStatus doCall(final Path p) throws IOException {\n        HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n        if (fi !\u003d null) {\n          return fi.makeQualified(getUri(), p);\n        } else {\n          throw new FileNotFoundException(\"File does not exist: \" + p);\n        }\n      }\n      @Override\n      public FileStatus next(final FileSystem fs, final Path p)\n          throws IOException {\n        return fs.getFileLinkStatus(p);\n      }\n    }.resolve(this, absF);\n    // Fully-qualify the symlink\n    if (status.isSymlink()) {\n      Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n          status.getPath(), status.getSymlink());\n      status.setSymlink(targetQual);\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "1c030c6e58dc83152f933323bb7743ad47f5af27": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8740. Move DistributedFileSystem to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "27/09/15 10:54 AM",
      "commitName": "1c030c6e58dc83152f933323bb7743ad47f5af27",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/09/15 1:42 AM",
      "commitNameOld": "f0f984e4e63d0dbafe93062a122ee051330db301",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus getFileLinkStatus(final Path f)\n      throws AccessControlException, FileNotFoundException,\n      UnsupportedFileSystemException, IOException {\n    statistics.incrementReadOps(1);\n    final Path absF \u003d fixRelativePart(f);\n    FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n      @Override\n      public FileStatus doCall(final Path p) throws IOException,\n          UnresolvedLinkException {\n        HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n        if (fi !\u003d null) {\n          return fi.makeQualified(getUri(), p);\n        } else {\n          throw new FileNotFoundException(\"File does not exist: \" + p);\n        }\n      }\n      @Override\n      public FileStatus next(final FileSystem fs, final Path p)\n        throws IOException, UnresolvedLinkException {\n        return fs.getFileLinkStatus(p);\n      }\n    }.resolve(this, absF);\n    // Fully-qualify the symlink\n    if (status.isSymlink()) {\n      Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n          status.getPath(), status.getSymlink());\n      status.setSymlink(targetQual);\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
      }
    },
    "8767e4cde172b6e6070e3fd45325ede617b99343": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 2:31 PM",
      "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,30 @@\n+  public FileStatus getFileLinkStatus(final Path f)\n+      throws AccessControlException, FileNotFoundException,\n+      UnsupportedFileSystemException, IOException {\n+    statistics.incrementReadOps(1);\n+    final Path absF \u003d fixRelativePart(f);\n+    FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n+      @Override\n+      public FileStatus doCall(final Path p) throws IOException,\n+          UnresolvedLinkException {\n+        HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n+        if (fi !\u003d null) {\n+          return fi.makeQualified(getUri(), p);\n+        } else {\n+          throw new FileNotFoundException(\"File does not exist: \" + p);\n+        }\n+      }\n+      @Override\n+      public FileStatus next(final FileSystem fs, final Path p)\n+        throws IOException, UnresolvedLinkException {\n+        return fs.getFileLinkStatus(p);\n+      }\n+    }.resolve(this, absF);\n+    // Fully-qualify the symlink\n+    if (status.isSymlink()) {\n+      Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n+          status.getPath(), status.getSymlink());\n+      status.setSymlink(targetQual);\n+    }\n+    return status;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileLinkStatus(final Path f)\n      throws AccessControlException, FileNotFoundException,\n      UnsupportedFileSystemException, IOException {\n    statistics.incrementReadOps(1);\n    final Path absF \u003d fixRelativePart(f);\n    FileStatus status \u003d new FileSystemLinkResolver\u003cFileStatus\u003e() {\n      @Override\n      public FileStatus doCall(final Path p) throws IOException,\n          UnresolvedLinkException {\n        HdfsFileStatus fi \u003d dfs.getFileLinkInfo(getPathName(p));\n        if (fi !\u003d null) {\n          return fi.makeQualified(getUri(), p);\n        } else {\n          throw new FileNotFoundException(\"File does not exist: \" + p);\n        }\n      }\n      @Override\n      public FileStatus next(final FileSystem fs, final Path p)\n        throws IOException, UnresolvedLinkException {\n        return fs.getFileLinkStatus(p);\n      }\n    }.resolve(this, absF);\n    // Fully-qualify the symlink\n    if (status.isSymlink()) {\n      Path targetQual \u003d FSLinkResolver.qualifySymlinkTarget(this.getUri(),\n          status.getPath(), status.getSymlink());\n      status.setSymlink(targetQual);\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}