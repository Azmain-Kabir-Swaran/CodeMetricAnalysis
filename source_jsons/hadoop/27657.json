{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityRouterPolicy.java",
  "functionName": "getHomeSubcluster",
  "functionId": "getHomeSubcluster___appSubmissionContext-ApplicationSubmissionContext__blackListSubClusters-List__SubClusterId__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/router/LocalityRouterPolicy.java",
  "functionStartLine": 90,
  "functionEndLine": 195,
  "numCommitsSeen": 1,
  "timeTaken": 556,
  "changeHistory": [
    "bf8686f43f0176f51bdb9b41f63be6801f26413f"
  ],
  "changeHistoryShort": {
    "bf8686f43f0176f51bdb9b41f63be6801f26413f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf8686f43f0176f51bdb9b41f63be6801f26413f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8982. [Router] Add locality policy. Contributed by Young Chen.\n",
      "commitDate": "30/01/20 4:59 PM",
      "commitName": "bf8686f43f0176f51bdb9b41f63be6801f26413f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "diff": "@@ -0,0 +1,106 @@\n+  public SubClusterId getHomeSubcluster(\n+      ApplicationSubmissionContext appSubmissionContext,\n+      List\u003cSubClusterId\u003e blackListSubClusters) throws YarnException {\n+\n+    // null checks and default-queue behavior\n+    validate(appSubmissionContext);\n+\n+    List\u003cResourceRequest\u003e rrList \u003d\n+        appSubmissionContext.getAMContainerResourceRequests();\n+\n+    // Fast path for FailForward to WeightedRandomRouterPolicy\n+    if (rrList \u003d\u003d null || rrList.isEmpty() || (rrList.size() \u003d\u003d 1\n+        \u0026\u0026 ResourceRequest.isAnyLocation(rrList.get(0).getResourceName()))) {\n+      return super\n+          .getHomeSubcluster(appSubmissionContext, blackListSubClusters);\n+    }\n+\n+    if (rrList.size() !\u003d 3) {\n+      throw new FederationPolicyException(\n+          \"Invalid number of resource requests: \" + rrList.size());\n+    }\n+\n+    Map\u003cSubClusterId, SubClusterInfo\u003e activeSubClusters \u003d\n+        getActiveSubclusters();\n+    List\u003cSubClusterId\u003e validSubClusters \u003d\n+        new ArrayList\u003c\u003e(activeSubClusters.keySet());\n+    FederationPolicyUtils\n+        .validateSubClusterAvailability(validSubClusters, blackListSubClusters);\n+    if (blackListSubClusters !\u003d null) {\n+      // Remove from the active SubClusters from StateStore the blacklisted ones\n+      validSubClusters.removeAll(blackListSubClusters);\n+    }\n+\n+    try {\n+      // With three requests, this has been processed by the\n+      // ResourceRequestInterceptorREST, and should have\n+      // node, rack, and any\n+      SubClusterId targetId \u003d null;\n+      ResourceRequest nodeRequest \u003d null;\n+      ResourceRequest rackRequest \u003d null;\n+      ResourceRequest anyRequest \u003d null;\n+      for (ResourceRequest rr : rrList) {\n+        // Handle \"node\" requests\n+        try {\n+          targetId \u003d resolver.getSubClusterForNode(rr.getResourceName());\n+          nodeRequest \u003d rr;\n+        } catch (YarnException e) {\n+          LOG.error(\"Cannot resolve node : {}\", e.getLocalizedMessage());\n+        }\n+        // Handle \"rack\" requests\n+        try {\n+          resolver.getSubClustersForRack(rr.getResourceName());\n+          rackRequest \u003d rr;\n+        } catch (YarnException e) {\n+          LOG.error(\"Cannot resolve rack : {}\", e.getLocalizedMessage());\n+        }\n+        // Handle \"ANY\" requests\n+        if (ResourceRequest.isAnyLocation(rr.getResourceName())) {\n+          anyRequest \u003d rr;\n+          continue;\n+        }\n+      }\n+      if (nodeRequest \u003d\u003d null) {\n+        throw new YarnException(\"Missing node request\");\n+      }\n+      if (rackRequest \u003d\u003d null) {\n+        throw new YarnException(\"Missing rack request\");\n+      }\n+      if (anyRequest \u003d\u003d null) {\n+        throw new YarnException(\"Missing any request\");\n+      }\n+      LOG.info(\n+          \"Node request: \" + nodeRequest.getResourceName() + \", Rack request: \"\n+              + rackRequest.getResourceName() + \", Any request: \" + anyRequest\n+              .getResourceName());\n+      // Handle \"node\" requests\n+      if (validSubClusters.contains(targetId) \u0026\u0026 enabledSCs\n+          .contains(targetId)) {\n+        LOG.info(\"Node {} is in SubCluster: {}\", nodeRequest.getResourceName(),\n+            targetId);\n+        return targetId;\n+      } else {\n+        throw new YarnException(\"The node \" + nodeRequest.getResourceName()\n+            + \" is in a blacklist SubCluster or not active. \");\n+      }\n+    } catch (YarnException e) {\n+      LOG.error(\"Validating resource requests failed, Falling back to \"\n+          + \"WeightedRandomRouterPolicy placement: \" + e.getMessage());\n+      // FailForward to WeightedRandomRouterPolicy\n+      // Overwrite request to use a default ANY\n+      ResourceRequest amReq \u003d Records.newRecord(ResourceRequest.class);\n+      amReq.setPriority(appSubmissionContext.getPriority());\n+      amReq.setResourceName(ResourceRequest.ANY);\n+      amReq.setCapability(appSubmissionContext.getResource());\n+      amReq.setNumContainers(1);\n+      amReq.setRelaxLocality(true);\n+      amReq.setNodeLabelExpression(\n+          appSubmissionContext.getNodeLabelExpression());\n+      amReq.setExecutionTypeRequest(\n+          ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n+      appSubmissionContext\n+          .setAMContainerResourceRequests(Collections.singletonList(amReq));\n+      return super\n+          .getHomeSubcluster(appSubmissionContext, blackListSubClusters);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SubClusterId getHomeSubcluster(\n      ApplicationSubmissionContext appSubmissionContext,\n      List\u003cSubClusterId\u003e blackListSubClusters) throws YarnException {\n\n    // null checks and default-queue behavior\n    validate(appSubmissionContext);\n\n    List\u003cResourceRequest\u003e rrList \u003d\n        appSubmissionContext.getAMContainerResourceRequests();\n\n    // Fast path for FailForward to WeightedRandomRouterPolicy\n    if (rrList \u003d\u003d null || rrList.isEmpty() || (rrList.size() \u003d\u003d 1\n        \u0026\u0026 ResourceRequest.isAnyLocation(rrList.get(0).getResourceName()))) {\n      return super\n          .getHomeSubcluster(appSubmissionContext, blackListSubClusters);\n    }\n\n    if (rrList.size() !\u003d 3) {\n      throw new FederationPolicyException(\n          \"Invalid number of resource requests: \" + rrList.size());\n    }\n\n    Map\u003cSubClusterId, SubClusterInfo\u003e activeSubClusters \u003d\n        getActiveSubclusters();\n    List\u003cSubClusterId\u003e validSubClusters \u003d\n        new ArrayList\u003c\u003e(activeSubClusters.keySet());\n    FederationPolicyUtils\n        .validateSubClusterAvailability(validSubClusters, blackListSubClusters);\n    if (blackListSubClusters !\u003d null) {\n      // Remove from the active SubClusters from StateStore the blacklisted ones\n      validSubClusters.removeAll(blackListSubClusters);\n    }\n\n    try {\n      // With three requests, this has been processed by the\n      // ResourceRequestInterceptorREST, and should have\n      // node, rack, and any\n      SubClusterId targetId \u003d null;\n      ResourceRequest nodeRequest \u003d null;\n      ResourceRequest rackRequest \u003d null;\n      ResourceRequest anyRequest \u003d null;\n      for (ResourceRequest rr : rrList) {\n        // Handle \"node\" requests\n        try {\n          targetId \u003d resolver.getSubClusterForNode(rr.getResourceName());\n          nodeRequest \u003d rr;\n        } catch (YarnException e) {\n          LOG.error(\"Cannot resolve node : {}\", e.getLocalizedMessage());\n        }\n        // Handle \"rack\" requests\n        try {\n          resolver.getSubClustersForRack(rr.getResourceName());\n          rackRequest \u003d rr;\n        } catch (YarnException e) {\n          LOG.error(\"Cannot resolve rack : {}\", e.getLocalizedMessage());\n        }\n        // Handle \"ANY\" requests\n        if (ResourceRequest.isAnyLocation(rr.getResourceName())) {\n          anyRequest \u003d rr;\n          continue;\n        }\n      }\n      if (nodeRequest \u003d\u003d null) {\n        throw new YarnException(\"Missing node request\");\n      }\n      if (rackRequest \u003d\u003d null) {\n        throw new YarnException(\"Missing rack request\");\n      }\n      if (anyRequest \u003d\u003d null) {\n        throw new YarnException(\"Missing any request\");\n      }\n      LOG.info(\n          \"Node request: \" + nodeRequest.getResourceName() + \", Rack request: \"\n              + rackRequest.getResourceName() + \", Any request: \" + anyRequest\n              .getResourceName());\n      // Handle \"node\" requests\n      if (validSubClusters.contains(targetId) \u0026\u0026 enabledSCs\n          .contains(targetId)) {\n        LOG.info(\"Node {} is in SubCluster: {}\", nodeRequest.getResourceName(),\n            targetId);\n        return targetId;\n      } else {\n        throw new YarnException(\"The node \" + nodeRequest.getResourceName()\n            + \" is in a blacklist SubCluster or not active. \");\n      }\n    } catch (YarnException e) {\n      LOG.error(\"Validating resource requests failed, Falling back to \"\n          + \"WeightedRandomRouterPolicy placement: \" + e.getMessage());\n      // FailForward to WeightedRandomRouterPolicy\n      // Overwrite request to use a default ANY\n      ResourceRequest amReq \u003d Records.newRecord(ResourceRequest.class);\n      amReq.setPriority(appSubmissionContext.getPriority());\n      amReq.setResourceName(ResourceRequest.ANY);\n      amReq.setCapability(appSubmissionContext.getResource());\n      amReq.setNumContainers(1);\n      amReq.setRelaxLocality(true);\n      amReq.setNodeLabelExpression(\n          appSubmissionContext.getNodeLabelExpression());\n      amReq.setExecutionTypeRequest(\n          ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n      appSubmissionContext\n          .setAMContainerResourceRequests(Collections.singletonList(amReq));\n      return super\n          .getHomeSubcluster(appSubmissionContext, blackListSubClusters);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/router/LocalityRouterPolicy.java"
    }
  }
}