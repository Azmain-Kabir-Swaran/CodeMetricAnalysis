{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Component.java",
  "functionName": "areDependenciesReady",
  "functionId": "areDependenciesReady",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
  "functionStartLine": 954,
  "functionEndLine": 978,
  "numCommitsSeen": 36,
  "timeTaken": 3282,
  "changeHistory": [
    "7f083ed8699a720d3fb82e4ec310356902a6ac30",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": "Ybodychange",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8080.  Add restart policy for YARN services.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "17/05/18 2:16 PM",
      "commitName": "7f083ed8699a720d3fb82e4ec310356902a6ac30",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/05/18 12:49 PM",
      "commitNameOld": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 6.06,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public boolean areDependenciesReady() {\n     List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n     if (ServiceUtils.isEmpty(dependencies)) {\n       return true;\n     }\n     for (String dependency : dependencies) {\n-      Component dependentComponent \u003d\n-          scheduler.getAllComponents().get(dependency);\n+      Component dependentComponent \u003d scheduler.getAllComponents().get(\n+          dependency);\n       if (dependentComponent \u003d\u003d null) {\n         LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n             dependency, getName());\n         continue;\n       }\n-      if (dependentComponent.getNumReadyInstances() \u003c dependentComponent\n-          .getNumDesiredInstances()) {\n+\n+      if (!dependentComponent.isReadyForDownstream()) {\n         LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n-                + \" instances are ready.\", getName(), dependency,\n+                + \" instances are ready or the dependent component has not \"\n+                + \"completed \", getName(), dependency,\n             dependentComponent.getNumReadyInstances(),\n             dependentComponent.getNumDesiredInstances());\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean areDependenciesReady() {\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (ServiceUtils.isEmpty(dependencies)) {\n      return true;\n    }\n    for (String dependency : dependencies) {\n      Component dependentComponent \u003d scheduler.getAllComponents().get(\n          dependency);\n      if (dependentComponent \u003d\u003d null) {\n        LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n            dependency, getName());\n        continue;\n      }\n\n      if (!dependentComponent.isReadyForDownstream()) {\n        LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n                + \" instances are ready or the dependent component has not \"\n                + \"completed \", getName(), dependency,\n            dependentComponent.getNumReadyInstances(),\n            dependentComponent.getNumDesiredInstances());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public boolean areDependenciesReady() {\n     List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n-    if (SliderUtils.isEmpty(dependencies)) {\n+    if (ServiceUtils.isEmpty(dependencies)) {\n       return true;\n     }\n     for (String dependency : dependencies) {\n       Component dependentComponent \u003d\n           scheduler.getAllComponents().get(dependency);\n       if (dependentComponent \u003d\u003d null) {\n         LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n             dependency, getName());\n         continue;\n       }\n       if (dependentComponent.getNumReadyInstances() \u003c dependentComponent\n           .getNumDesiredInstances()) {\n         LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n                 + \" instances are ready.\", getName(), dependency,\n             dependentComponent.getNumReadyInstances(),\n             dependentComponent.getNumDesiredInstances());\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean areDependenciesReady() {\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (ServiceUtils.isEmpty(dependencies)) {\n      return true;\n    }\n    for (String dependency : dependencies) {\n      Component dependentComponent \u003d\n          scheduler.getAllComponents().get(dependency);\n      if (dependentComponent \u003d\u003d null) {\n        LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n            dependency, getName());\n        continue;\n      }\n      if (dependentComponent.getNumReadyInstances() \u003c dependentComponent\n          .getNumDesiredInstances()) {\n        LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n                + \" instances are ready.\", getName(), dependency,\n            dependentComponent.getNumReadyInstances(),\n            dependentComponent.getNumDesiredInstances());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean areDependenciesReady() {\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (SliderUtils.isEmpty(dependencies)) {\n      return true;\n    }\n    for (String dependency : dependencies) {\n      Component dependentComponent \u003d\n          scheduler.getAllComponents().get(dependency);\n      if (dependentComponent \u003d\u003d null) {\n        LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n            dependency, getName());\n        continue;\n      }\n      if (dependentComponent.getNumReadyInstances() \u003c dependentComponent\n          .getNumDesiredInstances()) {\n        LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n                + \" instances are ready.\", getName(), dependency,\n            dependentComponent.getNumReadyInstances(),\n            dependentComponent.getNumDesiredInstances());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,24 @@\n+  public boolean areDependenciesReady() {\n+    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n+    if (SliderUtils.isEmpty(dependencies)) {\n+      return true;\n+    }\n+    for (String dependency : dependencies) {\n+      Component dependentComponent \u003d\n+          scheduler.getAllComponents().get(dependency);\n+      if (dependentComponent \u003d\u003d null) {\n+        LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n+            dependency, getName());\n+        continue;\n+      }\n+      if (dependentComponent.getNumReadyInstances() \u003c dependentComponent\n+          .getNumDesiredInstances()) {\n+        LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n+                + \" instances are ready.\", getName(), dependency,\n+            dependentComponent.getNumReadyInstances(),\n+            dependentComponent.getNumDesiredInstances());\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean areDependenciesReady() {\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (SliderUtils.isEmpty(dependencies)) {\n      return true;\n    }\n    for (String dependency : dependencies) {\n      Component dependentComponent \u003d\n          scheduler.getAllComponents().get(dependency);\n      if (dependentComponent \u003d\u003d null) {\n        LOG.error(\"Couldn\u0027t find dependency {} for {} (should never happen)\",\n            dependency, getName());\n        continue;\n      }\n      if (dependentComponent.getNumReadyInstances() \u003c dependentComponent\n          .getNumDesiredInstances()) {\n        LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\"\n                + \" instances are ready.\", getName(), dependency,\n            dependentComponent.getNumReadyInstances(),\n            dependentComponent.getNumDesiredInstances());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
    }
  }
}