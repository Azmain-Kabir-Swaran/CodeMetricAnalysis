{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "recoverState",
  "functionId": "recoverState___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 613,
  "functionEndLine": 638,
  "numCommitsSeen": 59,
  "timeTaken": 1512,
  "changeHistory": [
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4"
  ],
  "changeHistoryShort": {
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5652. NM Recovery. ShuffleHandler should handle NM restarts. (Jason Lowe via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 12:10 PM",
      "commitName": "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,26 @@\n+  private void recoverState(Configuration conf) throws IOException {\n+    Path recoveryRoot \u003d getRecoveryPath();\n+    if (recoveryRoot !\u003d null) {\n+      startStore(recoveryRoot);\n+      Pattern jobPattern \u003d Pattern.compile(JobID.JOBID_REGEX);\n+      LeveldbIterator iter \u003d null;\n+      try {\n+        iter \u003d new LeveldbIterator(stateDb);\n+        iter.seek(bytes(JobID.JOB));\n+        while (iter.hasNext()) {\n+          Map.Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n+          String key \u003d asString(entry.getKey());\n+          if (!jobPattern.matcher(key).matches()) {\n+            break;\n+          }\n+          recoverJobShuffleInfo(key, entry.getValue());\n+        }\n+      } catch (DBException e) {\n+        throw new IOException(\"Database error during recovery\", e);\n+      } finally {\n+        if (iter !\u003d null) {\n+          iter.close();\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverState(Configuration conf) throws IOException {\n    Path recoveryRoot \u003d getRecoveryPath();\n    if (recoveryRoot !\u003d null) {\n      startStore(recoveryRoot);\n      Pattern jobPattern \u003d Pattern.compile(JobID.JOBID_REGEX);\n      LeveldbIterator iter \u003d null;\n      try {\n        iter \u003d new LeveldbIterator(stateDb);\n        iter.seek(bytes(JobID.JOB));\n        while (iter.hasNext()) {\n          Map.Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n          String key \u003d asString(entry.getKey());\n          if (!jobPattern.matcher(key).matches()) {\n            break;\n          }\n          recoverJobShuffleInfo(key, entry.getValue());\n        }\n      } catch (DBException e) {\n        throw new IOException(\"Database error during recovery\", e);\n      } finally {\n        if (iter !\u003d null) {\n          iter.close();\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
    }
  }
}