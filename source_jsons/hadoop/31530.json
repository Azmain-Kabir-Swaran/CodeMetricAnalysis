{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SubApplicationEntityReader.java",
  "functionName": "createFilterListForColsOfInfoFamily",
  "functionId": "createFilterListForColsOfInfoFamily",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
  "functionStartLine": 142,
  "functionEndLine": 207,
  "numCommitsSeen": 3,
  "timeTaken": 1391,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Add filters for each column in entity table.\n    updateFixedColumns(infoFamilyColsFilter);\n    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n    // If INFO field has to be retrieved, add a filter for fetching columns\n    // with INFO column prefix.\n    if (hasField(fieldsToRetrieve, Field.INFO)) {\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.INFO));\n    }\n    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n      // If RELATES_TO field has to be retrieved, add a filter for fetching\n      // columns with RELATES_TO column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.RELATES_TO));\n    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain RELATES_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // relatesTo filters are specified. relatesTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e relatesToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          SubApplicationColumnPrefix.RELATES_TO, relatesToCols));\n    }\n    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n      // columns with IS_RELATED_TO column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.IS_RELATED_TO));\n    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // isRelatedTo filters are specified. isRelatedTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e isRelatedToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          SubApplicationColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n    }\n    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n      // If EVENTS field has to be retrieved, add a filter for fetching columns\n      // with EVENT column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.EVENT));\n    } else if (eventFilters !\u003d null\n        \u0026\u0026 !eventFilters.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain EVENTS, we still need to\n      // have a filter to fetch some of the column qualifiers on the basis of\n      // event filters specified. Event filters will then be matched after\n      // fetching rows from HBase.\n      Set\u003cString\u003e eventCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          SubApplicationColumnPrefix.EVENT, eventCols));\n    }\n    return infoFamilyColsFilter;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java"
      }
    },
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6861. Reader API for sub application entities (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
      "commitAuthor": "Varun Saxena",
      "diff": "@@ -0,0 +1,66 @@\n+  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n+    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n+    // Add filters for each column in entity table.\n+    updateFixedColumns(infoFamilyColsFilter);\n+    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n+    // If INFO field has to be retrieved, add a filter for fetching columns\n+    // with INFO column prefix.\n+    if (hasField(fieldsToRetrieve, Field.INFO)) {\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n+              SubApplicationColumnPrefix.INFO));\n+    }\n+    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n+    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n+      // If RELATES_TO field has to be retrieved, add a filter for fetching\n+      // columns with RELATES_TO column prefix.\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n+              SubApplicationColumnPrefix.RELATES_TO));\n+    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n+      // Even if fields to retrieve does not contain RELATES_TO, we still\n+      // need to have a filter to fetch some of the column qualifiers if\n+      // relatesTo filters are specified. relatesTo filters will then be\n+      // matched after fetching rows from HBase.\n+      Set\u003cString\u003e relatesToCols \u003d\n+          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n+      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n+          SubApplicationColumnPrefix.RELATES_TO, relatesToCols));\n+    }\n+    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n+    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n+      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n+      // columns with IS_RELATED_TO column prefix.\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n+              SubApplicationColumnPrefix.IS_RELATED_TO));\n+    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n+      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n+      // need to have a filter to fetch some of the column qualifiers if\n+      // isRelatedTo filters are specified. isRelatedTo filters will then be\n+      // matched after fetching rows from HBase.\n+      Set\u003cString\u003e isRelatedToCols \u003d\n+          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n+      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n+          SubApplicationColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n+    }\n+    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n+    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n+      // If EVENTS field has to be retrieved, add a filter for fetching columns\n+      // with EVENT column prefix.\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n+              SubApplicationColumnPrefix.EVENT));\n+    } else if (eventFilters !\u003d null\n+        \u0026\u0026 !eventFilters.getFilterList().isEmpty()) {\n+      // Even if fields to retrieve does not contain EVENTS, we still need to\n+      // have a filter to fetch some of the column qualifiers on the basis of\n+      // event filters specified. Event filters will then be matched after\n+      // fetching rows from HBase.\n+      Set\u003cString\u003e eventCols \u003d\n+          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n+      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n+          SubApplicationColumnPrefix.EVENT, eventCols));\n+    }\n+    return infoFamilyColsFilter;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Add filters for each column in entity table.\n    updateFixedColumns(infoFamilyColsFilter);\n    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n    // If INFO field has to be retrieved, add a filter for fetching columns\n    // with INFO column prefix.\n    if (hasField(fieldsToRetrieve, Field.INFO)) {\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.INFO));\n    }\n    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n      // If RELATES_TO field has to be retrieved, add a filter for fetching\n      // columns with RELATES_TO column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.RELATES_TO));\n    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain RELATES_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // relatesTo filters are specified. relatesTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e relatesToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          SubApplicationColumnPrefix.RELATES_TO, relatesToCols));\n    }\n    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n      // columns with IS_RELATED_TO column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.IS_RELATED_TO));\n    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // isRelatedTo filters are specified. isRelatedTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e isRelatedToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          SubApplicationColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n    }\n    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n      // If EVENTS field has to be retrieved, add a filter for fetching columns\n      // with EVENT column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(CompareOp.EQUAL,\n              SubApplicationColumnPrefix.EVENT));\n    } else if (eventFilters !\u003d null\n        \u0026\u0026 !eventFilters.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain EVENTS, we still need to\n      // have a filter to fetch some of the column qualifiers on the basis of\n      // event filters specified. Event filters will then be matched after\n      // fetching rows from HBase.\n      Set\u003cString\u003e eventCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          SubApplicationColumnPrefix.EVENT, eventCols));\n    }\n    return infoFamilyColsFilter;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java"
    }
  }
}