{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRApps.java",
  "functionName": "addToClasspathIfNotJar",
  "functionId": "addToClasspathIfNotJar___paths-Path[]__withLinks-URI[]__conf-Configuration__environment-Map__String,String____classpathEnvVar-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
  "functionStartLine": 296,
  "functionEndLine": 356,
  "numCommitsSeen": 84,
  "timeTaken": 2241,
  "changeHistory": [
    "605b4b61364781fc99ed27035c793153a20d8f71",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
    "0ba7078ef4ee127a47c5042c82db0b113a967b23",
    "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1"
  ],
  "changeHistoryShort": {
    "605b4b61364781fc99ed27035c793153a20d8f71": "Ybodychange",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": "Ybodychange",
    "0ba7078ef4ee127a47c5042c82db0b113a967b23": "Ymultichange(Yparameterchange,Ybodychange)",
    "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "605b4b61364781fc99ed27035c793153a20d8f71": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6719. The list of -libjars archives should be replaced with a wildcard in the distributed cache to reduce the application footprint in the state store (Daniel Templeton via sjlee)\n",
      "commitDate": "21/06/16 11:25 AM",
      "commitName": "605b4b61364781fc99ed27035c793153a20d8f71",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.85,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,61 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n       Map\u003cString, String\u003e environment,\n       String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n+          String name \u003d p.getName();\n+          String wildcard \u003d null;\n+\n+          // If the path is wildcarded, resolve its parent directory instead\n+          if (name.equals(DistributedCache.WILDCARD)) {\n+            wildcard \u003d name;\n+            p \u003d p.getParent();\n+          }\n+\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n-          String name \u003d (null \u003d\u003d u.getFragment())\n-              ? p.getName() : u.getFragment();\n+\n+          if ((wildcard !\u003d null) \u0026\u0026 (u.getFragment() !\u003d null)) {\n+            throw new IOException(\"Invalid path URI: \" + p + \" - cannot \"\n+                + \"contain both a URI fragment and a wildcard\");\n+          } else if (wildcard !\u003d null) {\n+            name \u003d p.getName() + Path.SEPARATOR + wildcard;\n+          } else if (u.getFragment() !\u003d null) {\n+            name \u003d u.getFragment();\n+          }\n+\n+          // If it\u0027s not a JAR, add it to the link lookup.\n           if (!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n-            linkLookup.put(p, name);\n+            String old \u003d linkLookup.put(p, name);\n+\n+            if ((old !\u003d null) \u0026\u0026 !name.equals(old)) {\n+              LOG.warn(\"The same path is included more than once \"\n+                  + \"with different links or wildcards: \" + p + \" [\" +\n+                  name + \", \" + old + \"]\");\n+            }\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n         if(!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n           MRApps.addToEnvironment(\n               environment,\n               classpathEnvVar,\n               crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          String name \u003d p.getName();\n          String wildcard \u003d null;\n\n          // If the path is wildcarded, resolve its parent directory instead\n          if (name.equals(DistributedCache.WILDCARD)) {\n            wildcard \u003d name;\n            p \u003d p.getParent();\n          }\n\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n\n          if ((wildcard !\u003d null) \u0026\u0026 (u.getFragment() !\u003d null)) {\n            throw new IOException(\"Invalid path URI: \" + p + \" - cannot \"\n                + \"contain both a URI fragment and a wildcard\");\n          } else if (wildcard !\u003d null) {\n            name \u003d p.getName() + Path.SEPARATOR + wildcard;\n          } else if (u.getFragment() !\u003d null) {\n            name \u003d u.getFragment();\n          }\n\n          // If it\u0027s not a JAR, add it to the link lookup.\n          if (!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n            String old \u003d linkLookup.put(p, name);\n\n            if ((old !\u003d null) \u0026\u0026 !name.equals(old)) {\n              LOG.warn(\"The same path is included more than once \"\n                  + \"with different links or wildcards: \" + p + \" [\" +\n                  name + \", \" + old + \"]\");\n            }\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n          MRApps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n       Map\u003cString, String\u003e environment,\n       String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n           String name \u003d (null \u003d\u003d u.getFragment())\n               ? p.getName() : u.getFragment();\n-          if (!name.toLowerCase().endsWith(\".jar\")) {\n+          if (!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n             linkLookup.put(p, name);\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n-        if(!name.toLowerCase().endsWith(\".jar\")) {\n+        if(!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n           MRApps.addToEnvironment(\n               environment,\n               classpathEnvVar,\n               crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!StringUtils.toLowerCase(name).endsWith(\".jar\")) {\n          MRApps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n       Map\u003cString, String\u003e environment,\n       String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n           String name \u003d (null \u003d\u003d u.getFragment())\n               ? p.getName() : u.getFragment();\n-          if (!name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\")) {\n+          if (!name.toLowerCase().endsWith(\".jar\")) {\n             linkLookup.put(p, name);\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n-        if(!name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\")) {\n+        if(!name.toLowerCase().endsWith(\".jar\")) {\n           MRApps.addToEnvironment(\n               environment,\n               classpathEnvVar,\n               crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!name.toLowerCase().endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!name.toLowerCase().endsWith(\".jar\")) {\n          MRApps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "03/12/14 9:02 AM",
      "commitNameOld": "03ab24aa01ffea1cacf1fa9cbbf73c3f2904d981",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 77.46,
      "commitsBetweenForRepo": 591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n       Map\u003cString, String\u003e environment,\n       String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n           String name \u003d (null \u003d\u003d u.getFragment())\n               ? p.getName() : u.getFragment();\n-          if (!name.toLowerCase().endsWith(\".jar\")) {\n+          if (!name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\")) {\n             linkLookup.put(p, name);\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n-        if(!name.toLowerCase().endsWith(\".jar\")) {\n+        if(!name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\")) {\n           MRApps.addToEnvironment(\n               environment,\n               classpathEnvVar,\n               crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\")) {\n          MRApps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1824. Improved NodeManager and clients to be able to handle cross platform application submissions. Contributed by Jian He.\nMAPREDUCE-4052. Improved MapReduce clients to use NodeManagers\u0027 ability to handle cross platform application submissions. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578135 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/03/14 11:32 AM",
      "commitName": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/03/14 3:04 PM",
      "commitNameOld": "3bbd67173eaf776b7b5e4af8a24dd8738e02fed0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n       Map\u003cString, String\u003e environment,\n       String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n           String name \u003d (null \u003d\u003d u.getFragment())\n               ? p.getName() : u.getFragment();\n           if (!name.toLowerCase().endsWith(\".jar\")) {\n             linkLookup.put(p, name);\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n         if(!name.toLowerCase().endsWith(\".jar\")) {\n-          Apps.addToEnvironment(\n+          MRApps.addToEnvironment(\n               environment,\n               classpathEnvVar,\n-              Environment.PWD.$() + Path.SEPARATOR + name);\n+              crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!name.toLowerCase().endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!name.toLowerCase().endsWith(\".jar\")) {\n          MRApps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "0ba7078ef4ee127a47c5042c82db0b113a967b23": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-1700. User supplied dependencies may conflict with MapReduce system JARs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430929 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 8:12 AM",
      "commitName": "0ba7078ef4ee127a47c5042c82db0b113a967b23",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-1700. User supplied dependencies may conflict with MapReduce system JARs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430929 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/01/13 8:12 AM",
          "commitName": "0ba7078ef4ee127a47c5042c82db0b113a967b23",
          "commitAuthor": "Thomas White",
          "commitDateOld": "04/01/13 12:35 PM",
          "commitNameOld": "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 4.82,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n-      Map\u003cString, String\u003e environment) throws IOException {\n+      Map\u003cString, String\u003e environment,\n+      String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n           String name \u003d (null \u003d\u003d u.getFragment())\n               ? p.getName() : u.getFragment();\n           if (!name.toLowerCase().endsWith(\".jar\")) {\n             linkLookup.put(p, name);\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n         if(!name.toLowerCase().endsWith(\".jar\")) {\n           Apps.addToEnvironment(\n               environment,\n-              Environment.CLASSPATH.name(),\n+              classpathEnvVar,\n               Environment.PWD.$() + Path.SEPARATOR + name);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!name.toLowerCase().endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!name.toLowerCase().endsWith(\".jar\")) {\n          Apps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              Environment.PWD.$() + Path.SEPARATOR + name);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "[paths-Path[], withLinks-URI[], conf-Configuration, environment-Map\u003cString,String\u003e]",
            "newValue": "[paths-Path[], withLinks-URI[], conf-Configuration, environment-Map\u003cString,String\u003e, classpathEnvVar-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-1700. User supplied dependencies may conflict with MapReduce system JARs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430929 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/01/13 8:12 AM",
          "commitName": "0ba7078ef4ee127a47c5042c82db0b113a967b23",
          "commitAuthor": "Thomas White",
          "commitDateOld": "04/01/13 12:35 PM",
          "commitNameOld": "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 4.82,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   private static void addToClasspathIfNotJar(Path[] paths,\n       URI[] withLinks, Configuration conf,\n-      Map\u003cString, String\u003e environment) throws IOException {\n+      Map\u003cString, String\u003e environment,\n+      String classpathEnvVar) throws IOException {\n     if (paths !\u003d null) {\n       HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n       if (withLinks !\u003d null) {\n         for (URI u: withLinks) {\n           Path p \u003d new Path(u);\n           FileSystem remoteFS \u003d p.getFileSystem(conf);\n           p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n               remoteFS.getWorkingDirectory()));\n           String name \u003d (null \u003d\u003d u.getFragment())\n               ? p.getName() : u.getFragment();\n           if (!name.toLowerCase().endsWith(\".jar\")) {\n             linkLookup.put(p, name);\n           }\n         }\n       }\n       \n       for (Path p : paths) {\n         FileSystem remoteFS \u003d p.getFileSystem(conf);\n         p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory()));\n         String name \u003d linkLookup.get(p);\n         if (name \u003d\u003d null) {\n           name \u003d p.getName();\n         }\n         if(!name.toLowerCase().endsWith(\".jar\")) {\n           Apps.addToEnvironment(\n               environment,\n-              Environment.CLASSPATH.name(),\n+              classpathEnvVar,\n               Environment.PWD.$() + Path.SEPARATOR + name);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment,\n      String classpathEnvVar) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!name.toLowerCase().endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!name.toLowerCase().endsWith(\".jar\")) {\n          Apps.addToEnvironment(\n              environment,\n              classpathEnvVar,\n              Environment.PWD.$() + Path.SEPARATOR + name);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4740. only .jars can be added to the Distributed Cache classpath. Contributed by Robert Joseph Evans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/10/12 12:50 PM",
      "commitName": "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,36 @@\n+  private static void addToClasspathIfNotJar(Path[] paths,\n+      URI[] withLinks, Configuration conf,\n+      Map\u003cString, String\u003e environment) throws IOException {\n+    if (paths !\u003d null) {\n+      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n+      if (withLinks !\u003d null) {\n+        for (URI u: withLinks) {\n+          Path p \u003d new Path(u);\n+          FileSystem remoteFS \u003d p.getFileSystem(conf);\n+          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n+              remoteFS.getWorkingDirectory()));\n+          String name \u003d (null \u003d\u003d u.getFragment())\n+              ? p.getName() : u.getFragment();\n+          if (!name.toLowerCase().endsWith(\".jar\")) {\n+            linkLookup.put(p, name);\n+          }\n+        }\n+      }\n+      \n+      for (Path p : paths) {\n+        FileSystem remoteFS \u003d p.getFileSystem(conf);\n+        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n+            remoteFS.getWorkingDirectory()));\n+        String name \u003d linkLookup.get(p);\n+        if (name \u003d\u003d null) {\n+          name \u003d p.getName();\n+        }\n+        if(!name.toLowerCase().endsWith(\".jar\")) {\n+          Apps.addToEnvironment(\n+              environment,\n+              Environment.CLASSPATH.name(),\n+              Environment.PWD.$() + Path.SEPARATOR + name);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addToClasspathIfNotJar(Path[] paths,\n      URI[] withLinks, Configuration conf,\n      Map\u003cString, String\u003e environment) throws IOException {\n    if (paths !\u003d null) {\n      HashMap\u003cPath, String\u003e linkLookup \u003d new HashMap\u003cPath, String\u003e();\n      if (withLinks !\u003d null) {\n        for (URI u: withLinks) {\n          Path p \u003d new Path(u);\n          FileSystem remoteFS \u003d p.getFileSystem(conf);\n          p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n              remoteFS.getWorkingDirectory()));\n          String name \u003d (null \u003d\u003d u.getFragment())\n              ? p.getName() : u.getFragment();\n          if (!name.toLowerCase().endsWith(\".jar\")) {\n            linkLookup.put(p, name);\n          }\n        }\n      }\n      \n      for (Path p : paths) {\n        FileSystem remoteFS \u003d p.getFileSystem(conf);\n        p \u003d remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory()));\n        String name \u003d linkLookup.get(p);\n        if (name \u003d\u003d null) {\n          name \u003d p.getName();\n        }\n        if(!name.toLowerCase().endsWith(\".jar\")) {\n          Apps.addToEnvironment(\n              environment,\n              Environment.CLASSPATH.name(),\n              Environment.PWD.$() + Path.SEPARATOR + name);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java"
    }
  }
}