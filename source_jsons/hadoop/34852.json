{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "registerApplicationMaster",
  "functionId": "registerApplicationMaster___request-RegisterApplicationMasterRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 516,
  "functionEndLine": 616,
  "numCommitsSeen": 21,
  "timeTaken": 3967,
  "changeHistory": [
    "3090922805699b8374a359e92323884a4177dc4e",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f"
  ],
  "changeHistoryShort": {
    "3090922805699b8374a359e92323884a4177dc4e": "Ybodychange",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ybodychange",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": "Ybodychange",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9": "Ymultichange(Ymodifierchange,Ybodychange)",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Ybodychange",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/09/18 11:46 AM",
      "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,101 @@\n       registerApplicationMaster(RegisterApplicationMasterRequest request)\n           throws YarnException, IOException {\n+\n+    // Reset the heartbeat responseId to zero upon register\n+    synchronized (this.lastAllocateResponseLock) {\n+      this.lastAllocateResponse.setResponseId(0);\n+    }\n+    this.justRecovered \u003d false;\n+\n     // If AM is calling with a different request, complain\n     if (this.amRegistrationRequest !\u003d null) {\n       if (!this.amRegistrationRequest.equals(request)) {\n         throw new YarnException(\"AM should not call \"\n             + \"registerApplicationMaster with a different request body\");\n       }\n     } else {\n       // Save the registration request. This will be used for registering with\n       // secondary sub-clusters using UAMs, as well as re-register later\n       this.amRegistrationRequest \u003d request;\n       if (getNMStateStore() !\u003d null) {\n         try {\n           RegisterApplicationMasterRequestPBImpl pb \u003d\n               (RegisterApplicationMasterRequestPBImpl)\n                   this.amRegistrationRequest;\n           getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n               NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n         } catch (Exception e) {\n           LOG.error(\"Error storing AMRMProxy application context entry for \"\n               + this.attemptId, e);\n         }\n       }\n     }\n \n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n     this.amRegistrationResponse \u003d\n         this.homeRMRelayer.registerApplicationMaster(request);\n     if (this.amRegistrationResponse\n         .getContainersFromPreviousAttempts() !\u003d null) {\n       cacheAllocatedContainers(\n           this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n           this.homeSubClusterId);\n     }\n \n     ApplicationId appId \u003d this.attemptId.getApplicationId();\n     reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n \n     if (getNMStateStore() !\u003d null) {\n       try {\n         RegisterApplicationMasterResponsePBImpl pb \u003d\n             (RegisterApplicationMasterResponsePBImpl)\n                 this.amRegistrationResponse;\n         getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n             NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n       } catch (Exception e) {\n         LOG.error(\"Error storing AMRMProxy application context entry for \"\n             + this.attemptId, e);\n       }\n     }\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \" + appId\n           + \" from home subcluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n\n    // Reset the heartbeat responseId to zero upon register\n    synchronized (this.lastAllocateResponseLock) {\n      this.lastAllocateResponse.setResponseId(0);\n    }\n    this.justRecovered \u003d false;\n\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n      if (getNMStateStore() !\u003d null) {\n        try {\n          RegisterApplicationMasterRequestPBImpl pb \u003d\n              (RegisterApplicationMasterRequestPBImpl)\n                  this.amRegistrationRequest;\n          getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n              NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n        } catch (Exception e) {\n          LOG.error(\"Error storing AMRMProxy application context entry for \"\n              + this.attemptId, e);\n        }\n      }\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRMRelayer.registerApplicationMaster(request);\n    if (this.amRegistrationResponse\n        .getContainersFromPreviousAttempts() !\u003d null) {\n      cacheAllocatedContainers(\n          this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n          this.homeSubClusterId);\n    }\n\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n\n    if (getNMStateStore() !\u003d null) {\n      try {\n        RegisterApplicationMasterResponsePBImpl pb \u003d\n            (RegisterApplicationMasterResponsePBImpl)\n                this.amRegistrationResponse;\n        getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n            NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n      } catch (Exception e) {\n        LOG.error(\"Error storing AMRMProxy application context entry for \"\n            + this.attemptId, e);\n      }\n    }\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \" + appId\n          + \" from home subcluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,94 @@\n       registerApplicationMaster(RegisterApplicationMasterRequest request)\n           throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n     if (this.amRegistrationRequest !\u003d null) {\n       if (!this.amRegistrationRequest.equals(request)) {\n         throw new YarnException(\"AM should not call \"\n             + \"registerApplicationMaster with a different request body\");\n       }\n     } else {\n       // Save the registration request. This will be used for registering with\n       // secondary sub-clusters using UAMs, as well as re-register later\n       this.amRegistrationRequest \u003d request;\n       if (getNMStateStore() !\u003d null) {\n         try {\n           RegisterApplicationMasterRequestPBImpl pb \u003d\n               (RegisterApplicationMasterRequestPBImpl)\n                   this.amRegistrationRequest;\n-          getNMStateStore().storeAMRMProxyAppContextEntry(\n-              getApplicationContext().getApplicationAttemptId(),\n+          getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n               NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n         } catch (Exception e) {\n           LOG.error(\"Error storing AMRMProxy application context entry for \"\n-              + getApplicationContext().getApplicationAttemptId(), e);\n+              + this.attemptId, e);\n         }\n       }\n     }\n \n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n     this.amRegistrationResponse \u003d\n         this.homeRMRelayer.registerApplicationMaster(request);\n     if (this.amRegistrationResponse\n         .getContainersFromPreviousAttempts() !\u003d null) {\n       cacheAllocatedContainers(\n           this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n           this.homeSubClusterId);\n     }\n \n-    ApplicationId appId \u003d\n-        getApplicationContext().getApplicationAttemptId().getApplicationId();\n+    ApplicationId appId \u003d this.attemptId.getApplicationId();\n     reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n \n     if (getNMStateStore() !\u003d null) {\n       try {\n         RegisterApplicationMasterResponsePBImpl pb \u003d\n             (RegisterApplicationMasterResponsePBImpl)\n                 this.amRegistrationResponse;\n-        getNMStateStore().storeAMRMProxyAppContextEntry(\n-            getApplicationContext().getApplicationAttemptId(),\n+        getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n             NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n       } catch (Exception e) {\n         LOG.error(\"Error storing AMRMProxy application context entry for \"\n-            + getApplicationContext().getApplicationAttemptId(), e);\n+            + this.attemptId, e);\n       }\n     }\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \" + appId\n           + \" from home subcluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n      if (getNMStateStore() !\u003d null) {\n        try {\n          RegisterApplicationMasterRequestPBImpl pb \u003d\n              (RegisterApplicationMasterRequestPBImpl)\n                  this.amRegistrationRequest;\n          getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n              NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n        } catch (Exception e) {\n          LOG.error(\"Error storing AMRMProxy application context entry for \"\n              + this.attemptId, e);\n        }\n      }\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRMRelayer.registerApplicationMaster(request);\n    if (this.amRegistrationResponse\n        .getContainersFromPreviousAttempts() !\u003d null) {\n      cacheAllocatedContainers(\n          this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n          this.homeSubClusterId);\n    }\n\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n\n    if (getNMStateStore() !\u003d null) {\n      try {\n        RegisterApplicationMasterResponsePBImpl pb \u003d\n            (RegisterApplicationMasterResponsePBImpl)\n                this.amRegistrationResponse;\n        getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId,\n            NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n      } catch (Exception e) {\n        LOG.error(\"Error storing AMRMProxy application context entry for \"\n            + this.attemptId, e);\n      }\n    }\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \" + appId\n          + \" from home subcluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7899. [AMRMProxy] Stateful FederationInterceptor for pending requests. Contributed by Botong Huang.\n",
      "commitDate": "09/07/18 12:27 PM",
      "commitName": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/05/18 8:00 PM",
      "commitNameOld": "3159bffce23abf35754da2d7d51de7d8c2631ae3",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 52.69,
      "commitsBetweenForRepo": 338,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,97 @@\n       registerApplicationMaster(RegisterApplicationMasterRequest request)\n           throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n     if (this.amRegistrationRequest !\u003d null) {\n       if (!this.amRegistrationRequest.equals(request)) {\n         throw new YarnException(\"AM should not call \"\n             + \"registerApplicationMaster with a different request body\");\n       }\n     } else {\n       // Save the registration request. This will be used for registering with\n       // secondary sub-clusters using UAMs, as well as re-register later\n       this.amRegistrationRequest \u003d request;\n       if (getNMStateStore() !\u003d null) {\n         try {\n           RegisterApplicationMasterRequestPBImpl pb \u003d\n               (RegisterApplicationMasterRequestPBImpl)\n                   this.amRegistrationRequest;\n           getNMStateStore().storeAMRMProxyAppContextEntry(\n               getApplicationContext().getApplicationAttemptId(),\n               NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n         } catch (Exception e) {\n           LOG.error(\"Error storing AMRMProxy application context entry for \"\n               + getApplicationContext().getApplicationAttemptId(), e);\n         }\n       }\n     }\n \n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n     this.amRegistrationResponse \u003d\n-        this.homeRM.registerApplicationMaster(request);\n+        this.homeRMRelayer.registerApplicationMaster(request);\n     if (this.amRegistrationResponse\n         .getContainersFromPreviousAttempts() !\u003d null) {\n       cacheAllocatedContainers(\n           this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n           this.homeSubClusterId);\n     }\n \n     ApplicationId appId \u003d\n         getApplicationContext().getApplicationAttemptId().getApplicationId();\n     reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n \n     if (getNMStateStore() !\u003d null) {\n       try {\n         RegisterApplicationMasterResponsePBImpl pb \u003d\n             (RegisterApplicationMasterResponsePBImpl)\n                 this.amRegistrationResponse;\n         getNMStateStore().storeAMRMProxyAppContextEntry(\n             getApplicationContext().getApplicationAttemptId(),\n             NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n       } catch (Exception e) {\n         LOG.error(\"Error storing AMRMProxy application context entry for \"\n             + getApplicationContext().getApplicationAttemptId(), e);\n       }\n     }\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \" + appId\n           + \" from home subcluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n      if (getNMStateStore() !\u003d null) {\n        try {\n          RegisterApplicationMasterRequestPBImpl pb \u003d\n              (RegisterApplicationMasterRequestPBImpl)\n                  this.amRegistrationRequest;\n          getNMStateStore().storeAMRMProxyAppContextEntry(\n              getApplicationContext().getApplicationAttemptId(),\n              NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n        } catch (Exception e) {\n          LOG.error(\"Error storing AMRMProxy application context entry for \"\n              + getApplicationContext().getApplicationAttemptId(), e);\n        }\n      }\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRMRelayer.registerApplicationMaster(request);\n    if (this.amRegistrationResponse\n        .getContainersFromPreviousAttempts() !\u003d null) {\n      cacheAllocatedContainers(\n          this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n          this.homeSubClusterId);\n    }\n\n    ApplicationId appId \u003d\n        getApplicationContext().getApplicationAttemptId().getApplicationId();\n    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n\n    if (getNMStateStore() !\u003d null) {\n      try {\n        RegisterApplicationMasterResponsePBImpl pb \u003d\n            (RegisterApplicationMasterResponsePBImpl)\n                this.amRegistrationResponse;\n        getNMStateStore().storeAMRMProxyAppContextEntry(\n            getApplicationContext().getApplicationAttemptId(),\n            NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n      } catch (Exception e) {\n        LOG.error(\"Error storing AMRMProxy application context entry for \"\n            + getApplicationContext().getApplicationAttemptId(), e);\n      }\n    }\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \" + appId\n          + \" from home subcluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6704. Add support for work preserving NM restart when FederationInterceptor is enabled in AMRMProxyService. (Botong Huang via Subru).\n",
      "commitDate": "08/12/17 3:39 PM",
      "commitName": "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,97 @@\n       registerApplicationMaster(RegisterApplicationMasterRequest request)\n           throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n     if (this.amRegistrationRequest !\u003d null) {\n       if (!this.amRegistrationRequest.equals(request)) {\n         throw new YarnException(\"AM should not call \"\n             + \"registerApplicationMaster with a different request body\");\n       }\n     } else {\n       // Save the registration request. This will be used for registering with\n       // secondary sub-clusters using UAMs, as well as re-register later\n       this.amRegistrationRequest \u003d request;\n+      if (getNMStateStore() !\u003d null) {\n+        try {\n+          RegisterApplicationMasterRequestPBImpl pb \u003d\n+              (RegisterApplicationMasterRequestPBImpl)\n+                  this.amRegistrationRequest;\n+          getNMStateStore().storeAMRMProxyAppContextEntry(\n+              getApplicationContext().getApplicationAttemptId(),\n+              NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n+        } catch (Exception e) {\n+          LOG.error(\"Error storing AMRMProxy application context entry for \"\n+              + getApplicationContext().getApplicationAttemptId(), e);\n+        }\n+      }\n     }\n \n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n     this.amRegistrationResponse \u003d\n         this.homeRM.registerApplicationMaster(request);\n     if (this.amRegistrationResponse\n         .getContainersFromPreviousAttempts() !\u003d null) {\n       cacheAllocatedContainers(\n           this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n           this.homeSubClusterId);\n     }\n \n     ApplicationId appId \u003d\n         getApplicationContext().getApplicationAttemptId().getApplicationId();\n     reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n \n+    if (getNMStateStore() !\u003d null) {\n+      try {\n+        RegisterApplicationMasterResponsePBImpl pb \u003d\n+            (RegisterApplicationMasterResponsePBImpl)\n+                this.amRegistrationResponse;\n+        getNMStateStore().storeAMRMProxyAppContextEntry(\n+            getApplicationContext().getApplicationAttemptId(),\n+            NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n+      } catch (Exception e) {\n+        LOG.error(\"Error storing AMRMProxy application context entry for \"\n+            + getApplicationContext().getApplicationAttemptId(), e);\n+      }\n+    }\n+\n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \" + appId\n           + \" from home subcluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n      if (getNMStateStore() !\u003d null) {\n        try {\n          RegisterApplicationMasterRequestPBImpl pb \u003d\n              (RegisterApplicationMasterRequestPBImpl)\n                  this.amRegistrationRequest;\n          getNMStateStore().storeAMRMProxyAppContextEntry(\n              getApplicationContext().getApplicationAttemptId(),\n              NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\n        } catch (Exception e) {\n          LOG.error(\"Error storing AMRMProxy application context entry for \"\n              + getApplicationContext().getApplicationAttemptId(), e);\n        }\n      }\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRM.registerApplicationMaster(request);\n    if (this.amRegistrationResponse\n        .getContainersFromPreviousAttempts() !\u003d null) {\n      cacheAllocatedContainers(\n          this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n          this.homeSubClusterId);\n    }\n\n    ApplicationId appId \u003d\n        getApplicationContext().getApplicationAttemptId().getApplicationId();\n    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n\n    if (getNMStateStore() !\u003d null) {\n      try {\n        RegisterApplicationMasterResponsePBImpl pb \u003d\n            (RegisterApplicationMasterResponsePBImpl)\n                this.amRegistrationResponse;\n        getNMStateStore().storeAMRMProxyAppContextEntry(\n            getApplicationContext().getApplicationAttemptId(),\n            NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\n      } catch (Exception e) {\n        LOG.error(\"Error storing AMRMProxy application context entry for \"\n            + getApplicationContext().getApplicationAttemptId(), e);\n      }\n    }\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \" + appId\n          + \" from home subcluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "28/09/17 1:04 PM",
      "commitNameOld": "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 50.23,
      "commitsBetweenForRepo": 444,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,70 @@\n       registerApplicationMaster(RegisterApplicationMasterRequest request)\n           throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n     if (this.amRegistrationRequest !\u003d null) {\n       if (!this.amRegistrationRequest.equals(request)) {\n         throw new YarnException(\"AM should not call \"\n             + \"registerApplicationMaster with a different request body\");\n       }\n     } else {\n       // Save the registration request. This will be used for registering with\n       // secondary sub-clusters using UAMs, as well as re-register later\n       this.amRegistrationRequest \u003d request;\n     }\n \n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n     this.amRegistrationResponse \u003d\n         this.homeRM.registerApplicationMaster(request);\n+    if (this.amRegistrationResponse\n+        .getContainersFromPreviousAttempts() !\u003d null) {\n+      cacheAllocatedContainers(\n+          this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n+          this.homeSubClusterId);\n+    }\n+\n+    ApplicationId appId \u003d\n+        getApplicationContext().getApplicationAttemptId().getApplicationId();\n+    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n-      LOG.warn(\"Received null queue for application \"\n-          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n-          + \" from home sub-cluster. Will use default queue name \"\n+      LOG.warn(\"Received null queue for application \" + appId\n+          + \" from home subcluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n-      LOG.info(\"Application \"\n-          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n-          + \" belongs to queue \" + queue);\n+      LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRM.registerApplicationMaster(request);\n    if (this.amRegistrationResponse\n        .getContainersFromPreviousAttempts() !\u003d null) {\n      cacheAllocatedContainers(\n          this.amRegistrationResponse.getContainersFromPreviousAttempts(),\n          this.homeSubClusterId);\n    }\n\n    ApplicationId appId \u003d\n        getApplicationContext().getApplicationAttemptId().getApplicationId();\n    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \" + appId\n          + \" from home subcluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6955. Handle concurrent register AM requests in FederationInterceptor. (Botong Huang via Subru).\n",
      "commitDate": "07/08/17 4:58 PM",
      "commitName": "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6955. Handle concurrent register AM requests in FederationInterceptor. (Botong Huang via Subru).\n",
          "commitDate": "07/08/17 4:58 PM",
          "commitName": "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,63 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster(\n-      RegisterApplicationMasterRequest request)\n-      throws YarnException, IOException {\n+      registerApplicationMaster(RegisterApplicationMasterRequest request)\n+          throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n-    if (this.amRegistrationRequest !\u003d null\n-        \u0026\u0026 !this.amRegistrationRequest.equals(request)) {\n-      throw new YarnException(\"A different request body recieved. AM should\"\n-          + \" not call registerApplicationMaster with different request body\");\n+    if (this.amRegistrationRequest !\u003d null) {\n+      if (!this.amRegistrationRequest.equals(request)) {\n+        throw new YarnException(\"AM should not call \"\n+            + \"registerApplicationMaster with a different request body\");\n+      }\n+    } else {\n+      // Save the registration request. This will be used for registering with\n+      // secondary sub-clusters using UAMs, as well as re-register later\n+      this.amRegistrationRequest \u003d request;\n     }\n \n-    // Save the registration request. This will be used for registering with\n-    // secondary sub-clusters using UAMs, as well as re-register later\n-    this.amRegistrationRequest \u003d request;\n-\n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n-    try {\n-      this.amRegistrationResponse \u003d\n-          this.homeRM.registerApplicationMaster(request);\n-    } catch (InvalidApplicationMasterRequestException e) {\n-      if (e.getMessage()\n-          .contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\n-        // Some other register thread might have succeeded in the meantime\n-        if (this.amRegistrationResponse !\u003d null) {\n-          LOG.info(\"Other concurrent thread registered successfully, \"\n-              + \"simply return the same success register response\");\n-          return this.amRegistrationResponse;\n-        }\n-      }\n-      // This is a real issue, throw back to AM\n-      throw e;\n-    }\n+    this.amRegistrationResponse \u003d\n+        this.homeRM.registerApplicationMaster(request);\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \"\n           + getApplicationContext().getApplicationAttemptId().getApplicationId()\n           + \" from home sub-cluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \"\n           + getApplicationContext().getApplicationAttemptId().getApplicationId()\n           + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRM.registerApplicationMaster(request);\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" from home sub-cluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6955. Handle concurrent register AM requests in FederationInterceptor. (Botong Huang via Subru).\n",
          "commitDate": "07/08/17 4:58 PM",
          "commitName": "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,63 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster(\n-      RegisterApplicationMasterRequest request)\n-      throws YarnException, IOException {\n+      registerApplicationMaster(RegisterApplicationMasterRequest request)\n+          throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n-    if (this.amRegistrationRequest !\u003d null\n-        \u0026\u0026 !this.amRegistrationRequest.equals(request)) {\n-      throw new YarnException(\"A different request body recieved. AM should\"\n-          + \" not call registerApplicationMaster with different request body\");\n+    if (this.amRegistrationRequest !\u003d null) {\n+      if (!this.amRegistrationRequest.equals(request)) {\n+        throw new YarnException(\"AM should not call \"\n+            + \"registerApplicationMaster with a different request body\");\n+      }\n+    } else {\n+      // Save the registration request. This will be used for registering with\n+      // secondary sub-clusters using UAMs, as well as re-register later\n+      this.amRegistrationRequest \u003d request;\n     }\n \n-    // Save the registration request. This will be used for registering with\n-    // secondary sub-clusters using UAMs, as well as re-register later\n-    this.amRegistrationRequest \u003d request;\n-\n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n-    try {\n-      this.amRegistrationResponse \u003d\n-          this.homeRM.registerApplicationMaster(request);\n-    } catch (InvalidApplicationMasterRequestException e) {\n-      if (e.getMessage()\n-          .contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\n-        // Some other register thread might have succeeded in the meantime\n-        if (this.amRegistrationResponse !\u003d null) {\n-          LOG.info(\"Other concurrent thread registered successfully, \"\n-              + \"simply return the same success register response\");\n-          return this.amRegistrationResponse;\n-        }\n-      }\n-      // This is a real issue, throw back to AM\n-      throw e;\n-    }\n+    this.amRegistrationResponse \u003d\n+        this.homeRM.registerApplicationMaster(request);\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \"\n           + getApplicationContext().getApplicationAttemptId().getApplicationId()\n           + \" from home sub-cluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \"\n           + getApplicationContext().getApplicationAttemptId().getApplicationId()\n           + \" belongs to queue \" + queue);\n     }\n \n     // Initialize the AMRMProxyPolicy\n     try {\n       this.policyInterpreter \u003d\n           FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n               getConf(), this.federationFacade, this.homeSubClusterId);\n     } catch (FederationPolicyInitializationException e) {\n       throw new YarnRuntimeException(e);\n     }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      registerApplicationMaster(RegisterApplicationMasterRequest request)\n          throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null) {\n      if (!this.amRegistrationRequest.equals(request)) {\n        throw new YarnException(\"AM should not call \"\n            + \"registerApplicationMaster with a different request body\");\n      }\n    } else {\n      // Save the registration request. This will be used for registering with\n      // secondary sub-clusters using UAMs, as well as re-register later\n      this.amRegistrationRequest \u003d request;\n    }\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    this.amRegistrationResponse \u003d\n        this.homeRM.registerApplicationMaster(request);\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" from home sub-cluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {}
        }
      ]
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,77 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n     // If AM is calling with a different request, complain\n     if (this.amRegistrationRequest !\u003d null\n         \u0026\u0026 !this.amRegistrationRequest.equals(request)) {\n       throw new YarnException(\"A different request body recieved. AM should\"\n           + \" not call registerApplicationMaster with different request body\");\n     }\n \n     // Save the registration request. This will be used for registering with\n     // secondary sub-clusters using UAMs, as well as re-register later\n     this.amRegistrationRequest \u003d request;\n \n     /*\n      * Present to AM as if we are the RM that never fails over. When actual RM\n      * fails over, we always re-register automatically.\n      *\n      * We did this because it is possible for AM to send duplicate register\n      * request because of timeout. When it happens, it is fine to simply return\n      * the success message. Out of all outstanding register threads, only the\n      * last one will still have an unbroken RPC connection and successfully\n      * return the response.\n      */\n     if (this.amRegistrationResponse !\u003d null) {\n       return this.amRegistrationResponse;\n     }\n \n     /*\n      * Send a registration request to the home resource manager. Note that here\n      * we don\u0027t register with other sub-cluster resource managers because that\n      * will prevent us from using new sub-clusters that get added while the AM\n      * is running and will breaks the elasticity feature. The registration with\n      * the other sub-cluster RM will be done lazily as needed later.\n      */\n     try {\n       this.amRegistrationResponse \u003d\n           this.homeRM.registerApplicationMaster(request);\n     } catch (InvalidApplicationMasterRequestException e) {\n       if (e.getMessage()\n           .contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\n         // Some other register thread might have succeeded in the meantime\n         if (this.amRegistrationResponse !\u003d null) {\n           LOG.info(\"Other concurrent thread registered successfully, \"\n               + \"simply return the same success register response\");\n           return this.amRegistrationResponse;\n         }\n       }\n       // This is a real issue, throw back to AM\n       throw e;\n     }\n \n     // the queue this application belongs will be used for getting\n     // AMRMProxy policy from state store.\n     String queue \u003d this.amRegistrationResponse.getQueue();\n     if (queue \u003d\u003d null) {\n       LOG.warn(\"Received null queue for application \"\n           + getApplicationContext().getApplicationAttemptId().getApplicationId()\n-          + \" from home subcluster. Will use default queue name \"\n+          + \" from home sub-cluster. Will use default queue name \"\n           + YarnConfiguration.DEFAULT_QUEUE_NAME\n           + \" for getting AMRMProxyPolicy\");\n     } else {\n       LOG.info(\"Application \"\n           + getApplicationContext().getApplicationAttemptId().getApplicationId()\n           + \" belongs to queue \" + queue);\n     }\n \n+    // Initialize the AMRMProxyPolicy\n+    try {\n+      this.policyInterpreter \u003d\n+          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n+              getConf(), this.federationFacade, this.homeSubClusterId);\n+    } catch (FederationPolicyInitializationException e) {\n+      throw new YarnRuntimeException(e);\n+    }\n     return this.amRegistrationResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null\n        \u0026\u0026 !this.amRegistrationRequest.equals(request)) {\n      throw new YarnException(\"A different request body recieved. AM should\"\n          + \" not call registerApplicationMaster with different request body\");\n    }\n\n    // Save the registration request. This will be used for registering with\n    // secondary sub-clusters using UAMs, as well as re-register later\n    this.amRegistrationRequest \u003d request;\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    try {\n      this.amRegistrationResponse \u003d\n          this.homeRM.registerApplicationMaster(request);\n    } catch (InvalidApplicationMasterRequestException e) {\n      if (e.getMessage()\n          .contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\n        // Some other register thread might have succeeded in the meantime\n        if (this.amRegistrationResponse !\u003d null) {\n          LOG.info(\"Other concurrent thread registered successfully, \"\n              + \"simply return the same success register response\");\n          return this.amRegistrationResponse;\n        }\n      }\n      // This is a real issue, throw back to AM\n      throw e;\n    }\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" from home sub-cluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" belongs to queue \" + queue);\n    }\n\n    // Initialize the AMRMProxyPolicy\n    try {\n      this.policyInterpreter \u003d\n          FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter,\n              getConf(), this.federationFacade, this.homeSubClusterId);\n    } catch (FederationPolicyInitializationException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3666. Federation Intercepting and propagating AM- home RM communications. (Botong Huang via Subru).\n\n(cherry picked from commit 2399eb8200609246cb623c74450ca4a2032063cc)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,69 @@\n+  public RegisterApplicationMasterResponse registerApplicationMaster(\n+      RegisterApplicationMasterRequest request)\n+      throws YarnException, IOException {\n+    // If AM is calling with a different request, complain\n+    if (this.amRegistrationRequest !\u003d null\n+        \u0026\u0026 !this.amRegistrationRequest.equals(request)) {\n+      throw new YarnException(\"A different request body recieved. AM should\"\n+          + \" not call registerApplicationMaster with different request body\");\n+    }\n+\n+    // Save the registration request. This will be used for registering with\n+    // secondary sub-clusters using UAMs, as well as re-register later\n+    this.amRegistrationRequest \u003d request;\n+\n+    /*\n+     * Present to AM as if we are the RM that never fails over. When actual RM\n+     * fails over, we always re-register automatically.\n+     *\n+     * We did this because it is possible for AM to send duplicate register\n+     * request because of timeout. When it happens, it is fine to simply return\n+     * the success message. Out of all outstanding register threads, only the\n+     * last one will still have an unbroken RPC connection and successfully\n+     * return the response.\n+     */\n+    if (this.amRegistrationResponse !\u003d null) {\n+      return this.amRegistrationResponse;\n+    }\n+\n+    /*\n+     * Send a registration request to the home resource manager. Note that here\n+     * we don\u0027t register with other sub-cluster resource managers because that\n+     * will prevent us from using new sub-clusters that get added while the AM\n+     * is running and will breaks the elasticity feature. The registration with\n+     * the other sub-cluster RM will be done lazily as needed later.\n+     */\n+    try {\n+      this.amRegistrationResponse \u003d\n+          this.homeRM.registerApplicationMaster(request);\n+    } catch (InvalidApplicationMasterRequestException e) {\n+      if (e.getMessage()\n+          .contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\n+        // Some other register thread might have succeeded in the meantime\n+        if (this.amRegistrationResponse !\u003d null) {\n+          LOG.info(\"Other concurrent thread registered successfully, \"\n+              + \"simply return the same success register response\");\n+          return this.amRegistrationResponse;\n+        }\n+      }\n+      // This is a real issue, throw back to AM\n+      throw e;\n+    }\n+\n+    // the queue this application belongs will be used for getting\n+    // AMRMProxy policy from state store.\n+    String queue \u003d this.amRegistrationResponse.getQueue();\n+    if (queue \u003d\u003d null) {\n+      LOG.warn(\"Received null queue for application \"\n+          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n+          + \" from home subcluster. Will use default queue name \"\n+          + YarnConfiguration.DEFAULT_QUEUE_NAME\n+          + \" for getting AMRMProxyPolicy\");\n+    } else {\n+      LOG.info(\"Application \"\n+          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n+          + \" belongs to queue \" + queue);\n+    }\n+\n+    return this.amRegistrationResponse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // If AM is calling with a different request, complain\n    if (this.amRegistrationRequest !\u003d null\n        \u0026\u0026 !this.amRegistrationRequest.equals(request)) {\n      throw new YarnException(\"A different request body recieved. AM should\"\n          + \" not call registerApplicationMaster with different request body\");\n    }\n\n    // Save the registration request. This will be used for registering with\n    // secondary sub-clusters using UAMs, as well as re-register later\n    this.amRegistrationRequest \u003d request;\n\n    /*\n     * Present to AM as if we are the RM that never fails over. When actual RM\n     * fails over, we always re-register automatically.\n     *\n     * We did this because it is possible for AM to send duplicate register\n     * request because of timeout. When it happens, it is fine to simply return\n     * the success message. Out of all outstanding register threads, only the\n     * last one will still have an unbroken RPC connection and successfully\n     * return the response.\n     */\n    if (this.amRegistrationResponse !\u003d null) {\n      return this.amRegistrationResponse;\n    }\n\n    /*\n     * Send a registration request to the home resource manager. Note that here\n     * we don\u0027t register with other sub-cluster resource managers because that\n     * will prevent us from using new sub-clusters that get added while the AM\n     * is running and will breaks the elasticity feature. The registration with\n     * the other sub-cluster RM will be done lazily as needed later.\n     */\n    try {\n      this.amRegistrationResponse \u003d\n          this.homeRM.registerApplicationMaster(request);\n    } catch (InvalidApplicationMasterRequestException e) {\n      if (e.getMessage()\n          .contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\n        // Some other register thread might have succeeded in the meantime\n        if (this.amRegistrationResponse !\u003d null) {\n          LOG.info(\"Other concurrent thread registered successfully, \"\n              + \"simply return the same success register response\");\n          return this.amRegistrationResponse;\n        }\n      }\n      // This is a real issue, throw back to AM\n      throw e;\n    }\n\n    // the queue this application belongs will be used for getting\n    // AMRMProxy policy from state store.\n    String queue \u003d this.amRegistrationResponse.getQueue();\n    if (queue \u003d\u003d null) {\n      LOG.warn(\"Received null queue for application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" from home subcluster. Will use default queue name \"\n          + YarnConfiguration.DEFAULT_QUEUE_NAME\n          + \" for getting AMRMProxyPolicy\");\n    } else {\n      LOG.info(\"Application \"\n          + getApplicationContext().getApplicationAttemptId().getApplicationId()\n          + \" belongs to queue \" + queue);\n    }\n\n    return this.amRegistrationResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}