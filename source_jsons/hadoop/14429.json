{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Journal.java",
  "functionName": "getPersistedPaxosData",
  "functionId": "getPersistedPaxosData___segmentTxId-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
  "functionStartLine": 1060,
  "functionEndLine": 1079,
  "numCommitsSeen": 64,
  "timeTaken": 2757,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "6beb25ab7e4f5454dba0315a296081e61753f301",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "6beb25ab7e4f5454dba0315a296081e61753f301": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "03/04/19 11:59 AM",
      "commitNameOld": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 29.04,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private PersistedRecoveryPaxosData getPersistedPaxosData(long segmentTxId)\n       throws IOException {\n     File f \u003d storage.getPaxosFile(segmentTxId);\n     if (!f.exists()) {\n       // Default instance has no fields filled in (they\u0027re optional)\n       return null;\n     }\n     \n-    InputStream in \u003d new FileInputStream(f);\n+    InputStream in \u003d Files.newInputStream(f.toPath());\n     try {\n       PersistedRecoveryPaxosData ret \u003d PersistedRecoveryPaxosData.parseDelimitedFrom(in);\n       Preconditions.checkState(ret !\u003d null \u0026\u0026\n           ret.getSegmentState().getStartTxId() \u003d\u003d segmentTxId,\n           \"Bad persisted data for segment %s: %s ; journal id: %s\",\n           segmentTxId, ret, journalId);\n       return ret;\n     } finally {\n       IOUtils.closeStream(in);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PersistedRecoveryPaxosData getPersistedPaxosData(long segmentTxId)\n      throws IOException {\n    File f \u003d storage.getPaxosFile(segmentTxId);\n    if (!f.exists()) {\n      // Default instance has no fields filled in (they\u0027re optional)\n      return null;\n    }\n    \n    InputStream in \u003d Files.newInputStream(f.toPath());\n    try {\n      PersistedRecoveryPaxosData ret \u003d PersistedRecoveryPaxosData.parseDelimitedFrom(in);\n      Preconditions.checkState(ret !\u003d null \u0026\u0026\n          ret.getSegmentState().getStartTxId() \u003d\u003d segmentTxId,\n          \"Bad persisted data for segment %s: %s ; journal id: %s\",\n          segmentTxId, ret, journalId);\n      return ret;\n    } finally {\n      IOUtils.closeStream(in);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "6beb25ab7e4f5454dba0315a296081e61753f301": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13544. Improve logging for JournalNode in federated cluster.\n",
      "commitDate": "14/05/18 10:12 AM",
      "commitName": "6beb25ab7e4f5454dba0315a296081e61753f301",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "13/10/17 2:22 PM",
      "commitNameOld": "8dd1eeb94fef59feaf19182dd8f1fcf1389c7f34",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 212.83,
      "commitsBetweenForRepo": 2051,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private PersistedRecoveryPaxosData getPersistedPaxosData(long segmentTxId)\n       throws IOException {\n     File f \u003d storage.getPaxosFile(segmentTxId);\n     if (!f.exists()) {\n       // Default instance has no fields filled in (they\u0027re optional)\n       return null;\n     }\n     \n     InputStream in \u003d new FileInputStream(f);\n     try {\n       PersistedRecoveryPaxosData ret \u003d PersistedRecoveryPaxosData.parseDelimitedFrom(in);\n       Preconditions.checkState(ret !\u003d null \u0026\u0026\n           ret.getSegmentState().getStartTxId() \u003d\u003d segmentTxId,\n-          \"Bad persisted data for segment %s: %s\",\n-          segmentTxId, ret);\n+          \"Bad persisted data for segment %s: %s ; journal id: %s\",\n+          segmentTxId, ret, journalId);\n       return ret;\n     } finally {\n       IOUtils.closeStream(in);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PersistedRecoveryPaxosData getPersistedPaxosData(long segmentTxId)\n      throws IOException {\n    File f \u003d storage.getPaxosFile(segmentTxId);\n    if (!f.exists()) {\n      // Default instance has no fields filled in (they\u0027re optional)\n      return null;\n    }\n    \n    InputStream in \u003d new FileInputStream(f);\n    try {\n      PersistedRecoveryPaxosData ret \u003d PersistedRecoveryPaxosData.parseDelimitedFrom(in);\n      Preconditions.checkState(ret !\u003d null \u0026\u0026\n          ret.getSegmentState().getStartTxId() \u003d\u003d segmentTxId,\n          \"Bad persisted data for segment %s: %s ; journal id: %s\",\n          segmentTxId, ret, journalId);\n      return ret;\n    } finally {\n      IOUtils.closeStream(in);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  private PersistedRecoveryPaxosData getPersistedPaxosData(long segmentTxId)\n+      throws IOException {\n+    File f \u003d storage.getPaxosFile(segmentTxId);\n+    if (!f.exists()) {\n+      // Default instance has no fields filled in (they\u0027re optional)\n+      return null;\n+    }\n+    \n+    InputStream in \u003d new FileInputStream(f);\n+    try {\n+      PersistedRecoveryPaxosData ret \u003d PersistedRecoveryPaxosData.parseDelimitedFrom(in);\n+      Preconditions.checkState(ret !\u003d null \u0026\u0026\n+          ret.getSegmentState().getStartTxId() \u003d\u003d segmentTxId,\n+          \"Bad persisted data for segment %s: %s\",\n+          segmentTxId, ret);\n+      return ret;\n+    } finally {\n+      IOUtils.closeStream(in);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PersistedRecoveryPaxosData getPersistedPaxosData(long segmentTxId)\n      throws IOException {\n    File f \u003d storage.getPaxosFile(segmentTxId);\n    if (!f.exists()) {\n      // Default instance has no fields filled in (they\u0027re optional)\n      return null;\n    }\n    \n    InputStream in \u003d new FileInputStream(f);\n    try {\n      PersistedRecoveryPaxosData ret \u003d PersistedRecoveryPaxosData.parseDelimitedFrom(in);\n      Preconditions.checkState(ret !\u003d null \u0026\u0026\n          ret.getSegmentState().getStartTxId() \u003d\u003d segmentTxId,\n          \"Bad persisted data for segment %s: %s\",\n          segmentTxId, ret);\n      return ret;\n    } finally {\n      IOUtils.closeStream(in);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java"
    }
  }
}