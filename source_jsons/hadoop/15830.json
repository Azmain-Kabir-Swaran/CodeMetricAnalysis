{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSServer.java",
  "functionName": "put",
  "functionId": "put___is-InputStream__uriInfo-UriInfo(annotations-@Context)__path-String(annotations-@PathParam(\"path\"))__op-OperationParam(annotations-@QueryParam(OperationParam.NAME))__params-Parameters(annotations-@Context)__request-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
  "functionStartLine": 713,
  "functionEndLine": 973,
  "numCommitsSeen": 75,
  "timeTaken": 5537,
  "changeHistory": [
    "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b",
    "9a3a28018af71806412d9a2d3ea6b63f3d6737dd",
    "59aac002834aaeb6475faad4c894b8c764957f68",
    "ad5256e44dffba2e9994f2db27d9ae71eab690e8",
    "8de5c923b432a670f6822189e7131d2df7b5a336",
    "9276ef066586a704f6898b670515029b5e3a20eb",
    "8a4bff02c1534c6bf529726f2bbe414ac4c172e8",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea",
    "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
    "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
    "46162a213f60f915df76c60b0412f45a021e1e7e",
    "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0",
    "5a8ea48c37da39f4f4879dabce3b640c9294dd73",
    "34605c9594770b204b28a809d8dbc0dae11ff0d1",
    "d263653ae22217439d1740c936d1c78e1644d73e",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b": "Ybodychange",
    "9a3a28018af71806412d9a2d3ea6b63f3d6737dd": "Ybodychange",
    "59aac002834aaeb6475faad4c894b8c764957f68": "Ybodychange",
    "ad5256e44dffba2e9994f2db27d9ae71eab690e8": "Ybodychange",
    "8de5c923b432a670f6822189e7131d2df7b5a336": "Ybodychange",
    "9276ef066586a704f6898b670515029b5e3a20eb": "Ybodychange",
    "8a4bff02c1534c6bf529726f2bbe414ac4c172e8": "Ybodychange",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": "Ybodychange",
    "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90": "Ymultichange(Yparameterchange,Ybodychange)",
    "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686": "Ymultichange(Yparameterchange,Ybodychange)",
    "46162a213f60f915df76c60b0412f45a021e1e7e": "Ybodychange",
    "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0": "Ybodychange",
    "5a8ea48c37da39f4f4879dabce3b640c9294dd73": "Ybodychange",
    "34605c9594770b204b28a809d8dbc0dae11ff0d1": "Ybodychange",
    "d263653ae22217439d1740c936d1c78e1644d73e": "Ymultichange(Yparameterchange,Ybodychange)",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15275. HttpFS: Response of Create was not correct with noredirect and data are true. Contributed by hemanthboyina.\n",
      "commitDate": "20/04/20 7:09 AM",
      "commitName": "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "28/02/20 5:30 PM",
      "commitNameOld": "9a3a28018af71806412d9a2d3ea6b63f3d6737dd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,263 +1,261 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n-        if (!hasData) {\n-          URI redirectURL \u003d createUploadRedirectionURL(\n-              uriInfo, HttpFSFileSystem.Operation.CREATE);\n-          Boolean noRedirect \u003d params.get(\n-              NoRedirectParam.NAME, NoRedirectParam.class);\n-          if (noRedirect) {\n+        URI redirectURL \u003d createUploadRedirectionURL(uriInfo,\n+            HttpFSFileSystem.Operation.CREATE);\n+        Boolean noRedirect \u003d\n+            params.get(NoRedirectParam.NAME, NoRedirectParam.class);\n+        if (noRedirect) {\n             final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n             response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n-          } else {\n-            response \u003d Response.temporaryRedirect(redirectURL).build();\n-          }\n-        } else {\n+        } else if (hasData) {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n               UnmaskedPermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                 replication, blockSize, unmaskedPermission);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n               \"[{}] permission [{}] override [{}] \"+\n               \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n               new Object[]{path, permission,  override, replication, blockSize,\n                   unmaskedPermission});\n           final String js \u003d JsonUtil.toJsonString(\n               \"Location\", uriInfo.getAbsolutePath());\n           response \u003d Response.created(uriInfo.getAbsolutePath())\n               .type(MediaType.APPLICATION_JSON).entity(js).build();\n+        } else {\n+          response \u003d Response.temporaryRedirect(redirectURL).build();\n         }\n         break;\n       }\n       case ALLOWSNAPSHOT: {\n         FSOperations.FSAllowSnapshot command \u003d\n             new FSOperations.FSAllowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case DISALLOWSNAPSHOT: {\n         FSOperations.FSDisallowSnapshot command \u003d\n             new FSOperations.FSDisallowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case CREATESNAPSHOT: {\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSCreateSnapshot command \u003d\n             new FSOperations.FSCreateSnapshot(path, snapshotName);\n         String json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case RENAMESNAPSHOT: {\n         String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n             OldSnapshotNameParam.class);\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSRenameSnapshot command \u003d\n                 new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                     snapshotName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n             oldSnapshotName, snapshotName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n             UnmaskedPermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n             new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n             path, permission, unmaskedPermission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETECPOLICY: {\n         String policyName \u003d params.get(ECPolicyParam.NAME, ECPolicyParam.class);\n         FSOperations.FSSetErasureCodingPolicy command \u003d\n             new FSOperations.FSSetErasureCodingPolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n     }\n     case SATISFYSTORAGEPOLICY: {\n       FSOperations.FSSatisyStoragePolicy command \u003d\n           new FSOperations.FSSatisyStoragePolicy(path);\n       fsExecute(user, command);\n       AUDIT_LOG.info(\"satisfy storage policy for [{}]\", path);\n       response \u003d Response.ok().build();\n       break;\n     }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        URI redirectURL \u003d createUploadRedirectionURL(uriInfo,\n            HttpFSFileSystem.Operation.CREATE);\n        Boolean noRedirect \u003d\n            params.get(NoRedirectParam.NAME, NoRedirectParam.class);\n        if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n        } else if (hasData) {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n              UnmaskedPermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                replication, blockSize, unmaskedPermission);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n              \"[{}] permission [{}] override [{}] \"+\n              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n              new Object[]{path, permission,  override, replication, blockSize,\n                  unmaskedPermission});\n          final String js \u003d JsonUtil.toJsonString(\n              \"Location\", uriInfo.getAbsolutePath());\n          response \u003d Response.created(uriInfo.getAbsolutePath())\n              .type(MediaType.APPLICATION_JSON).entity(js).build();\n        } else {\n          response \u003d Response.temporaryRedirect(redirectURL).build();\n        }\n        break;\n      }\n      case ALLOWSNAPSHOT: {\n        FSOperations.FSAllowSnapshot command \u003d\n            new FSOperations.FSAllowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case DISALLOWSNAPSHOT: {\n        FSOperations.FSDisallowSnapshot command \u003d\n            new FSOperations.FSDisallowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n            UnmaskedPermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n            path, permission, unmaskedPermission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETECPOLICY: {\n        String policyName \u003d params.get(ECPolicyParam.NAME, ECPolicyParam.class);\n        FSOperations.FSSetErasureCodingPolicy command \u003d\n            new FSOperations.FSSetErasureCodingPolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n    }\n    case SATISFYSTORAGEPOLICY: {\n      FSOperations.FSSatisyStoragePolicy command \u003d\n          new FSOperations.FSSatisyStoragePolicy(path);\n      fsExecute(user, command);\n      AUDIT_LOG.info(\"satisfy storage policy for [{}]\", path);\n      response \u003d Response.ok().build();\n      break;\n    }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "9a3a28018af71806412d9a2d3ea6b63f3d6737dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15190. HttpFS: Add Support for Storage Policy Satisfier. Contributed by hemanthboyina.\n",
      "commitDate": "28/02/20 5:30 PM",
      "commitName": "9a3a28018af71806412d9a2d3ea6b63f3d6737dd",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "10/01/20 12:53 AM",
      "commitNameOld": "9da294a140a919d9ba648637d09340bccfd5edd6",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 49.69,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,255 +1,263 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           URI redirectURL \u003d createUploadRedirectionURL(\n               uriInfo, HttpFSFileSystem.Operation.CREATE);\n           Boolean noRedirect \u003d params.get(\n               NoRedirectParam.NAME, NoRedirectParam.class);\n           if (noRedirect) {\n             final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n             response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n           } else {\n             response \u003d Response.temporaryRedirect(redirectURL).build();\n           }\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n               UnmaskedPermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                 replication, blockSize, unmaskedPermission);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n               \"[{}] permission [{}] override [{}] \"+\n               \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n               new Object[]{path, permission,  override, replication, blockSize,\n                   unmaskedPermission});\n           final String js \u003d JsonUtil.toJsonString(\n               \"Location\", uriInfo.getAbsolutePath());\n           response \u003d Response.created(uriInfo.getAbsolutePath())\n               .type(MediaType.APPLICATION_JSON).entity(js).build();\n         }\n         break;\n       }\n       case ALLOWSNAPSHOT: {\n         FSOperations.FSAllowSnapshot command \u003d\n             new FSOperations.FSAllowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case DISALLOWSNAPSHOT: {\n         FSOperations.FSDisallowSnapshot command \u003d\n             new FSOperations.FSDisallowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case CREATESNAPSHOT: {\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSCreateSnapshot command \u003d\n             new FSOperations.FSCreateSnapshot(path, snapshotName);\n         String json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case RENAMESNAPSHOT: {\n         String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n             OldSnapshotNameParam.class);\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSRenameSnapshot command \u003d\n                 new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                     snapshotName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n             oldSnapshotName, snapshotName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n             UnmaskedPermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n             new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n             path, permission, unmaskedPermission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETECPOLICY: {\n         String policyName \u003d params.get(ECPolicyParam.NAME, ECPolicyParam.class);\n         FSOperations.FSSetErasureCodingPolicy command \u003d\n             new FSOperations.FSSetErasureCodingPolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n-      }\n+    }\n+    case SATISFYSTORAGEPOLICY: {\n+      FSOperations.FSSatisyStoragePolicy command \u003d\n+          new FSOperations.FSSatisyStoragePolicy(path);\n+      fsExecute(user, command);\n+      AUDIT_LOG.info(\"satisfy storage policy for [{}]\", path);\n+      response \u003d Response.ok().build();\n+      break;\n+    }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          URI redirectURL \u003d createUploadRedirectionURL(\n              uriInfo, HttpFSFileSystem.Operation.CREATE);\n          Boolean noRedirect \u003d params.get(\n              NoRedirectParam.NAME, NoRedirectParam.class);\n          if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n          } else {\n            response \u003d Response.temporaryRedirect(redirectURL).build();\n          }\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n              UnmaskedPermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                replication, blockSize, unmaskedPermission);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n              \"[{}] permission [{}] override [{}] \"+\n              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n              new Object[]{path, permission,  override, replication, blockSize,\n                  unmaskedPermission});\n          final String js \u003d JsonUtil.toJsonString(\n              \"Location\", uriInfo.getAbsolutePath());\n          response \u003d Response.created(uriInfo.getAbsolutePath())\n              .type(MediaType.APPLICATION_JSON).entity(js).build();\n        }\n        break;\n      }\n      case ALLOWSNAPSHOT: {\n        FSOperations.FSAllowSnapshot command \u003d\n            new FSOperations.FSAllowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case DISALLOWSNAPSHOT: {\n        FSOperations.FSDisallowSnapshot command \u003d\n            new FSOperations.FSDisallowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n            UnmaskedPermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n            path, permission, unmaskedPermission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETECPOLICY: {\n        String policyName \u003d params.get(ECPolicyParam.NAME, ECPolicyParam.class);\n        FSOperations.FSSetErasureCodingPolicy command \u003d\n            new FSOperations.FSSetErasureCodingPolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n    }\n    case SATISFYSTORAGEPOLICY: {\n      FSOperations.FSSatisyStoragePolicy command \u003d\n          new FSOperations.FSSatisyStoragePolicy(path);\n      fsExecute(user, command);\n      AUDIT_LOG.info(\"satisfy storage policy for [{}]\", path);\n      response \u003d Response.ok().build();\n      break;\n    }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "59aac002834aaeb6475faad4c894b8c764957f68": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15066. HttpFS: Implement setErasureCodingPolicy , unsetErasureCodingPolicy , getErasureCodingPolicy. Contributed by hemanthboyina.\n",
      "commitDate": "06/01/20 6:10 PM",
      "commitName": "59aac002834aaeb6475faad4c894b8c764957f68",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "02/12/19 4:38 PM",
      "commitNameOld": "4ede8bce28aadc62007ad65dc6d44be550632b5f",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,246 +1,255 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           URI redirectURL \u003d createUploadRedirectionURL(\n               uriInfo, HttpFSFileSystem.Operation.CREATE);\n           Boolean noRedirect \u003d params.get(\n               NoRedirectParam.NAME, NoRedirectParam.class);\n           if (noRedirect) {\n             final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n             response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n           } else {\n             response \u003d Response.temporaryRedirect(redirectURL).build();\n           }\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n               UnmaskedPermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                 replication, blockSize, unmaskedPermission);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n               \"[{}] permission [{}] override [{}] \"+\n               \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n               new Object[]{path, permission,  override, replication, blockSize,\n                   unmaskedPermission});\n           final String js \u003d JsonUtil.toJsonString(\n               \"Location\", uriInfo.getAbsolutePath());\n           response \u003d Response.created(uriInfo.getAbsolutePath())\n               .type(MediaType.APPLICATION_JSON).entity(js).build();\n         }\n         break;\n       }\n       case ALLOWSNAPSHOT: {\n         FSOperations.FSAllowSnapshot command \u003d\n             new FSOperations.FSAllowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case DISALLOWSNAPSHOT: {\n         FSOperations.FSDisallowSnapshot command \u003d\n             new FSOperations.FSDisallowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case CREATESNAPSHOT: {\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSCreateSnapshot command \u003d\n             new FSOperations.FSCreateSnapshot(path, snapshotName);\n         String json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case RENAMESNAPSHOT: {\n         String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n             OldSnapshotNameParam.class);\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSRenameSnapshot command \u003d\n                 new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                     snapshotName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n             oldSnapshotName, snapshotName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n             UnmaskedPermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n             new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n             path, permission, unmaskedPermission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n+      case SETECPOLICY: {\n+        String policyName \u003d params.get(ECPolicyParam.NAME, ECPolicyParam.class);\n+        FSOperations.FSSetErasureCodingPolicy command \u003d\n+            new FSOperations.FSSetErasureCodingPolicy(path, policyName);\n+        fsExecute(user, command);\n+        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          URI redirectURL \u003d createUploadRedirectionURL(\n              uriInfo, HttpFSFileSystem.Operation.CREATE);\n          Boolean noRedirect \u003d params.get(\n              NoRedirectParam.NAME, NoRedirectParam.class);\n          if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n          } else {\n            response \u003d Response.temporaryRedirect(redirectURL).build();\n          }\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n              UnmaskedPermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                replication, blockSize, unmaskedPermission);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n              \"[{}] permission [{}] override [{}] \"+\n              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n              new Object[]{path, permission,  override, replication, blockSize,\n                  unmaskedPermission});\n          final String js \u003d JsonUtil.toJsonString(\n              \"Location\", uriInfo.getAbsolutePath());\n          response \u003d Response.created(uriInfo.getAbsolutePath())\n              .type(MediaType.APPLICATION_JSON).entity(js).build();\n        }\n        break;\n      }\n      case ALLOWSNAPSHOT: {\n        FSOperations.FSAllowSnapshot command \u003d\n            new FSOperations.FSAllowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case DISALLOWSNAPSHOT: {\n        FSOperations.FSDisallowSnapshot command \u003d\n            new FSOperations.FSDisallowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n            UnmaskedPermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n            path, permission, unmaskedPermission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETECPOLICY: {\n        String policyName \u003d params.get(ECPolicyParam.NAME, ECPolicyParam.class);\n        FSOperations.FSSetErasureCodingPolicy command \u003d\n            new FSOperations.FSSetErasureCodingPolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "ad5256e44dffba2e9994f2db27d9ae71eab690e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14063. Support noredirect param for CREATE/APPEND/OPEN/GETFILECHECKSUM in HttpFS. Contributed by Íñigo Goiri.\n",
      "commitDate": "16/11/18 9:12 AM",
      "commitName": "ad5256e44dffba2e9994f2db27d9ae71eab690e8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "11/10/18 3:01 PM",
      "commitNameOld": "6dcfef79afe97eda6d09fe2567bb4d4074223141",
      "commitAuthorOld": "Siyao Meng",
      "daysBetweenCommits": 35.8,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,236 +1,246 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n-          response \u003d Response.temporaryRedirect(\n-            createUploadRedirectionURL(uriInfo,\n-              HttpFSFileSystem.Operation.CREATE)).build();\n+          URI redirectURL \u003d createUploadRedirectionURL(\n+              uriInfo, HttpFSFileSystem.Operation.CREATE);\n+          Boolean noRedirect \u003d params.get(\n+              NoRedirectParam.NAME, NoRedirectParam.class);\n+          if (noRedirect) {\n+            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n+            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+          } else {\n+            response \u003d Response.temporaryRedirect(redirectURL).build();\n+          }\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n               UnmaskedPermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                 replication, blockSize, unmaskedPermission);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n               \"[{}] permission [{}] override [{}] \"+\n               \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n               new Object[]{path, permission,  override, replication, blockSize,\n                   unmaskedPermission});\n-          response \u003d Response.status(Response.Status.CREATED).build();\n+          final String js \u003d JsonUtil.toJsonString(\n+              \"Location\", uriInfo.getAbsolutePath());\n+          response \u003d Response.created(uriInfo.getAbsolutePath())\n+              .type(MediaType.APPLICATION_JSON).entity(js).build();\n         }\n         break;\n       }\n       case ALLOWSNAPSHOT: {\n         FSOperations.FSAllowSnapshot command \u003d\n             new FSOperations.FSAllowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case DISALLOWSNAPSHOT: {\n         FSOperations.FSDisallowSnapshot command \u003d\n             new FSOperations.FSDisallowSnapshot(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case CREATESNAPSHOT: {\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSCreateSnapshot command \u003d\n             new FSOperations.FSCreateSnapshot(path, snapshotName);\n         String json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case RENAMESNAPSHOT: {\n         String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n             OldSnapshotNameParam.class);\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSRenameSnapshot command \u003d\n                 new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                     snapshotName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n             oldSnapshotName, snapshotName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n             UnmaskedPermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n             new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n             path, permission, unmaskedPermission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          URI redirectURL \u003d createUploadRedirectionURL(\n              uriInfo, HttpFSFileSystem.Operation.CREATE);\n          Boolean noRedirect \u003d params.get(\n              NoRedirectParam.NAME, NoRedirectParam.class);\n          if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n          } else {\n            response \u003d Response.temporaryRedirect(redirectURL).build();\n          }\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n              UnmaskedPermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                replication, blockSize, unmaskedPermission);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n              \"[{}] permission [{}] override [{}] \"+\n              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n              new Object[]{path, permission,  override, replication, blockSize,\n                  unmaskedPermission});\n          final String js \u003d JsonUtil.toJsonString(\n              \"Location\", uriInfo.getAbsolutePath());\n          response \u003d Response.created(uriInfo.getAbsolutePath())\n              .type(MediaType.APPLICATION_JSON).entity(js).build();\n        }\n        break;\n      }\n      case ALLOWSNAPSHOT: {\n        FSOperations.FSAllowSnapshot command \u003d\n            new FSOperations.FSAllowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case DISALLOWSNAPSHOT: {\n        FSOperations.FSDisallowSnapshot command \u003d\n            new FSOperations.FSDisallowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n            UnmaskedPermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n            path, permission, unmaskedPermission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "8de5c923b432a670f6822189e7131d2df7b5a336": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13876. HttpFS: Implement ALLOWSNAPSHOT, DISALLOWSNAPSHOT.  Contributed by Siyao Meng.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "24/09/18 10:40 AM",
      "commitName": "8de5c923b432a670f6822189e7131d2df7b5a336",
      "commitAuthor": "Siyao Meng",
      "commitDateOld": "06/03/18 9:57 AM",
      "commitNameOld": "9276ef066586a704f6898b670515029b5e3a20eb",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 201.99,
      "commitsBetweenForRepo": 2166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,220 +1,236 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n               UnmaskedPermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                 replication, blockSize, unmaskedPermission);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n               \"[{}] permission [{}] override [{}] \"+\n               \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n               new Object[]{path, permission,  override, replication, blockSize,\n                   unmaskedPermission});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n+      case ALLOWSNAPSHOT: {\n+        FSOperations.FSAllowSnapshot command \u003d\n+            new FSOperations.FSAllowSnapshot(path);\n+        fsExecute(user, command);\n+        AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case DISALLOWSNAPSHOT: {\n+        FSOperations.FSDisallowSnapshot command \u003d\n+            new FSOperations.FSDisallowSnapshot(path);\n+        fsExecute(user, command);\n+        AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       case CREATESNAPSHOT: {\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSCreateSnapshot command \u003d\n             new FSOperations.FSCreateSnapshot(path, snapshotName);\n         String json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case RENAMESNAPSHOT: {\n         String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n             OldSnapshotNameParam.class);\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSRenameSnapshot command \u003d\n                 new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                     snapshotName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n             oldSnapshotName, snapshotName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n             UnmaskedPermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n             new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n             path, permission, unmaskedPermission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n              UnmaskedPermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                replication, blockSize, unmaskedPermission);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n              \"[{}] permission [{}] override [{}] \"+\n              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n              new Object[]{path, permission,  override, replication, blockSize,\n                  unmaskedPermission});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case ALLOWSNAPSHOT: {\n        FSOperations.FSAllowSnapshot command \u003d\n            new FSOperations.FSAllowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] allowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case DISALLOWSNAPSHOT: {\n        FSOperations.FSDisallowSnapshot command \u003d\n            new FSOperations.FSDisallowSnapshot(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] disallowed snapshot\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n            UnmaskedPermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n            path, permission, unmaskedPermission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "9276ef066586a704f6898b670515029b5e3a20eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13170. Port webhdfs unmaskedpermission parameter to HTTPFS. Contributed by Stephen O\u0027Donnell.\n",
      "commitDate": "06/03/18 9:57 AM",
      "commitName": "9276ef066586a704f6898b670515029b5e3a20eb",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "14/09/17 3:02 PM",
      "commitNameOld": "2f867115a819327a50cf9c8caa56e0e5a85cabb9",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 172.83,
      "commitsBetweenForRepo": 1178,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,213 +1,220 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n+          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n+              UnmaskedPermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n-                                      replication, blockSize);\n+                replication, blockSize, unmaskedPermission);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n-            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n-            new Object[]{path, permission, override, replication, blockSize});\n+              \"[{}] permission [{}] override [{}] \"+\n+              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n+              new Object[]{path, permission,  override, replication, blockSize,\n+                  unmaskedPermission});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case CREATESNAPSHOT: {\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSCreateSnapshot command \u003d\n             new FSOperations.FSCreateSnapshot(path, snapshotName);\n         String json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case RENAMESNAPSHOT: {\n         String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n             OldSnapshotNameParam.class);\n         String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n             SnapshotNameParam.class);\n         FSOperations.FSRenameSnapshot command \u003d\n                 new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                     snapshotName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n             oldSnapshotName, snapshotName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n+        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n+            UnmaskedPermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n-          new FSOperations.FSMkdirs(path, permission);\n+            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n         JSONObject json \u003d fsExecute(user, command);\n-        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n+        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n+            path, permission, unmaskedPermission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n              UnmaskedPermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                replication, blockSize, unmaskedPermission);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n              \"[{}] permission [{}] override [{}] \"+\n              \"replication [{}] blockSize [{}] unmaskedpermission [{}]\",\n              new Object[]{path, permission,  override, replication, blockSize,\n                  unmaskedPermission});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        Short unmaskedPermission \u003d params.get(UnmaskedPermissionParam.NAME,\n            UnmaskedPermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n            new FSOperations.FSMkdirs(path, permission, unmaskedPermission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}] unmaskedpermission [{}]\",\n            path, permission, unmaskedPermission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "8a4bff02c1534c6bf529726f2bbe414ac4c172e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12117. HttpFS does not seem to support SNAPSHOT related methods for WebHDFS REST Interface. Contributed by Wellington Chevreuil.\n",
      "commitDate": "08/08/17 11:58 PM",
      "commitName": "8a4bff02c1534c6bf529726f2bbe414ac4c172e8",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "12/07/17 2:15 PM",
      "commitNameOld": "931a49800ef05ee0a6fdc143be1799abb228735d",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 27.41,
      "commitsBetweenForRepo": 215,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,189 +1,213 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n+      case CREATESNAPSHOT: {\n+        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n+            SnapshotNameParam.class);\n+        FSOperations.FSCreateSnapshot command \u003d\n+            new FSOperations.FSCreateSnapshot(path, snapshotName);\n+        String json \u003d fsExecute(user, command);\n+        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n+        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n+        break;\n+      }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n+      case RENAMESNAPSHOT: {\n+        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n+            OldSnapshotNameParam.class);\n+        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n+            SnapshotNameParam.class);\n+        FSOperations.FSRenameSnapshot command \u003d\n+                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n+                    snapshotName);\n+        fsExecute(user, command);\n+        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n+            oldSnapshotName, snapshotName);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETSTORAGEPOLICY: {\n         String policyName \u003d params.get(PolicyNameParam.NAME,\n             PolicyNameParam.class);\n         FSOperations.FSSetStoragePolicy command \u003d\n             new FSOperations.FSSetStoragePolicy(path, policyName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case CREATESNAPSHOT: {\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSCreateSnapshot command \u003d\n            new FSOperations.FSCreateSnapshot(path, snapshotName);\n        String json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] snapshot created as [{}]\", path, snapshotName);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENAMESNAPSHOT: {\n        String oldSnapshotName \u003d params.get(OldSnapshotNameParam.NAME,\n            OldSnapshotNameParam.class);\n        String snapshotName \u003d params.get(SnapshotNameParam.NAME,\n            SnapshotNameParam.class);\n        FSOperations.FSRenameSnapshot command \u003d\n                new FSOperations.FSRenameSnapshot(path, oldSnapshotName,\n                    snapshotName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] renamed snapshot [{}] to [{}]\", path,\n            oldSnapshotName, snapshotName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "07/12/16 3:52 PM",
      "commitName": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/11/16 6:06 PM",
      "commitNameOld": "d8bab3dcb693b2773ede9a6e4f71ae85ee056f79",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 32.95,
      "commitsBetweenForRepo": 236,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,179 +1,189 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n+      case SETSTORAGEPOLICY: {\n+        String policyName \u003d params.get(PolicyNameParam.NAME,\n+            PolicyNameParam.class);\n+        FSOperations.FSSetStoragePolicy command \u003d\n+            new FSOperations.FSSetStoragePolicy(path, policyName);\n+        fsExecute(user, command);\n+        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETSTORAGEPOLICY: {\n        String policyName \u003d params.get(PolicyNameParam.NAME,\n            PolicyNameParam.class);\n        FSOperations.FSSetStoragePolicy command \u003d\n            new FSOperations.FSSetStoragePolicy(path, policyName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to policy [{}]\", path, policyName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7232. Populate hostname in httpfs audit log (Zoran Dimitrijevic via aw)\n",
      "commitDate": "23/10/14 2:06 PM",
      "commitName": "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
      "commitAuthor": "Allen Wittenauer",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7232. Populate hostname in httpfs audit log (Zoran Dimitrijevic via aw)\n",
          "commitDate": "23/10/14 2:06 PM",
          "commitName": "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "13/08/14 1:27 PM",
          "commitNameOld": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 71.03,
          "commitsBetweenForRepo": 700,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,177 +1,179 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n-                       @Context Parameters params)\n+                       @Context Parameters params,\n+                       @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {
            "oldValue": "[is-InputStream, uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]",
            "newValue": "[is-InputStream, uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context), request-HttpServletRequest(annotations-@Context)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7232. Populate hostname in httpfs audit log (Zoran Dimitrijevic via aw)\n",
          "commitDate": "23/10/14 2:06 PM",
          "commitName": "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "13/08/14 1:27 PM",
          "commitNameOld": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 71.03,
          "commitsBetweenForRepo": 700,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,177 +1,179 @@\n   public Response put(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n-                       @Context Parameters params)\n+                       @Context Parameters params,\n+                       @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/14 1:27 PM",
      "commitName": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/08/14 1:27 PM",
          "commitName": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/14 8:59 AM",
          "commitNameOld": "46162a213f60f915df76c60b0412f45a021e1e7e",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 50.19,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,178 +1,177 @@\n   public Response put(InputStream is,\n-                       @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n-    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n-          fsExecute(user, doAs, command);\n+          fsExecute(user, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n-        JSONObject json \u003d fsExecute(user, doAs, command);\n+        JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n-        JSONObject json \u003d fsExecute(user, doAs, command);\n+        JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n-        JSONObject json \u003d fsExecute(user, doAs, command);\n+        JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {
            "oldValue": "[is-InputStream, user-Principal(annotations-@Context), uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]",
            "newValue": "[is-InputStream, uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/08/14 1:27 PM",
          "commitName": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/14 8:59 AM",
          "commitNameOld": "46162a213f60f915df76c60b0412f45a021e1e7e",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 50.19,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,178 +1,177 @@\n   public Response put(InputStream is,\n-                       @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n-    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n-          fsExecute(user, doAs, command);\n+          fsExecute(user, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case SETXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, \n             XAttrNameParam.class);\n         String xattrValue \u003d params.get(XAttrValueParam.NAME, \n             XAttrValueParam.class);\n         EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n             XAttrSetFlagParam.class);\n \n         FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n             path, xattrName, xattrValue, flag);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEXATTR: {\n         String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n         FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n             path, xattrName);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n-        JSONObject json \u003d fsExecute(user, doAs, command);\n+        JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n-        JSONObject json \u003d fsExecute(user, doAs, command);\n+        JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n-        JSONObject json \u003d fsExecute(user, doAs, command);\n+        JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n-        fsExecute(user, doAs, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response put(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "46162a213f60f915df76c60b0412f45a021e1e7e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6430. HTTPFS - Implement XAttr support. (Yi Liu via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:59 AM",
      "commitName": "46162a213f60f915df76c60b0412f45a021e1e7e",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "11/06/14 3:35 PM",
      "commitNameOld": "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 12.73,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,154 +1,178 @@\n   public Response put(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n+      case SETXATTR: {\n+        String xattrName \u003d params.get(XAttrNameParam.NAME, \n+            XAttrNameParam.class);\n+        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n+            XAttrValueParam.class);\n+        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n+            XAttrSetFlagParam.class);\n+\n+        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n+            path, xattrName, xattrValue, flag);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case REMOVEXATTR: {\n+        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n+        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n+            path, xattrName);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETACL: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSSetAcl command \u003d\n                 new FSOperations.FSSetAcl(path, aclSpec);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACL: {\n         FSOperations.FSRemoveAcl command \u003d\n                 new FSOperations.FSRemoveAcl(path);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] removed acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case MODIFYACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSModifyAclEntries command \u003d\n                 new FSOperations.FSModifyAclEntries(path, aclSpec);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEACLENTRIES: {\n         String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                 AclPermissionParam.class);\n         FSOperations.FSRemoveAclEntries command \u003d\n                 new FSOperations.FSRemoveAclEntries(path, aclSpec);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case REMOVEDEFAULTACL: {\n         FSOperations.FSRemoveDefaultAcl command \u003d\n                 new FSOperations.FSRemoveDefaultAcl(path);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] remove default acl\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case SETXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, \n            XAttrNameParam.class);\n        String xattrValue \u003d params.get(XAttrValueParam.NAME, \n            XAttrValueParam.class);\n        EnumSet\u003cXAttrSetFlag\u003e flag \u003d params.get(XAttrSetFlagParam.NAME, \n            XAttrSetFlagParam.class);\n\n        FSOperations.FSSetXAttr command \u003d new FSOperations.FSSetXAttr(\n            path, xattrName, xattrValue, flag);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEXATTR: {\n        String xattrName \u003d params.get(XAttrNameParam.NAME, XAttrNameParam.class);\n        FSOperations.FSRemoveXAttr command \u003d new FSOperations.FSRemoveXAttr(\n            path, xattrName);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] removed xAttr [{}]\", path, xattrName);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6379. HTTPFS - Implement ACLs support. (yoderme via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/14 3:35 PM",
      "commitName": "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/05/13 12:54 PM",
      "commitNameOld": "5b1b197d39f6e65d6de63ecf5e9f6d7f5a13d8a1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 378.11,
      "commitsBetweenForRepo": 2514,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,154 @@\n   public Response put(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n+      case SETACL: {\n+        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n+                AclPermissionParam.class);\n+        FSOperations.FSSetAcl command \u003d\n+                new FSOperations.FSSetAcl(path, aclSpec);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case REMOVEACL: {\n+        FSOperations.FSRemoveAcl command \u003d\n+                new FSOperations.FSRemoveAcl(path);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] removed acl\", path);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case MODIFYACLENTRIES: {\n+        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n+                AclPermissionParam.class);\n+        FSOperations.FSModifyAclEntries command \u003d\n+                new FSOperations.FSModifyAclEntries(path, aclSpec);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case REMOVEACLENTRIES: {\n+        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n+                AclPermissionParam.class);\n+        FSOperations.FSRemoveAclEntries command \u003d\n+                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case REMOVEDEFAULTACL: {\n+        FSOperations.FSRemoveDefaultAcl command \u003d\n+                new FSOperations.FSRemoveDefaultAcl(path);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETACL: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSSetAcl command \u003d\n                new FSOperations.FSSetAcl(path, aclSpec);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to acl [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACL: {\n        FSOperations.FSRemoveAcl command \u003d\n                new FSOperations.FSRemoveAcl(path);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] removed acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case MODIFYACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSModifyAclEntries command \u003d\n                new FSOperations.FSModifyAclEntries(path, aclSpec);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] modify acl entry with [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEACLENTRIES: {\n        String aclSpec \u003d params.get(AclPermissionParam.NAME,\n                AclPermissionParam.class);\n        FSOperations.FSRemoveAclEntries command \u003d\n                new FSOperations.FSRemoveAclEntries(path, aclSpec);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] remove acl entry [{}]\", path, aclSpec);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case REMOVEDEFAULTACL: {\n        FSOperations.FSRemoveDefaultAcl command \u003d\n                new FSOperations.FSRemoveDefaultAcl(path);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] remove default acl\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "5a8ea48c37da39f4f4879dabce3b640c9294dd73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3580. incompatible types; no instance(s) of type variable(s) V exist so that V conforms to boolean compiling HttpFSServer.java with OpenJDK (adi2 via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355593 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/12 3:58 PM",
      "commitName": "5a8ea48c37da39f4f4879dabce3b640c9294dd73",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/06/12 1:59 PM",
      "commitNameOld": "34605c9594770b204b28a809d8dbc0dae11ff0d1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,108 @@\n   public Response put(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n-        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n+        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n           Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n-          boolean override \u003d params.get(OverwriteParam.NAME,\n+          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n-          short replication \u003d params.get(ReplicationParam.NAME,\n+          Short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n-          long blockSize \u003d params.get(BlockSizeParam.NAME,\n+          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case MKDIRS: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n         Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n-        short replication \u003d params.get(ReplicationParam.NAME,\n+        Short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n-        long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n+        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n-        long accessTime \u003d params.get(AccessTimeParam.NAME,\n+        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case CREATE: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          Boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          Short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          Long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        Short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        Long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        Long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "34605c9594770b204b28a809d8dbc0dae11ff0d1": {
      "type": "Ybodychange",
      "commitMessage": " HDS-3491. HttpFs does not set permissions correctly (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355556 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/12 1:59 PM",
      "commitName": "34605c9594770b204b28a809d8dbc0dae11ff0d1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "27/06/12 9:06 AM",
      "commitNameOld": "d263653ae22217439d1740c936d1c78e1644d73e",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 2.2,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,108 @@\n   public Response put(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n         boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n-          String permission \u003d params.get(PermissionParam.NAME,\n+          Short permission \u003d params.get(PermissionParam.NAME,\n                                          PermissionParam.class);\n           boolean override \u003d params.get(OverwriteParam.NAME,\n                                         OverwriteParam.class);\n           short replication \u003d params.get(ReplicationParam.NAME,\n                                          ReplicationParam.class);\n           long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                       BlockSizeParam.class);\n           FSOperations.FSCreate command \u003d\n             new FSOperations.FSCreate(is, path, permission, override,\n                                       replication, blockSize);\n           fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\n             \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n             new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case MKDIRS: {\n-        String permission \u003d params.get(PermissionParam.NAME,\n+        Short permission \u003d params.get(PermissionParam.NAME,\n                                        PermissionParam.class);\n         FSOperations.FSMkdirs command \u003d\n           new FSOperations.FSMkdirs(path, permission);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n         String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n         FSOperations.FSRename command \u003d\n           new FSOperations.FSRename(path, toPath);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n         String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n         String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n         FSOperations.FSSetOwner command \u003d\n           new FSOperations.FSSetOwner(path, owner, group);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n-        String permission \u003d params.get(PermissionParam.NAME,\n-                                       PermissionParam.class);\n+        Short permission \u003d params.get(PermissionParam.NAME,\n+                                      PermissionParam.class);\n         FSOperations.FSSetPermission command \u003d\n           new FSOperations.FSSetPermission(path, permission);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n         short replication \u003d params.get(ReplicationParam.NAME,\n                                        ReplicationParam.class);\n         FSOperations.FSSetReplication command \u003d\n           new FSOperations.FSSetReplication(path, replication);\n         JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n         long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                        ModifiedTimeParam.class);\n         long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                      AccessTimeParam.class);\n         FSOperations.FSSetTimes command \u003d\n           new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n         fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                        modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case CREATE: {\n        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          Short permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case MKDIRS: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        Short permission \u003d params.get(PermissionParam.NAME,\n                                      PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "d263653ae22217439d1740c936d1c78e1644d73e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/12 9:06 AM",
      "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/06/12 9:06 AM",
          "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/05/12 9:51 AM",
          "commitNameOld": "e937068c0bc68fc56e5c75ccc6b91fd164acf30d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 33.97,
          "commitsBetweenForRepo": 136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,97 +1,108 @@\n   public Response put(InputStream is,\n-                      @Context Principal user,\n-                      @Context UriInfo uriInfo,\n-                      @PathParam(\"path\") FsPathParam path,\n-                      @QueryParam(PutOpParam.NAME) PutOpParam op,\n-                      @QueryParam(ToPathParam.NAME) @DefaultValue(ToPathParam.DEFAULT) ToPathParam toPath,\n-                      @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) OwnerParam owner,\n-                      @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) GroupParam group,\n-                      @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) OverwriteParam override,\n-                      @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) BlockSizeParam blockSize,\n-                      @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)\n-                      PermissionParam permission,\n-                      @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT)\n-                      ReplicationParam replication,\n-                      @QueryParam(ModifiedTimeParam.NAME) @DefaultValue(ModifiedTimeParam.DEFAULT)\n-                      ModifiedTimeParam modifiedTime,\n-                      @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT)\n-                      AccessTimeParam accessTime,\n-                      @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n-                      @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n+                       @Context Principal user,\n+                       @Context UriInfo uriInfo,\n+                       @PathParam(\"path\") String path,\n+                       @QueryParam(OperationParam.NAME) OperationParam op,\n+                       @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n-    Response response \u003d null;\n-    if (op \u003d\u003d null) {\n-      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PutOpParam.NAME));\n-    }\n-    path.makeAbsolute();\n+    Response response;\n+    path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n-        if (!hasData.value()) {\n+        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n+        if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n-            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PutOpValues.CREATE)).build();\n+            createUploadRedirectionURL(uriInfo,\n+              HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n-          FSOperations.FSCreate\n-            command \u003d new FSOperations.FSCreate(is, path.value(), permission.value(), override.value(),\n-                                                replication.value(), blockSize.value());\n-          fsExecute(user, doAs.value(), command);\n-          AUDIT_LOG.info(\"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n-                         new Object[]{path, permission, override, replication, blockSize});\n+          String permission \u003d params.get(PermissionParam.NAME,\n+                                         PermissionParam.class);\n+          boolean override \u003d params.get(OverwriteParam.NAME,\n+                                        OverwriteParam.class);\n+          short replication \u003d params.get(ReplicationParam.NAME,\n+                                         ReplicationParam.class);\n+          long blockSize \u003d params.get(BlockSizeParam.NAME,\n+                                      BlockSizeParam.class);\n+          FSOperations.FSCreate command \u003d\n+            new FSOperations.FSCreate(is, path, permission, override,\n+                                      replication, blockSize);\n+          fsExecute(user, doAs, command);\n+          AUDIT_LOG.info(\n+            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n+            new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case MKDIRS: {\n-        FSOperations.FSMkdirs command \u003d new FSOperations.FSMkdirs(path.value(), permission.value());\n-        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission.value());\n+        String permission \u003d params.get(PermissionParam.NAME,\n+                                       PermissionParam.class);\n+        FSOperations.FSMkdirs command \u003d\n+          new FSOperations.FSMkdirs(path, permission);\n+        JSONObject json \u003d fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n-        FSOperations.FSRename command \u003d new FSOperations.FSRename(path.value(), toPath.value());\n-        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n+        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n+        FSOperations.FSRename command \u003d\n+          new FSOperations.FSRename(path, toPath);\n+        JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n-        FSOperations.FSSetOwner command \u003d new FSOperations.FSSetOwner(path.value(), owner.value(), group.value());\n-        fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner.value() + \":\" + group.value());\n+        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n+        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n+        FSOperations.FSSetOwner command \u003d\n+          new FSOperations.FSSetOwner(path, owner, group);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n-        FSOperations.FSSetPermission command \u003d new FSOperations.FSSetPermission(path.value(), permission.value());\n-        fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission.value());\n+        String permission \u003d params.get(PermissionParam.NAME,\n+                                       PermissionParam.class);\n+        FSOperations.FSSetPermission command \u003d\n+          new FSOperations.FSSetPermission(path, permission);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n-        FSOperations.FSSetReplication command \u003d new FSOperations.FSSetReplication(path.value(), replication.value());\n-        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication.value());\n+        short replication \u003d params.get(ReplicationParam.NAME,\n+                                       ReplicationParam.class);\n+        FSOperations.FSSetReplication command \u003d\n+          new FSOperations.FSSetReplication(path, replication);\n+        JSONObject json \u003d fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n-        FSOperations.FSSetTimes\n-          command \u003d new FSOperations.FSSetTimes(path.value(), modifiedTime.value(), accessTime.value());\n-        fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path, modifiedTime.value() + \":\" + accessTime.value());\n+        long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n+                                       ModifiedTimeParam.class);\n+        long accessTime \u003d params.get(AccessTimeParam.NAME,\n+                                     AccessTimeParam.class);\n+        FSOperations.FSSetTimes command \u003d\n+          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n+                       modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n-      case RENEWDELEGATIONTOKEN: {\n-        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n-        break;\n-      }\n-      case CANCELDELEGATIONTOKEN: {\n-        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n-        break;\n+      default: {\n+        throw new IOException(\n+          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n+                               op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response put(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case CREATE: {\n        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          String permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case MKDIRS: {\n        String permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        String permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {
            "oldValue": "[is-InputStream, user-Principal(annotations-@Context), uriInfo-UriInfo(annotations-@Context), path-FsPathParam(annotations-@PathParam(\"path\")), op-PutOpParam(annotations-@QueryParam(PutOpParam.NAME)), toPath-ToPathParam(annotations-@QueryParam(ToPathParam.NAME)-@DefaultValue(ToPathParam.DEFAULT)), owner-OwnerParam(annotations-@QueryParam(OwnerParam.NAME)-@DefaultValue(OwnerParam.DEFAULT)), group-GroupParam(annotations-@QueryParam(GroupParam.NAME)-@DefaultValue(GroupParam.DEFAULT)), override-OverwriteParam(annotations-@QueryParam(OverwriteParam.NAME)-@DefaultValue(OverwriteParam.DEFAULT)), blockSize-BlockSizeParam(annotations-@QueryParam(BlockSizeParam.NAME)-@DefaultValue(BlockSizeParam.DEFAULT)), permission-PermissionParam(annotations-@QueryParam(PermissionParam.NAME)-@DefaultValue(PermissionParam.DEFAULT)), replication-ReplicationParam(annotations-@QueryParam(ReplicationParam.NAME)-@DefaultValue(ReplicationParam.DEFAULT)), modifiedTime-ModifiedTimeParam(annotations-@QueryParam(ModifiedTimeParam.NAME)-@DefaultValue(ModifiedTimeParam.DEFAULT)), accessTime-AccessTimeParam(annotations-@QueryParam(AccessTimeParam.NAME)-@DefaultValue(AccessTimeParam.DEFAULT)), hasData-DataParam(annotations-@QueryParam(DataParam.NAME)-@DefaultValue(DataParam.DEFAULT)), doAs-DoAsParam(annotations-@QueryParam(DoAsParam.NAME)-@DefaultValue(DoAsParam.DEFAULT))]",
            "newValue": "[is-InputStream, user-Principal(annotations-@Context), uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/06/12 9:06 AM",
          "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/05/12 9:51 AM",
          "commitNameOld": "e937068c0bc68fc56e5c75ccc6b91fd164acf30d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 33.97,
          "commitsBetweenForRepo": 136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,97 +1,108 @@\n   public Response put(InputStream is,\n-                      @Context Principal user,\n-                      @Context UriInfo uriInfo,\n-                      @PathParam(\"path\") FsPathParam path,\n-                      @QueryParam(PutOpParam.NAME) PutOpParam op,\n-                      @QueryParam(ToPathParam.NAME) @DefaultValue(ToPathParam.DEFAULT) ToPathParam toPath,\n-                      @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) OwnerParam owner,\n-                      @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) GroupParam group,\n-                      @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) OverwriteParam override,\n-                      @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) BlockSizeParam blockSize,\n-                      @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)\n-                      PermissionParam permission,\n-                      @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT)\n-                      ReplicationParam replication,\n-                      @QueryParam(ModifiedTimeParam.NAME) @DefaultValue(ModifiedTimeParam.DEFAULT)\n-                      ModifiedTimeParam modifiedTime,\n-                      @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT)\n-                      AccessTimeParam accessTime,\n-                      @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n-                      @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n+                       @Context Principal user,\n+                       @Context UriInfo uriInfo,\n+                       @PathParam(\"path\") String path,\n+                       @QueryParam(OperationParam.NAME) OperationParam op,\n+                       @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n-    Response response \u003d null;\n-    if (op \u003d\u003d null) {\n-      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PutOpParam.NAME));\n-    }\n-    path.makeAbsolute();\n+    Response response;\n+    path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case CREATE: {\n-        if (!hasData.value()) {\n+        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n+        if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n-            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PutOpValues.CREATE)).build();\n+            createUploadRedirectionURL(uriInfo,\n+              HttpFSFileSystem.Operation.CREATE)).build();\n         } else {\n-          FSOperations.FSCreate\n-            command \u003d new FSOperations.FSCreate(is, path.value(), permission.value(), override.value(),\n-                                                replication.value(), blockSize.value());\n-          fsExecute(user, doAs.value(), command);\n-          AUDIT_LOG.info(\"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n-                         new Object[]{path, permission, override, replication, blockSize});\n+          String permission \u003d params.get(PermissionParam.NAME,\n+                                         PermissionParam.class);\n+          boolean override \u003d params.get(OverwriteParam.NAME,\n+                                        OverwriteParam.class);\n+          short replication \u003d params.get(ReplicationParam.NAME,\n+                                         ReplicationParam.class);\n+          long blockSize \u003d params.get(BlockSizeParam.NAME,\n+                                      BlockSizeParam.class);\n+          FSOperations.FSCreate command \u003d\n+            new FSOperations.FSCreate(is, path, permission, override,\n+                                      replication, blockSize);\n+          fsExecute(user, doAs, command);\n+          AUDIT_LOG.info(\n+            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n+            new Object[]{path, permission, override, replication, blockSize});\n           response \u003d Response.status(Response.Status.CREATED).build();\n         }\n         break;\n       }\n       case MKDIRS: {\n-        FSOperations.FSMkdirs command \u003d new FSOperations.FSMkdirs(path.value(), permission.value());\n-        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission.value());\n+        String permission \u003d params.get(PermissionParam.NAME,\n+                                       PermissionParam.class);\n+        FSOperations.FSMkdirs command \u003d\n+          new FSOperations.FSMkdirs(path, permission);\n+        JSONObject json \u003d fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case RENAME: {\n-        FSOperations.FSRename command \u003d new FSOperations.FSRename(path.value(), toPath.value());\n-        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n+        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n+        FSOperations.FSRename command \u003d\n+          new FSOperations.FSRename(path, toPath);\n+        JSONObject json \u003d fsExecute(user, doAs, command);\n         AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case SETOWNER: {\n-        FSOperations.FSSetOwner command \u003d new FSOperations.FSSetOwner(path.value(), owner.value(), group.value());\n-        fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner.value() + \":\" + group.value());\n+        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n+        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n+        FSOperations.FSSetOwner command \u003d\n+          new FSOperations.FSSetOwner(path, owner, group);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETPERMISSION: {\n-        FSOperations.FSSetPermission command \u003d new FSOperations.FSSetPermission(path.value(), permission.value());\n-        fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission.value());\n+        String permission \u003d params.get(PermissionParam.NAME,\n+                                       PermissionParam.class);\n+        FSOperations.FSSetPermission command \u003d\n+          new FSOperations.FSSetPermission(path, permission);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n         response \u003d Response.ok().build();\n         break;\n       }\n       case SETREPLICATION: {\n-        FSOperations.FSSetReplication command \u003d new FSOperations.FSSetReplication(path.value(), replication.value());\n-        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication.value());\n+        short replication \u003d params.get(ReplicationParam.NAME,\n+                                       ReplicationParam.class);\n+        FSOperations.FSSetReplication command \u003d\n+          new FSOperations.FSSetReplication(path, replication);\n+        JSONObject json \u003d fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n         response \u003d Response.ok(json).build();\n         break;\n       }\n       case SETTIMES: {\n-        FSOperations.FSSetTimes\n-          command \u003d new FSOperations.FSSetTimes(path.value(), modifiedTime.value(), accessTime.value());\n-        fsExecute(user, doAs.value(), command);\n-        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path, modifiedTime.value() + \":\" + accessTime.value());\n+        long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n+                                       ModifiedTimeParam.class);\n+        long accessTime \u003d params.get(AccessTimeParam.NAME,\n+                                     AccessTimeParam.class);\n+        FSOperations.FSSetTimes command \u003d\n+          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n+        fsExecute(user, doAs, command);\n+        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n+                       modifiedTime + \":\" + accessTime);\n         response \u003d Response.ok().build();\n         break;\n       }\n-      case RENEWDELEGATIONTOKEN: {\n-        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n-        break;\n-      }\n-      case CANCELDELEGATIONTOKEN: {\n-        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n-        break;\n+      default: {\n+        throw new IOException(\n+          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n+                               op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response put(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case CREATE: {\n        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.CREATE)).build();\n        } else {\n          String permission \u003d params.get(PermissionParam.NAME,\n                                         PermissionParam.class);\n          boolean override \u003d params.get(OverwriteParam.NAME,\n                                        OverwriteParam.class);\n          short replication \u003d params.get(ReplicationParam.NAME,\n                                         ReplicationParam.class);\n          long blockSize \u003d params.get(BlockSizeParam.NAME,\n                                      BlockSizeParam.class);\n          FSOperations.FSCreate command \u003d\n            new FSOperations.FSCreate(is, path, permission, override,\n                                      replication, blockSize);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\n            \"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n            new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case MKDIRS: {\n        String permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSMkdirs command \u003d\n          new FSOperations.FSMkdirs(path, permission);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        String toPath \u003d params.get(DestinationParam.NAME, DestinationParam.class);\n        FSOperations.FSRename command \u003d\n          new FSOperations.FSRename(path, toPath);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        String owner \u003d params.get(OwnerParam.NAME, OwnerParam.class);\n        String group \u003d params.get(GroupParam.NAME, GroupParam.class);\n        FSOperations.FSSetOwner command \u003d\n          new FSOperations.FSSetOwner(path, owner, group);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner + \":\" + group);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        String permission \u003d params.get(PermissionParam.NAME,\n                                       PermissionParam.class);\n        FSOperations.FSSetPermission command \u003d\n          new FSOperations.FSSetPermission(path, permission);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission);\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        short replication \u003d params.get(ReplicationParam.NAME,\n                                       ReplicationParam.class);\n        FSOperations.FSSetReplication command \u003d\n          new FSOperations.FSSetReplication(path, replication);\n        JSONObject json \u003d fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication);\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        long modifiedTime \u003d params.get(ModifiedTimeParam.NAME,\n                                       ModifiedTimeParam.class);\n        long accessTime \u003d params.get(AccessTimeParam.NAME,\n                                     AccessTimeParam.class);\n        FSOperations.FSSetTimes command \u003d\n          new FSOperations.FSSetTimes(path, modifiedTime, accessTime);\n        fsExecute(user, doAs, command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path,\n                       modifiedTime + \":\" + accessTime);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP PUT operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,97 @@\n+  public Response put(InputStream is,\n+                      @Context Principal user,\n+                      @Context UriInfo uriInfo,\n+                      @PathParam(\"path\") FsPathParam path,\n+                      @QueryParam(PutOpParam.NAME) PutOpParam op,\n+                      @QueryParam(ToPathParam.NAME) @DefaultValue(ToPathParam.DEFAULT) ToPathParam toPath,\n+                      @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) OwnerParam owner,\n+                      @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) GroupParam group,\n+                      @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) OverwriteParam override,\n+                      @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) BlockSizeParam blockSize,\n+                      @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)\n+                      PermissionParam permission,\n+                      @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT)\n+                      ReplicationParam replication,\n+                      @QueryParam(ModifiedTimeParam.NAME) @DefaultValue(ModifiedTimeParam.DEFAULT)\n+                      ModifiedTimeParam modifiedTime,\n+                      @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT)\n+                      AccessTimeParam accessTime,\n+                      @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n+                      @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n+    throws IOException, FileSystemAccessException {\n+    Response response \u003d null;\n+    if (op \u003d\u003d null) {\n+      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PutOpParam.NAME));\n+    }\n+    path.makeAbsolute();\n+    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    switch (op.value()) {\n+      case CREATE: {\n+        if (!hasData.value()) {\n+          response \u003d Response.temporaryRedirect(\n+            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PutOpValues.CREATE)).build();\n+        } else {\n+          FSOperations.FSCreate\n+            command \u003d new FSOperations.FSCreate(is, path.value(), permission.value(), override.value(),\n+                                                replication.value(), blockSize.value());\n+          fsExecute(user, doAs.value(), command);\n+          AUDIT_LOG.info(\"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n+                         new Object[]{path, permission, override, replication, blockSize});\n+          response \u003d Response.status(Response.Status.CREATED).build();\n+        }\n+        break;\n+      }\n+      case MKDIRS: {\n+        FSOperations.FSMkdirs command \u003d new FSOperations.FSMkdirs(path.value(), permission.value());\n+        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n+        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission.value());\n+        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n+        break;\n+      }\n+      case RENAME: {\n+        FSOperations.FSRename command \u003d new FSOperations.FSRename(path.value(), toPath.value());\n+        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n+        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n+        break;\n+      }\n+      case SETOWNER: {\n+        FSOperations.FSSetOwner command \u003d new FSOperations.FSSetOwner(path.value(), owner.value(), group.value());\n+        fsExecute(user, doAs.value(), command);\n+        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner.value() + \":\" + group.value());\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case SETPERMISSION: {\n+        FSOperations.FSSetPermission command \u003d new FSOperations.FSSetPermission(path.value(), permission.value());\n+        fsExecute(user, doAs.value(), command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission.value());\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case SETREPLICATION: {\n+        FSOperations.FSSetReplication command \u003d new FSOperations.FSSetReplication(path.value(), replication.value());\n+        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n+        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication.value());\n+        response \u003d Response.ok(json).build();\n+        break;\n+      }\n+      case SETTIMES: {\n+        FSOperations.FSSetTimes\n+          command \u003d new FSOperations.FSSetTimes(path.value(), modifiedTime.value(), accessTime.value());\n+        fsExecute(user, doAs.value(), command);\n+        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path, modifiedTime.value() + \":\" + accessTime.value());\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n+      case RENEWDELEGATIONTOKEN: {\n+        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n+        break;\n+      }\n+      case CANCELDELEGATIONTOKEN: {\n+        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n+        break;\n+      }\n+    }\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response put(InputStream is,\n                      @Context Principal user,\n                      @Context UriInfo uriInfo,\n                      @PathParam(\"path\") FsPathParam path,\n                      @QueryParam(PutOpParam.NAME) PutOpParam op,\n                      @QueryParam(ToPathParam.NAME) @DefaultValue(ToPathParam.DEFAULT) ToPathParam toPath,\n                      @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) OwnerParam owner,\n                      @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) GroupParam group,\n                      @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) OverwriteParam override,\n                      @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) BlockSizeParam blockSize,\n                      @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)\n                      PermissionParam permission,\n                      @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT)\n                      ReplicationParam replication,\n                      @QueryParam(ModifiedTimeParam.NAME) @DefaultValue(ModifiedTimeParam.DEFAULT)\n                      ModifiedTimeParam modifiedTime,\n                      @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT)\n                      AccessTimeParam accessTime,\n                      @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n                      @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n    throws IOException, FileSystemAccessException {\n    Response response \u003d null;\n    if (op \u003d\u003d null) {\n      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PutOpParam.NAME));\n    }\n    path.makeAbsolute();\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case CREATE: {\n        if (!hasData.value()) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PutOpValues.CREATE)).build();\n        } else {\n          FSOperations.FSCreate\n            command \u003d new FSOperations.FSCreate(is, path.value(), permission.value(), override.value(),\n                                                replication.value(), blockSize.value());\n          fsExecute(user, doAs.value(), command);\n          AUDIT_LOG.info(\"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]\",\n                         new Object[]{path, permission, override, replication, blockSize});\n          response \u003d Response.status(Response.Status.CREATED).build();\n        }\n        break;\n      }\n      case MKDIRS: {\n        FSOperations.FSMkdirs command \u003d new FSOperations.FSMkdirs(path.value(), permission.value());\n        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n        AUDIT_LOG.info(\"[{}] permission [{}]\", path, permission.value());\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case RENAME: {\n        FSOperations.FSRename command \u003d new FSOperations.FSRename(path.value(), toPath.value());\n        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, toPath);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case SETOWNER: {\n        FSOperations.FSSetOwner command \u003d new FSOperations.FSSetOwner(path.value(), owner.value(), group.value());\n        fsExecute(user, doAs.value(), command);\n        AUDIT_LOG.info(\"[{}] to (O/G)[{}]\", path, owner.value() + \":\" + group.value());\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETPERMISSION: {\n        FSOperations.FSSetPermission command \u003d new FSOperations.FSSetPermission(path.value(), permission.value());\n        fsExecute(user, doAs.value(), command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, permission.value());\n        response \u003d Response.ok().build();\n        break;\n      }\n      case SETREPLICATION: {\n        FSOperations.FSSetReplication command \u003d new FSOperations.FSSetReplication(path.value(), replication.value());\n        JSONObject json \u003d fsExecute(user, doAs.value(), command);\n        AUDIT_LOG.info(\"[{}] to [{}]\", path, replication.value());\n        response \u003d Response.ok(json).build();\n        break;\n      }\n      case SETTIMES: {\n        FSOperations.FSSetTimes\n          command \u003d new FSOperations.FSSetTimes(path.value(), modifiedTime.value(), accessTime.value());\n        fsExecute(user, doAs.value(), command);\n        AUDIT_LOG.info(\"[{}] to (M/A)[{}]\", path, modifiedTime.value() + \":\" + accessTime.value());\n        response \u003d Response.ok().build();\n        break;\n      }\n      case RENEWDELEGATIONTOKEN: {\n        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n        break;\n      }\n      case CANCELDELEGATIONTOKEN: {\n        response \u003d Response.status(Response.Status.BAD_REQUEST).build();\n        break;\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java"
    }
  }
}