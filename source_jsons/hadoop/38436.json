{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeAttributesManagerImpl.java",
  "functionName": "validate",
  "functionId": "validate___nodeAttributeMapping-Map__String,Set__NodeAttribute______newAttributesToBeAdded-Map__NodeAttributeKey,RMNodeAttribute____isRemoveOperation-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
  "functionStartLine": 282,
  "functionEndLine": 329,
  "numCommitsSeen": 24,
  "timeTaken": 2885,
  "changeHistory": [
    "f659485ee83f3f34e3717631983adfc8fa1e53dc",
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
    "2f7712be09d5b68978547f95b1be2352cdd46266"
  ],
  "changeHistoryShort": {
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": "Ybodychange",
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": "Ymultichange(Yparameterchange,Ybodychange)",
    "2f7712be09d5b68978547f95b1be2352cdd46266": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8925. Updating distributed node attributes only when necessary. Contributed by Tao Yang.\n",
      "commitDate": "20/12/18 6:56 PM",
      "commitName": "f659485ee83f3f34e3717631983adfc8fa1e53dc",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "08/11/18 1:47 AM",
      "commitNameOld": "e1bbf7dcdfc30a61a2b10bef09c59ff17d290488",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 42.71,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       boolean isRemoveOperation) throws IOException {\n     Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n         new TreeMap\u003c\u003e();\n     Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n     Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n         nodeAttributeMapping.entrySet();\n     for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n       attributesValues \u003d new HashMap\u003c\u003e();\n       String node \u003d nodeToAttrMappingEntry.getKey().trim();\n       if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n         // no attributes to map mostly remove operation\n         continue;\n       }\n \n       // validate for attributes\n       for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n         NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n         String attributeName \u003d attributeKey.getAttributeName().trim();\n-        NodeLabelUtil.checkAndThrowLabelName(attributeName);\n+        NodeLabelUtil.checkAndThrowAttributeName(attributeName);\n         NodeLabelUtil\n             .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());\n+        NodeLabelUtil\n+            .checkAndThrowAttributeValue(attribute.getAttributeValue());\n \n         // ensure trimmed values are set back\n         attributeKey.setAttributeName(attributeName);\n         attributeKey\n             .setAttributePrefix(attributeKey.getAttributePrefix().trim());\n \n         // verify for type against prefix/attributeName\n         if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n             newAttributesToBeAdded)) {\n           newAttributesToBeAdded.put(attribute.getAttributeKey(),\n               new RMNodeAttribute(attribute));\n         }\n         // TODO type based value setting needs to be done using a factory\n         StringAttributeValue value \u003d new StringAttributeValue();\n         value.validateAndInitializeValue(\n             normalizeAttributeValue(attribute.getAttributeValue()));\n         attributesValues.put(attribute, value);\n       }\n       nodeToAttributesMap.put(node, attributesValues);\n     }\n     return nodeToAttributesMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      boolean isRemoveOperation) throws IOException {\n    Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n        new TreeMap\u003c\u003e();\n    Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n    Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n        nodeAttributeMapping.entrySet();\n    for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n      attributesValues \u003d new HashMap\u003c\u003e();\n      String node \u003d nodeToAttrMappingEntry.getKey().trim();\n      if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n        // no attributes to map mostly remove operation\n        continue;\n      }\n\n      // validate for attributes\n      for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n        NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n        String attributeName \u003d attributeKey.getAttributeName().trim();\n        NodeLabelUtil.checkAndThrowAttributeName(attributeName);\n        NodeLabelUtil\n            .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());\n        NodeLabelUtil\n            .checkAndThrowAttributeValue(attribute.getAttributeValue());\n\n        // ensure trimmed values are set back\n        attributeKey.setAttributeName(attributeName);\n        attributeKey\n            .setAttributePrefix(attributeKey.getAttributePrefix().trim());\n\n        // verify for type against prefix/attributeName\n        if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n            newAttributesToBeAdded)) {\n          newAttributesToBeAdded.put(attribute.getAttributeKey(),\n              new RMNodeAttribute(attribute));\n        }\n        // TODO type based value setting needs to be done using a factory\n        StringAttributeValue value \u003d new StringAttributeValue();\n        value.validateAndInitializeValue(\n            normalizeAttributeValue(attribute.getAttributeValue()));\n        attributesValues.put(attribute, value);\n      }\n      nodeToAttributesMap.put(node, attributesValues);\n    }\n    return nodeToAttributesMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthor": "bibinchundatt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,46 @@\n   protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n+      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       boolean isRemoveOperation) throws IOException {\n     Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n         new TreeMap\u003c\u003e();\n     Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n     Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n         nodeAttributeMapping.entrySet();\n     for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n       attributesValues \u003d new HashMap\u003c\u003e();\n       String node \u003d nodeToAttrMappingEntry.getKey().trim();\n       if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n         // no attributes to map mostly remove operation\n         continue;\n       }\n \n       // validate for attributes\n       for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n-        String attributeName \u003d attribute.getAttributeName().trim();\n+        NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n+        String attributeName \u003d attributeKey.getAttributeName().trim();\n         NodeLabelUtil.checkAndThrowLabelName(attributeName);\n         NodeLabelUtil\n-            .checkAndThrowAttributePrefix(attribute.getAttributePrefix());\n+            .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());\n \n         // ensure trimmed values are set back\n-        attribute.setAttributeName(attributeName);\n-        attribute.setAttributePrefix(attribute.getAttributePrefix().trim());\n+        attributeKey.setAttributeName(attributeName);\n+        attributeKey\n+            .setAttributePrefix(attributeKey.getAttributePrefix().trim());\n \n         // verify for type against prefix/attributeName\n         if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n             newAttributesToBeAdded)) {\n-          newAttributesToBeAdded.put(attribute,\n+          newAttributesToBeAdded.put(attribute.getAttributeKey(),\n               new RMNodeAttribute(attribute));\n         }\n         // TODO type based value setting needs to be done using a factory\n         StringAttributeValue value \u003d new StringAttributeValue();\n         value.validateAndInitializeValue(\n             normalizeAttributeValue(attribute.getAttributeValue()));\n         attributesValues.put(attribute, value);\n       }\n       nodeToAttributesMap.put(node, attributesValues);\n     }\n     return nodeToAttributesMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      boolean isRemoveOperation) throws IOException {\n    Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n        new TreeMap\u003c\u003e();\n    Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n    Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n        nodeAttributeMapping.entrySet();\n    for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n      attributesValues \u003d new HashMap\u003c\u003e();\n      String node \u003d nodeToAttrMappingEntry.getKey().trim();\n      if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n        // no attributes to map mostly remove operation\n        continue;\n      }\n\n      // validate for attributes\n      for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n        NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n        String attributeName \u003d attributeKey.getAttributeName().trim();\n        NodeLabelUtil.checkAndThrowLabelName(attributeName);\n        NodeLabelUtil\n            .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());\n\n        // ensure trimmed values are set back\n        attributeKey.setAttributeName(attributeName);\n        attributeKey\n            .setAttributePrefix(attributeKey.getAttributePrefix().trim());\n\n        // verify for type against prefix/attributeName\n        if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n            newAttributesToBeAdded)) {\n          newAttributesToBeAdded.put(attribute.getAttributeKey(),\n              new RMNodeAttribute(attribute));\n        }\n        // TODO type based value setting needs to be done using a factory\n        StringAttributeValue value \u003d new StringAttributeValue();\n        value.validateAndInitializeValue(\n            normalizeAttributeValue(attribute.getAttributeValue()));\n        attributesValues.put(attribute, value);\n      }\n      nodeToAttributesMap.put(node, attributesValues);\n    }\n    return nodeToAttributesMap;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[nodeAttributeMapping-Map\u003cString,Set\u003cNodeAttribute\u003e\u003e, newAttributesToBeAdded-Map\u003cNodeAttribute,RMNodeAttribute\u003e, isRemoveOperation-boolean]",
            "newValue": "[nodeAttributeMapping-Map\u003cString,Set\u003cNodeAttribute\u003e\u003e, newAttributesToBeAdded-Map\u003cNodeAttributeKey,RMNodeAttribute\u003e, isRemoveOperation-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,46 @@\n   protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n+      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       boolean isRemoveOperation) throws IOException {\n     Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n         new TreeMap\u003c\u003e();\n     Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n     Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n         nodeAttributeMapping.entrySet();\n     for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n       attributesValues \u003d new HashMap\u003c\u003e();\n       String node \u003d nodeToAttrMappingEntry.getKey().trim();\n       if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n         // no attributes to map mostly remove operation\n         continue;\n       }\n \n       // validate for attributes\n       for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n-        String attributeName \u003d attribute.getAttributeName().trim();\n+        NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n+        String attributeName \u003d attributeKey.getAttributeName().trim();\n         NodeLabelUtil.checkAndThrowLabelName(attributeName);\n         NodeLabelUtil\n-            .checkAndThrowAttributePrefix(attribute.getAttributePrefix());\n+            .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());\n \n         // ensure trimmed values are set back\n-        attribute.setAttributeName(attributeName);\n-        attribute.setAttributePrefix(attribute.getAttributePrefix().trim());\n+        attributeKey.setAttributeName(attributeName);\n+        attributeKey\n+            .setAttributePrefix(attributeKey.getAttributePrefix().trim());\n \n         // verify for type against prefix/attributeName\n         if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n             newAttributesToBeAdded)) {\n-          newAttributesToBeAdded.put(attribute,\n+          newAttributesToBeAdded.put(attribute.getAttributeKey(),\n               new RMNodeAttribute(attribute));\n         }\n         // TODO type based value setting needs to be done using a factory\n         StringAttributeValue value \u003d new StringAttributeValue();\n         value.validateAndInitializeValue(\n             normalizeAttributeValue(attribute.getAttributeValue()));\n         attributesValues.put(attribute, value);\n       }\n       nodeToAttributesMap.put(node, attributesValues);\n     }\n     return nodeToAttributesMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      boolean isRemoveOperation) throws IOException {\n    Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n        new TreeMap\u003c\u003e();\n    Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n    Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n        nodeAttributeMapping.entrySet();\n    for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n      attributesValues \u003d new HashMap\u003c\u003e();\n      String node \u003d nodeToAttrMappingEntry.getKey().trim();\n      if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n        // no attributes to map mostly remove operation\n        continue;\n      }\n\n      // validate for attributes\n      for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n        NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n        String attributeName \u003d attributeKey.getAttributeName().trim();\n        NodeLabelUtil.checkAndThrowLabelName(attributeName);\n        NodeLabelUtil\n            .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());\n\n        // ensure trimmed values are set back\n        attributeKey.setAttributeName(attributeName);\n        attributeKey\n            .setAttributePrefix(attributeKey.getAttributePrefix().trim());\n\n        // verify for type against prefix/attributeName\n        if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n            newAttributesToBeAdded)) {\n          newAttributesToBeAdded.put(attribute.getAttributeKey(),\n              new RMNodeAttribute(attribute));\n        }\n        // TODO type based value setting needs to be done using a factory\n        StringAttributeValue value \u003d new StringAttributeValue();\n        value.validateAndInitializeValue(\n            normalizeAttributeValue(attribute.getAttributeValue()));\n        attributesValues.put(attribute, value);\n      }\n      nodeToAttributesMap.put(node, attributesValues);\n    }\n    return nodeToAttributesMap;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "2f7712be09d5b68978547f95b1be2352cdd46266": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6858. Attribute Manager to store and provide node attributes in RM. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,44 @@\n+  protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n+      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n+      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n+      boolean isRemoveOperation) throws IOException {\n+    Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n+        new TreeMap\u003c\u003e();\n+    Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n+    Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n+        nodeAttributeMapping.entrySet();\n+    for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n+      attributesValues \u003d new HashMap\u003c\u003e();\n+      String node \u003d nodeToAttrMappingEntry.getKey().trim();\n+      if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n+        // no attributes to map mostly remove operation\n+        continue;\n+      }\n+\n+      // validate for attributes\n+      for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n+        String attributeName \u003d attribute.getAttributeName().trim();\n+        NodeLabelUtil.checkAndThrowLabelName(attributeName);\n+        NodeLabelUtil\n+            .checkAndThrowAttributePrefix(attribute.getAttributePrefix());\n+\n+        // ensure trimmed values are set back\n+        attribute.setAttributeName(attributeName);\n+        attribute.setAttributePrefix(attribute.getAttributePrefix().trim());\n+\n+        // verify for type against prefix/attributeName\n+        if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n+            newAttributesToBeAdded)) {\n+          newAttributesToBeAdded.put(attribute,\n+              new RMNodeAttribute(attribute));\n+        }\n+        // TODO type based value setting needs to be done using a factory\n+        StringAttributeValue value \u003d new StringAttributeValue();\n+        value.validateAndInitializeValue(\n+            normalizeAttributeValue(attribute.getAttributeValue()));\n+        attributesValues.put(attribute, value);\n+      }\n+      nodeToAttributesMap.put(node, attributesValues);\n+    }\n+    return nodeToAttributesMap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e validate(\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeAttributeMapping,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n      boolean isRemoveOperation) throws IOException {\n    Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeToAttributesMap \u003d\n        new TreeMap\u003c\u003e();\n    Map\u003cNodeAttribute, AttributeValue\u003e attributesValues;\n    Set\u003cEntry\u003cString, Set\u003cNodeAttribute\u003e\u003e\u003e entrySet \u003d\n        nodeAttributeMapping.entrySet();\n    for (Entry\u003cString, Set\u003cNodeAttribute\u003e\u003e nodeToAttrMappingEntry : entrySet) {\n      attributesValues \u003d new HashMap\u003c\u003e();\n      String node \u003d nodeToAttrMappingEntry.getKey().trim();\n      if (nodeToAttrMappingEntry.getValue().isEmpty()) {\n        // no attributes to map mostly remove operation\n        continue;\n      }\n\n      // validate for attributes\n      for (NodeAttribute attribute : nodeToAttrMappingEntry.getValue()) {\n        String attributeName \u003d attribute.getAttributeName().trim();\n        NodeLabelUtil.checkAndThrowLabelName(attributeName);\n        NodeLabelUtil\n            .checkAndThrowAttributePrefix(attribute.getAttributePrefix());\n\n        // ensure trimmed values are set back\n        attribute.setAttributeName(attributeName);\n        attribute.setAttributePrefix(attribute.getAttributePrefix().trim());\n\n        // verify for type against prefix/attributeName\n        if (validateForAttributeTypeMismatch(isRemoveOperation, attribute,\n            newAttributesToBeAdded)) {\n          newAttributesToBeAdded.put(attribute,\n              new RMNodeAttribute(attribute));\n        }\n        // TODO type based value setting needs to be done using a factory\n        StringAttributeValue value \u003d new StringAttributeValue();\n        value.validateAndInitializeValue(\n            normalizeAttributeValue(attribute.getAttributeValue()));\n        attributesValues.put(attribute, value);\n      }\n      nodeToAttributesMap.put(node, attributesValues);\n    }\n    return nodeToAttributesMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java"
    }
  }
}