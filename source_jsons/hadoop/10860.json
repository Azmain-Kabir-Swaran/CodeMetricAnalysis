{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedWriter.java",
  "functionName": "transferData2Targets",
  "functionId": "transferData2Targets",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
  "functionStartLine": 144,
  "functionEndLine": 160,
  "numCommitsSeen": 34,
  "timeTaken": 3120,
  "changeHistory": [
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
    "6616de24cb14f1c2d0d6568fd4382062618834bd"
  ],
  "changeHistoryShort": {
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "6616de24cb14f1c2d0d6568fd4382062618834bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n-\n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n-\n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n-\n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n-\n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n+  int transferData2Targets() {\n+    int nSuccess \u003d 0;\n+    for (int i \u003d 0; i \u003c targets.length; i++) {\n+      if (targetsStatus[i]) {\n+        boolean success \u003d false;\n+        try {\n+          writers[i].transferData2Target(packetBuf);\n+          nSuccess++;\n+          success \u003d true;\n+        } catch (IOException e) {\n+          LOG.warn(e.getMessage());\n         }\n+        targetsStatus[i] \u003d success;\n       }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+    }\n+    return nSuccess;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  int transferData2Targets() {\n    int nSuccess \u003d 0;\n    for (int i \u003d 0; i \u003c targets.length; i++) {\n      if (targetsStatus[i]) {\n        boolean success \u003d false;\n        try {\n          writers[i].transferData2Target(packetBuf);\n          nSuccess++;\n          success \u003d true;\n        } catch (IOException e) {\n          LOG.warn(e.getMessage());\n        }\n        targetsStatus[i] \u003d success;\n      }\n    }\n    return nSuccess;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
            "oldMethodName": "transferData2Targets",
            "newMethodName": "transferData2Targets"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n-\n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n-\n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n-\n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n-\n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n+  int transferData2Targets() {\n+    int nSuccess \u003d 0;\n+    for (int i \u003d 0; i \u003c targets.length; i++) {\n+      if (targetsStatus[i]) {\n+        boolean success \u003d false;\n+        try {\n+          writers[i].transferData2Target(packetBuf);\n+          nSuccess++;\n+          success \u003d true;\n+        } catch (IOException e) {\n+          LOG.warn(e.getMessage());\n         }\n+        targetsStatus[i] \u003d success;\n       }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+    }\n+    return nSuccess;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  int transferData2Targets() {\n    int nSuccess \u003d 0;\n    for (int i \u003d 0; i \u003c targets.length; i++) {\n      if (targetsStatus[i]) {\n        boolean success \u003d false;\n        try {\n          writers[i].transferData2Target(packetBuf);\n          nSuccess++;\n          success \u003d true;\n        } catch (IOException e) {\n          LOG.warn(e.getMessage());\n        }\n        targetsStatus[i] \u003d success;\n      }\n    }\n    return nSuccess;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n-\n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n-\n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n-\n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n-\n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n+  int transferData2Targets() {\n+    int nSuccess \u003d 0;\n+    for (int i \u003d 0; i \u003c targets.length; i++) {\n+      if (targetsStatus[i]) {\n+        boolean success \u003d false;\n+        try {\n+          writers[i].transferData2Target(packetBuf);\n+          nSuccess++;\n+          success \u003d true;\n+        } catch (IOException e) {\n+          LOG.warn(e.getMessage());\n         }\n+        targetsStatus[i] \u003d success;\n       }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+    }\n+    return nSuccess;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  int transferData2Targets() {\n    int nSuccess \u003d 0;\n    for (int i \u003d 0; i \u003c targets.length; i++) {\n      if (targetsStatus[i]) {\n        boolean success \u003d false;\n        try {\n          writers[i].transferData2Target(packetBuf);\n          nSuccess++;\n          success \u003d true;\n        } catch (IOException e) {\n          LOG.warn(e.getMessage());\n        }\n        targetsStatus[i] \u003d success;\n      }\n    }\n    return nSuccess;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n-\n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n-\n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n-\n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n-\n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n+  int transferData2Targets() {\n+    int nSuccess \u003d 0;\n+    for (int i \u003d 0; i \u003c targets.length; i++) {\n+      if (targetsStatus[i]) {\n+        boolean success \u003d false;\n+        try {\n+          writers[i].transferData2Target(packetBuf);\n+          nSuccess++;\n+          success \u003d true;\n+        } catch (IOException e) {\n+          LOG.warn(e.getMessage());\n         }\n+        targetsStatus[i] \u003d success;\n       }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+    }\n+    return nSuccess;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  int transferData2Targets() {\n    int nSuccess \u003d 0;\n    for (int i \u003d 0; i \u003c targets.length; i++) {\n      if (targetsStatus[i]) {\n        boolean success \u003d false;\n        try {\n          writers[i].transferData2Target(packetBuf);\n          nSuccess++;\n          success \u003d true;\n        } catch (IOException e) {\n          LOG.warn(e.getMessage());\n        }\n        targetsStatus[i] \u003d success;\n      }\n    }\n    return nSuccess;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
          "extendedDetails": {
            "oldValue": "[targetsStatus-boolean[]]",
            "newValue": "[]"
          }
        }
      ]
    },
    "6616de24cb14f1c2d0d6568fd4382062618834bd": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7348. Erasure Coding: DataNode reconstruct striped blocks. Contributed by Yi Liu.\n",
      "commitDate": "26/05/15 12:01 PM",
      "commitName": "6616de24cb14f1c2d0d6568fd4382062618834bd",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,42 @@\n+    private int transferData2Targets(boolean[] targetsStatus) {\n+      int nsuccess \u003d 0;\n+      for (int i \u003d 0; i \u003c targets.length; i++) {\n+        if (targetsStatus[i]) {\n+          boolean success \u003d false;\n+          try {\n+            ByteBuffer buffer \u003d targetBuffers[i];\n+            \n+            if (buffer.remaining() \u003d\u003d 0) {\n+              continue;\n+            }\n+\n+            checksum.calculateChunkedSums(\n+                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+\n+            int ckOff \u003d 0;\n+            while (buffer.remaining() \u003e 0) {\n+              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n+                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n+              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n+              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n+                  maxBytesToPacket : buffer.remaining();\n+              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n+              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n+              ckOff +\u003d ckLen;\n+              packet.writeData(buffer, toWrite);\n+\n+              // Send packet\n+              packet.writeTo(targetOutputStreams[i]);\n+\n+              blockOffset4Targets[i] +\u003d toWrite;\n+              nsuccess++;\n+              success \u003d true;\n+            }\n+          } catch (IOException e) {\n+            LOG.warn(e.getMessage());\n+          }\n+          targetsStatus[i] \u003d success;\n+        }\n+      }\n+      return nsuccess;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int transferData2Targets(boolean[] targetsStatus) {\n      int nsuccess \u003d 0;\n      for (int i \u003d 0; i \u003c targets.length; i++) {\n        if (targetsStatus[i]) {\n          boolean success \u003d false;\n          try {\n            ByteBuffer buffer \u003d targetBuffers[i];\n            \n            if (buffer.remaining() \u003d\u003d 0) {\n              continue;\n            }\n\n            checksum.calculateChunkedSums(\n                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n\n            int ckOff \u003d 0;\n            while (buffer.remaining() \u003e 0) {\n              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n                  maxBytesToPacket : buffer.remaining();\n              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n              ckOff +\u003d ckLen;\n              packet.writeData(buffer, toWrite);\n\n              // Send packet\n              packet.writeTo(targetOutputStreams[i]);\n\n              blockOffset4Targets[i] +\u003d toWrite;\n              nsuccess++;\n              success \u003d true;\n            }\n          } catch (IOException e) {\n            LOG.warn(e.getMessage());\n          }\n          targetsStatus[i] \u003d success;\n        }\n      }\n      return nsuccess;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java"
    }
  }
}