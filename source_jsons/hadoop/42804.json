{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppLifetimeMonitor.java",
  "functionName": "expire",
  "functionId": "expire___monitoredAppKey-RMAppToMonitor",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/monitor/RMAppLifetimeMonitor.java",
  "functionStartLine": 74,
  "functionEndLine": 84,
  "numCommitsSeen": 4,
  "timeTaken": 1798,
  "changeHistory": [
    "165d01a73e5f328108a9e876c7a751a3c2cec4a8",
    "bcc15c6290b3912a054323695a6a931b0de163bd",
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081"
  ],
  "changeHistoryShort": {
    "165d01a73e5f328108a9e876c7a751a3c2cec4a8": "Ybodychange",
    "bcc15c6290b3912a054323695a6a931b0de163bd": "Ybodychange",
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081": "Yintroduced"
  },
  "changeHistoryDetails": {
    "165d01a73e5f328108a9e876c7a751a3c2cec4a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5931. Document timeout interfaces CLI and REST APIs (Contributed by Rohith Sharma K S via Daniel Templeton)\n",
      "commitDate": "30/12/16 8:41 AM",
      "commitName": "165d01a73e5f328108a9e876c7a751a3c2cec4a8",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/11/16 4:08 PM",
      "commitNameOld": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 50.69,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   protected synchronized void expire(RMAppToMonitor monitoredAppKey) {\n     ApplicationId appId \u003d monitoredAppKey.getApplicationId();\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       return;\n     }\n-    String diagnostics \u003d\n-        \"Application killed due to exceeding its lifetime period\";\n+    String diagnostics \u003d \"Application is killed by ResourceManager as it\"\n+        + \" has exceeded the lifetime period.\";\n     rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void expire(RMAppToMonitor monitoredAppKey) {\n    ApplicationId appId \u003d monitoredAppKey.getApplicationId();\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      return;\n    }\n    String diagnostics \u003d \"Application is killed by ResourceManager as it\"\n        + \" has exceeded the lifetime period.\";\n    rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/monitor/RMAppLifetimeMonitor.java",
      "extendedDetails": {}
    },
    "bcc15c6290b3912a054323695a6a931b0de163bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "09/11/16 4:08 PM",
      "commitName": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/09/16 7:00 AM",
      "commitNameOld": "2ae5a3a5bf5ea355370469a53eeccff0b5220081",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 41.42,
      "commitsBetweenForRepo": 379,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,11 @@\n   protected synchronized void expire(RMAppToMonitor monitoredAppKey) {\n-    Long remove \u003d monitoredApps.remove(monitoredAppKey);\n     ApplicationId appId \u003d monitoredAppKey.getApplicationId();\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       return;\n     }\n-    // Don\u0027t trigger a KILL event if application is in completed states\n-    if (!COMPLETED_APP_STATES.contains(app.getState())) {\n-      String diagnostics \u003d\n-          \"Application killed due to exceeding its lifetime period \" + remove\n-              + \" milliseconds\";\n-      rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n-    } else {\n-      LOG.info(\"Application \" + appId\n-          + \" is about to complete. So not killing the application.\");\n-    }\n+    String diagnostics \u003d\n+        \"Application killed due to exceeding its lifetime period\";\n+    rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void expire(RMAppToMonitor monitoredAppKey) {\n    ApplicationId appId \u003d monitoredAppKey.getApplicationId();\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      return;\n    }\n    String diagnostics \u003d\n        \"Application killed due to exceeding its lifetime period\";\n    rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/monitor/RMAppLifetimeMonitor.java",
      "extendedDetails": {}
    },
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4205. Add a service for monitoring application life time out. Contributed by Rohith Sharma K S\n",
      "commitDate": "29/09/16 7:00 AM",
      "commitName": "2ae5a3a5bf5ea355370469a53eeccff0b5220081",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,19 @@\n+  protected synchronized void expire(RMAppToMonitor monitoredAppKey) {\n+    Long remove \u003d monitoredApps.remove(monitoredAppKey);\n+    ApplicationId appId \u003d monitoredAppKey.getApplicationId();\n+    RMApp app \u003d rmContext.getRMApps().get(appId);\n+    if (app \u003d\u003d null) {\n+      return;\n+    }\n+    // Don\u0027t trigger a KILL event if application is in completed states\n+    if (!COMPLETED_APP_STATES.contains(app.getState())) {\n+      String diagnostics \u003d\n+          \"Application killed due to exceeding its lifetime period \" + remove\n+              + \" milliseconds\";\n+      rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n+    } else {\n+      LOG.info(\"Application \" + appId\n+          + \" is about to complete. So not killing the application.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void expire(RMAppToMonitor monitoredAppKey) {\n    Long remove \u003d monitoredApps.remove(monitoredAppKey);\n    ApplicationId appId \u003d monitoredAppKey.getApplicationId();\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      return;\n    }\n    // Don\u0027t trigger a KILL event if application is in completed states\n    if (!COMPLETED_APP_STATES.contains(app.getState())) {\n      String diagnostics \u003d\n          \"Application killed due to exceeding its lifetime period \" + remove\n              + \" milliseconds\";\n      rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));\n    } else {\n      LOG.info(\"Application \" + appId\n          + \" is about to complete. So not killing the application.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/monitor/RMAppLifetimeMonitor.java"
    }
  }
}