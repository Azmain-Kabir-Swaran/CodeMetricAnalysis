{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrafficController.java",
  "functionName": "checkIfAlreadyBootstrapped",
  "functionId": "checkIfAlreadyBootstrapped___state-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java",
  "functionStartLine": 202,
  "functionEndLine": 237,
  "numCommitsSeen": 5,
  "timeTaken": 1298,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "a100be685cc4521e9949589948219231aa5d2733"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "a100be685cc4521e9949589948219231aa5d2733": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 570.63,
      "commitsBetweenForRepo": 4960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   private boolean checkIfAlreadyBootstrapped(String state)\n       throws ResourceHandlerException {\n     List\u003cString\u003e regexes \u003d new ArrayList\u003c\u003e();\n \n     //root qdisc\n     regexes.add(String.format(\"^qdisc htb %d: root(.)*$\",\n         ROOT_QDISC_HANDLE));\n     //cgroup filter\n     regexes.add(String.format(\"^filter parent %d: protocol ip \" +\n         \"(.)*cgroup(.)*$\", ROOT_QDISC_HANDLE));\n     //root, default and yarn classes\n     regexes.add(String.format(\"^class htb %d:%d root(.)*$\",\n         ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n     regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n         ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n     regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n         ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, ROOT_QDISC_HANDLE,\n         ROOT_CLASS_ID));\n \n     for (String regex : regexes) {\n       Pattern pattern \u003d Pattern.compile(regex, Pattern.MULTILINE);\n \n       if (pattern.matcher(state).find()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Matched regex: \" + regex);\n-        }\n+        LOG.debug(\"Matched regex: {}\", regex);\n       } else {\n         String logLine \u003d new StringBuffer(\"Failed to match regex: \")\n               .append(regex).append(\" Current state: \").append(state).toString();\n         LOG.warn(logLine);\n         return false;\n       }\n     }\n \n     LOG.info(\"Bootstrap check succeeded\");\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkIfAlreadyBootstrapped(String state)\n      throws ResourceHandlerException {\n    List\u003cString\u003e regexes \u003d new ArrayList\u003c\u003e();\n\n    //root qdisc\n    regexes.add(String.format(\"^qdisc htb %d: root(.)*$\",\n        ROOT_QDISC_HANDLE));\n    //cgroup filter\n    regexes.add(String.format(\"^filter parent %d: protocol ip \" +\n        \"(.)*cgroup(.)*$\", ROOT_QDISC_HANDLE));\n    //root, default and yarn classes\n    regexes.add(String.format(\"^class htb %d:%d root(.)*$\",\n        ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n        ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n        ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, ROOT_QDISC_HANDLE,\n        ROOT_CLASS_ID));\n\n    for (String regex : regexes) {\n      Pattern pattern \u003d Pattern.compile(regex, Pattern.MULTILINE);\n\n      if (pattern.matcher(state).find()) {\n        LOG.debug(\"Matched regex: {}\", regex);\n      } else {\n        String logLine \u003d new StringBuffer(\"Failed to match regex: \")\n              .append(regex).append(\" Current state: \").append(state).toString();\n        LOG.warn(logLine);\n        return false;\n      }\n    }\n\n    LOG.info(\"Bootstrap check succeeded\");\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java",
      "extendedDetails": {}
    },
    "a100be685cc4521e9949589948219231aa5d2733": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3366. Enhanced NodeManager to support classifying/shaping outgoing network bandwidth traffic originating from YARN containers Contributed by Sidharta Seethana.\n",
      "commitDate": "22/04/15 5:26 PM",
      "commitName": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,38 @@\n+  private boolean checkIfAlreadyBootstrapped(String state)\n+      throws ResourceHandlerException {\n+    List\u003cString\u003e regexes \u003d new ArrayList\u003c\u003e();\n+\n+    //root qdisc\n+    regexes.add(String.format(\"^qdisc htb %d: root(.)*$\",\n+        ROOT_QDISC_HANDLE));\n+    //cgroup filter\n+    regexes.add(String.format(\"^filter parent %d: protocol ip \" +\n+        \"(.)*cgroup(.)*$\", ROOT_QDISC_HANDLE));\n+    //root, default and yarn classes\n+    regexes.add(String.format(\"^class htb %d:%d root(.)*$\",\n+        ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n+    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n+        ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n+    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n+        ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, ROOT_QDISC_HANDLE,\n+        ROOT_CLASS_ID));\n+\n+    for (String regex : regexes) {\n+      Pattern pattern \u003d Pattern.compile(regex, Pattern.MULTILINE);\n+\n+      if (pattern.matcher(state).find()) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Matched regex: \" + regex);\n+        }\n+      } else {\n+        String logLine \u003d new StringBuffer(\"Failed to match regex: \")\n+              .append(regex).append(\" Current state: \").append(state).toString();\n+        LOG.warn(logLine);\n+        return false;\n+      }\n+    }\n+\n+    LOG.info(\"Bootstrap check succeeded\");\n+\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkIfAlreadyBootstrapped(String state)\n      throws ResourceHandlerException {\n    List\u003cString\u003e regexes \u003d new ArrayList\u003c\u003e();\n\n    //root qdisc\n    regexes.add(String.format(\"^qdisc htb %d: root(.)*$\",\n        ROOT_QDISC_HANDLE));\n    //cgroup filter\n    regexes.add(String.format(\"^filter parent %d: protocol ip \" +\n        \"(.)*cgroup(.)*$\", ROOT_QDISC_HANDLE));\n    //root, default and yarn classes\n    regexes.add(String.format(\"^class htb %d:%d root(.)*$\",\n        ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n        ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\n    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\",\n        ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, ROOT_QDISC_HANDLE,\n        ROOT_CLASS_ID));\n\n    for (String regex : regexes) {\n      Pattern pattern \u003d Pattern.compile(regex, Pattern.MULTILINE);\n\n      if (pattern.matcher(state).find()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Matched regex: \" + regex);\n        }\n      } else {\n        String logLine \u003d new StringBuffer(\"Failed to match regex: \")\n              .append(regex).append(\" Current state: \").append(state).toString();\n        LOG.warn(logLine);\n        return false;\n      }\n    }\n\n    LOG.info(\"Bootstrap check succeeded\");\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java"
    }
  }
}