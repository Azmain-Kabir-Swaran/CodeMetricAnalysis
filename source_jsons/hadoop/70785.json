{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockBlobAppendStream.java",
  "functionName": "writeBlockRequestInternal",
  "functionId": "writeBlockRequestInternal___blockId-String__dataPayload-ByteBuffer__bufferPoolBuffer-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/BlockBlobAppendStream.java",
  "functionStartLine": 716,
  "functionEndLine": 758,
  "numCommitsSeen": 7,
  "timeTaken": 1647,
  "changeHistory": [
    "13eda5000304099d1145631f9be13ce8a00b600d"
  ],
  "changeHistoryShort": {
    "13eda5000304099d1145631f9be13ce8a00b600d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13eda5000304099d1145631f9be13ce8a00b600d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14520. WASB: Block compaction for Azure Block Blobs.\nContributed by Georgi Chalakov\n",
      "commitDate": "07/09/17 10:35 AM",
      "commitName": "13eda5000304099d1145631f9be13ce8a00b600d",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,43 @@\n+  private void writeBlockRequestInternal(String blockId,\n+                                         ByteBuffer dataPayload,\n+                                         boolean bufferPoolBuffer) {\n+    IOException lastLocalException \u003d null;\n+\n+    int uploadRetryAttempts \u003d 0;\n+    while (uploadRetryAttempts \u003c MAX_BLOCK_UPLOAD_RETRIES) {\n+      try {\n+        long startTime \u003d System.nanoTime();\n+\n+        blob.uploadBlock(blockId, accessCondition, new ByteArrayInputStream(\n+            dataPayload.array()), dataPayload.position(),\n+            new BlobRequestOptions(), opContext);\n+\n+        LOG.debug(\"upload block finished for {} ms. block {} \",\n+            TimeUnit.NANOSECONDS.toMillis(\n+                System.nanoTime() - startTime), blockId);\n+        break;\n+\n+      } catch(Exception ioe) {\n+        LOG.debug(\"Encountered exception during uploading block for Blob {}\"\n+            + \" Exception : {}\", key, ioe);\n+        uploadRetryAttempts++;\n+        lastLocalException \u003d new AzureException(\n+            \"Encountered Exception while uploading block: \" + ioe, ioe);\n+        try {\n+          Thread.sleep(\n+              BLOCK_UPLOAD_RETRY_INTERVAL * (uploadRetryAttempts + 1));\n+        } catch(InterruptedException ie) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+      }\n+    }\n+\n+    if (bufferPoolBuffer) {\n+      poolReadyByteBuffers.putBuffer(dataPayload);\n+    }\n+\n+    if (uploadRetryAttempts \u003d\u003d MAX_BLOCK_UPLOAD_RETRIES) {\n+      maybeSetFirstError(lastLocalException);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void writeBlockRequestInternal(String blockId,\n                                         ByteBuffer dataPayload,\n                                         boolean bufferPoolBuffer) {\n    IOException lastLocalException \u003d null;\n\n    int uploadRetryAttempts \u003d 0;\n    while (uploadRetryAttempts \u003c MAX_BLOCK_UPLOAD_RETRIES) {\n      try {\n        long startTime \u003d System.nanoTime();\n\n        blob.uploadBlock(blockId, accessCondition, new ByteArrayInputStream(\n            dataPayload.array()), dataPayload.position(),\n            new BlobRequestOptions(), opContext);\n\n        LOG.debug(\"upload block finished for {} ms. block {} \",\n            TimeUnit.NANOSECONDS.toMillis(\n                System.nanoTime() - startTime), blockId);\n        break;\n\n      } catch(Exception ioe) {\n        LOG.debug(\"Encountered exception during uploading block for Blob {}\"\n            + \" Exception : {}\", key, ioe);\n        uploadRetryAttempts++;\n        lastLocalException \u003d new AzureException(\n            \"Encountered Exception while uploading block: \" + ioe, ioe);\n        try {\n          Thread.sleep(\n              BLOCK_UPLOAD_RETRY_INTERVAL * (uploadRetryAttempts + 1));\n        } catch(InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          break;\n        }\n      }\n    }\n\n    if (bufferPoolBuffer) {\n      poolReadyByteBuffers.putBuffer(dataPayload);\n    }\n\n    if (uploadRetryAttempts \u003d\u003d MAX_BLOCK_UPLOAD_RETRIES) {\n      maybeSetFirstError(lastLocalException);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/BlockBlobAppendStream.java"
    }
  }
}