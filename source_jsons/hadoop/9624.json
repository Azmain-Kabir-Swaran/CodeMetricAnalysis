{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ECTopologyVerifier.java",
  "functionName": "verifyECWithTopology",
  "functionId": "verifyECWithTopology___minDN-int(modifiers-final)__minRack-int(modifiers-final)__numOfRacks-int(modifiers-final)__numOfDataNodes-int(modifiers-final)__readablePolicies-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
  "functionStartLine": 92,
  "functionEndLine": 116,
  "numCommitsSeen": 6,
  "timeTaken": 3796,
  "changeHistory": [
    "7d3b567194f51b745dbc7eb7ee91c1ac160053f4",
    "5f15a60e329b8d0a495a977dc5255126814c5271",
    "951cdd7e4cbe68284620f6805f85c51301150c58",
    "dd5e7c6b7239a93f2391beaa11181e442a387db4"
  ],
  "changeHistoryShort": {
    "7d3b567194f51b745dbc7eb7ee91c1ac160053f4": "Ybodychange",
    "5f15a60e329b8d0a495a977dc5255126814c5271": "Ybodychange",
    "951cdd7e4cbe68284620f6805f85c51301150c58": "Ymultichange(Yparameterchange,Ybodychange)",
    "dd5e7c6b7239a93f2391beaa11181e442a387db4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7d3b567194f51b745dbc7eb7ee91c1ac160053f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14298. Improve log messages of ECTopologyVerifier. Contributed by Kitti Nanasi.\n",
      "commitDate": "22/02/19 11:38 AM",
      "commitName": "7d3b567194f51b745dbc7eb7ee91c1ac160053f4",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "04/02/19 2:52 PM",
      "commitNameOld": "5f15a60e329b8d0a495a977dc5255126814c5271",
      "commitAuthorOld": "Kitti Nanasi",
      "daysBetweenCommits": 17.87,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   private static ECTopologyVerifierResult verifyECWithTopology(\n       final int minDN, final int minRack,\n       final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n     String resultMessage;\n     if (numOfDataNodes \u003c minDN) {\n-      resultMessage \u003d String.format(\"The number of DataNodes (%d) is less \" +\n-          \"than the minimum required number of DataNodes (%d) for the \" +\n-          \"erasure coding policies: %s\", numOfDataNodes, minDN,\n-          readablePolicies);\n+      resultMessage \u003d String.format(\"%d DataNodes are required for \" +\n+              \"the erasure coding policies: %s. \" +\n+              \"The number of DataNodes is only %d.\",\n+          minDN, readablePolicies, numOfDataNodes);\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n \n     if (numOfRacks \u003c minRack) {\n-      resultMessage \u003d String.format(\"The number of racks (%d) is less than \" +\n-          \"the minimum required number of racks (%d) for the erasure \" +\n-          \"coding policies: %s\", numOfRacks, minRack, readablePolicies);\n+      resultMessage \u003d String.format(\"%d racks are required for \" +\n+          \"the erasure coding policies: %s. \" +\n+              \"The number of racks is only %d.\",\n+          minRack, readablePolicies, numOfRacks);\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n     return new ECTopologyVerifierResult(true,\n         String.format(\"The cluster setup can support EC policies: %s\",\n             readablePolicies));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ECTopologyVerifierResult verifyECWithTopology(\n      final int minDN, final int minRack,\n      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n    String resultMessage;\n    if (numOfDataNodes \u003c minDN) {\n      resultMessage \u003d String.format(\"%d DataNodes are required for \" +\n              \"the erasure coding policies: %s. \" +\n              \"The number of DataNodes is only %d.\",\n          minDN, readablePolicies, numOfDataNodes);\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n\n    if (numOfRacks \u003c minRack) {\n      resultMessage \u003d String.format(\"%d racks are required for \" +\n          \"the erasure coding policies: %s. \" +\n              \"The number of racks is only %d.\",\n          minRack, readablePolicies, numOfRacks);\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n    return new ECTopologyVerifierResult(true,\n        String.format(\"The cluster setup can support EC policies: %s\",\n            readablePolicies));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
      "extendedDetails": {}
    },
    "5f15a60e329b8d0a495a977dc5255126814c5271": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14125. Use parameterized log format in ECTopologyVerifier. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "04/02/19 2:52 PM",
      "commitName": "5f15a60e329b8d0a495a977dc5255126814c5271",
      "commitAuthor": "Kitti Nanasi",
      "commitDateOld": "23/01/19 2:40 PM",
      "commitNameOld": "951cdd7e4cbe68284620f6805f85c51301150c58",
      "commitAuthorOld": "Kitti Nanasi",
      "daysBetweenCommits": 12.01,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private static ECTopologyVerifierResult verifyECWithTopology(\n       final int minDN, final int minRack,\n       final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n     String resultMessage;\n     if (numOfDataNodes \u003c minDN) {\n-      resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n-          + \") is less than the minimum required number of DataNodes (\"\n-          + minDN + \") for the erasure coding policies: \" + readablePolicies;\n+      resultMessage \u003d String.format(\"The number of DataNodes (%d) is less \" +\n+          \"than the minimum required number of DataNodes (%d) for the \" +\n+          \"erasure coding policies: %s\", numOfDataNodes, minDN,\n+          readablePolicies);\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n \n     if (numOfRacks \u003c minRack) {\n-      resultMessage \u003d \"The number of racks (\" + numOfRacks\n-          + \") is less than the minimum required number of racks (\"\n-          + minRack + \") for the erasure coding policies: \"\n-          + readablePolicies;\n+      resultMessage \u003d String.format(\"The number of racks (%d) is less than \" +\n+          \"the minimum required number of racks (%d) for the erasure \" +\n+          \"coding policies: %s\", numOfRacks, minRack, readablePolicies);\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n     return new ECTopologyVerifierResult(true,\n-        \"The cluster setup can support EC policies: \"\n-            + readablePolicies);\n+        String.format(\"The cluster setup can support EC policies: %s\",\n+            readablePolicies));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ECTopologyVerifierResult verifyECWithTopology(\n      final int minDN, final int minRack,\n      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n    String resultMessage;\n    if (numOfDataNodes \u003c minDN) {\n      resultMessage \u003d String.format(\"The number of DataNodes (%d) is less \" +\n          \"than the minimum required number of DataNodes (%d) for the \" +\n          \"erasure coding policies: %s\", numOfDataNodes, minDN,\n          readablePolicies);\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n\n    if (numOfRacks \u003c minRack) {\n      resultMessage \u003d String.format(\"The number of racks (%d) is less than \" +\n          \"the minimum required number of racks (%d) for the erasure \" +\n          \"coding policies: %s\", numOfRacks, minRack, readablePolicies);\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n    return new ECTopologyVerifierResult(true,\n        String.format(\"The cluster setup can support EC policies: %s\",\n            readablePolicies));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
      "extendedDetails": {}
    },
    "951cdd7e4cbe68284620f6805f85c51301150c58": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "23/01/19 2:40 PM",
      "commitName": "951cdd7e4cbe68284620f6805f85c51301150c58",
      "commitAuthor": "Kitti Nanasi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
          "commitDate": "23/01/19 2:40 PM",
          "commitName": "951cdd7e4cbe68284620f6805f85c51301150c58",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "03/12/18 10:01 AM",
          "commitNameOld": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
          "commitAuthorOld": "Kitti Nanasi",
          "daysBetweenCommits": 51.19,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n   private static ECTopologyVerifierResult verifyECWithTopology(\n       final int minDN, final int minRack,\n-      final int numOfRacks, final int numOfDataNodes) {\n+      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n     String resultMessage;\n     if (numOfDataNodes \u003c minDN) {\n       resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n           + \") is less than the minimum required number of DataNodes (\"\n-          + minDN + \") for enabled erasure coding policy.\";\n+          + minDN + \") for the erasure coding policies: \" + readablePolicies;\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n \n     if (numOfRacks \u003c minRack) {\n       resultMessage \u003d \"The number of racks (\" + numOfRacks\n           + \") is less than the minimum required number of racks (\"\n-          + minRack + \") for enabled erasure coding policy.\";\n+          + minRack + \") for the erasure coding policies: \"\n+          + readablePolicies;\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n     return new ECTopologyVerifierResult(true,\n-        \"The cluster setup can support all enabled EC policies\");\n+        \"The cluster setup can support EC policies: \"\n+            + readablePolicies);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ECTopologyVerifierResult verifyECWithTopology(\n      final int minDN, final int minRack,\n      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n    String resultMessage;\n    if (numOfDataNodes \u003c minDN) {\n      resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n          + \") is less than the minimum required number of DataNodes (\"\n          + minDN + \") for the erasure coding policies: \" + readablePolicies;\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n\n    if (numOfRacks \u003c minRack) {\n      resultMessage \u003d \"The number of racks (\" + numOfRacks\n          + \") is less than the minimum required number of racks (\"\n          + minRack + \") for the erasure coding policies: \"\n          + readablePolicies;\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n    return new ECTopologyVerifierResult(true,\n        \"The cluster setup can support EC policies: \"\n            + readablePolicies);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
          "extendedDetails": {
            "oldValue": "[minDN-int(modifiers-final), minRack-int(modifiers-final), numOfRacks-int(modifiers-final), numOfDataNodes-int(modifiers-final)]",
            "newValue": "[minDN-int(modifiers-final), minRack-int(modifiers-final), numOfRacks-int(modifiers-final), numOfDataNodes-int(modifiers-final), readablePolicies-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
          "commitDate": "23/01/19 2:40 PM",
          "commitName": "951cdd7e4cbe68284620f6805f85c51301150c58",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "03/12/18 10:01 AM",
          "commitNameOld": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
          "commitAuthorOld": "Kitti Nanasi",
          "daysBetweenCommits": 51.19,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n   private static ECTopologyVerifierResult verifyECWithTopology(\n       final int minDN, final int minRack,\n-      final int numOfRacks, final int numOfDataNodes) {\n+      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n     String resultMessage;\n     if (numOfDataNodes \u003c minDN) {\n       resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n           + \") is less than the minimum required number of DataNodes (\"\n-          + minDN + \") for enabled erasure coding policy.\";\n+          + minDN + \") for the erasure coding policies: \" + readablePolicies;\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n \n     if (numOfRacks \u003c minRack) {\n       resultMessage \u003d \"The number of racks (\" + numOfRacks\n           + \") is less than the minimum required number of racks (\"\n-          + minRack + \") for enabled erasure coding policy.\";\n+          + minRack + \") for the erasure coding policies: \"\n+          + readablePolicies;\n       LOG.debug(resultMessage);\n       return new ECTopologyVerifierResult(false, resultMessage);\n     }\n     return new ECTopologyVerifierResult(true,\n-        \"The cluster setup can support all enabled EC policies\");\n+        \"The cluster setup can support EC policies: \"\n+            + readablePolicies);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ECTopologyVerifierResult verifyECWithTopology(\n      final int minDN, final int minRack,\n      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {\n    String resultMessage;\n    if (numOfDataNodes \u003c minDN) {\n      resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n          + \") is less than the minimum required number of DataNodes (\"\n          + minDN + \") for the erasure coding policies: \" + readablePolicies;\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n\n    if (numOfRacks \u003c minRack) {\n      resultMessage \u003d \"The number of racks (\" + numOfRacks\n          + \") is less than the minimum required number of racks (\"\n          + minRack + \") for the erasure coding policies: \"\n          + readablePolicies;\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n    return new ECTopologyVerifierResult(true,\n        \"The cluster setup can support EC policies: \"\n            + readablePolicies);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
          "extendedDetails": {}
        }
      ]
    },
    "dd5e7c6b7239a93f2391beaa11181e442a387db4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12946. Add a tool to check rack configuration against EC policies. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "03/12/18 10:01 AM",
      "commitName": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
      "commitAuthor": "Kitti Nanasi",
      "diff": "@@ -0,0 +1,22 @@\n+  private static ECTopologyVerifierResult verifyECWithTopology(\n+      final int minDN, final int minRack,\n+      final int numOfRacks, final int numOfDataNodes) {\n+    String resultMessage;\n+    if (numOfDataNodes \u003c minDN) {\n+      resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n+          + \") is less than the minimum required number of DataNodes (\"\n+          + minDN + \") for enabled erasure coding policy.\";\n+      LOG.debug(resultMessage);\n+      return new ECTopologyVerifierResult(false, resultMessage);\n+    }\n+\n+    if (numOfRacks \u003c minRack) {\n+      resultMessage \u003d \"The number of racks (\" + numOfRacks\n+          + \") is less than the minimum required number of racks (\"\n+          + minRack + \") for enabled erasure coding policy.\";\n+      LOG.debug(resultMessage);\n+      return new ECTopologyVerifierResult(false, resultMessage);\n+    }\n+    return new ECTopologyVerifierResult(true,\n+        \"The cluster setup can support all enabled EC policies\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ECTopologyVerifierResult verifyECWithTopology(\n      final int minDN, final int minRack,\n      final int numOfRacks, final int numOfDataNodes) {\n    String resultMessage;\n    if (numOfDataNodes \u003c minDN) {\n      resultMessage \u003d \"The number of DataNodes (\" + numOfDataNodes\n          + \") is less than the minimum required number of DataNodes (\"\n          + minDN + \") for enabled erasure coding policy.\";\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n\n    if (numOfRacks \u003c minRack) {\n      resultMessage \u003d \"The number of racks (\" + numOfRacks\n          + \") is less than the minimum required number of racks (\"\n          + minRack + \") for enabled erasure coding policy.\";\n      LOG.debug(resultMessage);\n      return new ECTopologyVerifierResult(false, resultMessage);\n    }\n    return new ECTopologyVerifierResult(true,\n        \"The cluster setup can support all enabled EC policies\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java"
    }
  }
}