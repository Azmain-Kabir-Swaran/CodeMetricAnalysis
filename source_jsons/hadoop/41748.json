{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "updateCompletedContainers",
  "functionId": "updateCompletedContainers___completedContainers-List__ContainerStatus____releasedResources-Resource__nodeId-NodeId__schedulerNode-SchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 1097,
  "functionEndLine": 1135,
  "numCommitsSeen": 262,
  "timeTaken": 6101,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
    "352cbaa7a54a94bad2bed131d6a250c5b21a7701",
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "e9c72d04beddfe0252d2e81123a9fe66bdf04078": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": "Ybodychange",
    "352cbaa7a54a94bad2bed131d6a250c5b21a7701": "Ymultichange(Yparameterchange,Ybodychange)",
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n       Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n     int releasedContainers \u003d 0;\n     List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n-      LOG.debug(\"Container FINISHED: \" + containerId);\n+      LOG.debug(\"Container FINISHED: {}\", containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n       completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n       if (schedulerNode !\u003d null) {\n         schedulerNode.releaseContainer(containerId, true);\n       }\n \n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n       } else {\n         // Add containers which are untracked by RM.\n         untrackedContainerIdList.add(containerId);\n       }\n     }\n \n     // Acknowledge NM to remove RM-untracked-containers from NM context.\n     if (!untrackedContainerIdList.isEmpty()) {\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n               untrackedContainerIdList));\n     }\n \n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n    int releasedContainers \u003d 0;\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: {}\", containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (schedulerNode !\u003d null) {\n        schedulerNode.releaseContainer(containerId, true);\n      }\n\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "e9c72d04beddfe0252d2e81123a9fe66bdf04078": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7790. Improve Capacity Scheduler Async Scheduling to better handle node failures. Contributed by Wangda Tan.\n",
      "commitDate": "29/01/18 7:14 AM",
      "commitName": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7790. Improve Capacity Scheduler Async Scheduling to better handle node failures. Contributed by Wangda Tan.\n",
          "commitDate": "29/01/18 7:14 AM",
          "commitName": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/01/18 4:59 PM",
          "commitNameOld": "55066cc53dc22b68f9ca55a0029741d6c846be0a",
          "commitAuthorOld": "Miklos Szegedi",
          "daysBetweenCommits": 19.59,
          "commitsBetweenForRepo": 102,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n-      completedContainers, Resource releasedResources, NodeId nodeId) {\n+  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n+      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n     int releasedContainers \u003d 0;\n-    SchedulerNode node \u003d getNode(nodeId);\n     List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n       completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n-      if (node !\u003d null) {\n-        node.releaseContainer(containerId, true);\n+      if (schedulerNode !\u003d null) {\n+        schedulerNode.releaseContainer(containerId, true);\n       }\n \n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n       } else {\n         // Add containers which are untracked by RM.\n         untrackedContainerIdList.add(containerId);\n       }\n     }\n \n     // Acknowledge NM to remove RM-untracked-containers from NM context.\n     if (!untrackedContainerIdList.isEmpty()) {\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n               untrackedContainerIdList));\n     }\n \n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n    int releasedContainers \u003d 0;\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (schedulerNode !\u003d null) {\n        schedulerNode.releaseContainer(containerId, true);\n      }\n\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[completedContainers-List\u003cContainerStatus\u003e, releasedResources-Resource, nodeId-NodeId]",
            "newValue": "[completedContainers-List\u003cContainerStatus\u003e, releasedResources-Resource, nodeId-NodeId, schedulerNode-SchedulerNode]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7790. Improve Capacity Scheduler Async Scheduling to better handle node failures. Contributed by Wangda Tan.\n",
          "commitDate": "29/01/18 7:14 AM",
          "commitName": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/01/18 4:59 PM",
          "commitNameOld": "55066cc53dc22b68f9ca55a0029741d6c846be0a",
          "commitAuthorOld": "Miklos Szegedi",
          "daysBetweenCommits": 19.59,
          "commitsBetweenForRepo": 102,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n-      completedContainers, Resource releasedResources, NodeId nodeId) {\n+  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n+      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n     int releasedContainers \u003d 0;\n-    SchedulerNode node \u003d getNode(nodeId);\n     List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n       completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n-      if (node !\u003d null) {\n-        node.releaseContainer(containerId, true);\n+      if (schedulerNode !\u003d null) {\n+        schedulerNode.releaseContainer(containerId, true);\n       }\n \n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n       } else {\n         // Add containers which are untracked by RM.\n         untrackedContainerIdList.add(containerId);\n       }\n     }\n \n     // Acknowledge NM to remove RM-untracked-containers from NM context.\n     if (!untrackedContainerIdList.isEmpty()) {\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n               untrackedContainerIdList));\n     }\n \n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n    int releasedContainers \u003d 0;\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (schedulerNode !\u003d null) {\n        schedulerNode.releaseContainer(containerId, true);\n      }\n\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7790. Improve Capacity Scheduler Async Scheduling to better handle node failures. Contributed by Wangda Tan.\n",
          "commitDate": "29/01/18 7:14 AM",
          "commitName": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/01/18 4:59 PM",
          "commitNameOld": "55066cc53dc22b68f9ca55a0029741d6c846be0a",
          "commitAuthorOld": "Miklos Szegedi",
          "daysBetweenCommits": 19.59,
          "commitsBetweenForRepo": 102,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n-      completedContainers, Resource releasedResources, NodeId nodeId) {\n+  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n+      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n     int releasedContainers \u003d 0;\n-    SchedulerNode node \u003d getNode(nodeId);\n     List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n       completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n-      if (node !\u003d null) {\n-        node.releaseContainer(containerId, true);\n+      if (schedulerNode !\u003d null) {\n+        schedulerNode.releaseContainer(containerId, true);\n       }\n \n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n       } else {\n         // Add containers which are untracked by RM.\n         untrackedContainerIdList.add(containerId);\n       }\n     }\n \n     // Acknowledge NM to remove RM-untracked-containers from NM context.\n     if (!untrackedContainerIdList.isEmpty()) {\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n               untrackedContainerIdList));\n     }\n \n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int updateCompletedContainers(List\u003cContainerStatus\u003e completedContainers,\n      Resource releasedResources, NodeId nodeId, SchedulerNode schedulerNode) {\n    int releasedContainers \u003d 0;\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (schedulerNode !\u003d null) {\n        schedulerNode.releaseContainer(containerId, true);\n      }\n\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
      "commitDate": "09/01/17 6:14 PM",
      "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "09/01/17 8:40 AM",
      "commitNameOld": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,40 @@\n   protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n       completedContainers, Resource releasedResources, NodeId nodeId) {\n     int releasedContainers \u003d 0;\n+    SchedulerNode node \u003d getNode(nodeId);\n     List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n       completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n+      if (node !\u003d null) {\n+        node.releaseContainer(containerId, true);\n+      }\n+\n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n       } else {\n         // Add containers which are untracked by RM.\n         untrackedContainerIdList.add(containerId);\n       }\n     }\n \n     // Acknowledge NM to remove RM-untracked-containers from NM context.\n     if (!untrackedContainerIdList.isEmpty()) {\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n               untrackedContainerIdList));\n     }\n \n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n      completedContainers, Resource releasedResources, NodeId nodeId) {\n    int releasedContainers \u003d 0;\n    SchedulerNode node \u003d getNode(nodeId);\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (node !\u003d null) {\n        node.releaseContainer(containerId, true);\n      }\n\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "352cbaa7a54a94bad2bed131d6a250c5b21a7701": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4862. Handle duplicate completed containers in RMNodeImpl. Contributed by Rohith Sharma K S\n",
      "commitDate": "03/11/16 6:54 AM",
      "commitName": "352cbaa7a54a94bad2bed131d6a250c5b21a7701",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4862. Handle duplicate completed containers in RMNodeImpl. Contributed by Rohith Sharma K S\n",
          "commitDate": "03/11/16 6:54 AM",
          "commitName": "352cbaa7a54a94bad2bed131d6a250c5b21a7701",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "20/10/16 9:17 PM",
          "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 13.4,
          "commitsBetweenForRepo": 141,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,35 @@\n   protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n-      completedContainers, Resource releasedResources) {\n+      completedContainers, Resource releasedResources, NodeId nodeId) {\n     int releasedContainers \u003d 0;\n+    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n-      completedContainer(getRMContainer(containerId),\n+      completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n+      } else {\n+        // Add containers which are untracked by RM.\n+        untrackedContainerIdList.add(containerId);\n       }\n     }\n+\n+    // Acknowledge NM to remove RM-untracked-containers from NM context.\n+    if (!untrackedContainerIdList.isEmpty()) {\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n+              untrackedContainerIdList));\n+    }\n+\n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n      completedContainers, Resource releasedResources, NodeId nodeId) {\n    int releasedContainers \u003d 0;\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[completedContainers-List\u003cContainerStatus\u003e, releasedResources-Resource]",
            "newValue": "[completedContainers-List\u003cContainerStatus\u003e, releasedResources-Resource, nodeId-NodeId]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4862. Handle duplicate completed containers in RMNodeImpl. Contributed by Rohith Sharma K S\n",
          "commitDate": "03/11/16 6:54 AM",
          "commitName": "352cbaa7a54a94bad2bed131d6a250c5b21a7701",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "20/10/16 9:17 PM",
          "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 13.4,
          "commitsBetweenForRepo": 141,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,35 @@\n   protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n-      completedContainers, Resource releasedResources) {\n+      completedContainers, Resource releasedResources, NodeId nodeId) {\n     int releasedContainers \u003d 0;\n+    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       RMContainer container \u003d getRMContainer(containerId);\n-      completedContainer(getRMContainer(containerId),\n+      completedContainer(container,\n           completedContainer, RMContainerEventType.FINISHED);\n       if (container !\u003d null) {\n         releasedContainers++;\n         Resource ars \u003d container.getAllocatedResource();\n         if (ars !\u003d null) {\n           Resources.addTo(releasedResources, ars);\n         }\n         Resource rrs \u003d container.getReservedResource();\n         if (rrs !\u003d null) {\n           Resources.addTo(releasedResources, rrs);\n         }\n+      } else {\n+        // Add containers which are untracked by RM.\n+        untrackedContainerIdList.add(containerId);\n       }\n     }\n+\n+    // Acknowledge NM to remove RM-untracked-containers from NM context.\n+    if (!untrackedContainerIdList.isEmpty()) {\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n+              untrackedContainerIdList));\n+    }\n+\n     return releasedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n      completedContainers, Resource releasedResources, NodeId nodeId) {\n    int releasedContainers \u003d 0;\n    List\u003cContainerId\u003e untrackedContainerIdList \u003d new ArrayList\u003cContainerId\u003e();\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(container,\n          completedContainer, RMContainerEventType.FINISHED);\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      } else {\n        // Add containers which are untracked by RM.\n        untrackedContainerIdList.add(containerId);\n      }\n    }\n\n    // Acknowledge NM to remove RM-untracked-containers from NM context.\n    if (!untrackedContainerIdList.isEmpty()) {\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeFinishedContainersPulledByAMEvent(nodeId,\n              untrackedContainerIdList));\n    }\n\n    return releasedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5047. Refactor nodeUpdate across schedulers. (Ray Chiang via kasha)\n",
      "commitDate": "20/10/16 9:17 PM",
      "commitName": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,23 @@\n+  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n+      completedContainers, Resource releasedResources) {\n+    int releasedContainers \u003d 0;\n+    for (ContainerStatus completedContainer : completedContainers) {\n+      ContainerId containerId \u003d completedContainer.getContainerId();\n+      LOG.debug(\"Container FINISHED: \" + containerId);\n+      RMContainer container \u003d getRMContainer(containerId);\n+      completedContainer(getRMContainer(containerId),\n+          completedContainer, RMContainerEventType.FINISHED);\n+      if (container !\u003d null) {\n+        releasedContainers++;\n+        Resource ars \u003d container.getAllocatedResource();\n+        if (ars !\u003d null) {\n+          Resources.addTo(releasedResources, ars);\n+        }\n+        Resource rrs \u003d container.getReservedResource();\n+        if (rrs !\u003d null) {\n+          Resources.addTo(releasedResources, rrs);\n+        }\n+      }\n+    }\n+    return releasedContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int updateCompletedContainers(List\u003cContainerStatus\u003e\n      completedContainers, Resource releasedResources) {\n    int releasedContainers \u003d 0;\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      RMContainer container \u003d getRMContainer(containerId);\n      completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n      if (container !\u003d null) {\n        releasedContainers++;\n        Resource ars \u003d container.getAllocatedResource();\n        if (ars !\u003d null) {\n          Resources.addTo(releasedResources, ars);\n        }\n        Resource rrs \u003d container.getReservedResource();\n        if (rrs !\u003d null) {\n          Resources.addTo(releasedResources, rrs);\n        }\n      }\n    }\n    return releasedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}