{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyListingFileStatus.java",
  "functionName": "write",
  "functionId": "write___out-DataOutput",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
  "functionStartLine": 287,
  "functionEndLine": 333,
  "numCommitsSeen": 14,
  "timeTaken": 2349,
  "changeHistory": [
    "dd7916d3cd5d880d0b257d229f43f10feff04c93",
    "bf3fb585aaf2b179836e139c041fc87920a3c886",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03",
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05"
  ],
  "changeHistoryShort": {
    "dd7916d3cd5d880d0b257d229f43f10feff04c93": "Ybodychange",
    "bf3fb585aaf2b179836e139c041fc87920a3c886": "Ybodychange",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": "Ybodychange",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": "Ybodychange",
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea": "Ybodychange",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd7916d3cd5d880d0b257d229f43f10feff04c93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12250. Reduce usage of FsPermissionExtension in unit tests. Contributed by Chris Douglas.\n",
      "commitDate": "17/08/17 9:35 AM",
      "commitName": "dd7916d3cd5d880d0b257d229f43f10feff04c93",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 139.66,
      "commitsBetweenForRepo": 792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public void write(DataOutput out) throws IOException {\n     Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n     out.writeLong(getLen());\n     out.writeBoolean(isDirectory());\n     out.writeShort(getReplication());\n     out.writeLong(getBlockSize());\n     out.writeLong(getModificationTime());\n     out.writeLong(getAccessTime());\n-    getPermission().write(out);\n+    out.writeShort(getPermission().toShort());\n     Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n     Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n     if (aclEntries !\u003d null) {\n       // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n       out.writeByte(aclEntries.size());\n       for (AclEntry entry: aclEntries) {\n         out.writeByte(entry.getScope().ordinal());\n         out.writeByte(entry.getType().ordinal());\n         WritableUtils.writeString(out, entry.getName());\n         out.writeByte(entry.getPermission().ordinal());\n       }\n     } else {\n       out.writeByte(NO_ACL_ENTRIES);\n     }\n     \n     if (xAttrs !\u003d null) {\n       out.writeInt(xAttrs.size());\n       Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n       while (iter.hasNext()) {\n         Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n         WritableUtils.writeString(out, entry.getKey());\n         final byte[] value \u003d entry.getValue();\n         if (value !\u003d null) {\n           out.writeInt(value.length);\n           if (value.length \u003e 0) {\n             out.write(value);\n           }\n         } else {\n           out.writeInt(-1);\n         }\n       }\n     } else {\n       out.writeInt(NO_XATTRS);\n     }\n \n     out.writeLong(chunkOffset);\n     out.writeLong(chunkLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n    out.writeLong(getLen());\n    out.writeBoolean(isDirectory());\n    out.writeShort(getReplication());\n    out.writeLong(getBlockSize());\n    out.writeLong(getModificationTime());\n    out.writeLong(getAccessTime());\n    out.writeShort(getPermission().toShort());\n    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n    \n    if (xAttrs !\u003d null) {\n      out.writeInt(xAttrs.size());\n      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n      while (iter.hasNext()) {\n        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n        WritableUtils.writeString(out, entry.getKey());\n        final byte[] value \u003d entry.getValue();\n        if (value !\u003d null) {\n          out.writeInt(value.length);\n          if (value.length \u003e 0) {\n            out.write(value);\n          }\n        } else {\n          out.writeInt(-1);\n        }\n      }\n    } else {\n      out.writeInt(NO_XATTRS);\n    }\n\n    out.writeLong(chunkOffset);\n    out.writeLong(chunkLength);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
      "extendedDetails": {}
    },
    "bf3fb585aaf2b179836e139c041fc87920a3c886": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   public void write(DataOutput out) throws IOException {\n     Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n     out.writeLong(getLen());\n     out.writeBoolean(isDirectory());\n     out.writeShort(getReplication());\n     out.writeLong(getBlockSize());\n     out.writeLong(getModificationTime());\n     out.writeLong(getAccessTime());\n     getPermission().write(out);\n     Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n     Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n     if (aclEntries !\u003d null) {\n       // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n       out.writeByte(aclEntries.size());\n       for (AclEntry entry: aclEntries) {\n         out.writeByte(entry.getScope().ordinal());\n         out.writeByte(entry.getType().ordinal());\n         WritableUtils.writeString(out, entry.getName());\n         out.writeByte(entry.getPermission().ordinal());\n       }\n     } else {\n       out.writeByte(NO_ACL_ENTRIES);\n     }\n     \n     if (xAttrs !\u003d null) {\n       out.writeInt(xAttrs.size());\n       Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n       while (iter.hasNext()) {\n         Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n         WritableUtils.writeString(out, entry.getKey());\n         final byte[] value \u003d entry.getValue();\n         if (value !\u003d null) {\n           out.writeInt(value.length);\n           if (value.length \u003e 0) {\n             out.write(value);\n           }\n         } else {\n           out.writeInt(-1);\n         }\n       }\n     } else {\n       out.writeInt(NO_XATTRS);\n     }\n+\n+    out.writeLong(chunkOffset);\n+    out.writeLong(chunkLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n    out.writeLong(getLen());\n    out.writeBoolean(isDirectory());\n    out.writeShort(getReplication());\n    out.writeLong(getBlockSize());\n    out.writeLong(getModificationTime());\n    out.writeLong(getAccessTime());\n    getPermission().write(out);\n    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n    \n    if (xAttrs !\u003d null) {\n      out.writeInt(xAttrs.size());\n      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n      while (iter.hasNext()) {\n        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n        WritableUtils.writeString(out, entry.getKey());\n        final byte[] value \u003d entry.getValue();\n        if (value !\u003d null) {\n          out.writeInt(value.length);\n          if (value.length \u003e 0) {\n            out.write(value);\n          }\n        } else {\n          out.writeInt(-1);\n        }\n      }\n    } else {\n      out.writeInt(NO_XATTRS);\n    }\n\n    out.writeLong(chunkOffset);\n    out.writeLong(chunkLength);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
      "extendedDetails": {}
    },
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:01 PM",
      "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,44 @@\n   public void write(DataOutput out) throws IOException {\n     Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n     out.writeLong(getLen());\n     out.writeBoolean(isDirectory());\n     out.writeShort(getReplication());\n     out.writeLong(getBlockSize());\n     out.writeLong(getModificationTime());\n     out.writeLong(getAccessTime());\n     getPermission().write(out);\n     Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n     Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n     if (aclEntries !\u003d null) {\n       // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n       out.writeByte(aclEntries.size());\n       for (AclEntry entry: aclEntries) {\n         out.writeByte(entry.getScope().ordinal());\n         out.writeByte(entry.getType().ordinal());\n         WritableUtils.writeString(out, entry.getName());\n         out.writeByte(entry.getPermission().ordinal());\n       }\n     } else {\n       out.writeByte(NO_ACL_ENTRIES);\n     }\n     \n     if (xAttrs !\u003d null) {\n       out.writeInt(xAttrs.size());\n       Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n       while (iter.hasNext()) {\n         Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n         WritableUtils.writeString(out, entry.getKey());\n         final byte[] value \u003d entry.getValue();\n         if (value !\u003d null) {\n           out.writeInt(value.length);\n           if (value.length \u003e 0) {\n             out.write(value);\n           }\n         } else {\n           out.writeInt(-1);\n         }\n       }\n     } else {\n       out.writeInt(NO_XATTRS);\n     }\n-\n-    out.writeLong(chunkOffset);\n-    out.writeLong(chunkLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n    out.writeLong(getLen());\n    out.writeBoolean(isDirectory());\n    out.writeShort(getReplication());\n    out.writeLong(getBlockSize());\n    out.writeLong(getModificationTime());\n    out.writeLong(getAccessTime());\n    getPermission().write(out);\n    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n    \n    if (xAttrs !\u003d null) {\n      out.writeInt(xAttrs.size());\n      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n      while (iter.hasNext()) {\n        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n        WritableUtils.writeString(out, entry.getKey());\n        final byte[] value \u003d entry.getValue();\n        if (value !\u003d null) {\n          out.writeInt(value.length);\n          if (value.length \u003e 0) {\n            out.write(value);\n          }\n        } else {\n          out.writeInt(-1);\n        }\n      }\n    } else {\n      out.writeInt(NO_XATTRS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
      "extendedDetails": {}
    },
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
      "commitDate": "30/03/17 5:01 PM",
      "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "28/03/17 10:14 PM",
      "commitNameOld": "0e6f8e4bc6642f90dc7b33848bfb1129ec20ee49",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   public void write(DataOutput out) throws IOException {\n     Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n     out.writeLong(getLen());\n     out.writeBoolean(isDirectory());\n     out.writeShort(getReplication());\n     out.writeLong(getBlockSize());\n     out.writeLong(getModificationTime());\n     out.writeLong(getAccessTime());\n     getPermission().write(out);\n     Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n     Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n     if (aclEntries !\u003d null) {\n       // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n       out.writeByte(aclEntries.size());\n       for (AclEntry entry: aclEntries) {\n         out.writeByte(entry.getScope().ordinal());\n         out.writeByte(entry.getType().ordinal());\n         WritableUtils.writeString(out, entry.getName());\n         out.writeByte(entry.getPermission().ordinal());\n       }\n     } else {\n       out.writeByte(NO_ACL_ENTRIES);\n     }\n     \n     if (xAttrs !\u003d null) {\n       out.writeInt(xAttrs.size());\n       Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n       while (iter.hasNext()) {\n         Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n         WritableUtils.writeString(out, entry.getKey());\n         final byte[] value \u003d entry.getValue();\n         if (value !\u003d null) {\n           out.writeInt(value.length);\n           if (value.length \u003e 0) {\n             out.write(value);\n           }\n         } else {\n           out.writeInt(-1);\n         }\n       }\n     } else {\n       out.writeInt(NO_XATTRS);\n     }\n+\n+    out.writeLong(chunkOffset);\n+    out.writeLong(chunkLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n    out.writeLong(getLen());\n    out.writeBoolean(isDirectory());\n    out.writeShort(getReplication());\n    out.writeLong(getBlockSize());\n    out.writeLong(getModificationTime());\n    out.writeLong(getAccessTime());\n    getPermission().write(out);\n    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n    \n    if (xAttrs !\u003d null) {\n      out.writeInt(xAttrs.size());\n      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n      while (iter.hasNext()) {\n        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n        WritableUtils.writeString(out, entry.getKey());\n        final byte[] value \u003d entry.getValue();\n        if (value !\u003d null) {\n          out.writeInt(value.length);\n          if (value.length \u003e 0) {\n            out.write(value);\n          }\n        } else {\n          out.writeInt(-1);\n        }\n      }\n    } else {\n      out.writeInt(NO_XATTRS);\n    }\n\n    out.writeLong(chunkOffset);\n    out.writeLong(chunkLength);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
      "extendedDetails": {}
    },
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13626. Remove distcp dependency on FileStatus serialization\n",
      "commitDate": "24/10/16 12:46 PM",
      "commitName": "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "17/03/15 12:09 AM",
      "commitNameOld": "ef9946cd52d54200c658987c1dbc3e6fce133f77",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 587.53,
      "commitsBetweenForRepo": 4410,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,44 @@\n   public void write(DataOutput out) throws IOException {\n-    super.write(out);\n+    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n+    out.writeLong(getLen());\n+    out.writeBoolean(isDirectory());\n+    out.writeShort(getReplication());\n+    out.writeLong(getBlockSize());\n+    out.writeLong(getModificationTime());\n+    out.writeLong(getAccessTime());\n+    getPermission().write(out);\n+    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n+    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n     if (aclEntries !\u003d null) {\n       // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n       out.writeByte(aclEntries.size());\n       for (AclEntry entry: aclEntries) {\n         out.writeByte(entry.getScope().ordinal());\n         out.writeByte(entry.getType().ordinal());\n         WritableUtils.writeString(out, entry.getName());\n         out.writeByte(entry.getPermission().ordinal());\n       }\n     } else {\n       out.writeByte(NO_ACL_ENTRIES);\n     }\n     \n     if (xAttrs !\u003d null) {\n       out.writeInt(xAttrs.size());\n       Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n       while (iter.hasNext()) {\n         Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n         WritableUtils.writeString(out, entry.getKey());\n         final byte[] value \u003d entry.getValue();\n         if (value !\u003d null) {\n           out.writeInt(value.length);\n           if (value.length \u003e 0) {\n             out.write(value);\n           }\n         } else {\n           out.writeInt(-1);\n         }\n       }\n     } else {\n       out.writeInt(NO_XATTRS);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);\n    out.writeLong(getLen());\n    out.writeBoolean(isDirectory());\n    out.writeShort(getReplication());\n    out.writeLong(getBlockSize());\n    out.writeLong(getModificationTime());\n    out.writeLong(getAccessTime());\n    getPermission().write(out);\n    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);\n    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n    \n    if (xAttrs !\u003d null) {\n      out.writeInt(xAttrs.size());\n      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n      while (iter.hasNext()) {\n        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n        WritableUtils.writeString(out, entry.getKey());\n        final byte[] value \u003d entry.getValue();\n        if (value !\u003d null) {\n          out.writeInt(value.length);\n          if (value.length \u003e 0) {\n            out.write(value);\n          }\n        } else {\n          out.writeInt(-1);\n        }\n      }\n    } else {\n      out.writeInt(NO_XATTRS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
      "extendedDetails": {}
    },
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 7:45 AM",
      "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "16/05/14 11:25 AM",
      "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 20.85,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,35 @@\n   public void write(DataOutput out) throws IOException {\n     super.write(out);\n     if (aclEntries !\u003d null) {\n       // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n       out.writeByte(aclEntries.size());\n       for (AclEntry entry: aclEntries) {\n         out.writeByte(entry.getScope().ordinal());\n         out.writeByte(entry.getType().ordinal());\n         WritableUtils.writeString(out, entry.getName());\n         out.writeByte(entry.getPermission().ordinal());\n       }\n     } else {\n       out.writeByte(NO_ACL_ENTRIES);\n     }\n+    \n+    if (xAttrs !\u003d null) {\n+      out.writeInt(xAttrs.size());\n+      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n+      while (iter.hasNext()) {\n+        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n+        WritableUtils.writeString(out, entry.getKey());\n+        final byte[] value \u003d entry.getValue();\n+        if (value !\u003d null) {\n+          out.writeInt(value.length);\n+          if (value.length \u003e 0) {\n+            out.write(value);\n+          }\n+        } else {\n+          out.writeInt(-1);\n+        }\n+      }\n+    } else {\n+      out.writeInt(NO_XATTRS);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    super.write(out);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n    \n    if (xAttrs !\u003d null) {\n      out.writeInt(xAttrs.size());\n      Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d xAttrs.entrySet().iterator();\n      while (iter.hasNext()) {\n        Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n        WritableUtils.writeString(out, entry.getKey());\n        final byte[] value \u003d entry.getValue();\n        if (value !\u003d null) {\n          out.writeInt(value.length);\n          if (value.length \u003e 0) {\n            out.write(value);\n          }\n        } else {\n          out.writeInt(-1);\n        }\n      }\n    } else {\n      out.writeInt(NO_XATTRS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,15 @@\n+  public void write(DataOutput out) throws IOException {\n+    super.write(out);\n+    if (aclEntries !\u003d null) {\n+      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n+      out.writeByte(aclEntries.size());\n+      for (AclEntry entry: aclEntries) {\n+        out.writeByte(entry.getScope().ordinal());\n+        out.writeByte(entry.getType().ordinal());\n+        WritableUtils.writeString(out, entry.getName());\n+        out.writeByte(entry.getPermission().ordinal());\n+      }\n+    } else {\n+      out.writeByte(NO_ACL_ENTRIES);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    super.write(out);\n    if (aclEntries !\u003d null) {\n      // byte is sufficient, because 32 ACL entries is the max enforced by HDFS.\n      out.writeByte(aclEntries.size());\n      for (AclEntry entry: aclEntries) {\n        out.writeByte(entry.getScope().ordinal());\n        out.writeByte(entry.getType().ordinal());\n        WritableUtils.writeString(out, entry.getName());\n        out.writeByte(entry.getPermission().ordinal());\n      }\n    } else {\n      out.writeByte(NO_ACL_ENTRIES);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/CopyListingFileStatus.java"
    }
  }
}