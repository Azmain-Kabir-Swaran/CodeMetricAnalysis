{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MaxRunningAppsEnforcer.java",
  "functionName": "updateAppsRunnability",
  "functionId": "updateAppsRunnability___appsNowMaybeRunnable-List__List__FSAppAttempt______maxRunnableApps-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java",
  "functionStartLine": 229,
  "functionEndLine": 270,
  "numCommitsSeen": 11,
  "timeTaken": 1822,
  "changeHistory": [
    "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
    "22426a1c9f4bd616558089b6862fd34ab42d19a7"
  ],
  "changeHistoryShort": {
    "59ee8b7a88603e94b5661a8d5d088f7aa99fe049": "Ybodychange",
    "22426a1c9f4bd616558089b6862fd34ab42d19a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "59ee8b7a88603e94b5661a8d5d088f7aa99fe049": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4329. [YARN-5437] Allow fetching exact reason as to why a submitted app\nis in ACCEPTED state in Fair Scheduler (Contributed by Yufei Gu)\n",
      "commitDate": "09/11/16 1:11 PM",
      "commitName": "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "02/09/16 2:56 PM",
      "commitNameOld": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 67.97,
      "commitsBetweenForRepo": 531,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void updateAppsRunnability(List\u003cList\u003cFSAppAttempt\u003e\u003e\n       appsNowMaybeRunnable, int maxRunnableApps) {\n     // Scan through and check whether this means that any apps are now runnable\n     Iterator\u003cFSAppAttempt\u003e iter \u003d new MultiListStartTimeIterator(\n         appsNowMaybeRunnable);\n     FSAppAttempt prev \u003d null;\n     List\u003cFSAppAttempt\u003e noLongerPendingApps \u003d new ArrayList\u003cFSAppAttempt\u003e();\n     while (iter.hasNext()) {\n       FSAppAttempt next \u003d iter.next();\n       if (next \u003d\u003d prev) {\n         continue;\n       }\n \n-      if (canAppBeRunnable(next.getQueue(), next.getUser())) {\n+      if (canAppBeRunnable(next.getQueue(), next)) {\n         trackRunnableApp(next);\n         FSAppAttempt appSched \u003d next;\n         next.getQueue().addApp(appSched, true);\n         noLongerPendingApps.add(appSched);\n \n         if (noLongerPendingApps.size() \u003e\u003d maxRunnableApps) {\n           break;\n         }\n       }\n \n       prev \u003d next;\n     }\n     \n     // We remove the apps from their pending lists afterwards so that we don\u0027t\n     // pull them out from under the iterator.  If they are not in these lists\n     // in the first place, there is a bug.\n     for (FSAppAttempt appSched : noLongerPendingApps) {\n       if (!appSched.getQueue().removeNonRunnableApp(appSched)) {\n         LOG.error(\"Can\u0027t make app runnable that does not already exist in queue\"\n             + \" as non-runnable: \" + appSched + \". This should never happen.\");\n       }\n       \n       if (!usersNonRunnableApps.remove(appSched.getUser(), appSched)) {\n         LOG.error(\"Waiting app \" + appSched + \" expected to be in \"\n             + \"usersNonRunnableApps, but was not. This should never happen.\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateAppsRunnability(List\u003cList\u003cFSAppAttempt\u003e\u003e\n      appsNowMaybeRunnable, int maxRunnableApps) {\n    // Scan through and check whether this means that any apps are now runnable\n    Iterator\u003cFSAppAttempt\u003e iter \u003d new MultiListStartTimeIterator(\n        appsNowMaybeRunnable);\n    FSAppAttempt prev \u003d null;\n    List\u003cFSAppAttempt\u003e noLongerPendingApps \u003d new ArrayList\u003cFSAppAttempt\u003e();\n    while (iter.hasNext()) {\n      FSAppAttempt next \u003d iter.next();\n      if (next \u003d\u003d prev) {\n        continue;\n      }\n\n      if (canAppBeRunnable(next.getQueue(), next)) {\n        trackRunnableApp(next);\n        FSAppAttempt appSched \u003d next;\n        next.getQueue().addApp(appSched, true);\n        noLongerPendingApps.add(appSched);\n\n        if (noLongerPendingApps.size() \u003e\u003d maxRunnableApps) {\n          break;\n        }\n      }\n\n      prev \u003d next;\n    }\n    \n    // We remove the apps from their pending lists afterwards so that we don\u0027t\n    // pull them out from under the iterator.  If they are not in these lists\n    // in the first place, there is a bug.\n    for (FSAppAttempt appSched : noLongerPendingApps) {\n      if (!appSched.getQueue().removeNonRunnableApp(appSched)) {\n        LOG.error(\"Can\u0027t make app runnable that does not already exist in queue\"\n            + \" as non-runnable: \" + appSched + \". This should never happen.\");\n      }\n      \n      if (!usersNonRunnableApps.remove(appSched.getUser(), appSched)) {\n        LOG.error(\"Waiting app \" + appSched + \" expected to be in \"\n            + \"usersNonRunnableApps, but was not. This should never happen.\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java",
      "extendedDetails": {}
    },
    "22426a1c9f4bd616558089b6862fd34ab42d19a7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3231. FairScheduler: Changing queueMaxRunningApps interferes with pending jobs. (Siqi Li via kasha)\n",
      "commitDate": "04/03/15 6:06 PM",
      "commitName": "22426a1c9f4bd616558089b6862fd34ab42d19a7",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,42 @@\n+  private void updateAppsRunnability(List\u003cList\u003cFSAppAttempt\u003e\u003e\n+      appsNowMaybeRunnable, int maxRunnableApps) {\n+    // Scan through and check whether this means that any apps are now runnable\n+    Iterator\u003cFSAppAttempt\u003e iter \u003d new MultiListStartTimeIterator(\n+        appsNowMaybeRunnable);\n+    FSAppAttempt prev \u003d null;\n+    List\u003cFSAppAttempt\u003e noLongerPendingApps \u003d new ArrayList\u003cFSAppAttempt\u003e();\n+    while (iter.hasNext()) {\n+      FSAppAttempt next \u003d iter.next();\n+      if (next \u003d\u003d prev) {\n+        continue;\n+      }\n+\n+      if (canAppBeRunnable(next.getQueue(), next.getUser())) {\n+        trackRunnableApp(next);\n+        FSAppAttempt appSched \u003d next;\n+        next.getQueue().addApp(appSched, true);\n+        noLongerPendingApps.add(appSched);\n+\n+        if (noLongerPendingApps.size() \u003e\u003d maxRunnableApps) {\n+          break;\n+        }\n+      }\n+\n+      prev \u003d next;\n+    }\n+    \n+    // We remove the apps from their pending lists afterwards so that we don\u0027t\n+    // pull them out from under the iterator.  If they are not in these lists\n+    // in the first place, there is a bug.\n+    for (FSAppAttempt appSched : noLongerPendingApps) {\n+      if (!appSched.getQueue().removeNonRunnableApp(appSched)) {\n+        LOG.error(\"Can\u0027t make app runnable that does not already exist in queue\"\n+            + \" as non-runnable: \" + appSched + \". This should never happen.\");\n+      }\n+      \n+      if (!usersNonRunnableApps.remove(appSched.getUser(), appSched)) {\n+        LOG.error(\"Waiting app \" + appSched + \" expected to be in \"\n+            + \"usersNonRunnableApps, but was not. This should never happen.\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateAppsRunnability(List\u003cList\u003cFSAppAttempt\u003e\u003e\n      appsNowMaybeRunnable, int maxRunnableApps) {\n    // Scan through and check whether this means that any apps are now runnable\n    Iterator\u003cFSAppAttempt\u003e iter \u003d new MultiListStartTimeIterator(\n        appsNowMaybeRunnable);\n    FSAppAttempt prev \u003d null;\n    List\u003cFSAppAttempt\u003e noLongerPendingApps \u003d new ArrayList\u003cFSAppAttempt\u003e();\n    while (iter.hasNext()) {\n      FSAppAttempt next \u003d iter.next();\n      if (next \u003d\u003d prev) {\n        continue;\n      }\n\n      if (canAppBeRunnable(next.getQueue(), next.getUser())) {\n        trackRunnableApp(next);\n        FSAppAttempt appSched \u003d next;\n        next.getQueue().addApp(appSched, true);\n        noLongerPendingApps.add(appSched);\n\n        if (noLongerPendingApps.size() \u003e\u003d maxRunnableApps) {\n          break;\n        }\n      }\n\n      prev \u003d next;\n    }\n    \n    // We remove the apps from their pending lists afterwards so that we don\u0027t\n    // pull them out from under the iterator.  If they are not in these lists\n    // in the first place, there is a bug.\n    for (FSAppAttempt appSched : noLongerPendingApps) {\n      if (!appSched.getQueue().removeNonRunnableApp(appSched)) {\n        LOG.error(\"Can\u0027t make app runnable that does not already exist in queue\"\n            + \" as non-runnable: \" + appSched + \". This should never happen.\");\n      }\n      \n      if (!usersNonRunnableApps.remove(appSched.getUser(), appSched)) {\n        LOG.error(\"Waiting app \" + appSched + \" expected to be in \"\n            + \"usersNonRunnableApps, but was not. This should never happen.\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java"
    }
  }
}