{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineConnector.java",
  "functionName": "handle",
  "functionId": "handle___cr-ClientRequest(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineConnector.java",
  "functionStartLine": 388,
  "functionEndLine": 413,
  "numCommitsSeen": 56,
  "timeTaken": 3850,
  "changeHistory": [
    "221783b35bb78bda909c2417c7b9687d491fa196",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "b8a2d7b8fc96302ba1ef99d24392f463734f1b82",
    "3293a7d92d563e45dd69be4ed60c01ec94af8a21",
    "2e6ee957161ab63a02a7861b727efa6310b275b2",
    "b2942762d7f76d510ece5621c71116346a6b12f6",
    "89427419a3c5eaab0f73bae98d675979b9efab5f"
  ],
  "changeHistoryShort": {
    "221783b35bb78bda909c2417c7b9687d491fa196": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ymovefromfile",
    "b8a2d7b8fc96302ba1ef99d24392f463734f1b82": "Ybodychange",
    "3293a7d92d563e45dd69be4ed60c01ec94af8a21": "Ybodychange",
    "2e6ee957161ab63a02a7861b727efa6310b275b2": "Ybodychange",
    "b2942762d7f76d510ece5621c71116346a6b12f6": "Ymultichange(Ybodychange,Yparametermetachange)",
    "89427419a3c5eaab0f73bae98d675979b9efab5f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "221783b35bb78bda909c2417c7b9687d491fa196": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6294. ATS client should better handle Socket closed case. Contributed by Li Lu.\n",
      "commitDate": "15/03/17 11:48 AM",
      "commitName": "221783b35bb78bda909c2417c7b9687d491fa196",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/02/17 11:41 AM",
      "commitNameOld": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 26.96,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n       // Set up the retry operation\n       TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n         @Override\n         public Object run() {\n           // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n         }\n \n         @Override\n         public boolean shouldRetryOn(Exception e) {\n           // Only retry on connection exceptions\n           return (e instanceof ClientHandlerException)\n               \u0026\u0026 (e.getCause() instanceof ConnectException\n-                  || e.getCause() instanceof SocketTimeoutException);\n+                  || e.getCause() instanceof SocketTimeoutException\n+                  || e.getCause() instanceof SocketException);\n         }\n       };\n       try {\n         return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n       } catch (IOException e) {\n         throw new ClientHandlerException(\n             \"Jersey retry failed!\\nMessage: \" + e.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException\n                  || e.getCause() instanceof SocketTimeoutException\n                  || e.getCause() instanceof SocketException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\n            \"Jersey retry failed!\\nMessage: \" + e.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineConnector.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "16/02/17 5:39 AM",
      "commitNameOld": "5690b51ef7c708c0a71162ddaff04466bc71cdcc",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n       // Set up the retry operation\n       TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n         @Override\n         public Object run() {\n           // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n         }\n \n         @Override\n         public boolean shouldRetryOn(Exception e) {\n           // Only retry on connection exceptions\n           return (e instanceof ClientHandlerException)\n-              \u0026\u0026 (e.getCause() instanceof ConnectException ||\n-                  e.getCause() instanceof SocketTimeoutException);\n+              \u0026\u0026 (e.getCause() instanceof ConnectException\n+                  || e.getCause() instanceof SocketTimeoutException);\n         }\n       };\n       try {\n         return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n       } catch (IOException e) {\n-        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n-              + e.getMessage());\n+        throw new ClientHandlerException(\n+            \"Jersey retry failed!\\nMessage: \" + e.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException\n                  || e.getCause() instanceof SocketTimeoutException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\n            \"Jersey retry failed!\\nMessage: \" + e.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineConnector.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineConnector.java",
        "oldMethodName": "handle",
        "newMethodName": "handle"
      }
    },
    "b8a2d7b8fc96302ba1ef99d24392f463734f1b82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5539. TimelineClient failed to retry on java.net.SocketTimeoutException: Read timed out (Junping Du via Varun Saxena)\n",
      "commitDate": "23/09/16 12:57 AM",
      "commitName": "b8a2d7b8fc96302ba1ef99d24392f463734f1b82",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "23/09/16 12:55 AM",
      "commitNameOld": "3293a7d92d563e45dd69be4ed60c01ec94af8a21",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n       // Set up the retry operation\n       TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n         @Override\n         public Object run() {\n           // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n         }\n \n         @Override\n         public boolean shouldRetryOn(Exception e) {\n           // Only retry on connection exceptions\n           return (e instanceof ClientHandlerException)\n-              \u0026\u0026 (e.getCause() instanceof ConnectException);\n+              \u0026\u0026 (e.getCause() instanceof ConnectException ||\n+                  e.getCause() instanceof SocketTimeoutException);\n         }\n       };\n       try {\n         return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n       } catch (IOException e) {\n         throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n               + e.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException ||\n                  e.getCause() instanceof SocketTimeoutException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n              + e.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "3293a7d92d563e45dd69be4ed60c01ec94af8a21": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"TimelineClient failed to retry on java.net.SocketTimeoutException: Read timed out\"\n\nThis reverts commit 2e6ee957161ab63a02a7861b727efa6310b275b2.\n",
      "commitDate": "23/09/16 12:55 AM",
      "commitName": "3293a7d92d563e45dd69be4ed60c01ec94af8a21",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "23/09/16 12:53 AM",
      "commitNameOld": "2e6ee957161ab63a02a7861b727efa6310b275b2",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n     public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n       // Set up the retry operation\n       TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n         @Override\n         public Object run() {\n           // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n         }\n \n         @Override\n         public boolean shouldRetryOn(Exception e) {\n           // Only retry on connection exceptions\n           return (e instanceof ClientHandlerException)\n-              \u0026\u0026 (e.getCause() instanceof ConnectException ||\n-                  e.getCause() instanceof SocketTimeoutException);\n+              \u0026\u0026 (e.getCause() instanceof ConnectException);\n         }\n       };\n       try {\n         return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n       } catch (IOException e) {\n         throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n               + e.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n              + e.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "2e6ee957161ab63a02a7861b727efa6310b275b2": {
      "type": "Ybodychange",
      "commitMessage": "TimelineClient failed to retry on java.net.SocketTimeoutException: Read timed out\n",
      "commitDate": "23/09/16 12:53 AM",
      "commitName": "2e6ee957161ab63a02a7861b727efa6310b275b2",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "20/07/16 12:18 AM",
      "commitNameOld": "9ccf935b2cba5ac8a3e8124360d2203931397391",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 65.02,
      "commitsBetweenForRepo": 403,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n       // Set up the retry operation\n       TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n         @Override\n         public Object run() {\n           // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n         }\n \n         @Override\n         public boolean shouldRetryOn(Exception e) {\n           // Only retry on connection exceptions\n           return (e instanceof ClientHandlerException)\n-              \u0026\u0026 (e.getCause() instanceof ConnectException);\n+              \u0026\u0026 (e.getCause() instanceof ConnectException ||\n+                  e.getCause() instanceof SocketTimeoutException);\n         }\n       };\n       try {\n         return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n       } catch (IOException e) {\n         throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n               + e.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException ||\n                  e.getCause() instanceof SocketTimeoutException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n              + e.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "b2942762d7f76d510ece5621c71116346a6b12f6": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-2709. Made timeline client getDelegationToken API retry if ConnectException happens. Contributed by Li Lu.\n",
      "commitDate": "21/10/14 4:06 PM",
      "commitName": "b2942762d7f76d510ece5621c71116346a6b12f6",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2709. Made timeline client getDelegationToken API retry if ConnectException happens. Contributed by Li Lu.\n",
          "commitDate": "21/10/14 4:06 PM",
          "commitName": "b2942762d7f76d510ece5621c71116346a6b12f6",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "20/10/14 12:22 PM",
          "commitNameOld": "89427419a3c5eaab0f73bae98d675979b9efab5f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,24 @@\n-    public ClientResponse handle(ClientRequest cr)\n+    public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n-      int leftRetries \u003d maxRetries;\n-      retried \u003d false;\n-      // keep trying\n-      while (true) {\n-        try {\n-          // try pass the request on, if fail, keep retrying\n+      // Set up the retry operation\n+      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n+        @Override\n+        public Object run() {\n+          // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n-        } catch (ClientHandlerException e) {\n-          // break if there\u0027s no retries left\n-          if (leftRetries \u003d\u003d 0) {\n-            break;\n-          }\n-          if(e.getCause() instanceof ConnectException) {\n-            if (leftRetries \u003e 0) {\n-              LOG.info(\"Connection Timeout (\" + cr.getURI() + \"), will try \"\n-                  + leftRetries + \" more time(s).\");\n-            } else {\n-              // note that maxRetries may be -1 at the very beginning\n-              // maxRetries \u003d -1 means keep trying\n-              LOG.info(\"Connection Timeout (\" + cr.getURI()\n-                  + \"), will keep retrying.\");\n-            }\n-            retried \u003d true;\n-          } else {\n-            throw e;\n-          }\n         }\n-        if (leftRetries \u003e 0) {\n-          leftRetries--;\n+\n+        @Override\n+        public boolean shouldRetryOn(Exception e) {\n+          // Only retry on connection exceptions\n+          return (e instanceof ClientHandlerException)\n+              \u0026\u0026 (e.getCause() instanceof ConnectException);\n         }\n-        try {\n-          // sleep for the given time interval\n-          Thread.sleep(retryInterval);\n-        } catch (InterruptedException ie) {\n-          LOG.warn(\"Client retry sleep interrupted! \");\n-        }\n+      };\n+      try {\n+        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n+      } catch (IOException e) {\n+        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n+              + e.getMessage());\n       }\n-      throw new ClientHandlerException(\"Failed to connect to timeline server. \"\n-          + \"Connection retries limit exceeded. \"\n-          + \"The posted timeline event may be missing\");\n-    };\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n              + e.getMessage());\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-2709. Made timeline client getDelegationToken API retry if ConnectException happens. Contributed by Li Lu.\n",
          "commitDate": "21/10/14 4:06 PM",
          "commitName": "b2942762d7f76d510ece5621c71116346a6b12f6",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "20/10/14 12:22 PM",
          "commitNameOld": "89427419a3c5eaab0f73bae98d675979b9efab5f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,24 @@\n-    public ClientResponse handle(ClientRequest cr)\n+    public ClientResponse handle(final ClientRequest cr)\n         throws ClientHandlerException {\n-      int leftRetries \u003d maxRetries;\n-      retried \u003d false;\n-      // keep trying\n-      while (true) {\n-        try {\n-          // try pass the request on, if fail, keep retrying\n+      // Set up the retry operation\n+      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n+        @Override\n+        public Object run() {\n+          // Try pass the request, if fail, keep retrying\n           return getNext().handle(cr);\n-        } catch (ClientHandlerException e) {\n-          // break if there\u0027s no retries left\n-          if (leftRetries \u003d\u003d 0) {\n-            break;\n-          }\n-          if(e.getCause() instanceof ConnectException) {\n-            if (leftRetries \u003e 0) {\n-              LOG.info(\"Connection Timeout (\" + cr.getURI() + \"), will try \"\n-                  + leftRetries + \" more time(s).\");\n-            } else {\n-              // note that maxRetries may be -1 at the very beginning\n-              // maxRetries \u003d -1 means keep trying\n-              LOG.info(\"Connection Timeout (\" + cr.getURI()\n-                  + \"), will keep retrying.\");\n-            }\n-            retried \u003d true;\n-          } else {\n-            throw e;\n-          }\n         }\n-        if (leftRetries \u003e 0) {\n-          leftRetries--;\n+\n+        @Override\n+        public boolean shouldRetryOn(Exception e) {\n+          // Only retry on connection exceptions\n+          return (e instanceof ClientHandlerException)\n+              \u0026\u0026 (e.getCause() instanceof ConnectException);\n         }\n-        try {\n-          // sleep for the given time interval\n-          Thread.sleep(retryInterval);\n-        } catch (InterruptedException ie) {\n-          LOG.warn(\"Client retry sleep interrupted! \");\n-        }\n+      };\n+      try {\n+        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n+      } catch (IOException e) {\n+        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n+              + e.getMessage());\n       }\n-      throw new ClientHandlerException(\"Failed to connect to timeline server. \"\n-          + \"Connection retries limit exceeded. \"\n-          + \"The posted timeline event may be missing\");\n-    };\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public ClientResponse handle(final ClientRequest cr)\n        throws ClientHandlerException {\n      // Set up the retry operation\n      TimelineClientRetryOp jerseyRetryOp \u003d new TimelineClientRetryOp() {\n        @Override\n        public Object run() {\n          // Try pass the request, if fail, keep retrying\n          return getNext().handle(cr);\n        }\n\n        @Override\n        public boolean shouldRetryOn(Exception e) {\n          // Only retry on connection exceptions\n          return (e instanceof ClientHandlerException)\n              \u0026\u0026 (e.getCause() instanceof ConnectException);\n        }\n      };\n      try {\n        return (ClientResponse) connectionRetry.retryOn(jerseyRetryOp);\n      } catch (IOException e) {\n        throw new ClientHandlerException(\"Jersey retry failed!\\nMessage: \"\n              + e.getMessage());\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {
            "oldValue": "[cr-ClientRequest]",
            "newValue": "[cr-ClientRequest(modifiers-final)]"
          }
        }
      ]
    },
    "89427419a3c5eaab0f73bae98d675979b9efab5f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2673. Made timeline client put APIs retry if ConnectException happens. Contributed by Li Lu.\n",
      "commitDate": "20/10/14 12:22 PM",
      "commitName": "89427419a3c5eaab0f73bae98d675979b9efab5f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,43 @@\n+    public ClientResponse handle(ClientRequest cr)\n+        throws ClientHandlerException {\n+      int leftRetries \u003d maxRetries;\n+      retried \u003d false;\n+      // keep trying\n+      while (true) {\n+        try {\n+          // try pass the request on, if fail, keep retrying\n+          return getNext().handle(cr);\n+        } catch (ClientHandlerException e) {\n+          // break if there\u0027s no retries left\n+          if (leftRetries \u003d\u003d 0) {\n+            break;\n+          }\n+          if(e.getCause() instanceof ConnectException) {\n+            if (leftRetries \u003e 0) {\n+              LOG.info(\"Connection Timeout (\" + cr.getURI() + \"), will try \"\n+                  + leftRetries + \" more time(s).\");\n+            } else {\n+              // note that maxRetries may be -1 at the very beginning\n+              // maxRetries \u003d -1 means keep trying\n+              LOG.info(\"Connection Timeout (\" + cr.getURI()\n+                  + \"), will keep retrying.\");\n+            }\n+            retried \u003d true;\n+          } else {\n+            throw e;\n+          }\n+        }\n+        if (leftRetries \u003e 0) {\n+          leftRetries--;\n+        }\n+        try {\n+          // sleep for the given time interval\n+          Thread.sleep(retryInterval);\n+        } catch (InterruptedException ie) {\n+          LOG.warn(\"Client retry sleep interrupted! \");\n+        }\n+      }\n+      throw new ClientHandlerException(\"Failed to connect to timeline server. \"\n+          + \"Connection retries limit exceeded. \"\n+          + \"The posted timeline event may be missing\");\n+    };\n\\ No newline at end of file\n",
      "actualSource": "    public ClientResponse handle(ClientRequest cr)\n        throws ClientHandlerException {\n      int leftRetries \u003d maxRetries;\n      retried \u003d false;\n      // keep trying\n      while (true) {\n        try {\n          // try pass the request on, if fail, keep retrying\n          return getNext().handle(cr);\n        } catch (ClientHandlerException e) {\n          // break if there\u0027s no retries left\n          if (leftRetries \u003d\u003d 0) {\n            break;\n          }\n          if(e.getCause() instanceof ConnectException) {\n            if (leftRetries \u003e 0) {\n              LOG.info(\"Connection Timeout (\" + cr.getURI() + \"), will try \"\n                  + leftRetries + \" more time(s).\");\n            } else {\n              // note that maxRetries may be -1 at the very beginning\n              // maxRetries \u003d -1 means keep trying\n              LOG.info(\"Connection Timeout (\" + cr.getURI()\n                  + \"), will keep retrying.\");\n            }\n            retried \u003d true;\n          } else {\n            throw e;\n          }\n        }\n        if (leftRetries \u003e 0) {\n          leftRetries--;\n        }\n        try {\n          // sleep for the given time interval\n          Thread.sleep(retryInterval);\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Client retry sleep interrupted! \");\n        }\n      }\n      throw new ClientHandlerException(\"Failed to connect to timeline server. \"\n          + \"Connection retries limit exceeded. \"\n          + \"The posted timeline event may be missing\");\n    };",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}