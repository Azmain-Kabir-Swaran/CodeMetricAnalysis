{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeTimelineCollectorManager.java",
  "functionName": "startWebApp",
  "functionId": "startWebApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
  "functionStartLine": 272,
  "functionEndLine": 333,
  "numCommitsSeen": 26,
  "timeTaken": 5204,
  "changeHistory": [
    "8c6978c3baef96a333ebd7e98e02098c99df7313",
    "c0aeb666a4d43aac196569d9ec6768d62139d2b9",
    "879de51206ddef132c092ee21e8b6c6e5976a56e",
    "ae72f1dc7713f1b8125ba4af6d83ac872c2185c2",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
    "42e49399cecea39637434287948ba4c00ee805d4",
    "19c1132146df10ccafe93a2caf0dfcef3b288c43",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438",
    "9b5636408005676ae580f8d929f8e912c27828e7",
    "bf54d32750f8b27a170d7a0a8d8f022430327341",
    "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
    "9d57c9c0154051afebc5a27fa4ad792df4b969a5",
    "7c8abec0a8fc8b10f57438c60b77f48dac679b68"
  ],
  "changeHistoryShort": {
    "8c6978c3baef96a333ebd7e98e02098c99df7313": "Ybodychange",
    "c0aeb666a4d43aac196569d9ec6768d62139d2b9": "Ybodychange",
    "879de51206ddef132c092ee21e8b6c6e5976a56e": "Ybodychange",
    "ae72f1dc7713f1b8125ba4af6d83ac872c2185c2": "Ybodychange",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Ymovefromfile",
    "42e49399cecea39637434287948ba4c00ee805d4": "Ybodychange",
    "19c1132146df10ccafe93a2caf0dfcef3b288c43": "Ybodychange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Ymultichange(Yfilerename,Ybodychange)",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Ybodychange",
    "bf54d32750f8b27a170d7a0a8d8f022430327341": "Ymultichange(Ymovefromfile,Ybodychange)",
    "d45ff878c4cb8b359abb17ecf09d24b6f862874c": "Ybodychange",
    "9d57c9c0154051afebc5a27fa4ad792df4b969a5": "Ybodychange",
    "7c8abec0a8fc8b10f57438c60b77f48dac679b68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c6978c3baef96a333ebd7e98e02098c99df7313": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6149. Allow port range to be specified while starting NM Timeline collector manager. Contributed by Abhishek Modi.\n",
      "commitDate": "04/01/19 12:37 AM",
      "commitName": "8c6978c3baef96a333ebd7e98e02098c99df7313",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "19/12/17 8:59 AM",
      "commitNameOld": "c0aeb666a4d43aac196569d9ec6768d62139d2b9",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 380.65,
      "commitsBetweenForRepo": 3358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,62 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n     Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n     TimelineServerUtils.addTimelineAuthFilter(\n         initializers, defaultInitializers, tokenMgrService);\n     TimelineServerUtils.setTimelineFilters(\n         conf, initializers, defaultInitializers);\n \n     String bindAddress \u003d null;\n     String host \u003d\n         conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_HOST);\n+    Configuration.IntegerRanges portRanges \u003d conf.getRange(\n+        YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_PORT_RANGES, \"\");\n+    int startPort \u003d 0;\n+    if (portRanges !\u003d null \u0026\u0026 !portRanges.isEmpty()) {\n+      startPort \u003d portRanges.getRangeStart();\n+    }\n     if (host \u003d\u003d null || host.isEmpty()) {\n       // if collector bind-host is not set, fall back to\n       // timeline-service.bind-host to maintain compatibility\n       bindAddress \u003d\n           conf.get(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST,\n-              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST)\n+              + \":\" + startPort;\n     } else {\n-      bindAddress \u003d host + \":0\";\n+      bindAddress \u003d host + \":\" + startPort;\n     }\n \n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\n               (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                   bindAddress));\n+      if (portRanges !\u003d null \u0026\u0026 !portRanges.isEmpty()) {\n+        builder.setPortRanges(portRanges);\n+      }\n       if (YarnConfiguration.useHttps(conf)) {\n         builder \u003d WebAppUtils.loadSslConfiguration(builder, conf);\n       }\n       timelineRestServer \u003d builder.build();\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     //TODO: We need to think of the case of multiple interfaces\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         timelineRestServer.getConnectorAddress(0));\n     LOG.info(\"Instantiated the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n    Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n    TimelineServerUtils.addTimelineAuthFilter(\n        initializers, defaultInitializers, tokenMgrService);\n    TimelineServerUtils.setTimelineFilters(\n        conf, initializers, defaultInitializers);\n\n    String bindAddress \u003d null;\n    String host \u003d\n        conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_HOST);\n    Configuration.IntegerRanges portRanges \u003d conf.getRange(\n        YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_PORT_RANGES, \"\");\n    int startPort \u003d 0;\n    if (portRanges !\u003d null \u0026\u0026 !portRanges.isEmpty()) {\n      startPort \u003d portRanges.getRangeStart();\n    }\n    if (host \u003d\u003d null || host.isEmpty()) {\n      // if collector bind-host is not set, fall back to\n      // timeline-service.bind-host to maintain compatibility\n      bindAddress \u003d\n          conf.get(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST)\n              + \":\" + startPort;\n    } else {\n      bindAddress \u003d host + \":\" + startPort;\n    }\n\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\n              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                  bindAddress));\n      if (portRanges !\u003d null \u0026\u0026 !portRanges.isEmpty()) {\n        builder.setPortRanges(portRanges);\n      }\n      if (YarnConfiguration.useHttps(conf)) {\n        builder \u003d WebAppUtils.loadSslConfiguration(builder, conf);\n      }\n      timelineRestServer \u003d builder.build();\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    //TODO: We need to think of the case of multiple interfaces\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        timelineRestServer.getConnectorAddress(0));\n    LOG.info(\"Instantiated the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "c0aeb666a4d43aac196569d9ec6768d62139d2b9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7662. [ATSv2] Define new set of configurations for reader and collectors to bind (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "19/12/17 8:59 AM",
      "commitName": "c0aeb666a4d43aac196569d9ec6768d62139d2b9",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "7fd6ae24798cd3fdd77dbb00089a922407026e02",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 111.46,
      "commitsBetweenForRepo": 933,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,52 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n     Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n     TimelineServerUtils.addTimelineAuthFilter(\n         initializers, defaultInitializers, tokenMgrService);\n     TimelineServerUtils.setTimelineFilters(\n         conf, initializers, defaultInitializers);\n-    String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n-        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n+\n+    String bindAddress \u003d null;\n+    String host \u003d\n+        conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_HOST);\n+    if (host \u003d\u003d null || host.isEmpty()) {\n+      // if collector bind-host is not set, fall back to\n+      // timeline-service.bind-host to maintain compatibility\n+      bindAddress \u003d\n+          conf.get(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n+    } else {\n+      bindAddress \u003d host + \":0\";\n+    }\n+\n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\n               (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                   bindAddress));\n       if (YarnConfiguration.useHttps(conf)) {\n         builder \u003d WebAppUtils.loadSslConfiguration(builder, conf);\n       }\n       timelineRestServer \u003d builder.build();\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     //TODO: We need to think of the case of multiple interfaces\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         timelineRestServer.getConnectorAddress(0));\n     LOG.info(\"Instantiated the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n    Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n    TimelineServerUtils.addTimelineAuthFilter(\n        initializers, defaultInitializers, tokenMgrService);\n    TimelineServerUtils.setTimelineFilters(\n        conf, initializers, defaultInitializers);\n\n    String bindAddress \u003d null;\n    String host \u003d\n        conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_HOST);\n    if (host \u003d\u003d null || host.isEmpty()) {\n      // if collector bind-host is not set, fall back to\n      // timeline-service.bind-host to maintain compatibility\n      bindAddress \u003d\n          conf.get(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n    } else {\n      bindAddress \u003d host + \":0\";\n    }\n\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\n              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                  bindAddress));\n      if (YarnConfiguration.useHttps(conf)) {\n        builder \u003d WebAppUtils.loadSslConfiguration(builder, conf);\n      }\n      timelineRestServer \u003d builder.build();\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    //TODO: We need to think of the case of multiple interfaces\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        timelineRestServer.getConnectorAddress(0));\n    LOG.info(\"Instantiated the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "879de51206ddef132c092ee21e8b6c6e5976a56e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5647. [ATSv2 Security] Collector side changes for loading auth filters and principals. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "879de51206ddef132c092ee21e8b6c6e5976a56e",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/08/17 7:58 AM",
      "commitNameOld": "63cfcb90ac6fbb79ba9ed6b3044cd999fc74e58c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 20.63,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n+    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n+    Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n+    TimelineServerUtils.addTimelineAuthFilter(\n+        initializers, defaultInitializers, tokenMgrService);\n+    TimelineServerUtils.setTimelineFilters(\n+        conf, initializers, defaultInitializers);\n     String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\n               (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                   bindAddress));\n+      if (YarnConfiguration.useHttps(conf)) {\n+        builder \u003d WebAppUtils.loadSslConfiguration(builder, conf);\n+      }\n       timelineRestServer \u003d builder.build();\n-      // TODO: replace this by an authentication filter in future.\n-      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n-      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n-          DEFAULT_HADOOP_HTTP_STATIC_USER);\n-      options.put(HADOOP_HTTP_STATIC_USER, username);\n-      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n-          \"static_user_filter_timeline\",\n-          StaticUserWebFilter.StaticUserFilter.class.getName(),\n-          options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     //TODO: We need to think of the case of multiple interfaces\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         timelineRestServer.getConnectorAddress(0));\n     LOG.info(\"Instantiated the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n    Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n    TimelineServerUtils.addTimelineAuthFilter(\n        initializers, defaultInitializers, tokenMgrService);\n    TimelineServerUtils.setTimelineFilters(\n        conf, initializers, defaultInitializers);\n    String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\n              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                  bindAddress));\n      if (YarnConfiguration.useHttps(conf)) {\n        builder \u003d WebAppUtils.loadSslConfiguration(builder, conf);\n      }\n      timelineRestServer \u003d builder.build();\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    //TODO: We need to think of the case of multiple interfaces\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        timelineRestServer.getConnectorAddress(0));\n    LOG.info(\"Instantiated the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "ae72f1dc7713f1b8125ba4af6d83ac872c2185c2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4297. TestJobHistoryEventHandler and TestRMContainerAllocator failing on YARN-2928 branch (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "ae72f1dc7713f1b8125ba4af6d83ac872c2185c2",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n     try {\n-      Configuration confForInfoServer \u003d new Configuration(conf);\n-      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\n               (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                   bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     //TODO: We need to think of the case of multiple interfaces\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         timelineRestServer.getConnectorAddress(0));\n     LOG.info(\"Instantiated the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\n              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                  bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    //TODO: We need to think of the case of multiple interfaces\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        timelineRestServer.getConnectorAddress(0));\n    LOG.info(\"Instantiated the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\n              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                  bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    //TODO: We need to think of the case of multiple interfaces\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        timelineRestServer.getConnectorAddress(0));\n    LOG.info(\"Instantiated the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
        "oldMethodName": "startWebApp",
        "newMethodName": "startWebApp"
      }
    },
    "42e49399cecea39637434287948ba4c00ee805d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3374. Collector\u0027s web server should randomly bind an available port. Contributed by Zhijie Shen\n\n(cherry picked from commit 3aa898e734a1e4368ddf1d0bbd31f9b4de53ceba)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "42e49399cecea39637434287948ba4c00ee805d4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n-    // use the same ports as the old ATS for now; we could create new properties\n-    // for the new timeline service if needed\n-    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n-        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n-        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n-    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n-        NetUtils.createSocketAddr(bindAddress));\n-    LOG.info(\"Instantiating the per-node collector webapp at \" +\n-        timelineRestServerBindAddress);\n+    String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n-          .addEndpoint(URI.create(\"http://\" + bindAddress));\n+          .addEndpoint(URI.create(\n+              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n+                  bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n+    //TODO: We need to think of the case of multiple interfaces\n+    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n+        timelineRestServer.getConnectorAddress(0));\n+    LOG.info(\"Instantiated the per-node collector webapp at \" +\n+        timelineRestServerBindAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":0\";\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\n              (YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") +\n                  bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    //TODO: We need to think of the case of multiple interfaces\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        timelineRestServer.getConnectorAddress(0));\n    LOG.info(\"Instantiated the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "19c1132146df10ccafe93a2caf0dfcef3b288c43": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3377. Fixed test failure in TestTimelineServiceClientIntegration. Contributed by Sangjin Lee.\n\n(cherry picked from commit 04de2ceccd02edb00bd671a63e04855c132e9735)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "19c1132146df10ccafe93a2caf0dfcef3b288c43",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         NetUtils.createSocketAddr(bindAddress));\n     LOG.info(\"Instantiating the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n-      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY,\n-          TimelineCollectorManager.getInstance());\n+      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        NetUtils.createSocketAddr(bindAddress));\n    LOG.info(\"Instantiating the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         NetUtils.createSocketAddr(bindAddress));\n-    LOG.info(\"Instantiating the per-node aggregator webapp at \" + \n+    LOG.info(\"Instantiating the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n-          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n+          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n-      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n-          TimelineAggregatorsCollection.getInstance());\n+      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY,\n+          TimelineCollectorManager.getInstance());\n       timelineRestServer.start();\n     } catch (Exception e) {\n-      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n+      String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        NetUtils.createSocketAddr(bindAddress));\n    LOG.info(\"Instantiating the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY,\n          TimelineCollectorManager.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n         NetUtils.createSocketAddr(bindAddress));\n-    LOG.info(\"Instantiating the per-node aggregator webapp at \" + \n+    LOG.info(\"Instantiating the per-node collector webapp at \" +\n         timelineRestServerBindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n-          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n+          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n-      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n-          TimelineAggregatorsCollection.getInstance());\n+      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY,\n+          TimelineCollectorManager.getInstance());\n       timelineRestServer.start();\n     } catch (Exception e) {\n-      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n+      String msg \u003d \"The per-node collector webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        NetUtils.createSocketAddr(bindAddress));\n    LOG.info(\"Instantiating the per-node collector webapp at \" +\n        timelineRestServerBindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineCollectorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY,\n          TimelineCollectorManager.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node collector webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "bf54d32750f8b27a170d7a0a8d8f022430327341",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n-    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n+    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n+        NetUtils.createSocketAddr(bindAddress));\n+    LOG.info(\"Instantiating the per-node aggregator webapp at \" + \n+        timelineRestServerBindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n           TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n           TimelineAggregatorsCollection.getInstance());\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node aggregator webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    this.timelineRestServerBindAddress \u003d WebAppUtils.getResolvedAddress(\n        NetUtils.createSocketAddr(bindAddress));\n    LOG.info(\"Instantiating the per-node aggregator webapp at \" + \n        timelineRestServerBindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n          TimelineAggregatorsCollection.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
      "extendedDetails": {}
    },
    "bf54d32750f8b27a170d7a0a8d8f022430327341": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n-                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n-                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n+        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n-          PerNodeAggregatorWebService.class.getPackage().getName() + \";\"\n+          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n-          AppLevelServiceManager.getInstance());\n+          TimelineAggregatorsCollection.getInstance());\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node aggregator webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n          TimelineAggregatorsCollection.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorServer.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
            "oldMethodName": "startWebApp",
            "newMethodName": "startWebApp"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n-                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n-                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n+        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n       // TODO: replace this by an authentication filter in future.\n       HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n-          PerNodeAggregatorWebService.class.getPackage().getName() + \";\"\n+          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n-          AppLevelServiceManager.getInstance());\n+          TimelineAggregatorsCollection.getInstance());\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node aggregator webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          TimelineAggregatorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n          TimelineAggregatorsCollection.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
          "extendedDetails": {}
        }
      ]
    },
    "d45ff878c4cb8b359abb17ecf09d24b6f862874c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3125. Made the distributed shell use timeline service next gen and add an integration test for it. Contributed by Junping Du and Li Lu.\n\n(cherry picked from commit bf08f7f0ed4900ce52f98137297dd1a47ba2a536)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d57c9c0154051afebc5a27fa4ad792df4b969a5",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n     try {\n       Configuration confForInfoServer \u003d new Configuration(conf);\n       confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n           .setName(\"timeline\")\n           .setConf(conf)\n           .addEndpoint(URI.create(\"http://\" + bindAddress));\n       timelineRestServer \u003d builder.build();\n-      // TODO: replace this by an authentification filter in future.\n-      HashMap\u003cString, String\u003e options \u003d new HashMap\u003cString, String\u003e();\n+      // TODO: replace this by an authentication filter in future.\n+      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n       String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n           DEFAULT_HADOOP_HTTP_STATIC_USER);\n       options.put(HADOOP_HTTP_STATIC_USER, username);\n       HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n           \"static_user_filter_timeline\",\n           StaticUserWebFilter.StaticUserFilter.class.getName(),\n           options, new String[] {\"/*\"});\n \n       timelineRestServer.addJerseyResourcePackage(\n           PerNodeAggregatorWebService.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n           AppLevelServiceManager.getInstance());\n       timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node aggregator webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentication filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          PerNodeAggregatorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n          AppLevelServiceManager.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorServer.java",
      "extendedDetails": {}
    },
    "9d57c9c0154051afebc5a27fa4ad792df4b969a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3087. Made the REST server of per-node aggregator work alone in NM daemon. Conntributed by Li Lu.\n\n(cherry picked from commit 41a08ad404d4278fe598d6c222b2ae0e84bae0df)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d57c9c0154051afebc5a27fa4ad792df4b969a5",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,40 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // use the same ports as the old ATS for now; we could create new properties\n     // for the new timeline service if needed\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n     try {\n-      webApp \u003d\n-          WebApps\n-            .$for(\"timeline\", null, null, \"ws\")\n-            .with(conf).at(bindAddress).start(\n-                new TimelineServiceWebApp());\n+      Configuration confForInfoServer \u003d new Configuration(conf);\n+      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n+      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n+          .setName(\"timeline\")\n+          .setConf(conf)\n+          .addEndpoint(URI.create(\"http://\" + bindAddress));\n+      timelineRestServer \u003d builder.build();\n+      // TODO: replace this by an authentification filter in future.\n+      HashMap\u003cString, String\u003e options \u003d new HashMap\u003cString, String\u003e();\n+      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n+          DEFAULT_HADOOP_HTTP_STATIC_USER);\n+      options.put(HADOOP_HTTP_STATIC_USER, username);\n+      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n+          \"static_user_filter_timeline\",\n+          StaticUserWebFilter.StaticUserFilter.class.getName(),\n+          options, new String[] {\"/*\"});\n+\n+      timelineRestServer.addJerseyResourcePackage(\n+          PerNodeAggregatorWebService.class.getPackage().getName() + \";\"\n+              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n+              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n+          \"/*\");\n+      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n+          AppLevelServiceManager.getInstance());\n+      timelineRestServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"The per-node aggregator webapp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n    try {\n      Configuration confForInfoServer \u003d new Configuration(conf);\n      confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS, 10);\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n          .setName(\"timeline\")\n          .setConf(conf)\n          .addEndpoint(URI.create(\"http://\" + bindAddress));\n      timelineRestServer \u003d builder.build();\n      // TODO: replace this by an authentification filter in future.\n      HashMap\u003cString, String\u003e options \u003d new HashMap\u003cString, String\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      timelineRestServer.addJerseyResourcePackage(\n          PerNodeAggregatorWebService.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,\n          AppLevelServiceManager.getInstance());\n      timelineRestServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorServer.java",
      "extendedDetails": {}
    },
    "7c8abec0a8fc8b10f57438c60b77f48dac679b68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3030. Set up TS aggregator with basic request serving structure and lifecycle. Contributed by Sangjin Lee.\n\n(cherry picked from commit f26941b39028ac30c77547e2be2d657bb5bf044a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "7c8abec0a8fc8b10f57438c60b77f48dac679b68",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,20 @@\n+  private void startWebApp() {\n+    Configuration conf \u003d getConfig();\n+    // use the same ports as the old ATS for now; we could create new properties\n+    // for the new timeline service if needed\n+    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n+                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n+    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n+    try {\n+      webApp \u003d\n+          WebApps\n+            .$for(\"timeline\", null, null, \"ws\")\n+            .with(conf).at(bindAddress).start(\n+                new TimelineServiceWebApp());\n+    } catch (Exception e) {\n+      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n+      LOG.error(msg, e);\n+      throw new YarnRuntimeException(msg, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // use the same ports as the old ATS for now; we could create new properties\n    // for the new timeline service if needed\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating the per-node aggregator webapp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"timeline\", null, null, \"ws\")\n            .with(conf).at(bindAddress).start(\n                new TimelineServiceWebApp());\n    } catch (Exception e) {\n      String msg \u003d \"The per-node aggregator webapp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorServer.java"
    }
  }
}