{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FoldedTreeSet.java",
  "functionName": "addElementInNode",
  "functionId": "addElementInNode___node-Node__E____entry-E__index-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/FoldedTreeSet.java",
  "functionStartLine": 671,
  "functionEndLine": 721,
  "numCommitsSeen": 1,
  "timeTaken": 1403,
  "changeHistory": [
    "dd9ebf6eedfd4ff8b3486eae2a446de6b0c7fa8a"
  ],
  "changeHistoryShort": {
    "dd9ebf6eedfd4ff8b3486eae2a446de6b0c7fa8a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd9ebf6eedfd4ff8b3486eae2a446de6b0c7fa8a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9260. Improve the performance and GC friendliness of NameNode startup and full block reports (Staffan Friberg via cmccabe)\n",
      "commitDate": "02/02/16 11:23 AM",
      "commitName": "dd9ebf6eedfd4ff8b3486eae2a446de6b0c7fa8a",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,51 @@\n+  private void addElementInNode(Node\u003cE\u003e node, E entry, int index) {\n+    size++;\n+    modCount++;\n+\n+    if (!node.isFull()) {\n+      node.addEntryAt(entry, index);\n+    } else {\n+      // Node is full, insert and push old entry\n+      Node\u003cE\u003e prev \u003d node.prev;\n+      Node\u003cE\u003e next \u003d node.next;\n+      if (prev \u003d\u003d null) {\n+        // First check if we have space in the the next node\n+        if (next !\u003d null \u0026\u0026 !next.isFull()) {\n+          E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n+          next.addEntryLeft(movedEntry);\n+        } else {\n+          // Since prev is null the left child must be null\n+          assert node.left \u003d\u003d null;\n+          E movedEntry \u003d node.insertEntrySlideLeft(entry, index);\n+          Node\u003cE\u003e newNode \u003d cachedOrNewNode(movedEntry);\n+          attachNodeLeft(node, newNode);\n+        }\n+      } else if (!prev.isFull()) {\n+        // Prev has space\n+        E movedEntry \u003d node.insertEntrySlideLeft(entry, index);\n+        prev.addEntryRight(movedEntry);\n+      } else if (next \u003d\u003d null) {\n+        // Since next is null the right child must be null\n+        assert node.right \u003d\u003d null;\n+        E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n+        Node\u003cE\u003e newNode \u003d cachedOrNewNode(movedEntry);\n+        attachNodeRight(node, newNode);\n+      } else if (!next.isFull()) {\n+        // Next has space\n+        E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n+        next.addEntryLeft(movedEntry);\n+      } else {\n+        // Both prev and next nodes exist and are full\n+        E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n+        Node\u003cE\u003e newNode \u003d cachedOrNewNode(movedEntry);\n+        if (node.right \u003d\u003d null) {\n+          attachNodeRight(node, newNode);\n+        } else {\n+          // Since our right node exist,\n+          // the left node of our next node must be empty\n+          assert next.left \u003d\u003d null;\n+          attachNodeLeft(next, newNode);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addElementInNode(Node\u003cE\u003e node, E entry, int index) {\n    size++;\n    modCount++;\n\n    if (!node.isFull()) {\n      node.addEntryAt(entry, index);\n    } else {\n      // Node is full, insert and push old entry\n      Node\u003cE\u003e prev \u003d node.prev;\n      Node\u003cE\u003e next \u003d node.next;\n      if (prev \u003d\u003d null) {\n        // First check if we have space in the the next node\n        if (next !\u003d null \u0026\u0026 !next.isFull()) {\n          E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n          next.addEntryLeft(movedEntry);\n        } else {\n          // Since prev is null the left child must be null\n          assert node.left \u003d\u003d null;\n          E movedEntry \u003d node.insertEntrySlideLeft(entry, index);\n          Node\u003cE\u003e newNode \u003d cachedOrNewNode(movedEntry);\n          attachNodeLeft(node, newNode);\n        }\n      } else if (!prev.isFull()) {\n        // Prev has space\n        E movedEntry \u003d node.insertEntrySlideLeft(entry, index);\n        prev.addEntryRight(movedEntry);\n      } else if (next \u003d\u003d null) {\n        // Since next is null the right child must be null\n        assert node.right \u003d\u003d null;\n        E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n        Node\u003cE\u003e newNode \u003d cachedOrNewNode(movedEntry);\n        attachNodeRight(node, newNode);\n      } else if (!next.isFull()) {\n        // Next has space\n        E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n        next.addEntryLeft(movedEntry);\n      } else {\n        // Both prev and next nodes exist and are full\n        E movedEntry \u003d node.insertEntrySlideRight(entry, index);\n        Node\u003cE\u003e newNode \u003d cachedOrNewNode(movedEntry);\n        if (node.right \u003d\u003d null) {\n          attachNodeRight(node, newNode);\n        } else {\n          // Since our right node exist,\n          // the left node of our next node must be empty\n          assert next.left \u003d\u003d null;\n          attachNodeLeft(next, newNode);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/FoldedTreeSet.java"
    }
  }
}