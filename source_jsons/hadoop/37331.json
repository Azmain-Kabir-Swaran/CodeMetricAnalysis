{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractReservationSystem.java",
  "functionName": "recover",
  "functionId": "recover___state-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
  "functionStartLine": 197,
  "functionEndLine": 218,
  "numCommitsSeen": 15,
  "timeTaken": 1258,
  "changeHistory": [
    "2798723a5443d04455b9d79c48d61f435ab52267"
  ],
  "changeHistoryShort": {
    "2798723a5443d04455b9d79c48d61f435ab52267": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2798723a5443d04455b9d79c48d61f435ab52267": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3739. Add reservation system recovery to RM recovery process. Contributed by  Subru Krishnan.\n",
      "commitDate": "22/10/15 6:51 AM",
      "commitName": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthor": "Anubhav Dhoot",
      "diff": "@@ -0,0 +1,22 @@\n+  public void recover(RMState state) throws Exception {\n+    LOG.info(\"Recovering Reservation system\");\n+    writeLock.lock();\n+    try {\n+      Map\u003cString, Map\u003cReservationId, ReservationAllocationStateProto\u003e\u003e reservationSystemState \u003d\n+          state.getReservationState();\n+      if (planFollower !\u003d null) {\n+        for (String plan : plans.keySet()) {\n+          // recover reservations if any from state store\n+          if (reservationSystemState.containsKey(plan)) {\n+            loadPlan(plan, reservationSystemState.get(plan));\n+          }\n+          synchronizePlan(plan, false);\n+        }\n+        startPlanFollower(conf.getLong(\n+            YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n+            YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS));\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) throws Exception {\n    LOG.info(\"Recovering Reservation system\");\n    writeLock.lock();\n    try {\n      Map\u003cString, Map\u003cReservationId, ReservationAllocationStateProto\u003e\u003e reservationSystemState \u003d\n          state.getReservationState();\n      if (planFollower !\u003d null) {\n        for (String plan : plans.keySet()) {\n          // recover reservations if any from state store\n          if (reservationSystemState.containsKey(plan)) {\n            loadPlan(plan, reservationSystemState.get(plan));\n          }\n          synchronizePlan(plan, false);\n        }\n        startPlanFollower(conf.getLong(\n            YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n            YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java"
    }
  }
}