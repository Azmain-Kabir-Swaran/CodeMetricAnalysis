{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsConfiguration.java",
  "functionName": "getTokenProvider",
  "functionId": "getTokenProvider",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
  "functionStartLine": 618,
  "functionEndLine": 703,
  "numCommitsSeen": 39,
  "timeTaken": 4046,
  "changeHistory": [
    "4c5cd751e3911e350c7437dcb28c0ed67735f635",
    "3d69383c26649e272ce591061c919b8c96ee7cfc",
    "d1f5976c004292f35b0fc5efbc86273becc4a304",
    "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67",
    "e5593cbd8323399359b3e8da46bd58e8364cbf22",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1"
  ],
  "changeHistoryShort": {
    "4c5cd751e3911e350c7437dcb28c0ed67735f635": "Ybodychange",
    "3d69383c26649e272ce591061c919b8c96ee7cfc": "Ybodychange",
    "d1f5976c004292f35b0fc5efbc86273becc4a304": "Ybodychange",
    "1a77a15fe44df9ec837be5c558279d8fd4d25e97": "Ybodychange",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": "Ybodychange",
    "e5593cbd8323399359b3e8da46bd58e8364cbf22": "Ymultichange(Yparameterchange,Ybodychange)",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c5cd751e3911e350c7437dcb28c0ed67735f635": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-17053. ABFS: Fix Account-specific OAuth config setting parsing\n\nContributed by Sneha Vijayarajan",
      "commitDate": "27/05/20 1:56 PM",
      "commitName": "4c5cd751e3911e350c7437dcb28c0ed67735f635",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "19/05/20 12:30 PM",
      "commitNameOld": "8f78aeb2500011e568929b585ed5b0987355f88d",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,86 @@\n   public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n     AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n-                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n-                        AccessTokenProvider.class);\n+            getTokenProviderClass(authType,\n+            FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n+            AccessTokenProvider.class);\n+\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n           LOG.trace(\"ClientCredsTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n           String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n           LOG.trace(\"UserPasswordTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n           String authEndpoint \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n           String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String authority \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n           authority \u003d appendSlashIfNeeded(authority);\n           tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n               clientId, authority);\n           LOG.trace(\"MsiTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n           String authEndpoint \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n           String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n               clientId, refreshToken);\n           LOG.trace(\"RefreshTokenBasedTokenProvider initialized\");\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n-        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n+        throw new TokenAccessProviderException(\"Unable to load OAuth token provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n         String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n-        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n-                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n+\n+        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass\n+            \u003d getTokenProviderClass(authType, configKey, null,\n+            CustomTokenProviderAdaptee.class);\n+\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                 .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n         LOG.trace(\"Initializing {}\", customTokenProviderClass.getName());\n         azureTokenProvider.initialize(rawConfig, accountName);\n         LOG.trace(\"{} init complete\", customTokenProviderClass.getName());\n         return new CustomTokenProviderAdapter(azureTokenProvider, getCustomTokenFetchRetryCount());\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n            getTokenProviderClass(authType,\n            FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n            AccessTokenProvider.class);\n\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n          LOG.trace(\"ClientCredsTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n          LOG.trace(\"UserPasswordTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String authority \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n          authority \u003d appendSlashIfNeeded(authority);\n          tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n              clientId, authority);\n          LOG.trace(\"MsiTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n              clientId, refreshToken);\n          LOG.trace(\"RefreshTokenBasedTokenProvider initialized\");\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load OAuth token provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass\n            \u003d getTokenProviderClass(authType, configKey, null,\n            CustomTokenProviderAdaptee.class);\n\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        LOG.trace(\"Initializing {}\", customTokenProviderClass.getName());\n        azureTokenProvider.initialize(rawConfig, accountName);\n        LOG.trace(\"{} init complete\", customTokenProviderClass.getName());\n        return new CustomTokenProviderAdapter(azureTokenProvider, getCustomTokenFetchRetryCount());\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "3d69383c26649e272ce591061c919b8c96ee7cfc": {
      "type": "Ybodychange",
      "commitMessage": "Hadoop 16857. ABFS: Stop CustomTokenProvider retry logic to depend on AbfsRestOp retry policy\n\nContributed by Sneha Vijayarajan",
      "commitDate": "21/04/20 9:39 PM",
      "commitName": "3d69383c26649e272ce591061c919b8c96ee7cfc",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "21/04/20 9:37 AM",
      "commitNameOld": "264e49c8f2cfd15826655bbc1847f378f60ad8c7",
      "commitAuthorOld": "bilaharith",
      "daysBetweenCommits": 0.5,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n   public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n     AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                 getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                         AccessTokenProvider.class);\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n           LOG.trace(\"ClientCredsTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n           String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n           LOG.trace(\"UserPasswordTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n           String authEndpoint \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n           String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String authority \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n           authority \u003d appendSlashIfNeeded(authority);\n           tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n               clientId, authority);\n           LOG.trace(\"MsiTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n           String authEndpoint \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n           String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n               clientId, refreshToken);\n           LOG.trace(\"RefreshTokenBasedTokenProvider initialized\");\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n         String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n         Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                 getClass(configKey, null, CustomTokenProviderAdaptee.class);\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                 .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n         LOG.trace(\"Initializing {}\", customTokenProviderClass.getName());\n         azureTokenProvider.initialize(rawConfig, accountName);\n         LOG.trace(\"{} init complete\", customTokenProviderClass.getName());\n-        return new CustomTokenProviderAdapter(azureTokenProvider);\n+        return new CustomTokenProviderAdapter(azureTokenProvider, getCustomTokenFetchRetryCount());\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n          LOG.trace(\"ClientCredsTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n          LOG.trace(\"UserPasswordTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String authority \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n          authority \u003d appendSlashIfNeeded(authority);\n          tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n              clientId, authority);\n          LOG.trace(\"MsiTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n              clientId, refreshToken);\n          LOG.trace(\"RefreshTokenBasedTokenProvider initialized\");\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        LOG.trace(\"Initializing {}\", customTokenProviderClass.getName());\n        azureTokenProvider.initialize(rawConfig, accountName);\n        LOG.trace(\"{} init complete\", customTokenProviderClass.getName());\n        return new CustomTokenProviderAdapter(azureTokenProvider, getCustomTokenFetchRetryCount());\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "d1f5976c004292f35b0fc5efbc86273becc4a304": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16699. Add verbose TRACE logging to ABFS.\n\nContributed by Sneha Vijayarajan,\n\nChange-Id: Ic616a10406e6e9f11616c9cc05d8630ebbedaf65\n",
      "commitDate": "07/01/20 10:05 AM",
      "commitName": "d1f5976c004292f35b0fc5efbc86273becc4a304",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "27/11/19 7:56 AM",
      "commitNameOld": "9e69628f55be4acc040b7fe06cc22097238bb848",
      "commitAuthorOld": "bilaharith",
      "daysBetweenCommits": 41.09,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,81 @@\n   public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n     AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                 getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                         AccessTokenProvider.class);\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n+          LOG.trace(\"ClientCredsTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n           String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n+          LOG.trace(\"UserPasswordTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n           String authEndpoint \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n           String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String authority \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n           authority \u003d appendSlashIfNeeded(authority);\n           tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n               clientId, authority);\n+          LOG.trace(\"MsiTokenProvider initialized\");\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n           String authEndpoint \u003d getTrimmedPasswordString(\n               FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n               AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n           String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n               clientId, refreshToken);\n+          LOG.trace(\"RefreshTokenBasedTokenProvider initialized\");\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n         String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n         Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                 getClass(configKey, null, CustomTokenProviderAdaptee.class);\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                 .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n+        LOG.trace(\"Initializing {}\", customTokenProviderClass.getName());\n         azureTokenProvider.initialize(rawConfig, accountName);\n+        LOG.trace(\"{} init complete\", customTokenProviderClass.getName());\n         return new CustomTokenProviderAdapter(azureTokenProvider);\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n          LOG.trace(\"ClientCredsTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n          LOG.trace(\"UserPasswordTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String authority \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n          authority \u003d appendSlashIfNeeded(authority);\n          tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n              clientId, authority);\n          LOG.trace(\"MsiTokenProvider initialized\");\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n              clientId, refreshToken);\n          LOG.trace(\"RefreshTokenBasedTokenProvider initialized\");\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        LOG.trace(\"Initializing {}\", customTokenProviderClass.getName());\n        azureTokenProvider.initialize(rawConfig, accountName);\n        LOG.trace(\"{} init complete\", customTokenProviderClass.getName());\n        return new CustomTokenProviderAdapter(azureTokenProvider);\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "1a77a15fe44df9ec837be5c558279d8fd4d25e97": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16587. Make ABFS AAD endpoints configurable.\n\nContributed by Bilahari T H.\n\nThis also addresses HADOOP-16498: AzureADAuthenticator cannot authenticate\nin China.\n\nChange-Id: I2441dd48b50b59b912b0242f7f5a4418cf94a87c\n",
      "commitDate": "07/10/19 5:07 AM",
      "commitName": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
      "commitAuthor": "bilaharith",
      "commitDateOld": "28/09/19 8:39 PM",
      "commitNameOld": "c0edc848a8e71b5e2a1586a589bbf2ac8685040d",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 8.35,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,75 @@\n   public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n     AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                 getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                         AccessTokenProvider.class);\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n           String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n+          String authEndpoint \u003d getTrimmedPasswordString(\n+              FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n+              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n           String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n-          tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n+          String authority \u003d getTrimmedPasswordString(\n+              FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n+              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n+          authority \u003d appendSlashIfNeeded(authority);\n+          tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n+              clientId, authority);\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n+          String authEndpoint \u003d getTrimmedPasswordString(\n+              FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n+              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n           String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n-          tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n+          tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n+              clientId, refreshToken);\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n         String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n         Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                 getClass(configKey, null, CustomTokenProviderAdaptee.class);\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                 .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n         azureTokenProvider.initialize(rawConfig, accountName);\n         return new CustomTokenProviderAdapter(azureTokenProvider);\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_ENDPOINT);\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String authority \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_MSI_AUTHORITY);\n          authority \u003d appendSlashIfNeeded(authority);\n          tokenProvider \u003d new MsiTokenProvider(authEndpoint, tenantGuid,\n              clientId, authority);\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String authEndpoint \u003d getTrimmedPasswordString(\n              FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT,\n              AuthConfigurations.DEFAULT_FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN_ENDPOINT);\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(authEndpoint,\n              clientId, refreshToken);\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        azureTokenProvider.initialize(rawConfig, accountName);\n        return new CustomTokenProviderAdapter(azureTokenProvider);\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.\n\nContributed by Steve Loughran.\n",
      "commitDate": "28/02/19 6:22 AM",
      "commitName": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/02/19 1:58 PM",
      "commitNameOld": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 20.68,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n     AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                 getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                         AccessTokenProvider.class);\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n           String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n           String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n           String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n           String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n           String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n           String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n         String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n         Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                 getClass(configKey, null, CustomTokenProviderAdaptee.class);\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                 .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n         azureTokenProvider.initialize(rawConfig, accountName);\n         return new CustomTokenProviderAdapter(azureTokenProvider);\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n-        throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n+        throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        azureTokenProvider.initialize(rawConfig, accountName);\n        return new CustomTokenProviderAdapter(azureTokenProvider);\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class: \" + e, e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "e5593cbd8323399359b3e8da46bd58e8364cbf22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
      "commitAuthor": "Thomas Marquardt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "97f06b3fc70ad509e601076c015bc244daa1243f",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,63 @@\n-  public AccessTokenProvider getTokenProvider(final String accountName) throws TokenAccessProviderException {\n-    AuthType authType \u003d configuration.getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME + accountName, AuthType.SharedKey);\n+  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n+    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n-                configuration.getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName, null,\n+                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                         AccessTokenProvider.class);\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n-          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n-          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n-          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET + accountName);\n+          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n+          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n-          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n-          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME + accountName);\n-          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD + accountName);\n+          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n+          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n+          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n-          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT + accountName);\n-          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n-          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN + accountName);\n-          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n-        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName;\n+        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n         Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n-                configuration.getClass(configKey, null,\n-                        CustomTokenProviderAdaptee.class);\n+                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n-                .newInstance(customTokenProviderClass, configuration);\n+                .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n-        azureTokenProvider.initialize(configuration, accountName);\n+        azureTokenProvider.initialize(rawConfig, accountName);\n         return new CustomTokenProviderAdapter(azureTokenProvider);\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        azureTokenProvider.initialize(rawConfig, accountName);\n        return new CustomTokenProviderAdapter(azureTokenProvider);\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {
            "oldValue": "[accountName-String(modifiers-final)]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "97f06b3fc70ad509e601076c015bc244daa1243f",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,63 @@\n-  public AccessTokenProvider getTokenProvider(final String accountName) throws TokenAccessProviderException {\n-    AuthType authType \u003d configuration.getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME + accountName, AuthType.SharedKey);\n+  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n+    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType \u003d\u003d AuthType.OAuth) {\n       try {\n         Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n-                configuration.getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName, null,\n+                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                         AccessTokenProvider.class);\n         AccessTokenProvider tokenProvider \u003d null;\n         if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n-          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n-          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n-          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET + accountName);\n+          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n+          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n           tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n         } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n-          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n-          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME + accountName);\n-          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD + accountName);\n+          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n+          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n+          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n           tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n         } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n-          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT + accountName);\n-          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n         } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n-          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN + accountName);\n-          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n           tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n         } else {\n           throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n         }\n         return tokenProvider;\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n       }\n \n     } else if (authType \u003d\u003d AuthType.Custom) {\n       try {\n-        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName;\n+        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n         Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n-                configuration.getClass(configKey, null,\n-                        CustomTokenProviderAdaptee.class);\n+                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n         if (customTokenProviderClass \u003d\u003d null) {\n           throw new IllegalArgumentException(\n                   String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n         }\n         CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n-                .newInstance(customTokenProviderClass, configuration);\n+                .newInstance(customTokenProviderClass, rawConfig);\n         if (azureTokenProvider \u003d\u003d null) {\n           throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n         }\n-        azureTokenProvider.initialize(configuration, accountName);\n+        azureTokenProvider.initialize(rawConfig, accountName);\n         return new CustomTokenProviderAdapter(azureTokenProvider);\n       } catch(IllegalArgumentException e) {\n         throw e;\n       } catch (Exception e) {\n         throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n       }\n \n     } else {\n       throw new TokenAccessProviderException(String.format(\n               \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AccessTokenProvider getTokenProvider() throws TokenAccessProviderException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                getClass(configKey, null, CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, rawConfig);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        azureTokenProvider.initialize(rawConfig, accountName);\n        return new CustomTokenProviderAdapter(azureTokenProvider);\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {}
        }
      ]
    },
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15660. ABFS: Add support for OAuth\nContributed by Da Zhou, Rajeev Bansal, and Junhua Gu.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,64 @@\n+  public AccessTokenProvider getTokenProvider(final String accountName) throws TokenAccessProviderException {\n+    AuthType authType \u003d configuration.getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME + accountName, AuthType.SharedKey);\n+    if (authType \u003d\u003d AuthType.OAuth) {\n+      try {\n+        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n+                configuration.getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName, null,\n+                        AccessTokenProvider.class);\n+        AccessTokenProvider tokenProvider \u003d null;\n+        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n+          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET + accountName);\n+          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n+        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n+          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n+          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME + accountName);\n+          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD + accountName);\n+          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n+        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n+          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT + accountName);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n+        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n+          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN + accountName);\n+          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n+          tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n+        } else {\n+          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n+        }\n+        return tokenProvider;\n+      } catch(IllegalArgumentException e) {\n+        throw e;\n+      } catch (Exception e) {\n+        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n+      }\n+\n+    } else if (authType \u003d\u003d AuthType.Custom) {\n+      try {\n+        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName;\n+        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n+                configuration.getClass(configKey, null,\n+                        CustomTokenProviderAdaptee.class);\n+        if (customTokenProviderClass \u003d\u003d null) {\n+          throw new IllegalArgumentException(\n+                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n+        }\n+        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n+                .newInstance(customTokenProviderClass, configuration);\n+        if (azureTokenProvider \u003d\u003d null) {\n+          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n+        }\n+        azureTokenProvider.initialize(configuration, accountName);\n+        return new CustomTokenProviderAdapter(azureTokenProvider);\n+      } catch(IllegalArgumentException e) {\n+        throw e;\n+      } catch (Exception e) {\n+        throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n+      }\n+\n+    } else {\n+      throw new TokenAccessProviderException(String.format(\n+              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AccessTokenProvider getTokenProvider(final String accountName) throws TokenAccessProviderException {\n    AuthType authType \u003d configuration.getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME + accountName, AuthType.SharedKey);\n    if (authType \u003d\u003d AuthType.OAuth) {\n      try {\n        Class\u003c? extends AccessTokenProvider\u003e tokenProviderClass \u003d\n                configuration.getClass(FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName, null,\n                        AccessTokenProvider.class);\n        AccessTokenProvider tokenProvider \u003d null;\n        if (tokenProviderClass \u003d\u003d ClientCredsTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n          String clientSecret \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET + accountName);\n          tokenProvider \u003d new ClientCredsTokenProvider(authEndpoint, clientId, clientSecret);\n        } else if (tokenProviderClass \u003d\u003d UserPasswordTokenProvider.class) {\n          String authEndpoint \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT + accountName);\n          String username \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_NAME + accountName);\n          String password \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD + accountName);\n          tokenProvider \u003d new UserPasswordTokenProvider(authEndpoint, username, password);\n        } else if (tokenProviderClass \u003d\u003d MsiTokenProvider.class) {\n          String tenantGuid \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT + accountName);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n          tokenProvider \u003d new MsiTokenProvider(tenantGuid, clientId);\n        } else if (tokenProviderClass \u003d\u003d RefreshTokenBasedTokenProvider.class) {\n          String refreshToken \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN + accountName);\n          String clientId \u003d getPasswordString(FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID + accountName);\n          tokenProvider \u003d new RefreshTokenBasedTokenProvider(clientId, refreshToken);\n        } else {\n          throw new IllegalArgumentException(\"Failed to initialize \" + tokenProviderClass);\n        }\n        return tokenProvider;\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load key provider class.\", e);\n      }\n\n    } else if (authType \u003d\u003d AuthType.Custom) {\n      try {\n        String configKey \u003d FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME + accountName;\n        Class\u003c? extends CustomTokenProviderAdaptee\u003e customTokenProviderClass \u003d\n                configuration.getClass(configKey, null,\n                        CustomTokenProviderAdaptee.class);\n        if (customTokenProviderClass \u003d\u003d null) {\n          throw new IllegalArgumentException(\n                  String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n        }\n        CustomTokenProviderAdaptee azureTokenProvider \u003d ReflectionUtils\n                .newInstance(customTokenProviderClass, configuration);\n        if (azureTokenProvider \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Failed to initialize \" + customTokenProviderClass);\n        }\n        azureTokenProvider.initialize(configuration, accountName);\n        return new CustomTokenProviderAdapter(azureTokenProvider);\n      } catch(IllegalArgumentException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new TokenAccessProviderException(\"Unable to load custom token provider class.\", e);\n      }\n\n    } else {\n      throw new TokenAccessProviderException(String.format(\n              \"Invalid auth type: %s is being used, expecting OAuth\", authType));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java"
    }
  }
}