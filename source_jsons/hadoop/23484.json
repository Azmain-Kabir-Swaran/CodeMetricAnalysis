{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryFileManager.java",
  "functionName": "scanIfNeeded",
  "functionId": "scanIfNeeded___fs-FileStatus",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
  "functionStartLine": 320,
  "functionEndLine": 355,
  "numCommitsSeen": 44,
  "timeTaken": 1973,
  "changeHistory": [
    "5670e89b2ec69ab71e32dcd5acbd3a57ca6abea5",
    "1e48eefe5800975ea0c4295c9911ae3f572ed37d",
    "0928502029ef141759008997335ea2cd836a7154",
    "03b7ad04fadeb1a98271ac1775f900999989eafb"
  ],
  "changeHistoryShort": {
    "5670e89b2ec69ab71e32dcd5acbd3a57ca6abea5": "Ybodychange",
    "1e48eefe5800975ea0c4295c9911ae3f572ed37d": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ybodychange",
    "03b7ad04fadeb1a98271ac1775f900999989eafb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5670e89b2ec69ab71e32dcd5acbd3a57ca6abea5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7101. Add config parameter to allow JHS to alway scan user dir irrespective of modTime. (Thomas Marquardt via asuresh)\n",
      "commitDate": "12/06/18 3:36 PM",
      "commitName": "5670e89b2ec69ab71e32dcd5acbd3a57ca6abea5",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/01/18 12:44 PM",
      "commitNameOld": "cff9edd4b514bdcfe22cd49964e3707fb78ab876",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 139.08,
      "commitsBetweenForRepo": 1631,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n     public synchronized void scanIfNeeded(FileStatus fs) {\n       long newModTime \u003d fs.getModificationTime();\n       // MAPREDUCE-6680: In some Cloud FileSystem, like Azure FS or S3, file\u0027s\n       // modification time is truncated into seconds. In that case,\n       // modTime \u003d\u003d newModTime doesn\u0027t means no file update in the directory,\n       // so we need to have additional check.\n       // Note: modTime (X second Y millisecond) could be casted to X second or\n       // X+1 second.\n-      if (modTime !\u003d newModTime\n+      // MAPREDUCE-7101: Some Cloud FileSystems do not currently update the\n+      // modification time of directories. For these, we scan every time if\n+      // the \u0027alwaysScan\u0027 is true.\n+      boolean alwaysScan \u003d conf.getBoolean(\n+          JHAdminConfig.MR_HISTORY_ALWAYS_SCAN_USER_DIR,\n+          JHAdminConfig.DEFAULT_MR_HISTORY_ALWAYS_SCAN_USER_DIR);\n+      if (alwaysScan || modTime !\u003d newModTime\n           || (scanTime/1000) \u003d\u003d (modTime/1000)\n           || (scanTime/1000 + 1) \u003d\u003d (modTime/1000)) {\n         // reset scanTime before scanning happens\n         scanTime \u003d System.currentTimeMillis();\n         Path p \u003d fs.getPath();\n         try {\n           scanIntermediateDirectory(p);\n           //If scanning fails, we will scan again.  We assume the failure is\n           // temporary.\n           modTime \u003d newModTime;\n         } catch (IOException e) {\n           LOG.error(\"Error while trying to scan the directory \" + p, e);\n         }\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Scan not needed of \" + fs.getPath());\n         }\n         // reset scanTime\n         scanTime \u003d System.currentTimeMillis();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void scanIfNeeded(FileStatus fs) {\n      long newModTime \u003d fs.getModificationTime();\n      // MAPREDUCE-6680: In some Cloud FileSystem, like Azure FS or S3, file\u0027s\n      // modification time is truncated into seconds. In that case,\n      // modTime \u003d\u003d newModTime doesn\u0027t means no file update in the directory,\n      // so we need to have additional check.\n      // Note: modTime (X second Y millisecond) could be casted to X second or\n      // X+1 second.\n      // MAPREDUCE-7101: Some Cloud FileSystems do not currently update the\n      // modification time of directories. For these, we scan every time if\n      // the \u0027alwaysScan\u0027 is true.\n      boolean alwaysScan \u003d conf.getBoolean(\n          JHAdminConfig.MR_HISTORY_ALWAYS_SCAN_USER_DIR,\n          JHAdminConfig.DEFAULT_MR_HISTORY_ALWAYS_SCAN_USER_DIR);\n      if (alwaysScan || modTime !\u003d newModTime\n          || (scanTime/1000) \u003d\u003d (modTime/1000)\n          || (scanTime/1000 + 1) \u003d\u003d (modTime/1000)) {\n        // reset scanTime before scanning happens\n        scanTime \u003d System.currentTimeMillis();\n        Path p \u003d fs.getPath();\n        try {\n          scanIntermediateDirectory(p);\n          //If scanning fails, we will scan again.  We assume the failure is\n          // temporary.\n          modTime \u003d newModTime;\n        } catch (IOException e) {\n          LOG.error(\"Error while trying to scan the directory \" + p, e);\n        }\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Scan not needed of \" + fs.getPath());\n        }\n        // reset scanTime\n        scanTime \u003d System.currentTimeMillis();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "1e48eefe5800975ea0c4295c9911ae3f572ed37d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6680. JHS UserLogDir scan algorithm sometime could skip directory with update in CloudFS (Azure FileSystem, S3, etc. Contributed by Junping Du\n",
      "commitDate": "20/04/16 7:02 PM",
      "commitName": "1e48eefe5800975ea0c4295c9911ae3f572ed37d",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/02/16 5:37 PM",
      "commitNameOld": "4343a4cf7790b47dc7ecd18f8634e6b9c805e775",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 57.02,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,30 @@\n     public synchronized void scanIfNeeded(FileStatus fs) {\n       long newModTime \u003d fs.getModificationTime();\n-      if (modTime !\u003d newModTime) {\n+      // MAPREDUCE-6680: In some Cloud FileSystem, like Azure FS or S3, file\u0027s\n+      // modification time is truncated into seconds. In that case,\n+      // modTime \u003d\u003d newModTime doesn\u0027t means no file update in the directory,\n+      // so we need to have additional check.\n+      // Note: modTime (X second Y millisecond) could be casted to X second or\n+      // X+1 second.\n+      if (modTime !\u003d newModTime\n+          || (scanTime/1000) \u003d\u003d (modTime/1000)\n+          || (scanTime/1000 + 1) \u003d\u003d (modTime/1000)) {\n+        // reset scanTime before scanning happens\n+        scanTime \u003d System.currentTimeMillis();\n         Path p \u003d fs.getPath();\n         try {\n           scanIntermediateDirectory(p);\n           //If scanning fails, we will scan again.  We assume the failure is\n           // temporary.\n           modTime \u003d newModTime;\n         } catch (IOException e) {\n           LOG.error(\"Error while trying to scan the directory \" + p, e);\n         }\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Scan not needed of \" + fs.getPath());\n         }\n+        // reset scanTime\n+        scanTime \u003d System.currentTimeMillis();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void scanIfNeeded(FileStatus fs) {\n      long newModTime \u003d fs.getModificationTime();\n      // MAPREDUCE-6680: In some Cloud FileSystem, like Azure FS or S3, file\u0027s\n      // modification time is truncated into seconds. In that case,\n      // modTime \u003d\u003d newModTime doesn\u0027t means no file update in the directory,\n      // so we need to have additional check.\n      // Note: modTime (X second Y millisecond) could be casted to X second or\n      // X+1 second.\n      if (modTime !\u003d newModTime\n          || (scanTime/1000) \u003d\u003d (modTime/1000)\n          || (scanTime/1000 + 1) \u003d\u003d (modTime/1000)) {\n        // reset scanTime before scanning happens\n        scanTime \u003d System.currentTimeMillis();\n        Path p \u003d fs.getPath();\n        try {\n          scanIntermediateDirectory(p);\n          //If scanning fails, we will scan again.  We assume the failure is\n          // temporary.\n          modTime \u003d newModTime;\n        } catch (IOException e) {\n          LOG.error(\"Error while trying to scan the directory \" + p, e);\n        }\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Scan not needed of \" + fs.getPath());\n        }\n        // reset scanTime\n        scanTime \u003d System.currentTimeMillis();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ybodychange",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.49,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,18 @@\n     public synchronized void scanIfNeeded(FileStatus fs) {\n       long newModTime \u003d fs.getModificationTime();\n       if (modTime !\u003d newModTime) {\n         Path p \u003d fs.getPath();\n         try {\n           scanIntermediateDirectory(p);\n           //If scanning fails, we will scan again.  We assume the failure is\n           // temporary.\n           modTime \u003d newModTime;\n         } catch (IOException e) {\n           LOG.error(\"Error while trying to scan the directory \" + p, e);\n         }\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Scan not needed of \" + fs.getPath());\n+        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void scanIfNeeded(FileStatus fs) {\n      long newModTime \u003d fs.getModificationTime();\n      if (modTime !\u003d newModTime) {\n        Path p \u003d fs.getPath();\n        try {\n          scanIntermediateDirectory(p);\n          //If scanning fails, we will scan again.  We assume the failure is\n          // temporary.\n          modTime \u003d newModTime;\n        } catch (IOException e) {\n          LOG.error(\"Error while trying to scan the directory \" + p, e);\n        }\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Scan not needed of \" + fs.getPath());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "03b7ad04fadeb1a98271ac1775f900999989eafb": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4691. Historyserver can report \"Unknown job\" after RM says job has completed. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1391671 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/12 2:55 PM",
      "commitName": "03b7ad04fadeb1a98271ac1775f900999989eafb",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,14 @@\n+    public synchronized void scanIfNeeded(FileStatus fs) {\n+      long newModTime \u003d fs.getModificationTime();\n+      if (modTime !\u003d newModTime) {\n+        Path p \u003d fs.getPath();\n+        try {\n+          scanIntermediateDirectory(p);\n+          //If scanning fails, we will scan again.  We assume the failure is\n+          // temporary.\n+          modTime \u003d newModTime;\n+        } catch (IOException e) {\n+          LOG.error(\"Error while trying to scan the directory \" + p, e);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void scanIfNeeded(FileStatus fs) {\n      long newModTime \u003d fs.getModificationTime();\n      if (modTime !\u003d newModTime) {\n        Path p \u003d fs.getPath();\n        try {\n          scanIntermediateDirectory(p);\n          //If scanning fails, we will scan again.  We assume the failure is\n          // temporary.\n          modTime \u003d newModTime;\n        } catch (IOException e) {\n          LOG.error(\"Error while trying to scan the directory \" + p, e);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java"
    }
  }
}