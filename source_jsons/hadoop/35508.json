{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CgroupsLCEResourcesHandler.java",
  "functionName": "getOverallLimits",
  "functionId": "getOverallLimits___yarnProcessorsArg-float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
  "functionStartLine": 184,
  "functionEndLine": 186,
  "numCommitsSeen": 39,
  "timeTaken": 3380,
  "changeHistory": [
    "47b145b9b4e81d781891abce8a6638f0b436acc4",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa"
  ],
  "changeHistoryShort": {
    "47b145b9b4e81d781891abce8a6638f0b436acc4": "Ymultichange(Yparameterchange,Ybodychange)",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": "Ybodychange",
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "47b145b9b4e81d781891abce8a6638f0b436acc4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "08/08/17 10:33 AM",
      "commitName": "47b145b9b4e81d781891abce8a6638f0b436acc4",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "08/08/17 10:33 AM",
          "commitName": "47b145b9b4e81d781891abce8a6638f0b436acc4",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "09/05/17 12:05 PM",
          "commitNameOld": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 90.94,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,3 @@\n-  int[] getOverallLimits(float yarnProcessors) {\n-    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessors);\n+  int[] getOverallLimits(float yarnProcessorsArg) {\n+    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessorsArg);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int[] getOverallLimits(float yarnProcessorsArg) {\n    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessorsArg);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {
            "oldValue": "[yarnProcessors-float]",
            "newValue": "[yarnProcessorsArg-float]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "08/08/17 10:33 AM",
          "commitName": "47b145b9b4e81d781891abce8a6638f0b436acc4",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "09/05/17 12:05 PM",
          "commitNameOld": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 90.94,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,3 @@\n-  int[] getOverallLimits(float yarnProcessors) {\n-    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessors);\n+  int[] getOverallLimits(float yarnProcessorsArg) {\n+    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessorsArg);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int[] getOverallLimits(float yarnProcessorsArg) {\n    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessorsArg);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3542. Refactored existing CPU cgroups support to use the newer and integrated ResourceHandler mechanism, and also deprecated the old LCEResourceHandler inteface hierarchy. Contributed by Varun Vasudev.\n",
      "commitDate": "25/01/16 4:19 PM",
      "commitName": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.6,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,3 @@\n   int[] getOverallLimits(float yarnProcessors) {\n-\n-    int[] ret \u003d new int[2];\n-\n-    if (yarnProcessors \u003c 0.01f) {\n-      throw new IllegalArgumentException(\"Number of processors can\u0027t be \u003c\u003d 0.\");\n-    }\n-\n-    int quotaUS \u003d MAX_QUOTA_US;\n-    int periodUS \u003d (int) (MAX_QUOTA_US / yarnProcessors);\n-    if (yarnProcessors \u003c 1.0f) {\n-      periodUS \u003d MAX_QUOTA_US;\n-      quotaUS \u003d (int) (periodUS * yarnProcessors);\n-      if (quotaUS \u003c MIN_PERIOD_US) {\n-        LOG\n-          .warn(\"The quota calculated for the cgroup was too low. The minimum value is \"\n-              + MIN_PERIOD_US + \", calculated value is \" + quotaUS\n-              + \". Setting quota to minimum value.\");\n-        quotaUS \u003d MIN_PERIOD_US;\n-      }\n-    }\n-\n-    // cfs_period_us can\u0027t be less than 1000 microseconds\n-    // if the value of periodUS is less than 1000, we can\u0027t really use cgroups\n-    // to limit cpu\n-    if (periodUS \u003c MIN_PERIOD_US) {\n-      LOG\n-        .warn(\"The period calculated for the cgroup was too low. The minimum value is \"\n-            + MIN_PERIOD_US + \", calculated value is \" + periodUS\n-            + \". Using all available CPU.\");\n-      periodUS \u003d MAX_QUOTA_US;\n-      quotaUS \u003d -1;\n-    }\n-\n-    ret[0] \u003d periodUS;\n-    ret[1] \u003d quotaUS;\n-    return ret;\n+    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessors);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int[] getOverallLimits(float yarnProcessors) {\n    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessors);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2440. Enabled Nodemanagers to limit the aggregate cpu usage across all containers to a preconfigured limit. Contributed by Varun Vasudev.\n",
      "commitDate": "10/09/14 7:22 PM",
      "commitName": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,38 @@\n+  int[] getOverallLimits(float yarnProcessors) {\n+\n+    int[] ret \u003d new int[2];\n+\n+    if (yarnProcessors \u003c 0.01f) {\n+      throw new IllegalArgumentException(\"Number of processors can\u0027t be \u003c\u003d 0.\");\n+    }\n+\n+    int quotaUS \u003d MAX_QUOTA_US;\n+    int periodUS \u003d (int) (MAX_QUOTA_US / yarnProcessors);\n+    if (yarnProcessors \u003c 1.0f) {\n+      periodUS \u003d MAX_QUOTA_US;\n+      quotaUS \u003d (int) (periodUS * yarnProcessors);\n+      if (quotaUS \u003c MIN_PERIOD_US) {\n+        LOG\n+          .warn(\"The quota calculated for the cgroup was too low. The minimum value is \"\n+              + MIN_PERIOD_US + \", calculated value is \" + quotaUS\n+              + \". Setting quota to minimum value.\");\n+        quotaUS \u003d MIN_PERIOD_US;\n+      }\n+    }\n+\n+    // cfs_period_us can\u0027t be less than 1000 microseconds\n+    // if the value of periodUS is less than 1000, we can\u0027t really use cgroups\n+    // to limit cpu\n+    if (periodUS \u003c MIN_PERIOD_US) {\n+      LOG\n+        .warn(\"The period calculated for the cgroup was too low. The minimum value is \"\n+            + MIN_PERIOD_US + \", calculated value is \" + periodUS\n+            + \". Using all available CPU.\");\n+      periodUS \u003d MAX_QUOTA_US;\n+      quotaUS \u003d -1;\n+    }\n+\n+    ret[0] \u003d periodUS;\n+    ret[1] \u003d quotaUS;\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int[] getOverallLimits(float yarnProcessors) {\n\n    int[] ret \u003d new int[2];\n\n    if (yarnProcessors \u003c 0.01f) {\n      throw new IllegalArgumentException(\"Number of processors can\u0027t be \u003c\u003d 0.\");\n    }\n\n    int quotaUS \u003d MAX_QUOTA_US;\n    int periodUS \u003d (int) (MAX_QUOTA_US / yarnProcessors);\n    if (yarnProcessors \u003c 1.0f) {\n      periodUS \u003d MAX_QUOTA_US;\n      quotaUS \u003d (int) (periodUS * yarnProcessors);\n      if (quotaUS \u003c MIN_PERIOD_US) {\n        LOG\n          .warn(\"The quota calculated for the cgroup was too low. The minimum value is \"\n              + MIN_PERIOD_US + \", calculated value is \" + quotaUS\n              + \". Setting quota to minimum value.\");\n        quotaUS \u003d MIN_PERIOD_US;\n      }\n    }\n\n    // cfs_period_us can\u0027t be less than 1000 microseconds\n    // if the value of periodUS is less than 1000, we can\u0027t really use cgroups\n    // to limit cpu\n    if (periodUS \u003c MIN_PERIOD_US) {\n      LOG\n        .warn(\"The period calculated for the cgroup was too low. The minimum value is \"\n            + MIN_PERIOD_US + \", calculated value is \" + periodUS\n            + \". Using all available CPU.\");\n      periodUS \u003d MAX_QUOTA_US;\n      quotaUS \u003d -1;\n    }\n\n    ret[0] \u003d periodUS;\n    ret[1] \u003d quotaUS;\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java"
    }
  }
}