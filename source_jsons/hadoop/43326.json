{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderFactory.java",
  "functionName": "createServiceProviderFactory",
  "functionId": "createServiceProviderFactory___artifact-Artifact",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
  "functionStartLine": 56,
  "functionEndLine": 75,
  "numCommitsSeen": 7,
  "timeTaken": 4406,
  "changeHistory": [
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "a0574e7f4f5a6e53677ada4381db5504f263d70f",
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec"
  ],
  "changeHistoryShort": {
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yrename)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Yreturntypechange)",
    "a0574e7f4f5a6e53677ada4381db5504f263d70f": "Ybodychange",
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yrename)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public static synchronized ProviderFactory createSliderProviderFactory(\n+  public static synchronized ProviderFactory createServiceProviderFactory(\n       Artifact artifact) {\n     if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n       LOG.debug(\"Loading service provider type default\");\n       return DefaultProviderFactory.getInstance();\n     }\n     LOG.debug(\"Loading service provider type {}\", artifact.getType());\n     switch (artifact.getType()) {\n       // TODO add handling for custom types?\n-      // TODO handle application\n+      // TODO handle service\n       case DOCKER:\n         return DockerProviderFactory.getInstance();\n       case TARBALL:\n         return TarballProviderFactory.getInstance();\n       default:\n         throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n-                \"%s should not be passed to createSliderProviderFactory\",\n+                \"%s should not be passed to createServiceProviderFactory\",\n             artifact.getType()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized ProviderFactory createServiceProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      LOG.debug(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle service\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                \"%s should not be passed to createServiceProviderFactory\",\n            artifact.getType()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public static synchronized ProviderFactory createSliderProviderFactory(\n+  public static synchronized ProviderFactory createServiceProviderFactory(\n       Artifact artifact) {\n     if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n       LOG.debug(\"Loading service provider type default\");\n       return DefaultProviderFactory.getInstance();\n     }\n     LOG.debug(\"Loading service provider type {}\", artifact.getType());\n     switch (artifact.getType()) {\n       // TODO add handling for custom types?\n-      // TODO handle application\n+      // TODO handle service\n       case DOCKER:\n         return DockerProviderFactory.getInstance();\n       case TARBALL:\n         return TarballProviderFactory.getInstance();\n       default:\n         throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n-                \"%s should not be passed to createSliderProviderFactory\",\n+                \"%s should not be passed to createServiceProviderFactory\",\n             artifact.getType()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized ProviderFactory createServiceProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      LOG.debug(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle service\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                \"%s should not be passed to createServiceProviderFactory\",\n            artifact.getType()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public static synchronized ProviderFactory createSliderProviderFactory(\n+  public static synchronized ProviderFactory createServiceProviderFactory(\n       Artifact artifact) {\n     if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n       LOG.debug(\"Loading service provider type default\");\n       return DefaultProviderFactory.getInstance();\n     }\n     LOG.debug(\"Loading service provider type {}\", artifact.getType());\n     switch (artifact.getType()) {\n       // TODO add handling for custom types?\n-      // TODO handle application\n+      // TODO handle service\n       case DOCKER:\n         return DockerProviderFactory.getInstance();\n       case TARBALL:\n         return TarballProviderFactory.getInstance();\n       default:\n         throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n-                \"%s should not be passed to createSliderProviderFactory\",\n+                \"%s should not be passed to createServiceProviderFactory\",\n             artifact.getType()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized ProviderFactory createServiceProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      LOG.debug(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle service\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                \"%s should not be passed to createServiceProviderFactory\",\n            artifact.getType()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
          "extendedDetails": {
            "oldValue": "createSliderProviderFactory",
            "newValue": "createServiceProviderFactory"
          }
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public static synchronized SliderProviderFactory createSliderProviderFactory(\n+  public static synchronized ProviderFactory createSliderProviderFactory(\n       Artifact artifact) {\n     if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n       LOG.debug(\"Loading service provider type default\");\n       return DefaultProviderFactory.getInstance();\n     }\n     LOG.debug(\"Loading service provider type {}\", artifact.getType());\n     switch (artifact.getType()) {\n       // TODO add handling for custom types?\n       // TODO handle application\n       case DOCKER:\n         return DockerProviderFactory.getInstance();\n       case TARBALL:\n         return TarballProviderFactory.getInstance();\n       default:\n         throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                 \"%s should not be passed to createSliderProviderFactory\",\n             artifact.getType()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized ProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      LOG.debug(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                \"%s should not be passed to createSliderProviderFactory\",\n            artifact.getType()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public static synchronized SliderProviderFactory createSliderProviderFactory(\n+  public static synchronized ProviderFactory createSliderProviderFactory(\n       Artifact artifact) {\n     if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n       LOG.debug(\"Loading service provider type default\");\n       return DefaultProviderFactory.getInstance();\n     }\n     LOG.debug(\"Loading service provider type {}\", artifact.getType());\n     switch (artifact.getType()) {\n       // TODO add handling for custom types?\n       // TODO handle application\n       case DOCKER:\n         return DockerProviderFactory.getInstance();\n       case TARBALL:\n         return TarballProviderFactory.getInstance();\n       default:\n         throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                 \"%s should not be passed to createSliderProviderFactory\",\n             artifact.getType()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized ProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      LOG.debug(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                \"%s should not be passed to createSliderProviderFactory\",\n            artifact.getType()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderFactory.java",
          "extendedDetails": {
            "oldValue": "SliderProviderFactory",
            "newValue": "ProviderFactory"
          }
        }
      ]
    },
    "a0574e7f4f5a6e53677ada4381db5504f263d70f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   public static synchronized SliderProviderFactory createSliderProviderFactory(\n       Artifact artifact) {\n     if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n-      log.info(\"Loading service provider type default\");\n+      LOG.debug(\"Loading service provider type default\");\n       return DefaultProviderFactory.getInstance();\n     }\n-    log.info(\"Loading service provider type {}\", artifact.getType());\n+    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n     switch (artifact.getType()) {\n       // TODO add handling for custom types?\n       // TODO handle application\n       case DOCKER:\n         return DockerProviderFactory.getInstance();\n       case TARBALL:\n         return TarballProviderFactory.getInstance();\n       default:\n-        throw new IllegalArgumentException(\n-            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n+        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n+                \"%s should not be passed to createSliderProviderFactory\",\n+            artifact.getType()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized SliderProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      LOG.debug(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(String.format(\"Resolution error, \" +\n                \"%s should not be passed to createSliderProviderFactory\",\n            artifact.getType()));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java",
      "extendedDetails": {}
    },
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,19 @@\n-  public static SliderProviderFactory createSliderProviderFactory(String application) throws\n-      SliderException {\n-    Configuration conf \u003d loadSliderConfiguration();\n-    if (application \u003d\u003d null) {\n-      application \u003d DEFAULT_CLUSTER_TYPE;\n+  public static synchronized SliderProviderFactory createSliderProviderFactory(\n+      Artifact artifact) {\n+    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n+      log.info(\"Loading service provider type default\");\n+      return DefaultProviderFactory.getInstance();\n     }\n-    String providerKey \u003d\n-      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);\n-    if (application.contains(\".\")) {\n-      log.debug(\"Treating {} as a classname\", application);\n-      String name \u003d \"classname.key\";\n-      conf.set(name, application);\n-      providerKey \u003d name;\n+    log.info(\"Loading service provider type {}\", artifact.getType());\n+    switch (artifact.getType()) {\n+      // TODO add handling for custom types?\n+      // TODO handle application\n+      case DOCKER:\n+        return DockerProviderFactory.getInstance();\n+      case TARBALL:\n+        return TarballProviderFactory.getInstance();\n+      default:\n+        throw new IllegalArgumentException(\n+            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n     }\n-    \n-    Class\u003c? extends SliderProviderFactory\u003e providerClass;\n-    try {\n-      providerClass \u003d conf.getClass(providerKey, null, SliderProviderFactory.class);\n-    } catch (RuntimeException e) {\n-      throw new BadClusterStateException(e, \"Failed to load provider %s: %s\", application, e);\n-    }\n-    if (providerClass \u003d\u003d null) {\n-      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);\n-    }\n-\n-    Exception ex;\n-    try {\n-      SliderProviderFactory providerFactory \u003d providerClass.newInstance();\n-      providerFactory.setConf(conf);\n-      return providerFactory;\n-    } catch (Exception e) {\n-      ex \u003d e;\n-    }\n-    //by here the operation failed and ex is set to the value \n-    throw new BadClusterStateException(ex,\n-                              \"Failed to create an instance of %s : %s\",\n-                              providerClass,\n-                              ex);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized SliderProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      log.info(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    log.info(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(\n            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java",
          "extendedDetails": {
            "oldValue": "[application-String]",
            "newValue": "[artifact-Artifact]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,19 @@\n-  public static SliderProviderFactory createSliderProviderFactory(String application) throws\n-      SliderException {\n-    Configuration conf \u003d loadSliderConfiguration();\n-    if (application \u003d\u003d null) {\n-      application \u003d DEFAULT_CLUSTER_TYPE;\n+  public static synchronized SliderProviderFactory createSliderProviderFactory(\n+      Artifact artifact) {\n+    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n+      log.info(\"Loading service provider type default\");\n+      return DefaultProviderFactory.getInstance();\n     }\n-    String providerKey \u003d\n-      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);\n-    if (application.contains(\".\")) {\n-      log.debug(\"Treating {} as a classname\", application);\n-      String name \u003d \"classname.key\";\n-      conf.set(name, application);\n-      providerKey \u003d name;\n+    log.info(\"Loading service provider type {}\", artifact.getType());\n+    switch (artifact.getType()) {\n+      // TODO add handling for custom types?\n+      // TODO handle application\n+      case DOCKER:\n+        return DockerProviderFactory.getInstance();\n+      case TARBALL:\n+        return TarballProviderFactory.getInstance();\n+      default:\n+        throw new IllegalArgumentException(\n+            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n     }\n-    \n-    Class\u003c? extends SliderProviderFactory\u003e providerClass;\n-    try {\n-      providerClass \u003d conf.getClass(providerKey, null, SliderProviderFactory.class);\n-    } catch (RuntimeException e) {\n-      throw new BadClusterStateException(e, \"Failed to load provider %s: %s\", application, e);\n-    }\n-    if (providerClass \u003d\u003d null) {\n-      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);\n-    }\n-\n-    Exception ex;\n-    try {\n-      SliderProviderFactory providerFactory \u003d providerClass.newInstance();\n-      providerFactory.setConf(conf);\n-      return providerFactory;\n-    } catch (Exception e) {\n-      ex \u003d e;\n-    }\n-    //by here the operation failed and ex is set to the value \n-    throw new BadClusterStateException(ex,\n-                              \"Failed to create an instance of %s : %s\",\n-                              providerClass,\n-                              ex);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized SliderProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      log.info(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    log.info(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(\n            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[public, static, synchronized]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,19 @@\n-  public static SliderProviderFactory createSliderProviderFactory(String application) throws\n-      SliderException {\n-    Configuration conf \u003d loadSliderConfiguration();\n-    if (application \u003d\u003d null) {\n-      application \u003d DEFAULT_CLUSTER_TYPE;\n+  public static synchronized SliderProviderFactory createSliderProviderFactory(\n+      Artifact artifact) {\n+    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n+      log.info(\"Loading service provider type default\");\n+      return DefaultProviderFactory.getInstance();\n     }\n-    String providerKey \u003d\n-      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);\n-    if (application.contains(\".\")) {\n-      log.debug(\"Treating {} as a classname\", application);\n-      String name \u003d \"classname.key\";\n-      conf.set(name, application);\n-      providerKey \u003d name;\n+    log.info(\"Loading service provider type {}\", artifact.getType());\n+    switch (artifact.getType()) {\n+      // TODO add handling for custom types?\n+      // TODO handle application\n+      case DOCKER:\n+        return DockerProviderFactory.getInstance();\n+      case TARBALL:\n+        return TarballProviderFactory.getInstance();\n+      default:\n+        throw new IllegalArgumentException(\n+            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n     }\n-    \n-    Class\u003c? extends SliderProviderFactory\u003e providerClass;\n-    try {\n-      providerClass \u003d conf.getClass(providerKey, null, SliderProviderFactory.class);\n-    } catch (RuntimeException e) {\n-      throw new BadClusterStateException(e, \"Failed to load provider %s: %s\", application, e);\n-    }\n-    if (providerClass \u003d\u003d null) {\n-      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);\n-    }\n-\n-    Exception ex;\n-    try {\n-      SliderProviderFactory providerFactory \u003d providerClass.newInstance();\n-      providerFactory.setConf(conf);\n-      return providerFactory;\n-    } catch (Exception e) {\n-      ex \u003d e;\n-    }\n-    //by here the operation failed and ex is set to the value \n-    throw new BadClusterStateException(ex,\n-                              \"Failed to create an instance of %s : %s\",\n-                              providerClass,\n-                              ex);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized SliderProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      log.info(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    log.info(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(\n            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java",
          "extendedDetails": {
            "oldValue": "[SliderException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,19 @@\n-  public static SliderProviderFactory createSliderProviderFactory(String application) throws\n-      SliderException {\n-    Configuration conf \u003d loadSliderConfiguration();\n-    if (application \u003d\u003d null) {\n-      application \u003d DEFAULT_CLUSTER_TYPE;\n+  public static synchronized SliderProviderFactory createSliderProviderFactory(\n+      Artifact artifact) {\n+    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n+      log.info(\"Loading service provider type default\");\n+      return DefaultProviderFactory.getInstance();\n     }\n-    String providerKey \u003d\n-      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);\n-    if (application.contains(\".\")) {\n-      log.debug(\"Treating {} as a classname\", application);\n-      String name \u003d \"classname.key\";\n-      conf.set(name, application);\n-      providerKey \u003d name;\n+    log.info(\"Loading service provider type {}\", artifact.getType());\n+    switch (artifact.getType()) {\n+      // TODO add handling for custom types?\n+      // TODO handle application\n+      case DOCKER:\n+        return DockerProviderFactory.getInstance();\n+      case TARBALL:\n+        return TarballProviderFactory.getInstance();\n+      default:\n+        throw new IllegalArgumentException(\n+            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n     }\n-    \n-    Class\u003c? extends SliderProviderFactory\u003e providerClass;\n-    try {\n-      providerClass \u003d conf.getClass(providerKey, null, SliderProviderFactory.class);\n-    } catch (RuntimeException e) {\n-      throw new BadClusterStateException(e, \"Failed to load provider %s: %s\", application, e);\n-    }\n-    if (providerClass \u003d\u003d null) {\n-      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);\n-    }\n-\n-    Exception ex;\n-    try {\n-      SliderProviderFactory providerFactory \u003d providerClass.newInstance();\n-      providerFactory.setConf(conf);\n-      return providerFactory;\n-    } catch (Exception e) {\n-      ex \u003d e;\n-    }\n-    //by here the operation failed and ex is set to the value \n-    throw new BadClusterStateException(ex,\n-                              \"Failed to create an instance of %s : %s\",\n-                              providerClass,\n-                              ex);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized SliderProviderFactory createSliderProviderFactory(\n      Artifact artifact) {\n    if (artifact \u003d\u003d null || artifact.getType() \u003d\u003d null) {\n      log.info(\"Loading service provider type default\");\n      return DefaultProviderFactory.getInstance();\n    }\n    log.info(\"Loading service provider type {}\", artifact.getType());\n    switch (artifact.getType()) {\n      // TODO add handling for custom types?\n      // TODO handle application\n      case DOCKER:\n        return DockerProviderFactory.getInstance();\n      case TARBALL:\n        return TarballProviderFactory.getInstance();\n      default:\n        throw new IllegalArgumentException(\n            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5461. Initial code ported from slider-core module. (jianhe)\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,39 @@\n+  public static SliderProviderFactory createSliderProviderFactory(String application) throws\n+      SliderException {\n+    Configuration conf \u003d loadSliderConfiguration();\n+    if (application \u003d\u003d null) {\n+      application \u003d DEFAULT_CLUSTER_TYPE;\n+    }\n+    String providerKey \u003d\n+      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);\n+    if (application.contains(\".\")) {\n+      log.debug(\"Treating {} as a classname\", application);\n+      String name \u003d \"classname.key\";\n+      conf.set(name, application);\n+      providerKey \u003d name;\n+    }\n+    \n+    Class\u003c? extends SliderProviderFactory\u003e providerClass;\n+    try {\n+      providerClass \u003d conf.getClass(providerKey, null, SliderProviderFactory.class);\n+    } catch (RuntimeException e) {\n+      throw new BadClusterStateException(e, \"Failed to load provider %s: %s\", application, e);\n+    }\n+    if (providerClass \u003d\u003d null) {\n+      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);\n+    }\n+\n+    Exception ex;\n+    try {\n+      SliderProviderFactory providerFactory \u003d providerClass.newInstance();\n+      providerFactory.setConf(conf);\n+      return providerFactory;\n+    } catch (Exception e) {\n+      ex \u003d e;\n+    }\n+    //by here the operation failed and ex is set to the value \n+    throw new BadClusterStateException(ex,\n+                              \"Failed to create an instance of %s : %s\",\n+                              providerClass,\n+                              ex);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SliderProviderFactory createSliderProviderFactory(String application) throws\n      SliderException {\n    Configuration conf \u003d loadSliderConfiguration();\n    if (application \u003d\u003d null) {\n      application \u003d DEFAULT_CLUSTER_TYPE;\n    }\n    String providerKey \u003d\n      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);\n    if (application.contains(\".\")) {\n      log.debug(\"Treating {} as a classname\", application);\n      String name \u003d \"classname.key\";\n      conf.set(name, application);\n      providerKey \u003d name;\n    }\n    \n    Class\u003c? extends SliderProviderFactory\u003e providerClass;\n    try {\n      providerClass \u003d conf.getClass(providerKey, null, SliderProviderFactory.class);\n    } catch (RuntimeException e) {\n      throw new BadClusterStateException(e, \"Failed to load provider %s: %s\", application, e);\n    }\n    if (providerClass \u003d\u003d null) {\n      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);\n    }\n\n    Exception ex;\n    try {\n      SliderProviderFactory providerFactory \u003d providerClass.newInstance();\n      providerFactory.setConf(conf);\n      return providerFactory;\n    } catch (Exception e) {\n      ex \u003d e;\n    }\n    //by here the operation failed and ex is set to the value \n    throw new BadClusterStateException(ex,\n                              \"Failed to create an instance of %s : %s\",\n                              providerClass,\n                              ex);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/SliderProviderFactory.java"
    }
  }
}