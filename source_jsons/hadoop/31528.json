{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SubApplicationEntityReader.java",
  "functionName": "constructFilterListBasedOnFilters",
  "functionId": "constructFilterListBasedOnFilters",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
  "functionStartLine": 83,
  "functionEndLine": 118,
  "numCommitsSeen": 3,
  "timeTaken": 1360,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils\n          .createSingleColValueFiltersByRange(SubApplicationColumn.CREATED_TIME,\n              createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          SubApplicationColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          SubApplicationColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils\n          .createHBaseFilterList(SubApplicationColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java"
      }
    },
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6861. Reader API for sub application entities (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
      "commitAuthor": "Varun Saxena",
      "diff": "@@ -0,0 +1,36 @@\n+  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n+    // Filters here cannot be null for multiple entity reads as they are set in\n+    // augmentParams if null.\n+    FilterList listBasedOnFilters \u003d new FilterList();\n+    TimelineEntityFilters filters \u003d getFilters();\n+    // Create filter list based on created time range and add it to\n+    // listBasedOnFilters.\n+    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n+    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n+    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n+      listBasedOnFilters.addFilter(TimelineFilterUtils\n+          .createSingleColValueFiltersByRange(SubApplicationColumn.CREATED_TIME,\n+              createdTimeBegin, createdTimeEnd));\n+    }\n+    // Create filter list based on metric filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n+    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n+          SubApplicationColumnPrefix.METRIC, metricFilters));\n+    }\n+    // Create filter list based on config filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n+    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n+          SubApplicationColumnPrefix.CONFIG, configFilters));\n+    }\n+    // Create filter list based on info filters and add it to listBasedOnFilters\n+    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n+    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(TimelineFilterUtils\n+          .createHBaseFilterList(SubApplicationColumnPrefix.INFO, infoFilters));\n+    }\n+    return listBasedOnFilters;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils\n          .createSingleColValueFiltersByRange(SubApplicationColumn.CREATED_TIME,\n              createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          SubApplicationColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          SubApplicationColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils\n          .createHBaseFilterList(SubApplicationColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java"
    }
  }
}