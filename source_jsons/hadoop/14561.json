{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "getNNLifelineRpcAddressesForCluster",
  "functionId": "getNNLifelineRpcAddressesForCluster___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 647,
  "functionEndLine": 670,
  "numCommitsSeen": 154,
  "timeTaken": 2101,
  "changeHistory": [
    "2759689d7d23001f007cb0dbe2521de90734dd5c"
  ],
  "changeHistoryShort": {
    "2759689d7d23001f007cb0dbe2521de90734dd5c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2759689d7d23001f007cb0dbe2521de90734dd5c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9239. DataNode Lifeline Protocol: an alternative protocol for reporting DataNode liveness. Contributed by Chris Nauroth.\n",
      "commitDate": "04/03/16 3:29 PM",
      "commitName": "2759689d7d23001f007cb0dbe2521de90734dd5c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,24 @@\n+      getNNLifelineRpcAddressesForCluster(Configuration conf)\n+      throws IOException {\n+\n+    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection(\n+        DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n+\n+    if (parentNameServices.isEmpty()) {\n+      parentNameServices \u003d conf.getTrimmedStringCollection(\n+          DFSConfigKeys.DFS_NAMESERVICES);\n+    } else {\n+      // Ensure that the internal service is indeed in the list of all available\n+      // nameservices.\n+      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n+          .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n+      for (String nsId : parentNameServices) {\n+        if (!availableNameServices.contains(nsId)) {\n+          throw new IOException(\"Unknown nameservice: \" + nsId);\n+        }\n+      }\n+    }\n+\n+    return DFSUtilClient.getAddressesForNsIds(conf, parentNameServices, null,\n+        DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getNNLifelineRpcAddressesForCluster(Configuration conf)\n      throws IOException {\n\n    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection(\n        DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n\n    if (parentNameServices.isEmpty()) {\n      parentNameServices \u003d conf.getTrimmedStringCollection(\n          DFSConfigKeys.DFS_NAMESERVICES);\n    } else {\n      // Ensure that the internal service is indeed in the list of all available\n      // nameservices.\n      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n          .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n      for (String nsId : parentNameServices) {\n        if (!availableNameServices.contains(nsId)) {\n          throw new IOException(\"Unknown nameservice: \" + nsId);\n        }\n      }\n    }\n\n    return DFSUtilClient.getAddressesForNsIds(conf, parentNameServices, null,\n        DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}