{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "initConfig",
  "functionId": "initConfig",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java",
  "functionStartLine": 442,
  "functionEndLine": 505,
  "numCommitsSeen": 12,
  "timeTaken": 1313,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "7e521c5a49fbcf88285c102051ea2522edc847b9",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "7e521c5a49fbcf88285c102051ea2522edc847b9": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "31/05/17 8:09 AM",
      "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 701.2,
      "commitsBetweenForRepo": 5748,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   protected void initConfig() throws ServerException {\n     verifyDir(configDir);\n     File file \u003d new File(configDir);\n     Configuration defaultConf;\n     String defaultConfig \u003d name + \"-default.xml\";\n     ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n     InputStream inputStream \u003d classLoader.getResourceAsStream(defaultConfig);\n     if (inputStream \u003d\u003d null) {\n       log.warn(\"Default configuration file not available in classpath [{}]\", defaultConfig);\n       defaultConf \u003d new Configuration(false);\n     } else {\n       try {\n         defaultConf \u003d new Configuration(false);\n         ConfigurationUtils.load(defaultConf, inputStream);\n       } catch (Exception ex) {\n         throw new ServerException(ServerException.ERROR.S03, defaultConfig, ex.getMessage(), ex);\n       }\n     }\n \n     if (config \u003d\u003d null) {\n       Configuration siteConf;\n       File siteFile \u003d new File(file, name + \"-site.xml\");\n       if (!siteFile.exists()) {\n         log.warn(\"Site configuration file [{}] not found in config directory\", siteFile);\n         siteConf \u003d new Configuration(false);\n       } else {\n         if (!siteFile.isFile()) {\n           throw new ServerException(ServerException.ERROR.S05, siteFile.getAbsolutePath());\n         }\n         try {\n           log.debug(\"Loading site configuration from [{}]\", siteFile);\n-          inputStream \u003d new FileInputStream(siteFile);\n+          inputStream \u003d Files.newInputStream(siteFile.toPath());\n           siteConf \u003d new Configuration(false);\n           ConfigurationUtils.load(siteConf, inputStream);\n         } catch (IOException ex) {\n           throw new ServerException(ServerException.ERROR.S06, siteFile, ex.getMessage(), ex);\n         }\n       }\n \n       config \u003d new Configuration(false);\n       ConfigurationUtils.copy(siteConf, config);\n     }\n \n     ConfigurationUtils.injectDefaults(defaultConf, config);\n     ConfigRedactor redactor \u003d new ConfigRedactor(config);\n     for (String name : System.getProperties().stringPropertyNames()) {\n       String value \u003d System.getProperty(name);\n       if (name.startsWith(getPrefix() + \".\")) {\n         config.set(name, value);\n         String redacted \u003d redactor.redact(name, value);\n         log.info(\"System property sets  {}: {}\", name, redacted);\n       }\n     }\n \n     log.debug(\"Loaded Configuration:\");\n     log.debug(\"------------------------------------------------------\");\n     for (Map.Entry\u003cString, String\u003e entry : config) {\n       String name \u003d entry.getKey();\n       String value \u003d config.get(entry.getKey());\n       String redacted \u003d redactor.redact(name, value);\n       log.debug(\"  {}: {}\", entry.getKey(), redacted);\n     }\n     log.debug(\"------------------------------------------------------\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initConfig() throws ServerException {\n    verifyDir(configDir);\n    File file \u003d new File(configDir);\n    Configuration defaultConf;\n    String defaultConfig \u003d name + \"-default.xml\";\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    InputStream inputStream \u003d classLoader.getResourceAsStream(defaultConfig);\n    if (inputStream \u003d\u003d null) {\n      log.warn(\"Default configuration file not available in classpath [{}]\", defaultConfig);\n      defaultConf \u003d new Configuration(false);\n    } else {\n      try {\n        defaultConf \u003d new Configuration(false);\n        ConfigurationUtils.load(defaultConf, inputStream);\n      } catch (Exception ex) {\n        throw new ServerException(ServerException.ERROR.S03, defaultConfig, ex.getMessage(), ex);\n      }\n    }\n\n    if (config \u003d\u003d null) {\n      Configuration siteConf;\n      File siteFile \u003d new File(file, name + \"-site.xml\");\n      if (!siteFile.exists()) {\n        log.warn(\"Site configuration file [{}] not found in config directory\", siteFile);\n        siteConf \u003d new Configuration(false);\n      } else {\n        if (!siteFile.isFile()) {\n          throw new ServerException(ServerException.ERROR.S05, siteFile.getAbsolutePath());\n        }\n        try {\n          log.debug(\"Loading site configuration from [{}]\", siteFile);\n          inputStream \u003d Files.newInputStream(siteFile.toPath());\n          siteConf \u003d new Configuration(false);\n          ConfigurationUtils.load(siteConf, inputStream);\n        } catch (IOException ex) {\n          throw new ServerException(ServerException.ERROR.S06, siteFile, ex.getMessage(), ex);\n        }\n      }\n\n      config \u003d new Configuration(false);\n      ConfigurationUtils.copy(siteConf, config);\n    }\n\n    ConfigurationUtils.injectDefaults(defaultConf, config);\n    ConfigRedactor redactor \u003d new ConfigRedactor(config);\n    for (String name : System.getProperties().stringPropertyNames()) {\n      String value \u003d System.getProperty(name);\n      if (name.startsWith(getPrefix() + \".\")) {\n        config.set(name, value);\n        String redacted \u003d redactor.redact(name, value);\n        log.info(\"System property sets  {}: {}\", name, redacted);\n      }\n    }\n\n    log.debug(\"Loaded Configuration:\");\n    log.debug(\"------------------------------------------------------\");\n    for (Map.Entry\u003cString, String\u003e entry : config) {\n      String name \u003d entry.getKey();\n      String value \u003d config.get(entry.getKey());\n      String redacted \u003d redactor.redact(name, value);\n      log.debug(\"  {}: {}\", entry.getKey(), redacted);\n    }\n    log.debug(\"------------------------------------------------------\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java",
      "extendedDetails": {}
    },
    "7e521c5a49fbcf88285c102051ea2522edc847b9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11080. Update HttpFS to use ConfigRedactor. Contributed by Sean Mackrory.\n",
      "commitDate": "02/11/16 7:11 PM",
      "commitName": "7e521c5a49fbcf88285c102051ea2522edc847b9",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 610.87,
      "commitsBetweenForRepo": 4644,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,64 @@\n   protected void initConfig() throws ServerException {\n     verifyDir(configDir);\n     File file \u003d new File(configDir);\n     Configuration defaultConf;\n     String defaultConfig \u003d name + \"-default.xml\";\n     ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n     InputStream inputStream \u003d classLoader.getResourceAsStream(defaultConfig);\n     if (inputStream \u003d\u003d null) {\n       log.warn(\"Default configuration file not available in classpath [{}]\", defaultConfig);\n       defaultConf \u003d new Configuration(false);\n     } else {\n       try {\n         defaultConf \u003d new Configuration(false);\n         ConfigurationUtils.load(defaultConf, inputStream);\n       } catch (Exception ex) {\n         throw new ServerException(ServerException.ERROR.S03, defaultConfig, ex.getMessage(), ex);\n       }\n     }\n \n     if (config \u003d\u003d null) {\n       Configuration siteConf;\n       File siteFile \u003d new File(file, name + \"-site.xml\");\n       if (!siteFile.exists()) {\n         log.warn(\"Site configuration file [{}] not found in config directory\", siteFile);\n         siteConf \u003d new Configuration(false);\n       } else {\n         if (!siteFile.isFile()) {\n           throw new ServerException(ServerException.ERROR.S05, siteFile.getAbsolutePath());\n         }\n         try {\n           log.debug(\"Loading site configuration from [{}]\", siteFile);\n           inputStream \u003d new FileInputStream(siteFile);\n           siteConf \u003d new Configuration(false);\n           ConfigurationUtils.load(siteConf, inputStream);\n         } catch (IOException ex) {\n           throw new ServerException(ServerException.ERROR.S06, siteFile, ex.getMessage(), ex);\n         }\n       }\n \n       config \u003d new Configuration(false);\n       ConfigurationUtils.copy(siteConf, config);\n     }\n \n     ConfigurationUtils.injectDefaults(defaultConf, config);\n-\n+    ConfigRedactor redactor \u003d new ConfigRedactor(config);\n     for (String name : System.getProperties().stringPropertyNames()) {\n       String value \u003d System.getProperty(name);\n       if (name.startsWith(getPrefix() + \".\")) {\n         config.set(name, value);\n-        if (name.endsWith(\".password\") || name.endsWith(\".secret\")) {\n-          value \u003d \"*MASKED*\";\n-        }\n-        log.info(\"System property sets  {}: {}\", name, value);\n+        String redacted \u003d redactor.redact(name, value);\n+        log.info(\"System property sets  {}: {}\", name, redacted);\n       }\n     }\n \n     log.debug(\"Loaded Configuration:\");\n     log.debug(\"------------------------------------------------------\");\n     for (Map.Entry\u003cString, String\u003e entry : config) {\n       String name \u003d entry.getKey();\n       String value \u003d config.get(entry.getKey());\n-      if (name.endsWith(\".password\") || name.endsWith(\".secret\")) {\n-        value \u003d \"*MASKED*\";\n-      }\n-      log.debug(\"  {}: {}\", entry.getKey(), value);\n+      String redacted \u003d redactor.redact(name, value);\n+      log.debug(\"  {}: {}\", entry.getKey(), redacted);\n     }\n     log.debug(\"------------------------------------------------------\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initConfig() throws ServerException {\n    verifyDir(configDir);\n    File file \u003d new File(configDir);\n    Configuration defaultConf;\n    String defaultConfig \u003d name + \"-default.xml\";\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    InputStream inputStream \u003d classLoader.getResourceAsStream(defaultConfig);\n    if (inputStream \u003d\u003d null) {\n      log.warn(\"Default configuration file not available in classpath [{}]\", defaultConfig);\n      defaultConf \u003d new Configuration(false);\n    } else {\n      try {\n        defaultConf \u003d new Configuration(false);\n        ConfigurationUtils.load(defaultConf, inputStream);\n      } catch (Exception ex) {\n        throw new ServerException(ServerException.ERROR.S03, defaultConfig, ex.getMessage(), ex);\n      }\n    }\n\n    if (config \u003d\u003d null) {\n      Configuration siteConf;\n      File siteFile \u003d new File(file, name + \"-site.xml\");\n      if (!siteFile.exists()) {\n        log.warn(\"Site configuration file [{}] not found in config directory\", siteFile);\n        siteConf \u003d new Configuration(false);\n      } else {\n        if (!siteFile.isFile()) {\n          throw new ServerException(ServerException.ERROR.S05, siteFile.getAbsolutePath());\n        }\n        try {\n          log.debug(\"Loading site configuration from [{}]\", siteFile);\n          inputStream \u003d new FileInputStream(siteFile);\n          siteConf \u003d new Configuration(false);\n          ConfigurationUtils.load(siteConf, inputStream);\n        } catch (IOException ex) {\n          throw new ServerException(ServerException.ERROR.S06, siteFile, ex.getMessage(), ex);\n        }\n      }\n\n      config \u003d new Configuration(false);\n      ConfigurationUtils.copy(siteConf, config);\n    }\n\n    ConfigurationUtils.injectDefaults(defaultConf, config);\n    ConfigRedactor redactor \u003d new ConfigRedactor(config);\n    for (String name : System.getProperties().stringPropertyNames()) {\n      String value \u003d System.getProperty(name);\n      if (name.startsWith(getPrefix() + \".\")) {\n        config.set(name, value);\n        String redacted \u003d redactor.redact(name, value);\n        log.info(\"System property sets  {}: {}\", name, redacted);\n      }\n    }\n\n    log.debug(\"Loaded Configuration:\");\n    log.debug(\"------------------------------------------------------\");\n    for (Map.Entry\u003cString, String\u003e entry : config) {\n      String name \u003d entry.getKey();\n      String value \u003d config.get(entry.getKey());\n      String redacted \u003d redactor.redact(name, value);\n      log.debug(\"  {}: {}\", entry.getKey(), redacted);\n    }\n    log.debug(\"------------------------------------------------------\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,68 @@\n+  protected void initConfig() throws ServerException {\n+    verifyDir(configDir);\n+    File file \u003d new File(configDir);\n+    Configuration defaultConf;\n+    String defaultConfig \u003d name + \"-default.xml\";\n+    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n+    InputStream inputStream \u003d classLoader.getResourceAsStream(defaultConfig);\n+    if (inputStream \u003d\u003d null) {\n+      log.warn(\"Default configuration file not available in classpath [{}]\", defaultConfig);\n+      defaultConf \u003d new Configuration(false);\n+    } else {\n+      try {\n+        defaultConf \u003d new Configuration(false);\n+        ConfigurationUtils.load(defaultConf, inputStream);\n+      } catch (Exception ex) {\n+        throw new ServerException(ServerException.ERROR.S03, defaultConfig, ex.getMessage(), ex);\n+      }\n+    }\n+\n+    if (config \u003d\u003d null) {\n+      Configuration siteConf;\n+      File siteFile \u003d new File(file, name + \"-site.xml\");\n+      if (!siteFile.exists()) {\n+        log.warn(\"Site configuration file [{}] not found in config directory\", siteFile);\n+        siteConf \u003d new Configuration(false);\n+      } else {\n+        if (!siteFile.isFile()) {\n+          throw new ServerException(ServerException.ERROR.S05, siteFile.getAbsolutePath());\n+        }\n+        try {\n+          log.debug(\"Loading site configuration from [{}]\", siteFile);\n+          inputStream \u003d new FileInputStream(siteFile);\n+          siteConf \u003d new Configuration(false);\n+          ConfigurationUtils.load(siteConf, inputStream);\n+        } catch (IOException ex) {\n+          throw new ServerException(ServerException.ERROR.S06, siteFile, ex.getMessage(), ex);\n+        }\n+      }\n+\n+      config \u003d new Configuration(false);\n+      ConfigurationUtils.copy(siteConf, config);\n+    }\n+\n+    ConfigurationUtils.injectDefaults(defaultConf, config);\n+\n+    for (String name : System.getProperties().stringPropertyNames()) {\n+      String value \u003d System.getProperty(name);\n+      if (name.startsWith(getPrefix() + \".\")) {\n+        config.set(name, value);\n+        if (name.endsWith(\".password\") || name.endsWith(\".secret\")) {\n+          value \u003d \"*MASKED*\";\n+        }\n+        log.info(\"System property sets  {}: {}\", name, value);\n+      }\n+    }\n+\n+    log.debug(\"Loaded Configuration:\");\n+    log.debug(\"------------------------------------------------------\");\n+    for (Map.Entry\u003cString, String\u003e entry : config) {\n+      String name \u003d entry.getKey();\n+      String value \u003d config.get(entry.getKey());\n+      if (name.endsWith(\".password\") || name.endsWith(\".secret\")) {\n+        value \u003d \"*MASKED*\";\n+      }\n+      log.debug(\"  {}: {}\", entry.getKey(), value);\n+    }\n+    log.debug(\"------------------------------------------------------\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initConfig() throws ServerException {\n    verifyDir(configDir);\n    File file \u003d new File(configDir);\n    Configuration defaultConf;\n    String defaultConfig \u003d name + \"-default.xml\";\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    InputStream inputStream \u003d classLoader.getResourceAsStream(defaultConfig);\n    if (inputStream \u003d\u003d null) {\n      log.warn(\"Default configuration file not available in classpath [{}]\", defaultConfig);\n      defaultConf \u003d new Configuration(false);\n    } else {\n      try {\n        defaultConf \u003d new Configuration(false);\n        ConfigurationUtils.load(defaultConf, inputStream);\n      } catch (Exception ex) {\n        throw new ServerException(ServerException.ERROR.S03, defaultConfig, ex.getMessage(), ex);\n      }\n    }\n\n    if (config \u003d\u003d null) {\n      Configuration siteConf;\n      File siteFile \u003d new File(file, name + \"-site.xml\");\n      if (!siteFile.exists()) {\n        log.warn(\"Site configuration file [{}] not found in config directory\", siteFile);\n        siteConf \u003d new Configuration(false);\n      } else {\n        if (!siteFile.isFile()) {\n          throw new ServerException(ServerException.ERROR.S05, siteFile.getAbsolutePath());\n        }\n        try {\n          log.debug(\"Loading site configuration from [{}]\", siteFile);\n          inputStream \u003d new FileInputStream(siteFile);\n          siteConf \u003d new Configuration(false);\n          ConfigurationUtils.load(siteConf, inputStream);\n        } catch (IOException ex) {\n          throw new ServerException(ServerException.ERROR.S06, siteFile, ex.getMessage(), ex);\n        }\n      }\n\n      config \u003d new Configuration(false);\n      ConfigurationUtils.copy(siteConf, config);\n    }\n\n    ConfigurationUtils.injectDefaults(defaultConf, config);\n\n    for (String name : System.getProperties().stringPropertyNames()) {\n      String value \u003d System.getProperty(name);\n      if (name.startsWith(getPrefix() + \".\")) {\n        config.set(name, value);\n        if (name.endsWith(\".password\") || name.endsWith(\".secret\")) {\n          value \u003d \"*MASKED*\";\n        }\n        log.info(\"System property sets  {}: {}\", name, value);\n      }\n    }\n\n    log.debug(\"Loaded Configuration:\");\n    log.debug(\"------------------------------------------------------\");\n    for (Map.Entry\u003cString, String\u003e entry : config) {\n      String name \u003d entry.getKey();\n      String value \u003d config.get(entry.getKey());\n      if (name.endsWith(\".password\") || name.endsWith(\".secret\")) {\n        value \u003d \"*MASKED*\";\n      }\n      log.debug(\"  {}: {}\", entry.getKey(), value);\n    }\n    log.debug(\"------------------------------------------------------\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java"
    }
  }
}