{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementDispatcher.java",
  "functionName": "pullRejectedRequests",
  "functionId": "pullRejectedRequests___applicationId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java",
  "functionStartLine": 93,
  "functionEndLine": 108,
  "numCommitsSeen": 3,
  "timeTaken": 2498,
  "changeHistory": [
    "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5",
    "6e5ba9366fc05719906ff2789b1a0fd26001182b",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5": "Ybodychange",
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15223. Replace Collections.EMPTY* with empty* when available\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "18/02/18 5:19 AM",
      "commitName": "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5",
      "commitAuthor": "fang zhenyi",
      "commitDateOld": "02/02/18 10:28 AM",
      "commitNameOld": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 15.79,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public List\u003cSchedulingRequestWithPlacementAttempt\u003e pullRejectedRequests(\n       ApplicationId applicationId) {\n     List\u003cSchedulingRequestWithPlacementAttempt\u003e rejectedReqs \u003d\n         this.rejectedRequests.get(applicationId);\n     if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n       List\u003cSchedulingRequestWithPlacementAttempt\u003e retList \u003d new ArrayList\u003c\u003e();\n       synchronized (rejectedReqs) {\n         if (rejectedReqs.size() \u003e 0) {\n           retList.addAll(rejectedReqs);\n           rejectedReqs.clear();\n         }\n       }\n       return retList;\n     }\n-    return Collections.EMPTY_LIST;\n+    return Collections.emptyList();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cSchedulingRequestWithPlacementAttempt\u003e pullRejectedRequests(\n      ApplicationId applicationId) {\n    List\u003cSchedulingRequestWithPlacementAttempt\u003e rejectedReqs \u003d\n        this.rejectedRequests.get(applicationId);\n    if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n      List\u003cSchedulingRequestWithPlacementAttempt\u003e retList \u003d new ArrayList\u003c\u003e();\n      synchronized (rejectedReqs) {\n        if (rejectedReqs.size() \u003e 0) {\n          retList.addAll(rejectedReqs);\n          rejectedReqs.clear();\n        }\n      }\n      return retList;\n    }\n    return Collections.emptyList();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java",
      "extendedDetails": {}
    },
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "02/02/18 10:28 AM",
      "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
          "commitDate": "02/02/18 10:28 AM",
          "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public List\u003cSchedulingRequest\u003e pullRejectedRequests(\n+  public List\u003cSchedulingRequestWithPlacementAttempt\u003e pullRejectedRequests(\n       ApplicationId applicationId) {\n-    List\u003cSchedulingRequest\u003e rejectedReqs \u003d\n+    List\u003cSchedulingRequestWithPlacementAttempt\u003e rejectedReqs \u003d\n         this.rejectedRequests.get(applicationId);\n     if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n-      List\u003cSchedulingRequest\u003e retList \u003d new ArrayList\u003c\u003e();\n+      List\u003cSchedulingRequestWithPlacementAttempt\u003e retList \u003d new ArrayList\u003c\u003e();\n       synchronized (rejectedReqs) {\n         if (rejectedReqs.size() \u003e 0) {\n           retList.addAll(rejectedReqs);\n           rejectedReqs.clear();\n         }\n       }\n       return retList;\n     }\n     return Collections.EMPTY_LIST;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cSchedulingRequestWithPlacementAttempt\u003e pullRejectedRequests(\n      ApplicationId applicationId) {\n    List\u003cSchedulingRequestWithPlacementAttempt\u003e rejectedReqs \u003d\n        this.rejectedRequests.get(applicationId);\n    if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n      List\u003cSchedulingRequestWithPlacementAttempt\u003e retList \u003d new ArrayList\u003c\u003e();\n      synchronized (rejectedReqs) {\n        if (rejectedReqs.size() \u003e 0) {\n          retList.addAll(rejectedReqs);\n          rejectedReqs.clear();\n        }\n      }\n      return retList;\n    }\n    return Collections.EMPTY_LIST;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java",
          "extendedDetails": {
            "oldValue": "List\u003cSchedulingRequest\u003e",
            "newValue": "List\u003cSchedulingRequestWithPlacementAttempt\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
          "commitDate": "02/02/18 10:28 AM",
          "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public List\u003cSchedulingRequest\u003e pullRejectedRequests(\n+  public List\u003cSchedulingRequestWithPlacementAttempt\u003e pullRejectedRequests(\n       ApplicationId applicationId) {\n-    List\u003cSchedulingRequest\u003e rejectedReqs \u003d\n+    List\u003cSchedulingRequestWithPlacementAttempt\u003e rejectedReqs \u003d\n         this.rejectedRequests.get(applicationId);\n     if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n-      List\u003cSchedulingRequest\u003e retList \u003d new ArrayList\u003c\u003e();\n+      List\u003cSchedulingRequestWithPlacementAttempt\u003e retList \u003d new ArrayList\u003c\u003e();\n       synchronized (rejectedReqs) {\n         if (rejectedReqs.size() \u003e 0) {\n           retList.addAll(rejectedReqs);\n           rejectedReqs.clear();\n         }\n       }\n       return retList;\n     }\n     return Collections.EMPTY_LIST;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cSchedulingRequestWithPlacementAttempt\u003e pullRejectedRequests(\n      ApplicationId applicationId) {\n    List\u003cSchedulingRequestWithPlacementAttempt\u003e rejectedReqs \u003d\n        this.rejectedRequests.get(applicationId);\n    if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n      List\u003cSchedulingRequestWithPlacementAttempt\u003e retList \u003d new ArrayList\u003c\u003e();\n      synchronized (rejectedReqs) {\n        if (rejectedReqs.size() \u003e 0) {\n          retList.addAll(rejectedReqs);\n          rejectedReqs.clear();\n        }\n      }\n      return retList;\n    }\n    return Collections.EMPTY_LIST;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java",
          "extendedDetails": {}
        }
      ]
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,16 @@\n+  public List\u003cSchedulingRequest\u003e pullRejectedRequests(\n+      ApplicationId applicationId) {\n+    List\u003cSchedulingRequest\u003e rejectedReqs \u003d\n+        this.rejectedRequests.get(applicationId);\n+    if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n+      List\u003cSchedulingRequest\u003e retList \u003d new ArrayList\u003c\u003e();\n+      synchronized (rejectedReqs) {\n+        if (rejectedReqs.size() \u003e 0) {\n+          retList.addAll(rejectedReqs);\n+          rejectedReqs.clear();\n+        }\n+      }\n+      return retList;\n+    }\n+    return Collections.EMPTY_LIST;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cSchedulingRequest\u003e pullRejectedRequests(\n      ApplicationId applicationId) {\n    List\u003cSchedulingRequest\u003e rejectedReqs \u003d\n        this.rejectedRequests.get(applicationId);\n    if (rejectedReqs !\u003d null \u0026\u0026 !rejectedReqs.isEmpty()) {\n      List\u003cSchedulingRequest\u003e retList \u003d new ArrayList\u003c\u003e();\n      synchronized (rejectedReqs) {\n        if (rejectedReqs.size() \u003e 0) {\n          retList.addAll(rejectedReqs);\n          rejectedReqs.clear();\n        }\n      }\n      return retList;\n    }\n    return Collections.EMPTY_LIST;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java"
    }
  }
}