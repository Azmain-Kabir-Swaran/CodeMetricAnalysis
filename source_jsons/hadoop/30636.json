{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "getTimelineDomain",
  "functionId": "getTimelineDomain___iterator-LeveldbIterator__domainId-String__prefix-byte[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 1801,
  "functionEndLine": 1839,
  "numCommitsSeen": 24,
  "timeTaken": 2393,
  "changeHistory": [
    "241d3b3a50c6af92f023d8b2c24598f4813f4674",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": "Ybodychange",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": "Yparameterchange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2938. Fixed new findbugs warnings in hadoop-yarn-resourcemanager and hadoop-yarn-applicationhistoryservice. Contributed by Varun Saxena.\n",
      "commitDate": "29/12/14 9:59 AM",
      "commitName": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "23/12/14 6:25 PM",
      "commitNameOld": "149512a83743715bb100feb6747b7e88301018ab",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.65,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private static TimelineDomain getTimelineDomain(\n       LeveldbIterator iterator, String domainId, byte[] prefix) throws IOException {\n     // Iterate over all the rows whose key starts with prefix to retrieve the\n     // domain information.\n     TimelineDomain domain \u003d new TimelineDomain();\n     domain.setId(domainId);\n     boolean noRows \u003d true;\n     for (; iterator.hasNext(); iterator.next()) {\n       byte[] key \u003d iterator.peekNext().getKey();\n       if (!prefixMatches(prefix, prefix.length, key)) {\n         break;\n       }\n       if (noRows) {\n         noRows \u003d false;\n       }\n       byte[] value \u003d iterator.peekNext().getValue();\n       if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n         if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n-          domain.setDescription(new String(value));\n+          domain.setDescription(new String(value, Charset.forName(\"UTF-8\")));\n         } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n-          domain.setOwner(new String(value));\n+          domain.setOwner(new String(value, Charset.forName(\"UTF-8\")));\n         } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n-          domain.setReaders(new String(value));\n+          domain.setReaders(new String(value, Charset.forName(\"UTF-8\")));\n         } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n-          domain.setWriters(new String(value));\n+          domain.setWriters(new String(value, Charset.forName(\"UTF-8\")));\n         } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n           domain.setCreatedTime(readReverseOrderedLong(value, 0));\n           domain.setModifiedTime(readReverseOrderedLong(value, 8));\n         } else {\n           LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n         }\n       }\n     }\n     if (noRows) {\n       return null;\n     } else {\n       return domain;\n     }\n   }    \n\\ No newline at end of file\n",
      "actualSource": "  private static TimelineDomain getTimelineDomain(\n      LeveldbIterator iterator, String domainId, byte[] prefix) throws IOException {\n    // Iterate over all the rows whose key starts with prefix to retrieve the\n    // domain information.\n    TimelineDomain domain \u003d new TimelineDomain();\n    domain.setId(domainId);\n    boolean noRows \u003d true;\n    for (; iterator.hasNext(); iterator.next()) {\n      byte[] key \u003d iterator.peekNext().getKey();\n      if (!prefixMatches(prefix, prefix.length, key)) {\n        break;\n      }\n      if (noRows) {\n        noRows \u003d false;\n      }\n      byte[] value \u003d iterator.peekNext().getValue();\n      if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n        if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n          domain.setDescription(new String(value, Charset.forName(\"UTF-8\")));\n        } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n          domain.setOwner(new String(value, Charset.forName(\"UTF-8\")));\n        } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n          domain.setReaders(new String(value, Charset.forName(\"UTF-8\")));\n        } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n          domain.setWriters(new String(value, Charset.forName(\"UTF-8\")));\n        } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n          domain.setCreatedTime(readReverseOrderedLong(value, 0));\n          domain.setModifiedTime(readReverseOrderedLong(value, 8));\n        } else {\n          LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n        }\n      }\n    }\n    if (noRows) {\n      return null;\n    } else {\n      return domain;\n    }\n  }    ",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1984. LeveldbTimelineStore does not handle db exceptions properly. Contributed by Varun Saxena\n",
      "commitDate": "24/11/14 2:36 PM",
      "commitName": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private static TimelineDomain getTimelineDomain(\n-      DBIterator iterator, String domainId, byte[] prefix) throws IOException {\n+      LeveldbIterator iterator, String domainId, byte[] prefix) throws IOException {\n     // Iterate over all the rows whose key starts with prefix to retrieve the\n     // domain information.\n     TimelineDomain domain \u003d new TimelineDomain();\n     domain.setId(domainId);\n     boolean noRows \u003d true;\n     for (; iterator.hasNext(); iterator.next()) {\n       byte[] key \u003d iterator.peekNext().getKey();\n       if (!prefixMatches(prefix, prefix.length, key)) {\n         break;\n       }\n       if (noRows) {\n         noRows \u003d false;\n       }\n       byte[] value \u003d iterator.peekNext().getValue();\n       if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n         if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n           domain.setDescription(new String(value));\n         } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n           domain.setOwner(new String(value));\n         } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n           domain.setReaders(new String(value));\n         } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n           domain.setWriters(new String(value));\n         } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n           domain.setCreatedTime(readReverseOrderedLong(value, 0));\n           domain.setModifiedTime(readReverseOrderedLong(value, 8));\n         } else {\n           LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n         }\n       }\n     }\n     if (noRows) {\n       return null;\n     } else {\n       return domain;\n     }\n-  }\n\\ No newline at end of file\n+  }    \n\\ No newline at end of file\n",
      "actualSource": "  private static TimelineDomain getTimelineDomain(\n      LeveldbIterator iterator, String domainId, byte[] prefix) throws IOException {\n    // Iterate over all the rows whose key starts with prefix to retrieve the\n    // domain information.\n    TimelineDomain domain \u003d new TimelineDomain();\n    domain.setId(domainId);\n    boolean noRows \u003d true;\n    for (; iterator.hasNext(); iterator.next()) {\n      byte[] key \u003d iterator.peekNext().getKey();\n      if (!prefixMatches(prefix, prefix.length, key)) {\n        break;\n      }\n      if (noRows) {\n        noRows \u003d false;\n      }\n      byte[] value \u003d iterator.peekNext().getValue();\n      if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n        if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n          domain.setDescription(new String(value));\n        } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n          domain.setOwner(new String(value));\n        } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n          domain.setReaders(new String(value));\n        } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n          domain.setWriters(new String(value));\n        } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n          domain.setCreatedTime(readReverseOrderedLong(value, 0));\n          domain.setModifiedTime(readReverseOrderedLong(value, 8));\n        } else {\n          LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n        }\n      }\n    }\n    if (noRows) {\n      return null;\n    } else {\n      return domain;\n    }\n  }    ",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {
        "oldValue": "[iterator-DBIterator, domainId-String, prefix-byte[]]",
        "newValue": "[iterator-LeveldbIterator, domainId-String, prefix-byte[]]"
      }
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,39 @@\n+  private static TimelineDomain getTimelineDomain(\n+      DBIterator iterator, String domainId, byte[] prefix) throws IOException {\n+    // Iterate over all the rows whose key starts with prefix to retrieve the\n+    // domain information.\n+    TimelineDomain domain \u003d new TimelineDomain();\n+    domain.setId(domainId);\n+    boolean noRows \u003d true;\n+    for (; iterator.hasNext(); iterator.next()) {\n+      byte[] key \u003d iterator.peekNext().getKey();\n+      if (!prefixMatches(prefix, prefix.length, key)) {\n+        break;\n+      }\n+      if (noRows) {\n+        noRows \u003d false;\n+      }\n+      byte[] value \u003d iterator.peekNext().getValue();\n+      if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n+        if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n+          domain.setDescription(new String(value));\n+        } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n+          domain.setOwner(new String(value));\n+        } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n+          domain.setReaders(new String(value));\n+        } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n+          domain.setWriters(new String(value));\n+        } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n+          domain.setCreatedTime(readReverseOrderedLong(value, 0));\n+          domain.setModifiedTime(readReverseOrderedLong(value, 8));\n+        } else {\n+          LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n+        }\n+      }\n+    }\n+    if (noRows) {\n+      return null;\n+    } else {\n+      return domain;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static TimelineDomain getTimelineDomain(\n      DBIterator iterator, String domainId, byte[] prefix) throws IOException {\n    // Iterate over all the rows whose key starts with prefix to retrieve the\n    // domain information.\n    TimelineDomain domain \u003d new TimelineDomain();\n    domain.setId(domainId);\n    boolean noRows \u003d true;\n    for (; iterator.hasNext(); iterator.next()) {\n      byte[] key \u003d iterator.peekNext().getKey();\n      if (!prefixMatches(prefix, prefix.length, key)) {\n        break;\n      }\n      if (noRows) {\n        noRows \u003d false;\n      }\n      byte[] value \u003d iterator.peekNext().getValue();\n      if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n        if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n          domain.setDescription(new String(value));\n        } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n          domain.setOwner(new String(value));\n        } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n          domain.setReaders(new String(value));\n        } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n          domain.setWriters(new String(value));\n        } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n          domain.setCreatedTime(readReverseOrderedLong(value, 0));\n          domain.setModifiedTime(readReverseOrderedLong(value, 8));\n        } else {\n          LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n        }\n      }\n    }\n    if (noRows) {\n      return null;\n    } else {\n      return domain;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
    }
  }
}