{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerConfiguration.java",
  "functionName": "getAccessibleNodeLabels",
  "functionId": "getAccessibleNodeLabels___queue-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
  "functionStartLine": 662,
  "functionEndLine": 700,
  "numCommitsSeen": 90,
  "timeTaken": 3220,
  "changeHistory": [
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1"
  ],
  "changeHistoryShort": {
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,39 @@\n+  public Set\u003cString\u003e getAccessibleNodeLabels(String queue) {\n+    String accessibleLabelStr \u003d\n+        get(getQueuePrefix(queue) + ACCESSIBLE_NODE_LABELS);\n+\n+    // When accessible-label is null, \n+    if (accessibleLabelStr \u003d\u003d null) {\n+      // Only return null when queue is not ROOT\n+      if (!queue.equals(ROOT)) {\n+        return null;\n+      }\n+    } else {\n+      // print a warning when accessibleNodeLabel specified in config and queue\n+      // is ROOT\n+      if (queue.equals(ROOT)) {\n+        LOG.warn(\"Accessible node labels for root queue will be ignored,\"\n+            + \" it will be automatically set to \\\"*\\\".\");\n+      }\n+    }\n+\n+    // always return ANY for queue root\n+    if (queue.equals(ROOT)) {\n+      return ImmutableSet.of(RMNodeLabelsManager.ANY);\n+    }\n+\n+    // In other cases, split the accessibleLabelStr by \",\"\n+    Set\u003cString\u003e set \u003d new HashSet\u003cString\u003e();\n+    for (String str : accessibleLabelStr.split(\",\")) {\n+      if (!str.trim().isEmpty()) {\n+        set.add(str.trim());\n+      }\n+    }\n+    \n+    // if labels contains \"*\", only keep ANY behind\n+    if (set.contains(RMNodeLabelsManager.ANY)) {\n+      set.clear();\n+      set.add(RMNodeLabelsManager.ANY);\n+    }\n+    return Collections.unmodifiableSet(set);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e getAccessibleNodeLabels(String queue) {\n    String accessibleLabelStr \u003d\n        get(getQueuePrefix(queue) + ACCESSIBLE_NODE_LABELS);\n\n    // When accessible-label is null, \n    if (accessibleLabelStr \u003d\u003d null) {\n      // Only return null when queue is not ROOT\n      if (!queue.equals(ROOT)) {\n        return null;\n      }\n    } else {\n      // print a warning when accessibleNodeLabel specified in config and queue\n      // is ROOT\n      if (queue.equals(ROOT)) {\n        LOG.warn(\"Accessible node labels for root queue will be ignored,\"\n            + \" it will be automatically set to \\\"*\\\".\");\n      }\n    }\n\n    // always return ANY for queue root\n    if (queue.equals(ROOT)) {\n      return ImmutableSet.of(RMNodeLabelsManager.ANY);\n    }\n\n    // In other cases, split the accessibleLabelStr by \",\"\n    Set\u003cString\u003e set \u003d new HashSet\u003cString\u003e();\n    for (String str : accessibleLabelStr.split(\",\")) {\n      if (!str.trim().isEmpty()) {\n        set.add(str.trim());\n      }\n    }\n    \n    // if labels contains \"*\", only keep ANY behind\n    if (set.contains(RMNodeLabelsManager.ANY)) {\n      set.clear();\n      set.add(RMNodeLabelsManager.ANY);\n    }\n    return Collections.unmodifiableSet(set);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java"
    }
  }
}