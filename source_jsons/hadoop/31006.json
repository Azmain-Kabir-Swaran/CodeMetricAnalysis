{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationBlock.java",
  "functionStartLine": 60,
  "functionEndLine": 160,
  "numCommitsSeen": 1,
  "timeTaken": 458,
  "changeHistory": [
    "ceca9694f9a0c78d07cab2c382036f175183e67b"
  ],
  "changeHistoryShort": {
    "ceca9694f9a0c78d07cab2c382036f175183e67b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ceca9694f9a0c78d07cab2c382036f175183e67b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3661. Basic Federation UI. (Contributed by Inigo Goiri via curino)\n",
      "commitDate": "02/10/17 1:03 PM",
      "commitName": "ceca9694f9a0c78d07cab2c382036f175183e67b",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,101 @@\n+  public void render(Block html) {\n+    Configuration conf \u003d this.router.getConfig();\n+    boolean isEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.FEDERATION_ENABLED,\n+        YarnConfiguration.DEFAULT_FEDERATION_ENABLED);\n+    if (isEnabled) {\n+      setTitle(\"Federation\");\n+\n+      // Table header\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#rms\").thead().tr()\n+          .th(\".id\", \"SubCluster\")\n+          .th(\".submittedA\", \"Applications Submitted*\")\n+          .th(\".pendingA\", \"Applications Pending*\")\n+          .th(\".runningA\", \"Applications Running*\")\n+          .th(\".failedA\", \"Applications Failed*\")\n+          .th(\".killedA\", \"Applications Killed*\")\n+          .th(\".completedA\", \"Applications Completed*\")\n+          .th(\".contAllocated\", \"Containers Allocated\")\n+          .th(\".contReserved\", \"Containers Reserved\")\n+          .th(\".contPending\", \"Containers Pending\")\n+          .th(\".availableM\", \"Available Memory\")\n+          .th(\".allocatedM\", \"Allocated Memory\")\n+          .th(\".reservedM\", \"Reserved Memory\")\n+          .th(\".totalM\", \"Total Memory\")\n+          .th(\".availableVC\", \"Available VirtualCores\")\n+          .th(\".allocatedVC\", \"Allocated VirtualCores\")\n+          .th(\".reservedVC\", \"Reserved VirtualCores\")\n+          .th(\".totalVC\", \"Total VirtualCores\")\n+          .th(\".activeN\", \"Active Nodes\")\n+          .th(\".lostN\", \"Lost Nodes\")\n+          .th(\".availableN\", \"Available Nodes\")\n+          .th(\".unhealtyN\", \"Unhealthy Nodes\")\n+          .th(\".rebootedN\", \"Rebooted Nodes\")\n+          .th(\".totalN\", \"Total Nodes\")\n+          .__().__().tbody();\n+\n+      try {\n+        // Binding to the FederationStateStore\n+        FederationStateStoreFacade facade \u003d\n+            FederationStateStoreFacade.getInstance();\n+        Map\u003cSubClusterId, SubClusterInfo\u003e subClustersInfo \u003d\n+            facade.getSubClusters(true);\n+\n+        // Sort the SubClusters\n+        List\u003cSubClusterInfo\u003e subclusters \u003d new ArrayList\u003c\u003e();\n+        subclusters.addAll(subClustersInfo.values());\n+        Comparator\u003c? super SubClusterInfo\u003e cmp \u003d\n+            new Comparator\u003cSubClusterInfo\u003e() {\n+              @Override\n+              public int compare(SubClusterInfo o1, SubClusterInfo o2) {\n+                return o1.getSubClusterId().compareTo(o2.getSubClusterId());\n+              }\n+            };\n+        Collections.sort(subclusters, cmp);\n+\n+        for (SubClusterInfo subcluster : subclusters) {\n+          SubClusterId subClusterId \u003d subcluster.getSubClusterId();\n+          String webAppAddress \u003d subcluster.getRMWebServiceAddress();\n+          String capability \u003d subcluster.getCapability();\n+          ClusterMetricsInfo subClusterInfo \u003d getClusterMetricsInfo(capability);\n+\n+          // Building row per SubCluster\n+          tbody.tr().td().a(\"//\" + webAppAddress, subClusterId.toString()).__()\n+              .td(Integer.toString(subClusterInfo.getAppsSubmitted()))\n+              .td(Integer.toString(subClusterInfo.getAppsPending()))\n+              .td(Integer.toString(subClusterInfo.getAppsRunning()))\n+              .td(Integer.toString(subClusterInfo.getAppsFailed()))\n+              .td(Integer.toString(subClusterInfo.getAppsKilled()))\n+              .td(Integer.toString(subClusterInfo.getAppsCompleted()))\n+              .td(Integer.toString(subClusterInfo.getContainersAllocated()))\n+              .td(Integer.toString(subClusterInfo.getReservedContainers()))\n+              .td(Integer.toString(subClusterInfo.getPendingContainers()))\n+              .td(StringUtils.byteDesc(\n+                  subClusterInfo.getAvailableMB() * BYTES_IN_MB))\n+              .td(StringUtils.byteDesc(\n+                  subClusterInfo.getAllocatedMB() * BYTES_IN_MB))\n+              .td(StringUtils.byteDesc(\n+                  subClusterInfo.getReservedMB() * BYTES_IN_MB))\n+              .td(StringUtils.byteDesc(\n+                  subClusterInfo.getTotalMB() * BYTES_IN_MB))\n+              .td(Long.toString(subClusterInfo.getAvailableVirtualCores()))\n+              .td(Long.toString(subClusterInfo.getAllocatedVirtualCores()))\n+              .td(Long.toString(subClusterInfo.getReservedVirtualCores()))\n+              .td(Long.toString(subClusterInfo.getTotalVirtualCores()))\n+              .td(Integer.toString(subClusterInfo.getActiveNodes()))\n+              .td(Integer.toString(subClusterInfo.getLostNodes()))\n+              .td(Integer.toString(subClusterInfo.getDecommissionedNodes()))\n+              .td(Integer.toString(subClusterInfo.getUnhealthyNodes()))\n+              .td(Integer.toString(subClusterInfo.getRebootedNodes()))\n+              .td(Integer.toString(subClusterInfo.getTotalNodes())).__();\n+        }\n+      } catch (YarnException e) {\n+        LOG.error(\"Cannot render ResourceManager\", e);\n+      }\n+\n+      tbody.__().__().div()\n+          .p().__(\"*The application counts are local per subcluster\").__().__();\n+    } else {\n+      setTitle(\"Federation is not Enabled!\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void render(Block html) {\n    Configuration conf \u003d this.router.getConfig();\n    boolean isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.FEDERATION_ENABLED,\n        YarnConfiguration.DEFAULT_FEDERATION_ENABLED);\n    if (isEnabled) {\n      setTitle(\"Federation\");\n\n      // Table header\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#rms\").thead().tr()\n          .th(\".id\", \"SubCluster\")\n          .th(\".submittedA\", \"Applications Submitted*\")\n          .th(\".pendingA\", \"Applications Pending*\")\n          .th(\".runningA\", \"Applications Running*\")\n          .th(\".failedA\", \"Applications Failed*\")\n          .th(\".killedA\", \"Applications Killed*\")\n          .th(\".completedA\", \"Applications Completed*\")\n          .th(\".contAllocated\", \"Containers Allocated\")\n          .th(\".contReserved\", \"Containers Reserved\")\n          .th(\".contPending\", \"Containers Pending\")\n          .th(\".availableM\", \"Available Memory\")\n          .th(\".allocatedM\", \"Allocated Memory\")\n          .th(\".reservedM\", \"Reserved Memory\")\n          .th(\".totalM\", \"Total Memory\")\n          .th(\".availableVC\", \"Available VirtualCores\")\n          .th(\".allocatedVC\", \"Allocated VirtualCores\")\n          .th(\".reservedVC\", \"Reserved VirtualCores\")\n          .th(\".totalVC\", \"Total VirtualCores\")\n          .th(\".activeN\", \"Active Nodes\")\n          .th(\".lostN\", \"Lost Nodes\")\n          .th(\".availableN\", \"Available Nodes\")\n          .th(\".unhealtyN\", \"Unhealthy Nodes\")\n          .th(\".rebootedN\", \"Rebooted Nodes\")\n          .th(\".totalN\", \"Total Nodes\")\n          .__().__().tbody();\n\n      try {\n        // Binding to the FederationStateStore\n        FederationStateStoreFacade facade \u003d\n            FederationStateStoreFacade.getInstance();\n        Map\u003cSubClusterId, SubClusterInfo\u003e subClustersInfo \u003d\n            facade.getSubClusters(true);\n\n        // Sort the SubClusters\n        List\u003cSubClusterInfo\u003e subclusters \u003d new ArrayList\u003c\u003e();\n        subclusters.addAll(subClustersInfo.values());\n        Comparator\u003c? super SubClusterInfo\u003e cmp \u003d\n            new Comparator\u003cSubClusterInfo\u003e() {\n              @Override\n              public int compare(SubClusterInfo o1, SubClusterInfo o2) {\n                return o1.getSubClusterId().compareTo(o2.getSubClusterId());\n              }\n            };\n        Collections.sort(subclusters, cmp);\n\n        for (SubClusterInfo subcluster : subclusters) {\n          SubClusterId subClusterId \u003d subcluster.getSubClusterId();\n          String webAppAddress \u003d subcluster.getRMWebServiceAddress();\n          String capability \u003d subcluster.getCapability();\n          ClusterMetricsInfo subClusterInfo \u003d getClusterMetricsInfo(capability);\n\n          // Building row per SubCluster\n          tbody.tr().td().a(\"//\" + webAppAddress, subClusterId.toString()).__()\n              .td(Integer.toString(subClusterInfo.getAppsSubmitted()))\n              .td(Integer.toString(subClusterInfo.getAppsPending()))\n              .td(Integer.toString(subClusterInfo.getAppsRunning()))\n              .td(Integer.toString(subClusterInfo.getAppsFailed()))\n              .td(Integer.toString(subClusterInfo.getAppsKilled()))\n              .td(Integer.toString(subClusterInfo.getAppsCompleted()))\n              .td(Integer.toString(subClusterInfo.getContainersAllocated()))\n              .td(Integer.toString(subClusterInfo.getReservedContainers()))\n              .td(Integer.toString(subClusterInfo.getPendingContainers()))\n              .td(StringUtils.byteDesc(\n                  subClusterInfo.getAvailableMB() * BYTES_IN_MB))\n              .td(StringUtils.byteDesc(\n                  subClusterInfo.getAllocatedMB() * BYTES_IN_MB))\n              .td(StringUtils.byteDesc(\n                  subClusterInfo.getReservedMB() * BYTES_IN_MB))\n              .td(StringUtils.byteDesc(\n                  subClusterInfo.getTotalMB() * BYTES_IN_MB))\n              .td(Long.toString(subClusterInfo.getAvailableVirtualCores()))\n              .td(Long.toString(subClusterInfo.getAllocatedVirtualCores()))\n              .td(Long.toString(subClusterInfo.getReservedVirtualCores()))\n              .td(Long.toString(subClusterInfo.getTotalVirtualCores()))\n              .td(Integer.toString(subClusterInfo.getActiveNodes()))\n              .td(Integer.toString(subClusterInfo.getLostNodes()))\n              .td(Integer.toString(subClusterInfo.getDecommissionedNodes()))\n              .td(Integer.toString(subClusterInfo.getUnhealthyNodes()))\n              .td(Integer.toString(subClusterInfo.getRebootedNodes()))\n              .td(Integer.toString(subClusterInfo.getTotalNodes())).__();\n        }\n      } catch (YarnException e) {\n        LOG.error(\"Cannot render ResourceManager\", e);\n      }\n\n      tbody.__().__().div()\n          .p().__(\"*The application counts are local per subcluster\").__().__();\n    } else {\n      setTitle(\"Federation is not Enabled!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationBlock.java"
    }
  }
}