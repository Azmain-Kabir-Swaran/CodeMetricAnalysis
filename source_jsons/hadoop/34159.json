{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "updateQueuingLimit",
  "functionId": "updateQueuingLimit___limit-ContainerQueuingLimit",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 632,
  "functionEndLine": 643,
  "numCommitsSeen": 34,
  "timeTaken": 2986,
  "changeHistory": [
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830"
  ],
  "changeHistoryShort": {
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ymultichange(Ymovefromfile,Ybodychange)",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,12 @@\n   public void updateQueuingLimit(ContainerQueuingLimit limit) {\n     this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\n-    // TODO: Include wait time as well once it is implemented\n-    if (this.queuingLimit.getMaxQueueLength() \u003e -1) {\n-      shedQueuedOpportunisticContainers();\n+    // YARN-2886 should add support for wait-times. Include wait time as\n+    // well once it is implemented\n+    if ((queuingLimit.getMaxQueueLength() \u003e -1) \u0026\u0026\n+        (queuingLimit.getMaxQueueLength() \u003c\n+            queuedOpportunisticContainers.size())) {\n+      dispatcher.getEventHandler().handle(\n+          new ContainerSchedulerEvent(null,\n+              ContainerSchedulerEventType.SHED_QUEUED_CONTAINERS));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateQueuingLimit(ContainerQueuingLimit limit) {\n    this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\n    // YARN-2886 should add support for wait-times. Include wait time as\n    // well once it is implemented\n    if ((queuingLimit.getMaxQueueLength() \u003e -1) \u0026\u0026\n        (queuingLimit.getMaxQueueLength() \u003c\n            queuedOpportunisticContainers.size())) {\n      dispatcher.getEventHandler().handle(\n          new ContainerSchedulerEvent(null,\n              ContainerSchedulerEventType.SHED_QUEUED_CONTAINERS));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
            "oldMethodName": "updateQueuingLimit",
            "newMethodName": "updateQueuingLimit"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,12 @@\n   public void updateQueuingLimit(ContainerQueuingLimit limit) {\n     this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\n-    // TODO: Include wait time as well once it is implemented\n-    if (this.queuingLimit.getMaxQueueLength() \u003e -1) {\n-      shedQueuedOpportunisticContainers();\n+    // YARN-2886 should add support for wait-times. Include wait time as\n+    // well once it is implemented\n+    if ((queuingLimit.getMaxQueueLength() \u003e -1) \u0026\u0026\n+        (queuingLimit.getMaxQueueLength() \u003c\n+            queuedOpportunisticContainers.size())) {\n+      dispatcher.getEventHandler().handle(\n+          new ContainerSchedulerEvent(null,\n+              ContainerSchedulerEventType.SHED_QUEUED_CONTAINERS));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateQueuingLimit(ContainerQueuingLimit limit) {\n    this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\n    // YARN-2886 should add support for wait-times. Include wait time as\n    // well once it is implemented\n    if ((queuingLimit.getMaxQueueLength() \u003e -1) \u0026\u0026\n        (queuingLimit.getMaxQueueLength() \u003c\n            queuedOpportunisticContainers.size())) {\n      dispatcher.getEventHandler().handle(\n          new ContainerSchedulerEvent(null,\n              ContainerSchedulerEventType.SHED_QUEUED_CONTAINERS));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,7 @@\n+  public void updateQueuingLimit(ContainerQueuingLimit limit) {\n+    this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\n+    // TODO: Include wait time as well once it is implemented\n+    if (this.queuingLimit.getMaxQueueLength() \u003e -1) {\n+      shedQueuedOpportunisticContainers();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateQueuingLimit(ContainerQueuingLimit limit) {\n    this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\n    // TODO: Include wait time as well once it is implemented\n    if (this.queuingLimit.getMaxQueueLength() \u003e -1) {\n      shedQueuedOpportunisticContainers();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java"
    }
  }
}