{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNode.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
  "functionStartLine": 928,
  "functionEndLine": 930,
  "numCommitsSeen": 210,
  "timeTaken": 5165,
  "changeHistory": [
    "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5",
    "a88f31ebf3433392419127816f168136de0a9e77",
    "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e"
  ],
  "changeHistoryShort": {
    "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
    "a88f31ebf3433392419127816f168136de0a9e77": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
    "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5": {
      "type": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8953. DataNode Metrics logging (Contributed by Kanaka Kumar Avvaru)\n",
      "commitDate": "15/09/15 11:48 AM",
      "commitName": "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5",
      "commitAuthor": "Vinayakumar B",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8953. DataNode Metrics logging (Contributed by Kanaka Kumar Avvaru)\n",
          "commitDate": "15/09/15 11:48 AM",
          "commitName": "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "14/09/15 6:22 PM",
          "commitNameOld": "76957a485b526468498f93e443544131a88b5684",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,3 @@\n-    public void run() {\n-      // Skip querying metrics if there are no known appenders.\n-      if (!MetricsLog.isInfoEnabled() ||\n-          !hasAppenders(MetricsLog) ||\n-          OBJECT_NAME \u003d\u003d null) {\n-        return;\n-      }\n-\n-      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n-      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n-\n-      // Iterate over each MBean.\n-      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n-        try {\n-          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n-          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n-          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n-\n-          final AttributeList attributes \u003d\n-              server.getAttributes(mbeanName,\n-                  attributeNames.toArray(new String[attributeNames.size()]));\n-\n-          for (Object o : attributes) {\n-            final Attribute attribute \u003d (Attribute) o;\n-            final Object value \u003d attribute.getValue();\n-            final String valueStr \u003d\n-                (value !\u003d null) ? value.toString() : \"null\";\n-            // Truncate the value if it is too long\n-            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n-                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n-                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n-          }\n-        } catch (Exception e) {\n-          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n-              mbeanName.toString(), e);\n-        }\n-      }\n-      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n-    }\n\\ No newline at end of file\n+          public FileSystem run() throws IOException {\n+            return FileSystem.get(conf);\n+          }\n\\ No newline at end of file\n",
          "actualSource": "          public FileSystem run() throws IOException {\n            return FileSystem.get(conf);\n          }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "FileSystem"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8953. DataNode Metrics logging (Contributed by Kanaka Kumar Avvaru)\n",
          "commitDate": "15/09/15 11:48 AM",
          "commitName": "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "14/09/15 6:22 PM",
          "commitNameOld": "76957a485b526468498f93e443544131a88b5684",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,3 @@\n-    public void run() {\n-      // Skip querying metrics if there are no known appenders.\n-      if (!MetricsLog.isInfoEnabled() ||\n-          !hasAppenders(MetricsLog) ||\n-          OBJECT_NAME \u003d\u003d null) {\n-        return;\n-      }\n-\n-      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n-      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n-\n-      // Iterate over each MBean.\n-      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n-        try {\n-          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n-          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n-          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n-\n-          final AttributeList attributes \u003d\n-              server.getAttributes(mbeanName,\n-                  attributeNames.toArray(new String[attributeNames.size()]));\n-\n-          for (Object o : attributes) {\n-            final Attribute attribute \u003d (Attribute) o;\n-            final Object value \u003d attribute.getValue();\n-            final String valueStr \u003d\n-                (value !\u003d null) ? value.toString() : \"null\";\n-            // Truncate the value if it is too long\n-            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n-                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n-                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n-          }\n-        } catch (Exception e) {\n-          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n-              mbeanName.toString(), e);\n-        }\n-      }\n-      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n-    }\n\\ No newline at end of file\n+          public FileSystem run() throws IOException {\n+            return FileSystem.get(conf);\n+          }\n\\ No newline at end of file\n",
          "actualSource": "          public FileSystem run() throws IOException {\n            return FileSystem.get(conf);\n          }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8953. DataNode Metrics logging (Contributed by Kanaka Kumar Avvaru)\n",
          "commitDate": "15/09/15 11:48 AM",
          "commitName": "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "14/09/15 6:22 PM",
          "commitNameOld": "76957a485b526468498f93e443544131a88b5684",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.73,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,3 @@\n-    public void run() {\n-      // Skip querying metrics if there are no known appenders.\n-      if (!MetricsLog.isInfoEnabled() ||\n-          !hasAppenders(MetricsLog) ||\n-          OBJECT_NAME \u003d\u003d null) {\n-        return;\n-      }\n-\n-      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n-      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n-\n-      // Iterate over each MBean.\n-      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n-        try {\n-          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n-          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n-          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n-\n-          final AttributeList attributes \u003d\n-              server.getAttributes(mbeanName,\n-                  attributeNames.toArray(new String[attributeNames.size()]));\n-\n-          for (Object o : attributes) {\n-            final Attribute attribute \u003d (Attribute) o;\n-            final Object value \u003d attribute.getValue();\n-            final String valueStr \u003d\n-                (value !\u003d null) ? value.toString() : \"null\";\n-            // Truncate the value if it is too long\n-            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n-                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n-                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n-          }\n-        } catch (Exception e) {\n-          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n-              mbeanName.toString(), e);\n-        }\n-      }\n-      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n-    }\n\\ No newline at end of file\n+          public FileSystem run() throws IOException {\n+            return FileSystem.get(conf);\n+          }\n\\ No newline at end of file\n",
          "actualSource": "          public FileSystem run() throws IOException {\n            return FileSystem.get(conf);\n          }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "a88f31ebf3433392419127816f168136de0a9e77": {
      "type": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8880. NameNode metrics logging. (Arpit Agarwal)\n",
      "commitDate": "17/08/15 4:55 PM",
      "commitName": "a88f31ebf3433392419127816f168136de0a9e77",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8880. NameNode metrics logging. (Arpit Agarwal)\n",
          "commitDate": "17/08/15 4:55 PM",
          "commitName": "a88f31ebf3433392419127816f168136de0a9e77",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/06/15 9:57 PM",
          "commitNameOld": "927577c87ca19e8b5b75722f78e2def6d9386576",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 69.79,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,39 @@\n-          public FileSystem run() throws IOException {\n-            return FileSystem.get(conf);\n-          }\n\\ No newline at end of file\n+    public void run() {\n+      // Skip querying metrics if there are no known appenders.\n+      if (!MetricsLog.isInfoEnabled() ||\n+          !hasAppenders(MetricsLog) ||\n+          OBJECT_NAME \u003d\u003d null) {\n+        return;\n+      }\n+\n+      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n+      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n+\n+      // Iterate over each MBean.\n+      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n+        try {\n+          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n+          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n+          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n+\n+          final AttributeList attributes \u003d\n+              server.getAttributes(mbeanName,\n+                  attributeNames.toArray(new String[attributeNames.size()]));\n+\n+          for (Object o : attributes) {\n+            final Attribute attribute \u003d (Attribute) o;\n+            final Object value \u003d attribute.getValue();\n+            final String valueStr \u003d\n+                (value !\u003d null) ? value.toString() : \"null\";\n+            // Truncate the value if it is too long\n+            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n+                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n+                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n+          }\n+        } catch (Exception e) {\n+          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n+              mbeanName.toString(), e);\n+        }\n+      }\n+      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      // Skip querying metrics if there are no known appenders.\n      if (!MetricsLog.isInfoEnabled() ||\n          !hasAppenders(MetricsLog) ||\n          OBJECT_NAME \u003d\u003d null) {\n        return;\n      }\n\n      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n\n      // Iterate over each MBean.\n      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n        try {\n          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n\n          final AttributeList attributes \u003d\n              server.getAttributes(mbeanName,\n                  attributeNames.toArray(new String[attributeNames.size()]));\n\n          for (Object o : attributes) {\n            final Attribute attribute \u003d (Attribute) o;\n            final Object value \u003d attribute.getValue();\n            final String valueStr \u003d\n                (value !\u003d null) ? value.toString() : \"null\";\n            // Truncate the value if it is too long\n            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n          }\n        } catch (Exception e) {\n          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n              mbeanName.toString(), e);\n        }\n      }\n      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "FileSystem",
            "newValue": "void"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8880. NameNode metrics logging. (Arpit Agarwal)\n",
          "commitDate": "17/08/15 4:55 PM",
          "commitName": "a88f31ebf3433392419127816f168136de0a9e77",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/06/15 9:57 PM",
          "commitNameOld": "927577c87ca19e8b5b75722f78e2def6d9386576",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 69.79,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,39 @@\n-          public FileSystem run() throws IOException {\n-            return FileSystem.get(conf);\n-          }\n\\ No newline at end of file\n+    public void run() {\n+      // Skip querying metrics if there are no known appenders.\n+      if (!MetricsLog.isInfoEnabled() ||\n+          !hasAppenders(MetricsLog) ||\n+          OBJECT_NAME \u003d\u003d null) {\n+        return;\n+      }\n+\n+      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n+      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n+\n+      // Iterate over each MBean.\n+      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n+        try {\n+          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n+          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n+          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n+\n+          final AttributeList attributes \u003d\n+              server.getAttributes(mbeanName,\n+                  attributeNames.toArray(new String[attributeNames.size()]));\n+\n+          for (Object o : attributes) {\n+            final Attribute attribute \u003d (Attribute) o;\n+            final Object value \u003d attribute.getValue();\n+            final String valueStr \u003d\n+                (value !\u003d null) ? value.toString() : \"null\";\n+            // Truncate the value if it is too long\n+            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n+                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n+                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n+          }\n+        } catch (Exception e) {\n+          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n+              mbeanName.toString(), e);\n+        }\n+      }\n+      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      // Skip querying metrics if there are no known appenders.\n      if (!MetricsLog.isInfoEnabled() ||\n          !hasAppenders(MetricsLog) ||\n          OBJECT_NAME \u003d\u003d null) {\n        return;\n      }\n\n      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n\n      // Iterate over each MBean.\n      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n        try {\n          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n\n          final AttributeList attributes \u003d\n              server.getAttributes(mbeanName,\n                  attributeNames.toArray(new String[attributeNames.size()]));\n\n          for (Object o : attributes) {\n            final Attribute attribute \u003d (Attribute) o;\n            final Object value \u003d attribute.getValue();\n            final String valueStr \u003d\n                (value !\u003d null) ? value.toString() : \"null\";\n            // Truncate the value if it is too long\n            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n          }\n        } catch (Exception e) {\n          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n              mbeanName.toString(), e);\n        }\n      }\n      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8880. NameNode metrics logging. (Arpit Agarwal)\n",
          "commitDate": "17/08/15 4:55 PM",
          "commitName": "a88f31ebf3433392419127816f168136de0a9e77",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/06/15 9:57 PM",
          "commitNameOld": "927577c87ca19e8b5b75722f78e2def6d9386576",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 69.79,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,39 @@\n-          public FileSystem run() throws IOException {\n-            return FileSystem.get(conf);\n-          }\n\\ No newline at end of file\n+    public void run() {\n+      // Skip querying metrics if there are no known appenders.\n+      if (!MetricsLog.isInfoEnabled() ||\n+          !hasAppenders(MetricsLog) ||\n+          OBJECT_NAME \u003d\u003d null) {\n+        return;\n+      }\n+\n+      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n+      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n+\n+      // Iterate over each MBean.\n+      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n+        try {\n+          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n+          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n+          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n+\n+          final AttributeList attributes \u003d\n+              server.getAttributes(mbeanName,\n+                  attributeNames.toArray(new String[attributeNames.size()]));\n+\n+          for (Object o : attributes) {\n+            final Attribute attribute \u003d (Attribute) o;\n+            final Object value \u003d attribute.getValue();\n+            final String valueStr \u003d\n+                (value !\u003d null) ? value.toString() : \"null\";\n+            // Truncate the value if it is too long\n+            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n+                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n+                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n+          }\n+        } catch (Exception e) {\n+          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n+              mbeanName.toString(), e);\n+        }\n+      }\n+      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      // Skip querying metrics if there are no known appenders.\n      if (!MetricsLog.isInfoEnabled() ||\n          !hasAppenders(MetricsLog) ||\n          OBJECT_NAME \u003d\u003d null) {\n        return;\n      }\n\n      MetricsLog.info(\" \u003e\u003e Begin NameNode metrics dump\");\n      final MBeanServer server \u003d ManagementFactory.getPlatformMBeanServer();\n\n      // Iterate over each MBean.\n      for (final ObjectName mbeanName : server.queryNames(OBJECT_NAME, null)) {\n        try {\n          MBeanInfo mBeanInfo \u003d server.getMBeanInfo(mbeanName);\n          final String mBeanNameName \u003d MBeans.getMbeanNameName(mbeanName);\n          final Set\u003cString\u003e attributeNames \u003d getFilteredAttributes(mBeanInfo);\n\n          final AttributeList attributes \u003d\n              server.getAttributes(mbeanName,\n                  attributeNames.toArray(new String[attributeNames.size()]));\n\n          for (Object o : attributes) {\n            final Attribute attribute \u003d (Attribute) o;\n            final Object value \u003d attribute.getValue();\n            final String valueStr \u003d\n                (value !\u003d null) ? value.toString() : \"null\";\n            // Truncate the value if it is too long\n            MetricsLog.info(mBeanNameName + \":\" + attribute.getName() + \"\u003d\" +\n                (valueStr.length() \u003c MAX_LOGGED_VALUE_LEN ? valueStr :\n                    valueStr.substring(0, MAX_LOGGED_VALUE_LEN) + \"...\"));\n          }\n        } catch (Exception e) {\n          MetricsLog.error(\"Failed to get NameNode metrics for mbean \" +\n              mbeanName.toString(), e);\n        }\n      }\n      MetricsLog.info(\" \u003c\u003c End NameNode metrics dump\");\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3972. Trash emptier fails in secure HA cluster. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 2:25 PM",
      "commitName": "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e",
      "commitAuthor": "Eli Collins",
      "diff": "@@ -0,0 +1,3 @@\n+          public FileSystem run() throws IOException {\n+            return FileSystem.get(conf);\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public FileSystem run() throws IOException {\n            return FileSystem.get(conf);\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
    }
  }
}