{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "getResourceUsageReport",
  "functionId": "getResourceUsageReport",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 1122,
  "functionEndLine": 1161,
  "numCommitsSeen": 109,
  "timeTaken": 7665,
  "changeHistory": [
    "abf76ac371e4611c8eb371736b433e3d89c9d2ae",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "0101267d9d801eab4cb3b4df289c402ecb591685",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "561abb9fee5f57f74c2b5868a065b818678622fa",
    "3cc73773eb26f7469c99b25a76814d6fad0be28e",
    "76ec26de8099dc48ce3812c595b7ab857a600442",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "da317f2ea5af8c12dd8ce04173239d5f9ace5d96"
  ],
  "changeHistoryShort": {
    "abf76ac371e4611c8eb371736b433e3d89c9d2ae": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "0101267d9d801eab4cb3b4df289c402ecb591685": "Ybodychange",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "561abb9fee5f57f74c2b5868a065b818678622fa": "Ybodychange",
    "3cc73773eb26f7469c99b25a76814d6fad0be28e": "Ybodychange",
    "76ec26de8099dc48ce3812c595b7ab857a600442": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ymovefromfile",
    "da317f2ea5af8c12dd8ce04173239d5f9ace5d96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "abf76ac371e4611c8eb371736b433e3d89c9d2ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9563. Resource report REST API could return NaN or Inf (Ahmed Hussein via jeagles)\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "29/05/19 9:24 AM",
      "commitName": "abf76ac371e4611c8eb371736b433e3d89c9d2ae",
      "commitAuthor": "Ahmed Hussein",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 82.78,
      "commitsBetweenForRepo": 510,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n     writeLock.lock();\n     try {\n       AggregateAppResourceUsage runningResourceUsage \u003d\n           getRunningAggregateAppResourceUsage();\n       Resource usedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getAllUsed());\n       Resource reservedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getReserved());\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n       Map\u003cString, Long\u003e preemptedResourceSecondsMaps \u003d new HashMap\u003c\u003e();\n       preemptedResourceSecondsMaps\n           .put(ResourceInformation.MEMORY_MB.getName(), 0L);\n       preemptedResourceSecondsMaps\n           .put(ResourceInformation.VCORES.getName(), 0L);\n       float queueUsagePerc \u003d 0.0f;\n       float clusterUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(cluster)) {\n         float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n             .getCapacity();\n-        if (queueCapacityPerc !\u003d 0) {\n-          queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n-              Resources.multiply(cluster, queueCapacityPerc)) * 100;\n+        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n+            Resources.multiply(cluster, queueCapacityPerc)) * 100;\n+        if (Float.isNaN(queueUsagePerc) || Float.isInfinite(queueUsagePerc)) {\n+          queueUsagePerc \u003d 0.0f;\n         }\n         clusterUsagePerc \u003d\n             calc.divide(cluster, usedResourceClone, cluster) * 100;\n       }\n       return ApplicationResourceUsageReport\n           .newInstance(liveContainers.size(), reservedContainers.size(),\n               usedResourceClone, reservedResourceClone,\n               Resources.add(usedResourceClone, reservedResourceClone),\n               runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,\n               clusterUsagePerc, preemptedResourceSecondsMaps);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    writeLock.lock();\n    try {\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      Map\u003cString, Long\u003e preemptedResourceSecondsMaps \u003d new HashMap\u003c\u003e();\n      preemptedResourceSecondsMaps\n          .put(ResourceInformation.MEMORY_MB.getName(), 0L);\n      preemptedResourceSecondsMaps\n          .put(ResourceInformation.VCORES.getName(), 0L);\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n            .getCapacity();\n        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n            Resources.multiply(cluster, queueCapacityPerc)) * 100;\n        if (Float.isNaN(queueUsagePerc) || Float.isInfinite(queueUsagePerc)) {\n          queueUsagePerc \u003d 0.0f;\n        }\n        clusterUsagePerc \u003d\n            calc.divide(cluster, usedResourceClone, cluster) * 100;\n      }\n      return ApplicationResourceUsageReport\n          .newInstance(liveContainers.size(), reservedContainers.size(),\n              usedResourceClone, reservedResourceClone,\n              Resources.add(usedResourceClone, reservedResourceClone),\n              runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,\n              clusterUsagePerc, preemptedResourceSecondsMaps);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       AggregateAppResourceUsage runningResourceUsage \u003d\n           getRunningAggregateAppResourceUsage();\n       Resource usedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getAllUsed());\n       Resource reservedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getReserved());\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n       Map\u003cString, Long\u003e preemptedResourceSecondsMaps \u003d new HashMap\u003c\u003e();\n       preemptedResourceSecondsMaps\n           .put(ResourceInformation.MEMORY_MB.getName(), 0L);\n       preemptedResourceSecondsMaps\n           .put(ResourceInformation.VCORES.getName(), 0L);\n       float queueUsagePerc \u003d 0.0f;\n       float clusterUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(cluster)) {\n         float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n             .getCapacity();\n         if (queueCapacityPerc !\u003d 0) {\n           queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n               Resources.multiply(cluster, queueCapacityPerc)) * 100;\n         }\n         clusterUsagePerc \u003d\n             calc.divide(cluster, usedResourceClone, cluster) * 100;\n       }\n       return ApplicationResourceUsageReport\n           .newInstance(liveContainers.size(), reservedContainers.size(),\n               usedResourceClone, reservedResourceClone,\n               Resources.add(usedResourceClone, reservedResourceClone),\n               runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,\n               clusterUsagePerc, preemptedResourceSecondsMaps);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    writeLock.lock();\n    try {\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      Map\u003cString, Long\u003e preemptedResourceSecondsMaps \u003d new HashMap\u003c\u003e();\n      preemptedResourceSecondsMaps\n          .put(ResourceInformation.MEMORY_MB.getName(), 0L);\n      preemptedResourceSecondsMaps\n          .put(ResourceInformation.VCORES.getName(), 0L);\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n            .getCapacity();\n        if (queueCapacityPerc !\u003d 0) {\n          queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n              Resources.multiply(cluster, queueCapacityPerc)) * 100;\n        }\n        clusterUsagePerc \u003d\n            calc.divide(cluster, usedResourceClone, cluster) * 100;\n      }\n      return ApplicationResourceUsageReport\n          .newInstance(liveContainers.size(), reservedContainers.size(),\n              usedResourceClone, reservedResourceClone,\n              Resources.add(usedResourceClone, reservedResourceClone),\n              runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,\n              clusterUsagePerc, preemptedResourceSecondsMaps);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "11/09/17 8:52 PM",
      "commitNameOld": "e74d1be04be47969943b0501a4f335b0b5188287",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,39 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n     try {\n       writeLock.lock();\n       AggregateAppResourceUsage runningResourceUsage \u003d\n           getRunningAggregateAppResourceUsage();\n       Resource usedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getAllUsed());\n       Resource reservedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getReserved());\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n+      Map\u003cString, Long\u003e preemptedResourceSecondsMaps \u003d new HashMap\u003c\u003e();\n+      preemptedResourceSecondsMaps\n+          .put(ResourceInformation.MEMORY_MB.getName(), 0L);\n+      preemptedResourceSecondsMaps\n+          .put(ResourceInformation.VCORES.getName(), 0L);\n       float queueUsagePerc \u003d 0.0f;\n       float clusterUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(cluster)) {\n         float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n             .getCapacity();\n         if (queueCapacityPerc !\u003d 0) {\n           queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n               Resources.multiply(cluster, queueCapacityPerc)) * 100;\n         }\n-        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n-            * 100;\n+        clusterUsagePerc \u003d\n+            calc.divide(cluster, usedResourceClone, cluster) * 100;\n       }\n-      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n-          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n-          Resources.add(usedResourceClone, reservedResourceClone),\n-          runningResourceUsage.getMemorySeconds(),\n-          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n-          clusterUsagePerc, 0, 0);\n+      return ApplicationResourceUsageReport\n+          .newInstance(liveContainers.size(), reservedContainers.size(),\n+              usedResourceClone, reservedResourceClone,\n+              Resources.add(usedResourceClone, reservedResourceClone),\n+              runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,\n+              clusterUsagePerc, preemptedResourceSecondsMaps);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      writeLock.lock();\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      Map\u003cString, Long\u003e preemptedResourceSecondsMaps \u003d new HashMap\u003c\u003e();\n      preemptedResourceSecondsMaps\n          .put(ResourceInformation.MEMORY_MB.getName(), 0L);\n      preemptedResourceSecondsMaps\n          .put(ResourceInformation.VCORES.getName(), 0L);\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n            .getCapacity();\n        if (queueCapacityPerc !\u003d 0) {\n          queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n              Resources.multiply(cluster, queueCapacityPerc)) * 100;\n        }\n        clusterUsagePerc \u003d\n            calc.divide(cluster, usedResourceClone, cluster) * 100;\n      }\n      return ApplicationResourceUsageReport\n          .newInstance(liveContainers.size(), reservedContainers.size(),\n              usedResourceClone, reservedResourceClone,\n              Resources.add(usedResourceClone, reservedResourceClone),\n              runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,\n              clusterUsagePerc, preemptedResourceSecondsMaps);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "0101267d9d801eab4cb3b4df289c402ecb591685": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6082. Invalid REST api response for getApps since queueUsagePercentage is coming as INF. Contributed by Sunil G.\n",
      "commitDate": "23/01/17 9:29 PM",
      "commitName": "0101267d9d801eab4cb3b4df289c402ecb591685",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "13/01/17 4:52 AM",
      "commitNameOld": "d3170f9eba9bc5c38b5fa50c24e37ca2bd5636c2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 10.69,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n     try {\n       writeLock.lock();\n       AggregateAppResourceUsage runningResourceUsage \u003d\n           getRunningAggregateAppResourceUsage();\n       Resource usedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getAllUsed());\n       Resource reservedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getReserved());\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n       float queueUsagePerc \u003d 0.0f;\n       float clusterUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(cluster)) {\n-        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n-            .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n-            * 100;\n+        float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n+            .getCapacity();\n+        if (queueCapacityPerc !\u003d 0) {\n+          queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n+              Resources.multiply(cluster, queueCapacityPerc)) * 100;\n+        }\n         clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n             * 100;\n       }\n       return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n           reservedContainers.size(), usedResourceClone, reservedResourceClone,\n           Resources.add(usedResourceClone, reservedResourceClone),\n           runningResourceUsage.getMemorySeconds(),\n           runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n           clusterUsagePerc, 0, 0);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      writeLock.lock();\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        float queueCapacityPerc \u003d queue.getQueueInfo(false, false)\n            .getCapacity();\n        if (queueCapacityPerc !\u003d 0) {\n          queueUsagePerc \u003d calc.divide(cluster, usedResourceClone,\n              Resources.multiply(cluster, queueCapacityPerc)) * 100;\n        }\n        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n            * 100;\n      }\n      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n          Resources.add(usedResourceClone, reservedResourceClone),\n          runningResourceUsage.getMemorySeconds(),\n          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n          clusterUsagePerc, 0, 0);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4218. Metric for resource*time that was preempted. Contributed by Chang Li.\n",
      "commitDate": "10/11/16 2:35 PM",
      "commitName": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "07/11/16 10:14 AM",
      "commitNameOld": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.18,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n     try {\n       writeLock.lock();\n       AggregateAppResourceUsage runningResourceUsage \u003d\n           getRunningAggregateAppResourceUsage();\n       Resource usedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getAllUsed());\n       Resource reservedResourceClone \u003d Resources.clone(\n           attemptResourceUsage.getReserved());\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n       float queueUsagePerc \u003d 0.0f;\n       float clusterUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(cluster)) {\n         queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n             .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n             * 100;\n         clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n             * 100;\n       }\n       return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n           reservedContainers.size(), usedResourceClone, reservedResourceClone,\n           Resources.add(usedResourceClone, reservedResourceClone),\n           runningResourceUsage.getMemorySeconds(),\n           runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n-          clusterUsagePerc);\n+          clusterUsagePerc, 0, 0);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      writeLock.lock();\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n            .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n            * 100;\n        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n            * 100;\n      }\n      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n          Resources.add(usedResourceClone, reservedResourceClone),\n          runningResourceUsage.getMemorySeconds(),\n          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n          clusterUsagePerc, 0, 0);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,31 @@\n-  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n-    AggregateAppResourceUsage runningResourceUsage \u003d\n-        getRunningAggregateAppResourceUsage();\n-    Resource usedResourceClone \u003d\n-        Resources.clone(attemptResourceUsage.getAllUsed());\n-    Resource reservedResourceClone \u003d\n-        Resources.clone(attemptResourceUsage.getReserved());\n-    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n-    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n-    float queueUsagePerc \u003d 0.0f;\n-    float clusterUsagePerc \u003d 0.0f;\n-    if (!calc.isInvalidDivisor(cluster)) {\n-      queueUsagePerc \u003d\n-          calc.divide(cluster, usedResourceClone, Resources.multiply(cluster,\n-              queue.getQueueInfo(false, false).getCapacity())) * 100;\n-      clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster) * 100;\n+  public ApplicationResourceUsageReport getResourceUsageReport() {\n+    try {\n+      writeLock.lock();\n+      AggregateAppResourceUsage runningResourceUsage \u003d\n+          getRunningAggregateAppResourceUsage();\n+      Resource usedResourceClone \u003d Resources.clone(\n+          attemptResourceUsage.getAllUsed());\n+      Resource reservedResourceClone \u003d Resources.clone(\n+          attemptResourceUsage.getReserved());\n+      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n+      ResourceCalculator calc \u003d\n+          rmContext.getScheduler().getResourceCalculator();\n+      float queueUsagePerc \u003d 0.0f;\n+      float clusterUsagePerc \u003d 0.0f;\n+      if (!calc.isInvalidDivisor(cluster)) {\n+        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n+            .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n+            * 100;\n+        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n+            * 100;\n+      }\n+      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n+          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n+          Resources.add(usedResourceClone, reservedResourceClone),\n+          runningResourceUsage.getMemorySeconds(),\n+          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n+          clusterUsagePerc);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n-        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n-        Resources.add(usedResourceClone, reservedResourceClone),\n-        runningResourceUsage.getMemorySeconds(),\n-        runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n-        clusterUsagePerc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      writeLock.lock();\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n            .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n            * 100;\n        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n            * 100;\n      }\n      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n          Resources.add(usedResourceClone, reservedResourceClone),\n          runningResourceUsage.getMemorySeconds(),\n          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n          clusterUsagePerc);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,31 @@\n-  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n-    AggregateAppResourceUsage runningResourceUsage \u003d\n-        getRunningAggregateAppResourceUsage();\n-    Resource usedResourceClone \u003d\n-        Resources.clone(attemptResourceUsage.getAllUsed());\n-    Resource reservedResourceClone \u003d\n-        Resources.clone(attemptResourceUsage.getReserved());\n-    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n-    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n-    float queueUsagePerc \u003d 0.0f;\n-    float clusterUsagePerc \u003d 0.0f;\n-    if (!calc.isInvalidDivisor(cluster)) {\n-      queueUsagePerc \u003d\n-          calc.divide(cluster, usedResourceClone, Resources.multiply(cluster,\n-              queue.getQueueInfo(false, false).getCapacity())) * 100;\n-      clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster) * 100;\n+  public ApplicationResourceUsageReport getResourceUsageReport() {\n+    try {\n+      writeLock.lock();\n+      AggregateAppResourceUsage runningResourceUsage \u003d\n+          getRunningAggregateAppResourceUsage();\n+      Resource usedResourceClone \u003d Resources.clone(\n+          attemptResourceUsage.getAllUsed());\n+      Resource reservedResourceClone \u003d Resources.clone(\n+          attemptResourceUsage.getReserved());\n+      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n+      ResourceCalculator calc \u003d\n+          rmContext.getScheduler().getResourceCalculator();\n+      float queueUsagePerc \u003d 0.0f;\n+      float clusterUsagePerc \u003d 0.0f;\n+      if (!calc.isInvalidDivisor(cluster)) {\n+        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n+            .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n+            * 100;\n+        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n+            * 100;\n+      }\n+      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n+          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n+          Resources.add(usedResourceClone, reservedResourceClone),\n+          runningResourceUsage.getMemorySeconds(),\n+          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n+          clusterUsagePerc);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n-        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n-        Resources.add(usedResourceClone, reservedResourceClone),\n-        runningResourceUsage.getMemorySeconds(),\n-        runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n-        clusterUsagePerc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      writeLock.lock();\n      AggregateAppResourceUsage runningResourceUsage \u003d\n          getRunningAggregateAppResourceUsage();\n      Resource usedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getAllUsed());\n      Resource reservedResourceClone \u003d Resources.clone(\n          attemptResourceUsage.getReserved());\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      float queueUsagePerc \u003d 0.0f;\n      float clusterUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(cluster)) {\n        queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n            .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n            * 100;\n        clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster)\n            * 100;\n      }\n      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n          reservedContainers.size(), usedResourceClone, reservedResourceClone,\n          Resources.add(usedResourceClone, reservedResourceClone),\n          runningResourceUsage.getMemorySeconds(),\n          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n          clusterUsagePerc);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "561abb9fee5f57f74c2b5868a065b818678622fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4315. NaN in Queue percentage for cluster apps page. (Bibin A Chundatt via wangda)\n",
      "commitDate": "29/12/15 1:28 PM",
      "commitName": "561abb9fee5f57f74c2b5868a065b818678622fa",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/12/15 10:52 AM",
      "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.11,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n     AggregateAppResourceUsage runningResourceUsage \u003d\n         getRunningAggregateAppResourceUsage();\n     Resource usedResourceClone \u003d\n         Resources.clone(attemptResourceUsage.getAllUsed());\n     Resource reservedResourceClone \u003d\n         Resources.clone(attemptResourceUsage.getReserved());\n     Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n     ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n-    float queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n-        .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n-        * 100;\n-    float clusterUsagePerc \u003d\n-        calc.divide(cluster, usedResourceClone, cluster) * 100;\n+    float queueUsagePerc \u003d 0.0f;\n+    float clusterUsagePerc \u003d 0.0f;\n+    if (!calc.isInvalidDivisor(cluster)) {\n+      queueUsagePerc \u003d\n+          calc.divide(cluster, usedResourceClone, Resources.multiply(cluster,\n+              queue.getQueueInfo(false, false).getCapacity())) * 100;\n+      clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster) * 100;\n+    }\n     return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n         reservedContainers.size(), usedResourceClone, reservedResourceClone,\n         Resources.add(usedResourceClone, reservedResourceClone),\n         runningResourceUsage.getMemorySeconds(),\n-        runningResourceUsage.getVcoreSeconds(),\n-        queueUsagePerc, clusterUsagePerc);\n+        runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n+        clusterUsagePerc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    AggregateAppResourceUsage runningResourceUsage \u003d\n        getRunningAggregateAppResourceUsage();\n    Resource usedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getAllUsed());\n    Resource reservedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getReserved());\n    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n    float queueUsagePerc \u003d 0.0f;\n    float clusterUsagePerc \u003d 0.0f;\n    if (!calc.isInvalidDivisor(cluster)) {\n      queueUsagePerc \u003d\n          calc.divide(cluster, usedResourceClone, Resources.multiply(cluster,\n              queue.getQueueInfo(false, false).getCapacity())) * 100;\n      clusterUsagePerc \u003d calc.divide(cluster, usedResourceClone, cluster) * 100;\n    }\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n        Resources.add(usedResourceClone, reservedResourceClone),\n        runningResourceUsage.getMemorySeconds(),\n        runningResourceUsage.getVcoreSeconds(), queueUsagePerc,\n        clusterUsagePerc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "3cc73773eb26f7469c99b25a76814d6fad0be28e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4285. Display resource usage as percentage of queue and cluster in the RM UI (Varun Vasudev via wangda)\n",
      "commitDate": "26/10/15 1:07 PM",
      "commitName": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "b3f6b641dccb0d59df78855e2951d2cae7dff8ad",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 32.98,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,21 @@\n   public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n     AggregateAppResourceUsage runningResourceUsage \u003d\n         getRunningAggregateAppResourceUsage();\n     Resource usedResourceClone \u003d\n         Resources.clone(attemptResourceUsage.getAllUsed());\n     Resource reservedResourceClone \u003d\n         Resources.clone(attemptResourceUsage.getReserved());\n+    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n+    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n+    float queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n+        .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n+        * 100;\n+    float clusterUsagePerc \u003d\n+        calc.divide(cluster, usedResourceClone, cluster) * 100;\n     return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n         reservedContainers.size(), usedResourceClone, reservedResourceClone,\n         Resources.add(usedResourceClone, reservedResourceClone),\n         runningResourceUsage.getMemorySeconds(),\n-        runningResourceUsage.getVcoreSeconds());\n+        runningResourceUsage.getVcoreSeconds(),\n+        queueUsagePerc, clusterUsagePerc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    AggregateAppResourceUsage runningResourceUsage \u003d\n        getRunningAggregateAppResourceUsage();\n    Resource usedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getAllUsed());\n    Resource reservedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getReserved());\n    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n    float queueUsagePerc \u003d calc.divide(cluster, usedResourceClone, Resources\n        .multiply(cluster, queue.getQueueInfo(false, false).getCapacity()))\n        * 100;\n    float clusterUsagePerc \u003d\n        calc.divide(cluster, usedResourceClone, cluster) * 100;\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n        Resources.add(usedResourceClone, reservedResourceClone),\n        runningResourceUsage.getMemorySeconds(),\n        runningResourceUsage.getVcoreSeconds(),\n        queueUsagePerc, clusterUsagePerc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "76ec26de8099dc48ce3812c595b7ab857a600442": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3932. SchedulerApplicationAttempt#getResourceUsageReport and UserInfo should based on total-used-resources. (Bibin A Chundatt via wangda)\n",
      "commitDate": "22/07/15 11:54 AM",
      "commitName": "76ec26de8099dc48ce3812c595b7ab857a600442",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "21/07/15 9:57 AM",
      "commitNameOld": "c39ca541f498712133890961598bbff50d89d68b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n     AggregateAppResourceUsage runningResourceUsage \u003d\n         getRunningAggregateAppResourceUsage();\n     Resource usedResourceClone \u003d\n-        Resources.clone(attemptResourceUsage.getUsed());\n+        Resources.clone(attemptResourceUsage.getAllUsed());\n     Resource reservedResourceClone \u003d\n         Resources.clone(attemptResourceUsage.getReserved());\n     return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n         reservedContainers.size(), usedResourceClone, reservedResourceClone,\n         Resources.add(usedResourceClone, reservedResourceClone),\n         runningResourceUsage.getMemorySeconds(),\n         runningResourceUsage.getVcoreSeconds());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    AggregateAppResourceUsage runningResourceUsage \u003d\n        getRunningAggregateAppResourceUsage();\n    Resource usedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getAllUsed());\n    Resource reservedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getReserved());\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n        Resources.add(usedResourceClone, reservedResourceClone),\n        runningResourceUsage.getMemorySeconds(),\n        runningResourceUsage.getVcoreSeconds());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 9:30 PM",
      "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,13 @@\n   public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n-    AggregateAppResourceUsage resUsage \u003d getRunningAggregateAppResourceUsage();\n+    AggregateAppResourceUsage runningResourceUsage \u003d\n+        getRunningAggregateAppResourceUsage();\n+    Resource usedResourceClone \u003d\n+        Resources.clone(attemptResourceUsage.getUsed());\n+    Resource reservedResourceClone \u003d\n+        Resources.clone(attemptResourceUsage.getReserved());\n     return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n-               reservedContainers.size(), Resources.clone(currentConsumption),\n-               Resources.clone(currentReservation),\n-               Resources.add(currentConsumption, currentReservation),\n-               resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());\n+        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n+        Resources.add(usedResourceClone, reservedResourceClone),\n+        runningResourceUsage.getMemorySeconds(),\n+        runningResourceUsage.getVcoreSeconds());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    AggregateAppResourceUsage runningResourceUsage \u003d\n        getRunningAggregateAppResourceUsage();\n    Resource usedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getUsed());\n    Resource reservedResourceClone \u003d\n        Resources.clone(attemptResourceUsage.getReserved());\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n        reservedContainers.size(), usedResourceClone, reservedResourceClone,\n        Resources.add(usedResourceClone, reservedResourceClone),\n        runningResourceUsage.getMemorySeconds(),\n        runningResourceUsage.getVcoreSeconds());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/08/14 1:33 PM",
      "commitNameOld": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 22.2,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,8 @@\n   public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n+    AggregateAppResourceUsage resUsage \u003d getRunningAggregateAppResourceUsage();\n     return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n-        reservedContainers.size(), Resources.clone(currentConsumption),\n-        Resources.clone(currentReservation),\n-        Resources.add(currentConsumption, currentReservation));\n+               reservedContainers.size(), Resources.clone(currentConsumption),\n+               Resources.clone(currentReservation),\n+               Resources.add(currentConsumption, currentReservation),\n+               resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    AggregateAppResourceUsage resUsage \u003d getRunningAggregateAppResourceUsage();\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n               reservedContainers.size(), Resources.clone(currentConsumption),\n               Resources.clone(currentReservation),\n               Resources.add(currentConsumption, currentReservation),\n               resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:11 PM",
      "commitNameOld": "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n        reservedContainers.size(), Resources.clone(currentConsumption),\n        Resources.clone(currentReservation),\n        Resources.add(currentConsumption, currentReservation));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
        "oldMethodName": "getResourceUsageReport",
        "newMethodName": "getResourceUsageReport"
      }
    },
    "da317f2ea5af8c12dd8ce04173239d5f9ace5d96": {
      "type": "Yintroduced",
      "commitMessage": "YARN-786. Expose application resource usage in RM REST API (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537809 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 7:54 PM",
      "commitName": "da317f2ea5af8c12dd8ce04173239d5f9ace5d96",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,6 @@\n+  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n+    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n+        reservedContainers.size(), Resources.clone(currentConsumption),\n+        Resources.clone(currentReservation),\n+        Resources.add(currentConsumption, currentReservation));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),\n        reservedContainers.size(), Resources.clone(currentConsumption),\n        Resources.clone(currentReservation),\n        Resources.add(currentConsumption, currentReservation));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java"
    }
  }
}