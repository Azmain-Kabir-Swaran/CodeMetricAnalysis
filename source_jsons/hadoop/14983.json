{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebImageViewer.java",
  "functionName": "initServer",
  "functionId": "initServer___fsimage-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/WebImageViewer.java",
  "functionStartLine": 106,
  "functionEndLine": 126,
  "numCommitsSeen": 4,
  "timeTaken": 1124,
  "changeHistory": [
    "675bca2968700d3627449700b827c3771827cef8",
    "54c1daa580e1cceee541be86fc2b694fa1be26df"
  ],
  "changeHistoryShort": {
    "675bca2968700d3627449700b827c3771827cef8": "Ymultichange(Yexceptionschange,Ybodychange)",
    "54c1daa580e1cceee541be86fc2b694fa1be26df": "Yintroduced"
  },
  "changeHistoryDetails": {
    "675bca2968700d3627449700b827c3771827cef8": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7280. Use netty 4 in WebImageViewer. Contributed by Haohui Mai.\n",
      "commitDate": "28/10/14 4:53 PM",
      "commitName": "675bca2968700d3627449700b827c3771827cef8",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7280. Use netty 4 in WebImageViewer. Contributed by Haohui Mai.\n",
          "commitDate": "28/10/14 4:53 PM",
          "commitName": "675bca2968700d3627449700b827c3771827cef8",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "27/03/14 11:15 AM",
          "commitNameOld": "54c1daa580e1cceee541be86fc2b694fa1be26df",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 215.23,
          "commitsBetweenForRepo": 1719,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  public void initServer(String fsimage) throws IOException {\n-    FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n+  public void initServer(String fsimage)\n+          throws IOException, InterruptedException {\n+    final FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n \n-    ChannelPipeline pipeline \u003d Channels.pipeline();\n-    pipeline.addLast(\"channelTracker\", new SimpleChannelUpstreamHandler() {\n+    bootstrap.childHandler(new ChannelInitializer\u003cSocketChannel\u003e() {\n       @Override\n-      public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)\n-          throws Exception {\n-        allChannels.add(e.getChannel());\n+      protected void initChannel(SocketChannel ch) throws Exception {\n+        ChannelPipeline p \u003d ch.pipeline();\n+        p.addLast(new HttpRequestDecoder(),\n+          new StringEncoder(),\n+          new HttpResponseEncoder(),\n+          new FSImageHandler(loader, allChannels));\n       }\n     });\n-    pipeline.addLast(\"httpDecoder\", new HttpRequestDecoder());\n-    pipeline.addLast(\"requestHandler\", new FSImageHandler(loader));\n-    pipeline.addLast(\"stringEncoder\", new StringEncoder());\n-    pipeline.addLast(\"httpEncoder\", new HttpResponseEncoder());\n-    bootstrap.setPipeline(pipeline);\n-    channel \u003d bootstrap.bind(address);\n+\n+    channel \u003d bootstrap.bind(address).sync().channel();\n     allChannels.add(channel);\n \n-    address \u003d (InetSocketAddress) channel.getLocalAddress();\n-    LOG.info(\"WebImageViewer started. Listening on \" + address.toString()\n-        + \". Press Ctrl+C to stop the viewer.\");\n+    address \u003d (InetSocketAddress) channel.localAddress();\n+    LOG.info(\"WebImageViewer started. Listening on \" + address.toString() + \". Press Ctrl+C to stop the viewer.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initServer(String fsimage)\n          throws IOException, InterruptedException {\n    final FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n\n    bootstrap.childHandler(new ChannelInitializer\u003cSocketChannel\u003e() {\n      @Override\n      protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline p \u003d ch.pipeline();\n        p.addLast(new HttpRequestDecoder(),\n          new StringEncoder(),\n          new HttpResponseEncoder(),\n          new FSImageHandler(loader, allChannels));\n      }\n    });\n\n    channel \u003d bootstrap.bind(address).sync().channel();\n    allChannels.add(channel);\n\n    address \u003d (InetSocketAddress) channel.localAddress();\n    LOG.info(\"WebImageViewer started. Listening on \" + address.toString() + \". Press Ctrl+C to stop the viewer.\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/WebImageViewer.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7280. Use netty 4 in WebImageViewer. Contributed by Haohui Mai.\n",
          "commitDate": "28/10/14 4:53 PM",
          "commitName": "675bca2968700d3627449700b827c3771827cef8",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "27/03/14 11:15 AM",
          "commitNameOld": "54c1daa580e1cceee541be86fc2b694fa1be26df",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 215.23,
          "commitsBetweenForRepo": 1719,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  public void initServer(String fsimage) throws IOException {\n-    FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n+  public void initServer(String fsimage)\n+          throws IOException, InterruptedException {\n+    final FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n \n-    ChannelPipeline pipeline \u003d Channels.pipeline();\n-    pipeline.addLast(\"channelTracker\", new SimpleChannelUpstreamHandler() {\n+    bootstrap.childHandler(new ChannelInitializer\u003cSocketChannel\u003e() {\n       @Override\n-      public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)\n-          throws Exception {\n-        allChannels.add(e.getChannel());\n+      protected void initChannel(SocketChannel ch) throws Exception {\n+        ChannelPipeline p \u003d ch.pipeline();\n+        p.addLast(new HttpRequestDecoder(),\n+          new StringEncoder(),\n+          new HttpResponseEncoder(),\n+          new FSImageHandler(loader, allChannels));\n       }\n     });\n-    pipeline.addLast(\"httpDecoder\", new HttpRequestDecoder());\n-    pipeline.addLast(\"requestHandler\", new FSImageHandler(loader));\n-    pipeline.addLast(\"stringEncoder\", new StringEncoder());\n-    pipeline.addLast(\"httpEncoder\", new HttpResponseEncoder());\n-    bootstrap.setPipeline(pipeline);\n-    channel \u003d bootstrap.bind(address);\n+\n+    channel \u003d bootstrap.bind(address).sync().channel();\n     allChannels.add(channel);\n \n-    address \u003d (InetSocketAddress) channel.getLocalAddress();\n-    LOG.info(\"WebImageViewer started. Listening on \" + address.toString()\n-        + \". Press Ctrl+C to stop the viewer.\");\n+    address \u003d (InetSocketAddress) channel.localAddress();\n+    LOG.info(\"WebImageViewer started. Listening on \" + address.toString() + \". Press Ctrl+C to stop the viewer.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initServer(String fsimage)\n          throws IOException, InterruptedException {\n    final FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n\n    bootstrap.childHandler(new ChannelInitializer\u003cSocketChannel\u003e() {\n      @Override\n      protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline p \u003d ch.pipeline();\n        p.addLast(new HttpRequestDecoder(),\n          new StringEncoder(),\n          new HttpResponseEncoder(),\n          new FSImageHandler(loader, allChannels));\n      }\n    });\n\n    channel \u003d bootstrap.bind(address).sync().channel();\n    allChannels.add(channel);\n\n    address \u003d (InetSocketAddress) channel.localAddress();\n    LOG.info(\"WebImageViewer started. Listening on \" + address.toString() + \". Press Ctrl+C to stop the viewer.\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/WebImageViewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "54c1daa580e1cceee541be86fc2b694fa1be26df": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5978. Create a tool to take fsimage and expose read-only WebHDFS API. Contributed by Akira Ajisaka.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/14 11:15 AM",
      "commitName": "54c1daa580e1cceee541be86fc2b694fa1be26df",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,23 @@\n+  public void initServer(String fsimage) throws IOException {\n+    FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n+\n+    ChannelPipeline pipeline \u003d Channels.pipeline();\n+    pipeline.addLast(\"channelTracker\", new SimpleChannelUpstreamHandler() {\n+      @Override\n+      public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)\n+          throws Exception {\n+        allChannels.add(e.getChannel());\n+      }\n+    });\n+    pipeline.addLast(\"httpDecoder\", new HttpRequestDecoder());\n+    pipeline.addLast(\"requestHandler\", new FSImageHandler(loader));\n+    pipeline.addLast(\"stringEncoder\", new StringEncoder());\n+    pipeline.addLast(\"httpEncoder\", new HttpResponseEncoder());\n+    bootstrap.setPipeline(pipeline);\n+    channel \u003d bootstrap.bind(address);\n+    allChannels.add(channel);\n+\n+    address \u003d (InetSocketAddress) channel.getLocalAddress();\n+    LOG.info(\"WebImageViewer started. Listening on \" + address.toString()\n+        + \". Press Ctrl+C to stop the viewer.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initServer(String fsimage) throws IOException {\n    FSImageLoader loader \u003d FSImageLoader.load(fsimage);\n\n    ChannelPipeline pipeline \u003d Channels.pipeline();\n    pipeline.addLast(\"channelTracker\", new SimpleChannelUpstreamHandler() {\n      @Override\n      public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)\n          throws Exception {\n        allChannels.add(e.getChannel());\n      }\n    });\n    pipeline.addLast(\"httpDecoder\", new HttpRequestDecoder());\n    pipeline.addLast(\"requestHandler\", new FSImageHandler(loader));\n    pipeline.addLast(\"stringEncoder\", new StringEncoder());\n    pipeline.addLast(\"httpEncoder\", new HttpResponseEncoder());\n    bootstrap.setPipeline(pipeline);\n    channel \u003d bootstrap.bind(address);\n    allChannels.add(channel);\n\n    address \u003d (InetSocketAddress) channel.getLocalAddress();\n    LOG.info(\"WebImageViewer started. Listening on \" + address.toString()\n        + \". Press Ctrl+C to stop the viewer.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/WebImageViewer.java"
    }
  }
}