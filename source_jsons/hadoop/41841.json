{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClusterNodeTracker.java",
  "functionName": "getNodeIdsByResourceName",
  "functionId": "getNodeIdsByResourceName___resourceName-String(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
  "functionStartLine": 439,
  "functionEndLine": 456,
  "numCommitsSeen": 17,
  "timeTaken": 2994,
  "changeHistory": [
    "9bae6720cb8432efd78c909dc624c00e367cedf5"
  ],
  "changeHistoryShort": {
    "9bae6720cb8432efd78c909dc624c00e367cedf5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9bae6720cb8432efd78c909dc624c00e367cedf5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6050. AMs can\u0027t be scheduled on racks or nodes (rkanter)\n",
      "commitDate": "27/03/17 5:23 PM",
      "commitName": "9bae6720cb8432efd78c909dc624c00e367cedf5",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,18 @@\n+  public List\u003cNodeId\u003e getNodeIdsByResourceName(final String resourceName) {\n+    Preconditions.checkArgument(\n+        resourceName !\u003d null \u0026\u0026 !resourceName.isEmpty());\n+    List\u003cNodeId\u003e retNodes \u003d new ArrayList\u003c\u003e();\n+    if (ResourceRequest.ANY.equals(resourceName)) {\n+      retNodes.addAll(getAllNodeIds());\n+    } else if (nodeNameToNodeMap.containsKey(resourceName)) {\n+      retNodes.add(nodeNameToNodeMap.get(resourceName).getNodeID());\n+    } else if (nodesPerRack.containsKey(resourceName)) {\n+      for (N node : nodesPerRack.get(resourceName)) {\n+        retNodes.add(node.getNodeID());\n+      }\n+    } else {\n+      LOG.info(\n+          \"Could not find a node matching given resourceName \" + resourceName);\n+    }\n+    return retNodes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cNodeId\u003e getNodeIdsByResourceName(final String resourceName) {\n    Preconditions.checkArgument(\n        resourceName !\u003d null \u0026\u0026 !resourceName.isEmpty());\n    List\u003cNodeId\u003e retNodes \u003d new ArrayList\u003c\u003e();\n    if (ResourceRequest.ANY.equals(resourceName)) {\n      retNodes.addAll(getAllNodeIds());\n    } else if (nodeNameToNodeMap.containsKey(resourceName)) {\n      retNodes.add(nodeNameToNodeMap.get(resourceName).getNodeID());\n    } else if (nodesPerRack.containsKey(resourceName)) {\n      for (N node : nodesPerRack.get(resourceName)) {\n        retNodes.add(node.getNodeID());\n      }\n    } else {\n      LOG.info(\n          \"Could not find a node matching given resourceName \" + resourceName);\n    }\n    return retNodes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java"
    }
  }
}