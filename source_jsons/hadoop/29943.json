{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LevelDBCacheTimelineStore.java",
  "functionName": "put",
  "functionId": "put___entityId-K__entity-V",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/LevelDBCacheTimelineStore.java",
  "functionStartLine": 180,
  "functionEndLine": 200,
  "numCommitsSeen": 14,
  "timeTaken": 2572,
  "changeHistory": [
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
    "241d3b3a50c6af92f023d8b2c24598f4813f4674",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": "Ybodychange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
      "commitDate": "28/01/16 2:24 PM",
      "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  public void put(TimelineDomain domain) throws IOException {\n-    TimelineDomain domainToReplace \u003d\n-        domainsById.get(domain.getId());\n-    Long currentTimestamp \u003d System.currentTimeMillis();\n-    TimelineDomain domainToStore \u003d createTimelineDomain(\n-        domain.getId(), domain.getDescription(), domain.getOwner(),\n-        domain.getReaders(), domain.getWriters(),\n-        (domainToReplace \u003d\u003d null ?\n-            currentTimestamp : domainToReplace.getCreatedTime()),\n-        currentTimestamp);\n-    domainsById.put(domainToStore.getId(), domainToStore);\n-    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n-        domainsByOwner.get(domainToStore.getOwner());\n-    if (domainsByOneOwner \u003d\u003d null) {\n-      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n-      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n-    }\n-    if (domainToReplace !\u003d null) {\n-      domainsByOneOwner.remove(domainToReplace);\n-    }\n-    domainsByOneOwner.add(domainToStore);\n-  }\n\\ No newline at end of file\n+    public void put(K entityId, V entity) {\n+      Long startTime \u003d entity.getStartTime();\n+      if (startTime \u003d\u003d null) {\n+        startTime \u003d System.currentTimeMillis();\n+      }\n+      // Build the key for the entity storage and read it\n+      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n+          startTime);\n+      try {\n+        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n+        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n+      } catch (IOException e) {\n+        LOG.error(\"GenericObjectMapper cannot write \"\n+            + entity.getClass().getName()\n+            + \" into a byte array. Write aborted! \");\n+        LOG.error(e.getMessage());\n+      }\n+\n+      // Build the key for the start time index\n+      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void put(K entityId, V entity) {\n      Long startTime \u003d entity.getStartTime();\n      if (startTime \u003d\u003d null) {\n        startTime \u003d System.currentTimeMillis();\n      }\n      // Build the key for the entity storage and read it\n      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n          startTime);\n      try {\n        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n      } catch (IOException e) {\n        LOG.error(\"GenericObjectMapper cannot write \"\n            + entity.getClass().getName()\n            + \" into a byte array. Write aborted! \");\n        LOG.error(e.getMessage());\n      }\n\n      // Build the key for the start time index\n      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/LevelDBCacheTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/LevelDBCacheTimelineStore.java",
            "oldMethodName": "put",
            "newMethodName": "put"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  public void put(TimelineDomain domain) throws IOException {\n-    TimelineDomain domainToReplace \u003d\n-        domainsById.get(domain.getId());\n-    Long currentTimestamp \u003d System.currentTimeMillis();\n-    TimelineDomain domainToStore \u003d createTimelineDomain(\n-        domain.getId(), domain.getDescription(), domain.getOwner(),\n-        domain.getReaders(), domain.getWriters(),\n-        (domainToReplace \u003d\u003d null ?\n-            currentTimestamp : domainToReplace.getCreatedTime()),\n-        currentTimestamp);\n-    domainsById.put(domainToStore.getId(), domainToStore);\n-    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n-        domainsByOwner.get(domainToStore.getOwner());\n-    if (domainsByOneOwner \u003d\u003d null) {\n-      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n-      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n-    }\n-    if (domainToReplace !\u003d null) {\n-      domainsByOneOwner.remove(domainToReplace);\n-    }\n-    domainsByOneOwner.add(domainToStore);\n-  }\n\\ No newline at end of file\n+    public void put(K entityId, V entity) {\n+      Long startTime \u003d entity.getStartTime();\n+      if (startTime \u003d\u003d null) {\n+        startTime \u003d System.currentTimeMillis();\n+      }\n+      // Build the key for the entity storage and read it\n+      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n+          startTime);\n+      try {\n+        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n+        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n+      } catch (IOException e) {\n+        LOG.error(\"GenericObjectMapper cannot write \"\n+            + entity.getClass().getName()\n+            + \" into a byte array. Write aborted! \");\n+        LOG.error(e.getMessage());\n+      }\n+\n+      // Build the key for the start time index\n+      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void put(K entityId, V entity) {\n      Long startTime \u003d entity.getStartTime();\n      if (startTime \u003d\u003d null) {\n        startTime \u003d System.currentTimeMillis();\n      }\n      // Build the key for the entity storage and read it\n      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n          startTime);\n      try {\n        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n      } catch (IOException e) {\n        LOG.error(\"GenericObjectMapper cannot write \"\n            + entity.getClass().getName()\n            + \" into a byte array. Write aborted! \");\n        LOG.error(e.getMessage());\n      }\n\n      // Build the key for the start time index\n      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/LevelDBCacheTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  public void put(TimelineDomain domain) throws IOException {\n-    TimelineDomain domainToReplace \u003d\n-        domainsById.get(domain.getId());\n-    Long currentTimestamp \u003d System.currentTimeMillis();\n-    TimelineDomain domainToStore \u003d createTimelineDomain(\n-        domain.getId(), domain.getDescription(), domain.getOwner(),\n-        domain.getReaders(), domain.getWriters(),\n-        (domainToReplace \u003d\u003d null ?\n-            currentTimestamp : domainToReplace.getCreatedTime()),\n-        currentTimestamp);\n-    domainsById.put(domainToStore.getId(), domainToStore);\n-    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n-        domainsByOwner.get(domainToStore.getOwner());\n-    if (domainsByOneOwner \u003d\u003d null) {\n-      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n-      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n-    }\n-    if (domainToReplace !\u003d null) {\n-      domainsByOneOwner.remove(domainToReplace);\n-    }\n-    domainsByOneOwner.add(domainToStore);\n-  }\n\\ No newline at end of file\n+    public void put(K entityId, V entity) {\n+      Long startTime \u003d entity.getStartTime();\n+      if (startTime \u003d\u003d null) {\n+        startTime \u003d System.currentTimeMillis();\n+      }\n+      // Build the key for the entity storage and read it\n+      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n+          startTime);\n+      try {\n+        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n+        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n+      } catch (IOException e) {\n+        LOG.error(\"GenericObjectMapper cannot write \"\n+            + entity.getClass().getName()\n+            + \" into a byte array. Write aborted! \");\n+        LOG.error(e.getMessage());\n+      }\n+\n+      // Build the key for the start time index\n+      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void put(K entityId, V entity) {\n      Long startTime \u003d entity.getStartTime();\n      if (startTime \u003d\u003d null) {\n        startTime \u003d System.currentTimeMillis();\n      }\n      // Build the key for the entity storage and read it\n      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n          startTime);\n      try {\n        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n      } catch (IOException e) {\n        LOG.error(\"GenericObjectMapper cannot write \"\n            + entity.getClass().getName()\n            + \" into a byte array. Write aborted! \");\n        LOG.error(e.getMessage());\n      }\n\n      // Build the key for the start time index\n      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/LevelDBCacheTimelineStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  public void put(TimelineDomain domain) throws IOException {\n-    TimelineDomain domainToReplace \u003d\n-        domainsById.get(domain.getId());\n-    Long currentTimestamp \u003d System.currentTimeMillis();\n-    TimelineDomain domainToStore \u003d createTimelineDomain(\n-        domain.getId(), domain.getDescription(), domain.getOwner(),\n-        domain.getReaders(), domain.getWriters(),\n-        (domainToReplace \u003d\u003d null ?\n-            currentTimestamp : domainToReplace.getCreatedTime()),\n-        currentTimestamp);\n-    domainsById.put(domainToStore.getId(), domainToStore);\n-    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n-        domainsByOwner.get(domainToStore.getOwner());\n-    if (domainsByOneOwner \u003d\u003d null) {\n-      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n-      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n-    }\n-    if (domainToReplace !\u003d null) {\n-      domainsByOneOwner.remove(domainToReplace);\n-    }\n-    domainsByOneOwner.add(domainToStore);\n-  }\n\\ No newline at end of file\n+    public void put(K entityId, V entity) {\n+      Long startTime \u003d entity.getStartTime();\n+      if (startTime \u003d\u003d null) {\n+        startTime \u003d System.currentTimeMillis();\n+      }\n+      // Build the key for the entity storage and read it\n+      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n+          startTime);\n+      try {\n+        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n+        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n+      } catch (IOException e) {\n+        LOG.error(\"GenericObjectMapper cannot write \"\n+            + entity.getClass().getName()\n+            + \" into a byte array. Write aborted! \");\n+        LOG.error(e.getMessage());\n+      }\n+\n+      // Build the key for the start time index\n+      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void put(K entityId, V entity) {\n      Long startTime \u003d entity.getStartTime();\n      if (startTime \u003d\u003d null) {\n        startTime \u003d System.currentTimeMillis();\n      }\n      // Build the key for the entity storage and read it\n      byte[] startTimeBytes \u003d GenericObjectMapper.writeReverseOrderedLong(\n          startTime);\n      try {\n        byte[] valueBytes \u003d GenericObjectMapper.write(entity);\n        entityDb.put(getEntityKey(entityId, startTimeBytes), valueBytes);\n      } catch (IOException e) {\n        LOG.error(\"GenericObjectMapper cannot write \"\n            + entity.getClass().getName()\n            + \" into a byte array. Write aborted! \");\n        LOG.error(e.getMessage());\n      }\n\n      // Build the key for the start time index\n      entityDb.put(getStartTimeKey(entityId), startTimeBytes);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/LevelDBCacheTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[domain-TimelineDomain]",
            "newValue": "[entityId-K, entity-V]"
          }
        }
      ]
    },
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2938. Fixed new findbugs warnings in hadoop-yarn-resourcemanager and hadoop-yarn-applicationhistoryservice. Contributed by Varun Saxena.\n",
      "commitDate": "29/12/14 9:59 AM",
      "commitName": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/11/14 6:24 PM",
      "commitNameOld": "e4b4901d36875faa98ec8628e22e75499e0741ab",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 53.65,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void put(TimelineDomain domain) throws IOException {\n     TimelineDomain domainToReplace \u003d\n         domainsById.get(domain.getId());\n-    long currentTimestamp \u003d System.currentTimeMillis();\n+    Long currentTimestamp \u003d System.currentTimeMillis();\n     TimelineDomain domainToStore \u003d createTimelineDomain(\n         domain.getId(), domain.getDescription(), domain.getOwner(),\n         domain.getReaders(), domain.getWriters(),\n         (domainToReplace \u003d\u003d null ?\n             currentTimestamp : domainToReplace.getCreatedTime()),\n         currentTimestamp);\n     domainsById.put(domainToStore.getId(), domainToStore);\n     Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n         domainsByOwner.get(domainToStore.getOwner());\n     if (domainsByOneOwner \u003d\u003d null) {\n       domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n       domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n     }\n     if (domainToReplace !\u003d null) {\n       domainsByOneOwner.remove(domainToReplace);\n     }\n     domainsByOneOwner.add(domainToStore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    TimelineDomain domainToReplace \u003d\n        domainsById.get(domain.getId());\n    Long currentTimestamp \u003d System.currentTimeMillis();\n    TimelineDomain domainToStore \u003d createTimelineDomain(\n        domain.getId(), domain.getDescription(), domain.getOwner(),\n        domain.getReaders(), domain.getWriters(),\n        (domainToReplace \u003d\u003d null ?\n            currentTimestamp : domainToReplace.getCreatedTime()),\n        currentTimestamp);\n    domainsById.put(domainToStore.getId(), domainToStore);\n    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n        domainsByOwner.get(domainToStore.getOwner());\n    if (domainsByOneOwner \u003d\u003d null) {\n      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n    }\n    if (domainToReplace !\u003d null) {\n      domainsByOneOwner.remove(domainToReplace);\n    }\n    domainsByOneOwner.add(domainToStore);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
      "extendedDetails": {}
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  public void put(TimelineDomain domain) throws IOException {\n+    TimelineDomain domainToReplace \u003d\n+        domainsById.get(domain.getId());\n+    long currentTimestamp \u003d System.currentTimeMillis();\n+    TimelineDomain domainToStore \u003d createTimelineDomain(\n+        domain.getId(), domain.getDescription(), domain.getOwner(),\n+        domain.getReaders(), domain.getWriters(),\n+        (domainToReplace \u003d\u003d null ?\n+            currentTimestamp : domainToReplace.getCreatedTime()),\n+        currentTimestamp);\n+    domainsById.put(domainToStore.getId(), domainToStore);\n+    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n+        domainsByOwner.get(domainToStore.getOwner());\n+    if (domainsByOneOwner \u003d\u003d null) {\n+      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n+      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n+    }\n+    if (domainToReplace !\u003d null) {\n+      domainsByOneOwner.remove(domainToReplace);\n+    }\n+    domainsByOneOwner.add(domainToStore);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    TimelineDomain domainToReplace \u003d\n        domainsById.get(domain.getId());\n    long currentTimestamp \u003d System.currentTimeMillis();\n    TimelineDomain domainToStore \u003d createTimelineDomain(\n        domain.getId(), domain.getDescription(), domain.getOwner(),\n        domain.getReaders(), domain.getWriters(),\n        (domainToReplace \u003d\u003d null ?\n            currentTimestamp : domainToReplace.getCreatedTime()),\n        currentTimestamp);\n    domainsById.put(domainToStore.getId(), domainToStore);\n    Set\u003cTimelineDomain\u003e domainsByOneOwner \u003d\n        domainsByOwner.get(domainToStore.getOwner());\n    if (domainsByOneOwner \u003d\u003d null) {\n      domainsByOneOwner \u003d new HashSet\u003cTimelineDomain\u003e();\n      domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\n    }\n    if (domainToReplace !\u003d null) {\n      domainsByOneOwner.remove(domainToReplace);\n    }\n    domainsByOneOwner.add(domainToStore);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java"
    }
  }
}