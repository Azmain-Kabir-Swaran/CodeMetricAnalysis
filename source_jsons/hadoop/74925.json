{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractDelegationTokenSecretManager.java",
  "functionName": "cancelToken",
  "functionId": "cancelToken___token-Token__TokenIdent____canceller-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
  "functionStartLine": 555,
  "functionEndLine": 583,
  "numCommitsSeen": 46,
  "timeTaken": 2156,
  "changeHistory": [
    "fd2f22adec5c2f21f792045dbfde9385c21403ec",
    "e80386d69d5fb6a08aa3366e42d2518747af569f",
    "bee448cacd142a4125e60c840022b65cc5fe9efa",
    "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da",
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "fa3a3bf5d8f3167f9725a3f91a0f4ae0481f24ea",
    "fbdb24946051f7abc2d065217ef8c52e0cf3f16f",
    "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
    "a417a8faeaa1a40e140c7f86463e699d92404454",
    "38c59c0af7595897dbff8e5f13b7ff6978b9c08b"
  ],
  "changeHistoryShort": {
    "fd2f22adec5c2f21f792045dbfde9385c21403ec": "Ybodychange",
    "e80386d69d5fb6a08aa3366e42d2518747af569f": "Ybodychange",
    "bee448cacd142a4125e60c840022b65cc5fe9efa": "Ybodychange",
    "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da": "Ybodychange",
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Ybodychange",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "fa3a3bf5d8f3167f9725a3f91a0f4ae0481f24ea": "Ybodychange",
    "fbdb24946051f7abc2d065217ef8c52e0cf3f16f": "Ybodychange",
    "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
    "a417a8faeaa1a40e140c7f86463e699d92404454": "Ymultichange(Yreturntypechange,Ybodychange)",
    "38c59c0af7595897dbff8e5f13b7ff6978b9c08b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fd2f22adec5c2f21f792045dbfde9385c21403ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13720. Add more info to the msgs printed in AbstractDelegationTokenSecretManager. Contributed by Yongjun Zhang.\n",
      "commitDate": "10/11/16 10:42 PM",
      "commitName": "fd2f22adec5c2f21f792045dbfde9385c21403ec",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "20/09/16 1:20 PM",
      "commitNameOld": "e80386d69d5fb6a08aa3366e42d2518747af569f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 51.43,
      "commitsBetweenForRepo": 451,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    LOG.info(\"Token cancellation requested for identifier: \" + id);\n+    LOG.info(\"Token cancellation requested for identifier: \"\n+        + formatTokenId(id));\n     \n     if (id.getUser() \u003d\u003d null) {\n-      throw new InvalidToken(\"Token with no owner\");\n+      throw new InvalidToken(\"Token with no owner \" + formatTokenId(id));\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n     HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n     String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n         \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n-          + \" is not authorized to cancel the token\");\n+          + \" is not authorized to cancel the token \" + formatTokenId(id));\n     }\n     DelegationTokenInformation info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n-      throw new InvalidToken(\"Token not found\");\n+      throw new InvalidToken(\"Token not found \" + formatTokenId(id));\n     }\n     removeStoredToken(id);\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancellation requested for identifier: \"\n        + formatTokenId(id));\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner \" + formatTokenId(id));\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token \" + formatTokenId(id));\n    }\n    DelegationTokenInformation info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found \" + formatTokenId(id));\n    }\n    removeStoredToken(id);\n    return id;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "e80386d69d5fb6a08aa3366e42d2518747af569f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13601. Fix a log message typo in AbstractDelegationTokenSecretManager. Contributed by Mehran Hassani.\n",
      "commitDate": "20/09/16 1:20 PM",
      "commitName": "e80386d69d5fb6a08aa3366e42d2518747af569f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "11/05/15 5:27 AM",
      "commitNameOld": "7e543c27fa2881aa65967be384a6203bd5b2304f",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 498.33,
      "commitsBetweenForRepo": 3604,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    LOG.info(\"Token cancelation requested for identifier: \"+id);\n+    LOG.info(\"Token cancellation requested for identifier: \" + id);\n     \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n     HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n     String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n         \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n     removeStoredToken(id);\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancellation requested for identifier: \" + id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    removeStoredToken(id);\n    return id;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "bee448cacd142a4125e60c840022b65cc5fe9efa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10562. Namenode exits on exception without printing stack trace in AbstractDelegationTokenSecretManager. (Contributed by Suresh Srinivas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/05/14 11:38 AM",
      "commitName": "bee448cacd142a4125e60c840022b65cc5fe9efa",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/05/14 2:20 PM",
      "commitNameOld": "13bba8ceacb1bee85b4d2af567f988dcaf6e5c19",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token cancelation requested for identifier: \"+id);\n     \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n     HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n     String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n         \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n-    DelegationTokenInformation info \u003d null;\n-    info \u003d currentTokens.remove(id);\n+    DelegationTokenInformation info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n     removeStoredToken(id);\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    removeStoredToken(id);\n    return id;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9574. Added new methods in AbstractDelegationTokenSecretManager for helping YARN ResourceManager to reuse code for RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 5:52 PM",
      "commitName": "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/04/13 8:18 AM",
      "commitNameOld": "f863543206a67ba295454609d618e16f91309b84",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 47.4,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token cancelation requested for identifier: \"+id);\n     \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n     HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n     String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n         \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n+    removeStoredToken(id);\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    removeStoredToken(id);\n    return id;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8814. Replace string equals  by String#isEmpty(). Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1387853 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/12 9:06 PM",
      "commitName": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 26.13,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token cancelation requested for identifier: \"+id);\n     \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n     HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n     String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n-        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n+        \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || renewer.toString().isEmpty() || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "02/08/11 9:37 AM",
      "commitNameOld": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 17.25,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token cancelation requested for identifier: \"+id);\n     \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n-    KerberosName cancelerKrbName \u003d new KerberosName(canceller);\n+    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n     String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n         \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    HadoopKerberosName cancelerKrbName \u003d new HadoopKerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    KerberosName cancelerKrbName \u003d new KerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    KerberosName cancelerKrbName \u003d new KerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "common/src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
        "newPath": "common/src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
      }
    },
    "fa3a3bf5d8f3167f9725a3f91a0f4ae0481f24ea": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6632. Adds support for using different keytabs for different servers in a Hadoop cluster. In the earier implementation, all servers of a certain type \\(like TaskTracker\\), would have the same keytab and the same principal. Now the principal name is a pattern that has _HOST in it. Contributed by Kan Zhang \u0026 Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@965696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/10 5:46 PM",
      "commitName": "fa3a3bf5d8f3167f9725a3f91a0f4ae0481f24ea",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "11/06/10 3:48 PM",
      "commitNameOld": "fbdb24946051f7abc2d065217ef8c52e0cf3f16f",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 38.08,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token cancelation requested for identifier: \"+id);\n     \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n+    KerberosName cancelerKrbName \u003d new KerberosName(canceller);\n+    String cancelerShortName \u003d cancelerKrbName.getShortName();\n     if (!canceller.equals(owner)\n-        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !canceller\n+        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n             .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    KerberosName cancelerKrbName \u003d new KerberosName(canceller);\n    String cancelerShortName \u003d cancelerKrbName.getShortName();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !cancelerShortName\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "fbdb24946051f7abc2d065217ef8c52e0cf3f16f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6620. NPE if renewer is passed as null in getDelegationToken. Contributed by Jitendra Pandey.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@953896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/10 3:48 PM",
      "commitName": "fbdb24946051f7abc2d065217ef8c52e0cf3f16f",
      "commitAuthor": "Jakob Homan",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n+    LOG.info(\"Token cancelation requested for identifier: \"+id);\n+    \n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n     if (!canceller.equals(owner)\n-        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n+        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !canceller\n+            .equals(renewer.toString()))) {\n       throw new AccessControlException(canceller\n           + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n     return id;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token cancelation requested for identifier: \"+id);\n    \n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || \"\".equals(renewer.toString()) || !canceller\n            .equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
      "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b": {
      "type": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/10 1:43 PM",
      "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
      "commitAuthor": "Konstantin Shvachko",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/10 1:43 PM",
          "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/02/10 12:49 AM",
          "commitNameOld": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  public void cancelToken(Token\u003cTokenIdent\u003e token,\n+  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n-    if (!canceller.equals(owner) \u0026\u0026 \n-        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n-      throw new AccessControlException(canceller + \n-                                      \" is not authorized to cancel the token\");\n+    if (!canceller.equals(owner)\n+        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n+      throw new AccessControlException(canceller\n+          + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n-    synchronized (currentTokens) {\n-      info \u003d currentTokens.remove(id);\n-    }\n+    info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n+    return id;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "TokenIdent"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/10 1:43 PM",
          "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/02/10 12:49 AM",
          "commitNameOld": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  public void cancelToken(Token\u003cTokenIdent\u003e token,\n+  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n-    if (!canceller.equals(owner) \u0026\u0026 \n-        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n-      throw new AccessControlException(canceller + \n-                                      \" is not authorized to cancel the token\");\n+    if (!canceller.equals(owner)\n+        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n+      throw new AccessControlException(canceller\n+          + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n-    synchronized (currentTokens) {\n-      info \u003d currentTokens.remove(id);\n-    }\n+    info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n+    return id;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/10 1:43 PM",
          "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/02/10 12:49 AM",
          "commitNameOld": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  public void cancelToken(Token\u003cTokenIdent\u003e token,\n+  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     if (id.getUser() \u003d\u003d null) {\n       throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n     Text renewer \u003d id.getRenewer();\n-    if (!canceller.equals(owner) \u0026\u0026 \n-        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n-      throw new AccessControlException(canceller + \n-                                      \" is not authorized to cancel the token\");\n+    if (!canceller.equals(owner)\n+        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n+      throw new AccessControlException(canceller\n+          + \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n-    synchronized (currentTokens) {\n-      info \u003d currentTokens.remove(id);\n-    }\n+    info \u003d currentTokens.remove(id);\n     if (info \u003d\u003d null) {\n       throw new InvalidToken(\"Token not found\");\n     }\n+    return id;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TokenIdent cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    if (!canceller.equals(owner)\n        \u0026\u0026 (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n      throw new AccessControlException(canceller\n          + \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    info \u003d currentTokens.remove(id);\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n    return id;\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a417a8faeaa1a40e140c7f86463e699d92404454": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-6551. Delegation token renewing and cancelling should provide\nmeaningful exceptions when there are failures instead of returning \nfalse. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/10 12:49 AM",
      "commitName": "a417a8faeaa1a40e140c7f86463e699d92404454",
      "commitAuthor": "Owen O\u0027Malley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-6551. Delegation token renewing and cancelling should provide\nmeaningful exceptions when there are failures instead of returning \nfalse. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/10 12:49 AM",
          "commitName": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "09/02/10 12:10 AM",
          "commitNameOld": "38c59c0af7595897dbff8e5f13b7ff6978b9c08b",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-  public Boolean cancelToken(Token\u003cTokenIdent\u003e token,\n+  public void cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    if (id.getRenewer() \u003d\u003d null) {\n-      LOG.warn(\"Renewer is null: Invalid Identifier\");\n-      return false;\n-    }\n     if (id.getUser() \u003d\u003d null) {\n-      LOG.warn(\"owner is null: Invalid Identifier\");\n-      return false;\n+      throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n-    String renewer \u003d id.getRenewer().toString();\n-    if (!canceller.equals(owner) \u0026\u0026 !canceller.equals(renewer)) {\n-      LOG.warn(canceller + \" is not authorized to cancel the token\");\n-      return false;\n+    Text renewer \u003d id.getRenewer();\n+    if (!canceller.equals(owner) \u0026\u0026 \n+        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n+      throw new AccessControlException(canceller + \n+                                      \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     synchronized (currentTokens) {\n       info \u003d currentTokens.remove(id);\n     }\n-    return info !\u003d null;\n+    if (info \u003d\u003d null) {\n+      throw new InvalidToken(\"Token not found\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    if (!canceller.equals(owner) \u0026\u0026 \n        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n      throw new AccessControlException(canceller + \n                                      \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    synchronized (currentTokens) {\n      info \u003d currentTokens.remove(id);\n    }\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "Boolean",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6551. Delegation token renewing and cancelling should provide\nmeaningful exceptions when there are failures instead of returning \nfalse. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/10 12:49 AM",
          "commitName": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "09/02/10 12:10 AM",
          "commitNameOld": "38c59c0af7595897dbff8e5f13b7ff6978b9c08b",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-  public Boolean cancelToken(Token\u003cTokenIdent\u003e token,\n+  public void cancelToken(Token\u003cTokenIdent\u003e token,\n       String canceller) throws IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    if (id.getRenewer() \u003d\u003d null) {\n-      LOG.warn(\"Renewer is null: Invalid Identifier\");\n-      return false;\n-    }\n     if (id.getUser() \u003d\u003d null) {\n-      LOG.warn(\"owner is null: Invalid Identifier\");\n-      return false;\n+      throw new InvalidToken(\"Token with no owner\");\n     }\n     String owner \u003d id.getUser().getUserName();\n-    String renewer \u003d id.getRenewer().toString();\n-    if (!canceller.equals(owner) \u0026\u0026 !canceller.equals(renewer)) {\n-      LOG.warn(canceller + \" is not authorized to cancel the token\");\n-      return false;\n+    Text renewer \u003d id.getRenewer();\n+    if (!canceller.equals(owner) \u0026\u0026 \n+        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n+      throw new AccessControlException(canceller + \n+                                      \" is not authorized to cancel the token\");\n     }\n     DelegationTokenInformation info \u003d null;\n     synchronized (currentTokens) {\n       info \u003d currentTokens.remove(id);\n     }\n-    return info !\u003d null;\n+    if (info \u003d\u003d null) {\n+      throw new InvalidToken(\"Token not found\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    if (id.getUser() \u003d\u003d null) {\n      throw new InvalidToken(\"Token with no owner\");\n    }\n    String owner \u003d id.getUser().getUserName();\n    Text renewer \u003d id.getRenewer();\n    if (!canceller.equals(owner) \u0026\u0026 \n        (renewer \u003d\u003d null || !canceller.equals(renewer.toString()))) {\n      throw new AccessControlException(canceller + \n                                      \" is not authorized to cancel the token\");\n    }\n    DelegationTokenInformation info \u003d null;\n    synchronized (currentTokens) {\n      info \u003d currentTokens.remove(id);\n    }\n    if (info \u003d\u003d null) {\n      throw new InvalidToken(\"Token not found\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "38c59c0af7595897dbff8e5f13b7ff6978b9c08b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6547. Move DelegationToken into Common, so that it can be used by\nMapReduce also. (devaraj via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@907956 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/10 12:10 AM",
      "commitName": "38c59c0af7595897dbff8e5f13b7ff6978b9c08b",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,26 @@\n+  public Boolean cancelToken(Token\u003cTokenIdent\u003e token,\n+      String canceller) throws IOException {\n+    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n+    DataInputStream in \u003d new DataInputStream(buf);\n+    TokenIdent id \u003d createIdentifier();\n+    id.readFields(in);\n+    if (id.getRenewer() \u003d\u003d null) {\n+      LOG.warn(\"Renewer is null: Invalid Identifier\");\n+      return false;\n+    }\n+    if (id.getUser() \u003d\u003d null) {\n+      LOG.warn(\"owner is null: Invalid Identifier\");\n+      return false;\n+    }\n+    String owner \u003d id.getUser().getUserName();\n+    String renewer \u003d id.getRenewer().toString();\n+    if (!canceller.equals(owner) \u0026\u0026 !canceller.equals(renewer)) {\n+      LOG.warn(canceller + \" is not authorized to cancel the token\");\n+      return false;\n+    }\n+    DelegationTokenInformation info \u003d null;\n+    synchronized (currentTokens) {\n+      info \u003d currentTokens.remove(id);\n+    }\n+    return info !\u003d null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Boolean cancelToken(Token\u003cTokenIdent\u003e token,\n      String canceller) throws IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    if (id.getRenewer() \u003d\u003d null) {\n      LOG.warn(\"Renewer is null: Invalid Identifier\");\n      return false;\n    }\n    if (id.getUser() \u003d\u003d null) {\n      LOG.warn(\"owner is null: Invalid Identifier\");\n      return false;\n    }\n    String owner \u003d id.getUser().getUserName();\n    String renewer \u003d id.getRenewer().toString();\n    if (!canceller.equals(owner) \u0026\u0026 !canceller.equals(renewer)) {\n      LOG.warn(canceller + \" is not authorized to cancel the token\");\n      return false;\n    }\n    DelegationTokenInformation info \u003d null;\n    synchronized (currentTokens) {\n      info \u003d currentTokens.remove(id);\n    }\n    return info !\u003d null;\n  }",
      "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
    }
  }
}