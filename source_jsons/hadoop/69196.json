{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedCacheEmulator.java",
  "functionName": "writeDistCacheFilesList",
  "functionId": "writeDistCacheFilesList",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
  "functionStartLine": 414,
  "functionEndLine": 478,
  "numCommitsSeen": 9,
  "timeTaken": 4671,
  "changeHistory": [
    "c4cba6165a3afbf4f1f8ff6b7f11286772d70d6f",
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "7d609320608482de9c191bafb36498b29c1fe676",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "c4cba6165a3afbf4f1f8ff6b7f11286772d70d6f": "Ybodychange",
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "7d609320608482de9c191bafb36498b29c1fe676": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c4cba6165a3afbf4f1f8ff6b7f11286772d70d6f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11465. Fix findbugs warnings in hadoop-gridmix. (Contributed by Varun Saxena)\n",
      "commitDate": "12/01/15 9:22 PM",
      "commitName": "c4cba6165a3afbf4f1f8ff6b7f11286772d70d6f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "02/11/13 11:42 AM",
      "commitNameOld": "7abf7e81512918d780e05070c29ee2ba8736f41e",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 436.44,
      "commitsBetweenForRepo": 3278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,65 @@\n   private int writeDistCacheFilesList()\n       throws IOException {\n     // Sort the distributed cache files in the decreasing order of file sizes.\n     List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n     Collections.sort(dcFiles, new Comparator() {\n       public int compare(Object dc1, Object dc2) {\n         return ((Comparable) ((Map.Entry) (dc2)).getValue())\n             .compareTo(((Map.Entry) (dc1)).getValue());\n       }\n     });\n \n     // write the sorted distributed cache files to the sequence file\n     FileSystem fs \u003d FileSystem.get(conf);\n     Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n     conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n         distCacheFilesList.toString());\n     SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n         distCacheFilesList, LongWritable.class, BytesWritable.class,\n         SequenceFile.CompressionType.NONE);\n \n     // Total number of unique distributed cache files\n     int fileCount \u003d dcFiles.size();\n     long byteCount \u003d 0;// Total size of all distributed cache files\n     long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n \n     for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n       Map.Entry entry \u003d (Map.Entry)it.next();\n       LongWritable fileSize \u003d\n-          new LongWritable(Long.valueOf(entry.getValue().toString()));\n+          new LongWritable(Long.parseLong(entry.getValue().toString()));\n       BytesWritable filePath \u003d\n-          new BytesWritable(entry.getKey().toString().getBytes());\n+          new BytesWritable(\n+          entry.getKey().toString().getBytes(charsetUTF8));\n \n       byteCount +\u003d fileSize.get();\n       bytesSync +\u003d fileSize.get();\n       if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n         src_writer.sync();\n         bytesSync \u003d fileSize.get();\n       }\n       src_writer.append(fileSize, filePath);\n     }\n     if (src_writer !\u003d null) {\n       src_writer.close();\n     }\n     // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n     fs.deleteOnExit(distCacheFilesList);\n \n     conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n     conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n     LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n         + fileCount + \". Total size of HDFS based distributed cache files \"\n         + \"to be generated is \" + byteCount);\n \n     if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n       LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n           + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n           + \" to emulate distributed cache load. Either use -generate\\noption\"\n           + \" to generate distributed cache data along with input data OR \"\n           + \"disable\\ndistributed cache emulation by configuring \u0027\"\n           + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n           + \"\u0027 to false.\");\n       return Gridmix.MISSING_DIST_CACHE_FILES_ERROR;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int writeDistCacheFilesList()\n      throws IOException {\n    // Sort the distributed cache files in the decreasing order of file sizes.\n    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n    Collections.sort(dcFiles, new Comparator() {\n      public int compare(Object dc1, Object dc2) {\n        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n            .compareTo(((Map.Entry) (dc1)).getValue());\n      }\n    });\n\n    // write the sorted distributed cache files to the sequence file\n    FileSystem fs \u003d FileSystem.get(conf);\n    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n        distCacheFilesList.toString());\n    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n        distCacheFilesList, LongWritable.class, BytesWritable.class,\n        SequenceFile.CompressionType.NONE);\n\n    // Total number of unique distributed cache files\n    int fileCount \u003d dcFiles.size();\n    long byteCount \u003d 0;// Total size of all distributed cache files\n    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n\n    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n      Map.Entry entry \u003d (Map.Entry)it.next();\n      LongWritable fileSize \u003d\n          new LongWritable(Long.parseLong(entry.getValue().toString()));\n      BytesWritable filePath \u003d\n          new BytesWritable(\n          entry.getKey().toString().getBytes(charsetUTF8));\n\n      byteCount +\u003d fileSize.get();\n      bytesSync +\u003d fileSize.get();\n      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n        src_writer.sync();\n        bytesSync \u003d fileSize.get();\n      }\n      src_writer.append(fileSize, filePath);\n    }\n    if (src_writer !\u003d null) {\n      src_writer.close();\n    }\n    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n    fs.deleteOnExit(distCacheFilesList);\n\n    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n        + fileCount + \". Total size of HDFS based distributed cache files \"\n        + \"to be generated is \" + byteCount);\n\n    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n          + \" to emulate distributed cache load. Either use -generate\\noption\"\n          + \" to generate distributed cache data along with input data OR \"\n          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n          + \"\u0027 to false.\");\n      return Gridmix.MISSING_DIST_CACHE_FILES_ERROR;\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {}
    },
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int writeDistCacheFilesList()\n      throws IOException {\n    // Sort the distributed cache files in the decreasing order of file sizes.\n    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n    Collections.sort(dcFiles, new Comparator() {\n      public int compare(Object dc1, Object dc2) {\n        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n            .compareTo(((Map.Entry) (dc1)).getValue());\n      }\n    });\n\n    // write the sorted distributed cache files to the sequence file\n    FileSystem fs \u003d FileSystem.get(conf);\n    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n        distCacheFilesList.toString());\n    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n        distCacheFilesList, LongWritable.class, BytesWritable.class,\n        SequenceFile.CompressionType.NONE);\n\n    // Total number of unique distributed cache files\n    int fileCount \u003d dcFiles.size();\n    long byteCount \u003d 0;// Total size of all distributed cache files\n    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n\n    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n      Map.Entry entry \u003d (Map.Entry)it.next();\n      LongWritable fileSize \u003d\n          new LongWritable(Long.valueOf(entry.getValue().toString()));\n      BytesWritable filePath \u003d\n          new BytesWritable(entry.getKey().toString().getBytes());\n\n      byteCount +\u003d fileSize.get();\n      bytesSync +\u003d fileSize.get();\n      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n        src_writer.sync();\n        bytesSync \u003d fileSize.get();\n      }\n      src_writer.append(fileSize, filePath);\n    }\n    if (src_writer !\u003d null) {\n      src_writer.close();\n    }\n    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n    fs.deleteOnExit(distCacheFilesList);\n\n    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n        + fileCount + \". Total size of HDFS based distributed cache files \"\n        + \"to be generated is \" + byteCount);\n\n    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n          + \" to emulate distributed cache load. Either use -generate\\noption\"\n          + \" to generate distributed cache data along with input data OR \"\n          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n          + \"\u0027 to false.\");\n      return Gridmix.MISSING_DIST_CACHE_FILES_ERROR;\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
      }
    },
    "7d609320608482de9c191bafb36498b29c1fe676": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3829. [Gridmix] Gridmix should give better error message when input data directory already exists and -generate option is given.(ravigummadi)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299625 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/12 4:08 AM",
      "commitName": "7d609320608482de9c191bafb36498b29c1fe676",
      "commitAuthor": "Ravi Gummadi",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 200.45,
      "commitsBetweenForRepo": 1430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private int writeDistCacheFilesList()\n       throws IOException {\n     // Sort the distributed cache files in the decreasing order of file sizes.\n     List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n     Collections.sort(dcFiles, new Comparator() {\n       public int compare(Object dc1, Object dc2) {\n         return ((Comparable) ((Map.Entry) (dc2)).getValue())\n             .compareTo(((Map.Entry) (dc1)).getValue());\n       }\n     });\n \n     // write the sorted distributed cache files to the sequence file\n     FileSystem fs \u003d FileSystem.get(conf);\n     Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n     conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n         distCacheFilesList.toString());\n     SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n         distCacheFilesList, LongWritable.class, BytesWritable.class,\n         SequenceFile.CompressionType.NONE);\n \n     // Total number of unique distributed cache files\n     int fileCount \u003d dcFiles.size();\n     long byteCount \u003d 0;// Total size of all distributed cache files\n     long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n \n     for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n       Map.Entry entry \u003d (Map.Entry)it.next();\n       LongWritable fileSize \u003d\n           new LongWritable(Long.valueOf(entry.getValue().toString()));\n       BytesWritable filePath \u003d\n           new BytesWritable(entry.getKey().toString().getBytes());\n \n       byteCount +\u003d fileSize.get();\n       bytesSync +\u003d fileSize.get();\n       if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n         src_writer.sync();\n         bytesSync \u003d fileSize.get();\n       }\n       src_writer.append(fileSize, filePath);\n     }\n     if (src_writer !\u003d null) {\n       src_writer.close();\n     }\n     // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n     fs.deleteOnExit(distCacheFilesList);\n \n     conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n     conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n     LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n         + fileCount + \". Total size of HDFS based distributed cache files \"\n         + \"to be generated is \" + byteCount);\n \n     if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n       LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n           + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n           + \" to emulate distributed cache load. Either use -generate\\noption\"\n           + \" to generate distributed cache data along with input data OR \"\n           + \"disable\\ndistributed cache emulation by configuring \u0027\"\n           + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n           + \"\u0027 to false.\");\n-      return MISSING_DIST_CACHE_FILES_ERROR;\n+      return Gridmix.MISSING_DIST_CACHE_FILES_ERROR;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int writeDistCacheFilesList()\n      throws IOException {\n    // Sort the distributed cache files in the decreasing order of file sizes.\n    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n    Collections.sort(dcFiles, new Comparator() {\n      public int compare(Object dc1, Object dc2) {\n        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n            .compareTo(((Map.Entry) (dc1)).getValue());\n      }\n    });\n\n    // write the sorted distributed cache files to the sequence file\n    FileSystem fs \u003d FileSystem.get(conf);\n    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n        distCacheFilesList.toString());\n    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n        distCacheFilesList, LongWritable.class, BytesWritable.class,\n        SequenceFile.CompressionType.NONE);\n\n    // Total number of unique distributed cache files\n    int fileCount \u003d dcFiles.size();\n    long byteCount \u003d 0;// Total size of all distributed cache files\n    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n\n    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n      Map.Entry entry \u003d (Map.Entry)it.next();\n      LongWritable fileSize \u003d\n          new LongWritable(Long.valueOf(entry.getValue().toString()));\n      BytesWritable filePath \u003d\n          new BytesWritable(entry.getKey().toString().getBytes());\n\n      byteCount +\u003d fileSize.get();\n      bytesSync +\u003d fileSize.get();\n      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n        src_writer.sync();\n        bytesSync \u003d fileSize.get();\n      }\n      src_writer.append(fileSize, filePath);\n    }\n    if (src_writer !\u003d null) {\n      src_writer.close();\n    }\n    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n    fs.deleteOnExit(distCacheFilesList);\n\n    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n        + fileCount + \". Total size of HDFS based distributed cache files \"\n        + \"to be generated is \" + byteCount);\n\n    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n          + \" to emulate distributed cache load. Either use -generate\\noption\"\n          + \" to generate distributed cache data along with input data OR \"\n          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n          + \"\u0027 to false.\");\n      return Gridmix.MISSING_DIST_CACHE_FILES_ERROR;\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int writeDistCacheFilesList()\n      throws IOException {\n    // Sort the distributed cache files in the decreasing order of file sizes.\n    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n    Collections.sort(dcFiles, new Comparator() {\n      public int compare(Object dc1, Object dc2) {\n        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n            .compareTo(((Map.Entry) (dc1)).getValue());\n      }\n    });\n\n    // write the sorted distributed cache files to the sequence file\n    FileSystem fs \u003d FileSystem.get(conf);\n    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n        distCacheFilesList.toString());\n    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n        distCacheFilesList, LongWritable.class, BytesWritable.class,\n        SequenceFile.CompressionType.NONE);\n\n    // Total number of unique distributed cache files\n    int fileCount \u003d dcFiles.size();\n    long byteCount \u003d 0;// Total size of all distributed cache files\n    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n\n    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n      Map.Entry entry \u003d (Map.Entry)it.next();\n      LongWritable fileSize \u003d\n          new LongWritable(Long.valueOf(entry.getValue().toString()));\n      BytesWritable filePath \u003d\n          new BytesWritable(entry.getKey().toString().getBytes());\n\n      byteCount +\u003d fileSize.get();\n      bytesSync +\u003d fileSize.get();\n      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n        src_writer.sync();\n        bytesSync \u003d fileSize.get();\n      }\n      src_writer.append(fileSize, filePath);\n    }\n    if (src_writer !\u003d null) {\n      src_writer.close();\n    }\n    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n    fs.deleteOnExit(distCacheFilesList);\n\n    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n        + fileCount + \". Total size of HDFS based distributed cache files \"\n        + \"to be generated is \" + byteCount);\n\n    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n          + \" to emulate distributed cache load. Either use -generate\\noption\"\n          + \" to generate distributed cache data along with input data OR \"\n          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n          + \"\u0027 to false.\");\n      return MISSING_DIST_CACHE_FILES_ERROR;\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int writeDistCacheFilesList()\n      throws IOException {\n    // Sort the distributed cache files in the decreasing order of file sizes.\n    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n    Collections.sort(dcFiles, new Comparator() {\n      public int compare(Object dc1, Object dc2) {\n        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n            .compareTo(((Map.Entry) (dc1)).getValue());\n      }\n    });\n\n    // write the sorted distributed cache files to the sequence file\n    FileSystem fs \u003d FileSystem.get(conf);\n    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n        distCacheFilesList.toString());\n    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n        distCacheFilesList, LongWritable.class, BytesWritable.class,\n        SequenceFile.CompressionType.NONE);\n\n    // Total number of unique distributed cache files\n    int fileCount \u003d dcFiles.size();\n    long byteCount \u003d 0;// Total size of all distributed cache files\n    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n\n    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n      Map.Entry entry \u003d (Map.Entry)it.next();\n      LongWritable fileSize \u003d\n          new LongWritable(Long.valueOf(entry.getValue().toString()));\n      BytesWritable filePath \u003d\n          new BytesWritable(entry.getKey().toString().getBytes());\n\n      byteCount +\u003d fileSize.get();\n      bytesSync +\u003d fileSize.get();\n      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n        src_writer.sync();\n        bytesSync \u003d fileSize.get();\n      }\n      src_writer.append(fileSize, filePath);\n    }\n    if (src_writer !\u003d null) {\n      src_writer.close();\n    }\n    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n    fs.deleteOnExit(distCacheFilesList);\n\n    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n        + fileCount + \". Total size of HDFS based distributed cache files \"\n        + \"to be generated is \" + byteCount);\n\n    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n          + \" to emulate distributed cache load. Either use -generate\\noption\"\n          + \" to generate distributed cache data along with input data OR \"\n          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n          + \"\u0027 to false.\");\n      return MISSING_DIST_CACHE_FILES_ERROR;\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,64 @@\n+  private int writeDistCacheFilesList()\n+      throws IOException {\n+    // Sort the distributed cache files in the decreasing order of file sizes.\n+    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n+    Collections.sort(dcFiles, new Comparator() {\n+      public int compare(Object dc1, Object dc2) {\n+        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n+            .compareTo(((Map.Entry) (dc1)).getValue());\n+      }\n+    });\n+\n+    // write the sorted distributed cache files to the sequence file\n+    FileSystem fs \u003d FileSystem.get(conf);\n+    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n+    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n+        distCacheFilesList.toString());\n+    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n+        distCacheFilesList, LongWritable.class, BytesWritable.class,\n+        SequenceFile.CompressionType.NONE);\n+\n+    // Total number of unique distributed cache files\n+    int fileCount \u003d dcFiles.size();\n+    long byteCount \u003d 0;// Total size of all distributed cache files\n+    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n+\n+    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n+      Map.Entry entry \u003d (Map.Entry)it.next();\n+      LongWritable fileSize \u003d\n+          new LongWritable(Long.valueOf(entry.getValue().toString()));\n+      BytesWritable filePath \u003d\n+          new BytesWritable(entry.getKey().toString().getBytes());\n+\n+      byteCount +\u003d fileSize.get();\n+      bytesSync +\u003d fileSize.get();\n+      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n+        src_writer.sync();\n+        bytesSync \u003d fileSize.get();\n+      }\n+      src_writer.append(fileSize, filePath);\n+    }\n+    if (src_writer !\u003d null) {\n+      src_writer.close();\n+    }\n+    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n+    fs.deleteOnExit(distCacheFilesList);\n+\n+    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n+    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n+    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n+        + fileCount + \". Total size of HDFS based distributed cache files \"\n+        + \"to be generated is \" + byteCount);\n+\n+    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n+      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n+          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n+          + \" to emulate distributed cache load. Either use -generate\\noption\"\n+          + \" to generate distributed cache data along with input data OR \"\n+          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n+          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n+          + \"\u0027 to false.\");\n+      return MISSING_DIST_CACHE_FILES_ERROR;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int writeDistCacheFilesList()\n      throws IOException {\n    // Sort the distributed cache files in the decreasing order of file sizes.\n    List dcFiles \u003d new ArrayList(distCacheFiles.entrySet());\n    Collections.sort(dcFiles, new Comparator() {\n      public int compare(Object dc1, Object dc2) {\n        return ((Comparable) ((Map.Entry) (dc2)).getValue())\n            .compareTo(((Map.Entry) (dc1)).getValue());\n      }\n    });\n\n    // write the sorted distributed cache files to the sequence file\n    FileSystem fs \u003d FileSystem.get(conf);\n    Path distCacheFilesList \u003d new Path(distCachePath, \"_distCacheFiles.txt\");\n    conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST,\n        distCacheFilesList.toString());\n    SequenceFile.Writer src_writer \u003d SequenceFile.createWriter(fs, conf,\n        distCacheFilesList, LongWritable.class, BytesWritable.class,\n        SequenceFile.CompressionType.NONE);\n\n    // Total number of unique distributed cache files\n    int fileCount \u003d dcFiles.size();\n    long byteCount \u003d 0;// Total size of all distributed cache files\n    long bytesSync \u003d 0;// Bytes after previous sync;used to add sync marker\n\n    for (Iterator it \u003d dcFiles.iterator(); it.hasNext();) {\n      Map.Entry entry \u003d (Map.Entry)it.next();\n      LongWritable fileSize \u003d\n          new LongWritable(Long.valueOf(entry.getValue().toString()));\n      BytesWritable filePath \u003d\n          new BytesWritable(entry.getKey().toString().getBytes());\n\n      byteCount +\u003d fileSize.get();\n      bytesSync +\u003d fileSize.get();\n      if (bytesSync \u003e AVG_BYTES_PER_MAP) {\n        src_writer.sync();\n        bytesSync \u003d fileSize.get();\n      }\n      src_writer.append(fileSize, filePath);\n    }\n    if (src_writer !\u003d null) {\n      src_writer.close();\n    }\n    // Set delete on exit for \u0027dist cache files list\u0027 as it is not needed later.\n    fs.deleteOnExit(distCacheFilesList);\n\n    conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount);\n    conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount);\n    LOG.info(\"Number of HDFS based distributed cache files to be generated is \"\n        + fileCount + \". Total size of HDFS based distributed cache files \"\n        + \"to be generated is \" + byteCount);\n\n    if (!shouldGenerateDistCacheData() \u0026\u0026 fileCount \u003e 0) {\n      LOG.error(\"Missing \" + fileCount + \" distributed cache files under the \"\n          + \" directory\\n\" + distCachePath + \"\\nthat are needed for gridmix\"\n          + \" to emulate distributed cache load. Either use -generate\\noption\"\n          + \" to generate distributed cache data along with input data OR \"\n          + \"disable\\ndistributed cache emulation by configuring \u0027\"\n          + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE\n          + \"\u0027 to false.\");\n      return MISSING_DIST_CACHE_FILES_ERROR;\n    }\n    return 0;\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
    }
  }
}