{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedOpportunisticContainerAllocator.java",
  "functionName": "collectRackLocalCandidates",
  "functionId": "collectRackLocalCandidates___allNodes-Map__String,RemoteNode____enrichedRR-EnrichedResourceRequest__retList-LinkedList__RemoteNode____blackList-Set__String____allocatedNodes-Set__String____numContainers-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
  "functionStartLine": 316,
  "functionEndLine": 339,
  "numCommitsSeen": 31,
  "timeTaken": 4036,
  "changeHistory": [
    "fb512f50877438acb01fe6b3ec96c12b4db61694",
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
    "aeadb9432f84e679f00a9a12f63675c456bc14a8",
    "6a69239d867070ee85d79026542033ac661c4c1c",
    "b733348dde18a242e6c9074c512116a8baf1d281"
  ],
  "changeHistoryShort": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": "Ybodychange",
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d": "Ymovefromfile",
    "aeadb9432f84e679f00a9a12f63675c456bc14a8": "Ymultichange(Yparameterchange,Ybodychange)",
    "6a69239d867070ee85d79026542033ac661c4c1c": "Ybodychange",
    "b733348dde18a242e6c9074c512116a8baf1d281": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9697. Efficient allocation of Opportunistic containers. Contributed by Abhishek Modi.\n",
      "commitDate": "12/11/19 3:04 AM",
      "commitName": "fb512f50877438acb01fe6b3ec96c12b4db61694",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "30/09/19 11:10 AM",
      "commitNameOld": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 42.7,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n       EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n       Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n     String partition \u003d getRequestPartition(enrichedRR);\n     for (RemoteNode rNode : allNodes.values()) {\n       if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n-          enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n+          enrichedRR.getRackMap().containsKey(rNode.getRackName())) {\n         String rHost \u003d rNode.getNodeId().getHost();\n         if (blackList.contains(rHost)) {\n           continue;\n         }\n         if (allocatedNodes.contains(rHost)) {\n           retList.addLast(rNode);\n         } else {\n           retList.addFirst(rNode);\n           numContainers--;\n         }\n       }\n       if (numContainers \u003d\u003d 0) {\n         break;\n       }\n     }\n     return numContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n      Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n    String partition \u003d getRequestPartition(enrichedRR);\n    for (RemoteNode rNode : allNodes.values()) {\n      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n          enrichedRR.getRackMap().containsKey(rNode.getRackName())) {\n        String rHost \u003d rNode.getNodeId().getHost();\n        if (blackList.contains(rHost)) {\n          continue;\n        }\n        if (allocatedNodes.contains(rHost)) {\n          retList.addLast(rNode);\n        } else {\n          retList.addFirst(rNode);\n          numContainers--;\n        }\n      }\n      if (numContainers \u003d\u003d 0) {\n        break;\n      }\n    }\n    return numContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-9859. Refactoring of OpportunisticContainerAllocator. Contributed by Abhishek Modi.\n",
      "commitDate": "30/09/19 11:10 AM",
      "commitName": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "30/09/19 8:06 AM",
      "commitNameOld": "98ca07ebed2ae3d7e41e5029b5bba6d089d41d43",
      "commitAuthorOld": "bshashikant",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n      Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n    String partition \u003d getRequestPartition(enrichedRR);\n    for (RemoteNode rNode : allNodes.values()) {\n      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n          enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n        String rHost \u003d rNode.getNodeId().getHost();\n        if (blackList.contains(rHost)) {\n          continue;\n        }\n        if (allocatedNodes.contains(rHost)) {\n          retList.addLast(rNode);\n        } else {\n          retList.addFirst(rNode);\n          numContainers--;\n        }\n      }\n      if (numContainers \u003d\u003d 0) {\n        break;\n      }\n    }\n    return numContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
        "oldMethodName": "collectRackLocalCandidates",
        "newMethodName": "collectRackLocalCandidates"
      }
    },
    "aeadb9432f84e679f00a9a12f63675c456bc14a8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
      "commitDate": "19/04/19 9:41 AM",
      "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
          "commitDate": "19/04/19 9:41 AM",
          "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/04/19 11:49 AM",
          "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.91,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n   private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n       EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n-      Set\u003cString\u003e blackList, int numContainers) {\n+      Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n     String partition \u003d getRequestPartition(enrichedRR);\n     for (RemoteNode rNode : allNodes.values()) {\n       if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n           enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n-        if (blackList.contains(rNode.getNodeId().getHost())) {\n+        String rHost \u003d rNode.getNodeId().getHost();\n+        if (blackList.contains(rHost)) {\n+          continue;\n+        }\n+        if (allocatedNodes.contains(rHost)) {\n           retList.addLast(rNode);\n         } else {\n           retList.addFirst(rNode);\n           numContainers--;\n         }\n       }\n       if (numContainers \u003d\u003d 0) {\n         break;\n       }\n     }\n     return numContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n      Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n    String partition \u003d getRequestPartition(enrichedRR);\n    for (RemoteNode rNode : allNodes.values()) {\n      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n          enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n        String rHost \u003d rNode.getNodeId().getHost();\n        if (blackList.contains(rHost)) {\n          continue;\n        }\n        if (allocatedNodes.contains(rHost)) {\n          retList.addLast(rNode);\n        } else {\n          retList.addFirst(rNode);\n          numContainers--;\n        }\n      }\n      if (numContainers \u003d\u003d 0) {\n        break;\n      }\n    }\n    return numContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[allNodes-Map\u003cString,RemoteNode\u003e, enrichedRR-EnrichedResourceRequest, retList-LinkedList\u003cRemoteNode\u003e, blackList-Set\u003cString\u003e, numContainers-int]",
            "newValue": "[allNodes-Map\u003cString,RemoteNode\u003e, enrichedRR-EnrichedResourceRequest, retList-LinkedList\u003cRemoteNode\u003e, blackList-Set\u003cString\u003e, allocatedNodes-Set\u003cString\u003e, numContainers-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
          "commitDate": "19/04/19 9:41 AM",
          "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/04/19 11:49 AM",
          "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.91,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n   private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n       EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n-      Set\u003cString\u003e blackList, int numContainers) {\n+      Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n     String partition \u003d getRequestPartition(enrichedRR);\n     for (RemoteNode rNode : allNodes.values()) {\n       if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n           enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n-        if (blackList.contains(rNode.getNodeId().getHost())) {\n+        String rHost \u003d rNode.getNodeId().getHost();\n+        if (blackList.contains(rHost)) {\n+          continue;\n+        }\n+        if (allocatedNodes.contains(rHost)) {\n           retList.addLast(rNode);\n         } else {\n           retList.addFirst(rNode);\n           numContainers--;\n         }\n       }\n       if (numContainers \u003d\u003d 0) {\n         break;\n       }\n     }\n     return numContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n      Set\u003cString\u003e blackList, Set\u003cString\u003e allocatedNodes, int numContainers) {\n    String partition \u003d getRequestPartition(enrichedRR);\n    for (RemoteNode rNode : allNodes.values()) {\n      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n          enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n        String rHost \u003d rNode.getNodeId().getHost();\n        if (blackList.contains(rHost)) {\n          continue;\n        }\n        if (allocatedNodes.contains(rHost)) {\n          retList.addLast(rNode);\n        } else {\n          retList.addFirst(rNode);\n          numContainers--;\n        }\n      }\n      if (numContainers \u003d\u003d 0) {\n        break;\n      }\n    }\n    return numContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a69239d867070ee85d79026542033ac661c4c1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8163. Add support for Node Labels in opportunistic scheduling. Contributed by Abhishek Modi.\n",
      "commitDate": "04/05/18 2:59 PM",
      "commitName": "6a69239d867070ee85d79026542033ac661c4c1c",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 179.02,
      "commitsBetweenForRepo": 1731,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n       EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n       Set\u003cString\u003e blackList, int numContainers) {\n+    String partition \u003d getRequestPartition(enrichedRR);\n     for (RemoteNode rNode : allNodes.values()) {\n-      if (enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n+      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n+          enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n         if (blackList.contains(rNode.getNodeId().getHost())) {\n           retList.addLast(rNode);\n         } else {\n           retList.addFirst(rNode);\n           numContainers--;\n         }\n       }\n       if (numContainers \u003d\u003d 0) {\n         break;\n       }\n     }\n     return numContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n      Set\u003cString\u003e blackList, int numContainers) {\n    String partition \u003d getRequestPartition(enrichedRR);\n    for (RemoteNode rNode : allNodes.values()) {\n      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) \u0026\u0026\n          enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n        if (blackList.contains(rNode.getNodeId().getHost())) {\n          retList.addLast(rNode);\n        } else {\n          retList.addFirst(rNode);\n          numContainers--;\n        }\n      }\n      if (numContainers \u003d\u003d 0) {\n        break;\n      }\n    }\n    return numContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "b733348dde18a242e6c9074c512116a8baf1d281": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
      "commitDate": "05/10/17 9:58 AM",
      "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,18 @@\n+  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n+      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n+      Set\u003cString\u003e blackList, int numContainers) {\n+    for (RemoteNode rNode : allNodes.values()) {\n+      if (enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n+        if (blackList.contains(rNode.getNodeId().getHost())) {\n+          retList.addLast(rNode);\n+        } else {\n+          retList.addFirst(rNode);\n+          numContainers--;\n+        }\n+      }\n+      if (numContainers \u003d\u003d 0) {\n+        break;\n+      }\n+    }\n+    return numContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int collectRackLocalCandidates(Map\u003cString, RemoteNode\u003e allNodes,\n      EnrichedResourceRequest enrichedRR, LinkedList\u003cRemoteNode\u003e retList,\n      Set\u003cString\u003e blackList, int numContainers) {\n    for (RemoteNode rNode : allNodes.values()) {\n      if (enrichedRR.getRackLocations().contains(rNode.getRackName())) {\n        if (blackList.contains(rNode.getNodeId().getHost())) {\n          retList.addLast(rNode);\n        } else {\n          retList.addFirst(rNode);\n          numContainers--;\n        }\n      }\n      if (numContainers \u003d\u003d 0) {\n        break;\n      }\n    }\n    return numContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java"
    }
  }
}