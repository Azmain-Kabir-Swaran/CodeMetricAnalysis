{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtilClient.java",
  "functionName": "locatedBlocks2Locations",
  "functionId": "locatedBlocks2Locations___blocks-List__LocatedBlock__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
  "functionStartLine": 277,
  "functionEndLine": 316,
  "numCommitsSeen": 145,
  "timeTaken": 3506,
  "changeHistory": [
    "1ea1a8334ea01814121490a5bfd2a0205c66d6e4",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "9d06631719466679135840d50e55ad62332b3866",
    "fccace6116713c85cd59a808c565ea39fb5d6944"
  ],
  "changeHistoryShort": {
    "1ea1a8334ea01814121490a5bfd2a0205c66d6e4": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Ymovefromfile",
    "9d06631719466679135840d50e55ad62332b3866": "Ybodychange",
    "fccace6116713c85cd59a808c565ea39fb5d6944": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1ea1a8334ea01814121490a5bfd2a0205c66d6e4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8887. Expose storage type and storage ID in BlockLocation.\n",
      "commitDate": "11/08/15 11:25 PM",
      "commitName": "1ea1a8334ea01814121490a5bfd2a0205c66d6e4",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "23/06/15 11:41 AM",
      "commitNameOld": "122cad6aec5839d8d515c5008425ecb34f2fa56b",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 49.49,
      "commitsBetweenForRepo": 286,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public static BlockLocation[] locatedBlocks2Locations(\n       List\u003cLocatedBlock\u003e blocks) {\n     if (blocks \u003d\u003d null) {\n       return new BlockLocation[0];\n     }\n     int nrBlocks \u003d blocks.size();\n     BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n     if (nrBlocks \u003d\u003d 0) {\n       return blkLocations;\n     }\n     int idx \u003d 0;\n     for (LocatedBlock blk : blocks) {\n       assert idx \u003c nrBlocks : \"Incorrect index\";\n       DatanodeInfo[] locations \u003d blk.getLocations();\n       String[] hosts \u003d new String[locations.length];\n       String[] xferAddrs \u003d new String[locations.length];\n       String[] racks \u003d new String[locations.length];\n       for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n         hosts[hCnt] \u003d locations[hCnt].getHostName();\n         xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n         NodeBase node \u003d new NodeBase(xferAddrs[hCnt],\n                                      locations[hCnt].getNetworkLocation());\n         racks[hCnt] \u003d node.toString();\n       }\n       DatanodeInfo[] cachedLocations \u003d blk.getCachedLocations();\n       String[] cachedHosts \u003d new String[cachedLocations.length];\n       for (int i\u003d0; i\u003ccachedLocations.length; i++) {\n         cachedHosts[i] \u003d cachedLocations[i].getHostName();\n       }\n       blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, cachedHosts,\n                                             racks,\n+                                            blk.getStorageIDs(),\n+                                            blk.getStorageTypes(),\n                                             blk.getStartOffset(),\n                                             blk.getBlockSize(),\n                                             blk.isCorrupt());\n       idx++;\n     }\n     return blkLocations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static BlockLocation[] locatedBlocks2Locations(\n      List\u003cLocatedBlock\u003e blocks) {\n    if (blocks \u003d\u003d null) {\n      return new BlockLocation[0];\n    }\n    int nrBlocks \u003d blocks.size();\n    BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n    if (nrBlocks \u003d\u003d 0) {\n      return blkLocations;\n    }\n    int idx \u003d 0;\n    for (LocatedBlock blk : blocks) {\n      assert idx \u003c nrBlocks : \"Incorrect index\";\n      DatanodeInfo[] locations \u003d blk.getLocations();\n      String[] hosts \u003d new String[locations.length];\n      String[] xferAddrs \u003d new String[locations.length];\n      String[] racks \u003d new String[locations.length];\n      for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n        hosts[hCnt] \u003d locations[hCnt].getHostName();\n        xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n        NodeBase node \u003d new NodeBase(xferAddrs[hCnt],\n                                     locations[hCnt].getNetworkLocation());\n        racks[hCnt] \u003d node.toString();\n      }\n      DatanodeInfo[] cachedLocations \u003d blk.getCachedLocations();\n      String[] cachedHosts \u003d new String[cachedLocations.length];\n      for (int i\u003d0; i\u003ccachedLocations.length; i++) {\n        cachedHosts[i] \u003d cachedLocations[i].getHostName();\n      }\n      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, cachedHosts,\n                                            racks,\n                                            blk.getStorageIDs(),\n                                            blk.getStorageTypes(),\n                                            blk.getStartOffset(),\n                                            blk.getBlockSize(),\n                                            blk.isCorrupt());\n      idx++;\n    }\n    return blkLocations;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n-  public static BlockLocation[] locatedBlocks2Locations(List\u003cLocatedBlock\u003e blocks) {\n+  public static BlockLocation[] locatedBlocks2Locations(\n+      List\u003cLocatedBlock\u003e blocks) {\n     if (blocks \u003d\u003d null) {\n       return new BlockLocation[0];\n     }\n     int nrBlocks \u003d blocks.size();\n     BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n     if (nrBlocks \u003d\u003d 0) {\n       return blkLocations;\n     }\n     int idx \u003d 0;\n     for (LocatedBlock blk : blocks) {\n       assert idx \u003c nrBlocks : \"Incorrect index\";\n       DatanodeInfo[] locations \u003d blk.getLocations();\n       String[] hosts \u003d new String[locations.length];\n       String[] xferAddrs \u003d new String[locations.length];\n       String[] racks \u003d new String[locations.length];\n       for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n         hosts[hCnt] \u003d locations[hCnt].getHostName();\n         xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n         NodeBase node \u003d new NodeBase(xferAddrs[hCnt],\n                                      locations[hCnt].getNetworkLocation());\n         racks[hCnt] \u003d node.toString();\n       }\n       DatanodeInfo[] cachedLocations \u003d blk.getCachedLocations();\n       String[] cachedHosts \u003d new String[cachedLocations.length];\n       for (int i\u003d0; i\u003ccachedLocations.length; i++) {\n         cachedHosts[i] \u003d cachedLocations[i].getHostName();\n       }\n       blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, cachedHosts,\n                                             racks,\n                                             blk.getStartOffset(),\n                                             blk.getBlockSize(),\n                                             blk.isCorrupt());\n       idx++;\n     }\n     return blkLocations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static BlockLocation[] locatedBlocks2Locations(\n      List\u003cLocatedBlock\u003e blocks) {\n    if (blocks \u003d\u003d null) {\n      return new BlockLocation[0];\n    }\n    int nrBlocks \u003d blocks.size();\n    BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n    if (nrBlocks \u003d\u003d 0) {\n      return blkLocations;\n    }\n    int idx \u003d 0;\n    for (LocatedBlock blk : blocks) {\n      assert idx \u003c nrBlocks : \"Incorrect index\";\n      DatanodeInfo[] locations \u003d blk.getLocations();\n      String[] hosts \u003d new String[locations.length];\n      String[] xferAddrs \u003d new String[locations.length];\n      String[] racks \u003d new String[locations.length];\n      for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n        hosts[hCnt] \u003d locations[hCnt].getHostName();\n        xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n        NodeBase node \u003d new NodeBase(xferAddrs[hCnt],\n                                     locations[hCnt].getNetworkLocation());\n        racks[hCnt] \u003d node.toString();\n      }\n      DatanodeInfo[] cachedLocations \u003d blk.getCachedLocations();\n      String[] cachedHosts \u003d new String[cachedLocations.length];\n      for (int i\u003d0; i\u003ccachedLocations.length; i++) {\n        cachedHosts[i] \u003d cachedLocations[i].getHostName();\n      }\n      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, cachedHosts,\n                                            racks,\n                                            blk.getStartOffset(),\n                                            blk.getBlockSize(),\n                                            blk.isCorrupt());\n      idx++;\n    }\n    return blkLocations;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
        "oldMethodName": "locatedBlocks2Locations",
        "newMethodName": "locatedBlocks2Locations"
      }
    },
    "9d06631719466679135840d50e55ad62332b3866": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5450. better API for getting the cached blocks locations. Contributed by Andrew Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541338 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/13 4:31 PM",
      "commitName": "9d06631719466679135840d50e55ad62332b3866",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "18/09/13 1:47 PM",
      "commitNameOld": "7a2443e9f8b95816c7df61530cda29e8b040b12e",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 55.16,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,37 @@\n   public static BlockLocation[] locatedBlocks2Locations(List\u003cLocatedBlock\u003e blocks) {\n     if (blocks \u003d\u003d null) {\n       return new BlockLocation[0];\n     }\n     int nrBlocks \u003d blocks.size();\n     BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n     if (nrBlocks \u003d\u003d 0) {\n       return blkLocations;\n     }\n     int idx \u003d 0;\n     for (LocatedBlock blk : blocks) {\n       assert idx \u003c nrBlocks : \"Incorrect index\";\n       DatanodeInfo[] locations \u003d blk.getLocations();\n       String[] hosts \u003d new String[locations.length];\n       String[] xferAddrs \u003d new String[locations.length];\n       String[] racks \u003d new String[locations.length];\n       for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n         hosts[hCnt] \u003d locations[hCnt].getHostName();\n         xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n         NodeBase node \u003d new NodeBase(xferAddrs[hCnt], \n                                      locations[hCnt].getNetworkLocation());\n         racks[hCnt] \u003d node.toString();\n       }\n-      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, racks,\n+      DatanodeInfo[] cachedLocations \u003d blk.getCachedLocations();\n+      String[] cachedHosts \u003d new String[cachedLocations.length];\n+      for (int i\u003d0; i\u003ccachedLocations.length; i++) {\n+        cachedHosts[i] \u003d cachedLocations[i].getHostName();\n+      }\n+      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, cachedHosts,\n+                                            racks,\n                                             blk.getStartOffset(),\n                                             blk.getBlockSize(),\n                                             blk.isCorrupt());\n       idx++;\n     }\n     return blkLocations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static BlockLocation[] locatedBlocks2Locations(List\u003cLocatedBlock\u003e blocks) {\n    if (blocks \u003d\u003d null) {\n      return new BlockLocation[0];\n    }\n    int nrBlocks \u003d blocks.size();\n    BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n    if (nrBlocks \u003d\u003d 0) {\n      return blkLocations;\n    }\n    int idx \u003d 0;\n    for (LocatedBlock blk : blocks) {\n      assert idx \u003c nrBlocks : \"Incorrect index\";\n      DatanodeInfo[] locations \u003d blk.getLocations();\n      String[] hosts \u003d new String[locations.length];\n      String[] xferAddrs \u003d new String[locations.length];\n      String[] racks \u003d new String[locations.length];\n      for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n        hosts[hCnt] \u003d locations[hCnt].getHostName();\n        xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n        NodeBase node \u003d new NodeBase(xferAddrs[hCnt], \n                                     locations[hCnt].getNetworkLocation());\n        racks[hCnt] \u003d node.toString();\n      }\n      DatanodeInfo[] cachedLocations \u003d blk.getCachedLocations();\n      String[] cachedHosts \u003d new String[cachedLocations.length];\n      for (int i\u003d0; i\u003ccachedLocations.length; i++) {\n        cachedHosts[i] \u003d cachedLocations[i].getHostName();\n      }\n      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, cachedHosts,\n                                            racks,\n                                            blk.getStartOffset(),\n                                            blk.getBlockSize(),\n                                            blk.isCorrupt());\n      idx++;\n    }\n    return blkLocations;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "fccace6116713c85cd59a808c565ea39fb5d6944": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3672. Expose disk-location information for blocks to enable better scheduling. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374355 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/12 9:52 AM",
      "commitName": "fccace6116713c85cd59a808c565ea39fb5d6944",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,31 @@\n+  public static BlockLocation[] locatedBlocks2Locations(List\u003cLocatedBlock\u003e blocks) {\n+    if (blocks \u003d\u003d null) {\n+      return new BlockLocation[0];\n+    }\n+    int nrBlocks \u003d blocks.size();\n+    BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n+    if (nrBlocks \u003d\u003d 0) {\n+      return blkLocations;\n+    }\n+    int idx \u003d 0;\n+    for (LocatedBlock blk : blocks) {\n+      assert idx \u003c nrBlocks : \"Incorrect index\";\n+      DatanodeInfo[] locations \u003d blk.getLocations();\n+      String[] hosts \u003d new String[locations.length];\n+      String[] xferAddrs \u003d new String[locations.length];\n+      String[] racks \u003d new String[locations.length];\n+      for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n+        hosts[hCnt] \u003d locations[hCnt].getHostName();\n+        xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n+        NodeBase node \u003d new NodeBase(xferAddrs[hCnt], \n+                                     locations[hCnt].getNetworkLocation());\n+        racks[hCnt] \u003d node.toString();\n+      }\n+      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, racks,\n+                                            blk.getStartOffset(),\n+                                            blk.getBlockSize(),\n+                                            blk.isCorrupt());\n+      idx++;\n+    }\n+    return blkLocations;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static BlockLocation[] locatedBlocks2Locations(List\u003cLocatedBlock\u003e blocks) {\n    if (blocks \u003d\u003d null) {\n      return new BlockLocation[0];\n    }\n    int nrBlocks \u003d blocks.size();\n    BlockLocation[] blkLocations \u003d new BlockLocation[nrBlocks];\n    if (nrBlocks \u003d\u003d 0) {\n      return blkLocations;\n    }\n    int idx \u003d 0;\n    for (LocatedBlock blk : blocks) {\n      assert idx \u003c nrBlocks : \"Incorrect index\";\n      DatanodeInfo[] locations \u003d blk.getLocations();\n      String[] hosts \u003d new String[locations.length];\n      String[] xferAddrs \u003d new String[locations.length];\n      String[] racks \u003d new String[locations.length];\n      for (int hCnt \u003d 0; hCnt \u003c locations.length; hCnt++) {\n        hosts[hCnt] \u003d locations[hCnt].getHostName();\n        xferAddrs[hCnt] \u003d locations[hCnt].getXferAddr();\n        NodeBase node \u003d new NodeBase(xferAddrs[hCnt], \n                                     locations[hCnt].getNetworkLocation());\n        racks[hCnt] \u003d node.toString();\n      }\n      blkLocations[idx] \u003d new BlockLocation(xferAddrs, hosts, racks,\n                                            blk.getStartOffset(),\n                                            blk.getBlockSize(),\n                                            blk.isCorrupt());\n      idx++;\n    }\n    return blkLocations;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}