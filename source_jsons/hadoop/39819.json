{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MutableCSConfigurationProvider.java",
  "functionName": "init",
  "functionId": "init___config-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
  "functionStartLine": 72,
  "functionEndLine": 95,
  "numCommitsSeen": 23,
  "timeTaken": 5316,
  "changeHistory": [
    "3990ffa0834e6b24314a565a92e92d6e8fa37a1e",
    "1606dad133de0dbee59175509a22994ec570ea41",
    "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
    "d6622daaa3c95a5040d06f91dc0c793bafa70f95",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "4c8b208adb8c7639628676387e275856cf0842c9",
    "74ba6ffa0b601badc68366685dcf993a0844520a",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
    "ef686635c1aa0cd4bd52ca212a95769f2532aa1a"
  ],
  "changeHistoryShort": {
    "3990ffa0834e6b24314a565a92e92d6e8fa37a1e": "Ybodychange",
    "1606dad133de0dbee59175509a22994ec570ea41": "Ybodychange",
    "09c5dfe937f0570cd9494b34d210df2d5f0737a7": "Ybodychange",
    "d6622daaa3c95a5040d06f91dc0c793bafa70f95": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ybodychange",
    "4c8b208adb8c7639628676387e275856cf0842c9": "Ybodychange",
    "74ba6ffa0b601badc68366685dcf993a0844520a": "Ybodychange",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": "Ybodychange",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": "Ybodychange",
    "ef686635c1aa0cd4bd52ca212a95769f2532aa1a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3990ffa0834e6b24314a565a92e92d6e8fa37a1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9909. Offline format of YarnConfigurationStore. Contributed by Prabhu Joseph.\n",
      "commitDate": "16/10/19 6:13 PM",
      "commitName": "3990ffa0834e6b24314a565a92e92d6e8fa37a1e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "16/10/19 5:44 AM",
      "commitNameOld": "090f73a9aaeb4c03032a78c0a837478b527c27e0",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,24 @@\n   public void init(Configuration config) throws IOException {\n-    String store \u003d config.get(\n-        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n-        YarnConfiguration.MEMORY_CONFIGURATION_STORE);\n-    switch (store) {\n-    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n-      this.confStore \u003d new InMemoryConfigurationStore();\n-      break;\n-    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n-      this.confStore \u003d new LeveldbConfigurationStore();\n-      break;\n-    case YarnConfiguration.ZK_CONFIGURATION_STORE:\n-      this.confStore \u003d new ZKConfigurationStore();\n-      break;\n-    case YarnConfiguration.FS_CONFIGURATION_STORE:\n-      this.confStore \u003d new FSSchedulerConfigurationStore();\n-      break;\n-    default:\n-      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n-      break;\n-    }\n+    this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     try {\n       confStore.initialize(config, schedConf, rmContext);\n       confStore.checkVersion();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n     // After initializing confStore, the store may already have an existing\n     // configuration. Use this one.\n     schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    try {\n      confStore.initialize(config, schedConf, rmContext);\n      confStore.checkVersion();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "1606dad133de0dbee59175509a22994ec570ea41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7497. Add file system based scheduler configuration store. Contributed by Jiandan Yang.\n",
      "commitDate": "30/03/18 6:41 AM",
      "commitName": "1606dad133de0dbee59175509a22994ec570ea41",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 171.81,
      "commitsBetweenForRepo": 1277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.MEMORY_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n       this.confStore \u003d new LeveldbConfigurationStore();\n       break;\n     case YarnConfiguration.ZK_CONFIGURATION_STORE:\n       this.confStore \u003d new ZKConfigurationStore();\n       break;\n+    case YarnConfiguration.FS_CONFIGURATION_STORE:\n+      this.confStore \u003d new FSSchedulerConfigurationStore();\n+      break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     try {\n       confStore.initialize(config, schedConf, rmContext);\n       confStore.checkVersion();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n     // After initializing confStore, the store may already have an existing\n     // configuration. Use this one.\n     schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.MEMORY_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n      this.confStore \u003d new LeveldbConfigurationStore();\n      break;\n    case YarnConfiguration.ZK_CONFIGURATION_STORE:\n      this.confStore \u003d new ZKConfigurationStore();\n      break;\n    case YarnConfiguration.FS_CONFIGURATION_STORE:\n      this.confStore \u003d new FSSchedulerConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    try {\n      confStore.initialize(config, schedConf, rmContext);\n      confStore.checkVersion();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "09c5dfe937f0570cd9494b34d210df2d5f0737a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7251. Misc changes to YARN-5734\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "d6622daaa3c95a5040d06f91dc0c793bafa70f95",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n-        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n+        YarnConfiguration.MEMORY_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n       this.confStore \u003d new LeveldbConfigurationStore();\n       break;\n     case YarnConfiguration.ZK_CONFIGURATION_STORE:\n       this.confStore \u003d new ZKConfigurationStore();\n       break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     try {\n       confStore.initialize(config, schedConf, rmContext);\n       confStore.checkVersion();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n     // After initializing confStore, the store may already have an existing\n     // configuration. Use this one.\n     schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.MEMORY_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n      this.confStore \u003d new LeveldbConfigurationStore();\n      break;\n    case YarnConfiguration.ZK_CONFIGURATION_STORE:\n      this.confStore \u003d new ZKConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    try {\n      confStore.initialize(config, schedConf, rmContext);\n      confStore.checkVersion();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "d6622daaa3c95a5040d06f91dc0c793bafa70f95": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7046. Add closing logic to configuration store\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "d6622daaa3c95a5040d06f91dc0c793bafa70f95",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n       this.confStore \u003d new LeveldbConfigurationStore();\n       break;\n     case YarnConfiguration.ZK_CONFIGURATION_STORE:\n       this.confStore \u003d new ZKConfigurationStore();\n       break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     try {\n       confStore.initialize(config, schedConf, rmContext);\n+      confStore.checkVersion();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n     // After initializing confStore, the store may already have an existing\n     // configuration. Use this one.\n     schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n      this.confStore \u003d new LeveldbConfigurationStore();\n      break;\n    case YarnConfiguration.ZK_CONFIGURATION_STORE:\n      this.confStore \u003d new ZKConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    try {\n      confStore.initialize(config, schedConf, rmContext);\n      confStore.checkVersion();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "4c8b208adb8c7639628676387e275856cf0842c9",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,39 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n       this.confStore \u003d new LeveldbConfigurationStore();\n       break;\n+    case YarnConfiguration.ZK_CONFIGURATION_STORE:\n+      this.confStore \u003d new ZKConfigurationStore();\n+      break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n-    confStore.initialize(config, schedConf);\n+    try {\n+      confStore.initialize(config, schedConf, rmContext);\n+    } catch (Exception e) {\n+      throw new IOException(e);\n+    }\n     // After initializing confStore, the store may already have an existing\n     // configuration. Use this one.\n     schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n      this.confStore \u003d new LeveldbConfigurationStore();\n      break;\n    case YarnConfiguration.ZK_CONFIGURATION_STORE:\n      this.confStore \u003d new ZKConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    try {\n      confStore.initialize(config, schedConf, rmContext);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "4c8b208adb8c7639628676387e275856cf0842c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6322: Disable queue refresh when configuration mutation is enabled. Contributed by Jonathan Hung\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "4c8b208adb8c7639628676387e275856cf0842c9",
      "commitAuthor": "Xuan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "74ba6ffa0b601badc68366685dcf993a0844520a",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n       this.confStore \u003d new LeveldbConfigurationStore();\n       break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     confStore.initialize(config, schedConf);\n     // After initializing confStore, the store may already have an existing\n     // configuration. Use this one.\n     schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n-    this.conf \u003d config;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n      this.confStore \u003d new LeveldbConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    confStore.initialize(config, schedConf);\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "74ba6ffa0b601badc68366685dcf993a0844520a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5947: Create LeveldbConfigurationStore class using Leveldb as backing store. Contributed by Jonathan Hung\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "74ba6ffa0b601badc68366685dcf993a0844520a",
      "commitAuthor": "Xuan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "916bdbd6bedbc75000bb74e16c1e2ee692a4912c",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,33 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n+    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n+      this.confStore \u003d new LeveldbConfigurationStore();\n+      break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     confStore.initialize(config, schedConf);\n+    // After initializing confStore, the store may already have an existing\n+    // configuration. Use this one.\n+    schedConf \u003d confStore.retrieve();\n     this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n         .getPolicy(config);\n     aclMutationPolicy.init(config, rmContext);\n     this.conf \u003d config;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:\n      this.confStore \u003d new LeveldbConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    confStore.initialize(config, schedConf);\n    // After initializing confStore, the store may already have an existing\n    // configuration. Use this one.\n    schedConf \u003d confStore.retrieve();\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n    this.conf \u003d config;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n     this.schedConf \u003d new Configuration(false);\n     // We need to explicitly set the key-values in schedConf, otherwise\n     // these configuration keys cannot be deleted when\n     // configuration is reloaded.\n     for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n       schedConf.set(kv.getKey(), kv.getValue());\n     }\n     confStore.initialize(config, schedConf);\n+    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n+        .getPolicy(config);\n+    aclMutationPolicy.init(config, rmContext);\n     this.conf \u003d config;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    confStore.initialize(config, schedConf);\n    this.aclMutationPolicy \u003d ConfigurationMutationACLPolicyFactory\n        .getPolicy(config);\n    aclMutationPolicy.init(config, rmContext);\n    this.conf \u003d config;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5952. Create REST API for changing YARN scheduler configurations. (Jonathan Hung via wangda)\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ef686635c1aa0cd4bd52ca212a95769f2532aa1a",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,24 @@\n   public void init(Configuration config) throws IOException {\n     String store \u003d config.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n         YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n     switch (store) {\n     case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n       this.confStore \u003d new InMemoryConfigurationStore();\n       break;\n     default:\n       this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n       break;\n     }\n     Configuration initialSchedConf \u003d new Configuration(false);\n     initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n-    this.schedConf \u003d initialSchedConf;\n-    confStore.initialize(config, initialSchedConf);\n+    this.schedConf \u003d new Configuration(false);\n+    // We need to explicitly set the key-values in schedConf, otherwise\n+    // these configuration keys cannot be deleted when\n+    // configuration is reloaded.\n+    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n+      schedConf.set(kv.getKey(), kv.getValue());\n+    }\n+    confStore.initialize(config, schedConf);\n     this.conf \u003d config;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d new Configuration(false);\n    // We need to explicitly set the key-values in schedConf, otherwise\n    // these configuration keys cannot be deleted when\n    // configuration is reloaded.\n    for (Map.Entry\u003cString, String\u003e kv : initialSchedConf) {\n      schedConf.set(kv.getKey(), kv.getValue());\n    }\n    confStore.initialize(config, schedConf);\n    this.conf \u003d config;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "ef686635c1aa0cd4bd52ca212a95769f2532aa1a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5948. Implement MutableConfigurationManager for handling storage into configuration store\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ef686635c1aa0cd4bd52ca212a95769f2532aa1a",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,18 @@\n+  public void init(Configuration config) throws IOException {\n+    String store \u003d config.get(\n+        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n+        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n+    switch (store) {\n+    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n+      this.confStore \u003d new InMemoryConfigurationStore();\n+      break;\n+    default:\n+      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n+      break;\n+    }\n+    Configuration initialSchedConf \u003d new Configuration(false);\n+    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n+    this.schedConf \u003d initialSchedConf;\n+    confStore.initialize(config, initialSchedConf);\n+    this.conf \u003d config;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) throws IOException {\n    String store \u003d config.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,\n        YarnConfiguration.DEFAULT_CONFIGURATION_STORE);\n    switch (store) {\n    case YarnConfiguration.MEMORY_CONFIGURATION_STORE:\n      this.confStore \u003d new InMemoryConfigurationStore();\n      break;\n    default:\n      this.confStore \u003d YarnConfigurationStoreFactory.getStore(config);\n      break;\n    }\n    Configuration initialSchedConf \u003d new Configuration(false);\n    initialSchedConf.addResource(YarnConfiguration.CS_CONFIGURATION_FILE);\n    this.schedConf \u003d initialSchedConf;\n    confStore.initialize(config, initialSchedConf);\n    this.conf \u003d config;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java"
    }
  }
}