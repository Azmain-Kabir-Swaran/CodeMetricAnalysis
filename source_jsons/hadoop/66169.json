{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3xLoginHelper.java",
  "functionName": "extractLoginDetails",
  "functionId": "extractLoginDetails___name-URI",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java",
  "functionStartLine": 106,
  "functionEndLine": 134,
  "numCommitsSeen": 10,
  "timeTaken": 2054,
  "changeHistory": [
    "87f63b6479330840e9d708a729355948bb91fd4d",
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "9c22a91662af24569191ce45289ef8266e8755cc",
    "4aefe119a0203c03cdc893dcb3330fd37f26f0ee"
  ],
  "changeHistoryShort": {
    "87f63b6479330840e9d708a729355948bb91fd4d": "Ymultichange(Ymodifierchange,Ybodychange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ybodychange",
    "9c22a91662af24569191ce45289ef8266e8755cc": "Ybodychange",
    "4aefe119a0203c03cdc893dcb3330fd37f26f0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "87f63b6479330840e9d708a729355948bb91fd4d": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-14833. Remove s3a user:secret authentication. Contributed by Steve Loughran\n",
      "commitDate": "11/09/18 5:18 PM",
      "commitName": "87f63b6479330840e9d708a729355948bb91fd4d",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14833. Remove s3a user:secret authentication. Contributed by Steve Loughran\n",
          "commitDate": "11/09/18 5:18 PM",
          "commitName": "87f63b6479330840e9d708a729355948bb91fd4d",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "27/06/18 10:37 PM",
          "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 75.78,
          "commitsBetweenForRepo": 542,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,29 @@\n-  public static Login extractLoginDetails(URI name) {\n+  static Login extractLoginDetails(URI name) {\n     if (name \u003d\u003d null) {\n       return Login.EMPTY;\n     }\n \n-    try {\n-      String authority \u003d name.getAuthority();\n-      if (authority \u003d\u003d null) {\n-        return Login.EMPTY;\n-      }\n-      int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n-      if (loginIndex \u003c 0) {\n-        // no login\n-        return Login.EMPTY;\n-      }\n-      String login \u003d authority.substring(0, loginIndex);\n-      int loginSplit \u003d login.indexOf(\u0027:\u0027);\n-      if (loginSplit \u003e 0) {\n-        String user \u003d login.substring(0, loginSplit);\n-        String encodedPassword \u003d login.substring(loginSplit + 1);\n-        if (encodedPassword.contains(PLUS_UNENCODED)) {\n-          LOG.warn(PLUS_WARNING);\n-          encodedPassword \u003d encodedPassword.replaceAll(\"\\\\\" + PLUS_UNENCODED,\n-              PLUS_ENCODED);\n-        }\n-        String password \u003d URLDecoder.decode(encodedPassword,\n-            \"UTF-8\");\n-        return new Login(user, password);\n-      } else if (loginSplit \u003d\u003d 0) {\n-        // there is no user, just a password. In this case, there\u0027s no login\n-        return Login.EMPTY;\n-      } else {\n-        return new Login(login, \"\");\n-      }\n-    } catch (UnsupportedEncodingException e) {\n-      // this should never happen; translate it if it does.\n-      throw new RuntimeException(e);\n+    String authority \u003d name.getAuthority();\n+    if (authority \u003d\u003d null) {\n+      return Login.EMPTY;\n+    }\n+    int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n+    if (loginIndex \u003c 0) {\n+      // no login\n+      return Login.EMPTY;\n+    }\n+    String login \u003d authority.substring(0, loginIndex);\n+    int loginSplit \u003d login.indexOf(\u0027:\u0027);\n+    if (loginSplit \u003e 0) {\n+      String user \u003d login.substring(0, loginSplit);\n+      String encodedPassword \u003d login.substring(loginSplit + 1);\n+      return new Login(user, encodedPassword.isEmpty()? \"\": \"password removed\");\n+    } else if (loginSplit \u003d\u003d 0) {\n+      // there is no user, just a password. In this case, there\u0027s no login\n+      return Login.EMPTY;\n+    } else {\n+      // loginSplit \u003c 0: there is no \":\".\n+      // return a login with a null password\n+      return new Login(login, \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Login extractLoginDetails(URI name) {\n    if (name \u003d\u003d null) {\n      return Login.EMPTY;\n    }\n\n    String authority \u003d name.getAuthority();\n    if (authority \u003d\u003d null) {\n      return Login.EMPTY;\n    }\n    int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n    if (loginIndex \u003c 0) {\n      // no login\n      return Login.EMPTY;\n    }\n    String login \u003d authority.substring(0, loginIndex);\n    int loginSplit \u003d login.indexOf(\u0027:\u0027);\n    if (loginSplit \u003e 0) {\n      String user \u003d login.substring(0, loginSplit);\n      String encodedPassword \u003d login.substring(loginSplit + 1);\n      return new Login(user, encodedPassword.isEmpty()? \"\": \"password removed\");\n    } else if (loginSplit \u003d\u003d 0) {\n      // there is no user, just a password. In this case, there\u0027s no login\n      return Login.EMPTY;\n    } else {\n      // loginSplit \u003c 0: there is no \":\".\n      // return a login with a null password\n      return new Login(login, \"\");\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14833. Remove s3a user:secret authentication. Contributed by Steve Loughran\n",
          "commitDate": "11/09/18 5:18 PM",
          "commitName": "87f63b6479330840e9d708a729355948bb91fd4d",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "27/06/18 10:37 PM",
          "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 75.78,
          "commitsBetweenForRepo": 542,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,29 @@\n-  public static Login extractLoginDetails(URI name) {\n+  static Login extractLoginDetails(URI name) {\n     if (name \u003d\u003d null) {\n       return Login.EMPTY;\n     }\n \n-    try {\n-      String authority \u003d name.getAuthority();\n-      if (authority \u003d\u003d null) {\n-        return Login.EMPTY;\n-      }\n-      int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n-      if (loginIndex \u003c 0) {\n-        // no login\n-        return Login.EMPTY;\n-      }\n-      String login \u003d authority.substring(0, loginIndex);\n-      int loginSplit \u003d login.indexOf(\u0027:\u0027);\n-      if (loginSplit \u003e 0) {\n-        String user \u003d login.substring(0, loginSplit);\n-        String encodedPassword \u003d login.substring(loginSplit + 1);\n-        if (encodedPassword.contains(PLUS_UNENCODED)) {\n-          LOG.warn(PLUS_WARNING);\n-          encodedPassword \u003d encodedPassword.replaceAll(\"\\\\\" + PLUS_UNENCODED,\n-              PLUS_ENCODED);\n-        }\n-        String password \u003d URLDecoder.decode(encodedPassword,\n-            \"UTF-8\");\n-        return new Login(user, password);\n-      } else if (loginSplit \u003d\u003d 0) {\n-        // there is no user, just a password. In this case, there\u0027s no login\n-        return Login.EMPTY;\n-      } else {\n-        return new Login(login, \"\");\n-      }\n-    } catch (UnsupportedEncodingException e) {\n-      // this should never happen; translate it if it does.\n-      throw new RuntimeException(e);\n+    String authority \u003d name.getAuthority();\n+    if (authority \u003d\u003d null) {\n+      return Login.EMPTY;\n+    }\n+    int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n+    if (loginIndex \u003c 0) {\n+      // no login\n+      return Login.EMPTY;\n+    }\n+    String login \u003d authority.substring(0, loginIndex);\n+    int loginSplit \u003d login.indexOf(\u0027:\u0027);\n+    if (loginSplit \u003e 0) {\n+      String user \u003d login.substring(0, loginSplit);\n+      String encodedPassword \u003d login.substring(loginSplit + 1);\n+      return new Login(user, encodedPassword.isEmpty()? \"\": \"password removed\");\n+    } else if (loginSplit \u003d\u003d 0) {\n+      // there is no user, just a password. In this case, there\u0027s no login\n+      return Login.EMPTY;\n+    } else {\n+      // loginSplit \u003c 0: there is no \":\".\n+      // return a login with a null password\n+      return new Login(login, \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Login extractLoginDetails(URI name) {\n    if (name \u003d\u003d null) {\n      return Login.EMPTY;\n    }\n\n    String authority \u003d name.getAuthority();\n    if (authority \u003d\u003d null) {\n      return Login.EMPTY;\n    }\n    int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n    if (loginIndex \u003c 0) {\n      // no login\n      return Login.EMPTY;\n    }\n    String login \u003d authority.substring(0, loginIndex);\n    int loginSplit \u003d login.indexOf(\u0027:\u0027);\n    if (loginSplit \u003e 0) {\n      String user \u003d login.substring(0, loginSplit);\n      String encodedPassword \u003d login.substring(loginSplit + 1);\n      return new Login(user, encodedPassword.isEmpty()? \"\": \"password removed\");\n    } else if (loginSplit \u003d\u003d 0) {\n      // there is no user, just a password. In this case, there\u0027s no login\n      return Login.EMPTY;\n    } else {\n      // loginSplit \u003c 0: there is no \":\".\n      // return a login with a null password\n      return new Login(login, \"\");\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java",
          "extendedDetails": {}
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "24/02/17 2:41 AM",
      "commitNameOld": "9c22a91662af24569191ce45289ef8266e8755cc",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 189.11,
      "commitsBetweenForRepo": 1159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,39 @@\n   public static Login extractLoginDetails(URI name) {\n+    if (name \u003d\u003d null) {\n+      return Login.EMPTY;\n+    }\n+\n     try {\n       String authority \u003d name.getAuthority();\n       if (authority \u003d\u003d null) {\n         return Login.EMPTY;\n       }\n       int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n       if (loginIndex \u003c 0) {\n         // no login\n         return Login.EMPTY;\n       }\n       String login \u003d authority.substring(0, loginIndex);\n       int loginSplit \u003d login.indexOf(\u0027:\u0027);\n       if (loginSplit \u003e 0) {\n         String user \u003d login.substring(0, loginSplit);\n         String encodedPassword \u003d login.substring(loginSplit + 1);\n         if (encodedPassword.contains(PLUS_UNENCODED)) {\n           LOG.warn(PLUS_WARNING);\n           encodedPassword \u003d encodedPassword.replaceAll(\"\\\\\" + PLUS_UNENCODED,\n               PLUS_ENCODED);\n         }\n         String password \u003d URLDecoder.decode(encodedPassword,\n             \"UTF-8\");\n         return new Login(user, password);\n       } else if (loginSplit \u003d\u003d 0) {\n         // there is no user, just a password. In this case, there\u0027s no login\n         return Login.EMPTY;\n       } else {\n         return new Login(login, \"\");\n       }\n     } catch (UnsupportedEncodingException e) {\n       // this should never happen; translate it if it does.\n       throw new RuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Login extractLoginDetails(URI name) {\n    if (name \u003d\u003d null) {\n      return Login.EMPTY;\n    }\n\n    try {\n      String authority \u003d name.getAuthority();\n      if (authority \u003d\u003d null) {\n        return Login.EMPTY;\n      }\n      int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n      if (loginIndex \u003c 0) {\n        // no login\n        return Login.EMPTY;\n      }\n      String login \u003d authority.substring(0, loginIndex);\n      int loginSplit \u003d login.indexOf(\u0027:\u0027);\n      if (loginSplit \u003e 0) {\n        String user \u003d login.substring(0, loginSplit);\n        String encodedPassword \u003d login.substring(loginSplit + 1);\n        if (encodedPassword.contains(PLUS_UNENCODED)) {\n          LOG.warn(PLUS_WARNING);\n          encodedPassword \u003d encodedPassword.replaceAll(\"\\\\\" + PLUS_UNENCODED,\n              PLUS_ENCODED);\n        }\n        String password \u003d URLDecoder.decode(encodedPassword,\n            \"UTF-8\");\n        return new Login(user, password);\n      } else if (loginSplit \u003d\u003d 0) {\n        // there is no user, just a password. In this case, there\u0027s no login\n        return Login.EMPTY;\n      } else {\n        return new Login(login, \"\");\n      }\n    } catch (UnsupportedEncodingException e) {\n      // this should never happen; translate it if it does.\n      throw new RuntimeException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java",
      "extendedDetails": {}
    },
    "9c22a91662af24569191ce45289ef8266e8755cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14114 S3A can no longer handle unencoded + in URIs. Contributed by Sean Mackrory.\n\n(cherry picked from commit ff87ca84418a710c6dc884fe8c70947fcc6489d5)\n",
      "commitDate": "24/02/17 2:41 AM",
      "commitName": "9c22a91662af24569191ce45289ef8266e8755cc",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "06/09/16 9:36 AM",
      "commitNameOld": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 170.75,
      "commitsBetweenForRepo": 1074,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n   public static Login extractLoginDetails(URI name) {\n     try {\n       String authority \u003d name.getAuthority();\n       if (authority \u003d\u003d null) {\n         return Login.EMPTY;\n       }\n       int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n       if (loginIndex \u003c 0) {\n         // no login\n         return Login.EMPTY;\n       }\n       String login \u003d authority.substring(0, loginIndex);\n       int loginSplit \u003d login.indexOf(\u0027:\u0027);\n       if (loginSplit \u003e 0) {\n         String user \u003d login.substring(0, loginSplit);\n-        String password \u003d URLDecoder.decode(login.substring(loginSplit + 1),\n+        String encodedPassword \u003d login.substring(loginSplit + 1);\n+        if (encodedPassword.contains(PLUS_UNENCODED)) {\n+          LOG.warn(PLUS_WARNING);\n+          encodedPassword \u003d encodedPassword.replaceAll(\"\\\\\" + PLUS_UNENCODED,\n+              PLUS_ENCODED);\n+        }\n+        String password \u003d URLDecoder.decode(encodedPassword,\n             \"UTF-8\");\n         return new Login(user, password);\n       } else if (loginSplit \u003d\u003d 0) {\n         // there is no user, just a password. In this case, there\u0027s no login\n         return Login.EMPTY;\n       } else {\n         return new Login(login, \"\");\n       }\n     } catch (UnsupportedEncodingException e) {\n       // this should never happen; translate it if it does.\n       throw new RuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Login extractLoginDetails(URI name) {\n    try {\n      String authority \u003d name.getAuthority();\n      if (authority \u003d\u003d null) {\n        return Login.EMPTY;\n      }\n      int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n      if (loginIndex \u003c 0) {\n        // no login\n        return Login.EMPTY;\n      }\n      String login \u003d authority.substring(0, loginIndex);\n      int loginSplit \u003d login.indexOf(\u0027:\u0027);\n      if (loginSplit \u003e 0) {\n        String user \u003d login.substring(0, loginSplit);\n        String encodedPassword \u003d login.substring(loginSplit + 1);\n        if (encodedPassword.contains(PLUS_UNENCODED)) {\n          LOG.warn(PLUS_WARNING);\n          encodedPassword \u003d encodedPassword.replaceAll(\"\\\\\" + PLUS_UNENCODED,\n              PLUS_ENCODED);\n        }\n        String password \u003d URLDecoder.decode(encodedPassword,\n            \"UTF-8\");\n        return new Login(user, password);\n      } else if (loginSplit \u003d\u003d 0) {\n        // there is no user, just a password. In this case, there\u0027s no login\n        return Login.EMPTY;\n      } else {\n        return new Login(login, \"\");\n      }\n    } catch (UnsupportedEncodingException e) {\n      // this should never happen; translate it if it does.\n      throw new RuntimeException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java",
      "extendedDetails": {}
    },
    "4aefe119a0203c03cdc893dcb3330fd37f26f0ee": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-3733. \"s3x:\" URLs break when Secret Key contains a slash, even if encoded. Contributed by Steve Loughran.\n",
      "commitDate": "16/06/16 11:13 AM",
      "commitName": "4aefe119a0203c03cdc893dcb3330fd37f26f0ee",
      "commitAuthor": "Ravi Prakash",
      "diff": "@@ -0,0 +1,29 @@\n+  public static Login extractLoginDetails(URI name) {\n+    try {\n+      String authority \u003d name.getAuthority();\n+      if (authority \u003d\u003d null) {\n+        return Login.EMPTY;\n+      }\n+      int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n+      if (loginIndex \u003c 0) {\n+        // no login\n+        return Login.EMPTY;\n+      }\n+      String login \u003d authority.substring(0, loginIndex);\n+      int loginSplit \u003d login.indexOf(\u0027:\u0027);\n+      if (loginSplit \u003e 0) {\n+        String user \u003d login.substring(0, loginSplit);\n+        String password \u003d URLDecoder.decode(login.substring(loginSplit + 1),\n+            \"UTF-8\");\n+        return new Login(user, password);\n+      } else if (loginSplit \u003d\u003d 0) {\n+        // there is no user, just a password. In this case, there\u0027s no login\n+        return Login.EMPTY;\n+      } else {\n+        return new Login(login, \"\");\n+      }\n+    } catch (UnsupportedEncodingException e) {\n+      // this should never happen; translate it if it does.\n+      throw new RuntimeException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Login extractLoginDetails(URI name) {\n    try {\n      String authority \u003d name.getAuthority();\n      if (authority \u003d\u003d null) {\n        return Login.EMPTY;\n      }\n      int loginIndex \u003d authority.indexOf(\u0027@\u0027);\n      if (loginIndex \u003c 0) {\n        // no login\n        return Login.EMPTY;\n      }\n      String login \u003d authority.substring(0, loginIndex);\n      int loginSplit \u003d login.indexOf(\u0027:\u0027);\n      if (loginSplit \u003e 0) {\n        String user \u003d login.substring(0, loginSplit);\n        String password \u003d URLDecoder.decode(login.substring(loginSplit + 1),\n            \"UTF-8\");\n        return new Login(user, password);\n      } else if (loginSplit \u003d\u003d 0) {\n        // there is no user, just a password. In this case, there\u0027s no login\n        return Login.EMPTY;\n      } else {\n        return new Login(login, \"\");\n      }\n    } catch (UnsupportedEncodingException e) {\n      // this should never happen; translate it if it does.\n      throw new RuntimeException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java"
    }
  }
}