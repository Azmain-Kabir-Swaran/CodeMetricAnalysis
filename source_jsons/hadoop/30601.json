{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "getStartTimeLong",
  "functionId": "getStartTimeLong___entityId-String__entityType-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 1040,
  "functionEndLine": 1065,
  "numCommitsSeen": 24,
  "timeTaken": 2064,
  "changeHistory": [
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "b3ea4aebff42131642af0393748dc751cb3fc31e"
  ],
  "changeHistoryShort": {
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "b3ea4aebff42131642af0393748dc751cb3fc31e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1984. LeveldbTimelineStore does not handle db exceptions properly. Contributed by Varun Saxena\n",
      "commitDate": "24/11/14 2:36 PM",
      "commitName": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   private Long getStartTimeLong(String entityId, String entityType)\n       throws IOException {\n     EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n-    // start time is not provided, so try to look it up\n-    if (startTimeReadCache.containsKey(entity)) {\n-      // found the start time in the cache\n-      return startTimeReadCache.get(entity);\n-    } else {\n-      // try to look up the start time in the db\n-      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n-      byte[] v \u003d db.get(b);\n-      if (v \u003d\u003d null) {\n-        // did not find the start time in the db\n-        return null;\n+    try {\n+      // start time is not provided, so try to look it up\n+      if (startTimeReadCache.containsKey(entity)) {\n+        // found the start time in the cache\n+        return startTimeReadCache.get(entity);\n       } else {\n-        // found the start time in the db\n-        Long l \u003d readReverseOrderedLong(v, 0);\n-        startTimeReadCache.put(entity, l);\n-        return l;\n+        // try to look up the start time in the db\n+        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+        byte[] v \u003d db.get(b);\n+        if (v \u003d\u003d null) {\n+          // did not find the start time in the db\n+          return null;\n+        } else {\n+          // found the start time in the db\n+          Long l \u003d readReverseOrderedLong(v, 0);\n+          startTimeReadCache.put(entity, l);\n+          return l;\n+        }\n       }\n+    } catch(DBException e) {\n+      throw new IOException(e);   \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Long getStartTimeLong(String entityId, String entityType)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    try {\n      // start time is not provided, so try to look it up\n      if (startTimeReadCache.containsKey(entity)) {\n        // found the start time in the cache\n        return startTimeReadCache.get(entity);\n      } else {\n        // try to look up the start time in the db\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        byte[] v \u003d db.get(b);\n        if (v \u003d\u003d null) {\n          // did not find the start time in the db\n          return null;\n        } else {\n          // found the start time in the db\n          Long l \u003d readReverseOrderedLong(v, 0);\n          startTimeReadCache.put(entity, l);\n          return l;\n        }\n      }\n    } catch(DBException e) {\n      throw new IOException(e);   \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Long getStartTimeLong(String entityId, String entityType)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    // start time is not provided, so try to look it up\n    if (startTimeReadCache.containsKey(entity)) {\n      // found the start time in the cache\n      return startTimeReadCache.get(entity);\n    } else {\n      // try to look up the start time in the db\n      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n      byte[] v \u003d db.get(b);\n      if (v \u003d\u003d null) {\n        // did not find the start time in the db\n        return null;\n      } else {\n        // found the start time in the db\n        Long l \u003d readReverseOrderedLong(v, 0);\n        startTimeReadCache.put(entity, l);\n        return l;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
      }
    },
    "b3ea4aebff42131642af0393748dc751cb3fc31e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1717. Enabled periodically discarding old data in LeveldbTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 1:35 PM",
      "commitName": "b3ea4aebff42131642af0393748dc751cb3fc31e",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,22 @@\n+  private Long getStartTimeLong(String entityId, String entityType)\n+      throws IOException {\n+    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n+    // start time is not provided, so try to look it up\n+    if (startTimeReadCache.containsKey(entity)) {\n+      // found the start time in the cache\n+      return startTimeReadCache.get(entity);\n+    } else {\n+      // try to look up the start time in the db\n+      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+      byte[] v \u003d db.get(b);\n+      if (v \u003d\u003d null) {\n+        // did not find the start time in the db\n+        return null;\n+      } else {\n+        // found the start time in the db\n+        Long l \u003d readReverseOrderedLong(v, 0);\n+        startTimeReadCache.put(entity, l);\n+        return l;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Long getStartTimeLong(String entityId, String entityType)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    // start time is not provided, so try to look it up\n    if (startTimeReadCache.containsKey(entity)) {\n      // found the start time in the cache\n      return startTimeReadCache.get(entity);\n    } else {\n      // try to look up the start time in the db\n      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n      byte[] v \u003d db.get(b);\n      if (v \u003d\u003d null) {\n        // did not find the start time in the db\n        return null;\n      } else {\n        // found the start time in the db\n        Long l \u003d readReverseOrderedLong(v, 0);\n        startTimeReadCache.put(entity, l);\n        return l;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java"
    }
  }
}