{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegatingSSLSocketFactory.java",
  "functionName": "initializeSSLContext",
  "functionId": "initializeSSLContext___preferredChannelMode-SSLChannelMode",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java",
  "functionStartLine": 152,
  "functionEndLine": 184,
  "numCommitsSeen": 14,
  "timeTaken": 6650,
  "changeHistory": [
    "42711081e3cba5835493b5cbedc23d16dfea7667",
    "f206b736f0b370d212a399937c7a84e432f12eb5",
    "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894",
    "309501c6fa1073f3cfd7e535a4207dbfb21165f9",
    "b067f8acaa79b1230336900a5c62ba465b2adb28",
    "ddede7ae6fbbadbe08861bc85a664b73d66f77c7",
    "ef9dc6c44c686e836bb25e31ff355cff80572d23",
    "d6a4f39bd5f192e5e3377630887a6998d4d400c2"
  ],
  "changeHistoryShort": {
    "42711081e3cba5835493b5cbedc23d16dfea7667": "Ymultichange(Yexceptionschange,Ybodychange)",
    "f206b736f0b370d212a399937c7a84e432f12eb5": "Ybodychange",
    "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894": "Ymultichange(Yfilerename,Ybodychange)",
    "309501c6fa1073f3cfd7e535a4207dbfb21165f9": "Ymultichange(Yfilerename,Ybodychange)",
    "b067f8acaa79b1230336900a5c62ba465b2adb28": "Ymultichange(Yfilerename,Ybodychange)",
    "ddede7ae6fbbadbe08861bc85a664b73d66f77c7": "Ybodychange",
    "ef9dc6c44c686e836bb25e31ff355cff80572d23": "Ybodychange",
    "d6a4f39bd5f192e5e3377630887a6998d4d400c2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42711081e3cba5835493b5cbedc23d16dfea7667": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-16986. S3A to not need wildfly on the classpath. (#1948)\n\nHADOOP-16986. S3A to not need wildfly JAR on its classpath.\r\n\r\nContributed by Steve Loughran\r\n\r\nThis is a successor to HADOOP-16346, which enabled the S3A connector\r\nto load the native openssl SSL libraries for better HTTPS performance.\r\n\r\nThat patch required wildfly.jar to be on the classpath. This\r\nupdate:\r\n\r\n* Makes wildfly.jar optional except in the special case that \r\n\"fs.s3a.ssl.channel.mode\" is set to \"openssl\"\r\n\r\n* Retains the declaration of wildfly.jar as a compile-time\r\ndependency in the hadoop-aws POM. This means that unless\r\nexplicitly excluded, applications importing that published\r\nmaven artifact will, transitively, add the specified\r\nwildfly JAR into their classpath for compilation/testing/\r\ndistribution.\r\n\r\nThis is done for packaging and to offer that optional\r\nspeedup. It is not mandatory: applications importing\r\nthe hadoop-aws POM can exclude it if they choose.\r\n\r\n",
      "commitDate": "20/04/20 6:32 AM",
      "commitName": "42711081e3cba5835493b5cbedc23d16dfea7667",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-16986. S3A to not need wildfly on the classpath. (#1948)\n\nHADOOP-16986. S3A to not need wildfly JAR on its classpath.\r\n\r\nContributed by Steve Loughran\r\n\r\nThis is a successor to HADOOP-16346, which enabled the S3A connector\r\nto load the native openssl SSL libraries for better HTTPS performance.\r\n\r\nThat patch required wildfly.jar to be on the classpath. This\r\nupdate:\r\n\r\n* Makes wildfly.jar optional except in the special case that \r\n\"fs.s3a.ssl.channel.mode\" is set to \"openssl\"\r\n\r\n* Retains the declaration of wildfly.jar as a compile-time\r\ndependency in the hadoop-aws POM. This means that unless\r\nexplicitly excluded, applications importing that published\r\nmaven artifact will, transitively, add the specified\r\nwildfly JAR into their classpath for compilation/testing/\r\ndistribution.\r\n\r\nThis is done for packaging and to offer that optional\r\nspeedup. It is not mandatory: applications importing\r\nthe hadoop-aws POM can exclude it if they choose.\r\n\r\n",
          "commitDate": "20/04/20 6:32 AM",
          "commitName": "42711081e3cba5835493b5cbedc23d16dfea7667",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "21/01/20 8:37 AM",
          "commitNameOld": "f206b736f0b370d212a399937c7a84e432f12eb5",
          "commitAuthorOld": "Sahil Takiar",
          "daysBetweenCommits": 89.87,
          "commitsBetweenForRepo": 293,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,33 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n-      throws NoSuchAlgorithmException, KeyManagementException {\n+      throws NoSuchAlgorithmException, KeyManagementException, IOException {\n+    LOG.debug(\"Initializing SSL Context to channel mode {}\",\n+        preferredChannelMode);\n     switch (preferredChannelMode) {\n     case Default:\n-      if (!openSSLProviderRegistered) {\n-        OpenSSLProvider.register();\n-        openSSLProviderRegistered \u003d true;\n-      }\n       try {\n-        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n-                SSL.class.getName());\n-        logger.setLevel(Level.WARNING);\n-        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-        ctx.init(null, null, null);\n-        // Strong reference needs to be kept to logger until initialization of\n-        // SSLContext finished (see HADOOP-16174):\n-        logger.setLevel(Level.INFO);\n+        bindToOpenSSLProvider();\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-      } catch (NoSuchAlgorithmException e) {\n-        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+      } catch (LinkageError | NoSuchAlgorithmException | RuntimeException e) {\n+        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\",\n+            e);\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n       }\n       break;\n     case OpenSSL:\n-      if (!openSSLProviderRegistered) {\n-        OpenSSLProvider.register();\n-        openSSLProviderRegistered \u003d true;\n-      }\n-      java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n-                SSL.class.getName());\n-      logger.setLevel(Level.WARNING);\n-      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-      ctx.init(null, null, null);\n-      // Strong reference needs to be kept to logger until initialization of\n-      // SSLContext finished (see HADOOP-16174):\n-      logger.setLevel(Level.INFO);\n+      bindToOpenSSLProvider();\n       channelMode \u003d SSLChannelMode.OpenSSL;\n       break;\n     case Default_JSSE:\n       ctx \u003d SSLContext.getDefault();\n       channelMode \u003d SSLChannelMode.Default_JSSE;\n       break;\n     case Default_JSSE_with_GCM:\n       ctx \u003d SSLContext.getDefault();\n       channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n       break;\n     default:\n-      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n+      throw new IOException(\"Unknown channel mode: \"\n           + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException, IOException {\n    LOG.debug(\"Initializing SSL Context to channel mode {}\",\n        preferredChannelMode);\n    switch (preferredChannelMode) {\n    case Default:\n      try {\n        bindToOpenSSLProvider();\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (LinkageError | NoSuchAlgorithmException | RuntimeException e) {\n        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\",\n            e);\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      bindToOpenSSLProvider();\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    case Default_JSSE_with_GCM:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n      break;\n    default:\n      throw new IOException(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java",
          "extendedDetails": {
            "oldValue": "[NoSuchAlgorithmException, KeyManagementException]",
            "newValue": "[NoSuchAlgorithmException, KeyManagementException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16986. S3A to not need wildfly on the classpath. (#1948)\n\nHADOOP-16986. S3A to not need wildfly JAR on its classpath.\r\n\r\nContributed by Steve Loughran\r\n\r\nThis is a successor to HADOOP-16346, which enabled the S3A connector\r\nto load the native openssl SSL libraries for better HTTPS performance.\r\n\r\nThat patch required wildfly.jar to be on the classpath. This\r\nupdate:\r\n\r\n* Makes wildfly.jar optional except in the special case that \r\n\"fs.s3a.ssl.channel.mode\" is set to \"openssl\"\r\n\r\n* Retains the declaration of wildfly.jar as a compile-time\r\ndependency in the hadoop-aws POM. This means that unless\r\nexplicitly excluded, applications importing that published\r\nmaven artifact will, transitively, add the specified\r\nwildfly JAR into their classpath for compilation/testing/\r\ndistribution.\r\n\r\nThis is done for packaging and to offer that optional\r\nspeedup. It is not mandatory: applications importing\r\nthe hadoop-aws POM can exclude it if they choose.\r\n\r\n",
          "commitDate": "20/04/20 6:32 AM",
          "commitName": "42711081e3cba5835493b5cbedc23d16dfea7667",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "21/01/20 8:37 AM",
          "commitNameOld": "f206b736f0b370d212a399937c7a84e432f12eb5",
          "commitAuthorOld": "Sahil Takiar",
          "daysBetweenCommits": 89.87,
          "commitsBetweenForRepo": 293,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,33 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n-      throws NoSuchAlgorithmException, KeyManagementException {\n+      throws NoSuchAlgorithmException, KeyManagementException, IOException {\n+    LOG.debug(\"Initializing SSL Context to channel mode {}\",\n+        preferredChannelMode);\n     switch (preferredChannelMode) {\n     case Default:\n-      if (!openSSLProviderRegistered) {\n-        OpenSSLProvider.register();\n-        openSSLProviderRegistered \u003d true;\n-      }\n       try {\n-        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n-                SSL.class.getName());\n-        logger.setLevel(Level.WARNING);\n-        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-        ctx.init(null, null, null);\n-        // Strong reference needs to be kept to logger until initialization of\n-        // SSLContext finished (see HADOOP-16174):\n-        logger.setLevel(Level.INFO);\n+        bindToOpenSSLProvider();\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-      } catch (NoSuchAlgorithmException e) {\n-        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+      } catch (LinkageError | NoSuchAlgorithmException | RuntimeException e) {\n+        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\",\n+            e);\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n       }\n       break;\n     case OpenSSL:\n-      if (!openSSLProviderRegistered) {\n-        OpenSSLProvider.register();\n-        openSSLProviderRegistered \u003d true;\n-      }\n-      java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n-                SSL.class.getName());\n-      logger.setLevel(Level.WARNING);\n-      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-      ctx.init(null, null, null);\n-      // Strong reference needs to be kept to logger until initialization of\n-      // SSLContext finished (see HADOOP-16174):\n-      logger.setLevel(Level.INFO);\n+      bindToOpenSSLProvider();\n       channelMode \u003d SSLChannelMode.OpenSSL;\n       break;\n     case Default_JSSE:\n       ctx \u003d SSLContext.getDefault();\n       channelMode \u003d SSLChannelMode.Default_JSSE;\n       break;\n     case Default_JSSE_with_GCM:\n       ctx \u003d SSLContext.getDefault();\n       channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n       break;\n     default:\n-      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n+      throw new IOException(\"Unknown channel mode: \"\n           + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException, IOException {\n    LOG.debug(\"Initializing SSL Context to channel mode {}\",\n        preferredChannelMode);\n    switch (preferredChannelMode) {\n    case Default:\n      try {\n        bindToOpenSSLProvider();\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (LinkageError | NoSuchAlgorithmException | RuntimeException e) {\n        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\",\n            e);\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      bindToOpenSSLProvider();\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    case Default_JSSE_with_GCM:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n      break;\n    default:\n      throw new IOException(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "f206b736f0b370d212a399937c7a84e432f12eb5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16346. Stabilize S3A OpenSSL support.\n\nIntroduces `openssl` as an option for `fs.s3a.ssl.channel.mode`.\nThe new option is documented and marked as experimental.\n\nFor details on how to use this, consult the peformance document\nin the s3a documentation.\n\nThis patch is the successor to HADOOP-16050 \"S3A SSL connections\nshould use OpenSSL\" -which was reverted because of\nincompatibilities between the wildfly OpenSSL client and the AWS\nHTTPS servers (HADOOP-16347). With the Wildfly release moved up\nto 1.0.7.Final (HADOOP-16405) everything should now work.\n\nRelated issues:\n\n* HADOOP-15669. ABFS: Improve HTTPS Performance\n* HADOOP-16050: S3A SSL connections should use OpenSSL\n* HADOOP-16371: Option to disable GCM for SSL connections when running on Java 8\n* HADOOP-16405: Upgrade Wildfly Openssl version to 1.0.7.Final\n\nContributed by Sahil Takiar\n\nChange-Id: I80a4bc5051519f186b7383b2c1cea140be42444e\n",
      "commitDate": "21/01/20 8:37 AM",
      "commitName": "f206b736f0b370d212a399937c7a84e432f12eb5",
      "commitAuthor": "Sahil Takiar",
      "commitDateOld": "17/09/19 3:32 AM",
      "commitNameOld": "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 126.25,
      "commitsBetweenForRepo": 586,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,52 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n     case Default:\n       if (!openSSLProviderRegistered) {\n         OpenSSLProvider.register();\n         openSSLProviderRegistered \u003d true;\n       }\n       try {\n         java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                 SSL.class.getName());\n         logger.setLevel(Level.WARNING);\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n         // Strong reference needs to be kept to logger until initialization of\n         // SSLContext finished (see HADOOP-16174):\n         logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n       } catch (NoSuchAlgorithmException e) {\n         LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n       }\n       break;\n     case OpenSSL:\n       if (!openSSLProviderRegistered) {\n         OpenSSLProvider.register();\n         openSSLProviderRegistered \u003d true;\n       }\n+      java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n+                SSL.class.getName());\n+      logger.setLevel(Level.WARNING);\n       ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n       ctx.init(null, null, null);\n+      // Strong reference needs to be kept to logger until initialization of\n+      // SSLContext finished (see HADOOP-16174):\n+      logger.setLevel(Level.INFO);\n       channelMode \u003d SSLChannelMode.OpenSSL;\n       break;\n     case Default_JSSE:\n       ctx \u003d SSLContext.getDefault();\n       channelMode \u003d SSLChannelMode.Default_JSSE;\n       break;\n     case Default_JSSE_with_GCM:\n       ctx \u003d SSLContext.getDefault();\n       channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n       break;\n     default:\n       throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n           + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n    case Default:\n      if (!openSSLProviderRegistered) {\n        OpenSSLProvider.register();\n        openSSLProviderRegistered \u003d true;\n      }\n      try {\n        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                SSL.class.getName());\n        logger.setLevel(Level.WARNING);\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        // Strong reference needs to be kept to logger until initialization of\n        // SSLContext finished (see HADOOP-16174):\n        logger.setLevel(Level.INFO);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (NoSuchAlgorithmException e) {\n        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      if (!openSSLProviderRegistered) {\n        OpenSSLProvider.register();\n        openSSLProviderRegistered \u003d true;\n      }\n      java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                SSL.class.getName());\n      logger.setLevel(Level.WARNING);\n      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n      ctx.init(null, null, null);\n      // Strong reference needs to be kept to logger until initialization of\n      // SSLContext finished (see HADOOP-16174):\n      logger.setLevel(Level.INFO);\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    case Default_JSSE_with_GCM:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n      break;\n    default:\n      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java",
      "extendedDetails": {}
    },
    "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HADOOP-16371: Option to disable GCM for SSL connections when running on Java 8.\n\nContributed by Sahil Takiar.\n\nThis moves the SSLSocketFactoryEx class from hadoop-azure into hadoop-common\nas the DelegatingSSLSocketFactory and binds the S3A connector to it so that\nit can avoid using those HTTPS algorithms which are underperformant on Java 8.\n\nChange-Id: Ie9e6ac24deac1aa05e136e08899620efa7d22abd\n",
      "commitDate": "17/09/19 3:32 AM",
      "commitName": "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894",
      "commitAuthor": "Sahil Takiar",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-16371: Option to disable GCM for SSL connections when running on Java 8.\n\nContributed by Sahil Takiar.\n\nThis moves the SSLSocketFactoryEx class from hadoop-azure into hadoop-common\nas the DelegatingSSLSocketFactory and binds the S3A connector to it so that\nit can avoid using those HTTPS algorithms which are underperformant on Java 8.\n\nChange-Id: Ie9e6ac24deac1aa05e136e08899620efa7d22abd\n",
          "commitDate": "17/09/19 3:32 AM",
          "commitName": "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894",
          "commitAuthor": "Sahil Takiar",
          "commitDateOld": "17/09/19 3:28 AM",
          "commitNameOld": "3a549cea193fef0a2386f6c932a48ca2c66ab89a",
          "commitAuthorOld": "Márton Elek",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,46 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n-      case Default:\n-        try {\n-          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n-          logger.setLevel(Level.WARNING);\n-          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-          ctx.init(null, null, null);\n-          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n-          logger.setLevel(Level.INFO);\n-          channelMode \u003d SSLChannelMode.OpenSSL;\n-        } catch (NoSuchAlgorithmException e) {\n-          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n-          ctx \u003d SSLContext.getDefault();\n-          channelMode \u003d SSLChannelMode.Default_JSSE;\n-        }\n-        break;\n-      case OpenSSL:\n+    case Default:\n+      if (!openSSLProviderRegistered) {\n+        OpenSSLProvider.register();\n+        openSSLProviderRegistered \u003d true;\n+      }\n+      try {\n+        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n+                SSL.class.getName());\n+        logger.setLevel(Level.WARNING);\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n+        // Strong reference needs to be kept to logger until initialization of\n+        // SSLContext finished (see HADOOP-16174):\n+        logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-        break;\n-      case Default_JSSE:\n+      } catch (NoSuchAlgorithmException e) {\n+        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n-        break;\n-      default:\n-        throw new AssertionError(\"Unknown channel mode: \"\n-            + preferredChannelMode);\n+      }\n+      break;\n+    case OpenSSL:\n+      if (!openSSLProviderRegistered) {\n+        OpenSSLProvider.register();\n+        openSSLProviderRegistered \u003d true;\n+      }\n+      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+      ctx.init(null, null, null);\n+      channelMode \u003d SSLChannelMode.OpenSSL;\n+      break;\n+    case Default_JSSE:\n+      ctx \u003d SSLContext.getDefault();\n+      channelMode \u003d SSLChannelMode.Default_JSSE;\n+      break;\n+    case Default_JSSE_with_GCM:\n+      ctx \u003d SSLContext.getDefault();\n+      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n+      break;\n+    default:\n+      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n+          + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n    case Default:\n      if (!openSSLProviderRegistered) {\n        OpenSSLProvider.register();\n        openSSLProviderRegistered \u003d true;\n      }\n      try {\n        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                SSL.class.getName());\n        logger.setLevel(Level.WARNING);\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        // Strong reference needs to be kept to logger until initialization of\n        // SSLContext finished (see HADOOP-16174):\n        logger.setLevel(Level.INFO);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (NoSuchAlgorithmException e) {\n        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      if (!openSSLProviderRegistered) {\n        OpenSSLProvider.register();\n        openSSLProviderRegistered \u003d true;\n      }\n      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n      ctx.init(null, null, null);\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    case Default_JSSE_with_GCM:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n      break;\n    default:\n      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16371: Option to disable GCM for SSL connections when running on Java 8.\n\nContributed by Sahil Takiar.\n\nThis moves the SSLSocketFactoryEx class from hadoop-azure into hadoop-common\nas the DelegatingSSLSocketFactory and binds the S3A connector to it so that\nit can avoid using those HTTPS algorithms which are underperformant on Java 8.\n\nChange-Id: Ie9e6ac24deac1aa05e136e08899620efa7d22abd\n",
          "commitDate": "17/09/19 3:32 AM",
          "commitName": "55ce454ce4f1b1eaa9f041f3b0fb69a9fcc56894",
          "commitAuthor": "Sahil Takiar",
          "commitDateOld": "17/09/19 3:28 AM",
          "commitNameOld": "3a549cea193fef0a2386f6c932a48ca2c66ab89a",
          "commitAuthorOld": "Márton Elek",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,46 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n-      case Default:\n-        try {\n-          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n-          logger.setLevel(Level.WARNING);\n-          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-          ctx.init(null, null, null);\n-          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n-          logger.setLevel(Level.INFO);\n-          channelMode \u003d SSLChannelMode.OpenSSL;\n-        } catch (NoSuchAlgorithmException e) {\n-          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n-          ctx \u003d SSLContext.getDefault();\n-          channelMode \u003d SSLChannelMode.Default_JSSE;\n-        }\n-        break;\n-      case OpenSSL:\n+    case Default:\n+      if (!openSSLProviderRegistered) {\n+        OpenSSLProvider.register();\n+        openSSLProviderRegistered \u003d true;\n+      }\n+      try {\n+        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n+                SSL.class.getName());\n+        logger.setLevel(Level.WARNING);\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n+        // Strong reference needs to be kept to logger until initialization of\n+        // SSLContext finished (see HADOOP-16174):\n+        logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-        break;\n-      case Default_JSSE:\n+      } catch (NoSuchAlgorithmException e) {\n+        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n-        break;\n-      default:\n-        throw new AssertionError(\"Unknown channel mode: \"\n-            + preferredChannelMode);\n+      }\n+      break;\n+    case OpenSSL:\n+      if (!openSSLProviderRegistered) {\n+        OpenSSLProvider.register();\n+        openSSLProviderRegistered \u003d true;\n+      }\n+      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+      ctx.init(null, null, null);\n+      channelMode \u003d SSLChannelMode.OpenSSL;\n+      break;\n+    case Default_JSSE:\n+      ctx \u003d SSLContext.getDefault();\n+      channelMode \u003d SSLChannelMode.Default_JSSE;\n+      break;\n+    case Default_JSSE_with_GCM:\n+      ctx \u003d SSLContext.getDefault();\n+      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n+      break;\n+    default:\n+      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n+          + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n    case Default:\n      if (!openSSLProviderRegistered) {\n        OpenSSLProvider.register();\n        openSSLProviderRegistered \u003d true;\n      }\n      try {\n        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                SSL.class.getName());\n        logger.setLevel(Level.WARNING);\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        // Strong reference needs to be kept to logger until initialization of\n        // SSLContext finished (see HADOOP-16174):\n        logger.setLevel(Level.INFO);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (NoSuchAlgorithmException e) {\n        LOG.debug(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      if (!openSSLProviderRegistered) {\n        OpenSSLProvider.register();\n        openSSLProviderRegistered \u003d true;\n      }\n      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n      ctx.init(null, null, null);\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    case Default_JSSE_with_GCM:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE_with_GCM;\n      break;\n    default:\n      throw new NoSuchAlgorithmException(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/DelegatingSSLSocketFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "309501c6fa1073f3cfd7e535a4207dbfb21165f9": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-16050: s3a SSL connections should use OpenSSL\"\n\nThis reverts commit b067f8acaa79b1230336900a5c62ba465b2adb28.\n\nChange-Id: I584b050a56c0e6f70b11fa3f7db00d5ac46e7dd8\n",
      "commitDate": "05/06/19 5:54 AM",
      "commitName": "309501c6fa1073f3cfd7e535a4207dbfb21165f9",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert \"HADOOP-16050: s3a SSL connections should use OpenSSL\"\n\nThis reverts commit b067f8acaa79b1230336900a5c62ba465b2adb28.\n\nChange-Id: I584b050a56c0e6f70b11fa3f7db00d5ac46e7dd8\n",
          "commitDate": "05/06/19 5:54 AM",
          "commitName": "309501c6fa1073f3cfd7e535a4207dbfb21165f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/06/19 5:54 AM",
          "commitNameOld": "7724d8031b3b8cf499c9777c837b5000db12ecee",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,32 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n-    case Default:\n-      try {\n-        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n-                SSL.class.getName());\n-        logger.setLevel(Level.WARNING);\n+      case Default:\n+        try {\n+          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n+          logger.setLevel(Level.WARNING);\n+          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+          ctx.init(null, null, null);\n+          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n+          logger.setLevel(Level.INFO);\n+          channelMode \u003d SSLChannelMode.OpenSSL;\n+        } catch (NoSuchAlgorithmException e) {\n+          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+          ctx \u003d SSLContext.getDefault();\n+          channelMode \u003d SSLChannelMode.Default_JSSE;\n+        }\n+        break;\n+      case OpenSSL:\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n-        // Strong reference needs to be kept to logger until initialization of\n-        // SSLContext finished (see HADOOP-16174):\n-        logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-      } catch (NoSuchAlgorithmException e) {\n-        LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+        break;\n+      case Default_JSSE:\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n-      }\n-      break;\n-    case OpenSSL:\n-      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-      ctx.init(null, null, null);\n-      channelMode \u003d SSLChannelMode.OpenSSL;\n-      break;\n-    case Default_JSSE:\n-      ctx \u003d SSLContext.getDefault();\n-      channelMode \u003d SSLChannelMode.Default_JSSE;\n-      break;\n-    default:\n-      throw new AssertionError(\"Unknown channel mode: \"\n-          + preferredChannelMode);\n+        break;\n+      default:\n+        throw new AssertionError(\"Unknown channel mode: \"\n+            + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n      case Default:\n        try {\n          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n          logger.setLevel(Level.WARNING);\n          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n          ctx.init(null, null, null);\n          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n          logger.setLevel(Level.INFO);\n          channelMode \u003d SSLChannelMode.OpenSSL;\n        } catch (NoSuchAlgorithmException e) {\n          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n          ctx \u003d SSLContext.getDefault();\n          channelMode \u003d SSLChannelMode.Default_JSSE;\n        }\n        break;\n      case OpenSSL:\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n        break;\n      case Default_JSSE:\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n        break;\n      default:\n        throw new AssertionError(\"Unknown channel mode: \"\n            + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/OpenSSLSocketFactory.java",
            "newPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-16050: s3a SSL connections should use OpenSSL\"\n\nThis reverts commit b067f8acaa79b1230336900a5c62ba465b2adb28.\n\nChange-Id: I584b050a56c0e6f70b11fa3f7db00d5ac46e7dd8\n",
          "commitDate": "05/06/19 5:54 AM",
          "commitName": "309501c6fa1073f3cfd7e535a4207dbfb21165f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/06/19 5:54 AM",
          "commitNameOld": "7724d8031b3b8cf499c9777c837b5000db12ecee",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,32 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n-    case Default:\n-      try {\n-        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n-                SSL.class.getName());\n-        logger.setLevel(Level.WARNING);\n+      case Default:\n+        try {\n+          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n+          logger.setLevel(Level.WARNING);\n+          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+          ctx.init(null, null, null);\n+          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n+          logger.setLevel(Level.INFO);\n+          channelMode \u003d SSLChannelMode.OpenSSL;\n+        } catch (NoSuchAlgorithmException e) {\n+          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+          ctx \u003d SSLContext.getDefault();\n+          channelMode \u003d SSLChannelMode.Default_JSSE;\n+        }\n+        break;\n+      case OpenSSL:\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n-        // Strong reference needs to be kept to logger until initialization of\n-        // SSLContext finished (see HADOOP-16174):\n-        logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-      } catch (NoSuchAlgorithmException e) {\n-        LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+        break;\n+      case Default_JSSE:\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n-      }\n-      break;\n-    case OpenSSL:\n-      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-      ctx.init(null, null, null);\n-      channelMode \u003d SSLChannelMode.OpenSSL;\n-      break;\n-    case Default_JSSE:\n-      ctx \u003d SSLContext.getDefault();\n-      channelMode \u003d SSLChannelMode.Default_JSSE;\n-      break;\n-    default:\n-      throw new AssertionError(\"Unknown channel mode: \"\n-          + preferredChannelMode);\n+        break;\n+      default:\n+        throw new AssertionError(\"Unknown channel mode: \"\n+            + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n      case Default:\n        try {\n          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n          logger.setLevel(Level.WARNING);\n          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n          ctx.init(null, null, null);\n          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n          logger.setLevel(Level.INFO);\n          channelMode \u003d SSLChannelMode.OpenSSL;\n        } catch (NoSuchAlgorithmException e) {\n          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n          ctx \u003d SSLContext.getDefault();\n          channelMode \u003d SSLChannelMode.Default_JSSE;\n        }\n        break;\n      case OpenSSL:\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n        break;\n      case Default_JSSE:\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n        break;\n      default:\n        throw new AssertionError(\"Unknown channel mode: \"\n            + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java",
          "extendedDetails": {}
        }
      ]
    },
    "b067f8acaa79b1230336900a5c62ba465b2adb28": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HADOOP-16050: s3a SSL connections should use OpenSSL\n\n(cherry picked from commit aebf229c175dfa19fff3b31e9e67596f6c6124fa)\n",
      "commitDate": "16/05/19 7:57 AM",
      "commitName": "b067f8acaa79b1230336900a5c62ba465b2adb28",
      "commitAuthor": "Sahil Takiar",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-16050: s3a SSL connections should use OpenSSL\n\n(cherry picked from commit aebf229c175dfa19fff3b31e9e67596f6c6124fa)\n",
          "commitDate": "16/05/19 7:57 AM",
          "commitName": "b067f8acaa79b1230336900a5c62ba465b2adb28",
          "commitAuthor": "Sahil Takiar",
          "commitDateOld": "16/05/19 7:38 AM",
          "commitNameOld": "b7de7351590c555cf4f810be490f183a2d36f9e3",
          "commitAuthorOld": "Elek, Márton",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n-      case Default:\n-        try {\n-          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n-          logger.setLevel(Level.WARNING);\n-          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-          ctx.init(null, null, null);\n-          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n-          logger.setLevel(Level.INFO);\n-          channelMode \u003d SSLChannelMode.OpenSSL;\n-        } catch (NoSuchAlgorithmException e) {\n-          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n-          ctx \u003d SSLContext.getDefault();\n-          channelMode \u003d SSLChannelMode.Default_JSSE;\n-        }\n-        break;\n-      case OpenSSL:\n+    case Default:\n+      try {\n+        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n+                SSL.class.getName());\n+        logger.setLevel(Level.WARNING);\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n+        // Strong reference needs to be kept to logger until initialization of\n+        // SSLContext finished (see HADOOP-16174):\n+        logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-        break;\n-      case Default_JSSE:\n+      } catch (NoSuchAlgorithmException e) {\n+        LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n-        break;\n-      default:\n-        throw new AssertionError(\"Unknown channel mode: \"\n-            + preferredChannelMode);\n+      }\n+      break;\n+    case OpenSSL:\n+      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+      ctx.init(null, null, null);\n+      channelMode \u003d SSLChannelMode.OpenSSL;\n+      break;\n+    case Default_JSSE:\n+      ctx \u003d SSLContext.getDefault();\n+      channelMode \u003d SSLChannelMode.Default_JSSE;\n+      break;\n+    default:\n+      throw new AssertionError(\"Unknown channel mode: \"\n+          + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n    case Default:\n      try {\n        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                SSL.class.getName());\n        logger.setLevel(Level.WARNING);\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        // Strong reference needs to be kept to logger until initialization of\n        // SSLContext finished (see HADOOP-16174):\n        logger.setLevel(Level.INFO);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (NoSuchAlgorithmException e) {\n        LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n      ctx.init(null, null, null);\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    default:\n      throw new AssertionError(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/OpenSSLSocketFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/OpenSSLSocketFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16050: s3a SSL connections should use OpenSSL\n\n(cherry picked from commit aebf229c175dfa19fff3b31e9e67596f6c6124fa)\n",
          "commitDate": "16/05/19 7:57 AM",
          "commitName": "b067f8acaa79b1230336900a5c62ba465b2adb28",
          "commitAuthor": "Sahil Takiar",
          "commitDateOld": "16/05/19 7:38 AM",
          "commitNameOld": "b7de7351590c555cf4f810be490f183a2d36f9e3",
          "commitAuthorOld": "Elek, Márton",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n-      case Default:\n-        try {\n-          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n-          logger.setLevel(Level.WARNING);\n-          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n-          ctx.init(null, null, null);\n-          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n-          logger.setLevel(Level.INFO);\n-          channelMode \u003d SSLChannelMode.OpenSSL;\n-        } catch (NoSuchAlgorithmException e) {\n-          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n-          ctx \u003d SSLContext.getDefault();\n-          channelMode \u003d SSLChannelMode.Default_JSSE;\n-        }\n-        break;\n-      case OpenSSL:\n+    case Default:\n+      try {\n+        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n+                SSL.class.getName());\n+        logger.setLevel(Level.WARNING);\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n+        // Strong reference needs to be kept to logger until initialization of\n+        // SSLContext finished (see HADOOP-16174):\n+        logger.setLevel(Level.INFO);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n-        break;\n-      case Default_JSSE:\n+      } catch (NoSuchAlgorithmException e) {\n+        LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n-        break;\n-      default:\n-        throw new AssertionError(\"Unknown channel mode: \"\n-            + preferredChannelMode);\n+      }\n+      break;\n+    case OpenSSL:\n+      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+      ctx.init(null, null, null);\n+      channelMode \u003d SSLChannelMode.OpenSSL;\n+      break;\n+    case Default_JSSE:\n+      ctx \u003d SSLContext.getDefault();\n+      channelMode \u003d SSLChannelMode.Default_JSSE;\n+      break;\n+    default:\n+      throw new AssertionError(\"Unknown channel mode: \"\n+          + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n    case Default:\n      try {\n        java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(\n                SSL.class.getName());\n        logger.setLevel(Level.WARNING);\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        // Strong reference needs to be kept to logger until initialization of\n        // SSLContext finished (see HADOOP-16174):\n        logger.setLevel(Level.INFO);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n      } catch (NoSuchAlgorithmException e) {\n        LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n      }\n      break;\n    case OpenSSL:\n      ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n      ctx.init(null, null, null);\n      channelMode \u003d SSLChannelMode.OpenSSL;\n      break;\n    case Default_JSSE:\n      ctx \u003d SSLContext.getDefault();\n      channelMode \u003d SSLChannelMode.Default_JSSE;\n      break;\n    default:\n      throw new AssertionError(\"Unknown channel mode: \"\n          + preferredChannelMode);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/OpenSSLSocketFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "ddede7ae6fbbadbe08861bc85a664b73d66f77c7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16174. Disable wildfly logs to the console.\n\nFollow-on to HADOOP-15851.\n\nAuthor:    Denes Gerencser \u003cdgerencser@cloudera.com\u003e\n",
      "commitDate": "09/03/19 10:45 AM",
      "commitName": "ddede7ae6fbbadbe08861bc85a664b73d66f77c7",
      "commitAuthor": "Denes Gerencser",
      "commitDateOld": "15/10/18 2:53 PM",
      "commitNameOld": "ef9dc6c44c686e836bb25e31ff355cff80572d23",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 144.87,
      "commitsBetweenForRepo": 1082,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n       case Default:\n         try {\n-          java.util.logging.Logger.getLogger(SSL.class.getName()).setLevel(Level.WARNING);\n+          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n+          logger.setLevel(Level.WARNING);\n           ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n           ctx.init(null, null, null);\n+          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n+          logger.setLevel(Level.INFO);\n           channelMode \u003d SSLChannelMode.OpenSSL;\n         } catch (NoSuchAlgorithmException e) {\n           LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n           ctx \u003d SSLContext.getDefault();\n           channelMode \u003d SSLChannelMode.Default_JSSE;\n         }\n         break;\n       case OpenSSL:\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n         break;\n       case Default_JSSE:\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n         break;\n       default:\n         throw new AssertionError(\"Unknown channel mode: \"\n             + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n      case Default:\n        try {\n          java.util.logging.Logger logger \u003d java.util.logging.Logger.getLogger(SSL.class.getName());\n          logger.setLevel(Level.WARNING);\n          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n          ctx.init(null, null, null);\n          // Strong reference needs to be kept to logger until initialization of SSLContext finished (see HADOOP-16174):\n          logger.setLevel(Level.INFO);\n          channelMode \u003d SSLChannelMode.OpenSSL;\n        } catch (NoSuchAlgorithmException e) {\n          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n          ctx \u003d SSLContext.getDefault();\n          channelMode \u003d SSLChannelMode.Default_JSSE;\n        }\n        break;\n      case OpenSSL:\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n        break;\n      case Default_JSSE:\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n        break;\n      default:\n        throw new AssertionError(\"Unknown channel mode: \"\n            + preferredChannelMode);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java",
      "extendedDetails": {}
    },
    "ef9dc6c44c686e836bb25e31ff355cff80572d23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15851. Disable wildfly logs to the console.\nContributed by Vishwajeet Dusane.\n",
      "commitDate": "15/10/18 2:53 PM",
      "commitName": "ef9dc6c44c686e836bb25e31ff355cff80572d23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "dd2b22fa31b4e8c9a9a1da05ae214605fdb5c25e",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 28.08,
      "commitsBetweenForRepo": 292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n       throws NoSuchAlgorithmException, KeyManagementException {\n     switch (preferredChannelMode) {\n       case Default:\n         try {\n+          java.util.logging.Logger.getLogger(SSL.class.getName()).setLevel(Level.WARNING);\n           ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n           ctx.init(null, null, null);\n           channelMode \u003d SSLChannelMode.OpenSSL;\n         } catch (NoSuchAlgorithmException e) {\n           LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n           ctx \u003d SSLContext.getDefault();\n           channelMode \u003d SSLChannelMode.Default_JSSE;\n         }\n         break;\n       case OpenSSL:\n         ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n         ctx.init(null, null, null);\n         channelMode \u003d SSLChannelMode.OpenSSL;\n         break;\n       case Default_JSSE:\n         ctx \u003d SSLContext.getDefault();\n         channelMode \u003d SSLChannelMode.Default_JSSE;\n         break;\n       default:\n         throw new AssertionError(\"Unknown channel mode: \"\n             + preferredChannelMode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n      case Default:\n        try {\n          java.util.logging.Logger.getLogger(SSL.class.getName()).setLevel(Level.WARNING);\n          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n          ctx.init(null, null, null);\n          channelMode \u003d SSLChannelMode.OpenSSL;\n        } catch (NoSuchAlgorithmException e) {\n          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n          ctx \u003d SSLContext.getDefault();\n          channelMode \u003d SSLChannelMode.Default_JSSE;\n        }\n        break;\n      case OpenSSL:\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n        break;\n      case Default_JSSE:\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n        break;\n      default:\n        throw new AssertionError(\"Unknown channel mode: \"\n            + preferredChannelMode);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java",
      "extendedDetails": {}
    },
    "d6a4f39bd5f192e5e3377630887a6998d4d400c2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15669. ABFS: Improve HTTPS Performance.\nContributed by Vishwajeet Dusane.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "d6a4f39bd5f192e5e3377630887a6998d4d400c2",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,28 @@\n+  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n+      throws NoSuchAlgorithmException, KeyManagementException {\n+    switch (preferredChannelMode) {\n+      case Default:\n+        try {\n+          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+          ctx.init(null, null, null);\n+          channelMode \u003d SSLChannelMode.OpenSSL;\n+        } catch (NoSuchAlgorithmException e) {\n+          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n+          ctx \u003d SSLContext.getDefault();\n+          channelMode \u003d SSLChannelMode.Default_JSSE;\n+        }\n+        break;\n+      case OpenSSL:\n+        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n+        ctx.init(null, null, null);\n+        channelMode \u003d SSLChannelMode.OpenSSL;\n+        break;\n+      case Default_JSSE:\n+        ctx \u003d SSLContext.getDefault();\n+        channelMode \u003d SSLChannelMode.Default_JSSE;\n+        break;\n+      default:\n+        throw new AssertionError(\"Unknown channel mode: \"\n+            + preferredChannelMode);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeSSLContext(SSLChannelMode preferredChannelMode)\n      throws NoSuchAlgorithmException, KeyManagementException {\n    switch (preferredChannelMode) {\n      case Default:\n        try {\n          ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n          ctx.init(null, null, null);\n          channelMode \u003d SSLChannelMode.OpenSSL;\n        } catch (NoSuchAlgorithmException e) {\n          LOG.warn(\"Failed to load OpenSSL. Falling back to the JSSE default.\");\n          ctx \u003d SSLContext.getDefault();\n          channelMode \u003d SSLChannelMode.Default_JSSE;\n        }\n        break;\n      case OpenSSL:\n        ctx \u003d SSLContext.getInstance(\"openssl.TLS\");\n        ctx.init(null, null, null);\n        channelMode \u003d SSLChannelMode.OpenSSL;\n        break;\n      case Default_JSSE:\n        ctx \u003d SSLContext.getDefault();\n        channelMode \u003d SSLChannelMode.Default_JSSE;\n        break;\n      default:\n        throw new AssertionError(\"Unknown channel mode: \"\n            + preferredChannelMode);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/SSLSocketFactoryEx.java"
    }
  }
}