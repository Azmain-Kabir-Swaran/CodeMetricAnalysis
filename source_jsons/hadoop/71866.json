{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyAuthorizationKeyProvider.java",
  "functionName": "reencryptEncryptedKeys",
  "functionId": "reencryptEncryptedKeys___ekvs-List__EncryptedKeyVersion__",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
  "functionStartLine": 292,
  "functionEndLine": 308,
  "numCommitsSeen": 10,
  "timeTaken": 1129,
  "changeHistory": [
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99"
  ],
  "changeHistoryShort": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14705. Add batched interface reencryptEncryptedKeys to KMS.\n",
      "commitDate": "22/08/17 7:47 AM",
      "commitName": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,17 @@\n+  public void reencryptEncryptedKeys(List\u003cEncryptedKeyVersion\u003e ekvs)\n+      throws IOException, GeneralSecurityException {\n+    if (ekvs.isEmpty()) {\n+      return;\n+    }\n+    readLock.lock();\n+    try {\n+      for (EncryptedKeyVersion ekv : ekvs) {\n+        verifyKeyVersionBelongsToKey(ekv);\n+      }\n+      final String keyName \u003d ekvs.get(0).getEncryptionKeyName();\n+      doAccessCheck(keyName, KeyOpType.GENERATE_EEK);\n+      provider.reencryptEncryptedKeys(ekvs);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reencryptEncryptedKeys(List\u003cEncryptedKeyVersion\u003e ekvs)\n      throws IOException, GeneralSecurityException {\n    if (ekvs.isEmpty()) {\n      return;\n    }\n    readLock.lock();\n    try {\n      for (EncryptedKeyVersion ekv : ekvs) {\n        verifyKeyVersionBelongsToKey(ekv);\n      }\n      final String keyName \u003d ekvs.get(0).getEncryptionKeyName();\n      doAccessCheck(keyName, KeyOpType.GENERATE_EEK);\n      provider.reencryptEncryptedKeys(ekvs);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java"
    }
  }
}