{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeS3FileSystem.java",
  "functionName": "rename",
  "functionId": "rename___src-Path__dst-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
  "functionStartLine": 119,
  "functionEndLine": 121,
  "numCommitsSeen": 27,
  "timeTaken": 1835,
  "changeHistory": [
    "49467165a57fb77932d1d526796624b88ebacd91",
    "5ec7fcd9dd6bb86858c6e2583321bb9a615bd392",
    "a10055cf6de058d10dec54705a6de746ecca111f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "7578282edce0eba3f24c96355c944c02156ece79",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "49467165a57fb77932d1d526796624b88ebacd91": "Ybodychange",
    "5ec7fcd9dd6bb86858c6e2583321bb9a615bd392": "Yfilerename",
    "a10055cf6de058d10dec54705a6de746ecca111f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "7578282edce0eba3f24c96355c944c02156ece79": "Ybodychange",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49467165a57fb77932d1d526796624b88ebacd91": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14738 Remove S3N and obsolete bits of S3A; rework docs.  Contributed by Steve Loughran.\n",
      "commitDate": "14/09/17 2:10 PM",
      "commitName": "49467165a57fb77932d1d526796624b88ebacd91",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "30/11/16 1:01 PM",
      "commitNameOld": "3fd844b99fdfae6be6e5e261f371d175aad14229",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 288.01,
      "commitsBetweenForRepo": 1721,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,136 +1,3 @@\n   public boolean rename(Path src, Path dst) throws IOException {\n-\n-    String srcKey \u003d pathToKey(makeAbsolute(src));\n-    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n-\n-    if (srcKey.length() \u003d\u003d 0) {\n-      // Cannot rename root of file system\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble +\n-                  \"returning false as cannot rename the root of a filesystem\");\n-      }\n-      return false;\n-    }\n-\n-    //get status of source\n-    boolean srcIsFile;\n-    try {\n-      srcIsFile \u003d getFileStatus(src).isFile();\n-    } catch (FileNotFoundException e) {\n-      //bail out fast if the source does not exist\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n-      }\n-      return false;\n-    }\n-    // Figure out the final destination\n-    String dstKey \u003d pathToKey(makeAbsolute(dst));\n-\n-    try {\n-      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n-      if (dstIsFile) {\n-        //destination is a file.\n-        //you can\u0027t copy a file or a directory onto an existing file\n-        //except for the special case of dest\u003d\u003dsrc, which is a no-op\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(debugPreamble +\n-              \"returning without rename as dst is an already existing file\");\n-        }\n-        //exit, returning true iff the rename is onto self\n-        return srcKey.equals(dstKey);\n-      } else {\n-        //destination exists and is a directory\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(debugPreamble + \"using dst as output directory\");\n-        }\n-        //destination goes under the dst path, with the name of the\n-        //source entry\n-        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n-      }\n-    } catch (FileNotFoundException e) {\n-      //destination does not exist \u003d\u003e the source file or directory\n-      //is copied over with the name of the destination\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble + \"using dst as output destination\");\n-      }\n-      try {\n-        if (getFileStatus(dst.getParent()).isFile()) {\n-          if(LOG.isDebugEnabled()) {\n-            LOG.debug(debugPreamble +\n-                \"returning false as dst parent exists and is a file\");\n-          }\n-          return false;\n-        }\n-      } catch (FileNotFoundException ex) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(debugPreamble +\n-              \"returning false as dst parent does not exist\");\n-        }\n-        return false;\n-      }\n-    }\n-\n-    //rename to self behavior follows Posix rules and is different\n-    //for directories and files -the return code is driven by src type\n-    if (srcKey.equals(dstKey)) {\n-      //fully resolved destination key matches source: fail\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble + \"renamingToSelf; returning true\");\n-      }\n-      return true;\n-    }\n-    if (srcIsFile) {\n-      //source is a file; COPY then DELETE\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble +\n-            \"src is file, so doing copy then delete in S3\");\n-      }\n-      store.copy(srcKey, dstKey);\n-      store.delete(srcKey);\n-    } else {\n-      //src is a directory\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n-      }\n-      //Verify dest is not a child of the parent\n-      if (dstKey.startsWith(srcKey + \"/\")) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\n-            debugPreamble + \"cannot rename a directory to a subdirectory of self\");\n-        }\n-        return false;\n-      }\n-      //create the subdir under the destination\n-      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n-\n-      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n-      String priorLastKey \u003d null;\n-      do {\n-        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n-        for (FileMetadata file : listing.getFiles()) {\n-          keysToDelete.add(file.getKey());\n-          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n-        }\n-        priorLastKey \u003d listing.getPriorLastKey();\n-      } while (priorLastKey !\u003d null);\n-\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble +\n-            \"all files in src copied, now removing src files\");\n-      }\n-      for (String key: keysToDelete) {\n-        store.delete(key);\n-      }\n-\n-      try {\n-        store.delete(srcKey + FOLDER_SUFFIX);\n-      } catch (FileNotFoundException e) {\n-        //this is fine, we don\u0027t require a marker\n-      }\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble + \"done\");\n-      }\n-    }\n-\n-    return true;\n+    throw new UnsupportedOperationException(UNSUPPORTED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n    throw new UnsupportedOperationException(UNSUPPORTED);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {}
    },
    "5ec7fcd9dd6bb86858c6e2583321bb9a615bd392": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-11074. Move s3-related FS connector code to hadoop-aws. (David S. Wang via Colin Patrick McCabe)\n",
      "commitDate": "10/09/14 4:14 PM",
      "commitName": "5ec7fcd9dd6bb86858c6e2583321bb9a615bd392",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "10/09/14 3:22 PM",
      "commitNameOld": "7f80e142096ab21b4852635a127589e34a747bc4",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n                  \"returning false as cannot rename the root of a filesystem\");\n      }\n      return false;\n    }\n\n    //get status of source\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      //bail out fast if the source does not exist\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      }\n      return false;\n    }\n    // Figure out the final destination\n    String dstKey \u003d pathToKey(makeAbsolute(dst));\n\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        //destination is a file.\n        //you can\u0027t copy a file or a directory onto an existing file\n        //except for the special case of dest\u003d\u003dsrc, which is a no-op\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning without rename as dst is an already existing file\");\n        }\n        //exit, returning true iff the rename is onto self\n        return srcKey.equals(dstKey);\n      } else {\n        //destination exists and is a directory\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble + \"using dst as output directory\");\n        }\n        //destination goes under the dst path, with the name of the\n        //source entry\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      //destination does not exist \u003d\u003e the source file or directory\n      //is copied over with the name of the destination\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"using dst as output destination\");\n      }\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(debugPreamble +\n                \"returning false as dst parent exists and is a file\");\n          }\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst parent does not exist\");\n        }\n        return false;\n      }\n    }\n\n    //rename to self behavior follows Posix rules and is different\n    //for directories and files -the return code is driven by src type\n    if (srcKey.equals(dstKey)) {\n      //fully resolved destination key matches source: fail\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"renamingToSelf; returning true\");\n      }\n      return true;\n    }\n    if (srcIsFile) {\n      //source is a file; COPY then DELETE\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"src is file, so doing copy then delete in S3\");\n      }\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      //src is a directory\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      }\n      //Verify dest is not a child of the parent\n      if (dstKey.startsWith(srcKey + \"/\")) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n            debugPreamble + \"cannot rename a directory to a subdirectory of self\");\n        }\n        return false;\n      }\n      //create the subdir under the destination\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"all files in src copied, now removing src files\");\n      }\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"done\");\n      }\n    }\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
        "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java"
      }
    },
    "a10055cf6de058d10dec54705a6de746ecca111f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9258 Add stricter tests to FileSystemContractTestBase (includes fixes for production code HADOOP-9261 \u0026 HADOOP-9265 and test enhancements HADOOP-9228, HADOOP-9227 \u0026 HADOOP-9259)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460646 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 6:12 AM",
      "commitName": "a10055cf6de058d10dec54705a6de746ecca111f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "19/09/12 9:06 PM",
      "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 186.38,
      "commitsBetweenForRepo": 884,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,136 @@\n   public boolean rename(Path src, Path dst) throws IOException {\n \n     String srcKey \u003d pathToKey(makeAbsolute(src));\n+    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n \n     if (srcKey.length() \u003d\u003d 0) {\n       // Cannot rename root of file system\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble +\n+                  \"returning false as cannot rename the root of a filesystem\");\n+      }\n       return false;\n     }\n \n-    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n-\n+    //get status of source\n+    boolean srcIsFile;\n+    try {\n+      srcIsFile \u003d getFileStatus(src).isFile();\n+    } catch (FileNotFoundException e) {\n+      //bail out fast if the source does not exist\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n+      }\n+      return false;\n+    }\n     // Figure out the final destination\n-    String dstKey;\n+    String dstKey \u003d pathToKey(makeAbsolute(dst));\n+\n     try {\n       boolean dstIsFile \u003d getFileStatus(dst).isFile();\n       if (dstIsFile) {\n+        //destination is a file.\n+        //you can\u0027t copy a file or a directory onto an existing file\n+        //except for the special case of dest\u003d\u003dsrc, which is a no-op\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(debugPreamble +\n-              \"returning false as dst is an already existing file\");\n+              \"returning without rename as dst is an already existing file\");\n         }\n-        return false;\n+        //exit, returning true iff the rename is onto self\n+        return srcKey.equals(dstKey);\n       } else {\n+        //destination exists and is a directory\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(debugPreamble + \"using dst as output directory\");\n         }\n+        //destination goes under the dst path, with the name of the\n+        //source entry\n         dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n       }\n     } catch (FileNotFoundException e) {\n+      //destination does not exist \u003d\u003e the source file or directory\n+      //is copied over with the name of the destination\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(debugPreamble + \"using dst as output destination\");\n       }\n-      dstKey \u003d pathToKey(makeAbsolute(dst));\n       try {\n         if (getFileStatus(dst.getParent()).isFile()) {\n           if(LOG.isDebugEnabled()) {\n             LOG.debug(debugPreamble +\n                 \"returning false as dst parent exists and is a file\");\n           }\n           return false;\n         }\n       } catch (FileNotFoundException ex) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(debugPreamble +\n               \"returning false as dst parent does not exist\");\n         }\n         return false;\n       }\n     }\n \n-    boolean srcIsFile;\n-    try {\n-      srcIsFile \u003d getFileStatus(src).isFile();\n-    } catch (FileNotFoundException e) {\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n+    //rename to self behavior follows Posix rules and is different\n+    //for directories and files -the return code is driven by src type\n+    if (srcKey.equals(dstKey)) {\n+      //fully resolved destination key matches source: fail\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble + \"renamingToSelf; returning true\");\n       }\n-      return false;\n+      return true;\n     }\n     if (srcIsFile) {\n+      //source is a file; COPY then DELETE\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(debugPreamble +\n             \"src is file, so doing copy then delete in S3\");\n       }\n       store.copy(srcKey, dstKey);\n       store.delete(srcKey);\n     } else {\n+      //src is a directory\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n       }\n+      //Verify dest is not a child of the parent\n+      if (dstKey.startsWith(srcKey + \"/\")) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+            debugPreamble + \"cannot rename a directory to a subdirectory of self\");\n+        }\n+        return false;\n+      }\n+      //create the subdir under the destination\n       store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n \n       List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n       String priorLastKey \u003d null;\n       do {\n         PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n         for (FileMetadata file : listing.getFiles()) {\n           keysToDelete.add(file.getKey());\n           store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n         }\n         priorLastKey \u003d listing.getPriorLastKey();\n       } while (priorLastKey !\u003d null);\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(debugPreamble +\n             \"all files in src copied, now removing src files\");\n       }\n       for (String key: keysToDelete) {\n         store.delete(key);\n       }\n \n       try {\n         store.delete(srcKey + FOLDER_SUFFIX);\n       } catch (FileNotFoundException e) {\n         //this is fine, we don\u0027t require a marker\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(debugPreamble + \"done\");\n       }\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n                  \"returning false as cannot rename the root of a filesystem\");\n      }\n      return false;\n    }\n\n    //get status of source\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      //bail out fast if the source does not exist\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      }\n      return false;\n    }\n    // Figure out the final destination\n    String dstKey \u003d pathToKey(makeAbsolute(dst));\n\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        //destination is a file.\n        //you can\u0027t copy a file or a directory onto an existing file\n        //except for the special case of dest\u003d\u003dsrc, which is a no-op\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning without rename as dst is an already existing file\");\n        }\n        //exit, returning true iff the rename is onto self\n        return srcKey.equals(dstKey);\n      } else {\n        //destination exists and is a directory\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble + \"using dst as output directory\");\n        }\n        //destination goes under the dst path, with the name of the\n        //source entry\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      //destination does not exist \u003d\u003e the source file or directory\n      //is copied over with the name of the destination\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"using dst as output destination\");\n      }\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(debugPreamble +\n                \"returning false as dst parent exists and is a file\");\n          }\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst parent does not exist\");\n        }\n        return false;\n      }\n    }\n\n    //rename to self behavior follows Posix rules and is different\n    //for directories and files -the return code is driven by src type\n    if (srcKey.equals(dstKey)) {\n      //fully resolved destination key matches source: fail\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"renamingToSelf; returning true\");\n      }\n      return true;\n    }\n    if (srcIsFile) {\n      //source is a file; COPY then DELETE\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"src is file, so doing copy then delete in S3\");\n      }\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      //src is a directory\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      }\n      //Verify dest is not a child of the parent\n      if (dstKey.startsWith(srcKey + \"/\")) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n            debugPreamble + \"cannot rename a directory to a subdirectory of self\");\n        }\n        return false;\n      }\n      //create the subdir under the destination\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"all files in src copied, now removing src files\");\n      }\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"done\");\n      }\n    }\n\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst is an already existing file\");\n        }\n        return false;\n      } else {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble + \"using dst as output directory\");\n        }\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"using dst as output destination\");\n      }\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(debugPreamble +\n                \"returning false as dst parent exists and is a file\");\n          }\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst parent does not exist\");\n        }\n        return false;\n      }\n    }\n\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      }\n      return false;\n    }\n    if (srcIsFile) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"src is file, so doing copy then delete in S3\");\n      }\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      }\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"all files in src copied, now removing src files\");\n      }\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"done\");\n      }\n    }\n\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst is an already existing file\");\n        }\n        return false;\n      } else {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble + \"using dst as output directory\");\n        }\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"using dst as output destination\");\n      }\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(debugPreamble +\n                \"returning false as dst parent exists and is a file\");\n          }\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst parent does not exist\");\n        }\n        return false;\n      }\n    }\n\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      }\n      return false;\n    }\n    if (srcIsFile) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"src is file, so doing copy then delete in S3\");\n      }\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      }\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"all files in src copied, now removing src files\");\n      }\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"done\");\n      }\n    }\n\n    return true;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst is an already existing file\");\n        }\n        return false;\n      } else {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble + \"using dst as output directory\");\n        }\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"using dst as output destination\");\n      }\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(debugPreamble +\n                \"returning false as dst parent exists and is a file\");\n          }\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst parent does not exist\");\n        }\n        return false;\n      }\n    }\n\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      }\n      return false;\n    }\n    if (srcIsFile) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"src is file, so doing copy then delete in S3\");\n      }\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      }\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"all files in src copied, now removing src files\");\n      }\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"done\");\n      }\n    }\n\n    return true;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java"
      }
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "21/06/10 2:45 PM",
      "commitNameOld": "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 68.04,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,102 @@\n   public boolean rename(Path src, Path dst) throws IOException {\n \n     String srcKey \u003d pathToKey(makeAbsolute(src));\n \n     if (srcKey.length() \u003d\u003d 0) {\n       // Cannot rename root of file system\n       return false;\n     }\n \n     final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n \n     // Figure out the final destination\n     String dstKey;\n     try {\n       boolean dstIsFile \u003d getFileStatus(dst).isFile();\n       if (dstIsFile) {\n-        LOG.debug(debugPreamble + \"returning false as dst is an already existing file\");\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(debugPreamble +\n+              \"returning false as dst is an already existing file\");\n+        }\n         return false;\n       } else {\n-        LOG.debug(debugPreamble + \"using dst as output directory\");\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(debugPreamble + \"using dst as output directory\");\n+        }\n         dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n       }\n     } catch (FileNotFoundException e) {\n-      LOG.debug(debugPreamble + \"using dst as output destination\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble + \"using dst as output destination\");\n+      }\n       dstKey \u003d pathToKey(makeAbsolute(dst));\n       try {\n         if (getFileStatus(dst.getParent()).isFile()) {\n-          LOG.debug(debugPreamble + \"returning false as dst parent exists and is a file\");\n+          if(LOG.isDebugEnabled()) {\n+            LOG.debug(debugPreamble +\n+                \"returning false as dst parent exists and is a file\");\n+          }\n           return false;\n         }\n       } catch (FileNotFoundException ex) {\n-        LOG.debug(debugPreamble + \"returning false as dst parent does not exist\");\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(debugPreamble +\n+              \"returning false as dst parent does not exist\");\n+        }\n         return false;\n       }\n     }\n \n     boolean srcIsFile;\n     try {\n       srcIsFile \u003d getFileStatus(src).isFile();\n     } catch (FileNotFoundException e) {\n-      LOG.debug(debugPreamble + \"returning false as src does not exist\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n+      }\n       return false;\n     }\n     if (srcIsFile) {\n-      LOG.debug(debugPreamble + \"src is file, so doing copy then delete in S3\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble +\n+            \"src is file, so doing copy then delete in S3\");\n+      }\n       store.copy(srcKey, dstKey);\n       store.delete(srcKey);\n     } else {\n-      LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n+      }\n       store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n \n       List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n       String priorLastKey \u003d null;\n       do {\n         PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n         for (FileMetadata file : listing.getFiles()) {\n           keysToDelete.add(file.getKey());\n           store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n         }\n         priorLastKey \u003d listing.getPriorLastKey();\n       } while (priorLastKey !\u003d null);\n \n-      LOG.debug(debugPreamble + \"all files in src copied, now removing src files\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble +\n+            \"all files in src copied, now removing src files\");\n+      }\n       for (String key: keysToDelete) {\n         store.delete(key);\n       }\n \n       try {\n         store.delete(srcKey + FOLDER_SUFFIX);\n       } catch (FileNotFoundException e) {\n         //this is fine, we don\u0027t require a marker\n       }\n-      LOG.debug(debugPreamble + \"done\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(debugPreamble + \"done\");\n+      }\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst is an already existing file\");\n        }\n        return false;\n      } else {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble + \"using dst as output directory\");\n        }\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"using dst as output destination\");\n      }\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(debugPreamble +\n                \"returning false as dst parent exists and is a file\");\n          }\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(debugPreamble +\n              \"returning false as dst parent does not exist\");\n        }\n        return false;\n      }\n    }\n\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      }\n      return false;\n    }\n    if (srcIsFile) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"src is file, so doing copy then delete in S3\");\n      }\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      }\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble +\n            \"all files in src copied, now removing src files\");\n      }\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(debugPreamble + \"done\");\n      }\n    }\n\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {}
    },
    "7578282edce0eba3f24c96355c944c02156ece79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6585.  Add FileStatus#isDirectory and isFile.  Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@949658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/10 8:14 PM",
      "commitName": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthor": "Thomas White",
      "commitDateOld": "08/12/09 8:17 PM",
      "commitNameOld": "368b6cc85b03f8eb5072bb105ed7eb941856fc2c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 172.96,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   public boolean rename(Path src, Path dst) throws IOException {\n \n     String srcKey \u003d pathToKey(makeAbsolute(src));\n \n     if (srcKey.length() \u003d\u003d 0) {\n       // Cannot rename root of file system\n       return false;\n     }\n \n     final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n \n     // Figure out the final destination\n     String dstKey;\n     try {\n-      boolean dstIsFile \u003d !getFileStatus(dst).isDir();\n+      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n       if (dstIsFile) {\n         LOG.debug(debugPreamble + \"returning false as dst is an already existing file\");\n         return false;\n       } else {\n         LOG.debug(debugPreamble + \"using dst as output directory\");\n         dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n       }\n     } catch (FileNotFoundException e) {\n       LOG.debug(debugPreamble + \"using dst as output destination\");\n       dstKey \u003d pathToKey(makeAbsolute(dst));\n       try {\n-        if (!getFileStatus(dst.getParent()).isDir()) {\n+        if (getFileStatus(dst.getParent()).isFile()) {\n           LOG.debug(debugPreamble + \"returning false as dst parent exists and is a file\");\n           return false;\n         }\n       } catch (FileNotFoundException ex) {\n         LOG.debug(debugPreamble + \"returning false as dst parent does not exist\");\n         return false;\n       }\n     }\n \n     boolean srcIsFile;\n     try {\n-      srcIsFile \u003d !getFileStatus(src).isDir();\n+      srcIsFile \u003d getFileStatus(src).isFile();\n     } catch (FileNotFoundException e) {\n       LOG.debug(debugPreamble + \"returning false as src does not exist\");\n       return false;\n     }\n     if (srcIsFile) {\n       LOG.debug(debugPreamble + \"src is file, so doing copy then delete in S3\");\n       store.copy(srcKey, dstKey);\n       store.delete(srcKey);\n     } else {\n       LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n       store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n \n       List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n       String priorLastKey \u003d null;\n       do {\n         PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n         for (FileMetadata file : listing.getFiles()) {\n           keysToDelete.add(file.getKey());\n           store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n         }\n         priorLastKey \u003d listing.getPriorLastKey();\n       } while (priorLastKey !\u003d null);\n \n       LOG.debug(debugPreamble + \"all files in src copied, now removing src files\");\n       for (String key: keysToDelete) {\n         store.delete(key);\n       }\n \n       try {\n         store.delete(srcKey + FOLDER_SUFFIX);\n       } catch (FileNotFoundException e) {\n         //this is fine, we don\u0027t require a marker\n       }\n       LOG.debug(debugPreamble + \"done\");\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d getFileStatus(dst).isFile();\n      if (dstIsFile) {\n        LOG.debug(debugPreamble + \"returning false as dst is an already existing file\");\n        return false;\n      } else {\n        LOG.debug(debugPreamble + \"using dst as output directory\");\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      LOG.debug(debugPreamble + \"using dst as output destination\");\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (getFileStatus(dst.getParent()).isFile()) {\n          LOG.debug(debugPreamble + \"returning false as dst parent exists and is a file\");\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        LOG.debug(debugPreamble + \"returning false as dst parent does not exist\");\n        return false;\n      }\n    }\n\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d getFileStatus(src).isFile();\n    } catch (FileNotFoundException e) {\n      LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      return false;\n    }\n    if (srcIsFile) {\n      LOG.debug(debugPreamble + \"src is file, so doing copy then delete in S3\");\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      LOG.debug(debugPreamble + \"all files in src copied, now removing src files\");\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      LOG.debug(debugPreamble + \"done\");\n    }\n\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {}
    },
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": {
      "type": "Ybodychange",
      "commitMessage": "Merged src/core, src/test/core, src/contrib/eclipse-plugin, and\nsrc/contrib/ec2 from trunk 776174:784663\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/09 1:28 PM",
      "commitName": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 27.67,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,77 @@\n   public boolean rename(Path src, Path dst) throws IOException {\n \n     String srcKey \u003d pathToKey(makeAbsolute(src));\n \n     if (srcKey.length() \u003d\u003d 0) {\n       // Cannot rename root of file system\n       return false;\n     }\n \n+    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n+\n     // Figure out the final destination\n     String dstKey;\n     try {\n-      boolean dstIsFile \u003d existsAndIsFile(dst);\n+      boolean dstIsFile \u003d !getFileStatus(dst).isDir();\n       if (dstIsFile) {\n-        // Attempting to overwrite a file using rename()\n+        LOG.debug(debugPreamble + \"returning false as dst is an already existing file\");\n         return false;\n       } else {\n-        // Move to within the existent directory\n+        LOG.debug(debugPreamble + \"using dst as output directory\");\n         dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n       }\n     } catch (FileNotFoundException e) {\n-      // dst doesn\u0027t exist, so we can proceed\n+      LOG.debug(debugPreamble + \"using dst as output destination\");\n       dstKey \u003d pathToKey(makeAbsolute(dst));\n       try {\n         if (!getFileStatus(dst.getParent()).isDir()) {\n-          return false; // parent dst is a file\n+          LOG.debug(debugPreamble + \"returning false as dst parent exists and is a file\");\n+          return false;\n         }\n       } catch (FileNotFoundException ex) {\n-        return false; // parent dst does not exist\n+        LOG.debug(debugPreamble + \"returning false as dst parent does not exist\");\n+        return false;\n       }\n     }\n \n+    boolean srcIsFile;\n     try {\n-      boolean srcIsFile \u003d existsAndIsFile(src);\n-      if (srcIsFile) {\n-        store.rename(srcKey, dstKey);\n-      } else {\n-        // Move the folder object\n-        store.delete(srcKey + FOLDER_SUFFIX);\n-        store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n-\n-        // Move everything inside the folder\n-        String priorLastKey \u003d null;\n-        do {\n-          PartialListing listing \u003d store.listAll(srcKey, S3_MAX_LISTING_LENGTH,\n-              priorLastKey);\n-          for (FileMetadata file : listing.getFiles()) {\n-            store.rename(file.getKey(), dstKey\n-                + file.getKey().substring(srcKey.length()));\n-          }\n-          priorLastKey \u003d listing.getPriorLastKey();\n-        } while (priorLastKey !\u003d null);\n-      }\n-\n-      createParent(src);\n-      return true;\n-\n+      srcIsFile \u003d !getFileStatus(src).isDir();\n     } catch (FileNotFoundException e) {\n-      // Source file does not exist;\n+      LOG.debug(debugPreamble + \"returning false as src does not exist\");\n       return false;\n     }\n+    if (srcIsFile) {\n+      LOG.debug(debugPreamble + \"src is file, so doing copy then delete in S3\");\n+      store.copy(srcKey, dstKey);\n+      store.delete(srcKey);\n+    } else {\n+      LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n+      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n+\n+      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n+      String priorLastKey \u003d null;\n+      do {\n+        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n+        for (FileMetadata file : listing.getFiles()) {\n+          keysToDelete.add(file.getKey());\n+          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n+        }\n+        priorLastKey \u003d listing.getPriorLastKey();\n+      } while (priorLastKey !\u003d null);\n+\n+      LOG.debug(debugPreamble + \"all files in src copied, now removing src files\");\n+      for (String key: keysToDelete) {\n+        store.delete(key);\n+      }\n+\n+      try {\n+        store.delete(srcKey + FOLDER_SUFFIX);\n+      } catch (FileNotFoundException e) {\n+        //this is fine, we don\u0027t require a marker\n+      }\n+      LOG.debug(debugPreamble + \"done\");\n+    }\n+\n+    return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    final String debugPreamble \u003d \"Renaming \u0027\" + src + \"\u0027 to \u0027\" + dst + \"\u0027 - \";\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d !getFileStatus(dst).isDir();\n      if (dstIsFile) {\n        LOG.debug(debugPreamble + \"returning false as dst is an already existing file\");\n        return false;\n      } else {\n        LOG.debug(debugPreamble + \"using dst as output directory\");\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      LOG.debug(debugPreamble + \"using dst as output destination\");\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (!getFileStatus(dst.getParent()).isDir()) {\n          LOG.debug(debugPreamble + \"returning false as dst parent exists and is a file\");\n          return false;\n        }\n      } catch (FileNotFoundException ex) {\n        LOG.debug(debugPreamble + \"returning false as dst parent does not exist\");\n        return false;\n      }\n    }\n\n    boolean srcIsFile;\n    try {\n      srcIsFile \u003d !getFileStatus(src).isDir();\n    } catch (FileNotFoundException e) {\n      LOG.debug(debugPreamble + \"returning false as src does not exist\");\n      return false;\n    }\n    if (srcIsFile) {\n      LOG.debug(debugPreamble + \"src is file, so doing copy then delete in S3\");\n      store.copy(srcKey, dstKey);\n      store.delete(srcKey);\n    } else {\n      LOG.debug(debugPreamble + \"src is directory, so copying contents\");\n      store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n      List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n      String priorLastKey \u003d null;\n      do {\n        PartialListing listing \u003d store.list(srcKey, S3_MAX_LISTING_LENGTH, priorLastKey, true);\n        for (FileMetadata file : listing.getFiles()) {\n          keysToDelete.add(file.getKey());\n          store.copy(file.getKey(), dstKey + file.getKey().substring(srcKey.length()));\n        }\n        priorLastKey \u003d listing.getPriorLastKey();\n      } while (priorLastKey !\u003d null);\n\n      LOG.debug(debugPreamble + \"all files in src copied, now removing src files\");\n      for (String key: keysToDelete) {\n        store.delete(key);\n      }\n\n      try {\n        store.delete(srcKey + FOLDER_SUFFIX);\n      } catch (FileNotFoundException e) {\n        //this is fine, we don\u0027t require a marker\n      }\n      LOG.debug(debugPreamble + \"done\");\n    }\n\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,62 @@\n+  public boolean rename(Path src, Path dst) throws IOException {\n+\n+    String srcKey \u003d pathToKey(makeAbsolute(src));\n+\n+    if (srcKey.length() \u003d\u003d 0) {\n+      // Cannot rename root of file system\n+      return false;\n+    }\n+\n+    // Figure out the final destination\n+    String dstKey;\n+    try {\n+      boolean dstIsFile \u003d existsAndIsFile(dst);\n+      if (dstIsFile) {\n+        // Attempting to overwrite a file using rename()\n+        return false;\n+      } else {\n+        // Move to within the existent directory\n+        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n+      }\n+    } catch (FileNotFoundException e) {\n+      // dst doesn\u0027t exist, so we can proceed\n+      dstKey \u003d pathToKey(makeAbsolute(dst));\n+      try {\n+        if (!getFileStatus(dst.getParent()).isDir()) {\n+          return false; // parent dst is a file\n+        }\n+      } catch (FileNotFoundException ex) {\n+        return false; // parent dst does not exist\n+      }\n+    }\n+\n+    try {\n+      boolean srcIsFile \u003d existsAndIsFile(src);\n+      if (srcIsFile) {\n+        store.rename(srcKey, dstKey);\n+      } else {\n+        // Move the folder object\n+        store.delete(srcKey + FOLDER_SUFFIX);\n+        store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n+\n+        // Move everything inside the folder\n+        String priorLastKey \u003d null;\n+        do {\n+          PartialListing listing \u003d store.listAll(srcKey, S3_MAX_LISTING_LENGTH,\n+              priorLastKey);\n+          for (FileMetadata file : listing.getFiles()) {\n+            store.rename(file.getKey(), dstKey\n+                + file.getKey().substring(srcKey.length()));\n+          }\n+          priorLastKey \u003d listing.getPriorLastKey();\n+        } while (priorLastKey !\u003d null);\n+      }\n+\n+      createParent(src);\n+      return true;\n+\n+    } catch (FileNotFoundException e) {\n+      // Source file does not exist;\n+      return false;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(Path src, Path dst) throws IOException {\n\n    String srcKey \u003d pathToKey(makeAbsolute(src));\n\n    if (srcKey.length() \u003d\u003d 0) {\n      // Cannot rename root of file system\n      return false;\n    }\n\n    // Figure out the final destination\n    String dstKey;\n    try {\n      boolean dstIsFile \u003d existsAndIsFile(dst);\n      if (dstIsFile) {\n        // Attempting to overwrite a file using rename()\n        return false;\n      } else {\n        // Move to within the existent directory\n        dstKey \u003d pathToKey(makeAbsolute(new Path(dst, src.getName())));\n      }\n    } catch (FileNotFoundException e) {\n      // dst doesn\u0027t exist, so we can proceed\n      dstKey \u003d pathToKey(makeAbsolute(dst));\n      try {\n        if (!getFileStatus(dst.getParent()).isDir()) {\n          return false; // parent dst is a file\n        }\n      } catch (FileNotFoundException ex) {\n        return false; // parent dst does not exist\n      }\n    }\n\n    try {\n      boolean srcIsFile \u003d existsAndIsFile(src);\n      if (srcIsFile) {\n        store.rename(srcKey, dstKey);\n      } else {\n        // Move the folder object\n        store.delete(srcKey + FOLDER_SUFFIX);\n        store.storeEmptyFile(dstKey + FOLDER_SUFFIX);\n\n        // Move everything inside the folder\n        String priorLastKey \u003d null;\n        do {\n          PartialListing listing \u003d store.listAll(srcKey, S3_MAX_LISTING_LENGTH,\n              priorLastKey);\n          for (FileMetadata file : listing.getFiles()) {\n            store.rename(file.getKey(), dstKey\n                + file.getKey().substring(srcKey.length()));\n          }\n          priorLastKey \u003d listing.getPriorLastKey();\n        } while (priorLastKey !\u003d null);\n      }\n\n      createParent(src);\n      return true;\n\n    } catch (FileNotFoundException e) {\n      // Source file does not exist;\n      return false;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java"
    }
  }
}