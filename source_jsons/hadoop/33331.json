{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourcePluginManager.java",
  "functionName": "initialize",
  "functionId": "initialize___context-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
  "functionStartLine": 68,
  "functionEndLine": 91,
  "numCommitsSeen": 13,
  "timeTaken": 5131,
  "changeHistory": [
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
    "e5e609384f68cc45b0c2bfbde0a49426c90017d3",
    "742e30b47381ad63e2b2fe63738cd0fe6cbce106",
    "5e91ebd91a405e1585ef02b8fbf03f10d1398adf",
    "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
    "63578036450f660d49ae204327efcd629d9dd137",
    "f8c72d7b3acca8285bbc3024f491c4586805be1e",
    "7225ec0ceb49ae8f5588484297a20f07ec047420",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd"
  ],
  "changeHistoryShort": {
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b": "Ybodychange",
    "e5e609384f68cc45b0c2bfbde0a49426c90017d3": "Ybodychange",
    "742e30b47381ad63e2b2fe63738cd0fe6cbce106": "Ymodifierchange",
    "5e91ebd91a405e1585ef02b8fbf03f10d1398adf": "Ybodychange",
    "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe": "Ybodychange",
    "63578036450f660d49ae204327efcd629d9dd137": "Yexceptionschange",
    "f8c72d7b3acca8285bbc3024f491c4586805be1e": "Ybodychange",
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Ybodychange",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
      "commitDate": "21/08/19 7:44 AM",
      "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/08/19 7:58 AM",
      "commitNameOld": "e5e609384f68cc45b0c2bfbde0a49426c90017d3",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void initialize(Context context)\n       throws YarnException, ClassNotFoundException {\n     Configuration conf \u003d context.getConf();\n     String[] plugins \u003d getPluginsFromConfig(conf);\n \n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n     if (plugins !\u003d null) {\n-      pluginMap \u003d initializePlugins(context, plugins);\n+      pluginMap \u003d initializePlugins(conf, context, plugins);\n     }\n \n     // Try to load pluggable device plugins\n     boolean pluggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n \n     if (pluggableDeviceFrameworkEnabled) {\n       initializePluggableDevicePlugins(context, conf, pluginMap);\n     } else {\n       LOG.info(\"The pluggable device framework is not enabled.\"\n               + \" If you want, please set true to {}\",\n           YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n     }\n     configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Context context)\n      throws YarnException, ClassNotFoundException {\n    Configuration conf \u003d context.getConf();\n    String[] plugins \u003d getPluginsFromConfig(conf);\n\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n    if (plugins !\u003d null) {\n      pluginMap \u003d initializePlugins(conf, context, plugins);\n    }\n\n    // Try to load pluggable device plugins\n    boolean pluggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (pluggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "e5e609384f68cc45b0c2bfbde0a49426c90017d3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9140. Code cleanup in ResourcePluginManager.initialize and in TestResourcePluginManager. Contributed by Peter Bacsko\n",
      "commitDate": "14/08/19 7:58 AM",
      "commitName": "e5e609384f68cc45b0c2bfbde0a49426c90017d3",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "09/08/19 12:59 AM",
      "commitNameOld": "742e30b47381ad63e2b2fe63738cd0fe6cbce106",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 5.29,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,24 @@\n   public void initialize(Context context)\n       throws YarnException, ClassNotFoundException {\n     Configuration conf \u003d context.getConf();\n-    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n+    String[] plugins \u003d getPluginsFromConfig(conf);\n \n-    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n-    if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n-      LOG.info(\"No Resource plugins found from configuration!\");\n-    }\n-    LOG.info(\"Found Resource plugins from configuration: \"\n-        + Arrays.toString(plugins));\n-\n+    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n     if (plugins !\u003d null) {\n-      // Initialize each plugins\n-      for (String resourceName : plugins) {\n-        resourceName \u003d resourceName.trim();\n-        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n-          String msg \u003d\n-              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n-                  + \", it is not supported, list of supported plugins:\"\n-                  + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n-          LOG.error(msg);\n-          throw new YarnException(msg);\n-        }\n-\n-        if (pluginMap.containsKey(resourceName)) {\n-          LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n-              resourceName);\n-          continue;\n-        }\n-\n-        ResourcePlugin plugin \u003d null;\n-        if (resourceName.equals(GPU_URI)) {\n-          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n-          final GpuNodeResourceUpdateHandler updateHandler \u003d\n-              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n-          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n-        } else if (resourceName.equals(FPGA_URI)) {\n-          plugin \u003d new FpgaResourcePlugin();\n-        }\n-\n-        if (plugin \u003d\u003d null) {\n-          throw new YarnException(\n-              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n-                  + \" should be loaded and initialized\");\n-        }\n-        plugin.initialize(context);\n-        LOG.info(\"Initialized plugin {}\", plugin);\n-        pluginMap.put(resourceName, plugin);\n-      }\n+      pluginMap \u003d initializePlugins(context, plugins);\n     }\n+\n     // Try to load pluggable device plugins\n-    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n+    boolean pluggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n \n-    if (puggableDeviceFrameworkEnabled) {\n+    if (pluggableDeviceFrameworkEnabled) {\n       initializePluggableDevicePlugins(context, conf, pluginMap);\n     } else {\n       LOG.info(\"The pluggable device framework is not enabled.\"\n               + \" If you want, please set true to {}\",\n           YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n     }\n     configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Context context)\n      throws YarnException, ClassNotFoundException {\n    Configuration conf \u003d context.getConf();\n    String[] plugins \u003d getPluginsFromConfig(conf);\n\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n    if (plugins !\u003d null) {\n      pluginMap \u003d initializePlugins(context, plugins);\n    }\n\n    // Try to load pluggable device plugins\n    boolean pluggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (pluggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "742e30b47381ad63e2b2fe63738cd0fe6cbce106": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-9096: Some GpuResourcePlugin and ResourcePluginManager methods are synchronized unnecessarily. Contributed by Gergely Pollak\n",
      "commitDate": "09/08/19 12:59 AM",
      "commitName": "742e30b47381ad63e2b2fe63738cd0fe6cbce106",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "24/02/19 10:00 PM",
      "commitNameOld": "5e91ebd91a405e1585ef02b8fbf03f10d1398adf",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 165.08,
      "commitsBetweenForRepo": 1224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n-  public synchronized void initialize(Context context)\n+  public void initialize(Context context)\n       throws YarnException, ClassNotFoundException {\n     Configuration conf \u003d context.getConf();\n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n \n     String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n     if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n       LOG.info(\"No Resource plugins found from configuration!\");\n     }\n     LOG.info(\"Found Resource plugins from configuration: \"\n         + Arrays.toString(plugins));\n \n     if (plugins !\u003d null) {\n       // Initialize each plugins\n       for (String resourceName : plugins) {\n         resourceName \u003d resourceName.trim();\n         if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n           String msg \u003d\n               \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                   + \", it is not supported, list of supported plugins:\"\n                   + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n           LOG.error(msg);\n           throw new YarnException(msg);\n         }\n \n         if (pluginMap.containsKey(resourceName)) {\n           LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n               resourceName);\n           continue;\n         }\n \n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n           final GpuNodeResourceUpdateHandler updateHandler \u003d\n               new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n           plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n         } else if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         LOG.info(\"Initialized plugin {}\", plugin);\n         pluginMap.put(resourceName, plugin);\n       }\n     }\n     // Try to load pluggable device plugins\n     boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n \n     if (puggableDeviceFrameworkEnabled) {\n       initializePluggableDevicePlugins(context, conf, pluginMap);\n     } else {\n       LOG.info(\"The pluggable device framework is not enabled.\"\n               + \" If you want, please set true to {}\",\n           YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n     }\n     configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Context context)\n      throws YarnException, ClassNotFoundException {\n    Configuration conf \u003d context.getConf();\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n    if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n      LOG.info(\"No Resource plugins found from configuration!\");\n    }\n    LOG.info(\"Found Resource plugins from configuration: \"\n        + Arrays.toString(plugins));\n\n    if (plugins !\u003d null) {\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n              resourceName);\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n          final GpuNodeResourceUpdateHandler updateHandler \u003d\n              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n        } else if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        LOG.info(\"Initialized plugin {}\", plugin);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    // Try to load pluggable device plugins\n    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (puggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "5e91ebd91a405e1585ef02b8fbf03f10d1398adf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9121. Replace GpuDiscoverer.getInstance() to a readable object for easy access control. Contributed by Szilard Nemeth.\n",
      "commitDate": "24/02/19 10:00 PM",
      "commitName": "5e91ebd91a405e1585ef02b8fbf03f10d1398adf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "21/02/19 7:27 PM",
      "commitNameOld": "632d5e8a98bae629f20dd88d391f42dd5029a98d",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 3.11,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,65 @@\n   public synchronized void initialize(Context context)\n       throws YarnException, ClassNotFoundException {\n     Configuration conf \u003d context.getConf();\n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n \n     String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n     if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n       LOG.info(\"No Resource plugins found from configuration!\");\n     }\n     LOG.info(\"Found Resource plugins from configuration: \"\n         + Arrays.toString(plugins));\n \n     if (plugins !\u003d null) {\n       // Initialize each plugins\n       for (String resourceName : plugins) {\n         resourceName \u003d resourceName.trim();\n         if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n           String msg \u003d\n               \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                   + \", it is not supported, list of supported plugins:\"\n                   + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n           LOG.error(msg);\n           throw new YarnException(msg);\n         }\n \n         if (pluginMap.containsKey(resourceName)) {\n           LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n               resourceName);\n           continue;\n         }\n \n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n-          plugin \u003d new GpuResourcePlugin();\n+          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n+          final GpuNodeResourceUpdateHandler updateHandler \u003d\n+              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n+          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n         } else if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         LOG.info(\"Initialized plugin {}\", plugin);\n         pluginMap.put(resourceName, plugin);\n       }\n     }\n     // Try to load pluggable device plugins\n     boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n \n     if (puggableDeviceFrameworkEnabled) {\n       initializePluggableDevicePlugins(context, conf, pluginMap);\n     } else {\n       LOG.info(\"The pluggable device framework is not enabled.\"\n               + \" If you want, please set true to {}\",\n           YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n     }\n     configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Context context)\n      throws YarnException, ClassNotFoundException {\n    Configuration conf \u003d context.getConf();\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n    if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n      LOG.info(\"No Resource plugins found from configuration!\");\n    }\n    LOG.info(\"Found Resource plugins from configuration: \"\n        + Arrays.toString(plugins));\n\n    if (plugins !\u003d null) {\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n              resourceName);\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n          final GpuNodeResourceUpdateHandler updateHandler \u003d\n              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n        } else if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        LOG.info(\"Initialized plugin {}\", plugin);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    // Try to load pluggable device plugins\n    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (puggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9087. Improve logging for initialization of Resource plugins. (Contributed by Szilard Nemeth)\n",
      "commitDate": "10/12/18 11:12 AM",
      "commitName": "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "28/11/18 2:09 PM",
      "commitNameOld": "579ef4be063745c5211127eca83a393ceddc8b79",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.88,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,62 @@\n   public synchronized void initialize(Context context)\n       throws YarnException, ClassNotFoundException {\n     Configuration conf \u003d context.getConf();\n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n \n     String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n+    if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n+      LOG.info(\"No Resource plugins found from configuration!\");\n+    }\n+    LOG.info(\"Found Resource plugins from configuration: \"\n+        + Arrays.toString(plugins));\n+\n     if (plugins !\u003d null) {\n       // Initialize each plugins\n       for (String resourceName : plugins) {\n         resourceName \u003d resourceName.trim();\n         if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n           String msg \u003d\n               \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                   + \", it is not supported, list of supported plugins:\"\n-                  + StringUtils.join(\",\",\n-                  SUPPORTED_RESOURCE_PLUGINS);\n+                  + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n           LOG.error(msg);\n           throw new YarnException(msg);\n         }\n \n         if (pluginMap.containsKey(resourceName)) {\n-          // Duplicated items, ignore ...\n+          LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n+              resourceName);\n           continue;\n         }\n \n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           plugin \u003d new GpuResourcePlugin();\n-        }\n-\n-        if (resourceName.equals(FPGA_URI)) {\n+        } else if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n+        LOG.info(\"Initialized plugin {}\", plugin);\n         pluginMap.put(resourceName, plugin);\n       }\n     }\n     // Try to load pluggable device plugins\n     boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n \n     if (puggableDeviceFrameworkEnabled) {\n       initializePluggableDevicePlugins(context, conf, pluginMap);\n     } else {\n       LOG.info(\"The pluggable device framework is not enabled.\"\n               + \" If you want, please set true to {}\",\n           YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n     }\n     configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Context context)\n      throws YarnException, ClassNotFoundException {\n    Configuration conf \u003d context.getConf();\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n    if (plugins \u003d\u003d null || plugins.length \u003d\u003d 0) {\n      LOG.info(\"No Resource plugins found from configuration!\");\n    }\n    LOG.info(\"Found Resource plugins from configuration: \"\n        + Arrays.toString(plugins));\n\n    if (plugins !\u003d null) {\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          LOG.warn(\"Ignoring duplicate Resource plugin definition: \" +\n              resourceName);\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          plugin \u003d new GpuResourcePlugin();\n        } else if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        LOG.info(\"Initialized plugin {}\", plugin);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    // Try to load pluggable device plugins\n    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (puggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "63578036450f660d49ae204327efcd629d9dd137": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-8881. [YARN-8851] Add basic pluggable device plugin framework. (Zhankun Tang via wangda)\n\nChange-Id: If9a2f68cd4713b4ec932cdeda68106f17437c3d3\n",
      "commitDate": "19/11/18 8:54 AM",
      "commitName": "63578036450f660d49ae204327efcd629d9dd137",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/11/18 8:23 PM",
      "commitNameOld": "f8c72d7b3acca8285bbc3024f491c4586805be1e",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 11.52,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public synchronized void initialize(Context context)\n-      throws YarnException {\n+      throws YarnException, ClassNotFoundException {\n     Configuration conf \u003d context.getConf();\n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n \n     String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n     if (plugins !\u003d null) {\n       // Initialize each plugins\n       for (String resourceName : plugins) {\n         resourceName \u003d resourceName.trim();\n         if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n           String msg \u003d\n               \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                   + \", it is not supported, list of supported plugins:\"\n                   + StringUtils.join(\",\",\n                   SUPPORTED_RESOURCE_PLUGINS);\n           LOG.error(msg);\n           throw new YarnException(msg);\n         }\n \n         if (pluginMap.containsKey(resourceName)) {\n           // Duplicated items, ignore ...\n           continue;\n         }\n \n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           plugin \u003d new GpuResourcePlugin();\n         }\n \n         if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         pluginMap.put(resourceName, plugin);\n       }\n     }\n     // Try to load pluggable device plugins\n     boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n \n     if (puggableDeviceFrameworkEnabled) {\n       initializePluggableDevicePlugins(context, conf, pluginMap);\n     } else {\n       LOG.info(\"The pluggable device framework is not enabled.\"\n               + \" If you want, please set true to {}\",\n           YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n     }\n     configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Context context)\n      throws YarnException, ClassNotFoundException {\n    Configuration conf \u003d context.getConf();\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n    if (plugins !\u003d null) {\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\",\n                  SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          // Duplicated items, ignore ...\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          plugin \u003d new GpuResourcePlugin();\n        }\n\n        if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    // Try to load pluggable device plugins\n    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (puggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {
        "oldValue": "[YarnException]",
        "newValue": "[YarnException, ClassNotFoundException]"
      }
    },
    "f8c72d7b3acca8285bbc3024f491c4586805be1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8880. Add configurations for pluggable plugin framework. Contributed by Zhankun Tang.\n",
      "commitDate": "07/11/18 8:23 PM",
      "commitName": "f8c72d7b3acca8285bbc3024f491c4586805be1e",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/02/18 5:19 AM",
      "commitNameOld": "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5",
      "commitAuthorOld": "fang zhenyi",
      "daysBetweenCommits": 262.63,
      "commitsBetweenForRepo": 2684,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,57 @@\n   public synchronized void initialize(Context context)\n       throws YarnException {\n     Configuration conf \u003d context.getConf();\n+    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n+\n     String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n-\n     if (plugins !\u003d null) {\n-      Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n-\n       // Initialize each plugins\n       for (String resourceName : plugins) {\n         resourceName \u003d resourceName.trim();\n         if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n           String msg \u003d\n               \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                   + \", it is not supported, list of supported plugins:\"\n                   + StringUtils.join(\",\",\n                   SUPPORTED_RESOURCE_PLUGINS);\n           LOG.error(msg);\n           throw new YarnException(msg);\n         }\n \n         if (pluginMap.containsKey(resourceName)) {\n           // Duplicated items, ignore ...\n           continue;\n         }\n \n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           plugin \u003d new GpuResourcePlugin();\n         }\n \n         if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         pluginMap.put(resourceName, plugin);\n       }\n-\n-      configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n     }\n+    // Try to load pluggable device plugins\n+    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n+        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n+\n+    if (puggableDeviceFrameworkEnabled) {\n+      initializePluggableDevicePlugins(context, conf, pluginMap);\n+    } else {\n+      LOG.info(\"The pluggable device framework is not enabled.\"\n+              + \" If you want, please set true to {}\",\n+          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n+    }\n+    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Context context)\n      throws YarnException {\n    Configuration conf \u003d context.getConf();\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n    if (plugins !\u003d null) {\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\",\n                  SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          // Duplicated items, ignore ...\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          plugin \u003d new GpuResourcePlugin();\n        }\n\n        if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    // Try to load pluggable device plugins\n    boolean puggableDeviceFrameworkEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n\n    if (puggableDeviceFrameworkEnabled) {\n      initializePluggableDevicePlugins(context, conf, pluginMap);\n    } else {\n      LOG.info(\"The pluggable device framework is not enabled.\"\n              + \" If you want, please set true to {}\",\n          YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\n    }\n    configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/10/17 11:14 AM",
      "commitNameOld": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 51.03,
      "commitsBetweenForRepo": 379,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,47 @@\n   public synchronized void initialize(Context context)\n       throws YarnException {\n     Configuration conf \u003d context.getConf();\n     String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n \n     if (plugins !\u003d null) {\n       Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n \n       // Initialize each plugins\n       for (String resourceName : plugins) {\n         resourceName \u003d resourceName.trim();\n         if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n           String msg \u003d\n               \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                   + \", it is not supported, list of supported plugins:\"\n                   + StringUtils.join(\",\",\n                   SUPPORTED_RESOURCE_PLUGINS);\n           LOG.error(msg);\n           throw new YarnException(msg);\n         }\n \n         if (pluginMap.containsKey(resourceName)) {\n           // Duplicated items, ignore ...\n           continue;\n         }\n \n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           plugin \u003d new GpuResourcePlugin();\n         }\n \n+        if (resourceName.equals(FPGA_URI)) {\n+          plugin \u003d new FpgaResourcePlugin();\n+        }\n+\n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         pluginMap.put(resourceName, plugin);\n       }\n \n       configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Context context)\n      throws YarnException {\n    Configuration conf \u003d context.getConf();\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n\n    if (plugins !\u003d null) {\n      Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\",\n                  SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          // Duplicated items, ignore ...\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          plugin \u003d new GpuResourcePlugin();\n        }\n\n        if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        pluginMap.put(resourceName, plugin);\n      }\n\n      configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,43 @@\n+  public synchronized void initialize(Context context)\n+      throws YarnException {\n+    Configuration conf \u003d context.getConf();\n+    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n+\n+    if (plugins !\u003d null) {\n+      Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n+\n+      // Initialize each plugins\n+      for (String resourceName : plugins) {\n+        resourceName \u003d resourceName.trim();\n+        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n+          String msg \u003d\n+              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n+                  + \", it is not supported, list of supported plugins:\"\n+                  + StringUtils.join(\",\",\n+                  SUPPORTED_RESOURCE_PLUGINS);\n+          LOG.error(msg);\n+          throw new YarnException(msg);\n+        }\n+\n+        if (pluginMap.containsKey(resourceName)) {\n+          // Duplicated items, ignore ...\n+          continue;\n+        }\n+\n+        ResourcePlugin plugin \u003d null;\n+        if (resourceName.equals(GPU_URI)) {\n+          plugin \u003d new GpuResourcePlugin();\n+        }\n+\n+        if (plugin \u003d\u003d null) {\n+          throw new YarnException(\n+              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n+                  + \" should be loaded and initialized\");\n+        }\n+        plugin.initialize(context);\n+        pluginMap.put(resourceName, plugin);\n+      }\n+\n+      configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Context context)\n      throws YarnException {\n    Configuration conf \u003d context.getConf();\n    String[] plugins \u003d conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\n\n    if (plugins !\u003d null) {\n      Map\u003cString, ResourcePlugin\u003e pluginMap \u003d new HashMap\u003c\u003e();\n\n      // Initialize each plugins\n      for (String resourceName : plugins) {\n        resourceName \u003d resourceName.trim();\n        if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\n          String msg \u003d\n              \"Trying to initialize resource plugin with name\u003d\" + resourceName\n                  + \", it is not supported, list of supported plugins:\"\n                  + StringUtils.join(\",\",\n                  SUPPORTED_RESOURCE_PLUGINS);\n          LOG.error(msg);\n          throw new YarnException(msg);\n        }\n\n        if (pluginMap.containsKey(resourceName)) {\n          // Duplicated items, ignore ...\n          continue;\n        }\n\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          plugin \u003d new GpuResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        pluginMap.put(resourceName, plugin);\n      }\n\n      configuredPlugins \u003d Collections.unmodifiableMap(pluginMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java"
    }
  }
}