{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMCommunicator.java",
  "functionName": "startAllocatorThread",
  "functionId": "startAllocatorThread",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
  "functionStartLine": 302,
  "functionEndLine": 306,
  "numCommitsSeen": 52,
  "timeTaken": 8301,
  "changeHistory": [
    "8dfec7a1979e8f70f8355c096874921d368342ef",
    "f0799c55360e1e77224955f331892390e4361729",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab",
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "78ab699fe93cafbaff8f496be53d26aff40a68b1",
    "1e45b1f1fd38543b0b1233f57fdee1ac4a365332",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58",
    "b304062f1ffee078ea9575dcee5583d43e33508c",
    "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "8dfec7a1979e8f70f8355c096874921d368342ef": "Ybodychange",
    "f0799c55360e1e77224955f331892390e4361729": "Ybodychange",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": "Ybodychange",
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "78ab699fe93cafbaff8f496be53d26aff40a68b1": "Ybodychange",
    "1e45b1f1fd38543b0b1233f57fdee1ac4a365332": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58": "Ybodychange",
    "b304062f1ffee078ea9575dcee5583d43e33508c": "Ybodychange",
    "68328ae92632afc9cdd6e75b7a8d832723ddbe3b": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8dfec7a1979e8f70f8355c096874921d368342ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6439. AM may fail instead of retrying if RM shuts down during the allocate call. (Anubhav Dhoot via kasha)\n",
      "commitDate": "15/08/15 12:52 AM",
      "commitName": "8dfec7a1979e8f70f8355c096874921d368342ef",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/12/14 10:12 PM",
      "commitNameOld": "0bd022911013629a8c9e7357fae8cf4399d7a1e3",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 246.07,
      "commitsBetweenForRepo": 1920,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,5 @@\n   protected void startAllocatorThread() {\n-    allocatorThread \u003d new Thread(new Runnable() {\n-      @Override\n-      public void run() {\n-        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-          try {\n-            Thread.sleep(rmPollInterval);\n-            try {\n-              heartbeat();\n-            } catch (YarnRuntimeException e) {\n-              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n-              return;\n-            } catch (Exception e) {\n-              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n-              continue;\n-              // TODO: for other exceptions\n-            }\n-\n-            lastHeartbeatTime \u003d context.getClock().getTime();\n-            executeHeartbeatCallbacks();\n-          } catch (InterruptedException e) {\n-            if (!stopped.get()) {\n-              LOG.warn(\"Allocated thread interrupted. Returning.\");\n-            }\n-            return;\n-          }\n-        }\n-      }\n-    });\n+    allocatorThread \u003d new Thread(new AllocatorRunnable());\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new AllocatorRunnable());\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "f0799c55360e1e77224955f331892390e4361729": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5562. Fixed MR App Master to perform pending tasks like staging-dir cleanup, sending job-end notification correctly when unregister with RM fails. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 1:53 PM",
      "commitName": "f0799c55360e1e77224955f331892390e4361729",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/10/13 3:52 PM",
      "commitNameOld": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.92,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n-      @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnRuntimeException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               continue;\n               // TODO: for other exceptions\n             }\n \n             lastHeartbeatTime \u003d context.getClock().getTime();\n             executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1116. Populate AMRMTokens back to AMRMTokenSecretManager after RM restarts (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:51 PM",
      "commitName": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "21/08/13 11:16 AM",
      "commitNameOld": "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.23,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,33 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnRuntimeException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n-            } catch (InvalidToken e) {\n-              // This can happen if the RM has been restarted, since currently\n-              // when RM restarts AMRMToken is not populated back to\n-              // AMRMTokenSecretManager yet. Once this is fixed, no need\n-              // to send JOB_AM_REBOOT event in this method any more.\n-              eventHandler.handle(new JobEvent(job.getID(),\n-                JobEventType.JOB_AM_REBOOT));\n-              LOG.error(\"Error in authencating with RM: \" ,e);\n-              return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               continue;\n               // TODO: for other exceptions\n             }\n \n             lastHeartbeatTime \u003d context.getClock().getTime();\n             executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5466. Changed MR AM to not promote history files of intermediate AMs in case they are exiting because of errors and thus help history-server pick up the right history file for the last successful AM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 11:16 AM",
      "commitName": "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/07/13 5:57 PM",
      "commitNameOld": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 33.72,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,42 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n+      @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnRuntimeException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n+            } catch (InvalidToken e) {\n+              // This can happen if the RM has been restarted, since currently\n+              // when RM restarts AMRMToken is not populated back to\n+              // AMRMTokenSecretManager yet. Once this is fixed, no need\n+              // to send JOB_AM_REBOOT event in this method any more.\n+              eventHandler.handle(new JobEvent(job.getID(),\n+                JobEventType.JOB_AM_REBOOT));\n+              LOG.error(\"Error in authencating with RM: \" ,e);\n+              return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               continue;\n               // TODO: for other exceptions\n             }\n \n             lastHeartbeatTime \u003d context.getClock().getTime();\n             executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (InvalidToken e) {\n              // This can happen if the RM has been restarted, since currently\n              // when RM restarts AMRMToken is not populated back to\n              // AMRMTokenSecretManager yet. Once this is fixed, no need\n              // to send JOB_AM_REBOOT event in this method any more.\n              eventHandler.handle(new JobEvent(job.getID(),\n                JobEventType.JOB_AM_REBOOT));\n              LOG.error(\"Error in authencating with RM: \" ,e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/04/13 7:50 PM",
      "commitNameOld": "e96077aaf4846a9c49c2012359b0e70aaba242e1",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 40.05,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n-            } catch (YarnException e) {\n+            } catch (YarnRuntimeException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               continue;\n               // TODO: for other exceptions\n             }\n \n             lastHeartbeatTime \u003d context.getClock().getTime();\n             executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "78ab699fe93cafbaff8f496be53d26aff40a68b1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4832. MR AM can get in a split brain situation. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 11:15 AM",
      "commitName": "78ab699fe93cafbaff8f496be53d26aff40a68b1",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "24/10/12 8:45 AM",
      "commitNameOld": "1e45b1f1fd38543b0b1233f57fdee1ac4a365332",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 72.15,
      "commitsBetweenForRepo": 297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n+              continue;\n               // TODO: for other exceptions\n             }\n+\n+            lastHeartbeatTime \u003d context.getClock().getTime();\n+            executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "1e45b1f1fd38543b0b1233f57fdee1ac4a365332": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4741. WARN and ERROR messages logged during normal AM shutdown. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401738 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 8:45 AM",
      "commitName": "1e45b1f1fd38543b0b1233f57fdee1ac4a365332",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "18/10/12 10:57 PM",
      "commitNameOld": "022f7b4a25c73b8c43985e8d1bac717b96373ac6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.41,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               // TODO: for other exceptions\n             }\n           } catch (InterruptedException e) {\n-            LOG.warn(\"Allocated thread interrupted. Returning.\");\n+            if (!stopped.get()) {\n+              LOG.warn(\"Allocated thread interrupted. Returning.\");\n+            }\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "04/01/12 5:37 PM",
      "commitNameOld": "08f8abf5639d39167952dc5120b44fe35c63ff7a",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 32.85,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               // TODO: for other exceptions\n             }\n           } catch (InterruptedException e) {\n-            LOG.info(\"Allocated thread interrupted. Returning.\");\n+            LOG.warn(\"Allocated thread interrupted. Returning.\");\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            LOG.warn(\"Allocated thread interrupted. Returning.\");\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3426. Fixed MR AM in uber mode to write map intermediate outputs in the correct directory to work properly in secure mode. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213987 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:35 PM",
      "commitName": "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/10/11 6:40 PM",
      "commitNameOld": "b304062f1ffee078ea9575dcee5583d43e33508c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 46.91,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n-        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               // TODO: for other exceptions\n             }\n           } catch (InterruptedException e) {\n             LOG.info(\"Allocated thread interrupted. Returning.\");\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            LOG.info(\"Allocated thread interrupted. Returning.\");\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "b304062f1ffee078ea9575dcee5583d43e33508c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3186. User jobs are getting hanged if the Resource manager process goes down and comes up while job is getting executed. (Eric Payne via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 6:40 PM",
      "commitName": "b304062f1ffee078ea9575dcee5583d43e33508c",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "20/10/11 4:45 AM",
      "commitNameOld": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.58,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n+            } catch (YarnException e) {\n+              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n+              return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               // TODO: for other exceptions\n             }\n           } catch (InterruptedException e) {\n             LOG.info(\"Allocated thread interrupted. Returning.\");\n             return;\n           }\n         }\n       }\n     });\n     allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            LOG.info(\"Allocated thread interrupted. Returning.\");\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "68328ae92632afc9cdd6e75b7a8d832723ddbe3b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3187. Add names for various unnamed threads in MR2. (Todd Lipcon and Siddharth Seth via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1184904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/11 12:27 PM",
      "commitName": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "05/10/11 4:43 AM",
      "commitNameOld": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.32,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   protected void startAllocatorThread() {\n     allocatorThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               // TODO: for other exceptions\n             }\n           } catch (InterruptedException e) {\n             LOG.info(\"Allocated thread interrupted. Returning.\");\n             return;\n           }\n         }\n       }\n     });\n+    allocatorThread.setName(\"RMCommunicator Allocator\");\n     allocatorThread.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            LOG.info(\"Allocated thread interrupted. Returning.\");\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.setName(\"RMCommunicator Allocator\");\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            LOG.info(\"Allocated thread interrupted. Returning.\");\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  protected void startAllocatorThread() {\n+    allocatorThread \u003d new Thread(new Runnable() {\n+      @Override\n+      public void run() {\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          try {\n+            Thread.sleep(rmPollInterval);\n+            try {\n+              heartbeat();\n+            } catch (Exception e) {\n+              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n+              // TODO: for other exceptions\n+            }\n+          } catch (InterruptedException e) {\n+            LOG.info(\"Allocated thread interrupted. Returning.\");\n+            return;\n+          }\n+        }\n+      }\n+    });\n+    allocatorThread.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startAllocatorThread() {\n    allocatorThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              // TODO: for other exceptions\n            }\n          } catch (InterruptedException e) {\n            LOG.info(\"Allocated thread interrupted. Returning.\");\n            return;\n          }\n        }\n      }\n    });\n    allocatorThread.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
    }
  }
}