{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileIoProvider.java",
  "functionName": "mkdirs",
  "functionId": "mkdirs___volume-FsVolumeSpi(annotations-@Nullable)__dir-File",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FileIoProvider.java",
  "functionStartLine": 648,
  "functionEndLine": 667,
  "numCommitsSeen": 12,
  "timeTaken": 2237,
  "changeHistory": [
    "4046794a5365f80f9fa002e3889e41c6d29e13a8",
    "603f3ef1386048111940b66f3a0750ab84d0588f",
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389"
  ],
  "changeHistoryShort": {
    "4046794a5365f80f9fa002e3889e41c6d29e13a8": "Ybodychange",
    "603f3ef1386048111940b66f3a0750ab84d0588f": "Ybodychange",
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4046794a5365f80f9fa002e3889e41c6d29e13a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11299. Support multiple Datanode File IO hooks. Contributed by Hanisha Koneru.\n",
      "commitDate": "10/01/17 10:43 AM",
      "commitName": "4046794a5365f80f9fa002e3889e41c6d29e13a8",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "28/12/16 10:08 PM",
      "commitNameOld": "603f3ef1386048111940b66f3a0750ab84d0588f",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 12.52,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   public boolean mkdirs(\n       @Nullable FsVolumeSpi volume, File dir) throws IOException {\n-    final long begin \u003d eventHooks.beforeMetadataOp(volume, MKDIRS);\n+    final long begin \u003d profilingEventHook.beforeMetadataOp(volume, MKDIRS);\n     boolean created \u003d false;\n     boolean isDirectory;\n     try {\n+      faultInjectorEventHook.beforeMetadataOp(volume, MKDIRS);\n       created \u003d dir.mkdirs();\n       isDirectory \u003d !created \u0026\u0026 dir.isDirectory();\n-      eventHooks.afterMetadataOp(volume, MKDIRS, begin);\n+      profilingEventHook.afterMetadataOp(volume, MKDIRS, begin);\n     } catch(Exception e) {\n-      eventHooks.onFailure(datanode, volume, MKDIRS, e, begin);\n+      onFailure(volume, begin);\n       throw e;\n     }\n \n     if (!created \u0026\u0026 !isDirectory) {\n       throw new IOException(\"Mkdirs failed to create \" + dir);\n     }\n     return created;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(\n      @Nullable FsVolumeSpi volume, File dir) throws IOException {\n    final long begin \u003d profilingEventHook.beforeMetadataOp(volume, MKDIRS);\n    boolean created \u003d false;\n    boolean isDirectory;\n    try {\n      faultInjectorEventHook.beforeMetadataOp(volume, MKDIRS);\n      created \u003d dir.mkdirs();\n      isDirectory \u003d !created \u0026\u0026 dir.isDirectory();\n      profilingEventHook.afterMetadataOp(volume, MKDIRS, begin);\n    } catch(Exception e) {\n      onFailure(volume, begin);\n      throw e;\n    }\n\n    if (!created \u0026\u0026 !isDirectory) {\n      throw new IOException(\"Mkdirs failed to create \" + dir);\n    }\n    return created;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FileIoProvider.java",
      "extendedDetails": {}
    },
    "603f3ef1386048111940b66f3a0750ab84d0588f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.\n",
      "commitDate": "28/12/16 10:08 PM",
      "commitName": "603f3ef1386048111940b66f3a0750ab84d0588f",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "14/12/16 11:18 AM",
      "commitNameOld": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 14.45,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public boolean mkdirs(\n       @Nullable FsVolumeSpi volume, File dir) throws IOException {\n     final long begin \u003d eventHooks.beforeMetadataOp(volume, MKDIRS);\n     boolean created \u003d false;\n     boolean isDirectory;\n     try {\n       created \u003d dir.mkdirs();\n       isDirectory \u003d !created \u0026\u0026 dir.isDirectory();\n       eventHooks.afterMetadataOp(volume, MKDIRS, begin);\n     } catch(Exception e) {\n-      eventHooks.onFailure(volume, MKDIRS, e, begin);\n+      eventHooks.onFailure(datanode, volume, MKDIRS, e, begin);\n       throw e;\n     }\n \n     if (!created \u0026\u0026 !isDirectory) {\n       throw new IOException(\"Mkdirs failed to create \" + dir);\n     }\n     return created;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(\n      @Nullable FsVolumeSpi volume, File dir) throws IOException {\n    final long begin \u003d eventHooks.beforeMetadataOp(volume, MKDIRS);\n    boolean created \u003d false;\n    boolean isDirectory;\n    try {\n      created \u003d dir.mkdirs();\n      isDirectory \u003d !created \u0026\u0026 dir.isDirectory();\n      eventHooks.afterMetadataOp(volume, MKDIRS, begin);\n    } catch(Exception e) {\n      eventHooks.onFailure(datanode, volume, MKDIRS, e, begin);\n      throw e;\n    }\n\n    if (!created \u0026\u0026 !isDirectory) {\n      throw new IOException(\"Mkdirs failed to create \" + dir);\n    }\n    return created;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FileIoProvider.java",
      "extendedDetails": {}
    },
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
      "commitDate": "14/12/16 11:18 AM",
      "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,19 @@\n+  public boolean mkdirs(\n+      @Nullable FsVolumeSpi volume, File dir) throws IOException {\n+    final long begin \u003d eventHooks.beforeMetadataOp(volume, MKDIRS);\n+    boolean created \u003d false;\n+    boolean isDirectory;\n+    try {\n+      created \u003d dir.mkdirs();\n+      isDirectory \u003d !created \u0026\u0026 dir.isDirectory();\n+      eventHooks.afterMetadataOp(volume, MKDIRS, begin);\n+    } catch(Exception e) {\n+      eventHooks.onFailure(volume, MKDIRS, e, begin);\n+      throw e;\n+    }\n+\n+    if (!created \u0026\u0026 !isDirectory) {\n+      throw new IOException(\"Mkdirs failed to create \" + dir);\n+    }\n+    return created;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(\n      @Nullable FsVolumeSpi volume, File dir) throws IOException {\n    final long begin \u003d eventHooks.beforeMetadataOp(volume, MKDIRS);\n    boolean created \u003d false;\n    boolean isDirectory;\n    try {\n      created \u003d dir.mkdirs();\n      isDirectory \u003d !created \u0026\u0026 dir.isDirectory();\n      eventHooks.afterMetadataOp(volume, MKDIRS, begin);\n    } catch(Exception e) {\n      eventHooks.onFailure(volume, MKDIRS, e, begin);\n      throw e;\n    }\n\n    if (!created \u0026\u0026 !isDirectory) {\n      throw new IOException(\"Mkdirs failed to create \" + dir);\n    }\n    return created;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FileIoProvider.java"
    }
  }
}