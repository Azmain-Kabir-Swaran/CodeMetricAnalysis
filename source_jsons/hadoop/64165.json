{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3ADelegationTokens.java",
  "functionName": "createDelegationToken",
  "functionId": "createDelegationToken___encryptionSecrets-EncryptionSecrets(modifiers-final)__renewer-Text(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/S3ADelegationTokens.java",
  "functionStartLine": 414,
  "functionEndLine": 438,
  "numCommitsSeen": 14,
  "timeTaken": 3413,
  "changeHistory": [
    "2bbf73f1df96ebe7e6fcf64a724ae846230a8487",
    "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502"
  ],
  "changeHistoryShort": {
    "2bbf73f1df96ebe7e6fcf64a724ae846230a8487": "Ybodychange",
    "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a": "Ymultichange(Yparameterchange,Ybodychange)",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2bbf73f1df96ebe7e6fcf64a724ae846230a8487": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16645. S3A Delegation Token extension point to use StoreContext.\n\nContributed by Steve Loughran.\n\nThis is part of the ongoing refactoring of the S3A codebase, with the\ndelegation token support (HADOOP-14556) no longer given a direct reference\nto the owning S3AFileSystem. Instead it gets a StoreContext and a new\ninterface, DelegationOperations, to access those operations offered by S3AFS\nwhich are specifically needed by the DT bindings.\n\nThe sole operation needed is listAWSPolicyRules(), which is used to allow\nS3A FS and the S3Guard metastore to return the AWS policy rules needed to\naccess their specific services/buckets/tables, allowing the AssumedRole\ndelegation token to be locked down.\n\nAs further restructuring takes place, that interface\u0027s implementation\ncan be moved to wherever the new home for those operations ends up.\n\nAlthough it changes the API of an extension point, that feature (S3\nDelegation Tokens) has not shipped; backwards compatibility is not a\nproblem except for anyone who has implemented DT support against trunk.\nTo those developers: sorry.\n\nChange-Id: I770f58b49ff7634a34875ba37b7d51c94d7c21da\n",
      "commitDate": "07/01/20 3:17 AM",
      "commitName": "2bbf73f1df96ebe7e6fcf64a724ae846230a8487",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/10/19 8:32 AM",
      "commitNameOld": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
      "commitAuthorOld": "Phil Zampino",
      "daysBetweenCommits": 75.82,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n       final EncryptionSecrets encryptionSecrets,\n       final Text renewer) throws IOException {\n     requireServiceStarted();\n     checkArgument(encryptionSecrets !\u003d null,\n         \"Null encryption secrets\");\n     // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n     // filesystem before it can generate complete policies.\n-    List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n+    List\u003cRoleModel.Statement\u003e statements \u003d getPolicyProvider()\n         .listAWSPolicyRules(ACCESS_POLICY);\n     Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n         statements.isEmpty() ?\n             Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n \n     try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n         \"Creating New Delegation Token\", tokenBinding.getKind())) {\n       Token\u003cAbstractS3ATokenIdentifier\u003e token\n           \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets, renewer);\n       if (token !\u003d null) {\n         token.setService(service);\n         noteTokenCreated(token);\n       }\n       return token;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n      final EncryptionSecrets encryptionSecrets,\n      final Text renewer) throws IOException {\n    requireServiceStarted();\n    checkArgument(encryptionSecrets !\u003d null,\n        \"Null encryption secrets\");\n    // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n    // filesystem before it can generate complete policies.\n    List\u003cRoleModel.Statement\u003e statements \u003d getPolicyProvider()\n        .listAWSPolicyRules(ACCESS_POLICY);\n    Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n        statements.isEmpty() ?\n            Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n\n    try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n        \"Creating New Delegation Token\", tokenBinding.getKind())) {\n      Token\u003cAbstractS3ATokenIdentifier\u003e token\n          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets, renewer);\n      if (token !\u003d null) {\n        token.setService(service);\n        noteTokenCreated(token);\n      }\n      return token;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/S3ADelegationTokens.java",
      "extendedDetails": {}
    },
    "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16658. S3A connector does not support including the token renewer in the token identifier.\n\nContributed by Phil Zampino.\n\nChange-Id: Iea9d5028dcf58bda4da985604f5cd3ac283619bd\n",
      "commitDate": "23/10/19 8:32 AM",
      "commitName": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
      "commitAuthor": "Phil Zampino",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16658. S3A connector does not support including the token renewer in the token identifier.\n\nContributed by Phil Zampino.\n\nChange-Id: Iea9d5028dcf58bda4da985604f5cd3ac283619bd\n",
          "commitDate": "23/10/19 8:32 AM",
          "commitName": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
          "commitAuthor": "Phil Zampino",
          "commitDateOld": "14/08/19 1:50 AM",
          "commitNameOld": "0e4b757955ae8da1651b870c12458e3344c0b613",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 70.28,
          "commitsBetweenForRepo": 556,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n   public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n-      final EncryptionSecrets encryptionSecrets) throws IOException {\n+      final EncryptionSecrets encryptionSecrets,\n+      final Text renewer) throws IOException {\n     requireServiceStarted();\n     checkArgument(encryptionSecrets !\u003d null,\n         \"Null encryption secrets\");\n     // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n     // filesystem before it can generate complete policies.\n     List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n         .listAWSPolicyRules(ACCESS_POLICY);\n     Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n         statements.isEmpty() ?\n             Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n \n     try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n         \"Creating New Delegation Token\", tokenBinding.getKind())) {\n       Token\u003cAbstractS3ATokenIdentifier\u003e token\n-          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets);\n+          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets, renewer);\n       if (token !\u003d null) {\n         token.setService(service);\n         noteTokenCreated(token);\n       }\n       return token;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n      final EncryptionSecrets encryptionSecrets,\n      final Text renewer) throws IOException {\n    requireServiceStarted();\n    checkArgument(encryptionSecrets !\u003d null,\n        \"Null encryption secrets\");\n    // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n    // filesystem before it can generate complete policies.\n    List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n        .listAWSPolicyRules(ACCESS_POLICY);\n    Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n        statements.isEmpty() ?\n            Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n\n    try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n        \"Creating New Delegation Token\", tokenBinding.getKind())) {\n      Token\u003cAbstractS3ATokenIdentifier\u003e token\n          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets, renewer);\n      if (token !\u003d null) {\n        token.setService(service);\n        noteTokenCreated(token);\n      }\n      return token;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/S3ADelegationTokens.java",
          "extendedDetails": {
            "oldValue": "[encryptionSecrets-EncryptionSecrets(modifiers-final)]",
            "newValue": "[encryptionSecrets-EncryptionSecrets(modifiers-final), renewer-Text(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16658. S3A connector does not support including the token renewer in the token identifier.\n\nContributed by Phil Zampino.\n\nChange-Id: Iea9d5028dcf58bda4da985604f5cd3ac283619bd\n",
          "commitDate": "23/10/19 8:32 AM",
          "commitName": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
          "commitAuthor": "Phil Zampino",
          "commitDateOld": "14/08/19 1:50 AM",
          "commitNameOld": "0e4b757955ae8da1651b870c12458e3344c0b613",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 70.28,
          "commitsBetweenForRepo": 556,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n   public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n-      final EncryptionSecrets encryptionSecrets) throws IOException {\n+      final EncryptionSecrets encryptionSecrets,\n+      final Text renewer) throws IOException {\n     requireServiceStarted();\n     checkArgument(encryptionSecrets !\u003d null,\n         \"Null encryption secrets\");\n     // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n     // filesystem before it can generate complete policies.\n     List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n         .listAWSPolicyRules(ACCESS_POLICY);\n     Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n         statements.isEmpty() ?\n             Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n \n     try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n         \"Creating New Delegation Token\", tokenBinding.getKind())) {\n       Token\u003cAbstractS3ATokenIdentifier\u003e token\n-          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets);\n+          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets, renewer);\n       if (token !\u003d null) {\n         token.setService(service);\n         noteTokenCreated(token);\n       }\n       return token;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n      final EncryptionSecrets encryptionSecrets,\n      final Text renewer) throws IOException {\n    requireServiceStarted();\n    checkArgument(encryptionSecrets !\u003d null,\n        \"Null encryption secrets\");\n    // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n    // filesystem before it can generate complete policies.\n    List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n        .listAWSPolicyRules(ACCESS_POLICY);\n    Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n        statements.isEmpty() ?\n            Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n\n    try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n        \"Creating New Delegation Token\", tokenBinding.getKind())) {\n      Token\u003cAbstractS3ATokenIdentifier\u003e token\n          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets, renewer);\n      if (token !\u003d null) {\n        token.setService(service);\n        noteTokenCreated(token);\n      }\n      return token;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/S3ADelegationTokens.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,24 @@\n+  public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n+      final EncryptionSecrets encryptionSecrets) throws IOException {\n+    requireServiceStarted();\n+    checkArgument(encryptionSecrets !\u003d null,\n+        \"Null encryption secrets\");\n+    // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n+    // filesystem before it can generate complete policies.\n+    List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n+        .listAWSPolicyRules(ACCESS_POLICY);\n+    Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n+        statements.isEmpty() ?\n+            Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n+\n+    try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n+        \"Creating New Delegation Token\", tokenBinding.getKind())) {\n+      Token\u003cAbstractS3ATokenIdentifier\u003e token\n+          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets);\n+      if (token !\u003d null) {\n+        token.setService(service);\n+        noteTokenCreated(token);\n+      }\n+      return token;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cAbstractS3ATokenIdentifier\u003e createDelegationToken(\n      final EncryptionSecrets encryptionSecrets) throws IOException {\n    requireServiceStarted();\n    checkArgument(encryptionSecrets !\u003d null,\n        \"Null encryption secrets\");\n    // this isn\u0027t done in in advance as it needs S3Guard initialized in the\n    // filesystem before it can generate complete policies.\n    List\u003cRoleModel.Statement\u003e statements \u003d getFileSystem()\n        .listAWSPolicyRules(ACCESS_POLICY);\n    Optional\u003cRoleModel.Policy\u003e rolePolicy \u003d\n        statements.isEmpty() ?\n            Optional.empty() : Optional.of(new RoleModel.Policy(statements));\n\n    try(DurationInfo ignored \u003d new DurationInfo(LOG, DURATION_LOG_AT_INFO,\n        \"Creating New Delegation Token\", tokenBinding.getKind())) {\n      Token\u003cAbstractS3ATokenIdentifier\u003e token\n          \u003d tokenBinding.createDelegationToken(rolePolicy, encryptionSecrets);\n      if (token !\u003d null) {\n        token.setService(service);\n        noteTokenCreated(token);\n      }\n      return token;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/S3ADelegationTokens.java"
    }
  }
}