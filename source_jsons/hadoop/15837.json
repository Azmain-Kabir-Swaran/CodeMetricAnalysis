{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSOperations.java",
  "functionName": "toJsonInner",
  "functionId": "toJsonInner___fileStatus-FileStatus__emptyPathSuffix-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
  "functionStartLine": 108,
  "functionEndLine": 155,
  "numCommitsSeen": 61,
  "timeTaken": 4668,
  "changeHistory": [
    "074050ca595a81927c867951e48cef132a0284be",
    "6ae8bc3a4a07c6b4e7060362b749be8c7afe0560",
    "44857476fa993fbf9c97f979b91e19d27632c10a",
    "52b00600df921763725396ed92194d3338167655",
    "cba973f036a2c8fcc21a5826b8306247ec154c7b",
    "bb84f1fccb18c6c7373851e05d2451d55e908242",
    "a7bcc9535860214380e235641d1d5d2dd15aee58",
    "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0"
  ],
  "changeHistoryShort": {
    "074050ca595a81927c867951e48cef132a0284be": "Ybodychange",
    "6ae8bc3a4a07c6b4e7060362b749be8c7afe0560": "Ybodychange",
    "44857476fa993fbf9c97f979b91e19d27632c10a": "Ybodychange",
    "52b00600df921763725396ed92194d3338167655": "Ybodychange",
    "cba973f036a2c8fcc21a5826b8306247ec154c7b": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange",
    "a7bcc9535860214380e235641d1d5d2dd15aee58": "Ybodychange",
    "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "074050ca595a81927c867951e48cef132a0284be": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15063. HttpFS: getFileStatus doesn\u0027t return ecPolicy. Contributed by hemanthboyina.\n",
      "commitDate": "31/12/19 6:26 PM",
      "commitName": "074050ca595a81927c867951e48cef132a0284be",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "02/12/19 4:38 PM",
      "commitNameOld": "4ede8bce28aadc62007ad65dc6d44be550632b5f",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 29.08,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,48 @@\n   private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n       boolean emptyPathSuffix) {\n     Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n     json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n         (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n     json.put(HttpFSFileSystem.TYPE_JSON,\n         HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n     json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n     json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n     json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n     json.put(HttpFSFileSystem.PERMISSION_JSON,\n         HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n     json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n     json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n         fileStatus.getModificationTime());\n     json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n     json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n     if (fileStatus instanceof HdfsFileStatus) {\n       // Add HDFS-specific fields to response\n       HdfsFileStatus hdfsFileStatus \u003d (HdfsFileStatus) fileStatus;\n       json.put(HttpFSFileSystem.CHILDREN_NUM_JSON,\n           hdfsFileStatus.getChildrenNum());\n       json.put(HttpFSFileSystem.FILE_ID_JSON,\n           hdfsFileStatus.getFileId());\n       json.put(HttpFSFileSystem.STORAGEPOLICY_JSON,\n           hdfsFileStatus.getStoragePolicy());\n+      if (hdfsFileStatus.getErasureCodingPolicy() !\u003d null) {\n+        json.put(HttpFSFileSystem.ECPOLICYNAME_JSON,\n+            hdfsFileStatus.getErasureCodingPolicy().getName());\n+        json.put(HttpFSFileSystem.ECPOLICY_JSON,\n+            JsonUtil.getEcPolicyAsMap(\n+                hdfsFileStatus.getErasureCodingPolicy()));\n+      }\n     }\n     if (fileStatus.getPermission().getAclBit()) {\n       json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getEncryptedBit()) {\n       json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getErasureCodedBit()) {\n       json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n     }\n     if (fileStatus.isSnapshotEnabled()) {\n       json.put(HttpFSFileSystem.SNAPSHOT_BIT_JSON, true);\n     }\n     return json;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus instanceof HdfsFileStatus) {\n      // Add HDFS-specific fields to response\n      HdfsFileStatus hdfsFileStatus \u003d (HdfsFileStatus) fileStatus;\n      json.put(HttpFSFileSystem.CHILDREN_NUM_JSON,\n          hdfsFileStatus.getChildrenNum());\n      json.put(HttpFSFileSystem.FILE_ID_JSON,\n          hdfsFileStatus.getFileId());\n      json.put(HttpFSFileSystem.STORAGEPOLICY_JSON,\n          hdfsFileStatus.getStoragePolicy());\n      if (hdfsFileStatus.getErasureCodingPolicy() !\u003d null) {\n        json.put(HttpFSFileSystem.ECPOLICYNAME_JSON,\n            hdfsFileStatus.getErasureCodingPolicy().getName());\n        json.put(HttpFSFileSystem.ECPOLICY_JSON,\n            JsonUtil.getEcPolicyAsMap(\n                hdfsFileStatus.getErasureCodingPolicy()));\n      }\n    }\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getErasureCodedBit()) {\n      json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n    }\n    if (fileStatus.isSnapshotEnabled()) {\n      json.put(HttpFSFileSystem.SNAPSHOT_BIT_JSON, true);\n    }\n    return json;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
      "extendedDetails": {}
    },
    "6ae8bc3a4a07c6b4e7060362b749be8c7afe0560": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14665. HttpFS: LISTSTATUS response is missing HDFS-specific fields (#1267) Contributed by Siyao Meng.\n\n",
      "commitDate": "13/08/19 4:27 PM",
      "commitName": "6ae8bc3a4a07c6b4e7060362b749be8c7afe0560",
      "commitAuthor": "Siyao Meng",
      "commitDateOld": "01/08/19 5:15 PM",
      "commitNameOld": "17e8cf501b384af93726e4f2e6f5e28c6e3a8f65",
      "commitAuthorOld": "Siyao Meng",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,41 @@\n   private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n       boolean emptyPathSuffix) {\n     Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n     json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n         (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n     json.put(HttpFSFileSystem.TYPE_JSON,\n         HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n     json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n     json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n     json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n     json.put(HttpFSFileSystem.PERMISSION_JSON,\n         HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n     json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n     json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n         fileStatus.getModificationTime());\n     json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n     json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n+    if (fileStatus instanceof HdfsFileStatus) {\n+      // Add HDFS-specific fields to response\n+      HdfsFileStatus hdfsFileStatus \u003d (HdfsFileStatus) fileStatus;\n+      json.put(HttpFSFileSystem.CHILDREN_NUM_JSON,\n+          hdfsFileStatus.getChildrenNum());\n+      json.put(HttpFSFileSystem.FILE_ID_JSON,\n+          hdfsFileStatus.getFileId());\n+      json.put(HttpFSFileSystem.STORAGEPOLICY_JSON,\n+          hdfsFileStatus.getStoragePolicy());\n+    }\n     if (fileStatus.getPermission().getAclBit()) {\n       json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getEncryptedBit()) {\n       json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getErasureCodedBit()) {\n       json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n     }\n     if (fileStatus.isSnapshotEnabled()) {\n       json.put(HttpFSFileSystem.SNAPSHOT_BIT_JSON, true);\n     }\n     return json;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus instanceof HdfsFileStatus) {\n      // Add HDFS-specific fields to response\n      HdfsFileStatus hdfsFileStatus \u003d (HdfsFileStatus) fileStatus;\n      json.put(HttpFSFileSystem.CHILDREN_NUM_JSON,\n          hdfsFileStatus.getChildrenNum());\n      json.put(HttpFSFileSystem.FILE_ID_JSON,\n          hdfsFileStatus.getFileId());\n      json.put(HttpFSFileSystem.STORAGEPOLICY_JSON,\n          hdfsFileStatus.getStoragePolicy());\n    }\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getErasureCodedBit()) {\n      json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n    }\n    if (fileStatus.isSnapshotEnabled()) {\n      json.put(HttpFSFileSystem.SNAPSHOT_BIT_JSON, true);\n    }\n    return json;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
      "extendedDetails": {}
    },
    "44857476fa993fbf9c97f979b91e19d27632c10a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13886. HttpFSFileSystem.getFileStatus() doesn\u0027t return \"snapshot enabled\" bit. Contributed by Siyao Meng.\n",
      "commitDate": "18/09/18 3:33 PM",
      "commitName": "44857476fa993fbf9c97f979b91e19d27632c10a",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "06/03/18 9:57 AM",
      "commitNameOld": "9276ef066586a704f6898b670515029b5e3a20eb",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 196.19,
      "commitsBetweenForRepo": 2098,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n       boolean emptyPathSuffix) {\n     Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n     json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n         (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n     json.put(HttpFSFileSystem.TYPE_JSON,\n         HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n     json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n     json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n     json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n     json.put(HttpFSFileSystem.PERMISSION_JSON,\n         HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n     json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n     json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n         fileStatus.getModificationTime());\n     json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n     json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n     if (fileStatus.getPermission().getAclBit()) {\n       json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getEncryptedBit()) {\n       json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getErasureCodedBit()) {\n       json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n     }\n+    if (fileStatus.isSnapshotEnabled()) {\n+      json.put(HttpFSFileSystem.SNAPSHOT_BIT_JSON, true);\n+    }\n     return json;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getErasureCodedBit()) {\n      json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n    }\n    if (fileStatus.isSnapshotEnabled()) {\n      json.put(HttpFSFileSystem.SNAPSHOT_BIT_JSON, true);\n    }\n    return json;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
      "extendedDetails": {}
    },
    "52b00600df921763725396ed92194d3338167655": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13715. Add isErasureCoded() API to FileStatus class. Contributed by Manoj Govindassamy.\n",
      "commitDate": "24/03/17 11:44 AM",
      "commitName": "52b00600df921763725396ed92194d3338167655",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/12/16 3:52 PM",
      "commitNameOld": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 106.79,
      "commitsBetweenForRepo": 545,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n       boolean emptyPathSuffix) {\n     Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n     json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n         (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n     json.put(HttpFSFileSystem.TYPE_JSON,\n         HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n     json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n     json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n     json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n     json.put(HttpFSFileSystem.PERMISSION_JSON,\n         HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n     json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n     json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n         fileStatus.getModificationTime());\n     json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n     json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n     if (fileStatus.getPermission().getAclBit()) {\n       json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n     }\n     if (fileStatus.getPermission().getEncryptedBit()) {\n       json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n     }\n+    if (fileStatus.getPermission().getErasureCodedBit()) {\n+      json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n+    }\n     return json;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getErasureCodedBit()) {\n      json.put(HttpFSFileSystem.EC_BIT_JSON, true);\n    }\n    return json;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
      "extendedDetails": {}
    },
    "cba973f036a2c8fcc21a5826b8306247ec154c7b": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-10832. Propagate ACL bit and isEncrypted bit in HttpFS FileStatus permissions.\n",
      "commitDate": "09/09/16 12:12 PM",
      "commitName": "cba973f036a2c8fcc21a5826b8306247ec154c7b",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10832. Propagate ACL bit and isEncrypted bit in HttpFS FileStatus permissions.\n",
          "commitDate": "09/09/16 12:12 PM",
          "commitName": "cba973f036a2c8fcc21a5826b8306247ec154c7b",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/10/15 3:25 PM",
          "commitNameOld": "124a412a3711bd42eaeebe531376004c739a15d6",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 322.87,
          "commitsBetweenForRepo": 2237,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,25 @@\n-    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n-      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n-      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n-              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n-      json.put(HttpFSFileSystem.TYPE_JSON,\n-              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n-      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n-      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n-      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n-      json.put(HttpFSFileSystem.PERMISSION_JSON,\n-              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n-      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n-      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n-              fileStatus.getModificationTime());\n-      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n-      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n-      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n-        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n-      }\n-      return json;\n-    }\n\\ No newline at end of file\n+  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n+      boolean emptyPathSuffix) {\n+    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n+    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n+        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n+    json.put(HttpFSFileSystem.TYPE_JSON,\n+        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n+    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n+    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n+    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n+    json.put(HttpFSFileSystem.PERMISSION_JSON,\n+        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n+    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n+    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n+        fileStatus.getModificationTime());\n+    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n+    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n+    if (fileStatus.getPermission().getAclBit()) {\n+      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n+    }\n+    if (fileStatus.getPermission().getEncryptedBit()) {\n+      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n+    }\n+    return json;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    return json;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
          "extendedDetails": {
            "oldValue": "[emptyPathSuffix-boolean]",
            "newValue": "[fileStatus-FileStatus, emptyPathSuffix-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-10832. Propagate ACL bit and isEncrypted bit in HttpFS FileStatus permissions.\n",
          "commitDate": "09/09/16 12:12 PM",
          "commitName": "cba973f036a2c8fcc21a5826b8306247ec154c7b",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/10/15 3:25 PM",
          "commitNameOld": "124a412a3711bd42eaeebe531376004c739a15d6",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 322.87,
          "commitsBetweenForRepo": 2237,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,25 @@\n-    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n-      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n-      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n-              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n-      json.put(HttpFSFileSystem.TYPE_JSON,\n-              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n-      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n-      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n-      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n-      json.put(HttpFSFileSystem.PERMISSION_JSON,\n-              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n-      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n-      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n-              fileStatus.getModificationTime());\n-      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n-      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n-      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n-        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n-      }\n-      return json;\n-    }\n\\ No newline at end of file\n+  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n+      boolean emptyPathSuffix) {\n+    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n+    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n+        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n+    json.put(HttpFSFileSystem.TYPE_JSON,\n+        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n+    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n+    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n+    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n+    json.put(HttpFSFileSystem.PERMISSION_JSON,\n+        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n+    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n+    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n+        fileStatus.getModificationTime());\n+    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n+    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n+    if (fileStatus.getPermission().getAclBit()) {\n+      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n+    }\n+    if (fileStatus.getPermission().getEncryptedBit()) {\n+      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n+    }\n+    return json;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    return json;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10832. Propagate ACL bit and isEncrypted bit in HttpFS FileStatus permissions.\n",
          "commitDate": "09/09/16 12:12 PM",
          "commitName": "cba973f036a2c8fcc21a5826b8306247ec154c7b",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/10/15 3:25 PM",
          "commitNameOld": "124a412a3711bd42eaeebe531376004c739a15d6",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 322.87,
          "commitsBetweenForRepo": 2237,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,25 @@\n-    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n-      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n-      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n-              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n-      json.put(HttpFSFileSystem.TYPE_JSON,\n-              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n-      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n-      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n-      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n-      json.put(HttpFSFileSystem.PERMISSION_JSON,\n-              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n-      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n-      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n-              fileStatus.getModificationTime());\n-      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n-      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n-      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n-        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n-      }\n-      return json;\n-    }\n\\ No newline at end of file\n+  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n+      boolean emptyPathSuffix) {\n+    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n+    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n+        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n+    json.put(HttpFSFileSystem.TYPE_JSON,\n+        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n+    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n+    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n+    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n+    json.put(HttpFSFileSystem.PERMISSION_JSON,\n+        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n+    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n+    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n+        fileStatus.getModificationTime());\n+    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n+    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n+    if (fileStatus.getPermission().getAclBit()) {\n+      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n+    }\n+    if (fileStatus.getPermission().getEncryptedBit()) {\n+      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n+    }\n+    return json;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, Object\u003e toJsonInner(FileStatus fileStatus,\n      boolean emptyPathSuffix) {\n    Map\u003cString, Object\u003e json \u003d new LinkedHashMap\u003cString, Object\u003e();\n    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n        (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n    json.put(HttpFSFileSystem.TYPE_JSON,\n        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n    json.put(HttpFSFileSystem.PERMISSION_JSON,\n        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n        fileStatus.getModificationTime());\n    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n    if (fileStatus.getPermission().getAclBit()) {\n      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);\n    }\n    if (fileStatus.getPermission().getEncryptedBit()) {\n      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);\n    }\n    return json;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "27/08/14 9:47 PM",
      "commitNameOld": "a7bcc9535860214380e235641d1d5d2dd15aee58",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 33.03,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n     public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n       Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n       json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n               (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n       json.put(HttpFSFileSystem.TYPE_JSON,\n               HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n       json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n       json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n       json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n       json.put(HttpFSFileSystem.PERMISSION_JSON,\n               HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n       json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n       json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n               fileStatus.getModificationTime());\n       json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n       json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n-      json.put(HttpFSFileSystem.LAZY_PERSIST_JSON, fileStatus.isLazyPersist());\n       if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n         json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n       }\n       return json;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n      json.put(HttpFSFileSystem.TYPE_JSON,\n              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n      json.put(HttpFSFileSystem.PERMISSION_JSON,\n              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n              fileStatus.getModificationTime());\n      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n      }\n      return json;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
      "extendedDetails": {}
    },
    "a7bcc9535860214380e235641d1d5d2dd15aee58": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6921. Add LazyPersist flag to FileStatus. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "a7bcc9535860214380e235641d1d5d2dd15aee58",
      "commitAuthor": "arp",
      "commitDateOld": "24/06/14 8:59 AM",
      "commitNameOld": "46162a213f60f915df76c60b0412f45a021e1e7e",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 64.53,
      "commitsBetweenForRepo": 518,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n     public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n       Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n       json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n               (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n       json.put(HttpFSFileSystem.TYPE_JSON,\n               HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n       json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n       json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n       json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n       json.put(HttpFSFileSystem.PERMISSION_JSON,\n               HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n       json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n       json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n               fileStatus.getModificationTime());\n       json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n       json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n+      json.put(HttpFSFileSystem.LAZY_PERSIST_JSON, fileStatus.isLazyPersist());\n       if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n         json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n       }\n       return json;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n      json.put(HttpFSFileSystem.TYPE_JSON,\n              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n      json.put(HttpFSFileSystem.PERMISSION_JSON,\n              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n              fileStatus.getModificationTime());\n      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n      json.put(HttpFSFileSystem.LAZY_PERSIST_JSON, fileStatus.isLazyPersist());\n      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n      }\n      return json;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java",
      "extendedDetails": {}
    },
    "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6379. HTTPFS - Implement ACLs support. (yoderme via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/14 3:35 PM",
      "commitName": "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,21 @@\n+    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n+      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n+      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n+              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n+      json.put(HttpFSFileSystem.TYPE_JSON,\n+              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n+      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n+      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n+      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n+      json.put(HttpFSFileSystem.PERMISSION_JSON,\n+              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n+      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n+      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n+              fileStatus.getModificationTime());\n+      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n+      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n+      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n+        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n+      }\n+      return json;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public Map\u003cString,Object\u003e toJsonInner(boolean emptyPathSuffix) {\n      Map\u003cString,Object\u003e json \u003d new LinkedHashMap\u003cString,Object\u003e();\n      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,\n              (emptyPathSuffix) ? \"\" : fileStatus.getPath().getName());\n      json.put(HttpFSFileSystem.TYPE_JSON,\n              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());\n      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());\n      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());\n      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());\n      json.put(HttpFSFileSystem.PERMISSION_JSON,\n              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));\n      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());\n      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,\n              fileStatus.getModificationTime());\n      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());\n      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());\n      if ( (aclStatus !\u003d null) \u0026\u0026 !(aclStatus.getEntries().isEmpty()) ) {\n        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);\n      }\n      return json;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java"
    }
  }
}