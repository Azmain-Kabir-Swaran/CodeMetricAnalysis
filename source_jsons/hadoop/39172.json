{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "recoverContainer",
  "functionId": "recoverContainer___node-SchedulerNode__rmContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 1229,
  "functionEndLine": 1255,
  "numCommitsSeen": 130,
  "timeTaken": 5108,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
    "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "424fd9494f144c035fdef8c533be51e2027ad8d9"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc": "Ybodychange",
    "f9139ac8f60184a82a8bb315237bea04bdb98ec8": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ymultichange(Yparameterchange,Ybodychange)",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       // recover app scheduling info\n       appSchedulingInfo.recoverContainer(rmContainer, node.getPartition());\n \n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n       LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n           + \" is recovering container \" + rmContainer.getContainerId());\n       addRMContainer(rmContainer.getContainerId(), rmContainer);\n       if (rmContainer.getExecutionType() \u003d\u003d ExecutionType.GUARANTEED) {\n         attemptResourceUsage.incUsed(node.getPartition(),\n             rmContainer.getContainer().getResource());\n       }\n \n       // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n       // is called.\n       // newlyAllocatedContainers.add(rmContainer);\n       // schedulingOpportunities\n       // lastScheduledContainer\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    writeLock.lock();\n    try {\n      // recover app scheduling info\n      appSchedulingInfo.recoverContainer(rmContainer, node.getPartition());\n\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n          + \" is recovering container \" + rmContainer.getContainerId());\n      addRMContainer(rmContainer.getContainerId(), rmContainer);\n      if (rmContainer.getExecutionType() \u003d\u003d ExecutionType.GUARANTEED) {\n        attemptResourceUsage.incUsed(node.getPartition(),\n            rmContainer.getContainer().getResource());\n      }\n\n      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n      // is called.\n      // newlyAllocatedContainers.add(rmContainer);\n      // schedulingOpportunities\n      // lastScheduledContainer\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6849. NMContainerStatus should have the Container ExecutionType. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "08/09/17 9:24 AM",
      "commitName": "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "23/08/17 9:56 AM",
      "commitNameOld": "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.98,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   public void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n     try {\n       writeLock.lock();\n       // recover app scheduling info\n       appSchedulingInfo.recoverContainer(rmContainer, node.getPartition());\n \n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n       LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n           + \" is recovering container \" + rmContainer.getContainerId());\n-      liveContainers.put(rmContainer.getContainerId(), rmContainer);\n-      attemptResourceUsage.incUsed(node.getPartition(),\n-          rmContainer.getContainer().getResource());\n+      addRMContainer(rmContainer.getContainerId(), rmContainer);\n+      if (rmContainer.getExecutionType() \u003d\u003d ExecutionType.GUARANTEED) {\n+        attemptResourceUsage.incUsed(node.getPartition(),\n+            rmContainer.getContainer().getResource());\n+      }\n \n       // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n       // is called.\n       // newlyAllocatedContainers.add(rmContainer);\n       // schedulingOpportunities\n       // lastScheduledContainer\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      // recover app scheduling info\n      appSchedulingInfo.recoverContainer(rmContainer, node.getPartition());\n\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n          + \" is recovering container \" + rmContainer.getContainerId());\n      addRMContainer(rmContainer.getContainerId(), rmContainer);\n      if (rmContainer.getExecutionType() \u003d\u003d ExecutionType.GUARANTEED) {\n        attemptResourceUsage.incUsed(node.getPartition(),\n            rmContainer.getContainer().getResource());\n      }\n\n      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n      // is called.\n      // newlyAllocatedContainers.add(rmContainer);\n      // schedulingOpportunities\n      // lastScheduledContainer\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "f9139ac8f60184a82a8bb315237bea04bdb98ec8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6872. [Addendum patch] Ensure apps could run given NodeLabels are disabled post RM switchover/restart. Contributed by Sunil G\n",
      "commitDate": "02/08/17 12:03 AM",
      "commitName": "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/06/17 9:01 AM",
      "commitNameOld": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 43.63,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n     try {\n       writeLock.lock();\n       // recover app scheduling info\n-      appSchedulingInfo.recoverContainer(rmContainer);\n+      appSchedulingInfo.recoverContainer(rmContainer, node.getPartition());\n \n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n       LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n           + \" is recovering container \" + rmContainer.getContainerId());\n       liveContainers.put(rmContainer.getContainerId(), rmContainer);\n       attemptResourceUsage.incUsed(node.getPartition(),\n           rmContainer.getContainer().getResource());\n \n       // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n       // is called.\n       // newlyAllocatedContainers.add(rmContainer);\n       // schedulingOpportunities\n       // lastScheduledContainer\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      // recover app scheduling info\n      appSchedulingInfo.recoverContainer(rmContainer, node.getPartition());\n\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n          + \" is recovering container \" + rmContainer.getContainerId());\n      liveContainers.put(rmContainer.getContainerId(), rmContainer);\n      attemptResourceUsage.incUsed(node.getPartition(),\n          rmContainer.getContainer().getResource());\n\n      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n      // is called.\n      // newlyAllocatedContainers.add(rmContainer);\n      // schedulingOpportunities\n      // lastScheduledContainer\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-  public synchronized void recoverContainer(SchedulerNode node,\n+  public void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n-    // recover app scheduling info\n-    appSchedulingInfo.recoverContainer(rmContainer);\n+    try {\n+      writeLock.lock();\n+      // recover app scheduling info\n+      appSchedulingInfo.recoverContainer(rmContainer);\n \n-    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n-      return;\n+      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+        return;\n+      }\n+      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n+          + \" is recovering container \" + rmContainer.getContainerId());\n+      liveContainers.put(rmContainer.getContainerId(), rmContainer);\n+      attemptResourceUsage.incUsed(node.getPartition(),\n+          rmContainer.getContainer().getResource());\n+\n+      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n+      // is called.\n+      // newlyAllocatedContainers.add(rmContainer);\n+      // schedulingOpportunities\n+      // lastScheduledContainer\n+    } finally {\n+      writeLock.unlock();\n     }\n-    LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n-      + \" is recovering container \" + rmContainer.getContainerId());\n-    liveContainers.put(rmContainer.getContainerId(), rmContainer);\n-    attemptResourceUsage.incUsed(node.getPartition(), rmContainer\n-        .getContainer().getResource());\n-    \n-    // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n-    // is called.\n-    // newlyAllocatedContainers.add(rmContainer);\n-    // schedulingOpportunities\n-    // lastScheduledContainer\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      // recover app scheduling info\n      appSchedulingInfo.recoverContainer(rmContainer);\n\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n          + \" is recovering container \" + rmContainer.getContainerId());\n      liveContainers.put(rmContainer.getContainerId(), rmContainer);\n      attemptResourceUsage.incUsed(node.getPartition(),\n          rmContainer.getContainer().getResource());\n\n      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n      // is called.\n      // newlyAllocatedContainers.add(rmContainer);\n      // schedulingOpportunities\n      // lastScheduledContainer\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-  public synchronized void recoverContainer(SchedulerNode node,\n+  public void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n-    // recover app scheduling info\n-    appSchedulingInfo.recoverContainer(rmContainer);\n+    try {\n+      writeLock.lock();\n+      // recover app scheduling info\n+      appSchedulingInfo.recoverContainer(rmContainer);\n \n-    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n-      return;\n+      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+        return;\n+      }\n+      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n+          + \" is recovering container \" + rmContainer.getContainerId());\n+      liveContainers.put(rmContainer.getContainerId(), rmContainer);\n+      attemptResourceUsage.incUsed(node.getPartition(),\n+          rmContainer.getContainer().getResource());\n+\n+      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n+      // is called.\n+      // newlyAllocatedContainers.add(rmContainer);\n+      // schedulingOpportunities\n+      // lastScheduledContainer\n+    } finally {\n+      writeLock.unlock();\n     }\n-    LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n-      + \" is recovering container \" + rmContainer.getContainerId());\n-    liveContainers.put(rmContainer.getContainerId(), rmContainer);\n-    attemptResourceUsage.incUsed(node.getPartition(), rmContainer\n-        .getContainer().getResource());\n-    \n-    // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n-    // is called.\n-    // newlyAllocatedContainers.add(rmContainer);\n-    // schedulingOpportunities\n-    // lastScheduledContainer\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      // recover app scheduling info\n      appSchedulingInfo.recoverContainer(rmContainer);\n\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n      LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n          + \" is recovering container \" + rmContainer.getContainerId());\n      liveContainers.put(rmContainer.getContainerId(), rmContainer);\n      attemptResourceUsage.incUsed(node.getPartition(),\n          rmContainer.getContainer().getResource());\n\n      // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n      // is called.\n      // newlyAllocatedContainers.add(rmContainer);\n      // schedulingOpportunities\n      // lastScheduledContainer\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
          "commitDate": "20/03/15 1:54 PM",
          "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/03/15 9:30 PM",
          "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 2.68,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  public synchronized void recoverContainer(RMContainer rmContainer) {\n+  public synchronized void recoverContainer(SchedulerNode node,\n+      RMContainer rmContainer) {\n     // recover app scheduling info\n     appSchedulingInfo.recoverContainer(rmContainer);\n \n     if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n       return;\n     }\n     LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n       + \" is recovering container \" + rmContainer.getContainerId());\n     liveContainers.put(rmContainer.getContainerId(), rmContainer);\n-    Resources.addTo(currentConsumption, rmContainer.getContainer()\n-      .getResource());\n+    attemptResourceUsage.incUsed(node.getPartition(), rmContainer\n+        .getContainer().getResource());\n+    \n     // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n     // is called.\n     // newlyAllocatedContainers.add(rmContainer);\n     // schedulingOpportunities\n     // lastScheduledContainer\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    // recover app scheduling info\n    appSchedulingInfo.recoverContainer(rmContainer);\n\n    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n      return;\n    }\n    LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n      + \" is recovering container \" + rmContainer.getContainerId());\n    liveContainers.put(rmContainer.getContainerId(), rmContainer);\n    attemptResourceUsage.incUsed(node.getPartition(), rmContainer\n        .getContainer().getResource());\n    \n    // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n    // is called.\n    // newlyAllocatedContainers.add(rmContainer);\n    // schedulingOpportunities\n    // lastScheduledContainer\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer]",
            "newValue": "[node-SchedulerNode, rmContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
          "commitDate": "20/03/15 1:54 PM",
          "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/03/15 9:30 PM",
          "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 2.68,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  public synchronized void recoverContainer(RMContainer rmContainer) {\n+  public synchronized void recoverContainer(SchedulerNode node,\n+      RMContainer rmContainer) {\n     // recover app scheduling info\n     appSchedulingInfo.recoverContainer(rmContainer);\n \n     if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n       return;\n     }\n     LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n       + \" is recovering container \" + rmContainer.getContainerId());\n     liveContainers.put(rmContainer.getContainerId(), rmContainer);\n-    Resources.addTo(currentConsumption, rmContainer.getContainer()\n-      .getResource());\n+    attemptResourceUsage.incUsed(node.getPartition(), rmContainer\n+        .getContainer().getResource());\n+    \n     // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n     // is called.\n     // newlyAllocatedContainers.add(rmContainer);\n     // schedulingOpportunities\n     // lastScheduledContainer\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    // recover app scheduling info\n    appSchedulingInfo.recoverContainer(rmContainer);\n\n    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n      return;\n    }\n    LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n      + \" is recovering container \" + rmContainer.getContainerId());\n    liveContainers.put(rmContainer.getContainerId(), rmContainer);\n    attemptResourceUsage.incUsed(node.getPartition(), rmContainer\n        .getContainer().getResource());\n    \n    // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n    // is called.\n    // newlyAllocatedContainers.add(rmContainer);\n    // schedulingOpportunities\n    // lastScheduledContainer\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  public synchronized void recoverContainer(RMContainer rmContainer) {\n+    // recover app scheduling info\n+    appSchedulingInfo.recoverContainer(rmContainer);\n+\n+    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+      return;\n+    }\n+    LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n+      + \" is recovering container \" + rmContainer.getContainerId());\n+    liveContainers.put(rmContainer.getContainerId(), rmContainer);\n+    Resources.addTo(currentConsumption, rmContainer.getContainer()\n+      .getResource());\n+    // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n+    // is called.\n+    // newlyAllocatedContainers.add(rmContainer);\n+    // schedulingOpportunities\n+    // lastScheduledContainer\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverContainer(RMContainer rmContainer) {\n    // recover app scheduling info\n    appSchedulingInfo.recoverContainer(rmContainer);\n\n    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n      return;\n    }\n    LOG.info(\"SchedulerAttempt \" + getApplicationAttemptId()\n      + \" is recovering container \" + rmContainer.getContainerId());\n    liveContainers.put(rmContainer.getContainerId(), rmContainer);\n    Resources.addTo(currentConsumption, rmContainer.getContainer()\n      .getResource());\n    // resourceLimit: updated when LeafQueue#recoverContainer#allocateResource\n    // is called.\n    // newlyAllocatedContainers.add(rmContainer);\n    // schedulingOpportunities\n    // lastScheduledContainer\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"
    }
  }
}