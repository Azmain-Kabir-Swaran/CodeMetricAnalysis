{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpServer2.java",
  "functionName": "loadSSLConfiguration",
  "functionId": "loadSSLConfiguration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
  "functionStartLine": 417,
  "functionEndLine": 445,
  "numCommitsSeen": 55,
  "timeTaken": 2095,
  "changeHistory": [
    "8b82317fab0cb3023da333d4d557e226712a9c92",
    "edd693833b468623562c1b1085f79cbafbee9f15",
    "5d182949badb2eb80393de7ba3838102d006488b"
  ],
  "changeHistoryShort": {
    "8b82317fab0cb3023da333d4d557e226712a9c92": "Ybodychange",
    "edd693833b468623562c1b1085f79cbafbee9f15": "Ybodychange",
    "5d182949badb2eb80393de7ba3838102d006488b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b82317fab0cb3023da333d4d557e226712a9c92": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14352. Make some HttpServer2 SSL properties optional (jzhuge via rkanter)\n",
      "commitDate": "02/05/17 5:51 PM",
      "commitName": "8b82317fab0cb3023da333d4d557e226712a9c92",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "26/04/17 11:44 AM",
      "commitNameOld": "edd693833b468623562c1b1085f79cbafbee9f15",
      "commitAuthorOld": "John Zhuge",
      "daysBetweenCommits": 6.25,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,29 @@\n     private void loadSSLConfiguration() throws IOException {\n       if (sslConf \u003d\u003d null) {\n         return;\n       }\n-      needsClientAuth(sslConf.getBoolean(\n+      needsClientAuth \u003d sslConf.getBoolean(\n           SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n-          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT));\n-      keyStore(sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION),\n-          getPassword(sslConf, SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD),\n-          sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n-              SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT));\n-      keyPassword(getPassword(sslConf,\n-          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD));\n-      trustStore(sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION),\n-          getPassword(sslConf, SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD),\n-          sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n-              SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT));\n-      excludeCiphers(sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST));\n+          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n+      keyStore \u003d sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n+      if (keyStore \u003d\u003d null || keyStore.isEmpty()) {\n+        throw new IOException(String.format(\"Property %s not specified\",\n+            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n+      }\n+      keyStorePassword \u003d getPasswordString(sslConf,\n+          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n+      if (keyStorePassword \u003d\u003d null) {\n+        throw new IOException(String.format(\"Property %s not specified\",\n+            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n+      }\n+      keyStoreType \u003d sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n+          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n+      keyPassword \u003d getPasswordString(sslConf,\n+          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n+      trustStore \u003d sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n+      trustStorePassword \u003d getPasswordString(sslConf,\n+          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n+      trustStoreType \u003d sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n+          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n+      excludeCiphers \u003d sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadSSLConfiguration() throws IOException {\n      if (sslConf \u003d\u003d null) {\n        return;\n      }\n      needsClientAuth \u003d sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore \u003d sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore \u003d\u003d null || keyStore.isEmpty()) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword \u003d getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword \u003d\u003d null) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType \u003d sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword \u003d getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore \u003d sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword \u003d getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType \u003d sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers \u003d sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "edd693833b468623562c1b1085f79cbafbee9f15": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14340. Enable KMS and HttpFS to exclude SSL ciphers. Contributed by John Zhuge.\n",
      "commitDate": "26/04/17 11:44 AM",
      "commitName": "edd693833b468623562c1b1085f79cbafbee9f15",
      "commitAuthor": "John Zhuge",
      "commitDateOld": "25/04/17 10:06 PM",
      "commitNameOld": "9ccb849eb69f05bccc3435306ec4bde104e411bf",
      "commitAuthorOld": "John Zhuge",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n     private void loadSSLConfiguration() throws IOException {\n       if (sslConf \u003d\u003d null) {\n         return;\n       }\n       needsClientAuth(sslConf.getBoolean(\n           SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n           SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT));\n       keyStore(sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION),\n           getPassword(sslConf, SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD),\n           sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n               SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT));\n       keyPassword(getPassword(sslConf,\n           SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD));\n       trustStore(sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION),\n           getPassword(sslConf, SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD),\n           sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n               SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT));\n+      excludeCiphers(sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadSSLConfiguration() throws IOException {\n      if (sslConf \u003d\u003d null) {\n        return;\n      }\n      needsClientAuth(sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT));\n      keyStore(sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION),\n          getPassword(sslConf, SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD),\n          sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n              SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT));\n      keyPassword(getPassword(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD));\n      trustStore(sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION),\n          getPassword(sslConf, SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD),\n          sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n              SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT));\n      excludeCiphers(sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "5d182949badb2eb80393de7ba3838102d006488b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13597. Switch KMS from Tomcat to Jetty. Contributed by John Zhuge.\n",
      "commitDate": "05/01/17 5:21 PM",
      "commitName": "5d182949badb2eb80393de7ba3838102d006488b",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,18 @@\n+    private void loadSSLConfiguration() throws IOException {\n+      if (sslConf \u003d\u003d null) {\n+        return;\n+      }\n+      needsClientAuth(sslConf.getBoolean(\n+          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n+          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT));\n+      keyStore(sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION),\n+          getPassword(sslConf, SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD),\n+          sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n+              SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT));\n+      keyPassword(getPassword(sslConf,\n+          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD));\n+      trustStore(sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION),\n+          getPassword(sslConf, SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD),\n+          sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n+              SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadSSLConfiguration() throws IOException {\n      if (sslConf \u003d\u003d null) {\n        return;\n      }\n      needsClientAuth(sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT));\n      keyStore(sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION),\n          getPassword(sslConf, SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD),\n          sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n              SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT));\n      keyPassword(getPassword(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD));\n      trustStore(sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION),\n          getPassword(sslConf, SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD),\n          sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n              SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java"
    }
  }
}