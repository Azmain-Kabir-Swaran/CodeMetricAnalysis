{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "getFirstToComplete",
  "functionId": "getFirstToComplete___hedgedService-CompletionService__ByteBuffer____futures-ArrayList__Future__ByteBuffer____",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 1391,
  "functionEndLine": 1409,
  "numCommitsSeen": 195,
  "timeTaken": 3953,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "0ca41a8f35e4f05bb04805a2e0a617850707b4db",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "0ca41a8f35e4f05bb04805a2e0a617850707b4db": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,19 @@\n   private ByteBuffer getFirstToComplete(\n       CompletionService\u003cByteBuffer\u003e hedgedService,\n       ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n     if (futures.isEmpty()) {\n       throw new InterruptedException(\"let\u0027s retry\");\n     }\n     Future\u003cByteBuffer\u003e future \u003d null;\n     try {\n       future \u003d hedgedService.take();\n       ByteBuffer bb \u003d future.get();\n       futures.remove(future);\n       return bb;\n-    } catch (ExecutionException e) {\n-      // already logged in the Callable\n-      futures.remove(future);\n-    } catch (CancellationException ce) {\n+    } catch (ExecutionException | CancellationException e) {\n       // already logged in the Callable\n       futures.remove(future);\n     }\n \n     throw new InterruptedException(\"let\u0027s retry\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ByteBuffer getFirstToComplete(\n      CompletionService\u003cByteBuffer\u003e hedgedService,\n      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n    if (futures.isEmpty()) {\n      throw new InterruptedException(\"let\u0027s retry\");\n    }\n    Future\u003cByteBuffer\u003e future \u003d null;\n    try {\n      future \u003d hedgedService.take();\n      ByteBuffer bb \u003d future.get();\n      futures.remove(future);\n      return bb;\n    } catch (ExecutionException | CancellationException e) {\n      // already logged in the Callable\n      futures.remove(future);\n    }\n\n    throw new InterruptedException(\"let\u0027s retry\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ByteBuffer getFirstToComplete(\n      CompletionService\u003cByteBuffer\u003e hedgedService,\n      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n    if (futures.isEmpty()) {\n      throw new InterruptedException(\"let\u0027s retry\");\n    }\n    Future\u003cByteBuffer\u003e future \u003d null;\n    try {\n      future \u003d hedgedService.take();\n      ByteBuffer bb \u003d future.get();\n      futures.remove(future);\n      return bb;\n    } catch (ExecutionException e) {\n      // already logged in the Callable\n      futures.remove(future);\n    } catch (CancellationException ce) {\n      // already logged in the Callable\n      futures.remove(future);\n    }\n\n    throw new InterruptedException(\"let\u0027s retry\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "0ca41a8f35e4f05bb04805a2e0a617850707b4db": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-6591. while loop is executed tens of thousands of times in Hedged Read. Contributed by Liang Xie.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606927 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/06/14 1:46 PM",
      "commitName": "0ca41a8f35e4f05bb04805a2e0a617850707b4db",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6591. while loop is executed tens of thousands of times in Hedged Read. Contributed by Liang Xie.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606927 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/06/14 1:46 PM",
          "commitName": "0ca41a8f35e4f05bb04805a2e0a617850707b4db",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "28/04/14 1:20 PM",
          "commitNameOld": "71aa608b84afcbe19dc38ca7c43c6e750d5df97a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 63.02,
          "commitsBetweenForRepo": 367,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,22 @@\n-  private ByteBuffer getFirstToComplete(ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures,\n-      CountDownLatch latch) throws ExecutionException, InterruptedException {\n-    latch.await();\n-    for (Future\u003cByteBuffer\u003e future : futures) {\n-      if (future.isDone()) {\n-        try {\n-          return future.get();\n-        } catch (ExecutionException e) {\n-          // already logged in the Callable\n-          futures.remove(future);\n-          throw e;\n-        }\n-      }\n+  private ByteBuffer getFirstToComplete(\n+      CompletionService\u003cByteBuffer\u003e hedgedService,\n+      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n+    if (futures.isEmpty()) {\n+      throw new InterruptedException(\"let\u0027s retry\");\n     }\n-    throw new InterruptedException(\"latch has counted down to zero but no\"\n-        + \"result available yet, for safety try to request another one from\"\n-        + \"outside loop, this should be rare\");\n+    Future\u003cByteBuffer\u003e future \u003d null;\n+    try {\n+      future \u003d hedgedService.take();\n+      ByteBuffer bb \u003d future.get();\n+      futures.remove(future);\n+      return bb;\n+    } catch (ExecutionException e) {\n+      // already logged in the Callable\n+      futures.remove(future);\n+    } catch (CancellationException ce) {\n+      // already logged in the Callable\n+      futures.remove(future);\n+    }\n+\n+    throw new InterruptedException(\"let\u0027s retry\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ByteBuffer getFirstToComplete(\n      CompletionService\u003cByteBuffer\u003e hedgedService,\n      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n    if (futures.isEmpty()) {\n      throw new InterruptedException(\"let\u0027s retry\");\n    }\n    Future\u003cByteBuffer\u003e future \u003d null;\n    try {\n      future \u003d hedgedService.take();\n      ByteBuffer bb \u003d future.get();\n      futures.remove(future);\n      return bb;\n    } catch (ExecutionException e) {\n      // already logged in the Callable\n      futures.remove(future);\n    } catch (CancellationException ce) {\n      // already logged in the Callable\n      futures.remove(future);\n    }\n\n    throw new InterruptedException(\"let\u0027s retry\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[futures-ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e, latch-CountDownLatch]",
            "newValue": "[hedgedService-CompletionService\u003cByteBuffer\u003e, futures-ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6591. while loop is executed tens of thousands of times in Hedged Read. Contributed by Liang Xie.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606927 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/06/14 1:46 PM",
          "commitName": "0ca41a8f35e4f05bb04805a2e0a617850707b4db",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "28/04/14 1:20 PM",
          "commitNameOld": "71aa608b84afcbe19dc38ca7c43c6e750d5df97a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 63.02,
          "commitsBetweenForRepo": 367,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,22 @@\n-  private ByteBuffer getFirstToComplete(ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures,\n-      CountDownLatch latch) throws ExecutionException, InterruptedException {\n-    latch.await();\n-    for (Future\u003cByteBuffer\u003e future : futures) {\n-      if (future.isDone()) {\n-        try {\n-          return future.get();\n-        } catch (ExecutionException e) {\n-          // already logged in the Callable\n-          futures.remove(future);\n-          throw e;\n-        }\n-      }\n+  private ByteBuffer getFirstToComplete(\n+      CompletionService\u003cByteBuffer\u003e hedgedService,\n+      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n+    if (futures.isEmpty()) {\n+      throw new InterruptedException(\"let\u0027s retry\");\n     }\n-    throw new InterruptedException(\"latch has counted down to zero but no\"\n-        + \"result available yet, for safety try to request another one from\"\n-        + \"outside loop, this should be rare\");\n+    Future\u003cByteBuffer\u003e future \u003d null;\n+    try {\n+      future \u003d hedgedService.take();\n+      ByteBuffer bb \u003d future.get();\n+      futures.remove(future);\n+      return bb;\n+    } catch (ExecutionException e) {\n+      // already logged in the Callable\n+      futures.remove(future);\n+    } catch (CancellationException ce) {\n+      // already logged in the Callable\n+      futures.remove(future);\n+    }\n+\n+    throw new InterruptedException(\"let\u0027s retry\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ByteBuffer getFirstToComplete(\n      CompletionService\u003cByteBuffer\u003e hedgedService,\n      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n    if (futures.isEmpty()) {\n      throw new InterruptedException(\"let\u0027s retry\");\n    }\n    Future\u003cByteBuffer\u003e future \u003d null;\n    try {\n      future \u003d hedgedService.take();\n      ByteBuffer bb \u003d future.get();\n      futures.remove(future);\n      return bb;\n    } catch (ExecutionException e) {\n      // already logged in the Callable\n      futures.remove(future);\n    } catch (CancellationException ce) {\n      // already logged in the Callable\n      futures.remove(future);\n    }\n\n    throw new InterruptedException(\"let\u0027s retry\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[ExecutionException, InterruptedException]",
            "newValue": "[InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6591. while loop is executed tens of thousands of times in Hedged Read. Contributed by Liang Xie.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606927 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/06/14 1:46 PM",
          "commitName": "0ca41a8f35e4f05bb04805a2e0a617850707b4db",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "28/04/14 1:20 PM",
          "commitNameOld": "71aa608b84afcbe19dc38ca7c43c6e750d5df97a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 63.02,
          "commitsBetweenForRepo": 367,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,22 @@\n-  private ByteBuffer getFirstToComplete(ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures,\n-      CountDownLatch latch) throws ExecutionException, InterruptedException {\n-    latch.await();\n-    for (Future\u003cByteBuffer\u003e future : futures) {\n-      if (future.isDone()) {\n-        try {\n-          return future.get();\n-        } catch (ExecutionException e) {\n-          // already logged in the Callable\n-          futures.remove(future);\n-          throw e;\n-        }\n-      }\n+  private ByteBuffer getFirstToComplete(\n+      CompletionService\u003cByteBuffer\u003e hedgedService,\n+      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n+    if (futures.isEmpty()) {\n+      throw new InterruptedException(\"let\u0027s retry\");\n     }\n-    throw new InterruptedException(\"latch has counted down to zero but no\"\n-        + \"result available yet, for safety try to request another one from\"\n-        + \"outside loop, this should be rare\");\n+    Future\u003cByteBuffer\u003e future \u003d null;\n+    try {\n+      future \u003d hedgedService.take();\n+      ByteBuffer bb \u003d future.get();\n+      futures.remove(future);\n+      return bb;\n+    } catch (ExecutionException e) {\n+      // already logged in the Callable\n+      futures.remove(future);\n+    } catch (CancellationException ce) {\n+      // already logged in the Callable\n+      futures.remove(future);\n+    }\n+\n+    throw new InterruptedException(\"let\u0027s retry\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ByteBuffer getFirstToComplete(\n      CompletionService\u003cByteBuffer\u003e hedgedService,\n      ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures) throws InterruptedException {\n    if (futures.isEmpty()) {\n      throw new InterruptedException(\"let\u0027s retry\");\n    }\n    Future\u003cByteBuffer\u003e future \u003d null;\n    try {\n      future \u003d hedgedService.take();\n      ByteBuffer bb \u003d future.get();\n      futures.remove(future);\n      return bb;\n    } catch (ExecutionException e) {\n      // already logged in the Callable\n      futures.remove(future);\n    } catch (CancellationException ce) {\n      // already logged in the Callable\n      futures.remove(future);\n    }\n\n    throw new InterruptedException(\"let\u0027s retry\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5776 Support \u0027hedged\u0027 reads in DFSClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 2:34 PM",
      "commitName": "17db74a1c1972392a5aba48a3e0334dcd6c76487",
      "commitAuthor": "Michael Stack",
      "diff": "@@ -0,0 +1,18 @@\n+  private ByteBuffer getFirstToComplete(ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures,\n+      CountDownLatch latch) throws ExecutionException, InterruptedException {\n+    latch.await();\n+    for (Future\u003cByteBuffer\u003e future : futures) {\n+      if (future.isDone()) {\n+        try {\n+          return future.get();\n+        } catch (ExecutionException e) {\n+          // already logged in the Callable\n+          futures.remove(future);\n+          throw e;\n+        }\n+      }\n+    }\n+    throw new InterruptedException(\"latch has counted down to zero but no\"\n+        + \"result available yet, for safety try to request another one from\"\n+        + \"outside loop, this should be rare\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ByteBuffer getFirstToComplete(ArrayList\u003cFuture\u003cByteBuffer\u003e\u003e futures,\n      CountDownLatch latch) throws ExecutionException, InterruptedException {\n    latch.await();\n    for (Future\u003cByteBuffer\u003e future : futures) {\n      if (future.isDone()) {\n        try {\n          return future.get();\n        } catch (ExecutionException e) {\n          // already logged in the Callable\n          futures.remove(future);\n          throw e;\n        }\n      }\n    }\n    throw new InterruptedException(\"latch has counted down to zero but no\"\n        + \"result available yet, for safety try to request another one from\"\n        + \"outside loop, this should be rare\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}