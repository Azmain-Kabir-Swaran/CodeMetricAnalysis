{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBImageXmlWriter.java",
  "functionName": "dumpXattrs",
  "functionId": "dumpXattrs___xattrs-INodeSection.XAttrFeatureProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
  "functionStartLine": 428,
  "functionEndLine": 449,
  "numCommitsSeen": 27,
  "timeTaken": 3091,
  "changeHistory": [
    "1654497f98fb7f2de8214d2fbad305b7a2854816",
    "b60ca37914b22550e3630fa02742d40697decb31",
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742"
  ],
  "changeHistoryShort": {
    "1654497f98fb7f2de8214d2fbad305b7a2854816": "Ybodychange",
    "b60ca37914b22550e3630fa02742d40697decb31": "Ybodychange",
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1654497f98fb7f2de8214d2fbad305b7a2854816": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16557. [pb-upgrade] Upgrade protobuf.version to 3.7.1 (#1432)\n\nHADOOP-16557. [pb-upgrade] Upgrade protobuf.version to 3.7.1. Contributed by Vinayakumar B.",
      "commitDate": "20/09/19 3:38 AM",
      "commitName": "1654497f98fb7f2de8214d2fbad305b7a2854816",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "08/02/19 4:51 AM",
      "commitNameOld": "177131793a88960b734038f6e646476d568c3626",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 223.91,
      "commitsBetweenForRepo": 1758,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n     out.print(\"\u003c\" + INODE_SECTION_XATTRS + \"\u003e\");\n     for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n       out.print(\"\u003c\" + INODE_SECTION_XATTR + \"\u003e\");\n       int encodedName \u003d xattr.getName();\n       int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n           ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n       o(INODE_SECTION_NS, XAttrProtos.XAttrProto.\n-          XAttrNamespaceProto.valueOf(ns).toString());\n+          XAttrNamespaceProto.forNumber(ns).toString());\n       o(SECTION_NAME, SerialNumberManager.XATTR.getString(\n           XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET),\n           stringTable));\n       ByteString val \u003d xattr.getValue();\n       if (val.isValidUtf8()) {\n         o(INODE_SECTION_VAL, val.toStringUtf8());\n       } else {\n         o(INODE_SECTION_VAL_HEX, Hex.encodeHexString(val.toByteArray()));\n       }\n       out.print(\"\u003c/\" + INODE_SECTION_XATTR + \"\u003e\");\n     }\n     out.print(\"\u003c/\" + INODE_SECTION_XATTRS + \"\u003e\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n    out.print(\"\u003c\" + INODE_SECTION_XATTRS + \"\u003e\");\n    for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n      out.print(\"\u003c\" + INODE_SECTION_XATTR + \"\u003e\");\n      int encodedName \u003d xattr.getName();\n      int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n          ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n      o(INODE_SECTION_NS, XAttrProtos.XAttrProto.\n          XAttrNamespaceProto.forNumber(ns).toString());\n      o(SECTION_NAME, SerialNumberManager.XATTR.getString(\n          XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET),\n          stringTable));\n      ByteString val \u003d xattr.getValue();\n      if (val.isValidUtf8()) {\n        o(INODE_SECTION_VAL, val.toStringUtf8());\n      } else {\n        o(INODE_SECTION_VAL_HEX, Hex.encodeHexString(val.toByteArray()));\n      }\n      out.print(\"\u003c/\" + INODE_SECTION_XATTR + \"\u003e\");\n    }\n    out.print(\"\u003c/\" + INODE_SECTION_XATTRS + \"\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "b60ca37914b22550e3630fa02742d40697decb31": {
      "type": "Ybodychange",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
      "commitDate": "15/10/18 3:18 AM",
      "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "03/11/17 12:05 PM",
      "commitNameOld": "299d38295d61e3ad154814b680558969449d50fe",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 345.63,
      "commitsBetweenForRepo": 3173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n     out.print(\"\u003c\" + INODE_SECTION_XATTRS + \"\u003e\");\n     for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n       out.print(\"\u003c\" + INODE_SECTION_XATTR + \"\u003e\");\n       int encodedName \u003d xattr.getName();\n       int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n           ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n       o(INODE_SECTION_NS, XAttrProtos.XAttrProto.\n           XAttrNamespaceProto.valueOf(ns).toString());\n-      o(SECTION_NAME,\n-          stringTable[XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET)]);\n+      o(SECTION_NAME, SerialNumberManager.XATTR.getString(\n+          XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET),\n+          stringTable));\n       ByteString val \u003d xattr.getValue();\n       if (val.isValidUtf8()) {\n         o(INODE_SECTION_VAL, val.toStringUtf8());\n       } else {\n         o(INODE_SECTION_VAL_HEX, Hex.encodeHexString(val.toByteArray()));\n       }\n       out.print(\"\u003c/\" + INODE_SECTION_XATTR + \"\u003e\");\n     }\n     out.print(\"\u003c/\" + INODE_SECTION_XATTRS + \"\u003e\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n    out.print(\"\u003c\" + INODE_SECTION_XATTRS + \"\u003e\");\n    for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n      out.print(\"\u003c\" + INODE_SECTION_XATTR + \"\u003e\");\n      int encodedName \u003d xattr.getName();\n      int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n          ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n      o(INODE_SECTION_NS, XAttrProtos.XAttrProto.\n          XAttrNamespaceProto.valueOf(ns).toString());\n      o(SECTION_NAME, SerialNumberManager.XATTR.getString(\n          XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET),\n          stringTable));\n      ByteString val \u003d xattr.getValue();\n      if (val.isValidUtf8()) {\n        o(INODE_SECTION_VAL, val.toStringUtf8());\n      } else {\n        o(INODE_SECTION_VAL_HEX, Hex.encodeHexString(val.toByteArray()));\n      }\n      out.print(\"\u003c/\" + INODE_SECTION_XATTR + \"\u003e\");\n    }\n    out.print(\"\u003c/\" + INODE_SECTION_XATTRS + \"\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/03/16 5:56 PM",
      "commitNameOld": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 18.7,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n-    out.print(\"\u003cxattrs\u003e\");\n+    out.print(\"\u003c\" + INODE_SECTION_XATTRS + \"\u003e\");\n     for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n-      out.print(\"\u003cxattr\u003e\");\n+      out.print(\"\u003c\" + INODE_SECTION_XATTR + \"\u003e\");\n       int encodedName \u003d xattr.getName();\n       int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n           ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n-      o(\"ns\", XAttrProtos.XAttrProto.\n+      o(INODE_SECTION_NS, XAttrProtos.XAttrProto.\n           XAttrNamespaceProto.valueOf(ns).toString());\n-      o(\"name\", stringTable[XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET)]);\n+      o(SECTION_NAME,\n+          stringTable[XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET)]);\n       ByteString val \u003d xattr.getValue();\n       if (val.isValidUtf8()) {\n-        o(\"val\", val.toStringUtf8());\n+        o(INODE_SECTION_VAL, val.toStringUtf8());\n       } else {\n-        o(\"valHex\", Hex.encodeHexString(val.toByteArray()));\n+        o(INODE_SECTION_VAL_HEX, Hex.encodeHexString(val.toByteArray()));\n       }\n-      out.print(\"\u003c/xattr\u003e\");\n+      out.print(\"\u003c/\" + INODE_SECTION_XATTR + \"\u003e\");\n     }\n-    out.print(\"\u003c/xattrs\u003e\");\n+    out.print(\"\u003c/\" + INODE_SECTION_XATTRS + \"\u003e\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n    out.print(\"\u003c\" + INODE_SECTION_XATTRS + \"\u003e\");\n    for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n      out.print(\"\u003c\" + INODE_SECTION_XATTR + \"\u003e\");\n      int encodedName \u003d xattr.getName();\n      int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n          ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n      o(INODE_SECTION_NS, XAttrProtos.XAttrProto.\n          XAttrNamespaceProto.valueOf(ns).toString());\n      o(SECTION_NAME,\n          stringTable[XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET)]);\n      ByteString val \u003d xattr.getValue();\n      if (val.isValidUtf8()) {\n        o(INODE_SECTION_VAL, val.toStringUtf8());\n      } else {\n        o(INODE_SECTION_VAL_HEX, Hex.encodeHexString(val.toByteArray()));\n      }\n      out.print(\"\u003c/\" + INODE_SECTION_XATTR + \"\u003e\");\n    }\n    out.print(\"\u003c/\" + INODE_SECTION_XATTRS + \"\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,20 @@\n+  private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n+    out.print(\"\u003cxattrs\u003e\");\n+    for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n+      out.print(\"\u003cxattr\u003e\");\n+      int encodedName \u003d xattr.getName();\n+      int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n+          ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n+      o(\"ns\", XAttrProtos.XAttrProto.\n+          XAttrNamespaceProto.valueOf(ns).toString());\n+      o(\"name\", stringTable[XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET)]);\n+      ByteString val \u003d xattr.getValue();\n+      if (val.isValidUtf8()) {\n+        o(\"val\", val.toStringUtf8());\n+      } else {\n+        o(\"valHex\", Hex.encodeHexString(val.toByteArray()));\n+      }\n+      out.print(\"\u003c/xattr\u003e\");\n+    }\n+    out.print(\"\u003c/xattrs\u003e\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpXattrs(INodeSection.XAttrFeatureProto xattrs) {\n    out.print(\"\u003cxattrs\u003e\");\n    for (INodeSection.XAttrCompactProto xattr : xattrs.getXAttrsList()) {\n      out.print(\"\u003cxattr\u003e\");\n      int encodedName \u003d xattr.getName();\n      int ns \u003d (XATTR_NAMESPACE_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_OFFSET)) |\n          ((XATTR_NAMESPACE_EXT_MASK \u0026 (encodedName \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET)) \u003c\u003c 2);\n      o(\"ns\", XAttrProtos.XAttrProto.\n          XAttrNamespaceProto.valueOf(ns).toString());\n      o(\"name\", stringTable[XATTR_NAME_MASK \u0026 (encodedName \u003e\u003e XATTR_NAME_OFFSET)]);\n      ByteString val \u003d xattr.getValue();\n      if (val.isValidUtf8()) {\n        o(\"val\", val.toStringUtf8());\n      } else {\n        o(\"valHex\", Hex.encodeHexString(val.toByteArray()));\n      }\n      out.print(\"\u003c/xattr\u003e\");\n    }\n    out.print(\"\u003c/xattrs\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java"
    }
  }
}