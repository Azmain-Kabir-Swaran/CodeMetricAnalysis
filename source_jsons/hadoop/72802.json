{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ValueQueue.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java",
  "functionStartLine": 417,
  "functionEndLine": 437,
  "numCommitsSeen": 12,
  "timeTaken": 1176,
  "changeHistory": [
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64"
  ],
  "changeHistoryShort": {
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": "Ybodychange",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11210. Enhance key rolling to guarantee new KeyVersion is returned from generateEncryptedKeys after a key is rolled.\n",
      "commitDate": "07/02/17 8:36 PM",
      "commitName": "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "02/06/16 3:14 AM",
      "commitNameOld": "99675e00df65e84dcc02082b795f1f93c90b794e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 250.76,
      "commitsBetweenForRepo": 1743,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,21 @@\n           public void run() {\n             int cacheSize \u003d numValues;\n             int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n             // Need to ensure that only one refill task per key is executed\n             try {\n-              if (keyQueue.size() \u003c threshold) {\n-                refiller.fillQueueForKey(name, keyQueue,\n-                    cacheSize - keyQueue.size());\n+              writeLock(keyName);\n+              try {\n+                if (keyQueue.size() \u003c threshold \u0026\u0026 !isCanceled()) {\n+                  refiller.fillQueueForKey(name, keyQueue,\n+                      cacheSize - keyQueue.size());\n+                }\n+                if (isCanceled()) {\n+                  keyQueue.clear();\n+                }\n+              } finally {\n+                writeUnlock(keyName);\n               }\n             } catch (final Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            int cacheSize \u003d numValues;\n            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n            // Need to ensure that only one refill task per key is executed\n            try {\n              writeLock(keyName);\n              try {\n                if (keyQueue.size() \u003c threshold \u0026\u0026 !isCanceled()) {\n                  refiller.fillQueueForKey(name, keyQueue,\n                      cacheSize - keyQueue.size());\n                }\n                if (isCanceled()) {\n                  keyQueue.clear();\n                }\n              } finally {\n                writeUnlock(keyName);\n              }\n            } catch (final Exception e) {\n              throw new RuntimeException(e);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java",
      "extendedDetails": {}
    },
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10720. KMS: Implement generateEncryptedKey and decryptEncryptedKey in the REST API. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 1:55 PM",
      "commitName": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,13 @@\n+          public void run() {\n+            int cacheSize \u003d numValues;\n+            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n+            // Need to ensure that only one refill task per key is executed\n+            try {\n+              if (keyQueue.size() \u003c threshold) {\n+                refiller.fillQueueForKey(name, keyQueue,\n+                    cacheSize - keyQueue.size());\n+              }\n+            } catch (final Exception e) {\n+              throw new RuntimeException(e);\n+            }\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            int cacheSize \u003d numValues;\n            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n            // Need to ensure that only one refill task per key is executed\n            try {\n              if (keyQueue.size() \u003c threshold) {\n                refiller.fillQueueForKey(name, keyQueue,\n                    cacheSize - keyQueue.size());\n              }\n            } catch (final Exception e) {\n              throw new RuntimeException(e);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java"
    }
  }
}