{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommonNodeLabelsManager.java",
  "functionName": "getNodeLabelsInfo",
  "functionId": "getNodeLabelsInfo",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
  "functionStartLine": 761,
  "functionEndLine": 765,
  "numCommitsSeen": 64,
  "timeTaken": 2158,
  "changeHistory": [
    "d4f53fc9631d682cd79ba440aefa6750dcc898be",
    "db7f1653198b950e89567c06898d64f6b930a0ee"
  ],
  "changeHistoryShort": {
    "d4f53fc9631d682cd79ba440aefa6750dcc898be": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "db7f1653198b950e89567c06898d64f6b930a0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d4f53fc9631d682cd79ba440aefa6750dcc898be": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
      "commitDate": "13/05/15 1:29 PM",
      "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,5 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n-    try {\n-      readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n-      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n-        String hostName \u003d entry.getKey();\n-        Host host \u003d entry.getValue();\n-        for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n-          }\n-          nodeToLabels.put(nodeId, nodeLabels);\n-        }\n-        if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n-        }\n-      }\n-      return Collections.unmodifiableMap(nodeToLabels);\n-    } finally {\n-      readLock.unlock();\n-    }\n+  public Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e getNodeLabelsInfo() {\n+    Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e nodeToLabels \u003d\n+        generateNodeLabelsInfoPerNode(NodeLabel.class);\n+    return nodeToLabels;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e getNodeLabelsInfo() {\n    Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e nodeToLabels \u003d\n        generateNodeLabelsInfoPerNode(NodeLabel.class);\n    return nodeToLabels;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "getNodeLabels",
            "newValue": "getNodeLabelsInfo"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,5 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n-    try {\n-      readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n-      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n-        String hostName \u003d entry.getKey();\n-        Host host \u003d entry.getValue();\n-        for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n-          }\n-          nodeToLabels.put(nodeId, nodeLabels);\n-        }\n-        if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n-        }\n-      }\n-      return Collections.unmodifiableMap(nodeToLabels);\n-    } finally {\n-      readLock.unlock();\n-    }\n+  public Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e getNodeLabelsInfo() {\n+    Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e nodeToLabels \u003d\n+        generateNodeLabelsInfoPerNode(NodeLabel.class);\n+    return nodeToLabels;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e getNodeLabelsInfo() {\n    Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e nodeToLabels \u003d\n        generateNodeLabelsInfoPerNode(NodeLabel.class);\n    return nodeToLabels;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "Map\u003cNodeId,Set\u003cString\u003e\u003e",
            "newValue": "Map\u003cNodeId,Set\u003cNodeLabel\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,5 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n-    try {\n-      readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n-      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n-        String hostName \u003d entry.getKey();\n-        Host host \u003d entry.getValue();\n-        for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n-          }\n-          nodeToLabels.put(nodeId, nodeLabels);\n-        }\n-        if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n-        }\n-      }\n-      return Collections.unmodifiableMap(nodeToLabels);\n-    } finally {\n-      readLock.unlock();\n-    }\n+  public Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e getNodeLabelsInfo() {\n+    Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e nodeToLabels \u003d\n+        generateNodeLabelsInfoPerNode(NodeLabel.class);\n+    return nodeToLabels;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e getNodeLabelsInfo() {\n    Map\u003cNodeId, Set\u003cNodeLabel\u003e\u003e nodeToLabels \u003d\n        generateNodeLabelsInfoPerNode(NodeLabel.class);\n    return nodeToLabels;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "db7f1653198b950e89567c06898d64f6b930a0ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2494. Added NodeLabels Manager internal API and implementation. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 11:44 AM",
      "commitName": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+    try {\n+      readLock.lock();\n+      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n+          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n+        String hostName \u003d entry.getKey();\n+        Host host \u003d entry.getValue();\n+        for (NodeId nodeId : host.nms.keySet()) {\n+          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+            continue;\n+          }\n+          nodeToLabels.put(nodeId, nodeLabels);\n+        }\n+        if (!host.labels.isEmpty()) {\n+          nodeToLabels\n+              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+        }\n+      }\n+      return Collections.unmodifiableMap(nodeToLabels);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n            continue;\n          }\n          nodeToLabels.put(nodeId, nodeLabels);\n        }\n        if (!host.labels.isEmpty()) {\n          nodeToLabels\n              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java"
    }
  }
}