{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "increaseContainersResource",
  "functionId": "increaseContainersResource___requests-IncreaseContainersResourceRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1243,
  "functionEndLine": 1250,
  "numCommitsSeen": 139,
  "timeTaken": 5116,
  "changeHistory": [
    "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
    "ffd820c27a4f8cf4676ad8758696ed89fde80218",
    "83a18add10ee937a04e833a66e0a4642e776e510"
  ],
  "changeHistoryShort": {
    "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3": "Ybodychange",
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d": "Ybodychange",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Ybodychange",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": "Ybodychange",
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": "Ybodychange",
    "83a18add10ee937a04e833a66e0a4642e776e510": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5977. ContainerManagementProtocol changes to support change of container ExecutionType. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "03/08/17 9:15 PM",
      "commitName": "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "20/07/17 9:03 AM",
      "commitNameOld": "c8df3668ecc37c2d58cad35520a762eaec3c8539",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 14.51,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,8 @@\n   public IncreaseContainersResourceResponse increaseContainersResource(\n       IncreaseContainersResourceRequest requests)\n           throws YarnException, IOException {\n-    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n-    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n-    authorizeUser(remoteUgi, nmTokenIdentifier);\n-    List\u003cContainerId\u003e successfullyIncreasedContainers\n-        \u003d new ArrayList\u003cContainerId\u003e();\n-    Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n-        new HashMap\u003cContainerId, SerializedException\u003e();\n-    // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n-    // to avoid race condition during NM-RM resync (due to RM restart) while a\n-    // container resource is being increased in NM, in particular when the\n-    // increased container has not yet been added to the increasedContainers\n-    // map in NMContext.\n-    synchronized (this.context) {\n-      // Process container resource increase requests\n-      for (org.apache.hadoop.yarn.api.records.Token token :\n-          requests.getContainersToIncrease()) {\n-        ContainerId containerId \u003d null;\n-        try {\n-          if (token.getIdentifier() \u003d\u003d null) {\n-            throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n-          }\n-          ContainerTokenIdentifier containerTokenIdentifier \u003d\n-              BuilderUtils.newContainerTokenIdentifier(token);\n-          verifyAndGetContainerTokenIdentifier(token,\n-              containerTokenIdentifier);\n-          authorizeStartAndResourceIncreaseRequest(\n-              nmTokenIdentifier, containerTokenIdentifier, false);\n-          containerId \u003d containerTokenIdentifier.getContainerID();\n-          // Reuse the startContainer logic to update NMToken,\n-          // as container resource increase request will have come with\n-          // an updated NMToken.\n-          updateNMTokenIdentifier(nmTokenIdentifier);\n-          Resource resource \u003d containerTokenIdentifier.getResource();\n-          changeContainerResourceInternal(containerId,\n-              containerTokenIdentifier.getVersion(), resource, true);\n-          successfullyIncreasedContainers.add(containerId);\n-        } catch (YarnException | InvalidToken e) {\n-          failedContainers.put(containerId, SerializedException.newInstance(e));\n-        } catch (IOException e) {\n-          throw RPCUtil.getRemoteException(e);\n-        }\n-      }\n-    }\n+    ContainerUpdateResponse resp \u003d updateContainer(\n+        ContainerUpdateRequest.newInstance(requests.getContainersToIncrease()));\n     return IncreaseContainersResourceResponse.newInstance(\n-        successfullyIncreasedContainers, failedContainers);\n+        resp.getSuccessfullyUpdatedContainers(), resp.getFailedRequests());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IncreaseContainersResourceResponse increaseContainersResource(\n      IncreaseContainersResourceRequest requests)\n          throws YarnException, IOException {\n    ContainerUpdateResponse resp \u003d updateContainer(\n        ContainerUpdateRequest.newInstance(requests.getContainersToIncrease()));\n    return IncreaseContainersResourceResponse.newInstance(\n        resp.getSuccessfullyUpdatedContainers(), resp.getFailedRequests());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3839. Quit throwing NMNotYetReadyException. Contributed by Manikandan R\n",
      "commitDate": "08/05/17 3:14 PM",
      "commitName": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "06/04/17 4:54 PM",
      "commitNameOld": "0116c3c95769e204ab2600510f0efd6baafb43e0",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 31.93,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,49 @@\n   public IncreaseContainersResourceResponse increaseContainersResource(\n       IncreaseContainersResourceRequest requests)\n           throws YarnException, IOException {\n-    if (blockNewContainerRequests.get()) {\n-      throw new NMNotYetReadyException(\n-          \"Rejecting container resource increase as NodeManager has not\"\n-              + \" yet connected with ResourceManager\");\n-    }\n     UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n     authorizeUser(remoteUgi, nmTokenIdentifier);\n     List\u003cContainerId\u003e successfullyIncreasedContainers\n         \u003d new ArrayList\u003cContainerId\u003e();\n     Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n         new HashMap\u003cContainerId, SerializedException\u003e();\n     // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n     // to avoid race condition during NM-RM resync (due to RM restart) while a\n     // container resource is being increased in NM, in particular when the\n     // increased container has not yet been added to the increasedContainers\n     // map in NMContext.\n     synchronized (this.context) {\n       // Process container resource increase requests\n       for (org.apache.hadoop.yarn.api.records.Token token :\n           requests.getContainersToIncrease()) {\n         ContainerId containerId \u003d null;\n         try {\n           if (token.getIdentifier() \u003d\u003d null) {\n             throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n           }\n           ContainerTokenIdentifier containerTokenIdentifier \u003d\n               BuilderUtils.newContainerTokenIdentifier(token);\n           verifyAndGetContainerTokenIdentifier(token,\n               containerTokenIdentifier);\n           authorizeStartAndResourceIncreaseRequest(\n               nmTokenIdentifier, containerTokenIdentifier, false);\n           containerId \u003d containerTokenIdentifier.getContainerID();\n           // Reuse the startContainer logic to update NMToken,\n           // as container resource increase request will have come with\n           // an updated NMToken.\n           updateNMTokenIdentifier(nmTokenIdentifier);\n           Resource resource \u003d containerTokenIdentifier.getResource();\n           changeContainerResourceInternal(containerId,\n               containerTokenIdentifier.getVersion(), resource, true);\n           successfullyIncreasedContainers.add(containerId);\n         } catch (YarnException | InvalidToken e) {\n           failedContainers.put(containerId, SerializedException.newInstance(e));\n         } catch (IOException e) {\n           throw RPCUtil.getRemoteException(e);\n         }\n       }\n     }\n     return IncreaseContainersResourceResponse.newInstance(\n         successfullyIncreasedContainers, failedContainers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IncreaseContainersResourceResponse increaseContainersResource(\n      IncreaseContainersResourceRequest requests)\n          throws YarnException, IOException {\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    List\u003cContainerId\u003e successfullyIncreasedContainers\n        \u003d new ArrayList\u003cContainerId\u003e();\n    Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n        new HashMap\u003cContainerId, SerializedException\u003e();\n    // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n    // to avoid race condition during NM-RM resync (due to RM restart) while a\n    // container resource is being increased in NM, in particular when the\n    // increased container has not yet been added to the increasedContainers\n    // map in NMContext.\n    synchronized (this.context) {\n      // Process container resource increase requests\n      for (org.apache.hadoop.yarn.api.records.Token token :\n          requests.getContainersToIncrease()) {\n        ContainerId containerId \u003d null;\n        try {\n          if (token.getIdentifier() \u003d\u003d null) {\n            throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n          }\n          ContainerTokenIdentifier containerTokenIdentifier \u003d\n              BuilderUtils.newContainerTokenIdentifier(token);\n          verifyAndGetContainerTokenIdentifier(token,\n              containerTokenIdentifier);\n          authorizeStartAndResourceIncreaseRequest(\n              nmTokenIdentifier, containerTokenIdentifier, false);\n          containerId \u003d containerTokenIdentifier.getContainerID();\n          // Reuse the startContainer logic to update NMToken,\n          // as container resource increase request will have come with\n          // an updated NMToken.\n          updateNMTokenIdentifier(nmTokenIdentifier);\n          Resource resource \u003d containerTokenIdentifier.getResource();\n          changeContainerResourceInternal(containerId,\n              containerTokenIdentifier.getVersion(), resource, true);\n          successfullyIncreasedContainers.add(containerId);\n        } catch (YarnException | InvalidToken e) {\n          failedContainers.put(containerId, SerializedException.newInstance(e));\n        } catch (IOException e) {\n          throw RPCUtil.getRemoteException(e);\n        }\n      }\n    }\n    return IncreaseContainersResourceResponse.newInstance(\n        successfullyIncreasedContainers, failedContainers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/08/16 9:04 AM",
      "commitNameOld": "9ef632f3b0b0e0808116cd1c7482a205b7ebef7d",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   public IncreaseContainersResourceResponse increaseContainersResource(\n       IncreaseContainersResourceRequest requests)\n           throws YarnException, IOException {\n     if (blockNewContainerRequests.get()) {\n       throw new NMNotYetReadyException(\n           \"Rejecting container resource increase as NodeManager has not\"\n               + \" yet connected with ResourceManager\");\n     }\n     UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n     authorizeUser(remoteUgi, nmTokenIdentifier);\n     List\u003cContainerId\u003e successfullyIncreasedContainers\n         \u003d new ArrayList\u003cContainerId\u003e();\n     Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n         new HashMap\u003cContainerId, SerializedException\u003e();\n     // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n     // to avoid race condition during NM-RM resync (due to RM restart) while a\n     // container resource is being increased in NM, in particular when the\n     // increased container has not yet been added to the increasedContainers\n     // map in NMContext.\n     synchronized (this.context) {\n       // Process container resource increase requests\n       for (org.apache.hadoop.yarn.api.records.Token token :\n           requests.getContainersToIncrease()) {\n         ContainerId containerId \u003d null;\n         try {\n           if (token.getIdentifier() \u003d\u003d null) {\n             throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n           }\n           ContainerTokenIdentifier containerTokenIdentifier \u003d\n               BuilderUtils.newContainerTokenIdentifier(token);\n           verifyAndGetContainerTokenIdentifier(token,\n               containerTokenIdentifier);\n           authorizeStartAndResourceIncreaseRequest(\n               nmTokenIdentifier, containerTokenIdentifier, false);\n           containerId \u003d containerTokenIdentifier.getContainerID();\n           // Reuse the startContainer logic to update NMToken,\n           // as container resource increase request will have come with\n           // an updated NMToken.\n           updateNMTokenIdentifier(nmTokenIdentifier);\n           Resource resource \u003d containerTokenIdentifier.getResource();\n-          changeContainerResourceInternal(containerId, resource, true);\n+          changeContainerResourceInternal(containerId,\n+              containerTokenIdentifier.getVersion(), resource, true);\n           successfullyIncreasedContainers.add(containerId);\n         } catch (YarnException | InvalidToken e) {\n           failedContainers.put(containerId, SerializedException.newInstance(e));\n         } catch (IOException e) {\n           throw RPCUtil.getRemoteException(e);\n         }\n       }\n     }\n     return IncreaseContainersResourceResponse.newInstance(\n         successfullyIncreasedContainers, failedContainers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IncreaseContainersResourceResponse increaseContainersResource(\n      IncreaseContainersResourceRequest requests)\n          throws YarnException, IOException {\n    if (blockNewContainerRequests.get()) {\n      throw new NMNotYetReadyException(\n          \"Rejecting container resource increase as NodeManager has not\"\n              + \" yet connected with ResourceManager\");\n    }\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    List\u003cContainerId\u003e successfullyIncreasedContainers\n        \u003d new ArrayList\u003cContainerId\u003e();\n    Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n        new HashMap\u003cContainerId, SerializedException\u003e();\n    // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n    // to avoid race condition during NM-RM resync (due to RM restart) while a\n    // container resource is being increased in NM, in particular when the\n    // increased container has not yet been added to the increasedContainers\n    // map in NMContext.\n    synchronized (this.context) {\n      // Process container resource increase requests\n      for (org.apache.hadoop.yarn.api.records.Token token :\n          requests.getContainersToIncrease()) {\n        ContainerId containerId \u003d null;\n        try {\n          if (token.getIdentifier() \u003d\u003d null) {\n            throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n          }\n          ContainerTokenIdentifier containerTokenIdentifier \u003d\n              BuilderUtils.newContainerTokenIdentifier(token);\n          verifyAndGetContainerTokenIdentifier(token,\n              containerTokenIdentifier);\n          authorizeStartAndResourceIncreaseRequest(\n              nmTokenIdentifier, containerTokenIdentifier, false);\n          containerId \u003d containerTokenIdentifier.getContainerID();\n          // Reuse the startContainer logic to update NMToken,\n          // as container resource increase request will have come with\n          // an updated NMToken.\n          updateNMTokenIdentifier(nmTokenIdentifier);\n          Resource resource \u003d containerTokenIdentifier.getResource();\n          changeContainerResourceInternal(containerId,\n              containerTokenIdentifier.getVersion(), resource, true);\n          successfullyIncreasedContainers.add(containerId);\n        } catch (YarnException | InvalidToken e) {\n          failedContainers.put(containerId, SerializedException.newInstance(e));\n        } catch (IOException e) {\n          throw RPCUtil.getRemoteException(e);\n        }\n      }\n    }\n    return IncreaseContainersResourceResponse.newInstance(\n        successfullyIncreasedContainers, failedContainers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1644. RM-NM protocol changes and NodeStatusUpdater implementation to support container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "5f5a968d65c44a831176764439e00db9203999ed",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,53 @@\n   public IncreaseContainersResourceResponse increaseContainersResource(\n       IncreaseContainersResourceRequest requests)\n           throws YarnException, IOException {\n     if (blockNewContainerRequests.get()) {\n       throw new NMNotYetReadyException(\n           \"Rejecting container resource increase as NodeManager has not\"\n               + \" yet connected with ResourceManager\");\n     }\n     UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n     authorizeUser(remoteUgi, nmTokenIdentifier);\n     List\u003cContainerId\u003e successfullyIncreasedContainers\n         \u003d new ArrayList\u003cContainerId\u003e();\n     Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n         new HashMap\u003cContainerId, SerializedException\u003e();\n-    // Process container resource increase requests\n-    for (org.apache.hadoop.yarn.api.records.Token token :\n-        requests.getContainersToIncrease()) {\n-      ContainerId containerId \u003d null;\n-      try {\n-        if (token.getIdentifier() \u003d\u003d null) {\n-          throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n+    // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n+    // to avoid race condition during NM-RM resync (due to RM restart) while a\n+    // container resource is being increased in NM, in particular when the\n+    // increased container has not yet been added to the increasedContainers\n+    // map in NMContext.\n+    synchronized (this.context) {\n+      // Process container resource increase requests\n+      for (org.apache.hadoop.yarn.api.records.Token token :\n+          requests.getContainersToIncrease()) {\n+        ContainerId containerId \u003d null;\n+        try {\n+          if (token.getIdentifier() \u003d\u003d null) {\n+            throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n+          }\n+          ContainerTokenIdentifier containerTokenIdentifier \u003d\n+              BuilderUtils.newContainerTokenIdentifier(token);\n+          verifyAndGetContainerTokenIdentifier(token,\n+              containerTokenIdentifier);\n+          authorizeStartAndResourceIncreaseRequest(\n+              nmTokenIdentifier, containerTokenIdentifier, false);\n+          containerId \u003d containerTokenIdentifier.getContainerID();\n+          // Reuse the startContainer logic to update NMToken,\n+          // as container resource increase request will have come with\n+          // an updated NMToken.\n+          updateNMTokenIdentifier(nmTokenIdentifier);\n+          Resource resource \u003d containerTokenIdentifier.getResource();\n+          changeContainerResourceInternal(containerId, resource, true);\n+          successfullyIncreasedContainers.add(containerId);\n+        } catch (YarnException | InvalidToken e) {\n+          failedContainers.put(containerId, SerializedException.newInstance(e));\n+        } catch (IOException e) {\n+          throw RPCUtil.getRemoteException(e);\n         }\n-        ContainerTokenIdentifier containerTokenIdentifier \u003d\n-            BuilderUtils.newContainerTokenIdentifier(token);\n-        verifyAndGetContainerTokenIdentifier(token,\n-            containerTokenIdentifier);\n-        authorizeStartAndResourceIncreaseRequest(\n-            nmTokenIdentifier, containerTokenIdentifier, false);\n-        containerId \u003d containerTokenIdentifier.getContainerID();\n-        // Reuse the startContainer logic to update NMToken,\n-        // as container resource increase request will have come with\n-        // an updated NMToken.\n-        updateNMTokenIdentifier(nmTokenIdentifier);\n-        Resource resource \u003d containerTokenIdentifier.getResource();\n-        changeContainerResourceInternal(containerId, resource, true);\n-        successfullyIncreasedContainers.add(containerId);\n-      } catch (YarnException | InvalidToken e) {\n-        failedContainers.put(containerId, SerializedException.newInstance(e));\n-      } catch (IOException e) {\n-        throw RPCUtil.getRemoteException(e);\n       }\n     }\n     return IncreaseContainersResourceResponse.newInstance(\n         successfullyIncreasedContainers, failedContainers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IncreaseContainersResourceResponse increaseContainersResource(\n      IncreaseContainersResourceRequest requests)\n          throws YarnException, IOException {\n    if (blockNewContainerRequests.get()) {\n      throw new NMNotYetReadyException(\n          \"Rejecting container resource increase as NodeManager has not\"\n              + \" yet connected with ResourceManager\");\n    }\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    List\u003cContainerId\u003e successfullyIncreasedContainers\n        \u003d new ArrayList\u003cContainerId\u003e();\n    Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n        new HashMap\u003cContainerId, SerializedException\u003e();\n    // Synchronize with NodeStatusUpdaterImpl#registerWithRM\n    // to avoid race condition during NM-RM resync (due to RM restart) while a\n    // container resource is being increased in NM, in particular when the\n    // increased container has not yet been added to the increasedContainers\n    // map in NMContext.\n    synchronized (this.context) {\n      // Process container resource increase requests\n      for (org.apache.hadoop.yarn.api.records.Token token :\n          requests.getContainersToIncrease()) {\n        ContainerId containerId \u003d null;\n        try {\n          if (token.getIdentifier() \u003d\u003d null) {\n            throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n          }\n          ContainerTokenIdentifier containerTokenIdentifier \u003d\n              BuilderUtils.newContainerTokenIdentifier(token);\n          verifyAndGetContainerTokenIdentifier(token,\n              containerTokenIdentifier);\n          authorizeStartAndResourceIncreaseRequest(\n              nmTokenIdentifier, containerTokenIdentifier, false);\n          containerId \u003d containerTokenIdentifier.getContainerID();\n          // Reuse the startContainer logic to update NMToken,\n          // as container resource increase request will have come with\n          // an updated NMToken.\n          updateNMTokenIdentifier(nmTokenIdentifier);\n          Resource resource \u003d containerTokenIdentifier.getResource();\n          changeContainerResourceInternal(containerId, resource, true);\n          successfullyIncreasedContainers.add(containerId);\n        } catch (YarnException | InvalidToken e) {\n          failedContainers.put(containerId, SerializedException.newInstance(e));\n        } catch (IOException e) {\n          throw RPCUtil.getRemoteException(e);\n        }\n      }\n    }\n    return IncreaseContainersResourceResponse.newInstance(\n        successfullyIncreasedContainers, failedContainers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "83a18add10ee937a04e833a66e0a4642e776e510",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,46 @@\n   public IncreaseContainersResourceResponse increaseContainersResource(\n       IncreaseContainersResourceRequest requests)\n-      throws YarnException, IOException {\n-    // To be implemented in YARN-1645\n-    return null;\n+          throws YarnException, IOException {\n+    if (blockNewContainerRequests.get()) {\n+      throw new NMNotYetReadyException(\n+          \"Rejecting container resource increase as NodeManager has not\"\n+              + \" yet connected with ResourceManager\");\n+    }\n+    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n+    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n+    authorizeUser(remoteUgi, nmTokenIdentifier);\n+    List\u003cContainerId\u003e successfullyIncreasedContainers\n+        \u003d new ArrayList\u003cContainerId\u003e();\n+    Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n+        new HashMap\u003cContainerId, SerializedException\u003e();\n+    // Process container resource increase requests\n+    for (org.apache.hadoop.yarn.api.records.Token token :\n+        requests.getContainersToIncrease()) {\n+      ContainerId containerId \u003d null;\n+      try {\n+        if (token.getIdentifier() \u003d\u003d null) {\n+          throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n+        }\n+        ContainerTokenIdentifier containerTokenIdentifier \u003d\n+            BuilderUtils.newContainerTokenIdentifier(token);\n+        verifyAndGetContainerTokenIdentifier(token,\n+            containerTokenIdentifier);\n+        authorizeStartAndResourceIncreaseRequest(\n+            nmTokenIdentifier, containerTokenIdentifier, false);\n+        containerId \u003d containerTokenIdentifier.getContainerID();\n+        // Reuse the startContainer logic to update NMToken,\n+        // as container resource increase request will have come with\n+        // an updated NMToken.\n+        updateNMTokenIdentifier(nmTokenIdentifier);\n+        Resource resource \u003d containerTokenIdentifier.getResource();\n+        changeContainerResourceInternal(containerId, resource, true);\n+        successfullyIncreasedContainers.add(containerId);\n+      } catch (YarnException | InvalidToken e) {\n+        failedContainers.put(containerId, SerializedException.newInstance(e));\n+      } catch (IOException e) {\n+        throw RPCUtil.getRemoteException(e);\n+      }\n+    }\n+    return IncreaseContainersResourceResponse.newInstance(\n+        successfullyIncreasedContainers, failedContainers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IncreaseContainersResourceResponse increaseContainersResource(\n      IncreaseContainersResourceRequest requests)\n          throws YarnException, IOException {\n    if (blockNewContainerRequests.get()) {\n      throw new NMNotYetReadyException(\n          \"Rejecting container resource increase as NodeManager has not\"\n              + \" yet connected with ResourceManager\");\n    }\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    List\u003cContainerId\u003e successfullyIncreasedContainers\n        \u003d new ArrayList\u003cContainerId\u003e();\n    Map\u003cContainerId, SerializedException\u003e failedContainers \u003d\n        new HashMap\u003cContainerId, SerializedException\u003e();\n    // Process container resource increase requests\n    for (org.apache.hadoop.yarn.api.records.Token token :\n        requests.getContainersToIncrease()) {\n      ContainerId containerId \u003d null;\n      try {\n        if (token.getIdentifier() \u003d\u003d null) {\n          throw new IOException(INVALID_CONTAINERTOKEN_MSG);\n        }\n        ContainerTokenIdentifier containerTokenIdentifier \u003d\n            BuilderUtils.newContainerTokenIdentifier(token);\n        verifyAndGetContainerTokenIdentifier(token,\n            containerTokenIdentifier);\n        authorizeStartAndResourceIncreaseRequest(\n            nmTokenIdentifier, containerTokenIdentifier, false);\n        containerId \u003d containerTokenIdentifier.getContainerID();\n        // Reuse the startContainer logic to update NMToken,\n        // as container resource increase request will have come with\n        // an updated NMToken.\n        updateNMTokenIdentifier(nmTokenIdentifier);\n        Resource resource \u003d containerTokenIdentifier.getResource();\n        changeContainerResourceInternal(containerId, resource, true);\n        successfullyIncreasedContainers.add(containerId);\n      } catch (YarnException | InvalidToken e) {\n        failedContainers.put(containerId, SerializedException.newInstance(e));\n      } catch (IOException e) {\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n    return IncreaseContainersResourceResponse.newInstance(\n        successfullyIncreasedContainers, failedContainers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "83a18add10ee937a04e833a66e0a4642e776e510": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1449. AM-NM protocol changes to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan)\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "83a18add10ee937a04e833a66e0a4642e776e510",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,6 @@\n+  public IncreaseContainersResourceResponse increaseContainersResource(\n+      IncreaseContainersResourceRequest requests)\n+      throws YarnException, IOException {\n+    // To be implemented in YARN-1645\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public IncreaseContainersResourceResponse increaseContainersResource(\n      IncreaseContainersResourceRequest requests)\n      throws YarnException, IOException {\n    // To be implemented in YARN-1645\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}