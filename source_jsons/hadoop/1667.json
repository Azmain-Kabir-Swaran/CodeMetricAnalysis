{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataTransferSaslUtil.java",
  "functionName": "negotiateCipherOption",
  "functionId": "negotiateCipherOption___conf-Configuration__options-List__CipherOption__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
  "functionStartLine": 305,
  "functionEndLine": 341,
  "numCommitsSeen": 13,
  "timeTaken": 2606,
  "changeHistory": [
    "4ebc23ba7b16c7b9acf38b5a864682a6c8890690",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "5573b3476a5a6fce0ac99c654a9a9ec90f744a20",
    "58c0bb9ed9f4a2491395b63c68046562a73526c9"
  ],
  "changeHistoryShort": {
    "4ebc23ba7b16c7b9acf38b5a864682a6c8890690": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Yfilerename",
    "5573b3476a5a6fce0ac99c654a9a9ec90f744a20": "Ymultichange(Yexceptionschange,Ybodychange)",
    "58c0bb9ed9f4a2491395b63c68046562a73526c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ebc23ba7b16c7b9acf38b5a864682a6c8890690": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14524. Make CryptoCodec Closeable so it can be cleaned up proactively.\n",
      "commitDate": "16/06/17 9:49 AM",
      "commitName": "4ebc23ba7b16c7b9acf38b5a864682a6c8890690",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 621.92,
      "commitsBetweenForRepo": 4058,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   public static CipherOption negotiateCipherOption(Configuration conf,\n       List\u003cCipherOption\u003e options) throws IOException {\n     // Negotiate cipher suites if configured.  Currently, the only supported\n     // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n     // values for future expansion.\n     String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n     if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n       return null;\n     }\n     if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n       throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n           DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n     }\n     if (options !\u003d null) {\n       for (CipherOption option : options) {\n         CipherSuite suite \u003d option.getCipherSuite();\n         if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n           int keyLen \u003d conf.getInt(\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n           CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n           byte[] inKey \u003d new byte[keyLen];\n           byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           byte[] outKey \u003d new byte[keyLen];\n           byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           assert codec !\u003d null;\n           codec.generateSecureRandom(inKey);\n           codec.generateSecureRandom(inIv);\n           codec.generateSecureRandom(outKey);\n           codec.generateSecureRandom(outIv);\n+          codec.close();\n           return new CipherOption(suite, inKey, inIv, outKey, outIv);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CipherOption negotiateCipherOption(Configuration conf,\n      List\u003cCipherOption\u003e options) throws IOException {\n    // Negotiate cipher suites if configured.  Currently, the only supported\n    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n    // values for future expansion.\n    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n      return null;\n    }\n    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n    }\n    if (options !\u003d null) {\n      for (CipherOption option : options) {\n        CipherSuite suite \u003d option.getCipherSuite();\n        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n          int keyLen \u003d conf.getInt(\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n          byte[] inKey \u003d new byte[keyLen];\n          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          byte[] outKey \u003d new byte[keyLen];\n          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          assert codec !\u003d null;\n          codec.generateSecureRandom(inKey);\n          codec.generateSecureRandom(inIv);\n          codec.generateSecureRandom(outKey);\n          codec.generateSecureRandom(outIv);\n          codec.close();\n          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:52 PM",
      "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public static CipherOption negotiateCipherOption(Configuration conf,\n       List\u003cCipherOption\u003e options) throws IOException {\n     // Negotiate cipher suites if configured.  Currently, the only supported\n     // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n     // values for future expansion.\n     String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n     if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n       return null;\n     }\n     if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n       throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n           DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n     }\n     if (options !\u003d null) {\n       for (CipherOption option : options) {\n         CipherSuite suite \u003d option.getCipherSuite();\n         if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n           int keyLen \u003d conf.getInt(\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n           CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n           byte[] inKey \u003d new byte[keyLen];\n           byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           byte[] outKey \u003d new byte[keyLen];\n           byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n+          assert codec !\u003d null;\n           codec.generateSecureRandom(inKey);\n           codec.generateSecureRandom(inIv);\n           codec.generateSecureRandom(outKey);\n           codec.generateSecureRandom(outIv);\n           return new CipherOption(suite, inKey, inIv, outKey, outIv);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CipherOption negotiateCipherOption(Configuration conf,\n      List\u003cCipherOption\u003e options) throws IOException {\n    // Negotiate cipher suites if configured.  Currently, the only supported\n    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n    // values for future expansion.\n    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n      return null;\n    }\n    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n    }\n    if (options !\u003d null) {\n      for (CipherOption option : options) {\n        CipherSuite suite \u003d option.getCipherSuite();\n        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n          int keyLen \u003d conf.getInt(\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n          byte[] inKey \u003d new byte[keyLen];\n          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          byte[] outKey \u003d new byte[keyLen];\n          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          assert codec !\u003d null;\n          codec.generateSecureRandom(inKey);\n          codec.generateSecureRandom(inIv);\n          codec.generateSecureRandom(outKey);\n          codec.generateSecureRandom(outIv);\n          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
      "extendedDetails": {}
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 1:26 PM",
      "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static CipherOption negotiateCipherOption(Configuration conf,\n      List\u003cCipherOption\u003e options) throws IOException {\n    // Negotiate cipher suites if configured.  Currently, the only supported\n    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n    // values for future expansion.\n    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n      return null;\n    }\n    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n    }\n    if (options !\u003d null) {\n      for (CipherOption option : options) {\n        CipherSuite suite \u003d option.getCipherSuite();\n        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n          int keyLen \u003d conf.getInt(\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n          byte[] inKey \u003d new byte[keyLen];\n          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          byte[] outKey \u003d new byte[keyLen];\n          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          codec.generateSecureRandom(inKey);\n          codec.generateSecureRandom(inIv);\n          codec.generateSecureRandom(outKey);\n          codec.generateSecureRandom(outIv);\n          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java"
      }
    },
    "5573b3476a5a6fce0ac99c654a9a9ec90f744a20": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7313. Support optional configuration of AES cipher suite on DataTransferProtocol. Contributed by Chris Nauroth.\n",
      "commitDate": "30/10/14 10:48 PM",
      "commitName": "5573b3476a5a6fce0ac99c654a9a9ec90f744a20",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7313. Support optional configuration of AES cipher suite on DataTransferProtocol. Contributed by Chris Nauroth.\n",
          "commitDate": "30/10/14 10:48 PM",
          "commitName": "5573b3476a5a6fce0ac99c654a9a9ec90f744a20",
          "commitAuthor": "cnauroth",
          "commitDateOld": "28/10/14 6:11 AM",
          "commitNameOld": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 2.69,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,35 @@\n   public static CipherOption negotiateCipherOption(Configuration conf,\n-      List\u003cCipherOption\u003e options) {\n+      List\u003cCipherOption\u003e options) throws IOException {\n+    // Negotiate cipher suites if configured.  Currently, the only supported\n+    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n+    // values for future expansion.\n+    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n+    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n+      return null;\n+    }\n+    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n+      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n+          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n+    }\n     if (options !\u003d null) {\n       for (CipherOption option : options) {\n-        // Currently we support AES/CTR/NoPadding\n         CipherSuite suite \u003d option.getCipherSuite();\n         if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n           int keyLen \u003d conf.getInt(\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n           CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n           byte[] inKey \u003d new byte[keyLen];\n           byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           byte[] outKey \u003d new byte[keyLen];\n           byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           codec.generateSecureRandom(inKey);\n           codec.generateSecureRandom(inIv);\n           codec.generateSecureRandom(outKey);\n           codec.generateSecureRandom(outIv);\n           return new CipherOption(suite, inKey, inIv, outKey, outIv);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CipherOption negotiateCipherOption(Configuration conf,\n      List\u003cCipherOption\u003e options) throws IOException {\n    // Negotiate cipher suites if configured.  Currently, the only supported\n    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n    // values for future expansion.\n    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n      return null;\n    }\n    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n    }\n    if (options !\u003d null) {\n      for (CipherOption option : options) {\n        CipherSuite suite \u003d option.getCipherSuite();\n        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n          int keyLen \u003d conf.getInt(\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n          byte[] inKey \u003d new byte[keyLen];\n          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          byte[] outKey \u003d new byte[keyLen];\n          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          codec.generateSecureRandom(inKey);\n          codec.generateSecureRandom(inIv);\n          codec.generateSecureRandom(outKey);\n          codec.generateSecureRandom(outIv);\n          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n        }\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7313. Support optional configuration of AES cipher suite on DataTransferProtocol. Contributed by Chris Nauroth.\n",
          "commitDate": "30/10/14 10:48 PM",
          "commitName": "5573b3476a5a6fce0ac99c654a9a9ec90f744a20",
          "commitAuthor": "cnauroth",
          "commitDateOld": "28/10/14 6:11 AM",
          "commitNameOld": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 2.69,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,35 @@\n   public static CipherOption negotiateCipherOption(Configuration conf,\n-      List\u003cCipherOption\u003e options) {\n+      List\u003cCipherOption\u003e options) throws IOException {\n+    // Negotiate cipher suites if configured.  Currently, the only supported\n+    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n+    // values for future expansion.\n+    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n+    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n+      return null;\n+    }\n+    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n+      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n+          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n+    }\n     if (options !\u003d null) {\n       for (CipherOption option : options) {\n-        // Currently we support AES/CTR/NoPadding\n         CipherSuite suite \u003d option.getCipherSuite();\n         if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n           int keyLen \u003d conf.getInt(\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n               DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n           CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n           byte[] inKey \u003d new byte[keyLen];\n           byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           byte[] outKey \u003d new byte[keyLen];\n           byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n           codec.generateSecureRandom(inKey);\n           codec.generateSecureRandom(inIv);\n           codec.generateSecureRandom(outKey);\n           codec.generateSecureRandom(outIv);\n           return new CipherOption(suite, inKey, inIv, outKey, outIv);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CipherOption negotiateCipherOption(Configuration conf,\n      List\u003cCipherOption\u003e options) throws IOException {\n    // Negotiate cipher suites if configured.  Currently, the only supported\n    // cipher suite is AES/CTR/NoPadding, but the protocol allows multiple\n    // values for future expansion.\n    String cipherSuites \u003d conf.get(DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY);\n    if (cipherSuites \u003d\u003d null || cipherSuites.isEmpty()) {\n      return null;\n    }\n    if (!cipherSuites.equals(CipherSuite.AES_CTR_NOPADDING.getName())) {\n      throw new IOException(String.format(\"Invalid cipher suite, %s\u003d%s\",\n          DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY, cipherSuites));\n    }\n    if (options !\u003d null) {\n      for (CipherOption option : options) {\n        CipherSuite suite \u003d option.getCipherSuite();\n        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n          int keyLen \u003d conf.getInt(\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n          byte[] inKey \u003d new byte[keyLen];\n          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          byte[] outKey \u003d new byte[keyLen];\n          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          codec.generateSecureRandom(inKey);\n          codec.generateSecureRandom(inIv);\n          codec.generateSecureRandom(outKey);\n          codec.generateSecureRandom(outIv);\n          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n        }\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "58c0bb9ed9f4a2491395b63c68046562a73526c9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6606. Optimize HDFS Encrypted Transport performance. (yliu)\n",
      "commitDate": "28/10/14 6:11 AM",
      "commitName": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
      "commitAuthor": "yliu",
      "diff": "@@ -0,0 +1,25 @@\n+  public static CipherOption negotiateCipherOption(Configuration conf,\n+      List\u003cCipherOption\u003e options) {\n+    if (options !\u003d null) {\n+      for (CipherOption option : options) {\n+        // Currently we support AES/CTR/NoPadding\n+        CipherSuite suite \u003d option.getCipherSuite();\n+        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n+          int keyLen \u003d conf.getInt(\n+              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n+              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n+          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n+          byte[] inKey \u003d new byte[keyLen];\n+          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n+          byte[] outKey \u003d new byte[keyLen];\n+          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n+          codec.generateSecureRandom(inKey);\n+          codec.generateSecureRandom(inIv);\n+          codec.generateSecureRandom(outKey);\n+          codec.generateSecureRandom(outIv);\n+          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static CipherOption negotiateCipherOption(Configuration conf,\n      List\u003cCipherOption\u003e options) {\n    if (options !\u003d null) {\n      for (CipherOption option : options) {\n        // Currently we support AES/CTR/NoPadding\n        CipherSuite suite \u003d option.getCipherSuite();\n        if (suite \u003d\u003d CipherSuite.AES_CTR_NOPADDING) {\n          int keyLen \u003d conf.getInt(\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY,\n              DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT) / 8;\n          CryptoCodec codec \u003d CryptoCodec.getInstance(conf, suite);\n          byte[] inKey \u003d new byte[keyLen];\n          byte[] inIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          byte[] outKey \u003d new byte[keyLen];\n          byte[] outIv \u003d new byte[suite.getAlgorithmBlockSize()];\n          codec.generateSecureRandom(inKey);\n          codec.generateSecureRandom(inIv);\n          codec.generateSecureRandom(outKey);\n          codec.generateSecureRandom(outIv);\n          return new CipherOption(suite, inKey, inIv, outKey, outIv);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java"
    }
  }
}