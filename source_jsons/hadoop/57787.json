{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HamletGen.java",
  "functionName": "genImpl",
  "functionId": "genImpl___spec-Class__?____implClassName-String__indent-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet2/HamletGen.java",
  "functionStartLine": 149,
  "functionEndLine": 171,
  "numCommitsSeen": 1,
  "timeTaken": 1818,
  "changeHistory": [
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397"
  ],
  "changeHistoryShort": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,23 @@\n+  void genImpl(Class\u003c?\u003e spec, String implClassName, int indent) {\n+    String specName \u003d spec.getSimpleName();\n+    for (Class\u003c?\u003e cls : spec.getClasses()) {\n+      String className \u003d cls.getSimpleName();\n+      if (cls.isInterface()) {\n+        genFactoryMethods(cls, indent);\n+      }\n+      if (isElement(className)) {\n+        LOG.info(\"Generating class {}\u003cT\u003e\", className);\n+        puts(indent, \"\\n\",\n+             \"public class \", className, \"\u003cT extends __\u003e\",\n+             \" extends EImp\u003cT\u003e implements \", specName, \".\", className, \" {\\n\",\n+             \"  public \", className, \"(String name, T parent,\",\n+             \" EnumSet\u003cEOpt\u003e opts) {\\n\",\n+             \"    super(name, parent, opts);\\n\",\n+             \"  }\");\n+        genMethods(className, cls, indent + 1);\n+        puts(indent, \"}\");\n+      } else if (className.equals(\"_Html\")) {\n+        top \u003d cls;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void genImpl(Class\u003c?\u003e spec, String implClassName, int indent) {\n    String specName \u003d spec.getSimpleName();\n    for (Class\u003c?\u003e cls : spec.getClasses()) {\n      String className \u003d cls.getSimpleName();\n      if (cls.isInterface()) {\n        genFactoryMethods(cls, indent);\n      }\n      if (isElement(className)) {\n        LOG.info(\"Generating class {}\u003cT\u003e\", className);\n        puts(indent, \"\\n\",\n             \"public class \", className, \"\u003cT extends __\u003e\",\n             \" extends EImp\u003cT\u003e implements \", specName, \".\", className, \" {\\n\",\n             \"  public \", className, \"(String name, T parent,\",\n             \" EnumSet\u003cEOpt\u003e opts) {\\n\",\n             \"    super(name, parent, opts);\\n\",\n             \"  }\");\n        genMethods(className, cls, indent + 1);\n        puts(indent, \"}\");\n      } else if (className.equals(\"_Html\")) {\n        top \u003d cls;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet2/HamletGen.java"
    }
  }
}