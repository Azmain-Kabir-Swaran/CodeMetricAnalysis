{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Folder.java",
  "functionName": "initialize",
  "functionId": "initialize___args-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Folder.java",
  "functionStartLine": 116,
  "functionEndLine": 207,
  "numCommitsSeen": 6,
  "timeTaken": 4309,
  "changeHistory": [
    "10325d97329c214bb3899c8535df5a366bc86d2f",
    "a238f931ea7dce0ca620d1798156c84ff77097ff",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "10325d97329c214bb3899c8535df5a366bc86d2f": "Yfilerename",
    "a238f931ea7dce0ca620d1798156c84ff77097ff": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10325d97329c214bb3899c8535df5a366bc86d2f": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3582. Move successfully passing MR1 tests to MR2 maven tree.(ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/01/12 2:10 PM",
      "commitName": "10325d97329c214bb3899c8535df5a366bc86d2f",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/01/12 10:20 AM",
      "commitNameOld": "8b2f6909ec7df5cffb5ef417f5c9cffdee43e38a",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int initialize(String[] args) throws IllegalArgumentException {\n    String tempDirName \u003d null;\n    String inputPathName \u003d null;\n    String outputPathName \u003d null;\n\n    for (int i \u003d 0; i \u003c args.length; ++i) {\n      String thisArg \u003d args[i];\n      if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n        startsAfter \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n        outputDuration \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n        inputCycle \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n        concentration \u003d Double.parseDouble(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n        debug \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n        allowMissorting \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n        seeded \u003d true;\n        randomSeed \u003d Long.parseLong(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n        skewBufferLength \u003d Integer.parseInt(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n        tempDirName \u003d args[++i];\n      } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n        throw new IllegalArgumentException(\"Illegal switch argument, \"\n            + thisArg + \" at position \" + i);\n      } else {\n        inputPathName \u003d thisArg;\n        outputPathName \u003d args[++i];\n\n        if (i !\u003d args.length - 1) {\n          throw new IllegalArgumentException(\"Too many non-switch arguments\");\n        }\n      }\n    }\n\n    try {\n      Configuration conf \u003d getConf();\n      Path inPath \u003d new Path(inputPathName);\n      reader \u003d\n          new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n              skewBufferLength, !allowMissorting);\n      Path outPath \u003d new Path(outputPathName);\n\n      outGen \u003d new DefaultOutputter\u003cLoggedJob\u003e();\n      outGen.init(outPath, conf);\n\n      tempDir \u003d\n          tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n\n      FileSystem fs \u003d tempDir.getFileSystem(getConf());\n      if (!fs.getFileStatus(tempDir).isDirectory()) {\n        throw new IOException(\"Your temp directory is not a directory\");\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        LOG.error(\"You must have an input cycle length.\");\n        return NO_INPUT_CYCLE_LENGTH;\n      }\n\n      if (outputDuration \u003c\u003d 0) {\n        outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        inputCycle \u003d outputDuration;\n      }\n\n      timeDilation \u003d (double) outputDuration / (double) inputCycle;\n\n      random \u003d seeded ? new Random(randomSeed) : new Random();\n\n      if (debug) {\n        randomSeed \u003d random.nextLong();\n\n        LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n\n        random \u003d new Random(randomSeed);\n\n        seeded \u003d true;\n      }\n    } catch (IOException e) {\n      e.printStackTrace(System.err);\n\n      return NON_EXISTENT_FILES;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Folder.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/Folder.java",
        "newPath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/Folder.java"
      }
    },
    "a238f931ea7dce0ca620d1798156c84ff77097ff": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-778. Rumen Anonymizer. (Amar Kamat and Chris Douglas via amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1215141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/11 6:20 AM",
      "commitName": "a238f931ea7dce0ca620d1798156c84ff77097ff",
      "commitAuthor": "Amar Kamat",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 113.59,
      "commitsBetweenForRepo": 787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,92 @@\n   private int initialize(String[] args) throws IllegalArgumentException {\n     String tempDirName \u003d null;\n     String inputPathName \u003d null;\n     String outputPathName \u003d null;\n \n     for (int i \u003d 0; i \u003c args.length; ++i) {\n       String thisArg \u003d args[i];\n       if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n         startsAfter \u003d parseDuration(args[++i]);\n       } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n         outputDuration \u003d parseDuration(args[++i]);\n       } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n         inputCycle \u003d parseDuration(args[++i]);\n       } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n         concentration \u003d Double.parseDouble(args[++i]);\n       } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n         debug \u003d true;\n       } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n         allowMissorting \u003d true;\n       } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n         seeded \u003d true;\n         randomSeed \u003d Long.parseLong(args[++i]);\n       } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n         skewBufferLength \u003d Integer.parseInt(args[++i]);\n       } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n         tempDirName \u003d args[++i];\n       } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n         throw new IllegalArgumentException(\"Illegal switch argument, \"\n             + thisArg + \" at position \" + i);\n       } else {\n         inputPathName \u003d thisArg;\n         outputPathName \u003d args[++i];\n \n         if (i !\u003d args.length - 1) {\n           throw new IllegalArgumentException(\"Too many non-switch arguments\");\n         }\n       }\n     }\n \n     try {\n       Configuration conf \u003d getConf();\n       Path inPath \u003d new Path(inputPathName);\n       reader \u003d\n           new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n               skewBufferLength, !allowMissorting);\n       Path outPath \u003d new Path(outputPathName);\n \n-      ObjectMapper outMapper \u003d new ObjectMapper();\n-      outMapper.configure(\n-          SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);\n-      JsonFactory outFactory \u003d outMapper.getJsonFactory();\n-      FileSystem outFS \u003d outPath.getFileSystem(conf);\n-\n-      CompressionCodec codec \u003d\n-          new CompressionCodecFactory(conf).getCodec(outPath);\n-      OutputStream output;\n-      Compressor compressor \u003d null;\n-      if (codec !\u003d null) {\n-        compressor \u003d CodecPool.getCompressor(codec);\n-        output \u003d codec.createOutputStream(outFS.create(outPath), compressor);\n-      } else {\n-        output \u003d outFS.create(outPath);\n-      }\n-\n-      outGen \u003d outFactory.createJsonGenerator(output, JsonEncoding.UTF8);\n-      outGen.useDefaultPrettyPrinter();\n+      outGen \u003d new DefaultOutputter\u003cLoggedJob\u003e();\n+      outGen.init(outPath, conf);\n \n       tempDir \u003d\n           tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n \n       FileSystem fs \u003d tempDir.getFileSystem(getConf());\n       if (!fs.getFileStatus(tempDir).isDirectory()) {\n         throw new IOException(\"Your temp directory is not a directory\");\n       }\n \n       if (inputCycle \u003c\u003d 0) {\n         LOG.error(\"You must have an input cycle length.\");\n         return NO_INPUT_CYCLE_LENGTH;\n       }\n \n       if (outputDuration \u003c\u003d 0) {\n         outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n       }\n \n       if (inputCycle \u003c\u003d 0) {\n         inputCycle \u003d outputDuration;\n       }\n \n       timeDilation \u003d (double) outputDuration / (double) inputCycle;\n \n       random \u003d seeded ? new Random(randomSeed) : new Random();\n \n       if (debug) {\n         randomSeed \u003d random.nextLong();\n \n         LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n \n         random \u003d new Random(randomSeed);\n \n         seeded \u003d true;\n       }\n     } catch (IOException e) {\n       e.printStackTrace(System.err);\n \n       return NON_EXISTENT_FILES;\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int initialize(String[] args) throws IllegalArgumentException {\n    String tempDirName \u003d null;\n    String inputPathName \u003d null;\n    String outputPathName \u003d null;\n\n    for (int i \u003d 0; i \u003c args.length; ++i) {\n      String thisArg \u003d args[i];\n      if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n        startsAfter \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n        outputDuration \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n        inputCycle \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n        concentration \u003d Double.parseDouble(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n        debug \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n        allowMissorting \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n        seeded \u003d true;\n        randomSeed \u003d Long.parseLong(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n        skewBufferLength \u003d Integer.parseInt(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n        tempDirName \u003d args[++i];\n      } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n        throw new IllegalArgumentException(\"Illegal switch argument, \"\n            + thisArg + \" at position \" + i);\n      } else {\n        inputPathName \u003d thisArg;\n        outputPathName \u003d args[++i];\n\n        if (i !\u003d args.length - 1) {\n          throw new IllegalArgumentException(\"Too many non-switch arguments\");\n        }\n      }\n    }\n\n    try {\n      Configuration conf \u003d getConf();\n      Path inPath \u003d new Path(inputPathName);\n      reader \u003d\n          new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n              skewBufferLength, !allowMissorting);\n      Path outPath \u003d new Path(outputPathName);\n\n      outGen \u003d new DefaultOutputter\u003cLoggedJob\u003e();\n      outGen.init(outPath, conf);\n\n      tempDir \u003d\n          tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n\n      FileSystem fs \u003d tempDir.getFileSystem(getConf());\n      if (!fs.getFileStatus(tempDir).isDirectory()) {\n        throw new IOException(\"Your temp directory is not a directory\");\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        LOG.error(\"You must have an input cycle length.\");\n        return NO_INPUT_CYCLE_LENGTH;\n      }\n\n      if (outputDuration \u003c\u003d 0) {\n        outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        inputCycle \u003d outputDuration;\n      }\n\n      timeDilation \u003d (double) outputDuration / (double) inputCycle;\n\n      random \u003d seeded ? new Random(randomSeed) : new Random();\n\n      if (debug) {\n        randomSeed \u003d random.nextLong();\n\n        LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n\n        random \u003d new Random(randomSeed);\n\n        seeded \u003d true;\n      }\n    } catch (IOException e) {\n      e.printStackTrace(System.err);\n\n      return NON_EXISTENT_FILES;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/Folder.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int initialize(String[] args) throws IllegalArgumentException {\n    String tempDirName \u003d null;\n    String inputPathName \u003d null;\n    String outputPathName \u003d null;\n\n    for (int i \u003d 0; i \u003c args.length; ++i) {\n      String thisArg \u003d args[i];\n      if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n        startsAfter \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n        outputDuration \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n        inputCycle \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n        concentration \u003d Double.parseDouble(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n        debug \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n        allowMissorting \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n        seeded \u003d true;\n        randomSeed \u003d Long.parseLong(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n        skewBufferLength \u003d Integer.parseInt(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n        tempDirName \u003d args[++i];\n      } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n        throw new IllegalArgumentException(\"Illegal switch argument, \"\n            + thisArg + \" at position \" + i);\n      } else {\n        inputPathName \u003d thisArg;\n        outputPathName \u003d args[++i];\n\n        if (i !\u003d args.length - 1) {\n          throw new IllegalArgumentException(\"Too many non-switch arguments\");\n        }\n      }\n    }\n\n    try {\n      Configuration conf \u003d getConf();\n      Path inPath \u003d new Path(inputPathName);\n      reader \u003d\n          new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n              skewBufferLength, !allowMissorting);\n      Path outPath \u003d new Path(outputPathName);\n\n      ObjectMapper outMapper \u003d new ObjectMapper();\n      outMapper.configure(\n          SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);\n      JsonFactory outFactory \u003d outMapper.getJsonFactory();\n      FileSystem outFS \u003d outPath.getFileSystem(conf);\n\n      CompressionCodec codec \u003d\n          new CompressionCodecFactory(conf).getCodec(outPath);\n      OutputStream output;\n      Compressor compressor \u003d null;\n      if (codec !\u003d null) {\n        compressor \u003d CodecPool.getCompressor(codec);\n        output \u003d codec.createOutputStream(outFS.create(outPath), compressor);\n      } else {\n        output \u003d outFS.create(outPath);\n      }\n\n      outGen \u003d outFactory.createJsonGenerator(output, JsonEncoding.UTF8);\n      outGen.useDefaultPrettyPrinter();\n\n      tempDir \u003d\n          tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n\n      FileSystem fs \u003d tempDir.getFileSystem(getConf());\n      if (!fs.getFileStatus(tempDir).isDirectory()) {\n        throw new IOException(\"Your temp directory is not a directory\");\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        LOG.error(\"You must have an input cycle length.\");\n        return NO_INPUT_CYCLE_LENGTH;\n      }\n\n      if (outputDuration \u003c\u003d 0) {\n        outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        inputCycle \u003d outputDuration;\n      }\n\n      timeDilation \u003d (double) outputDuration / (double) inputCycle;\n\n      random \u003d seeded ? new Random(randomSeed) : new Random();\n\n      if (debug) {\n        randomSeed \u003d random.nextLong();\n\n        LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n\n        random \u003d new Random(randomSeed);\n\n        seeded \u003d true;\n      }\n    } catch (IOException e) {\n      e.printStackTrace(System.err);\n\n      return NON_EXISTENT_FILES;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/Folder.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/tools/rumen/Folder.java",
        "newPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/Folder.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int initialize(String[] args) throws IllegalArgumentException {\n    String tempDirName \u003d null;\n    String inputPathName \u003d null;\n    String outputPathName \u003d null;\n\n    for (int i \u003d 0; i \u003c args.length; ++i) {\n      String thisArg \u003d args[i];\n      if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n        startsAfter \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n        outputDuration \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n        inputCycle \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n        concentration \u003d Double.parseDouble(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n        debug \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n        allowMissorting \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n        seeded \u003d true;\n        randomSeed \u003d Long.parseLong(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n        skewBufferLength \u003d Integer.parseInt(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n        tempDirName \u003d args[++i];\n      } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n        throw new IllegalArgumentException(\"Illegal switch argument, \"\n            + thisArg + \" at position \" + i);\n      } else {\n        inputPathName \u003d thisArg;\n        outputPathName \u003d args[++i];\n\n        if (i !\u003d args.length - 1) {\n          throw new IllegalArgumentException(\"Too many non-switch arguments\");\n        }\n      }\n    }\n\n    try {\n      Configuration conf \u003d getConf();\n      Path inPath \u003d new Path(inputPathName);\n      reader \u003d\n          new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n              skewBufferLength, !allowMissorting);\n      Path outPath \u003d new Path(outputPathName);\n\n      ObjectMapper outMapper \u003d new ObjectMapper();\n      outMapper.configure(\n          SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);\n      JsonFactory outFactory \u003d outMapper.getJsonFactory();\n      FileSystem outFS \u003d outPath.getFileSystem(conf);\n\n      CompressionCodec codec \u003d\n          new CompressionCodecFactory(conf).getCodec(outPath);\n      OutputStream output;\n      Compressor compressor \u003d null;\n      if (codec !\u003d null) {\n        compressor \u003d CodecPool.getCompressor(codec);\n        output \u003d codec.createOutputStream(outFS.create(outPath), compressor);\n      } else {\n        output \u003d outFS.create(outPath);\n      }\n\n      outGen \u003d outFactory.createJsonGenerator(output, JsonEncoding.UTF8);\n      outGen.useDefaultPrettyPrinter();\n\n      tempDir \u003d\n          tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n\n      FileSystem fs \u003d tempDir.getFileSystem(getConf());\n      if (!fs.getFileStatus(tempDir).isDirectory()) {\n        throw new IOException(\"Your temp directory is not a directory\");\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        LOG.error(\"You must have an input cycle length.\");\n        return NO_INPUT_CYCLE_LENGTH;\n      }\n\n      if (outputDuration \u003c\u003d 0) {\n        outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        inputCycle \u003d outputDuration;\n      }\n\n      timeDilation \u003d (double) outputDuration / (double) inputCycle;\n\n      random \u003d seeded ? new Random(randomSeed) : new Random();\n\n      if (debug) {\n        randomSeed \u003d random.nextLong();\n\n        LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n\n        random \u003d new Random(randomSeed);\n\n        seeded \u003d true;\n      }\n    } catch (IOException e) {\n      e.printStackTrace(System.err);\n\n      return NON_EXISTENT_FILES;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-mapreduce/src/tools/org/apache/hadoop/tools/rumen/Folder.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/tools/org/apache/hadoop/tools/rumen/Folder.java",
        "newPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/tools/rumen/Folder.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,109 @@\n+  private int initialize(String[] args) throws IllegalArgumentException {\n+    String tempDirName \u003d null;\n+    String inputPathName \u003d null;\n+    String outputPathName \u003d null;\n+\n+    for (int i \u003d 0; i \u003c args.length; ++i) {\n+      String thisArg \u003d args[i];\n+      if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n+        startsAfter \u003d parseDuration(args[++i]);\n+      } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n+        outputDuration \u003d parseDuration(args[++i]);\n+      } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n+        inputCycle \u003d parseDuration(args[++i]);\n+      } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n+        concentration \u003d Double.parseDouble(args[++i]);\n+      } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n+        debug \u003d true;\n+      } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n+        allowMissorting \u003d true;\n+      } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n+        seeded \u003d true;\n+        randomSeed \u003d Long.parseLong(args[++i]);\n+      } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n+        skewBufferLength \u003d Integer.parseInt(args[++i]);\n+      } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n+        tempDirName \u003d args[++i];\n+      } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n+        throw new IllegalArgumentException(\"Illegal switch argument, \"\n+            + thisArg + \" at position \" + i);\n+      } else {\n+        inputPathName \u003d thisArg;\n+        outputPathName \u003d args[++i];\n+\n+        if (i !\u003d args.length - 1) {\n+          throw new IllegalArgumentException(\"Too many non-switch arguments\");\n+        }\n+      }\n+    }\n+\n+    try {\n+      Configuration conf \u003d getConf();\n+      Path inPath \u003d new Path(inputPathName);\n+      reader \u003d\n+          new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n+              skewBufferLength, !allowMissorting);\n+      Path outPath \u003d new Path(outputPathName);\n+\n+      ObjectMapper outMapper \u003d new ObjectMapper();\n+      outMapper.configure(\n+          SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);\n+      JsonFactory outFactory \u003d outMapper.getJsonFactory();\n+      FileSystem outFS \u003d outPath.getFileSystem(conf);\n+\n+      CompressionCodec codec \u003d\n+          new CompressionCodecFactory(conf).getCodec(outPath);\n+      OutputStream output;\n+      Compressor compressor \u003d null;\n+      if (codec !\u003d null) {\n+        compressor \u003d CodecPool.getCompressor(codec);\n+        output \u003d codec.createOutputStream(outFS.create(outPath), compressor);\n+      } else {\n+        output \u003d outFS.create(outPath);\n+      }\n+\n+      outGen \u003d outFactory.createJsonGenerator(output, JsonEncoding.UTF8);\n+      outGen.useDefaultPrettyPrinter();\n+\n+      tempDir \u003d\n+          tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n+\n+      FileSystem fs \u003d tempDir.getFileSystem(getConf());\n+      if (!fs.getFileStatus(tempDir).isDirectory()) {\n+        throw new IOException(\"Your temp directory is not a directory\");\n+      }\n+\n+      if (inputCycle \u003c\u003d 0) {\n+        LOG.error(\"You must have an input cycle length.\");\n+        return NO_INPUT_CYCLE_LENGTH;\n+      }\n+\n+      if (outputDuration \u003c\u003d 0) {\n+        outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n+      }\n+\n+      if (inputCycle \u003c\u003d 0) {\n+        inputCycle \u003d outputDuration;\n+      }\n+\n+      timeDilation \u003d (double) outputDuration / (double) inputCycle;\n+\n+      random \u003d seeded ? new Random(randomSeed) : new Random();\n+\n+      if (debug) {\n+        randomSeed \u003d random.nextLong();\n+\n+        LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n+\n+        random \u003d new Random(randomSeed);\n+\n+        seeded \u003d true;\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace(System.err);\n+\n+      return NON_EXISTENT_FILES;\n+    }\n+\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int initialize(String[] args) throws IllegalArgumentException {\n    String tempDirName \u003d null;\n    String inputPathName \u003d null;\n    String outputPathName \u003d null;\n\n    for (int i \u003d 0; i \u003c args.length; ++i) {\n      String thisArg \u003d args[i];\n      if (thisArg.equalsIgnoreCase(\"-starts-after\")) {\n        startsAfter \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-output-duration\")) {\n        outputDuration \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-input-cycle\")) {\n        inputCycle \u003d parseDuration(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-concentration\")) {\n        concentration \u003d Double.parseDouble(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-debug\")) {\n        debug \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-allow-missorting\")) {\n        allowMissorting \u003d true;\n      } else if (thisArg.equalsIgnoreCase(\"-seed\")) {\n        seeded \u003d true;\n        randomSeed \u003d Long.parseLong(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-skew-buffer-length\")) {\n        skewBufferLength \u003d Integer.parseInt(args[++i]);\n      } else if (thisArg.equalsIgnoreCase(\"-temp-directory\")) {\n        tempDirName \u003d args[++i];\n      } else if (thisArg.equals(\"\") || thisArg.startsWith(\"-\")) {\n        throw new IllegalArgumentException(\"Illegal switch argument, \"\n            + thisArg + \" at position \" + i);\n      } else {\n        inputPathName \u003d thisArg;\n        outputPathName \u003d args[++i];\n\n        if (i !\u003d args.length - 1) {\n          throw new IllegalArgumentException(\"Too many non-switch arguments\");\n        }\n      }\n    }\n\n    try {\n      Configuration conf \u003d getConf();\n      Path inPath \u003d new Path(inputPathName);\n      reader \u003d\n          new DeskewedJobTraceReader(new JobTraceReader(inPath, conf),\n              skewBufferLength, !allowMissorting);\n      Path outPath \u003d new Path(outputPathName);\n\n      ObjectMapper outMapper \u003d new ObjectMapper();\n      outMapper.configure(\n          SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);\n      JsonFactory outFactory \u003d outMapper.getJsonFactory();\n      FileSystem outFS \u003d outPath.getFileSystem(conf);\n\n      CompressionCodec codec \u003d\n          new CompressionCodecFactory(conf).getCodec(outPath);\n      OutputStream output;\n      Compressor compressor \u003d null;\n      if (codec !\u003d null) {\n        compressor \u003d CodecPool.getCompressor(codec);\n        output \u003d codec.createOutputStream(outFS.create(outPath), compressor);\n      } else {\n        output \u003d outFS.create(outPath);\n      }\n\n      outGen \u003d outFactory.createJsonGenerator(output, JsonEncoding.UTF8);\n      outGen.useDefaultPrettyPrinter();\n\n      tempDir \u003d\n          tempDirName \u003d\u003d null ? outPath.getParent() : new Path(tempDirName);\n\n      FileSystem fs \u003d tempDir.getFileSystem(getConf());\n      if (!fs.getFileStatus(tempDir).isDirectory()) {\n        throw new IOException(\"Your temp directory is not a directory\");\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        LOG.error(\"You must have an input cycle length.\");\n        return NO_INPUT_CYCLE_LENGTH;\n      }\n\n      if (outputDuration \u003c\u003d 0) {\n        outputDuration \u003d 60L * 60L * TICKS_PER_SECOND;\n      }\n\n      if (inputCycle \u003c\u003d 0) {\n        inputCycle \u003d outputDuration;\n      }\n\n      timeDilation \u003d (double) outputDuration / (double) inputCycle;\n\n      random \u003d seeded ? new Random(randomSeed) : new Random();\n\n      if (debug) {\n        randomSeed \u003d random.nextLong();\n\n        LOG.warn(\"This run effectively has a -seed of \" + randomSeed);\n\n        random \u003d new Random(randomSeed);\n\n        seeded \u003d true;\n      }\n    } catch (IOException e) {\n      e.printStackTrace(System.err);\n\n      return NON_EXISTENT_FILES;\n    }\n\n    return 0;\n  }",
      "path": "mapreduce/src/tools/org/apache/hadoop/tools/rumen/Folder.java"
    }
  }
}