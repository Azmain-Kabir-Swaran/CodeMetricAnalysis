{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "recoverLease",
  "functionId": "recoverLease___src-String__holder-String__clientMachine-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 2749,
  "functionEndLine": 2782,
  "numCommitsSeen": 899,
  "timeTaken": 58446,
  "changeHistory": [
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "2cb09e98e392feb5732d0754b539240094edc37a",
    "8f7d4bb09f760780dd193c97796ebf4d22cfd2d7",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "c95b878abf313507666ea018f9e6033c4c166e10",
    "407bb3d3e452c8277c498dd14e0cc5b7762a7091",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
    "1fe1942328856dd832e9f94fb56a40ab3d810870",
    "0b101bd7e875ee5597ddb8f0d887159076310ffa",
    "980e6c54bab4ffc87e168cd5c217fef44c72a878",
    "fd1000bcefa07992ff5c6fae3508f3e33b7955c6",
    "3bf09c51501a23b7fa28fd0a0c4c0965858d026c",
    "cdb292f44caff9763631d9e9bcd69c375a7cddea",
    "298eb4265702362d14d7c375983bcd85371ab9af",
    "ba2ee1d7fb91462c861169224d250d2d90bec3a6",
    "36d1c49486587c2dbb193e8538b1d4510c462fa6",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "2cb09e98e392feb5732d0754b539240094edc37a": "Ybodychange",
    "8f7d4bb09f760780dd193c97796ebf4d22cfd2d7": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ybodychange",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange",
    "407bb3d3e452c8277c498dd14e0cc5b7762a7091": "Ybodychange",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": "Ybodychange",
    "1fe1942328856dd832e9f94fb56a40ab3d810870": "Ybodychange",
    "0b101bd7e875ee5597ddb8f0d887159076310ffa": "Ybodychange",
    "980e6c54bab4ffc87e168cd5c217fef44c72a878": "Ybodychange",
    "fd1000bcefa07992ff5c6fae3508f3e33b7955c6": "Ybodychange",
    "3bf09c51501a23b7fa28fd0a0c4c0965858d026c": "Ybodychange",
    "cdb292f44caff9763631d9e9bcd69c375a7cddea": "Ybodychange",
    "298eb4265702362d14d7c375983bcd85371ab9af": "Ybodychange",
    "ba2ee1d7fb91462c861169224d250d2d90bec3a6": "Ybodychange",
    "36d1c49486587c2dbb193e8538b1d4510c462fa6": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     boolean skipSync \u003d false;\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n+    FSPermissionChecker.setOperationType(null);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock(\"recoverLease\");\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(null);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock(\"recoverLease\");\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     boolean skipSync \u003d false;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock(\"recoverLease\");\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock(\"recoverLease\");\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n-      writeUnlock();\n+      writeUnlock(\"recoverLease\");\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock(\"recoverLease\");\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "17/10/16 5:45 PM",
      "commitNameOld": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 6.9,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,33 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n-    if (!DFSUtil.isValidName(src)) {\n-      throw new IOException(\"Invalid file name: \" + src);\n-    }\n-  \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n-      final INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n+      final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      final INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 3:28 PM",
      "commitNameOld": "864f878d5912c82f3204f1582cfb7eb7c9f1a1da",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n-      src \u003d dir.resolvePath(pc, src);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n+      final INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n+      src \u003d iip.getPath();\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      final INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n      src \u003d iip.getPath();\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 11:12 AM",
      "commitNameOld": "22ef5286bc8511ddee9594b7cecc598bf41a850b",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 12.15,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+      src \u003d dir.resolvePath(pc, src);\n       final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d dir.resolvePath(pc, src);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "2cb09e98e392feb5732d0754b539240094edc37a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8576.  Lease recovery should return true if the lease can be released and the file can be closed.  Contributed by J.Andreina\n",
      "commitDate": "15/06/15 4:07 PM",
      "commitName": "2cb09e98e392feb5732d0754b539240094edc37a",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "13/06/15 10:37 AM",
      "commitNameOld": "b8341f1cd89791c51b396ad531ec7fcc631be149",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 2.23,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n-      recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n+      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n           iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n-    return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      return recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "8f7d4bb09f760780dd193c97796ebf4d22cfd2d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7738. Revise the exception message for recover lease; add more truncate tests such as truncate with HA setup, negative tests, truncate with other operations and multiple truncates.\n",
      "commitDate": "07/02/15 3:21 PM",
      "commitName": "8f7d4bb09f760780dd193c97796ebf4d22cfd2d7",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "03/02/15 12:45 PM",
      "commitNameOld": "843806d03ab1a24f191782f42eb817505228eb9f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 4.11,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n-      recoverLeaseInternal(iip, src, holder, clientMachine, true);\n+      recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n+          iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(RecoverLeaseOp.RECOVER_LEASE,\n          iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/12/14 11:51 AM",
      "commitNameOld": "46612c7a5135d20b20403780b47dd00654aab057",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n       final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n-      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n+      recoverLeaseInternal(iip, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(iip, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "05/12/14 10:55 AM",
      "commitNameOld": "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n+      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n+      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n-        checkPathAccess(pc, src, FsAction.WRITE);\n+        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      final INodeFile inode \u003d INodeFile.valueOf(iip.getLastINode(), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n-      src \u003d resolvePath(src, pathComponents);\n+      src \u003d dir.resolvePath(pc, src, pathComponents);\n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "407bb3d3e452c8277c498dd14e0cc5b7762a7091": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6509. Create a special /.reserved/raw directory for raw access to encrypted data. Contributed by Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1614490 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/14 2:11 PM",
      "commitName": "407bb3d3e452c8277c498dd14e0cc5b7762a7091",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/07/14 6:32 AM",
      "commitNameOld": "1d3e9ec935de0e5bcb6fda0b88fa69d9e9ce6595",
      "commitAuthorOld": "",
      "daysBetweenCommits": 2.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n-      src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n+      src \u003d resolvePath(src, pathComponents);\n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d resolvePath(src, pathComponents);\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": {
      "type": "Ybodychange",
      "commitMessage": "merge trunk to branch HDFS-4949\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 7:14 PM",
      "commitName": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/10/13 3:15 PM",
      "commitNameOld": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n-      if (isInSafeMode()) {\n-        throw new SafeModeException(\n-            \"Cannot recover the lease of \" + src, safeMode);\n-      }\n+      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1fe1942328856dd832e9f94fb56a40ab3d810870": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5291. Standby namenode after transition to active goes into safemode. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530112 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/10/13 4:58 PM",
      "commitName": "1fe1942328856dd832e9f94fb56a40ab3d810870",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/10/13 11:39 AM",
      "commitNameOld": "7317e97bd72ca30f5db37fa94389dbdb52ae079e",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.22,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n-      if (isInSafeMode()) {\n-        throw new SafeModeException(\n-            \"Cannot recover the lease of \" + src, safeMode);\n-      }\n+      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n       src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot recover the lease of \" + src);\n      src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "0b101bd7e875ee5597ddb8f0d887159076310ffa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4434. Reverting change r1470089 that merges trunk to HDFS-2802.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470194 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/04/13 9:57 AM",
      "commitName": "0b101bd7e875ee5597ddb8f0d887159076310ffa",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "19/04/13 5:02 PM",
      "commitNameOld": "9af0babe7ef9c4bc956b77aac250f8eee6c8450f",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n-      src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "980e6c54bab4ffc87e168cd5c217fef44c72a878": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4434. Provide a mapping from INodeId to INode. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 5:10 PM",
      "commitName": "980e6c54bab4ffc87e168cd5c217fef44c72a878",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "12/04/13 6:35 PM",
      "commitNameOld": "242028a3fb887708dea5ef557c0ded22e014ac7d",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     if (!DFSUtil.isValidName(src)) {\n       throw new IOException(\"Invalid file name: \" + src);\n     }\n   \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n+      src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      src \u003d FSDirectory.resolvePath(src, pathComponents, dir);\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "fd1000bcefa07992ff5c6fae3508f3e33b7955c6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4679. Namenode operation checks should be done in a consistent manner. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 3:45 PM",
      "commitName": "fd1000bcefa07992ff5c6fae3508f3e33b7955c6",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "08/04/13 6:21 PM",
      "commitNameOld": "f680865d994b8b75c11fa85f3241b1b9c6851187",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n+    if (!DFSUtil.isValidName(src)) {\n+      throw new IOException(\"Invalid file name: \" + src);\n+    }\n+  \n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n-\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n-      if (!DFSUtil.isValidName(src)) {\n-        throw new IOException(\"Invalid file name: \" + src);\n-      }\n-  \n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    if (!DFSUtil.isValidName(src)) {\n      throw new IOException(\"Invalid file name: \" + src);\n    }\n  \n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3bf09c51501a23b7fa28fd0a0c4c0965858d026c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4591. HA clients can fail to fail over while Standby NN is performing long checkpoint. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/13 12:51 PM",
      "commitName": "3bf09c51501a23b7fa28fd0a0c4c0965858d026c",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "12/03/13 7:32 PM",
      "commitNameOld": "86a940f7adc5bd9c9eaea2283df5e014e5079ab6",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     boolean skipSync \u003d false;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n+    checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n \n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n       if (!DFSUtil.isValidName(src)) {\n         throw new IOException(\"Invalid file name: \" + src);\n       }\n   \n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "cdb292f44caff9763631d9e9bcd69c375a7cddea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4222. NN is unresponsive and loses heartbeats from DNs when configured to use LDAP and LDAP has issues. Contributed by Xiaobo Peng and Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1448801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/02/13 1:02 PM",
      "commitName": "cdb292f44caff9763631d9e9bcd69c375a7cddea",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/02/13 4:50 PM",
      "commitNameOld": "969e84decbc976bd98f1050aead695d15a024ab6",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 9.84,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     boolean skipSync \u003d false;\n+    FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n \n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n       if (!DFSUtil.isValidName(src)) {\n         throw new IOException(\"Invalid file name: \" + src);\n       }\n   \n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n-        checkPathAccess(src, FsAction.WRITE);\n+        checkPathAccess(pc, src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } catch (StandbyException se) {\n       skipSync \u003d true;\n       throw se;\n     } finally {\n       writeUnlock();\n       // There might be transactions logged while trying to recover the lease.\n       // They need to be sync\u0027ed even when an exception was thrown.\n       if (!skipSync) {\n         getEditLog().logSync();\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "298eb4265702362d14d7c375983bcd85371ab9af": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4186. logSync() is called with the write lock held while releasing lease (Kihwal Lee via daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/11/12 12:33 PM",
      "commitName": "298eb4265702362d14d7c375983bcd85371ab9af",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "12/11/12 5:26 PM",
      "commitNameOld": "b3e42a1ed56f83e2cc35e58f2ffd02c9ff3821e0",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 2.8,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,37 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n+    boolean skipSync \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n \n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n       if (!DFSUtil.isValidName(src)) {\n         throw new IOException(\"Invalid file name: \" + src);\n       }\n   \n       final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n+    } catch (StandbyException se) {\n+      skipSync \u003d true;\n+      throw se;\n     } finally {\n       writeUnlock();\n+      // There might be transactions logged while trying to recover the lease.\n+      // They need to be sync\u0027ed even when an exception was thrown.\n+      if (!skipSync) {\n+        getEditLog().logSync();\n+      }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    boolean skipSync \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } catch (StandbyException se) {\n      skipSync \u003d true;\n      throw se;\n    } finally {\n      writeUnlock();\n      // There might be transactions logged while trying to recover the lease.\n      // They need to be sync\u0027ed even when an exception was thrown.\n      if (!skipSync) {\n        getEditLog().logSync();\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ba2ee1d7fb91462c861169224d250d2d90bec3a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4107. Add utility methods for casting INode to INodeFile and INodeFileUnderConstruction.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1402265 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/12 11:44 AM",
      "commitName": "ba2ee1d7fb91462c861169224d250d2d90bec3a6",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/10/12 11:30 AM",
      "commitNameOld": "75cdb5bb4965161021df47376cccf058bf413f3b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,28 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n \n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n       if (!DFSUtil.isValidName(src)) {\n         throw new IOException(\"Invalid file name: \" + src);\n       }\n   \n-      INode inode \u003d dir.getFileINode(src);\n-      if (inode \u003d\u003d null) {\n-        throw new FileNotFoundException(\"File not found \" + src);\n-      }\n-  \n+      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } finally {\n       writeUnlock();\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      final INodeFile inode \u003d INodeFile.valueOf(dir.getINode(src), src);\n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } finally {\n      writeUnlock();\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "36d1c49486587c2dbb193e8538b1d4510c462fa6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2693. Fix synchronization issues around state transition. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1221582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/11 7:03 PM",
      "commitName": "36d1c49486587c2dbb193e8538b1d4510c462fa6",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "16/12/11 10:36 AM",
      "commitNameOld": "371f4228e86f5ebffb3d8647fb30b8bdc2b777c4",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 4.35,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   boolean recoverLease(String src, String holder, String clientMachine)\n       throws IOException {\n     writeLock();\n     try {\n+      checkOperation(OperationCategory.WRITE);\n+\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot recover the lease of \" + src, safeMode);\n       }\n       if (!DFSUtil.isValidName(src)) {\n         throw new IOException(\"Invalid file name: \" + src);\n       }\n   \n       INode inode \u003d dir.getFileINode(src);\n       if (inode \u003d\u003d null) {\n         throw new FileNotFoundException(\"File not found \" + src);\n       }\n   \n       if (!inode.isUnderConstruction()) {\n         return true;\n       }\n       if (isPermissionEnabled) {\n         checkPathAccess(src, FsAction.WRITE);\n       }\n   \n       recoverLeaseInternal(inode, src, holder, clientMachine, true);\n     } finally {\n       writeUnlock();\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      INode inode \u003d dir.getFileINode(src);\n      if (inode \u003d\u003d null) {\n        throw new FileNotFoundException(\"File not found \" + src);\n      }\n  \n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } finally {\n      writeUnlock();\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    writeLock();\n    try {\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      INode inode \u003d dir.getFileINode(src);\n      if (inode \u003d\u003d null) {\n        throw new FileNotFoundException(\"File not found \" + src);\n      }\n  \n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } finally {\n      writeUnlock();\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    writeLock();\n    try {\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      INode inode \u003d dir.getFileINode(src);\n      if (inode \u003d\u003d null) {\n        throw new FileNotFoundException(\"File not found \" + src);\n      }\n  \n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } finally {\n      writeUnlock();\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+  boolean recoverLease(String src, String holder, String clientMachine)\n+      throws IOException {\n+    writeLock();\n+    try {\n+      if (isInSafeMode()) {\n+        throw new SafeModeException(\n+            \"Cannot recover the lease of \" + src, safeMode);\n+      }\n+      if (!DFSUtil.isValidName(src)) {\n+        throw new IOException(\"Invalid file name: \" + src);\n+      }\n+  \n+      INode inode \u003d dir.getFileINode(src);\n+      if (inode \u003d\u003d null) {\n+        throw new FileNotFoundException(\"File not found \" + src);\n+      }\n+  \n+      if (!inode.isUnderConstruction()) {\n+        return true;\n+      }\n+      if (isPermissionEnabled) {\n+        checkPathAccess(src, FsAction.WRITE);\n+      }\n+  \n+      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n+    } finally {\n+      writeUnlock();\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean recoverLease(String src, String holder, String clientMachine)\n      throws IOException {\n    writeLock();\n    try {\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot recover the lease of \" + src, safeMode);\n      }\n      if (!DFSUtil.isValidName(src)) {\n        throw new IOException(\"Invalid file name: \" + src);\n      }\n  \n      INode inode \u003d dir.getFileINode(src);\n      if (inode \u003d\u003d null) {\n        throw new FileNotFoundException(\"File not found \" + src);\n      }\n  \n      if (!inode.isUnderConstruction()) {\n        return true;\n      }\n      if (isPermissionEnabled) {\n        checkPathAccess(src, FsAction.WRITE);\n      }\n  \n      recoverLeaseInternal(inode, src, holder, clientMachine, true);\n    } finally {\n      writeUnlock();\n    }\n    return false;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}