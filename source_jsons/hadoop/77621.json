{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RetryUtils.java",
  "functionName": "shouldRetry",
  "functionId": "shouldRetry___e-Exception__retries-int__failovers-int__isMethodIdempotent-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java",
  "functionStartLine": 99,
  "functionEndLine": 129,
  "numCommitsSeen": 8,
  "timeTaken": 1764,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "08d8e0ba259f01465a83d8db09466dfd46b7ec81",
    "3107434031e0da149ea2c09c5fc76f1a152435a0",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "935075121fc1e63a06dc5fe0b9b1ce9708f73faf",
    "ec94ea265825b1fcb191e93a5435abfd96a2d8bc"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "08d8e0ba259f01465a83d8db09466dfd46b7ec81": "Ybodychange",
    "3107434031e0da149ea2c09c5fc76f1a152435a0": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Ybodychange",
    "935075121fc1e63a06dc5fe0b9b1ce9708f73faf": "Ybodychange",
    "ec94ea265825b1fcb191e93a5435abfd96a2d8bc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 211.49,
      "commitsBetweenForRepo": 1578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n     public RetryAction shouldRetry(Exception e, int retries, int failovers,\n         boolean isMethodIdempotent) throws Exception {\n       if (e instanceof ServiceException) {\n         //unwrap ServiceException\n         final Throwable cause \u003d e.getCause();\n         if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n           e \u003d (Exception)cause;\n         }\n       }\n \n       //see (1) and (2) in the javadoc of this method.\n       final RetryPolicy p;\n       if (e instanceof RetriableException\n           || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n         // RetriableException or RetriableException wrapped\n         p \u003d multipleLinearRandomRetry;\n       } else if (e instanceof RemoteException) {\n         final RemoteException re \u003d (RemoteException)e;\n         p \u003d re.getClassName().equals(remoteExceptionToRetry)\n             ? multipleLinearRandomRetry : RetryPolicies.TRY_ONCE_THEN_FAIL;\n       } else if (e instanceof IOException || e instanceof ServiceException) {\n         p \u003d multipleLinearRandomRetry;\n       } else { //non-IOException\n         p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n       }\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n-            + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n-      }\n+      LOG.debug(\"RETRY {}) policy\u003d{}\", retries,\n+            p.getClass().getSimpleName(), e);\n+\n       return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public RetryAction shouldRetry(Exception e, int retries, int failovers,\n        boolean isMethodIdempotent) throws Exception {\n      if (e instanceof ServiceException) {\n        //unwrap ServiceException\n        final Throwable cause \u003d e.getCause();\n        if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n          e \u003d (Exception)cause;\n        }\n      }\n\n      //see (1) and (2) in the javadoc of this method.\n      final RetryPolicy p;\n      if (e instanceof RetriableException\n          || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n        // RetriableException or RetriableException wrapped\n        p \u003d multipleLinearRandomRetry;\n      } else if (e instanceof RemoteException) {\n        final RemoteException re \u003d (RemoteException)e;\n        p \u003d re.getClassName().equals(remoteExceptionToRetry)\n            ? multipleLinearRandomRetry : RetryPolicies.TRY_ONCE_THEN_FAIL;\n      } else if (e instanceof IOException || e instanceof ServiceException) {\n        p \u003d multipleLinearRandomRetry;\n      } else { //non-IOException\n        p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n      }\n\n      LOG.debug(\"RETRY {}) policy\u003d{}\", retries,\n            p.getClass().getSimpleName(), e);\n\n      return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java",
      "extendedDetails": {}
    },
    "08d8e0ba259f01465a83d8db09466dfd46b7ec81": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13546. Override equals and hashCode of the default retry policy to avoid connection leakage. Contributed by Xiaobing Zhou.\n",
      "commitDate": "13/09/16 11:12 AM",
      "commitName": "08d8e0ba259f01465a83d8db09466dfd46b7ec81",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "09/06/15 8:58 PM",
      "commitNameOld": "3107434031e0da149ea2c09c5fc76f1a152435a0",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 461.59,
      "commitsBetweenForRepo": 3171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-        public RetryAction shouldRetry(Exception e, int retries, int failovers,\n-            boolean isMethodIdempotent) throws Exception {\n-          if (e instanceof ServiceException) {\n-            //unwrap ServiceException\n-            final Throwable cause \u003d e.getCause();\n-            if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n-              e \u003d (Exception)cause;\n-            }\n-          }\n+    public RetryAction shouldRetry(Exception e, int retries, int failovers,\n+        boolean isMethodIdempotent) throws Exception {\n+      if (e instanceof ServiceException) {\n+        //unwrap ServiceException\n+        final Throwable cause \u003d e.getCause();\n+        if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n+          e \u003d (Exception)cause;\n+        }\n+      }\n \n-          //see (1) and (2) in the javadoc of this method.\n-          final RetryPolicy p;\n-          if (e instanceof RetriableException\n-              || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n-            // RetriableException or RetriableException wrapped\n-            p \u003d multipleLinearRandomRetry;\n-          } else if (e instanceof RemoteException) {\n-            final RemoteException re \u003d (RemoteException)e;\n-            p \u003d remoteExceptionToRetry.equals(re.getClassName())?\n-                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n-          } else if (e instanceof IOException || e instanceof ServiceException) {\n-            p \u003d multipleLinearRandomRetry;\n-          } else { //non-IOException\n-            p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n-          }\n+      //see (1) and (2) in the javadoc of this method.\n+      final RetryPolicy p;\n+      if (e instanceof RetriableException\n+          || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n+        // RetriableException or RetriableException wrapped\n+        p \u003d multipleLinearRandomRetry;\n+      } else if (e instanceof RemoteException) {\n+        final RemoteException re \u003d (RemoteException)e;\n+        p \u003d re.getClassName().equals(remoteExceptionToRetry)\n+            ? multipleLinearRandomRetry : RetryPolicies.TRY_ONCE_THEN_FAIL;\n+      } else if (e instanceof IOException || e instanceof ServiceException) {\n+        p \u003d multipleLinearRandomRetry;\n+      } else { //non-IOException\n+        p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n+      }\n \n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n-                + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n-          }\n-          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n-        }\n\\ No newline at end of file\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n+            + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n+      }\n+      return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public RetryAction shouldRetry(Exception e, int retries, int failovers,\n        boolean isMethodIdempotent) throws Exception {\n      if (e instanceof ServiceException) {\n        //unwrap ServiceException\n        final Throwable cause \u003d e.getCause();\n        if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n          e \u003d (Exception)cause;\n        }\n      }\n\n      //see (1) and (2) in the javadoc of this method.\n      final RetryPolicy p;\n      if (e instanceof RetriableException\n          || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n        // RetriableException or RetriableException wrapped\n        p \u003d multipleLinearRandomRetry;\n      } else if (e instanceof RemoteException) {\n        final RemoteException re \u003d (RemoteException)e;\n        p \u003d re.getClassName().equals(remoteExceptionToRetry)\n            ? multipleLinearRandomRetry : RetryPolicies.TRY_ONCE_THEN_FAIL;\n      } else if (e instanceof IOException || e instanceof ServiceException) {\n        p \u003d multipleLinearRandomRetry;\n      } else { //non-IOException\n        p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n            + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n      }\n      return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java",
      "extendedDetails": {}
    },
    "3107434031e0da149ea2c09c5fc76f1a152435a0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12078. The default retry policy does not handle RetriableException correctly. (Contributed by Arpit Agarwal)\n",
      "commitDate": "09/06/15 8:58 PM",
      "commitName": "3107434031e0da149ea2c09c5fc76f1a152435a0",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "23/04/15 5:33 PM",
      "commitNameOld": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 47.14,
      "commitsBetweenForRepo": 461,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n         public RetryAction shouldRetry(Exception e, int retries, int failovers,\n             boolean isMethodIdempotent) throws Exception {\n           if (e instanceof ServiceException) {\n             //unwrap ServiceException\n             final Throwable cause \u003d e.getCause();\n             if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n               e \u003d (Exception)cause;\n             }\n           }\n \n           //see (1) and (2) in the javadoc of this method.\n           final RetryPolicy p;\n-          if (e instanceof RemoteException) {\n+          if (e instanceof RetriableException\n+              || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n+            // RetriableException or RetriableException wrapped\n+            p \u003d multipleLinearRandomRetry;\n+          } else if (e instanceof RemoteException) {\n             final RemoteException re \u003d (RemoteException)e;\n             p \u003d remoteExceptionToRetry.equals(re.getClassName())?\n                 multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n           } else if (e instanceof IOException || e instanceof ServiceException) {\n             p \u003d multipleLinearRandomRetry;\n           } else { //non-IOException\n             p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n           }\n \n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                 + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n           }\n           return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public RetryAction shouldRetry(Exception e, int retries, int failovers,\n            boolean isMethodIdempotent) throws Exception {\n          if (e instanceof ServiceException) {\n            //unwrap ServiceException\n            final Throwable cause \u003d e.getCause();\n            if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n              e \u003d (Exception)cause;\n            }\n          }\n\n          //see (1) and (2) in the javadoc of this method.\n          final RetryPolicy p;\n          if (e instanceof RetriableException\n              || RetryPolicies.getWrappedRetriableException(e) !\u003d null) {\n            // RetriableException or RetriableException wrapped\n            p \u003d multipleLinearRandomRetry;\n          } else if (e instanceof RemoteException) {\n            final RemoteException re \u003d (RemoteException)e;\n            p \u003d remoteExceptionToRetry.equals(re.getClassName())?\n                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n          } else if (e instanceof IOException || e instanceof ServiceException) {\n            p \u003d multipleLinearRandomRetry;\n          } else { //non-IOException\n            p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n          }\n          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/03/14 4:24 PM",
      "commitNameOld": "935075121fc1e63a06dc5fe0b9b1ce9708f73faf",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 395.05,
      "commitsBetweenForRepo": 3183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n         public RetryAction shouldRetry(Exception e, int retries, int failovers,\n             boolean isMethodIdempotent) throws Exception {\n           if (e instanceof ServiceException) {\n             //unwrap ServiceException\n             final Throwable cause \u003d e.getCause();\n             if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n               e \u003d (Exception)cause;\n             }\n           }\n \n           //see (1) and (2) in the javadoc of this method.\n           final RetryPolicy p;\n           if (e instanceof RemoteException) {\n             final RemoteException re \u003d (RemoteException)e;\n-            p \u003d remoteExceptionToRetry.getName().equals(re.getClassName())?\n+            p \u003d remoteExceptionToRetry.equals(re.getClassName())?\n                 multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n           } else if (e instanceof IOException || e instanceof ServiceException) {\n             p \u003d multipleLinearRandomRetry;\n           } else { //non-IOException\n             p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n           }\n \n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                 + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n           }\n           return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public RetryAction shouldRetry(Exception e, int retries, int failovers,\n            boolean isMethodIdempotent) throws Exception {\n          if (e instanceof ServiceException) {\n            //unwrap ServiceException\n            final Throwable cause \u003d e.getCause();\n            if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n              e \u003d (Exception)cause;\n            }\n          }\n\n          //see (1) and (2) in the javadoc of this method.\n          final RetryPolicy p;\n          if (e instanceof RemoteException) {\n            final RemoteException re \u003d (RemoteException)e;\n            p \u003d remoteExceptionToRetry.equals(re.getClassName())?\n                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n          } else if (e instanceof IOException || e instanceof ServiceException) {\n            p \u003d multipleLinearRandomRetry;\n          } else { //non-IOException\n            p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n          }\n          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java",
      "extendedDetails": {}
    },
    "935075121fc1e63a06dc5fe0b9b1ce9708f73faf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10422. Remove redundant logging of RPC retry attempts. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581112 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 4:24 PM",
      "commitName": "935075121fc1e63a06dc5fe0b9b1ce9708f73faf",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "30/08/12 7:50 AM",
      "commitNameOld": "ec94ea265825b1fcb191e93a5435abfd96a2d8bc",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 571.36,
      "commitsBetweenForRepo": 3571,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n         public RetryAction shouldRetry(Exception e, int retries, int failovers,\n             boolean isMethodIdempotent) throws Exception {\n           if (e instanceof ServiceException) {\n             //unwrap ServiceException\n             final Throwable cause \u003d e.getCause();\n             if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n               e \u003d (Exception)cause;\n             }\n           }\n \n           //see (1) and (2) in the javadoc of this method.\n           final RetryPolicy p;\n           if (e instanceof RemoteException) {\n             final RemoteException re \u003d (RemoteException)e;\n             p \u003d remoteExceptionToRetry.getName().equals(re.getClassName())?\n                 multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n           } else if (e instanceof IOException || e instanceof ServiceException) {\n             p \u003d multipleLinearRandomRetry;\n           } else { //non-IOException\n             p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n           }\n \n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                 + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n           }\n-          LOG.info(\"RETRY \" + retries + \") policy\u003d\"\n-              + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n           return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public RetryAction shouldRetry(Exception e, int retries, int failovers,\n            boolean isMethodIdempotent) throws Exception {\n          if (e instanceof ServiceException) {\n            //unwrap ServiceException\n            final Throwable cause \u003d e.getCause();\n            if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n              e \u003d (Exception)cause;\n            }\n          }\n\n          //see (1) and (2) in the javadoc of this method.\n          final RetryPolicy p;\n          if (e instanceof RemoteException) {\n            final RemoteException re \u003d (RemoteException)e;\n            p \u003d remoteExceptionToRetry.getName().equals(re.getClassName())?\n                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n          } else if (e instanceof IOException || e instanceof ServiceException) {\n            p \u003d multipleLinearRandomRetry;\n          } else { //non-IOException\n            p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n          }\n          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java",
      "extendedDetails": {}
    },
    "ec94ea265825b1fcb191e93a5435abfd96a2d8bc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8748. Refactor DFSClient retry utility methods to a new class in org.apache.hadoop.io.retry.  Contributed by Arun C Murthy\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1378969 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/08/12 7:50 AM",
      "commitName": "ec94ea265825b1fcb191e93a5435abfd96a2d8bc",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,30 @@\n+        public RetryAction shouldRetry(Exception e, int retries, int failovers,\n+            boolean isMethodIdempotent) throws Exception {\n+          if (e instanceof ServiceException) {\n+            //unwrap ServiceException\n+            final Throwable cause \u003d e.getCause();\n+            if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n+              e \u003d (Exception)cause;\n+            }\n+          }\n+\n+          //see (1) and (2) in the javadoc of this method.\n+          final RetryPolicy p;\n+          if (e instanceof RemoteException) {\n+            final RemoteException re \u003d (RemoteException)e;\n+            p \u003d remoteExceptionToRetry.getName().equals(re.getClassName())?\n+                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n+          } else if (e instanceof IOException || e instanceof ServiceException) {\n+            p \u003d multipleLinearRandomRetry;\n+          } else { //non-IOException\n+            p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n+          }\n+\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n+                + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n+          }\n+          LOG.info(\"RETRY \" + retries + \") policy\u003d\"\n+              + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n+          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public RetryAction shouldRetry(Exception e, int retries, int failovers,\n            boolean isMethodIdempotent) throws Exception {\n          if (e instanceof ServiceException) {\n            //unwrap ServiceException\n            final Throwable cause \u003d e.getCause();\n            if (cause !\u003d null \u0026\u0026 cause instanceof Exception) {\n              e \u003d (Exception)cause;\n            }\n          }\n\n          //see (1) and (2) in the javadoc of this method.\n          final RetryPolicy p;\n          if (e instanceof RemoteException) {\n            final RemoteException re \u003d (RemoteException)e;\n            p \u003d remoteExceptionToRetry.getName().equals(re.getClassName())?\n                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;\n          } else if (e instanceof IOException || e instanceof ServiceException) {\n            p \u003d multipleLinearRandomRetry;\n          } else { //non-IOException\n            p \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"RETRY \" + retries + \") policy\u003d\"\n                + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n          }\n          LOG.info(\"RETRY \" + retries + \") policy\u003d\"\n              + p.getClass().getSimpleName() + \", exception\u003d\" + e);\n          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java"
    }
  }
}