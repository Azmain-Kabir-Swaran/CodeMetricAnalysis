{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "findLowestCommonAncestorQueue",
  "functionId": "findLowestCommonAncestorQueue___queue1-FSQueue__queue2-FSQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1903,
  "functionEndLine": 1921,
  "numCommitsSeen": 226,
  "timeTaken": 4147,
  "changeHistory": [
    "5644f529f33b49e7da8ce6fe4067c6ad5b3f2b2c",
    "e6eccf20defcaf84a9566482371c7be196779c0d"
  ],
  "changeHistoryShort": {
    "5644f529f33b49e7da8ce6fe4067c6ad5b3f2b2c": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e6eccf20defcaf84a9566482371c7be196779c0d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5644f529f33b49e7da8ce6fe4067c6ad5b3f2b2c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2250. FairScheduler.findLowestCommonAncestorQueue returns null when queues not identical (Krisztian Horvath via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607872 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/07/14 8:16 AM",
      "commitName": "5644f529f33b49e7da8ce6fe4067c6ad5b3f2b2c",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2250. FairScheduler.findLowestCommonAncestorQueue returns null when queues not identical (Krisztian Horvath via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607872 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/07/14 8:16 AM",
          "commitName": "5644f529f33b49e7da8ce6fe4067c6ad5b3f2b2c",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "24/06/14 9:42 PM",
          "commitNameOld": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.44,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  private FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n+  FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n     // Because queue names include ancestors, separated by periods, we can find\n     // the lowest common ancestors by going from the start of the names until\n     // there\u0027s a character that doesn\u0027t match.\n     String name1 \u003d queue1.getName();\n     String name2 \u003d queue2.getName();\n     // We keep track of the last period we encounter to avoid returning root.apple\n     // when the queues are root.applepie and root.appletart\n     int lastPeriodIndex \u003d -1;\n     for (int i \u003d 0; i \u003c Math.max(name1.length(), name2.length()); i++) {\n       if (name1.length() \u003c\u003d i || name2.length() \u003c\u003d i ||\n           name1.charAt(i) !\u003d name2.charAt(i)) {\n-        return queueMgr.getQueue(name1.substring(lastPeriodIndex));\n+        return queueMgr.getQueue(name1.substring(0, lastPeriodIndex));\n       } else if (name1.charAt(i) \u003d\u003d \u0027.\u0027) {\n         lastPeriodIndex \u003d i;\n       }\n     }\n     return queue1; // names are identical\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n    // Because queue names include ancestors, separated by periods, we can find\n    // the lowest common ancestors by going from the start of the names until\n    // there\u0027s a character that doesn\u0027t match.\n    String name1 \u003d queue1.getName();\n    String name2 \u003d queue2.getName();\n    // We keep track of the last period we encounter to avoid returning root.apple\n    // when the queues are root.applepie and root.appletart\n    int lastPeriodIndex \u003d -1;\n    for (int i \u003d 0; i \u003c Math.max(name1.length(), name2.length()); i++) {\n      if (name1.length() \u003c\u003d i || name2.length() \u003c\u003d i ||\n          name1.charAt(i) !\u003d name2.charAt(i)) {\n        return queueMgr.getQueue(name1.substring(0, lastPeriodIndex));\n      } else if (name1.charAt(i) \u003d\u003d \u0027.\u0027) {\n        lastPeriodIndex \u003d i;\n      }\n    }\n    return queue1; // names are identical\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2250. FairScheduler.findLowestCommonAncestorQueue returns null when queues not identical (Krisztian Horvath via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607872 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/07/14 8:16 AM",
          "commitName": "5644f529f33b49e7da8ce6fe4067c6ad5b3f2b2c",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "24/06/14 9:42 PM",
          "commitNameOld": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.44,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  private FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n+  FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n     // Because queue names include ancestors, separated by periods, we can find\n     // the lowest common ancestors by going from the start of the names until\n     // there\u0027s a character that doesn\u0027t match.\n     String name1 \u003d queue1.getName();\n     String name2 \u003d queue2.getName();\n     // We keep track of the last period we encounter to avoid returning root.apple\n     // when the queues are root.applepie and root.appletart\n     int lastPeriodIndex \u003d -1;\n     for (int i \u003d 0; i \u003c Math.max(name1.length(), name2.length()); i++) {\n       if (name1.length() \u003c\u003d i || name2.length() \u003c\u003d i ||\n           name1.charAt(i) !\u003d name2.charAt(i)) {\n-        return queueMgr.getQueue(name1.substring(lastPeriodIndex));\n+        return queueMgr.getQueue(name1.substring(0, lastPeriodIndex));\n       } else if (name1.charAt(i) \u003d\u003d \u0027.\u0027) {\n         lastPeriodIndex \u003d i;\n       }\n     }\n     return queue1; // names are identical\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n    // Because queue names include ancestors, separated by periods, we can find\n    // the lowest common ancestors by going from the start of the names until\n    // there\u0027s a character that doesn\u0027t match.\n    String name1 \u003d queue1.getName();\n    String name2 \u003d queue2.getName();\n    // We keep track of the last period we encounter to avoid returning root.apple\n    // when the queues are root.applepie and root.appletart\n    int lastPeriodIndex \u003d -1;\n    for (int i \u003d 0; i \u003c Math.max(name1.length(), name2.length()); i++) {\n      if (name1.length() \u003c\u003d i || name2.length() \u003c\u003d i ||\n          name1.charAt(i) !\u003d name2.charAt(i)) {\n        return queueMgr.getQueue(name1.substring(0, lastPeriodIndex));\n      } else if (name1.charAt(i) \u003d\u003d \u0027.\u0027) {\n        lastPeriodIndex \u003d i;\n      }\n    }\n    return queue1; // names are identical\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e6eccf20defcaf84a9566482371c7be196779c0d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1499. Fair Scheduler changes for moving apps between queues (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 10:09 AM",
      "commitName": "e6eccf20defcaf84a9566482371c7be196779c0d",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,19 @@\n+  private FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n+    // Because queue names include ancestors, separated by periods, we can find\n+    // the lowest common ancestors by going from the start of the names until\n+    // there\u0027s a character that doesn\u0027t match.\n+    String name1 \u003d queue1.getName();\n+    String name2 \u003d queue2.getName();\n+    // We keep track of the last period we encounter to avoid returning root.apple\n+    // when the queues are root.applepie and root.appletart\n+    int lastPeriodIndex \u003d -1;\n+    for (int i \u003d 0; i \u003c Math.max(name1.length(), name2.length()); i++) {\n+      if (name1.length() \u003c\u003d i || name2.length() \u003c\u003d i ||\n+          name1.charAt(i) !\u003d name2.charAt(i)) {\n+        return queueMgr.getQueue(name1.substring(lastPeriodIndex));\n+      } else if (name1.charAt(i) \u003d\u003d \u0027.\u0027) {\n+        lastPeriodIndex \u003d i;\n+      }\n+    }\n+    return queue1; // names are identical\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2) {\n    // Because queue names include ancestors, separated by periods, we can find\n    // the lowest common ancestors by going from the start of the names until\n    // there\u0027s a character that doesn\u0027t match.\n    String name1 \u003d queue1.getName();\n    String name2 \u003d queue2.getName();\n    // We keep track of the last period we encounter to avoid returning root.apple\n    // when the queues are root.applepie and root.appletart\n    int lastPeriodIndex \u003d -1;\n    for (int i \u003d 0; i \u003c Math.max(name1.length(), name2.length()); i++) {\n      if (name1.length() \u003c\u003d i || name2.length() \u003c\u003d i ||\n          name1.charAt(i) !\u003d name2.charAt(i)) {\n        return queueMgr.getQueue(name1.substring(lastPeriodIndex));\n      } else if (name1.charAt(i) \u003d\u003d \u0027.\u0027) {\n        lastPeriodIndex \u003d i;\n      }\n    }\n    return queue1; // names are identical\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}