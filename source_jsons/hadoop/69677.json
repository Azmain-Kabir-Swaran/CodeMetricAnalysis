{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsOutputStream.java",
  "functionName": "write",
  "functionId": "write___data-byte[](modifiers-final)__off-int(modifiers-final)__length-int(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
  "functionStartLine": 173,
  "functionEndLine": 203,
  "numCommitsSeen": 19,
  "timeTaken": 3135,
  "changeHistory": [
    "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6",
    "745a6c1e69b3699f6496a146afc48824dd735461",
    "28afdce00955a51bbea9bf46aa0f784764ec1329",
    "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f",
    "3612317038196ee0cb6d7204056d54b7a7ed8bf7",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6": "Ybodychange",
    "745a6c1e69b3699f6496a146afc48824dd735461": "Ybodychange",
    "28afdce00955a51bbea9bf46aa0f784764ec1329": "Ybodychange",
    "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f": "Ybodychange",
    "3612317038196ee0cb6d7204056d54b7a7ed8bf7": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16910 : ABFS Streams to update FileSystem.Statistics counters on IO. (#1918). Contributed by Mehakmeet Singh.\n\n",
      "commitDate": "31/03/20 5:49 AM",
      "commitName": "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6",
      "commitAuthor": "Mehakmeet Singh",
      "commitDateOld": "26/03/20 8:24 AM",
      "commitNameOld": "745a6c1e69b3699f6496a146afc48824dd735461",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 4.89,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public synchronized void write(final byte[] data, final int off, final int length)\n       throws IOException {\n     maybeThrowLastError();\n \n     Preconditions.checkArgument(data !\u003d null, \"null data\");\n \n     if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n       throw new IndexOutOfBoundsException();\n     }\n \n     int currentOffset \u003d off;\n     int writableBytes \u003d bufferSize - bufferIndex;\n     int numberOfBytesToWrite \u003d length;\n \n     while (numberOfBytesToWrite \u003e 0) {\n       if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n         bufferIndex +\u003d writableBytes;\n         writeCurrentBufferToService();\n         currentOffset +\u003d writableBytes;\n         numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n       } else {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n         bufferIndex +\u003d numberOfBytesToWrite;\n         numberOfBytesToWrite \u003d 0;\n       }\n \n       writableBytes \u003d bufferSize - bufferIndex;\n     }\n+    incrementWriteOps();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    maybeThrowLastError();\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService();\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n    incrementWriteOps();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
      "extendedDetails": {}
    },
    "745a6c1e69b3699f6496a146afc48824dd735461": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-16818. ABFS: Combine append+flush calls for blockblob \u0026 appendblob\"\n\nThis reverts commit 3612317038196ee0cb6d7204056d54b7a7ed8bf7.\n\nChange-Id: Ie0d36f25de0b55a937894f4d9963c495bae0576a\n",
      "commitDate": "26/03/20 8:24 AM",
      "commitName": "745a6c1e69b3699f6496a146afc48824dd735461",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "24/03/20 5:11 AM",
      "commitNameOld": "28afdce00955a51bbea9bf46aa0f784764ec1329",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public synchronized void write(final byte[] data, final int off, final int length)\n       throws IOException {\n     maybeThrowLastError();\n \n     Preconditions.checkArgument(data !\u003d null, \"null data\");\n \n     if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n       throw new IndexOutOfBoundsException();\n     }\n \n     int currentOffset \u003d off;\n     int writableBytes \u003d bufferSize - bufferIndex;\n     int numberOfBytesToWrite \u003d length;\n \n     while (numberOfBytesToWrite \u003e 0) {\n       if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n         bufferIndex +\u003d writableBytes;\n-        writeCurrentBufferToService(false, false);\n+        writeCurrentBufferToService();\n         currentOffset +\u003d writableBytes;\n         numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n       } else {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n         bufferIndex +\u003d numberOfBytesToWrite;\n         numberOfBytesToWrite \u003d 0;\n       }\n \n       writableBytes \u003d bufferSize - bufferIndex;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    maybeThrowLastError();\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService();\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
      "extendedDetails": {}
    },
    "28afdce00955a51bbea9bf46aa0f784764ec1329": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"\"HADOOP-16910. ABFS Streams to update FileSystem.Statistics counters on IO.\"\n\nThis reverts commit e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f.\n\nChange-Id: I5b5a93f5a36cdb0c3d56d1b3f747c318f089de20\n",
      "commitDate": "24/03/20 5:11 AM",
      "commitName": "28afdce00955a51bbea9bf46aa0f784764ec1329",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/03/20 6:50 AM",
      "commitNameOld": "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f",
      "commitAuthorOld": "Mehakmeet Singh",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   public synchronized void write(final byte[] data, final int off, final int length)\n       throws IOException {\n     maybeThrowLastError();\n \n     Preconditions.checkArgument(data !\u003d null, \"null data\");\n \n     if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n       throw new IndexOutOfBoundsException();\n     }\n \n     int currentOffset \u003d off;\n     int writableBytes \u003d bufferSize - bufferIndex;\n     int numberOfBytesToWrite \u003d length;\n \n     while (numberOfBytesToWrite \u003e 0) {\n       if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n         bufferIndex +\u003d writableBytes;\n         writeCurrentBufferToService(false, false);\n         currentOffset +\u003d writableBytes;\n         numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n       } else {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n         bufferIndex +\u003d numberOfBytesToWrite;\n         numberOfBytesToWrite \u003d 0;\n       }\n \n       writableBytes \u003d bufferSize - bufferIndex;\n     }\n-    incrementWriteOps();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    maybeThrowLastError();\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService(false, false);\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
      "extendedDetails": {}
    },
    "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f": {
      "type": "Ybodychange",
      "commitMessage": "ABFS Streams to update FileSystem.Statistics counters on IO.\n\n\r\nContributed by Mehakmeet Singh",
      "commitDate": "23/03/20 6:50 AM",
      "commitName": "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f",
      "commitAuthor": "Mehakmeet Singh",
      "commitDateOld": "20/03/20 3:27 AM",
      "commitNameOld": "3612317038196ee0cb6d7204056d54b7a7ed8bf7",
      "commitAuthorOld": "ishaniahuja",
      "daysBetweenCommits": 3.14,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public synchronized void write(final byte[] data, final int off, final int length)\n       throws IOException {\n     maybeThrowLastError();\n \n     Preconditions.checkArgument(data !\u003d null, \"null data\");\n \n     if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n       throw new IndexOutOfBoundsException();\n     }\n \n     int currentOffset \u003d off;\n     int writableBytes \u003d bufferSize - bufferIndex;\n     int numberOfBytesToWrite \u003d length;\n \n     while (numberOfBytesToWrite \u003e 0) {\n       if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n         bufferIndex +\u003d writableBytes;\n         writeCurrentBufferToService(false, false);\n         currentOffset +\u003d writableBytes;\n         numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n       } else {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n         bufferIndex +\u003d numberOfBytesToWrite;\n         numberOfBytesToWrite \u003d 0;\n       }\n \n       writableBytes \u003d bufferSize - bufferIndex;\n     }\n+    incrementWriteOps();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    maybeThrowLastError();\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService(false, false);\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n    incrementWriteOps();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
      "extendedDetails": {}
    },
    "3612317038196ee0cb6d7204056d54b7a7ed8bf7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16818. ABFS: Combine append+flush calls for blockblob \u0026 appendblob\n\n\r\nContributed by Ishani Ahuja.",
      "commitDate": "20/03/20 3:27 AM",
      "commitName": "3612317038196ee0cb6d7204056d54b7a7ed8bf7",
      "commitAuthor": "ishaniahuja",
      "commitDateOld": "08/01/20 3:46 AM",
      "commitNameOld": "17aa8f6764262767b42717cf190a53e2c1795507",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 71.94,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public synchronized void write(final byte[] data, final int off, final int length)\n       throws IOException {\n     maybeThrowLastError();\n \n     Preconditions.checkArgument(data !\u003d null, \"null data\");\n \n     if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n       throw new IndexOutOfBoundsException();\n     }\n \n     int currentOffset \u003d off;\n     int writableBytes \u003d bufferSize - bufferIndex;\n     int numberOfBytesToWrite \u003d length;\n \n     while (numberOfBytesToWrite \u003e 0) {\n       if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n         bufferIndex +\u003d writableBytes;\n-        writeCurrentBufferToService();\n+        writeCurrentBufferToService(false, false);\n         currentOffset +\u003d writableBytes;\n         numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n       } else {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n         bufferIndex +\u003d numberOfBytesToWrite;\n         numberOfBytesToWrite \u003d 0;\n       }\n \n       writableBytes \u003d bufferSize - bufferIndex;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    maybeThrowLastError();\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService(false, false);\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,30 @@\n   public synchronized void write(final byte[] data, final int off, final int length)\n       throws IOException {\n-    if (this.lastError !\u003d null) {\n-      throw this.lastError;\n-    }\n+    maybeThrowLastError();\n \n     Preconditions.checkArgument(data !\u003d null, \"null data\");\n \n     if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n       throw new IndexOutOfBoundsException();\n     }\n \n     int currentOffset \u003d off;\n     int writableBytes \u003d bufferSize - bufferIndex;\n     int numberOfBytesToWrite \u003d length;\n \n     while (numberOfBytesToWrite \u003e 0) {\n       if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n         bufferIndex +\u003d writableBytes;\n         writeCurrentBufferToService();\n         currentOffset +\u003d writableBytes;\n         numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n       } else {\n         System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n         bufferIndex +\u003d numberOfBytesToWrite;\n         numberOfBytesToWrite \u003d 0;\n       }\n \n       writableBytes \u003d bufferSize - bufferIndex;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    maybeThrowLastError();\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService();\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,32 @@\n+  public synchronized void write(final byte[] data, final int off, final int length)\n+      throws IOException {\n+    if (this.lastError !\u003d null) {\n+      throw this.lastError;\n+    }\n+\n+    Preconditions.checkArgument(data !\u003d null, \"null data\");\n+\n+    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n+      throw new IndexOutOfBoundsException();\n+    }\n+\n+    int currentOffset \u003d off;\n+    int writableBytes \u003d bufferSize - bufferIndex;\n+    int numberOfBytesToWrite \u003d length;\n+\n+    while (numberOfBytesToWrite \u003e 0) {\n+      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n+        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n+        bufferIndex +\u003d writableBytes;\n+        writeCurrentBufferToService();\n+        currentOffset +\u003d writableBytes;\n+        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n+      } else {\n+        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n+        bufferIndex +\u003d numberOfBytesToWrite;\n+        numberOfBytesToWrite \u003d 0;\n+      }\n+\n+      writableBytes \u003d bufferSize - bufferIndex;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(final byte[] data, final int off, final int length)\n      throws IOException {\n    if (this.lastError !\u003d null) {\n      throw this.lastError;\n    }\n\n    Preconditions.checkArgument(data !\u003d null, \"null data\");\n\n    if (off \u003c 0 || length \u003c 0 || length \u003e data.length - off) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int currentOffset \u003d off;\n    int writableBytes \u003d bufferSize - bufferIndex;\n    int numberOfBytesToWrite \u003d length;\n\n    while (numberOfBytesToWrite \u003e 0) {\n      if (writableBytes \u003c\u003d numberOfBytesToWrite) {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, writableBytes);\n        bufferIndex +\u003d writableBytes;\n        writeCurrentBufferToService();\n        currentOffset +\u003d writableBytes;\n        numberOfBytesToWrite \u003d numberOfBytesToWrite - writableBytes;\n      } else {\n        System.arraycopy(data, currentOffset, buffer, bufferIndex, numberOfBytesToWrite);\n        bufferIndex +\u003d numberOfBytesToWrite;\n        numberOfBytesToWrite \u003d 0;\n      }\n\n      writableBytes \u003d bufferSize - bufferIndex;\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java"
    }
  }
}