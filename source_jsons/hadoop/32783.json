{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RecoverPausedContainerLaunch.java",
  "functionName": "call",
  "functionId": "call",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/RecoverPausedContainerLaunch.java",
  "functionStartLine": 62,
  "functionEndLine": 121,
  "numCommitsSeen": 3,
  "timeTaken": 1334,
  "changeHistory": [
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
    "66ca0a65408521d5f9b080dd16b353b49fb8eaea"
  ],
  "changeHistoryShort": {
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": "Ybodychange",
    "66ca0a65408521d5f9b080dd16b353b49fb8eaea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7275. NM Statestore cleanup for Container updates. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "16/10/17 1:12 PM",
      "commitName": "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/09/17 8:51 AM",
      "commitNameOld": "66ca0a65408521d5f9b080dd16b353b49fb8eaea",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 32.18,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,60 @@\n   public Integer call() {\n     int retCode \u003d ContainerExecutor.ExitCode.LOST.getExitCode();\n     ContainerId containerId \u003d container.getContainerId();\n     String appIdStr \u003d\n         containerId.getApplicationAttemptId().getApplicationId().toString();\n     String containerIdStr \u003d containerId.toString();\n \n+    dispatcher.getEventHandler().handle(new ContainerEvent(containerId,\n+        ContainerEventType.RECOVER_PAUSED_CONTAINER));\n     boolean notInterrupted \u003d true;\n     try {\n       File pidFile \u003d locatePidFile(appIdStr, containerIdStr);\n       if (pidFile !\u003d null) {\n         String pidPathStr \u003d pidFile.getPath();\n         pidFilePath \u003d new Path(pidPathStr);\n         exec.activateContainer(containerId, pidFilePath);\n-        exec.signalContainer(new ContainerSignalContext.Builder()\n-            .setContainer(container)\n-            .setUser(container.getUser())\n-            .setSignal(ContainerExecutor.Signal.KILL)\n-            .build());\n+        retCode \u003d exec.reacquireContainer(\n+            new ContainerReacquisitionContext.Builder()\n+                .setContainer(container)\n+                .setUser(container.getUser())\n+                .setContainerId(containerId)\n+                .build());\n       } else {\n         LOG.warn(\"Unable to locate pid file for container \" + containerIdStr);\n       }\n \n-    } catch (InterruptedIOException e) {\n+    } catch (InterruptedException | InterruptedIOException e) {\n       LOG.warn(\"Interrupted while waiting for exit code from \" + containerId);\n       notInterrupted \u003d false;\n     } catch (IOException e) {\n       LOG.error(\"Unable to kill the paused container \" + containerIdStr, e);\n     } finally {\n       if (notInterrupted) {\n         this.completed.set(true);\n         exec.deactivateContainer(containerId);\n         try {\n           getContext().getNMStateStore()\n               .storeContainerCompleted(containerId, retCode);\n         } catch (IOException e) {\n           LOG.error(\"Unable to set exit code for container \" + containerId);\n         }\n       }\n     }\n \n-    LOG.warn(\"Recovered container exited with a non-zero exit code \"\n-        + retCode);\n-    this.dispatcher.getEventHandler().handle(new ContainerExitEvent(\n-        containerId,\n-        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode,\n-        \"Container exited with a non-zero exit code \" + retCode));\n+    if (retCode !\u003d 0) {\n+      LOG.warn(\"Recovered container exited with a non-zero exit code \"\n+          + retCode);\n+      this.dispatcher.getEventHandler().handle(new ContainerExitEvent(\n+          containerId,\n+          ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode,\n+          \"Container exited with a non-zero exit code \" + retCode));\n+      return retCode;\n+    }\n \n-    return retCode;\n+    LOG.info(\"Recovered container \" + containerId + \" succeeded\");\n+    dispatcher.getEventHandler().handle(\n+        new ContainerEvent(containerId,\n+            ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n+    return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    int retCode \u003d ContainerExecutor.ExitCode.LOST.getExitCode();\n    ContainerId containerId \u003d container.getContainerId();\n    String appIdStr \u003d\n        containerId.getApplicationAttemptId().getApplicationId().toString();\n    String containerIdStr \u003d containerId.toString();\n\n    dispatcher.getEventHandler().handle(new ContainerEvent(containerId,\n        ContainerEventType.RECOVER_PAUSED_CONTAINER));\n    boolean notInterrupted \u003d true;\n    try {\n      File pidFile \u003d locatePidFile(appIdStr, containerIdStr);\n      if (pidFile !\u003d null) {\n        String pidPathStr \u003d pidFile.getPath();\n        pidFilePath \u003d new Path(pidPathStr);\n        exec.activateContainer(containerId, pidFilePath);\n        retCode \u003d exec.reacquireContainer(\n            new ContainerReacquisitionContext.Builder()\n                .setContainer(container)\n                .setUser(container.getUser())\n                .setContainerId(containerId)\n                .build());\n      } else {\n        LOG.warn(\"Unable to locate pid file for container \" + containerIdStr);\n      }\n\n    } catch (InterruptedException | InterruptedIOException e) {\n      LOG.warn(\"Interrupted while waiting for exit code from \" + containerId);\n      notInterrupted \u003d false;\n    } catch (IOException e) {\n      LOG.error(\"Unable to kill the paused container \" + containerIdStr, e);\n    } finally {\n      if (notInterrupted) {\n        this.completed.set(true);\n        exec.deactivateContainer(containerId);\n        try {\n          getContext().getNMStateStore()\n              .storeContainerCompleted(containerId, retCode);\n        } catch (IOException e) {\n          LOG.error(\"Unable to set exit code for container \" + containerId);\n        }\n      }\n    }\n\n    if (retCode !\u003d 0) {\n      LOG.warn(\"Recovered container exited with a non-zero exit code \"\n          + retCode);\n      this.dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId,\n          ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode,\n          \"Container exited with a non-zero exit code \" + retCode));\n      return retCode;\n    }\n\n    LOG.info(\"Recovered container \" + containerId + \" succeeded\");\n    dispatcher.getEventHandler().handle(\n        new ContainerEvent(containerId,\n            ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/RecoverPausedContainerLaunch.java",
      "extendedDetails": {}
    },
    "66ca0a65408521d5f9b080dd16b353b49fb8eaea": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6059. Update paused container state in the NM state store. (Hitesh Sharma via asuresh)\n",
      "commitDate": "14/09/17 8:51 AM",
      "commitName": "66ca0a65408521d5f9b080dd16b353b49fb8eaea",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,50 @@\n+  public Integer call() {\n+    int retCode \u003d ContainerExecutor.ExitCode.LOST.getExitCode();\n+    ContainerId containerId \u003d container.getContainerId();\n+    String appIdStr \u003d\n+        containerId.getApplicationAttemptId().getApplicationId().toString();\n+    String containerIdStr \u003d containerId.toString();\n+\n+    boolean notInterrupted \u003d true;\n+    try {\n+      File pidFile \u003d locatePidFile(appIdStr, containerIdStr);\n+      if (pidFile !\u003d null) {\n+        String pidPathStr \u003d pidFile.getPath();\n+        pidFilePath \u003d new Path(pidPathStr);\n+        exec.activateContainer(containerId, pidFilePath);\n+        exec.signalContainer(new ContainerSignalContext.Builder()\n+            .setContainer(container)\n+            .setUser(container.getUser())\n+            .setSignal(ContainerExecutor.Signal.KILL)\n+            .build());\n+      } else {\n+        LOG.warn(\"Unable to locate pid file for container \" + containerIdStr);\n+      }\n+\n+    } catch (InterruptedIOException e) {\n+      LOG.warn(\"Interrupted while waiting for exit code from \" + containerId);\n+      notInterrupted \u003d false;\n+    } catch (IOException e) {\n+      LOG.error(\"Unable to kill the paused container \" + containerIdStr, e);\n+    } finally {\n+      if (notInterrupted) {\n+        this.completed.set(true);\n+        exec.deactivateContainer(containerId);\n+        try {\n+          getContext().getNMStateStore()\n+              .storeContainerCompleted(containerId, retCode);\n+        } catch (IOException e) {\n+          LOG.error(\"Unable to set exit code for container \" + containerId);\n+        }\n+      }\n+    }\n+\n+    LOG.warn(\"Recovered container exited with a non-zero exit code \"\n+        + retCode);\n+    this.dispatcher.getEventHandler().handle(new ContainerExitEvent(\n+        containerId,\n+        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode,\n+        \"Container exited with a non-zero exit code \" + retCode));\n+\n+    return retCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    int retCode \u003d ContainerExecutor.ExitCode.LOST.getExitCode();\n    ContainerId containerId \u003d container.getContainerId();\n    String appIdStr \u003d\n        containerId.getApplicationAttemptId().getApplicationId().toString();\n    String containerIdStr \u003d containerId.toString();\n\n    boolean notInterrupted \u003d true;\n    try {\n      File pidFile \u003d locatePidFile(appIdStr, containerIdStr);\n      if (pidFile !\u003d null) {\n        String pidPathStr \u003d pidFile.getPath();\n        pidFilePath \u003d new Path(pidPathStr);\n        exec.activateContainer(containerId, pidFilePath);\n        exec.signalContainer(new ContainerSignalContext.Builder()\n            .setContainer(container)\n            .setUser(container.getUser())\n            .setSignal(ContainerExecutor.Signal.KILL)\n            .build());\n      } else {\n        LOG.warn(\"Unable to locate pid file for container \" + containerIdStr);\n      }\n\n    } catch (InterruptedIOException e) {\n      LOG.warn(\"Interrupted while waiting for exit code from \" + containerId);\n      notInterrupted \u003d false;\n    } catch (IOException e) {\n      LOG.error(\"Unable to kill the paused container \" + containerIdStr, e);\n    } finally {\n      if (notInterrupted) {\n        this.completed.set(true);\n        exec.deactivateContainer(containerId);\n        try {\n          getContext().getNMStateStore()\n              .storeContainerCompleted(containerId, retCode);\n        } catch (IOException e) {\n          LOG.error(\"Unable to set exit code for container \" + containerId);\n        }\n      }\n    }\n\n    LOG.warn(\"Recovered container exited with a non-zero exit code \"\n        + retCode);\n    this.dispatcher.getEventHandler().handle(new ContainerExitEvent(\n        containerId,\n        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode,\n        \"Container exited with a non-zero exit code \" + retCode));\n\n    return retCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/RecoverPausedContainerLaunch.java"
    }
  }
}