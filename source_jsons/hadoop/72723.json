{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken___renewer-String(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 1022,
  "functionEndLine": 1055,
  "numCommitsSeen": 169,
  "timeTaken": 8454,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "def9d94a40e1ff71a0dc5a4db1f042e2704cb84d",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "59d78a5088700350a5122c3a3ba5e76cd26d6a80",
    "25f31d9fc47d21ac2f3afd7042e2ced1b849da39",
    "fa6cc43edd3f6e886a40b90b062c9f16189c50d1",
    "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
    "d0a347984da175948b553a675dc357491df2fd0f",
    "da901b6c1487b2e2184b300e05a7d0f6949d076b",
    "be7237224819e2491aef91cd4f055c7efcf7b90d",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6",
    "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
    "8d941144952a77a714cd4368cba21b01904926e9",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "def9d94a40e1ff71a0dc5a4db1f042e2704cb84d": "Ybodychange",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ybodychange",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ybodychange",
    "59d78a5088700350a5122c3a3ba5e76cd26d6a80": "Ybodychange",
    "25f31d9fc47d21ac2f3afd7042e2ced1b849da39": "Ybodychange",
    "fa6cc43edd3f6e886a40b90b062c9f16189c50d1": "Ybodychange",
    "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c": "Ybodychange",
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e": "Ybodychange",
    "d0a347984da175948b553a675dc357491df2fd0f": "Ybodychange",
    "da901b6c1487b2e2184b300e05a7d0f6949d076b": "Ybodychange",
    "be7237224819e2491aef91cd4f055c7efcf7b90d": "Ybodychange",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": "Ybodychange",
    "4b00935643f6c3656ccbd7eeb54884738bc12c2e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "8d941144952a77a714cd4368cba21b01904926e9": "Ybodychange",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,34 @@\n-  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n-      Credentials credentials) throws IOException {\n-    Token\u003c?\u003e[] tokens \u003d null;\n-    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n-    if (token \u003d\u003d null) {\n-      final URL url \u003d createURL(null, null, null, null);\n-      final DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n-      try {\n-        final String doAsUser \u003d getDoAsUser();\n-        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n-          @Override\n-          public Token\u003c?\u003e run() throws Exception {\n-            // Not using the cached token here.. Creating a new token here\n-            // everytime.\n-            LOG.info(\"Getting new token from {}, renewer:{}\", url, renewer);\n-            return authUrl.getDelegationToken(url,\n-                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n-          }\n-        });\n-        if (token !\u003d null) {\n-          LOG.info(\"New token received: ({})\", token);\n-          credentials.addToken(token.getService(), token);\n-          tokens \u003d new Token\u003c?\u003e[] { token };\n-        } else {\n-          throw new IOException(\"Got NULL as delegation token\");\n+  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n+    final URL url \u003d createURL(null, null, null, null);\n+    final DelegationTokenAuthenticatedURL authUrl \u003d\n+        new DelegationTokenAuthenticatedURL(configurator);\n+    Token\u003c?\u003e token \u003d null;\n+    try {\n+      final String doAsUser \u003d getDoAsUser();\n+      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        @Override\n+        public Token\u003c?\u003e run() throws Exception {\n+          // Not using the cached token here.. Creating a new token here\n+          // everytime.\n+          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n+          return authUrl.getDelegationToken(url,\n+              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n         }\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n-      } catch (Exception e) {\n-        if (e instanceof IOException) {\n-          throw (IOException) e;\n-        } else {\n-          throw new IOException(e);\n-        }\n+      });\n+      if (token !\u003d null) {\n+        token.setService(dtService);\n+        LOG.info(\"New token created: ({})\", token);\n+      } else {\n+        throw new IOException(\"Got NULL as delegation token\");\n+      }\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+    } catch (Exception e) {\n+      if (e instanceof IOException) {\n+        throw (IOException) e;\n+      } else {\n+        throw new IOException(e);\n       }\n     }\n-    return tokens;\n+    return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n    final URL url \u003d createURL(null, null, null, null);\n    final DelegationTokenAuthenticatedURL authUrl \u003d\n        new DelegationTokenAuthenticatedURL(configurator);\n    Token\u003c?\u003e token \u003d null;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n        @Override\n        public Token\u003c?\u003e run() throws Exception {\n          // Not using the cached token here.. Creating a new token here\n          // everytime.\n          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n          return authUrl.getDelegationToken(url,\n              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n        }\n      });\n      if (token !\u003d null) {\n        token.setService(dtService);\n        LOG.info(\"New token created: ({})\", token);\n      } else {\n        throw new IOException(\"Got NULL as delegation token\");\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      } else {\n        throw new IOException(e);\n      }\n    }\n    return token;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "addDelegationTokens",
            "newValue": "getDelegationToken"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,34 @@\n-  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n-      Credentials credentials) throws IOException {\n-    Token\u003c?\u003e[] tokens \u003d null;\n-    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n-    if (token \u003d\u003d null) {\n-      final URL url \u003d createURL(null, null, null, null);\n-      final DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n-      try {\n-        final String doAsUser \u003d getDoAsUser();\n-        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n-          @Override\n-          public Token\u003c?\u003e run() throws Exception {\n-            // Not using the cached token here.. Creating a new token here\n-            // everytime.\n-            LOG.info(\"Getting new token from {}, renewer:{}\", url, renewer);\n-            return authUrl.getDelegationToken(url,\n-                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n-          }\n-        });\n-        if (token !\u003d null) {\n-          LOG.info(\"New token received: ({})\", token);\n-          credentials.addToken(token.getService(), token);\n-          tokens \u003d new Token\u003c?\u003e[] { token };\n-        } else {\n-          throw new IOException(\"Got NULL as delegation token\");\n+  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n+    final URL url \u003d createURL(null, null, null, null);\n+    final DelegationTokenAuthenticatedURL authUrl \u003d\n+        new DelegationTokenAuthenticatedURL(configurator);\n+    Token\u003c?\u003e token \u003d null;\n+    try {\n+      final String doAsUser \u003d getDoAsUser();\n+      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        @Override\n+        public Token\u003c?\u003e run() throws Exception {\n+          // Not using the cached token here.. Creating a new token here\n+          // everytime.\n+          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n+          return authUrl.getDelegationToken(url,\n+              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n         }\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n-      } catch (Exception e) {\n-        if (e instanceof IOException) {\n-          throw (IOException) e;\n-        } else {\n-          throw new IOException(e);\n-        }\n+      });\n+      if (token !\u003d null) {\n+        token.setService(dtService);\n+        LOG.info(\"New token created: ({})\", token);\n+      } else {\n+        throw new IOException(\"Got NULL as delegation token\");\n+      }\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+    } catch (Exception e) {\n+      if (e instanceof IOException) {\n+        throw (IOException) e;\n+      } else {\n+        throw new IOException(e);\n       }\n     }\n-    return tokens;\n+    return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n    final URL url \u003d createURL(null, null, null, null);\n    final DelegationTokenAuthenticatedURL authUrl \u003d\n        new DelegationTokenAuthenticatedURL(configurator);\n    Token\u003c?\u003e token \u003d null;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n        @Override\n        public Token\u003c?\u003e run() throws Exception {\n          // Not using the cached token here.. Creating a new token here\n          // everytime.\n          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n          return authUrl.getDelegationToken(url,\n              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n        }\n      });\n      if (token !\u003d null) {\n        token.setService(dtService);\n        LOG.info(\"New token created: ({})\", token);\n      } else {\n        throw new IOException(\"Got NULL as delegation token\");\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      } else {\n        throw new IOException(e);\n      }\n    }\n    return token;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[renewer-String(modifiers-final), credentials-Credentials]",
            "newValue": "[renewer-String(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,34 @@\n-  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n-      Credentials credentials) throws IOException {\n-    Token\u003c?\u003e[] tokens \u003d null;\n-    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n-    if (token \u003d\u003d null) {\n-      final URL url \u003d createURL(null, null, null, null);\n-      final DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n-      try {\n-        final String doAsUser \u003d getDoAsUser();\n-        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n-          @Override\n-          public Token\u003c?\u003e run() throws Exception {\n-            // Not using the cached token here.. Creating a new token here\n-            // everytime.\n-            LOG.info(\"Getting new token from {}, renewer:{}\", url, renewer);\n-            return authUrl.getDelegationToken(url,\n-                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n-          }\n-        });\n-        if (token !\u003d null) {\n-          LOG.info(\"New token received: ({})\", token);\n-          credentials.addToken(token.getService(), token);\n-          tokens \u003d new Token\u003c?\u003e[] { token };\n-        } else {\n-          throw new IOException(\"Got NULL as delegation token\");\n+  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n+    final URL url \u003d createURL(null, null, null, null);\n+    final DelegationTokenAuthenticatedURL authUrl \u003d\n+        new DelegationTokenAuthenticatedURL(configurator);\n+    Token\u003c?\u003e token \u003d null;\n+    try {\n+      final String doAsUser \u003d getDoAsUser();\n+      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        @Override\n+        public Token\u003c?\u003e run() throws Exception {\n+          // Not using the cached token here.. Creating a new token here\n+          // everytime.\n+          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n+          return authUrl.getDelegationToken(url,\n+              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n         }\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n-      } catch (Exception e) {\n-        if (e instanceof IOException) {\n-          throw (IOException) e;\n-        } else {\n-          throw new IOException(e);\n-        }\n+      });\n+      if (token !\u003d null) {\n+        token.setService(dtService);\n+        LOG.info(\"New token created: ({})\", token);\n+      } else {\n+        throw new IOException(\"Got NULL as delegation token\");\n+      }\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+    } catch (Exception e) {\n+      if (e instanceof IOException) {\n+        throw (IOException) e;\n+      } else {\n+        throw new IOException(e);\n       }\n     }\n-    return tokens;\n+    return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n    final URL url \u003d createURL(null, null, null, null);\n    final DelegationTokenAuthenticatedURL authUrl \u003d\n        new DelegationTokenAuthenticatedURL(configurator);\n    Token\u003c?\u003e token \u003d null;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n        @Override\n        public Token\u003c?\u003e run() throws Exception {\n          // Not using the cached token here.. Creating a new token here\n          // everytime.\n          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n          return authUrl.getDelegationToken(url,\n              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n        }\n      });\n      if (token !\u003d null) {\n        token.setService(dtService);\n        LOG.info(\"New token created: ({})\", token);\n      } else {\n        throw new IOException(\"Got NULL as delegation token\");\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      } else {\n        throw new IOException(e);\n      }\n    }\n    return token;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "Token\u003c?\u003e[]",
            "newValue": "Token\u003c?\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,34 @@\n-  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n-      Credentials credentials) throws IOException {\n-    Token\u003c?\u003e[] tokens \u003d null;\n-    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n-    if (token \u003d\u003d null) {\n-      final URL url \u003d createURL(null, null, null, null);\n-      final DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n-      try {\n-        final String doAsUser \u003d getDoAsUser();\n-        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n-          @Override\n-          public Token\u003c?\u003e run() throws Exception {\n-            // Not using the cached token here.. Creating a new token here\n-            // everytime.\n-            LOG.info(\"Getting new token from {}, renewer:{}\", url, renewer);\n-            return authUrl.getDelegationToken(url,\n-                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n-          }\n-        });\n-        if (token !\u003d null) {\n-          LOG.info(\"New token received: ({})\", token);\n-          credentials.addToken(token.getService(), token);\n-          tokens \u003d new Token\u003c?\u003e[] { token };\n-        } else {\n-          throw new IOException(\"Got NULL as delegation token\");\n+  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n+    final URL url \u003d createURL(null, null, null, null);\n+    final DelegationTokenAuthenticatedURL authUrl \u003d\n+        new DelegationTokenAuthenticatedURL(configurator);\n+    Token\u003c?\u003e token \u003d null;\n+    try {\n+      final String doAsUser \u003d getDoAsUser();\n+      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        @Override\n+        public Token\u003c?\u003e run() throws Exception {\n+          // Not using the cached token here.. Creating a new token here\n+          // everytime.\n+          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n+          return authUrl.getDelegationToken(url,\n+              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n         }\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n-      } catch (Exception e) {\n-        if (e instanceof IOException) {\n-          throw (IOException) e;\n-        } else {\n-          throw new IOException(e);\n-        }\n+      });\n+      if (token !\u003d null) {\n+        token.setService(dtService);\n+        LOG.info(\"New token created: ({})\", token);\n+      } else {\n+        throw new IOException(\"Got NULL as delegation token\");\n+      }\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+    } catch (Exception e) {\n+      if (e instanceof IOException) {\n+        throw (IOException) e;\n+      } else {\n+        throw new IOException(e);\n       }\n     }\n-    return tokens;\n+    return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(final String renewer) throws IOException {\n    final URL url \u003d createURL(null, null, null, null);\n    final DelegationTokenAuthenticatedURL authUrl \u003d\n        new DelegationTokenAuthenticatedURL(configurator);\n    Token\u003c?\u003e token \u003d null;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n        @Override\n        public Token\u003c?\u003e run() throws Exception {\n          // Not using the cached token here.. Creating a new token here\n          // everytime.\n          LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n          return authUrl.getDelegationToken(url,\n              new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n        }\n      });\n      if (token !\u003d null) {\n        token.setService(dtService);\n        LOG.info(\"New token created: ({})\", token);\n      } else {\n        throw new IOException(\"Got NULL as delegation token\");\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      } else {\n        throw new IOException(e);\n      }\n    }\n    return token;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "def9d94a40e1ff71a0dc5a4db1f042e2704cb84d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15591. KMSClientProvider should log KMS DT acquisition at INFO level. Contributed by Kitti Nanasi.\n",
      "commitDate": "09/07/18 12:01 PM",
      "commitName": "def9d94a40e1ff71a0dc5a4db1f042e2704cb84d",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "25/06/18 3:36 PM",
      "commitNameOld": "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 13.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n-            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n+            LOG.info(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n-          LOG.debug(\"New token received: ({})\", token);\n+          LOG.info(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         if (e instanceof IOException) {\n           throw (IOException) e;\n         } else {\n           throw new IOException(e);\n         }\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.info(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.info(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException) e;\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "04/05/18 1:36 PM",
      "commitNameOld": "4cdbdce752e192b45c2b9756c2d4bd24ceffdabd",
      "commitAuthorOld": "Rushabh Shah",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,39 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n-          createKMSAuthenticatedURL();\n+          new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n-          if (KMSDelegationToken.TOKEN_KIND.equals(token.getKind())) {\n-            // do not set service for legacy kind, for compatibility.\n-            token.setService(dtService);\n-          }\n-          LOG.info(\"New token created: ({})\", token);\n+          LOG.debug(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n-          Token\u003c?\u003e legacyToken \u003d createAndAddLegacyToken(credentials, token);\n-          tokens \u003d legacyToken \u003d\u003d null ?\n-              new Token\u003c?\u003e[] {token} :\n-              new Token\u003c?\u003e[] {token, legacyToken};\n+          tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         if (e instanceof IOException) {\n           throw (IOException) e;\n         } else {\n           throw new IOException(e);\n         }\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.debug(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException) e;\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/11/17 4:10 PM",
      "commitNameOld": "59d78a5088700350a5122c3a3ba5e76cd26d6a80",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 157.98,
      "commitsBetweenForRepo": 1162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,46 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n+          createKMSAuthenticatedURL();\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n-          LOG.debug(\"New token received: ({})\", token);\n+          if (KMSDelegationToken.TOKEN_KIND.equals(token.getKind())) {\n+            // do not set service for legacy kind, for compatibility.\n+            token.setService(dtService);\n+          }\n+          LOG.info(\"New token created: ({})\", token);\n           credentials.addToken(token.getService(), token);\n-          tokens \u003d new Token\u003c?\u003e[] { token };\n+          Token\u003c?\u003e legacyToken \u003d createAndAddLegacyToken(credentials, token);\n+          tokens \u003d legacyToken \u003d\u003d null ?\n+              new Token\u003c?\u003e[] {token} :\n+              new Token\u003c?\u003e[] {token, legacyToken};\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         if (e instanceof IOException) {\n           throw (IOException) e;\n         } else {\n           throw new IOException(e);\n         }\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          createKMSAuthenticatedURL();\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          if (KMSDelegationToken.TOKEN_KIND.equals(token.getKind())) {\n            // do not set service for legacy kind, for compatibility.\n            token.setService(dtService);\n          }\n          LOG.info(\"New token created: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          Token\u003c?\u003e legacyToken \u003d createAndAddLegacyToken(credentials, token);\n          tokens \u003d legacyToken \u003d\u003d null ?\n              new Token\u003c?\u003e[] {token} :\n              new Token\u003c?\u003e[] {token, legacyToken};\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException) e;\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "59d78a5088700350a5122c3a3ba5e76cd26d6a80": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14987. Improve KMSClientProvider log around delegation token checking. Contributed by Xiaoyu Yao and Xiao Chen.\n",
      "commitDate": "03/11/17 4:10 PM",
      "commitName": "59d78a5088700350a5122c3a3ba5e76cd26d6a80",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "19/10/17 6:02 AM",
      "commitNameOld": "97c70c7ac6881f87eee1575bcbdd28b31ecac231",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 15.42,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n-    Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           LOG.debug(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         if (e instanceof IOException) {\n           throw (IOException) e;\n         } else {\n           throw new IOException(e);\n         }\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.debug(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException) e;\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "25f31d9fc47d21ac2f3afd7042e2ced1b849da39": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
      "commitDate": "05/10/17 7:46 PM",
      "commitName": "25f31d9fc47d21ac2f3afd7042e2ced1b849da39",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "22/09/17 3:45 PM",
      "commitNameOld": "e1b32e0959dea5f5a40055157476f9320519a618",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           LOG.debug(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n-        throw new IOException(e);\n+        if (e instanceof IOException) {\n+          throw (IOException) e;\n+        } else {\n+          throw new IOException(e);\n+        }\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.debug(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException) e;\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "fa6cc43edd3f6e886a40b90b062c9f16189c50d1": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\"\n\nThis reverts commit 0a6d5c0cf1d963da9131aa12326fc576f0e92d2c.\n",
      "commitDate": "12/09/17 7:53 PM",
      "commitName": "fa6cc43edd3f6e886a40b90b062c9f16189c50d1",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "22/08/17 2:50 PM",
      "commitNameOld": "c3793102121767c46091805eae65ef3919a5f368",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 21.21,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,36 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           LOG.debug(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n-        if (e instanceof IOException) {\n-          throw (IOException) e;\n-        } else {\n-          throw new IOException(e);\n-        }\n+        throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.debug(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
      "commitDate": "14/07/17 10:22 PM",
      "commitName": "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/06/17 9:34 PM",
      "commitNameOld": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 36.03,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           LOG.debug(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n-        throw new IOException(e);\n+        if (e instanceof IOException) {\n+          throw (IOException) e;\n+        } else {\n+          throw new IOException(e);\n+        }\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.debug(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException) e;\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13174. Add more debug logs for delegation tokens and authentication.\n",
      "commitDate": "08/06/17 9:34 PM",
      "commitName": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "07/02/17 8:36 PM",
      "commitNameOld": "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 121.0,
      "commitsBetweenForRepo": 685,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n         token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n+            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n+          LOG.debug(\"New token received: ({})\", token);\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            LOG.debug(\"Getting new token from {}, renewer:{}\", url, renewer);\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          LOG.debug(\"New token received: ({})\", token);\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "d0a347984da175948b553a675dc357491df2fd0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13749. KMSClientProvider combined with KeyProviderCache can result in wrong UGI being used. Contributed by Xiaoyu Yao.\n",
      "commitDate": "23/10/16 10:58 AM",
      "commitName": "d0a347984da175948b553a675dc357491df2fd0f",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "23/10/16 8:25 AM",
      "commitNameOld": "da901b6c1487b2e2184b300e05a7d0f6949d076b",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n-        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "da901b6c1487b2e2184b300e05a7d0f6949d076b": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-10757. KMSClientProvider combined with KeyProviderCache can result in wrong UGI being used. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit be7237224819e2491aef91cd4f055c7efcf7b90d.\n",
      "commitDate": "23/10/16 8:25 AM",
      "commitName": "da901b6c1487b2e2184b300e05a7d0f6949d076b",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "21/10/16 2:23 PM",
      "commitNameOld": "be7237224819e2491aef91cd4f055c7efcf7b90d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n-        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "be7237224819e2491aef91cd4f055c7efcf7b90d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10757. KMSClientProvider combined with KeyProviderCache can result in wrong UGI being used. Contributed by Xiaoyu Yao.\n",
      "commitDate": "21/10/16 2:23 PM",
      "commitName": "be7237224819e2491aef91cd4f055c7efcf7b90d",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "01/08/16 1:35 AM",
      "commitNameOld": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 81.53,
      "commitsBetweenForRepo": 558,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n         final String doAsUser \u003d getDoAsUser();\n-        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d getActualUgi().doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13155. Implement TokenRenewer to renew and cancel delegation tokens in KMS. Contributed by Xiao Chen.\n",
      "commitDate": "03/06/16 4:48 PM",
      "commitName": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/03/16 11:39 AM",
      "commitNameOld": "e3bb38d62567eafe57d16b78deeba1b71c58e41c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 74.22,
      "commitsBetweenForRepo": 480,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,34 @@\n   public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n       final URL url \u003d createURL(null, null, null, null);\n       final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n-        // \u0027actualUGI\u0027 is the UGI of the user creating the client \n-        // It is possible that the creator of the KMSClientProvier\n-        // calls this method on behalf of a proxyUser (the doAsUser).\n-        // In which case this call has to be made as the proxy user.\n-        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n-        final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n-            UserGroupInformation.AuthenticationMethod.PROXY)\n-                                ? currentUgi.getShortUserName() : null;\n-\n+        final String doAsUser \u003d getDoAsUser();\n         token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n           @Override\n           public Token\u003c?\u003e run() throws Exception {\n             // Not using the cached token here.. Creating a new token here\n             // everytime.\n             return authUrl.getDelegationToken(url,\n                 new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n           }\n         });\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n       } catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        final String doAsUser \u003d getDoAsUser();\n        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "4b00935643f6c3656ccbd7eeb54884738bc12c2e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-11482. Use correct UGI when KMSClientProvider is called by a proxy user. Contributed by Arun Suresh.\n",
      "commitDate": "23/01/15 12:11 PM",
      "commitName": "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11482. Use correct UGI when KMSClientProvider is called by a proxy user. Contributed by Arun Suresh.\n",
          "commitDate": "23/01/15 12:11 PM",
          "commitName": "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/12/14 4:42 PM",
          "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 42.81,
          "commitsBetweenForRepo": 238,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,42 @@\n-  public Token\u003c?\u003e[] addDelegationTokens(String renewer,\n+  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n-      URL url \u003d createURL(null, null, null, null);\n-      DelegationTokenAuthenticatedURL authUrl \u003d\n+      final URL url \u003d createURL(null, null, null, null);\n+      final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n-        token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n+        // \u0027actualUGI\u0027 is the UGI of the user creating the client \n+        // It is possible that the creator of the KMSClientProvier\n+        // calls this method on behalf of a proxyUser (the doAsUser).\n+        // In which case this call has to be made as the proxy user.\n+        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n+        final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n+            UserGroupInformation.AuthenticationMethod.PROXY)\n+                                ? currentUgi.getShortUserName() : null;\n+\n+        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+          @Override\n+          public Token\u003c?\u003e run() throws Exception {\n+            // Not using the cached token here.. Creating a new token here\n+            // everytime.\n+            return authUrl.getDelegationToken(url,\n+                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n+          }\n+        });\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n-      } catch (AuthenticationException ex) {\n-        throw new IOException(ex);\n+      } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+      } catch (Exception e) {\n+        throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        // \u0027actualUGI\u0027 is the UGI of the user creating the client \n        // It is possible that the creator of the KMSClientProvier\n        // calls this method on behalf of a proxyUser (the doAsUser).\n        // In which case this call has to be made as the proxy user.\n        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n        final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n            UserGroupInformation.AuthenticationMethod.PROXY)\n                                ? currentUgi.getShortUserName() : null;\n\n        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-11482. Use correct UGI when KMSClientProvider is called by a proxy user. Contributed by Arun Suresh.\n",
          "commitDate": "23/01/15 12:11 PM",
          "commitName": "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/12/14 4:42 PM",
          "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 42.81,
          "commitsBetweenForRepo": 238,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,42 @@\n-  public Token\u003c?\u003e[] addDelegationTokens(String renewer,\n+  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n       Credentials credentials) throws IOException {\n     Token\u003c?\u003e[] tokens \u003d null;\n     Text dtService \u003d getDelegationTokenService();\n     Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n     if (token \u003d\u003d null) {\n-      URL url \u003d createURL(null, null, null, null);\n-      DelegationTokenAuthenticatedURL authUrl \u003d\n+      final URL url \u003d createURL(null, null, null, null);\n+      final DelegationTokenAuthenticatedURL authUrl \u003d\n           new DelegationTokenAuthenticatedURL(configurator);\n       try {\n-        token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n+        // \u0027actualUGI\u0027 is the UGI of the user creating the client \n+        // It is possible that the creator of the KMSClientProvier\n+        // calls this method on behalf of a proxyUser (the doAsUser).\n+        // In which case this call has to be made as the proxy user.\n+        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n+        final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n+            UserGroupInformation.AuthenticationMethod.PROXY)\n+                                ? currentUgi.getShortUserName() : null;\n+\n+        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n+          @Override\n+          public Token\u003c?\u003e run() throws Exception {\n+            // Not using the cached token here.. Creating a new token here\n+            // everytime.\n+            return authUrl.getDelegationToken(url,\n+                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n+          }\n+        });\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           tokens \u003d new Token\u003c?\u003e[] { token };\n         } else {\n           throw new IOException(\"Got NULL as delegation token\");\n         }\n-      } catch (AuthenticationException ex) {\n-        throw new IOException(ex);\n+      } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+      } catch (Exception e) {\n+        throw new IOException(e);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(final String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      final URL url \u003d createURL(null, null, null, null);\n      final DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        // \u0027actualUGI\u0027 is the UGI of the user creating the client \n        // It is possible that the creator of the KMSClientProvier\n        // calls this method on behalf of a proxyUser (the doAsUser).\n        // In which case this call has to be made as the proxy user.\n        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n        final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n            UserGroupInformation.AuthenticationMethod.PROXY)\n                                ? currentUgi.getShortUserName() : null;\n\n        token \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cToken\u003c?\u003e\u003e() {\n          @Override\n          public Token\u003c?\u003e run() throws Exception {\n            // Not using the cached token here.. Creating a new token here\n            // everytime.\n            return authUrl.getDelegationToken(url,\n                new DelegationTokenAuthenticatedURL.Token(), renewer, doAsUser);\n          }\n        });\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    return tokens;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[renewer-String, credentials-Credentials]",
            "newValue": "[renewer-String(modifiers-final), credentials-Credentials]"
          }
        }
      ]
    },
    "8d941144952a77a714cd4368cba21b01904926e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11174. Delegation token for KMS should only be got once if it already exists. (Yi Liu via wang)\n",
      "commitDate": "09/10/14 1:21 PM",
      "commitName": "8d941144952a77a714cd4368cba21b01904926e9",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "08/10/14 6:01 PM",
      "commitNameOld": "2a51494ce1b05fc494fb3a818a7a3526f3f40070",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   public Token\u003c?\u003e[] addDelegationTokens(String renewer,\n       Credentials credentials) throws IOException {\n-    Token\u003c?\u003e[] tokens;\n-    URL url \u003d createURL(null, null, null, null);\n-    DelegationTokenAuthenticatedURL authUrl \u003d\n-        new DelegationTokenAuthenticatedURL(configurator);\n-    try {\n-      Token\u003c?\u003e token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n-      if (token !\u003d null) {\n-        credentials.addToken(token.getService(), token);\n-        tokens \u003d new Token\u003c?\u003e[] { token };\n-      } else {\n-        throw new IOException(\"Got NULL as delegation token\");\n+    Token\u003c?\u003e[] tokens \u003d null;\n+    Text dtService \u003d getDelegationTokenService();\n+    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n+    if (token \u003d\u003d null) {\n+      URL url \u003d createURL(null, null, null, null);\n+      DelegationTokenAuthenticatedURL authUrl \u003d\n+          new DelegationTokenAuthenticatedURL(configurator);\n+      try {\n+        token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n+        if (token !\u003d null) {\n+          credentials.addToken(token.getService(), token);\n+          tokens \u003d new Token\u003c?\u003e[] { token };\n+        } else {\n+          throw new IOException(\"Got NULL as delegation token\");\n+        }\n+      } catch (AuthenticationException ex) {\n+        throw new IOException(ex);\n       }\n-    } catch (AuthenticationException ex) {\n-      throw new IOException(ex);\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens \u003d null;\n    Text dtService \u003d getDelegationTokenService();\n    Token\u003c?\u003e token \u003d credentials.getToken(dtService);\n    if (token \u003d\u003d null) {\n      URL url \u003d createURL(null, null, null, null);\n      DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      try {\n        token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          tokens \u003d new Token\u003c?\u003e[] { token };\n        } else {\n          throw new IOException(\"Got NULL as delegation token\");\n        }\n      } catch (AuthenticationException ex) {\n        throw new IOException(ex);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 10:03 PM",
      "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,19 @@\n+  public Token\u003c?\u003e[] addDelegationTokens(String renewer,\n+      Credentials credentials) throws IOException {\n+    Token\u003c?\u003e[] tokens;\n+    URL url \u003d createURL(null, null, null, null);\n+    DelegationTokenAuthenticatedURL authUrl \u003d\n+        new DelegationTokenAuthenticatedURL(configurator);\n+    try {\n+      Token\u003c?\u003e token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n+      if (token !\u003d null) {\n+        credentials.addToken(token.getService(), token);\n+        tokens \u003d new Token\u003c?\u003e[] { token };\n+      } else {\n+        throw new IOException(\"Got NULL as delegation token\");\n+      }\n+    } catch (AuthenticationException ex) {\n+      throw new IOException(ex);\n+    }\n+    return tokens;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003c?\u003e[] addDelegationTokens(String renewer,\n      Credentials credentials) throws IOException {\n    Token\u003c?\u003e[] tokens;\n    URL url \u003d createURL(null, null, null, null);\n    DelegationTokenAuthenticatedURL authUrl \u003d\n        new DelegationTokenAuthenticatedURL(configurator);\n    try {\n      Token\u003c?\u003e token \u003d authUrl.getDelegationToken(url, authToken, renewer);\n      if (token !\u003d null) {\n        credentials.addToken(token.getService(), token);\n        tokens \u003d new Token\u003c?\u003e[] { token };\n      } else {\n        throw new IOException(\"Got NULL as delegation token\");\n      }\n    } catch (AuthenticationException ex) {\n      throw new IOException(ex);\n    }\n    return tokens;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}