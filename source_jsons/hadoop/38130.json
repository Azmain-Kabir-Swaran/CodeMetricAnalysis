{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoIntraQueuePreemptionPlugin.java",
  "functionName": "computeAppsIdealAllocation",
  "functionId": "computeAppsIdealAllocation___clusterResource-Resource__tq-TempQueuePerPartition__selectedCandidates-Map__ApplicationAttemptId,Set__RMContainer______totalPreemptedResourceAllowed-Resource__queueReassignableResource-Resource__maxAllowablePreemptLimit-float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
  "functionStartLine": 117,
  "functionEndLine": 189,
  "numCommitsSeen": 13,
  "timeTaken": 2995,
  "changeHistory": [
    "e40e2d6ad5cbe782c3a067229270738b501ed27e",
    "c583ab02c730be0a63d974039a78f2dc67dc2db6",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9"
  ],
  "changeHistoryShort": {
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": "Ybodychange",
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": "Ymultichange(Yparameterchange,Ybodychange)",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7243. Moving logging APIs over to slf4j in hadoop-yarn-server-resourcemanager.\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "04/03/19 9:10 PM",
      "commitName": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "28/05/18 4:02 AM",
      "commitNameOld": "7c343669baf660df3b70d58987d6e68aec54d6fa",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 280.76,
      "commitsBetweenForRepo": 2178,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   public void computeAppsIdealAllocation(Resource clusterResource,\n       TempQueuePerPartition tq,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n       Resource totalPreemptedResourceAllowed,\n       Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n \n     // 1. AM used resource can be considered as a frozen resource for now.\n     // Hence such containers in a queue can be omitted from the preemption\n     // calculation.\n     Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n     Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n         tq.leafQueue, perUserAMUsed);\n     Resources.subtractFrom(queueReassignableResource, amUsed);\n \n     // 2. tq.leafQueue will not be null as we validated it in caller side\n     Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n \n     // We do not need preemption for a single app\n     if (apps.size() \u003d\u003d 1) {\n       return;\n     }\n \n     // 3. Create all tempApps for internal calculation and return a list from\n     // high priority to low priority order.\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d createTempAppForResCalculation(\n         tq, apps, clusterResource, perUserAMUsed);\n \n     // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n     // unallocated resource.Also return apps arranged from lower priority to\n     // higher priority.\n     TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d calculateIdealAssignedResourcePerApp(\n         clusterResource, tq, selectedCandidates, queueReassignableResource,\n         orderedByPriority);\n \n     // 5. A configurable limit that could define an ideal allowable preemption\n     // limit. Based on current queue\u0027s capacity,defined how much % could become\n     // preemptable.\n     Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n         maxAllowablePreemptLimit);\n     if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n         tq.getActuallyToBePreempted())) {\n       Resources.subtractFrom(maxIntraQueuePreemptable,\n           tq.getActuallyToBePreempted());\n     } else {\n       maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n     }\n \n     // 6. We have two configurations here, one is intra queue limit and second\n     // one is per-round limit for any time preemption. Take a minimum of these\n     Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n         maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n \n     // 7. From lowest priority app onwards, calculate toBePreempted resource\n     // based on demand.\n     calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n         Resources.clone(preemptionLimit));\n \n     // Save all apps (low to high) to temp queue for further reference\n     tq.addAllApps(orderedApps);\n \n     // 8. There are chances that we may preempt for the demand from same\n     // priority level, such cases are to be validated out.\n     validateOutSameAppPriorityFromDemand(clusterResource,\n         (TreeSet\u003cTempAppPerPartition\u003e) orderedApps, tq.getUsersPerPartition(),\n         context.getIntraQueuePreemptionOrderPolicy());\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n       for (TempAppPerPartition tmpApp : tq.getApps()) {\n-        LOG.debug(tmpApp);\n+        LOG.debug(tmpApp.toString());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void computeAppsIdealAllocation(Resource clusterResource,\n      TempQueuePerPartition tq,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptedResourceAllowed,\n      Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n\n    // 1. AM used resource can be considered as a frozen resource for now.\n    // Hence such containers in a queue can be omitted from the preemption\n    // calculation.\n    Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n    Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n        tq.leafQueue, perUserAMUsed);\n    Resources.subtractFrom(queueReassignableResource, amUsed);\n\n    // 2. tq.leafQueue will not be null as we validated it in caller side\n    Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n\n    // We do not need preemption for a single app\n    if (apps.size() \u003d\u003d 1) {\n      return;\n    }\n\n    // 3. Create all tempApps for internal calculation and return a list from\n    // high priority to low priority order.\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d createTempAppForResCalculation(\n        tq, apps, clusterResource, perUserAMUsed);\n\n    // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n    // unallocated resource.Also return apps arranged from lower priority to\n    // higher priority.\n    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d calculateIdealAssignedResourcePerApp(\n        clusterResource, tq, selectedCandidates, queueReassignableResource,\n        orderedByPriority);\n\n    // 5. A configurable limit that could define an ideal allowable preemption\n    // limit. Based on current queue\u0027s capacity,defined how much % could become\n    // preemptable.\n    Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n        maxAllowablePreemptLimit);\n    if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n        tq.getActuallyToBePreempted())) {\n      Resources.subtractFrom(maxIntraQueuePreemptable,\n          tq.getActuallyToBePreempted());\n    } else {\n      maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n    }\n\n    // 6. We have two configurations here, one is intra queue limit and second\n    // one is per-round limit for any time preemption. Take a minimum of these\n    Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n        maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n\n    // 7. From lowest priority app onwards, calculate toBePreempted resource\n    // based on demand.\n    calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n        Resources.clone(preemptionLimit));\n\n    // Save all apps (low to high) to temp queue for further reference\n    tq.addAllApps(orderedApps);\n\n    // 8. There are chances that we may preempt for the demand from same\n    // priority level, such cases are to be validated out.\n    validateOutSameAppPriorityFromDemand(clusterResource,\n        (TreeSet\u003cTempAppPerPartition\u003e) orderedApps, tq.getUsersPerPartition(),\n        context.getIntraQueuePreemptionOrderPolicy());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n      for (TempAppPerPartition tmpApp : tq.getApps()) {\n        LOG.debug(tmpApp.toString());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
      "extendedDetails": {}
    },
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
      "commitDate": "22/05/17 2:26 PM",
      "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
          "commitDate": "22/05/17 2:26 PM",
          "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 102.13,
          "commitsBetweenForRepo": 587,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,73 @@\n   public void computeAppsIdealAllocation(Resource clusterResource,\n-      Resource partitionBasedResource, TempQueuePerPartition tq,\n+      TempQueuePerPartition tq,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n       Resource totalPreemptedResourceAllowed,\n       Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n \n     // 1. AM used resource can be considered as a frozen resource for now.\n     // Hence such containers in a queue can be omitted from the preemption\n     // calculation.\n     Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n     Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n         tq.leafQueue, perUserAMUsed);\n     Resources.subtractFrom(queueReassignableResource, amUsed);\n \n     // 2. tq.leafQueue will not be null as we validated it in caller side\n     Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n \n     // We do not need preemption for a single app\n     if (apps.size() \u003d\u003d 1) {\n       return;\n     }\n \n     // 3. Create all tempApps for internal calculation and return a list from\n     // high priority to low priority order.\n-    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n-    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d\n-        createTempAppForResCalculation(tq.partition, apps, taComparator);\n+    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d createTempAppForResCalculation(\n+        tq, apps, clusterResource, perUserAMUsed);\n \n     // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n     // unallocated resource.Also return apps arranged from lower priority to\n     // higher priority.\n-    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d\n-        calculateIdealAssignedResourcePerApp(clusterResource,\n-            partitionBasedResource, tq, selectedCandidates,\n-            queueReassignableResource, orderedByPriority, perUserAMUsed);\n+    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d calculateIdealAssignedResourcePerApp(\n+        clusterResource, tq, selectedCandidates, queueReassignableResource,\n+        orderedByPriority);\n \n     // 5. A configurable limit that could define an ideal allowable preemption\n     // limit. Based on current queue\u0027s capacity,defined how much % could become\n     // preemptable.\n     Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n         maxAllowablePreemptLimit);\n     if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n         tq.getActuallyToBePreempted())) {\n       Resources.subtractFrom(maxIntraQueuePreemptable,\n           tq.getActuallyToBePreempted());\n     } else {\n       maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n     }\n \n     // 6. We have two configurations here, one is intra queue limit and second\n     // one is per-round limit for any time preemption. Take a minimum of these\n     Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n         maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n \n     // 7. From lowest priority app onwards, calculate toBePreempted resource\n     // based on demand.\n     calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n-        preemptionLimit);\n+        Resources.clone(preemptionLimit));\n \n     // Save all apps (low to high) to temp queue for further reference\n     tq.addAllApps(orderedApps);\n \n     // 8. There are chances that we may preempt for the demand from same\n     // priority level, such cases are to be validated out.\n     validateOutSameAppPriorityFromDemand(clusterResource,\n-        (TreeSet\u003cTempAppPerPartition\u003e) tq.getApps());\n+        (TreeSet\u003cTempAppPerPartition\u003e) orderedApps, tq.getUsersPerPartition(),\n+        context.getIntraQueuePreemptionOrderPolicy());\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n       for (TempAppPerPartition tmpApp : tq.getApps()) {\n         LOG.debug(tmpApp);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void computeAppsIdealAllocation(Resource clusterResource,\n      TempQueuePerPartition tq,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptedResourceAllowed,\n      Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n\n    // 1. AM used resource can be considered as a frozen resource for now.\n    // Hence such containers in a queue can be omitted from the preemption\n    // calculation.\n    Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n    Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n        tq.leafQueue, perUserAMUsed);\n    Resources.subtractFrom(queueReassignableResource, amUsed);\n\n    // 2. tq.leafQueue will not be null as we validated it in caller side\n    Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n\n    // We do not need preemption for a single app\n    if (apps.size() \u003d\u003d 1) {\n      return;\n    }\n\n    // 3. Create all tempApps for internal calculation and return a list from\n    // high priority to low priority order.\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d createTempAppForResCalculation(\n        tq, apps, clusterResource, perUserAMUsed);\n\n    // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n    // unallocated resource.Also return apps arranged from lower priority to\n    // higher priority.\n    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d calculateIdealAssignedResourcePerApp(\n        clusterResource, tq, selectedCandidates, queueReassignableResource,\n        orderedByPriority);\n\n    // 5. A configurable limit that could define an ideal allowable preemption\n    // limit. Based on current queue\u0027s capacity,defined how much % could become\n    // preemptable.\n    Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n        maxAllowablePreemptLimit);\n    if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n        tq.getActuallyToBePreempted())) {\n      Resources.subtractFrom(maxIntraQueuePreemptable,\n          tq.getActuallyToBePreempted());\n    } else {\n      maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n    }\n\n    // 6. We have two configurations here, one is intra queue limit and second\n    // one is per-round limit for any time preemption. Take a minimum of these\n    Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n        maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n\n    // 7. From lowest priority app onwards, calculate toBePreempted resource\n    // based on demand.\n    calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n        Resources.clone(preemptionLimit));\n\n    // Save all apps (low to high) to temp queue for further reference\n    tq.addAllApps(orderedApps);\n\n    // 8. There are chances that we may preempt for the demand from same\n    // priority level, such cases are to be validated out.\n    validateOutSameAppPriorityFromDemand(clusterResource,\n        (TreeSet\u003cTempAppPerPartition\u003e) orderedApps, tq.getUsersPerPartition(),\n        context.getIntraQueuePreemptionOrderPolicy());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n      for (TempAppPerPartition tmpApp : tq.getApps()) {\n        LOG.debug(tmpApp);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, partitionBasedResource-Resource, tq-TempQueuePerPartition, selectedCandidates-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, totalPreemptedResourceAllowed-Resource, queueReassignableResource-Resource, maxAllowablePreemptLimit-float]",
            "newValue": "[clusterResource-Resource, tq-TempQueuePerPartition, selectedCandidates-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, totalPreemptedResourceAllowed-Resource, queueReassignableResource-Resource, maxAllowablePreemptLimit-float]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
          "commitDate": "22/05/17 2:26 PM",
          "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 102.13,
          "commitsBetweenForRepo": 587,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,73 @@\n   public void computeAppsIdealAllocation(Resource clusterResource,\n-      Resource partitionBasedResource, TempQueuePerPartition tq,\n+      TempQueuePerPartition tq,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n       Resource totalPreemptedResourceAllowed,\n       Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n \n     // 1. AM used resource can be considered as a frozen resource for now.\n     // Hence such containers in a queue can be omitted from the preemption\n     // calculation.\n     Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n     Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n         tq.leafQueue, perUserAMUsed);\n     Resources.subtractFrom(queueReassignableResource, amUsed);\n \n     // 2. tq.leafQueue will not be null as we validated it in caller side\n     Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n \n     // We do not need preemption for a single app\n     if (apps.size() \u003d\u003d 1) {\n       return;\n     }\n \n     // 3. Create all tempApps for internal calculation and return a list from\n     // high priority to low priority order.\n-    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n-    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d\n-        createTempAppForResCalculation(tq.partition, apps, taComparator);\n+    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d createTempAppForResCalculation(\n+        tq, apps, clusterResource, perUserAMUsed);\n \n     // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n     // unallocated resource.Also return apps arranged from lower priority to\n     // higher priority.\n-    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d\n-        calculateIdealAssignedResourcePerApp(clusterResource,\n-            partitionBasedResource, tq, selectedCandidates,\n-            queueReassignableResource, orderedByPriority, perUserAMUsed);\n+    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d calculateIdealAssignedResourcePerApp(\n+        clusterResource, tq, selectedCandidates, queueReassignableResource,\n+        orderedByPriority);\n \n     // 5. A configurable limit that could define an ideal allowable preemption\n     // limit. Based on current queue\u0027s capacity,defined how much % could become\n     // preemptable.\n     Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n         maxAllowablePreemptLimit);\n     if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n         tq.getActuallyToBePreempted())) {\n       Resources.subtractFrom(maxIntraQueuePreemptable,\n           tq.getActuallyToBePreempted());\n     } else {\n       maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n     }\n \n     // 6. We have two configurations here, one is intra queue limit and second\n     // one is per-round limit for any time preemption. Take a minimum of these\n     Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n         maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n \n     // 7. From lowest priority app onwards, calculate toBePreempted resource\n     // based on demand.\n     calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n-        preemptionLimit);\n+        Resources.clone(preemptionLimit));\n \n     // Save all apps (low to high) to temp queue for further reference\n     tq.addAllApps(orderedApps);\n \n     // 8. There are chances that we may preempt for the demand from same\n     // priority level, such cases are to be validated out.\n     validateOutSameAppPriorityFromDemand(clusterResource,\n-        (TreeSet\u003cTempAppPerPartition\u003e) tq.getApps());\n+        (TreeSet\u003cTempAppPerPartition\u003e) orderedApps, tq.getUsersPerPartition(),\n+        context.getIntraQueuePreemptionOrderPolicy());\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n       for (TempAppPerPartition tmpApp : tq.getApps()) {\n         LOG.debug(tmpApp);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void computeAppsIdealAllocation(Resource clusterResource,\n      TempQueuePerPartition tq,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptedResourceAllowed,\n      Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n\n    // 1. AM used resource can be considered as a frozen resource for now.\n    // Hence such containers in a queue can be omitted from the preemption\n    // calculation.\n    Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n    Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n        tq.leafQueue, perUserAMUsed);\n    Resources.subtractFrom(queueReassignableResource, amUsed);\n\n    // 2. tq.leafQueue will not be null as we validated it in caller side\n    Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n\n    // We do not need preemption for a single app\n    if (apps.size() \u003d\u003d 1) {\n      return;\n    }\n\n    // 3. Create all tempApps for internal calculation and return a list from\n    // high priority to low priority order.\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d createTempAppForResCalculation(\n        tq, apps, clusterResource, perUserAMUsed);\n\n    // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n    // unallocated resource.Also return apps arranged from lower priority to\n    // higher priority.\n    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d calculateIdealAssignedResourcePerApp(\n        clusterResource, tq, selectedCandidates, queueReassignableResource,\n        orderedByPriority);\n\n    // 5. A configurable limit that could define an ideal allowable preemption\n    // limit. Based on current queue\u0027s capacity,defined how much % could become\n    // preemptable.\n    Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n        maxAllowablePreemptLimit);\n    if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n        tq.getActuallyToBePreempted())) {\n      Resources.subtractFrom(maxIntraQueuePreemptable,\n          tq.getActuallyToBePreempted());\n    } else {\n      maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n    }\n\n    // 6. We have two configurations here, one is intra queue limit and second\n    // one is per-round limit for any time preemption. Take a minimum of these\n    Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n        maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n\n    // 7. From lowest priority app onwards, calculate toBePreempted resource\n    // based on demand.\n    calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n        Resources.clone(preemptionLimit));\n\n    // Save all apps (low to high) to temp queue for further reference\n    tq.addAllApps(orderedApps);\n\n    // 8. There are chances that we may preempt for the demand from same\n    // priority level, such cases are to be validated out.\n    validateOutSameAppPriorityFromDemand(clusterResource,\n        (TreeSet\u003cTempAppPerPartition\u003e) orderedApps, tq.getUsersPerPartition(),\n        context.getIntraQueuePreemptionOrderPolicy());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n      for (TempAppPerPartition tmpApp : tq.getApps()) {\n        LOG.debug(tmpApp);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
          "extendedDetails": {}
        }
      ]
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,74 @@\n+  public void computeAppsIdealAllocation(Resource clusterResource,\n+      Resource partitionBasedResource, TempQueuePerPartition tq,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n+      Resource totalPreemptedResourceAllowed,\n+      Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n+\n+    // 1. AM used resource can be considered as a frozen resource for now.\n+    // Hence such containers in a queue can be omitted from the preemption\n+    // calculation.\n+    Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n+    Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n+        tq.leafQueue, perUserAMUsed);\n+    Resources.subtractFrom(queueReassignableResource, amUsed);\n+\n+    // 2. tq.leafQueue will not be null as we validated it in caller side\n+    Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n+\n+    // We do not need preemption for a single app\n+    if (apps.size() \u003d\u003d 1) {\n+      return;\n+    }\n+\n+    // 3. Create all tempApps for internal calculation and return a list from\n+    // high priority to low priority order.\n+    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n+    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d\n+        createTempAppForResCalculation(tq.partition, apps, taComparator);\n+\n+    // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n+    // unallocated resource.Also return apps arranged from lower priority to\n+    // higher priority.\n+    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d\n+        calculateIdealAssignedResourcePerApp(clusterResource,\n+            partitionBasedResource, tq, selectedCandidates,\n+            queueReassignableResource, orderedByPriority, perUserAMUsed);\n+\n+    // 5. A configurable limit that could define an ideal allowable preemption\n+    // limit. Based on current queue\u0027s capacity,defined how much % could become\n+    // preemptable.\n+    Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n+        maxAllowablePreemptLimit);\n+    if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n+        tq.getActuallyToBePreempted())) {\n+      Resources.subtractFrom(maxIntraQueuePreemptable,\n+          tq.getActuallyToBePreempted());\n+    } else {\n+      maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n+    }\n+\n+    // 6. We have two configurations here, one is intra queue limit and second\n+    // one is per-round limit for any time preemption. Take a minimum of these\n+    Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n+        maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n+\n+    // 7. From lowest priority app onwards, calculate toBePreempted resource\n+    // based on demand.\n+    calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n+        preemptionLimit);\n+\n+    // Save all apps (low to high) to temp queue for further reference\n+    tq.addAllApps(orderedApps);\n+\n+    // 8. There are chances that we may preempt for the demand from same\n+    // priority level, such cases are to be validated out.\n+    validateOutSameAppPriorityFromDemand(clusterResource,\n+        (TreeSet\u003cTempAppPerPartition\u003e) tq.getApps());\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n+      for (TempAppPerPartition tmpApp : tq.getApps()) {\n+        LOG.debug(tmpApp);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void computeAppsIdealAllocation(Resource clusterResource,\n      Resource partitionBasedResource, TempQueuePerPartition tq,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptedResourceAllowed,\n      Resource queueReassignableResource, float maxAllowablePreemptLimit) {\n\n    // 1. AM used resource can be considered as a frozen resource for now.\n    // Hence such containers in a queue can be omitted from the preemption\n    // calculation.\n    Map\u003cString, Resource\u003e perUserAMUsed \u003d new HashMap\u003cString, Resource\u003e();\n    Resource amUsed \u003d calculateUsedAMResourcesPerQueue(tq.partition,\n        tq.leafQueue, perUserAMUsed);\n    Resources.subtractFrom(queueReassignableResource, amUsed);\n\n    // 2. tq.leafQueue will not be null as we validated it in caller side\n    Collection\u003cFiCaSchedulerApp\u003e apps \u003d tq.leafQueue.getAllApplications();\n\n    // We do not need preemption for a single app\n    if (apps.size() \u003d\u003d 1) {\n      return;\n    }\n\n    // 3. Create all tempApps for internal calculation and return a list from\n    // high priority to low priority order.\n    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d\n        createTempAppForResCalculation(tq.partition, apps, taComparator);\n\n    // 4. Calculate idealAssigned per app by checking based on queue\u0027s\n    // unallocated resource.Also return apps arranged from lower priority to\n    // higher priority.\n    TreeSet\u003cTempAppPerPartition\u003e orderedApps \u003d\n        calculateIdealAssignedResourcePerApp(clusterResource,\n            partitionBasedResource, tq, selectedCandidates,\n            queueReassignableResource, orderedByPriority, perUserAMUsed);\n\n    // 5. A configurable limit that could define an ideal allowable preemption\n    // limit. Based on current queue\u0027s capacity,defined how much % could become\n    // preemptable.\n    Resource maxIntraQueuePreemptable \u003d Resources.multiply(tq.getGuaranteed(),\n        maxAllowablePreemptLimit);\n    if (Resources.greaterThan(rc, clusterResource, maxIntraQueuePreemptable,\n        tq.getActuallyToBePreempted())) {\n      Resources.subtractFrom(maxIntraQueuePreemptable,\n          tq.getActuallyToBePreempted());\n    } else {\n      maxIntraQueuePreemptable \u003d Resource.newInstance(0, 0);\n    }\n\n    // 6. We have two configurations here, one is intra queue limit and second\n    // one is per-round limit for any time preemption. Take a minimum of these\n    Resource preemptionLimit \u003d Resources.min(rc, clusterResource,\n        maxIntraQueuePreemptable, totalPreemptedResourceAllowed);\n\n    // 7. From lowest priority app onwards, calculate toBePreempted resource\n    // based on demand.\n    calculateToBePreemptedResourcePerApp(clusterResource, orderedApps,\n        preemptionLimit);\n\n    // Save all apps (low to high) to temp queue for further reference\n    tq.addAllApps(orderedApps);\n\n    // 8. There are chances that we may preempt for the demand from same\n    // priority level, such cases are to be validated out.\n    validateOutSameAppPriorityFromDemand(clusterResource,\n        (TreeSet\u003cTempAppPerPartition\u003e) tq.getApps());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Queue Name:\" + tq.queueName + \", partition:\" + tq.partition);\n      for (TempAppPerPartition tmpApp : tq.getApps()) {\n        LOG.debug(tmpApp);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java"
    }
  }
}