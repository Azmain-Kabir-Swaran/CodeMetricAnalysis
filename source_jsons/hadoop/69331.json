{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CumulativeCpuUsageEmulatorPlugin.java",
  "functionName": "emulate",
  "functionId": "emulate",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
  "functionStartLine": 245,
  "functionEndLine": 296,
  "numCommitsSeen": 8,
  "timeTaken": 1038,
  "changeHistory": [
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "c1c0e8c9eaa12043faad985ac5d7e1b5949544cd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef"
  ],
  "changeHistoryShort": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "c1c0e8c9eaa12043faad985ac5d7e1b5949544cd": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (lastSeenProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n        // Estimate the final cpu usage\n        //\n        //   Consider the following\n        //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n        //     Pl/Pc/Pp : Last/Current/Projected progress\n        //   Then\n        //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n        //   Solving this for Cp, we get\n        //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n        //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n        //   section\n        \n        long currentCpuUsage \u003d getCurrentCPUUsage();\n        // estimate the cpu usage rate\n        float rate \u003d (currentCpuUsage - lastSeenCpuUsage)\n                     / (currentProgress - lastSeenProgress);\n        long projectedUsage \u003d \n          currentCpuUsage + (long)((1 - currentProgress) * rate);\n        \n        if (projectedUsage \u003c targetCpuUsage) {\n          // determine the correction factor between the current usage and the\n          // expected usage and add some weight to the target\n          long currentWeighedTarget \u003d \n            (long)(targetCpuUsage \n                   * getWeightForProgressInterval(currentProgress));\n          \n          while (getCurrentCPUUsage() \u003c currentWeighedTarget) {\n            emulatorCore.compute();\n            // sleep for 100ms\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException ie) {\n              String message \u003d \n                \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n              throw new RuntimeException(message);\n            }\n          }\n        }\n        \n        // set the last seen progress\n        lastSeenProgress \u003d progress.getProgress();\n        // set the last seen usage\n        lastSeenCpuUsage \u003d getCurrentCPUUsage();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
      }
    },
    "c1c0e8c9eaa12043faad985ac5d7e1b5949544cd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3008. Improvements to cumulative CPU emulation for short running tasks in Gridmix. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/11 9:59 PM",
      "commitName": "c1c0e8c9eaa12043faad985ac5d7e1b5949544cd",
      "commitAuthor": "Amar Kamat",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 43.2,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,52 @@\n   public void emulate() throws IOException, InterruptedException {\n     if (enabled) {\n       float currentProgress \u003d progress.getProgress();\n       if (lastSeenProgress \u003c currentProgress \n           \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n               || currentProgress \u003d\u003d 1)) {\n         // Estimate the final cpu usage\n         //\n         //   Consider the following\n         //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n         //     Pl/Pc/Pp : Last/Current/Projected progress\n         //   Then\n         //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n         //   Solving this for Cp, we get\n         //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n         //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n         //   section\n         \n-        long currentCpuUsage \u003d \n-          monitor.getProcResourceValues().getCumulativeCpuTime();\n+        long currentCpuUsage \u003d getCurrentCPUUsage();\n         // estimate the cpu usage rate\n-        float rate \u003d (currentCpuUsage - lastSeenCpuUsageCpuUsage)\n+        float rate \u003d (currentCpuUsage - lastSeenCpuUsage)\n                      / (currentProgress - lastSeenProgress);\n         long projectedUsage \u003d \n           currentCpuUsage + (long)((1 - currentProgress) * rate);\n         \n         if (projectedUsage \u003c targetCpuUsage) {\n           // determine the correction factor between the current usage and the\n           // expected usage and add some weight to the target\n           long currentWeighedTarget \u003d \n             (long)(targetCpuUsage \n                    * getWeightForProgressInterval(currentProgress));\n           \n-          while (monitor.getProcResourceValues().getCumulativeCpuTime() \n-                 \u003c currentWeighedTarget) {\n+          while (getCurrentCPUUsage() \u003c currentWeighedTarget) {\n             emulatorCore.compute();\n             // sleep for 100ms\n             try {\n               Thread.sleep(100);\n             } catch (InterruptedException ie) {\n               String message \u003d \n                 \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n               throw new RuntimeException(message);\n             }\n           }\n         }\n         \n         // set the last seen progress\n         lastSeenProgress \u003d progress.getProgress();\n         // set the last seen usage\n-        lastSeenCpuUsageCpuUsage \u003d \n-          monitor.getProcResourceValues().getCumulativeCpuTime();\n+        lastSeenCpuUsage \u003d getCurrentCPUUsage();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (lastSeenProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n        // Estimate the final cpu usage\n        //\n        //   Consider the following\n        //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n        //     Pl/Pc/Pp : Last/Current/Projected progress\n        //   Then\n        //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n        //   Solving this for Cp, we get\n        //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n        //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n        //   section\n        \n        long currentCpuUsage \u003d getCurrentCPUUsage();\n        // estimate the cpu usage rate\n        float rate \u003d (currentCpuUsage - lastSeenCpuUsage)\n                     / (currentProgress - lastSeenProgress);\n        long projectedUsage \u003d \n          currentCpuUsage + (long)((1 - currentProgress) * rate);\n        \n        if (projectedUsage \u003c targetCpuUsage) {\n          // determine the correction factor between the current usage and the\n          // expected usage and add some weight to the target\n          long currentWeighedTarget \u003d \n            (long)(targetCpuUsage \n                   * getWeightForProgressInterval(currentProgress));\n          \n          while (getCurrentCPUUsage() \u003c currentWeighedTarget) {\n            emulatorCore.compute();\n            // sleep for 100ms\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException ie) {\n              String message \u003d \n                \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n              throw new RuntimeException(message);\n            }\n          }\n        }\n        \n        // set the last seen progress\n        lastSeenProgress \u003d progress.getProgress();\n        // set the last seen usage\n        lastSeenCpuUsage \u003d getCurrentCPUUsage();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (lastSeenProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n        // Estimate the final cpu usage\n        //\n        //   Consider the following\n        //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n        //     Pl/Pc/Pp : Last/Current/Projected progress\n        //   Then\n        //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n        //   Solving this for Cp, we get\n        //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n        //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n        //   section\n        \n        long currentCpuUsage \u003d \n          monitor.getProcResourceValues().getCumulativeCpuTime();\n        // estimate the cpu usage rate\n        float rate \u003d (currentCpuUsage - lastSeenCpuUsageCpuUsage)\n                     / (currentProgress - lastSeenProgress);\n        long projectedUsage \u003d \n          currentCpuUsage + (long)((1 - currentProgress) * rate);\n        \n        if (projectedUsage \u003c targetCpuUsage) {\n          // determine the correction factor between the current usage and the\n          // expected usage and add some weight to the target\n          long currentWeighedTarget \u003d \n            (long)(targetCpuUsage \n                   * getWeightForProgressInterval(currentProgress));\n          \n          while (monitor.getProcResourceValues().getCumulativeCpuTime() \n                 \u003c currentWeighedTarget) {\n            emulatorCore.compute();\n            // sleep for 100ms\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException ie) {\n              String message \u003d \n                \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n              throw new RuntimeException(message);\n            }\n          }\n        }\n        \n        // set the last seen progress\n        lastSeenProgress \u003d progress.getProgress();\n        // set the last seen usage\n        lastSeenCpuUsageCpuUsage \u003d \n          monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (lastSeenProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n        // Estimate the final cpu usage\n        //\n        //   Consider the following\n        //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n        //     Pl/Pc/Pp : Last/Current/Projected progress\n        //   Then\n        //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n        //   Solving this for Cp, we get\n        //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n        //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n        //   section\n        \n        long currentCpuUsage \u003d \n          monitor.getProcResourceValues().getCumulativeCpuTime();\n        // estimate the cpu usage rate\n        float rate \u003d (currentCpuUsage - lastSeenCpuUsageCpuUsage)\n                     / (currentProgress - lastSeenProgress);\n        long projectedUsage \u003d \n          currentCpuUsage + (long)((1 - currentProgress) * rate);\n        \n        if (projectedUsage \u003c targetCpuUsage) {\n          // determine the correction factor between the current usage and the\n          // expected usage and add some weight to the target\n          long currentWeighedTarget \u003d \n            (long)(targetCpuUsage \n                   * getWeightForProgressInterval(currentProgress));\n          \n          while (monitor.getProcResourceValues().getCumulativeCpuTime() \n                 \u003c currentWeighedTarget) {\n            emulatorCore.compute();\n            // sleep for 100ms\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException ie) {\n              String message \u003d \n                \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n              throw new RuntimeException(message);\n            }\n          }\n        }\n        \n        // set the last seen progress\n        lastSeenProgress \u003d progress.getProgress();\n        // set the last seen usage\n        lastSeenCpuUsageCpuUsage \u003d \n          monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
      }
    },
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2106. [Gridmix] Cumulative CPU usage emulation in Gridmix. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1135396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/11 12:44 AM",
      "commitName": "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,55 @@\n+  public void emulate() throws IOException, InterruptedException {\n+    if (enabled) {\n+      float currentProgress \u003d progress.getProgress();\n+      if (lastSeenProgress \u003c currentProgress \n+          \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n+              || currentProgress \u003d\u003d 1)) {\n+        // Estimate the final cpu usage\n+        //\n+        //   Consider the following\n+        //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n+        //     Pl/Pc/Pp : Last/Current/Projected progress\n+        //   Then\n+        //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n+        //   Solving this for Cp, we get\n+        //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n+        //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n+        //   section\n+        \n+        long currentCpuUsage \u003d \n+          monitor.getProcResourceValues().getCumulativeCpuTime();\n+        // estimate the cpu usage rate\n+        float rate \u003d (currentCpuUsage - lastSeenCpuUsageCpuUsage)\n+                     / (currentProgress - lastSeenProgress);\n+        long projectedUsage \u003d \n+          currentCpuUsage + (long)((1 - currentProgress) * rate);\n+        \n+        if (projectedUsage \u003c targetCpuUsage) {\n+          // determine the correction factor between the current usage and the\n+          // expected usage and add some weight to the target\n+          long currentWeighedTarget \u003d \n+            (long)(targetCpuUsage \n+                   * getWeightForProgressInterval(currentProgress));\n+          \n+          while (monitor.getProcResourceValues().getCumulativeCpuTime() \n+                 \u003c currentWeighedTarget) {\n+            emulatorCore.compute();\n+            // sleep for 100ms\n+            try {\n+              Thread.sleep(100);\n+            } catch (InterruptedException ie) {\n+              String message \u003d \n+                \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n+              throw new RuntimeException(message);\n+            }\n+          }\n+        }\n+        \n+        // set the last seen progress\n+        lastSeenProgress \u003d progress.getProgress();\n+        // set the last seen usage\n+        lastSeenCpuUsageCpuUsage \u003d \n+          monitor.getProcResourceValues().getCumulativeCpuTime();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (lastSeenProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - lastSeenProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n        // Estimate the final cpu usage\n        //\n        //   Consider the following\n        //     Cl/Cc/Cp : Last/Current/Projected Cpu usage\n        //     Pl/Pc/Pp : Last/Current/Projected progress\n        //   Then\n        //     (Cp-Cc)/(Pp-Pc) \u003d (Cc-Cl)/(Pc-Pl)\n        //   Solving this for Cp, we get\n        //     Cp \u003d Cc + (1-Pc)*(Cc-Cl)/Pc-Pl)\n        //   Note that (Cc-Cl)/(Pc-Pl) is termed as \u0027rate\u0027 in the following \n        //   section\n        \n        long currentCpuUsage \u003d \n          monitor.getProcResourceValues().getCumulativeCpuTime();\n        // estimate the cpu usage rate\n        float rate \u003d (currentCpuUsage - lastSeenCpuUsageCpuUsage)\n                     / (currentProgress - lastSeenProgress);\n        long projectedUsage \u003d \n          currentCpuUsage + (long)((1 - currentProgress) * rate);\n        \n        if (projectedUsage \u003c targetCpuUsage) {\n          // determine the correction factor between the current usage and the\n          // expected usage and add some weight to the target\n          long currentWeighedTarget \u003d \n            (long)(targetCpuUsage \n                   * getWeightForProgressInterval(currentProgress));\n          \n          while (monitor.getProcResourceValues().getCumulativeCpuTime() \n                 \u003c currentWeighedTarget) {\n            emulatorCore.compute();\n            // sleep for 100ms\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException ie) {\n              String message \u003d \n                \"CumulativeCpuUsageEmulatorPlugin got interrupted. Exiting.\";\n              throw new RuntimeException(message);\n            }\n          }\n        }\n        \n        // set the last seen progress\n        lastSeenProgress \u003d progress.getProgress();\n        // set the last seen usage\n        lastSeenCpuUsageCpuUsage \u003d \n          monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n    }\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
    }
  }
}