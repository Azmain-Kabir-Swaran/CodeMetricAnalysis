{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapTask.java",
  "functionName": "spillSingleRecord",
  "functionId": "spillSingleRecord___key-K(modifiers-final)__value-V(modifiers-final)__partition-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
  "functionStartLine": 1711,
  "functionEndLine": 1777,
  "numCommitsSeen": 36,
  "timeTaken": 9570,
  "changeHistory": [
    "9f192cc5ac4a6145e2eeaecba0a754d31e601898",
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "9f192cc5ac4a6145e2eeaecba0a754d31e601898": "Ybodychange",
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9f192cc5ac4a6145e2eeaecba0a754d31e601898": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6628. Potential memory leak in CryptoOutputStream. Contributed by Mariappan Asokan\n",
      "commitDate": "09/09/16 11:12 AM",
      "commitName": "9f192cc5ac4a6145e2eeaecba0a754d31e601898",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "26/04/15 8:31 PM",
      "commitNameOld": "618ba707f0f2ddc353414dbd0eee0ab9e83b8013",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 501.61,
      "commitsBetweenForRepo": 3740,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,67 @@\n     private void spillSingleRecord(final K key, final V value,\n                                    int partition) throws IOException {\n       long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n       FSDataOutputStream out \u003d null;\n+      FSDataOutputStream partitionOut \u003d null;\n       try {\n         // create spill file\n         final SpillRecord spillRec \u003d new SpillRecord(partitions);\n         final Path filename \u003d\n             mapOutputFile.getSpillFileForWrite(numSpills, size);\n         out \u003d rfs.create(filename);\n \n         // we don\u0027t run the combiner for a single record\n         IndexRecord rec \u003d new IndexRecord();\n         for (int i \u003d 0; i \u003c partitions; ++i) {\n           IFile.Writer\u003cK, V\u003e writer \u003d null;\n           try {\n             long segmentStart \u003d out.getPos();\n             // Create a new codec, don\u0027t care!\n-            FSDataOutputStream partitionOut \u003d CryptoUtils.wrapIfNecessary(job, out);\n+            partitionOut \u003d CryptoUtils.wrapIfNecessary(job, out, false);\n             writer \u003d new IFile.Writer\u003cK,V\u003e(job, partitionOut, keyClass, valClass, codec,\n                                             spilledRecordsCounter);\n \n             if (i \u003d\u003d partition) {\n               final long recordStart \u003d out.getPos();\n               writer.append(key, value);\n               // Note that our map byte count will not be accurate with\n               // compression\n               mapOutputByteCounter.increment(out.getPos() - recordStart);\n             }\n             writer.close();\n+            if (partitionOut !\u003d out) {\n+              partitionOut.close();\n+              partitionOut \u003d null;\n+            }\n \n             // record offsets\n             rec.startOffset \u003d segmentStart;\n             rec.rawLength \u003d writer.getRawLength() + CryptoUtils.cryptoPadding(job);\n             rec.partLength \u003d writer.getCompressedLength() + CryptoUtils.cryptoPadding(job);\n             spillRec.putIndex(rec, i);\n \n             writer \u003d null;\n           } catch (IOException e) {\n             if (null !\u003d writer) writer.close();\n             throw e;\n           }\n         }\n         if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n           // create spill index file\n           Path indexFilename \u003d\n               mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                   * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n           spillRec.writeToFile(indexFilename, job);\n         } else {\n           indexCacheList.add(spillRec);\n           totalIndexCacheMemory +\u003d\n             spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n         }\n         ++numSpills;\n       } finally {\n         if (out !\u003d null) out.close();\n+        if (partitionOut !\u003d null) {\n+          partitionOut.close();\n+        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void spillSingleRecord(final K key, final V value,\n                                   int partition) throws IOException {\n      long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n      FSDataOutputStream out \u003d null;\n      FSDataOutputStream partitionOut \u003d null;\n      try {\n        // create spill file\n        final SpillRecord spillRec \u003d new SpillRecord(partitions);\n        final Path filename \u003d\n            mapOutputFile.getSpillFileForWrite(numSpills, size);\n        out \u003d rfs.create(filename);\n\n        // we don\u0027t run the combiner for a single record\n        IndexRecord rec \u003d new IndexRecord();\n        for (int i \u003d 0; i \u003c partitions; ++i) {\n          IFile.Writer\u003cK, V\u003e writer \u003d null;\n          try {\n            long segmentStart \u003d out.getPos();\n            // Create a new codec, don\u0027t care!\n            partitionOut \u003d CryptoUtils.wrapIfNecessary(job, out, false);\n            writer \u003d new IFile.Writer\u003cK,V\u003e(job, partitionOut, keyClass, valClass, codec,\n                                            spilledRecordsCounter);\n\n            if (i \u003d\u003d partition) {\n              final long recordStart \u003d out.getPos();\n              writer.append(key, value);\n              // Note that our map byte count will not be accurate with\n              // compression\n              mapOutputByteCounter.increment(out.getPos() - recordStart);\n            }\n            writer.close();\n            if (partitionOut !\u003d out) {\n              partitionOut.close();\n              partitionOut \u003d null;\n            }\n\n            // record offsets\n            rec.startOffset \u003d segmentStart;\n            rec.rawLength \u003d writer.getRawLength() + CryptoUtils.cryptoPadding(job);\n            rec.partLength \u003d writer.getCompressedLength() + CryptoUtils.cryptoPadding(job);\n            spillRec.putIndex(rec, i);\n\n            writer \u003d null;\n          } catch (IOException e) {\n            if (null !\u003d writer) writer.close();\n            throw e;\n          }\n        }\n        if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n          // create spill index file\n          Path indexFilename \u003d\n              mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                  * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n          spillRec.writeToFile(indexFilename, job);\n        } else {\n          indexCacheList.add(spillRec);\n          totalIndexCacheMemory +\u003d\n            spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n        }\n        ++numSpills;\n      } finally {\n        if (out !\u003d null) out.close();\n        if (partitionOut !\u003d null) {\n          partitionOut.close();\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {}
    },
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5890. Support for encrypting Intermediate data and spills in local filesystem. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609597 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 5:43 PM",
      "commitName": "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "10/03/14 6:29 PM",
      "commitNameOld": "98ecd4ffef333cb6703e922de3f1d8512cacefed",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 121.97,
      "commitsBetweenForRepo": 769,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n     private void spillSingleRecord(final K key, final V value,\n                                    int partition) throws IOException {\n       long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n       FSDataOutputStream out \u003d null;\n       try {\n         // create spill file\n         final SpillRecord spillRec \u003d new SpillRecord(partitions);\n         final Path filename \u003d\n             mapOutputFile.getSpillFileForWrite(numSpills, size);\n         out \u003d rfs.create(filename);\n \n         // we don\u0027t run the combiner for a single record\n         IndexRecord rec \u003d new IndexRecord();\n         for (int i \u003d 0; i \u003c partitions; ++i) {\n           IFile.Writer\u003cK, V\u003e writer \u003d null;\n           try {\n             long segmentStart \u003d out.getPos();\n             // Create a new codec, don\u0027t care!\n-            writer \u003d new IFile.Writer\u003cK,V\u003e(job, out, keyClass, valClass, codec,\n+            FSDataOutputStream partitionOut \u003d CryptoUtils.wrapIfNecessary(job, out);\n+            writer \u003d new IFile.Writer\u003cK,V\u003e(job, partitionOut, keyClass, valClass, codec,\n                                             spilledRecordsCounter);\n \n             if (i \u003d\u003d partition) {\n               final long recordStart \u003d out.getPos();\n               writer.append(key, value);\n               // Note that our map byte count will not be accurate with\n               // compression\n               mapOutputByteCounter.increment(out.getPos() - recordStart);\n             }\n             writer.close();\n \n             // record offsets\n             rec.startOffset \u003d segmentStart;\n-            rec.rawLength \u003d writer.getRawLength();\n-            rec.partLength \u003d writer.getCompressedLength();\n+            rec.rawLength \u003d writer.getRawLength() + CryptoUtils.cryptoPadding(job);\n+            rec.partLength \u003d writer.getCompressedLength() + CryptoUtils.cryptoPadding(job);\n             spillRec.putIndex(rec, i);\n \n             writer \u003d null;\n           } catch (IOException e) {\n             if (null !\u003d writer) writer.close();\n             throw e;\n           }\n         }\n         if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n           // create spill index file\n           Path indexFilename \u003d\n               mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                   * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n           spillRec.writeToFile(indexFilename, job);\n         } else {\n           indexCacheList.add(spillRec);\n           totalIndexCacheMemory +\u003d\n             spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n         }\n         ++numSpills;\n       } finally {\n         if (out !\u003d null) out.close();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void spillSingleRecord(final K key, final V value,\n                                   int partition) throws IOException {\n      long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n      FSDataOutputStream out \u003d null;\n      try {\n        // create spill file\n        final SpillRecord spillRec \u003d new SpillRecord(partitions);\n        final Path filename \u003d\n            mapOutputFile.getSpillFileForWrite(numSpills, size);\n        out \u003d rfs.create(filename);\n\n        // we don\u0027t run the combiner for a single record\n        IndexRecord rec \u003d new IndexRecord();\n        for (int i \u003d 0; i \u003c partitions; ++i) {\n          IFile.Writer\u003cK, V\u003e writer \u003d null;\n          try {\n            long segmentStart \u003d out.getPos();\n            // Create a new codec, don\u0027t care!\n            FSDataOutputStream partitionOut \u003d CryptoUtils.wrapIfNecessary(job, out);\n            writer \u003d new IFile.Writer\u003cK,V\u003e(job, partitionOut, keyClass, valClass, codec,\n                                            spilledRecordsCounter);\n\n            if (i \u003d\u003d partition) {\n              final long recordStart \u003d out.getPos();\n              writer.append(key, value);\n              // Note that our map byte count will not be accurate with\n              // compression\n              mapOutputByteCounter.increment(out.getPos() - recordStart);\n            }\n            writer.close();\n\n            // record offsets\n            rec.startOffset \u003d segmentStart;\n            rec.rawLength \u003d writer.getRawLength() + CryptoUtils.cryptoPadding(job);\n            rec.partLength \u003d writer.getCompressedLength() + CryptoUtils.cryptoPadding(job);\n            spillRec.putIndex(rec, i);\n\n            writer \u003d null;\n          } catch (IOException e) {\n            if (null !\u003d writer) writer.close();\n            throw e;\n          }\n        }\n        if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n          // create spill index file\n          Path indexFilename \u003d\n              mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                  * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n          spillRec.writeToFile(indexFilename, job);\n        } else {\n          indexCacheList.add(spillRec);\n          totalIndexCacheMemory +\u003d\n            spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n        }\n        ++numSpills;\n      } finally {\n        if (out !\u003d null) out.close();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void spillSingleRecord(final K key, final V value,\n                                   int partition) throws IOException {\n      long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n      FSDataOutputStream out \u003d null;\n      try {\n        // create spill file\n        final SpillRecord spillRec \u003d new SpillRecord(partitions);\n        final Path filename \u003d\n            mapOutputFile.getSpillFileForWrite(numSpills, size);\n        out \u003d rfs.create(filename);\n\n        // we don\u0027t run the combiner for a single record\n        IndexRecord rec \u003d new IndexRecord();\n        for (int i \u003d 0; i \u003c partitions; ++i) {\n          IFile.Writer\u003cK, V\u003e writer \u003d null;\n          try {\n            long segmentStart \u003d out.getPos();\n            // Create a new codec, don\u0027t care!\n            writer \u003d new IFile.Writer\u003cK,V\u003e(job, out, keyClass, valClass, codec,\n                                            spilledRecordsCounter);\n\n            if (i \u003d\u003d partition) {\n              final long recordStart \u003d out.getPos();\n              writer.append(key, value);\n              // Note that our map byte count will not be accurate with\n              // compression\n              mapOutputByteCounter.increment(out.getPos() - recordStart);\n            }\n            writer.close();\n\n            // record offsets\n            rec.startOffset \u003d segmentStart;\n            rec.rawLength \u003d writer.getRawLength();\n            rec.partLength \u003d writer.getCompressedLength();\n            spillRec.putIndex(rec, i);\n\n            writer \u003d null;\n          } catch (IOException e) {\n            if (null !\u003d writer) writer.close();\n            throw e;\n          }\n        }\n        if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n          // create spill index file\n          Path indexFilename \u003d\n              mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                  * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n          spillRec.writeToFile(indexFilename, job);\n        } else {\n          indexCacheList.add(spillRec);\n          totalIndexCacheMemory +\u003d\n            spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n        }\n        ++numSpills;\n      } finally {\n        if (out !\u003d null) out.close();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void spillSingleRecord(final K key, final V value,\n                                   int partition) throws IOException {\n      long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n      FSDataOutputStream out \u003d null;\n      try {\n        // create spill file\n        final SpillRecord spillRec \u003d new SpillRecord(partitions);\n        final Path filename \u003d\n            mapOutputFile.getSpillFileForWrite(numSpills, size);\n        out \u003d rfs.create(filename);\n\n        // we don\u0027t run the combiner for a single record\n        IndexRecord rec \u003d new IndexRecord();\n        for (int i \u003d 0; i \u003c partitions; ++i) {\n          IFile.Writer\u003cK, V\u003e writer \u003d null;\n          try {\n            long segmentStart \u003d out.getPos();\n            // Create a new codec, don\u0027t care!\n            writer \u003d new IFile.Writer\u003cK,V\u003e(job, out, keyClass, valClass, codec,\n                                            spilledRecordsCounter);\n\n            if (i \u003d\u003d partition) {\n              final long recordStart \u003d out.getPos();\n              writer.append(key, value);\n              // Note that our map byte count will not be accurate with\n              // compression\n              mapOutputByteCounter.increment(out.getPos() - recordStart);\n            }\n            writer.close();\n\n            // record offsets\n            rec.startOffset \u003d segmentStart;\n            rec.rawLength \u003d writer.getRawLength();\n            rec.partLength \u003d writer.getCompressedLength();\n            spillRec.putIndex(rec, i);\n\n            writer \u003d null;\n          } catch (IOException e) {\n            if (null !\u003d writer) writer.close();\n            throw e;\n          }\n        }\n        if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n          // create spill index file\n          Path indexFilename \u003d\n              mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                  * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n          spillRec.writeToFile(indexFilename, job);\n        } else {\n          indexCacheList.add(spillRec);\n          totalIndexCacheMemory +\u003d\n            spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n        }\n        ++numSpills;\n      } finally {\n        if (out !\u003d null) out.close();\n      }\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
        "oldMethodName": "spillSingleRecord",
        "newMethodName": "spillSingleRecord"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,58 @@\n+    private void spillSingleRecord(final K key, final V value,\n+                                   int partition) throws IOException {\n+      long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n+      FSDataOutputStream out \u003d null;\n+      try {\n+        // create spill file\n+        final SpillRecord spillRec \u003d new SpillRecord(partitions);\n+        final Path filename \u003d\n+            mapOutputFile.getSpillFileForWrite(numSpills, size);\n+        out \u003d rfs.create(filename);\n+\n+        // we don\u0027t run the combiner for a single record\n+        IndexRecord rec \u003d new IndexRecord();\n+        for (int i \u003d 0; i \u003c partitions; ++i) {\n+          IFile.Writer\u003cK, V\u003e writer \u003d null;\n+          try {\n+            long segmentStart \u003d out.getPos();\n+            // Create a new codec, don\u0027t care!\n+            writer \u003d new IFile.Writer\u003cK,V\u003e(job, out, keyClass, valClass, codec,\n+                                            spilledRecordsCounter);\n+\n+            if (i \u003d\u003d partition) {\n+              final long recordStart \u003d out.getPos();\n+              writer.append(key, value);\n+              // Note that our map byte count will not be accurate with\n+              // compression\n+              mapOutputByteCounter.increment(out.getPos() - recordStart);\n+            }\n+            writer.close();\n+\n+            // record offsets\n+            rec.startOffset \u003d segmentStart;\n+            rec.rawLength \u003d writer.getRawLength();\n+            rec.partLength \u003d writer.getCompressedLength();\n+            spillRec.putIndex(rec, i);\n+\n+            writer \u003d null;\n+          } catch (IOException e) {\n+            if (null !\u003d writer) writer.close();\n+            throw e;\n+          }\n+        }\n+        if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n+          // create spill index file\n+          Path indexFilename \u003d\n+              mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n+                  * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n+          spillRec.writeToFile(indexFilename, job);\n+        } else {\n+          indexCacheList.add(spillRec);\n+          totalIndexCacheMemory +\u003d\n+            spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n+        }\n+        ++numSpills;\n+      } finally {\n+        if (out !\u003d null) out.close();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void spillSingleRecord(final K key, final V value,\n                                   int partition) throws IOException {\n      long size \u003d kvbuffer.length + partitions * APPROX_HEADER_LENGTH;\n      FSDataOutputStream out \u003d null;\n      try {\n        // create spill file\n        final SpillRecord spillRec \u003d new SpillRecord(partitions);\n        final Path filename \u003d\n            mapOutputFile.getSpillFileForWrite(numSpills, size);\n        out \u003d rfs.create(filename);\n\n        // we don\u0027t run the combiner for a single record\n        IndexRecord rec \u003d new IndexRecord();\n        for (int i \u003d 0; i \u003c partitions; ++i) {\n          IFile.Writer\u003cK, V\u003e writer \u003d null;\n          try {\n            long segmentStart \u003d out.getPos();\n            // Create a new codec, don\u0027t care!\n            writer \u003d new IFile.Writer\u003cK,V\u003e(job, out, keyClass, valClass, codec,\n                                            spilledRecordsCounter);\n\n            if (i \u003d\u003d partition) {\n              final long recordStart \u003d out.getPos();\n              writer.append(key, value);\n              // Note that our map byte count will not be accurate with\n              // compression\n              mapOutputByteCounter.increment(out.getPos() - recordStart);\n            }\n            writer.close();\n\n            // record offsets\n            rec.startOffset \u003d segmentStart;\n            rec.rawLength \u003d writer.getRawLength();\n            rec.partLength \u003d writer.getCompressedLength();\n            spillRec.putIndex(rec, i);\n\n            writer \u003d null;\n          } catch (IOException e) {\n            if (null !\u003d writer) writer.close();\n            throw e;\n          }\n        }\n        if (totalIndexCacheMemory \u003e\u003d indexCacheMemoryLimit) {\n          // create spill index file\n          Path indexFilename \u003d\n              mapOutputFile.getSpillIndexFileForWrite(numSpills, partitions\n                  * MAP_OUTPUT_INDEX_RECORD_LENGTH);\n          spillRec.writeToFile(indexFilename, job);\n        } else {\n          indexCacheList.add(spillRec);\n          totalIndexCacheMemory +\u003d\n            spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;\n        }\n        ++numSpills;\n      } finally {\n        if (out !\u003d null) out.close();\n      }\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java"
    }
  }
}