{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodesListManager.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
  "functionStartLine": 138,
  "functionEndLine": 161,
  "numCommitsSeen": 33,
  "timeTaken": 1223,
  "changeHistory": [
    "bcc85e3bab78bcacd430eac23141774465b96ef9"
  ],
  "changeHistoryShort": {
    "bcc85e3bab78bcacd430eac23141774465b96ef9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bcc85e3bab78bcacd430eac23141774465b96ef9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4024. YARN RM should avoid unnecessary resolving IP when NMs doing heartbeat. (Hong Zhiguo via wangda)\n",
      "commitDate": "04/09/15 3:13 PM",
      "commitName": "bcc85e3bab78bcacd430eac23141774465b96ef9",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,18 @@\n+      public void run() {\n+        long currentTime \u003d clock.getTime();\n+        Iterator\u003cMap.Entry\u003cString, CacheEntry\u003e\u003e iterator \u003d\n+            cache.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+          Map.Entry\u003cString, CacheEntry\u003e entry \u003d iterator.next();\n+          if (currentTime \u003e\n+              entry.getValue().resolveTime +\n+                  CachedResolver.this.expiryIntervalMs) {\n+            iterator.remove();\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"[\" + entry.getKey() + \":\" + entry.getValue().ip +\n+                  \"] Expired after \" +\n+                  CachedResolver.this.expiryIntervalMs / 1000 + \" secs\");\n+            }\n+          }\n+        }\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n        long currentTime \u003d clock.getTime();\n        Iterator\u003cMap.Entry\u003cString, CacheEntry\u003e\u003e iterator \u003d\n            cache.entrySet().iterator();\n        while (iterator.hasNext()) {\n          Map.Entry\u003cString, CacheEntry\u003e entry \u003d iterator.next();\n          if (currentTime \u003e\n              entry.getValue().resolveTime +\n                  CachedResolver.this.expiryIntervalMs) {\n            iterator.remove();\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"[\" + entry.getKey() + \":\" + entry.getValue().ip +\n                  \"] Expired after \" +\n                  CachedResolver.this.expiryIntervalMs / 1000 + \" secs\");\n            }\n          }\n        }\n      }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java"
    }
  }
}