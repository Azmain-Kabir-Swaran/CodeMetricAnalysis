{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetCache.java",
  "functionName": "initCache",
  "functionId": "initCache___bpid-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
  "functionStartLine": 194,
  "functionEndLine": 211,
  "numCommitsSeen": 31,
  "timeTaken": 1478,
  "changeHistory": [
    "d79cce20abbbf321f6dcce03f4087544124a7cd2"
  ],
  "changeHistoryShort": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14740. Recover data blocks from persistent memory read cache during datanode restarts. Contributed by Feilong He.\n",
      "commitDate": "01/01/20 10:14 PM",
      "commitName": "d79cce20abbbf321f6dcce03f4087544124a7cd2",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,18 @@\n+  public void initCache(String bpid) throws IOException {\n+    if (cacheLoader.isTransientCache()) {\n+      return;\n+    }\n+    PmemVolumeManager.getInstance().createBlockPoolDir(bpid);\n+    if (getDnConf().getPmemCacheRecoveryEnabled()) {\n+      final Map\u003cExtendedBlockId, MappableBlock\u003e keyToMappableBlock \u003d\n+          PmemVolumeManager.getInstance().recoverCache(bpid, cacheLoader);\n+      Set\u003cMap.Entry\u003cExtendedBlockId, MappableBlock\u003e\u003e entrySet\n+          \u003d keyToMappableBlock.entrySet();\n+      for (Map.Entry\u003cExtendedBlockId, MappableBlock\u003e entry : entrySet) {\n+        mappableBlockMap.put(entry.getKey(),\n+            new Value(keyToMappableBlock.get(entry.getKey()), State.CACHED));\n+        numBlocksCached.addAndGet(1);\n+        dataset.datanode.getMetrics().incrBlocksCached(1);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initCache(String bpid) throws IOException {\n    if (cacheLoader.isTransientCache()) {\n      return;\n    }\n    PmemVolumeManager.getInstance().createBlockPoolDir(bpid);\n    if (getDnConf().getPmemCacheRecoveryEnabled()) {\n      final Map\u003cExtendedBlockId, MappableBlock\u003e keyToMappableBlock \u003d\n          PmemVolumeManager.getInstance().recoverCache(bpid, cacheLoader);\n      Set\u003cMap.Entry\u003cExtendedBlockId, MappableBlock\u003e\u003e entrySet\n          \u003d keyToMappableBlock.entrySet();\n      for (Map.Entry\u003cExtendedBlockId, MappableBlock\u003e entry : entrySet) {\n        mappableBlockMap.put(entry.getKey(),\n            new Value(keyToMappableBlock.get(entry.getKey()), State.CACHED));\n        numBlocksCached.addAndGet(1);\n        dataset.datanode.getMetrics().incrBlocksCached(1);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java"
    }
  }
}