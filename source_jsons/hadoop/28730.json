{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMHeartbeatRequestHandler.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMHeartbeatRequestHandler.java",
  "functionStartLine": 86,
  "functionEndLine": 145,
  "numCommitsSeen": 11,
  "timeTaken": 3752,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "3090922805699b8374a359e92323884a4177dc4e",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "859aa1f9d621d07693825e610bdc0149f7a2770a"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "3090922805699b8374a359e92323884a4177dc4e": "Ybodychange",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ymultichange(Ymovefromfile,Ybodychange)",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "859aa1f9d621d07693825e610bdc0149f7a2770a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "09/10/18 10:29 AM",
      "commitNameOld": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 157.24,
      "commitsBetweenForRepo": 1230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,60 @@\n   public void run() {\n     while (keepRunning) {\n       AsyncAllocateRequestInfo requestInfo;\n       try {\n         this.isThreadWaiting \u003d true;\n         requestInfo \u003d this.requestQueue.take();\n         this.isThreadWaiting \u003d false;\n \n         if (requestInfo \u003d\u003d null) {\n           throw new YarnException(\n               \"Null requestInfo taken from request queue\");\n         }\n         if (!this.keepRunning) {\n           break;\n         }\n \n         // change the response id before forwarding the allocate request as we\n         // could have different values for each UAM\n         AllocateRequest request \u003d requestInfo.getRequest();\n         if (request \u003d\u003d null) {\n           throw new YarnException(\"Null allocateRequest from requestInfo\");\n         }\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Sending Heartbeat to RM. AskList:\"\n-              + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n-                  : request.getAskList().size()));\n-        }\n+        LOG.debug(\"Sending Heartbeat to RM. AskList:{}\",\n+            ((request.getAskList() \u003d\u003d null) ? \" empty\" :\n+            request.getAskList().size()));\n \n         request.setResponseId(lastResponseId);\n         AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n         if (response \u003d\u003d null) {\n           throw new YarnException(\"Null allocateResponse from allocate\");\n         }\n \n         lastResponseId \u003d response.getResponseId();\n         // update token if RM has reissued/renewed\n         if (response.getAMRMToken() !\u003d null) {\n           LOG.debug(\"Received new AMRMToken\");\n           YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n               userUgi, conf);\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n-              + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n-                  : response.getAllocatedContainers().size()));\n-        }\n+        LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:{}\",\n+            ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n+            : response.getAllocatedContainers().size()));\n \n         if (requestInfo.getCallback() \u003d\u003d null) {\n           throw new YarnException(\"Null callback from requestInfo\");\n         }\n         requestInfo.getCallback().callback(response);\n       } catch (InterruptedException ex) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Interrupted while waiting for queue\", ex);\n-        }\n+        LOG.debug(\"Interrupted while waiting for queue\", ex);\n       } catch (Throwable ex) {\n         LOG.warn(\n             \"Error occurred while processing heart beat for \" + applicationId,\n             ex);\n       }\n     }\n \n     LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n         applicationId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    while (keepRunning) {\n      AsyncAllocateRequestInfo requestInfo;\n      try {\n        this.isThreadWaiting \u003d true;\n        requestInfo \u003d this.requestQueue.take();\n        this.isThreadWaiting \u003d false;\n\n        if (requestInfo \u003d\u003d null) {\n          throw new YarnException(\n              \"Null requestInfo taken from request queue\");\n        }\n        if (!this.keepRunning) {\n          break;\n        }\n\n        // change the response id before forwarding the allocate request as we\n        // could have different values for each UAM\n        AllocateRequest request \u003d requestInfo.getRequest();\n        if (request \u003d\u003d null) {\n          throw new YarnException(\"Null allocateRequest from requestInfo\");\n        }\n        LOG.debug(\"Sending Heartbeat to RM. AskList:{}\",\n            ((request.getAskList() \u003d\u003d null) ? \" empty\" :\n            request.getAskList().size()));\n\n        request.setResponseId(lastResponseId);\n        AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n        if (response \u003d\u003d null) {\n          throw new YarnException(\"Null allocateResponse from allocate\");\n        }\n\n        lastResponseId \u003d response.getResponseId();\n        // update token if RM has reissued/renewed\n        if (response.getAMRMToken() !\u003d null) {\n          LOG.debug(\"Received new AMRMToken\");\n          YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n              userUgi, conf);\n        }\n\n        LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:{}\",\n            ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n            : response.getAllocatedContainers().size()));\n\n        if (requestInfo.getCallback() \u003d\u003d null) {\n          throw new YarnException(\"Null callback from requestInfo\");\n        }\n        requestInfo.getCallback().callback(response);\n      } catch (InterruptedException ex) {\n        LOG.debug(\"Interrupted while waiting for queue\", ex);\n      } catch (Throwable ex) {\n        LOG.warn(\n            \"Error occurred while processing heart beat for \" + applicationId,\n            ex);\n      }\n    }\n\n    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n        applicationId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMHeartbeatRequestHandler.java",
      "extendedDetails": {}
    },
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "27/08/18 10:32 AM",
      "commitNameOld": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 28.04,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,66 @@\n   public void run() {\n     while (keepRunning) {\n       AsyncAllocateRequestInfo requestInfo;\n       try {\n-        requestInfo \u003d requestQueue.take();\n+        this.isThreadWaiting \u003d true;\n+        requestInfo \u003d this.requestQueue.take();\n+        this.isThreadWaiting \u003d false;\n+\n         if (requestInfo \u003d\u003d null) {\n           throw new YarnException(\n               \"Null requestInfo taken from request queue\");\n         }\n-        if (!keepRunning) {\n+        if (!this.keepRunning) {\n           break;\n         }\n \n         // change the response id before forwarding the allocate request as we\n         // could have different values for each UAM\n         AllocateRequest request \u003d requestInfo.getRequest();\n         if (request \u003d\u003d null) {\n           throw new YarnException(\"Null allocateRequest from requestInfo\");\n         }\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n+          LOG.debug(\"Sending Heartbeat to RM. AskList:\"\n               + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                   : request.getAskList().size()));\n         }\n \n         request.setResponseId(lastResponseId);\n         AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n         if (response \u003d\u003d null) {\n           throw new YarnException(\"Null allocateResponse from allocate\");\n         }\n \n         lastResponseId \u003d response.getResponseId();\n         // update token if RM has reissued/renewed\n         if (response.getAMRMToken() !\u003d null) {\n           LOG.debug(\"Received new AMRMToken\");\n           YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n               userUgi, conf);\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n               + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                   : response.getAllocatedContainers().size()));\n         }\n \n         if (requestInfo.getCallback() \u003d\u003d null) {\n           throw new YarnException(\"Null callback from requestInfo\");\n         }\n         requestInfo.getCallback().callback(response);\n       } catch (InterruptedException ex) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Interrupted while waiting for queue\", ex);\n         }\n       } catch (Throwable ex) {\n         LOG.warn(\n             \"Error occurred while processing heart beat for \" + applicationId,\n             ex);\n       }\n     }\n \n     LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n         applicationId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    while (keepRunning) {\n      AsyncAllocateRequestInfo requestInfo;\n      try {\n        this.isThreadWaiting \u003d true;\n        requestInfo \u003d this.requestQueue.take();\n        this.isThreadWaiting \u003d false;\n\n        if (requestInfo \u003d\u003d null) {\n          throw new YarnException(\n              \"Null requestInfo taken from request queue\");\n        }\n        if (!this.keepRunning) {\n          break;\n        }\n\n        // change the response id before forwarding the allocate request as we\n        // could have different values for each UAM\n        AllocateRequest request \u003d requestInfo.getRequest();\n        if (request \u003d\u003d null) {\n          throw new YarnException(\"Null allocateRequest from requestInfo\");\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending Heartbeat to RM. AskList:\"\n              + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                  : request.getAskList().size()));\n        }\n\n        request.setResponseId(lastResponseId);\n        AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n        if (response \u003d\u003d null) {\n          throw new YarnException(\"Null allocateResponse from allocate\");\n        }\n\n        lastResponseId \u003d response.getResponseId();\n        // update token if RM has reissued/renewed\n        if (response.getAMRMToken() !\u003d null) {\n          LOG.debug(\"Received new AMRMToken\");\n          YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n              userUgi, conf);\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n              + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                  : response.getAllocatedContainers().size()));\n        }\n\n        if (requestInfo.getCallback() \u003d\u003d null) {\n          throw new YarnException(\"Null callback from requestInfo\");\n        }\n        requestInfo.getCallback().callback(response);\n      } catch (InterruptedException ex) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Interrupted while waiting for queue\", ex);\n        }\n      } catch (Throwable ex) {\n        LOG.warn(\n            \"Error occurred while processing heart beat for \" + applicationId,\n            ex);\n      }\n    }\n\n    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n        applicationId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMHeartbeatRequestHandler.java",
      "extendedDetails": {}
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
          "commitDate": "27/08/18 10:32 AM",
          "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "27/08/18 10:18 AM",
          "commitNameOld": "7b1fa5693efc687492776d43ab482601cbb30dfd",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,63 @@\n-    public void run() {\n-      while (keepRunning) {\n-        AsyncAllocateRequestInfo requestInfo;\n-        try {\n-          requestInfo \u003d requestQueue.take();\n-          if (requestInfo \u003d\u003d null) {\n-            throw new YarnException(\n-                \"Null requestInfo taken from request queue\");\n-          }\n-          if (!keepRunning) {\n-            break;\n-          }\n-\n-          // change the response id before forwarding the allocate request as we\n-          // could have different values for each UAM\n-          AllocateRequest request \u003d requestInfo.getRequest();\n-          if (request \u003d\u003d null) {\n-            throw new YarnException(\"Null allocateRequest from requestInfo\");\n-          }\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n-                + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n-                    : request.getAskList().size()));\n-          }\n-\n-          request.setResponseId(lastResponseId);\n-          AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n-          if (response \u003d\u003d null) {\n-            throw new YarnException(\"Null allocateResponse from allocate\");\n-          }\n-\n-          lastResponseId \u003d response.getResponseId();\n-          // update token if RM has reissued/renewed\n-          if (response.getAMRMToken() !\u003d null) {\n-            LOG.debug(\"Received new AMRMToken\");\n-            YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n-                userUgi, conf);\n-          }\n-\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n-                + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n-                    : response.getAllocatedContainers().size()));\n-          }\n-\n-          if (requestInfo.getCallback() \u003d\u003d null) {\n-            throw new YarnException(\"Null callback from requestInfo\");\n-          }\n-          requestInfo.getCallback().callback(response);\n-        } catch (InterruptedException ex) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Interrupted while waiting for queue\", ex);\n-          }\n-        } catch (IOException ex) {\n-          LOG.warn(\"IO Error occurred while processing heart beat for \"\n-              + applicationId, ex);\n-        } catch (Throwable ex) {\n-          LOG.warn(\n-              \"Error occurred while processing heart beat for \" + applicationId,\n-              ex);\n+  public void run() {\n+    while (keepRunning) {\n+      AsyncAllocateRequestInfo requestInfo;\n+      try {\n+        requestInfo \u003d requestQueue.take();\n+        if (requestInfo \u003d\u003d null) {\n+          throw new YarnException(\n+              \"Null requestInfo taken from request queue\");\n         }\n-      }\n+        if (!keepRunning) {\n+          break;\n+        }\n \n-      LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n-          + \"AMRequestHandlerThread thread is exiting\", applicationId);\n-    }\n\\ No newline at end of file\n+        // change the response id before forwarding the allocate request as we\n+        // could have different values for each UAM\n+        AllocateRequest request \u003d requestInfo.getRequest();\n+        if (request \u003d\u003d null) {\n+          throw new YarnException(\"Null allocateRequest from requestInfo\");\n+        }\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n+              + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n+                  : request.getAskList().size()));\n+        }\n+\n+        request.setResponseId(lastResponseId);\n+        AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n+        if (response \u003d\u003d null) {\n+          throw new YarnException(\"Null allocateResponse from allocate\");\n+        }\n+\n+        lastResponseId \u003d response.getResponseId();\n+        // update token if RM has reissued/renewed\n+        if (response.getAMRMToken() !\u003d null) {\n+          LOG.debug(\"Received new AMRMToken\");\n+          YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n+              userUgi, conf);\n+        }\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n+              + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n+                  : response.getAllocatedContainers().size()));\n+        }\n+\n+        if (requestInfo.getCallback() \u003d\u003d null) {\n+          throw new YarnException(\"Null callback from requestInfo\");\n+        }\n+        requestInfo.getCallback().callback(response);\n+      } catch (InterruptedException ex) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Interrupted while waiting for queue\", ex);\n+        }\n+      } catch (Throwable ex) {\n+        LOG.warn(\n+            \"Error occurred while processing heart beat for \" + applicationId,\n+            ex);\n+      }\n+    }\n+\n+    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n+        applicationId);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void run() {\n    while (keepRunning) {\n      AsyncAllocateRequestInfo requestInfo;\n      try {\n        requestInfo \u003d requestQueue.take();\n        if (requestInfo \u003d\u003d null) {\n          throw new YarnException(\n              \"Null requestInfo taken from request queue\");\n        }\n        if (!keepRunning) {\n          break;\n        }\n\n        // change the response id before forwarding the allocate request as we\n        // could have different values for each UAM\n        AllocateRequest request \u003d requestInfo.getRequest();\n        if (request \u003d\u003d null) {\n          throw new YarnException(\"Null allocateRequest from requestInfo\");\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n              + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                  : request.getAskList().size()));\n        }\n\n        request.setResponseId(lastResponseId);\n        AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n        if (response \u003d\u003d null) {\n          throw new YarnException(\"Null allocateResponse from allocate\");\n        }\n\n        lastResponseId \u003d response.getResponseId();\n        // update token if RM has reissued/renewed\n        if (response.getAMRMToken() !\u003d null) {\n          LOG.debug(\"Received new AMRMToken\");\n          YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n              userUgi, conf);\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n              + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                  : response.getAllocatedContainers().size()));\n        }\n\n        if (requestInfo.getCallback() \u003d\u003d null) {\n          throw new YarnException(\"Null callback from requestInfo\");\n        }\n        requestInfo.getCallback().callback(response);\n      } catch (InterruptedException ex) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Interrupted while waiting for queue\", ex);\n        }\n      } catch (Throwable ex) {\n        LOG.warn(\n            \"Error occurred while processing heart beat for \" + applicationId,\n            ex);\n      }\n    }\n\n    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n        applicationId);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMHeartbeatRequestHandler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMHeartbeatRequestHandler.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
          "commitDate": "27/08/18 10:32 AM",
          "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "27/08/18 10:18 AM",
          "commitNameOld": "7b1fa5693efc687492776d43ab482601cbb30dfd",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,63 @@\n-    public void run() {\n-      while (keepRunning) {\n-        AsyncAllocateRequestInfo requestInfo;\n-        try {\n-          requestInfo \u003d requestQueue.take();\n-          if (requestInfo \u003d\u003d null) {\n-            throw new YarnException(\n-                \"Null requestInfo taken from request queue\");\n-          }\n-          if (!keepRunning) {\n-            break;\n-          }\n-\n-          // change the response id before forwarding the allocate request as we\n-          // could have different values for each UAM\n-          AllocateRequest request \u003d requestInfo.getRequest();\n-          if (request \u003d\u003d null) {\n-            throw new YarnException(\"Null allocateRequest from requestInfo\");\n-          }\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n-                + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n-                    : request.getAskList().size()));\n-          }\n-\n-          request.setResponseId(lastResponseId);\n-          AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n-          if (response \u003d\u003d null) {\n-            throw new YarnException(\"Null allocateResponse from allocate\");\n-          }\n-\n-          lastResponseId \u003d response.getResponseId();\n-          // update token if RM has reissued/renewed\n-          if (response.getAMRMToken() !\u003d null) {\n-            LOG.debug(\"Received new AMRMToken\");\n-            YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n-                userUgi, conf);\n-          }\n-\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n-                + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n-                    : response.getAllocatedContainers().size()));\n-          }\n-\n-          if (requestInfo.getCallback() \u003d\u003d null) {\n-            throw new YarnException(\"Null callback from requestInfo\");\n-          }\n-          requestInfo.getCallback().callback(response);\n-        } catch (InterruptedException ex) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Interrupted while waiting for queue\", ex);\n-          }\n-        } catch (IOException ex) {\n-          LOG.warn(\"IO Error occurred while processing heart beat for \"\n-              + applicationId, ex);\n-        } catch (Throwable ex) {\n-          LOG.warn(\n-              \"Error occurred while processing heart beat for \" + applicationId,\n-              ex);\n+  public void run() {\n+    while (keepRunning) {\n+      AsyncAllocateRequestInfo requestInfo;\n+      try {\n+        requestInfo \u003d requestQueue.take();\n+        if (requestInfo \u003d\u003d null) {\n+          throw new YarnException(\n+              \"Null requestInfo taken from request queue\");\n         }\n-      }\n+        if (!keepRunning) {\n+          break;\n+        }\n \n-      LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n-          + \"AMRequestHandlerThread thread is exiting\", applicationId);\n-    }\n\\ No newline at end of file\n+        // change the response id before forwarding the allocate request as we\n+        // could have different values for each UAM\n+        AllocateRequest request \u003d requestInfo.getRequest();\n+        if (request \u003d\u003d null) {\n+          throw new YarnException(\"Null allocateRequest from requestInfo\");\n+        }\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n+              + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n+                  : request.getAskList().size()));\n+        }\n+\n+        request.setResponseId(lastResponseId);\n+        AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n+        if (response \u003d\u003d null) {\n+          throw new YarnException(\"Null allocateResponse from allocate\");\n+        }\n+\n+        lastResponseId \u003d response.getResponseId();\n+        // update token if RM has reissued/renewed\n+        if (response.getAMRMToken() !\u003d null) {\n+          LOG.debug(\"Received new AMRMToken\");\n+          YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n+              userUgi, conf);\n+        }\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n+              + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n+                  : response.getAllocatedContainers().size()));\n+        }\n+\n+        if (requestInfo.getCallback() \u003d\u003d null) {\n+          throw new YarnException(\"Null callback from requestInfo\");\n+        }\n+        requestInfo.getCallback().callback(response);\n+      } catch (InterruptedException ex) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Interrupted while waiting for queue\", ex);\n+        }\n+      } catch (Throwable ex) {\n+        LOG.warn(\n+            \"Error occurred while processing heart beat for \" + applicationId,\n+            ex);\n+      }\n+    }\n+\n+    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n+        applicationId);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void run() {\n    while (keepRunning) {\n      AsyncAllocateRequestInfo requestInfo;\n      try {\n        requestInfo \u003d requestQueue.take();\n        if (requestInfo \u003d\u003d null) {\n          throw new YarnException(\n              \"Null requestInfo taken from request queue\");\n        }\n        if (!keepRunning) {\n          break;\n        }\n\n        // change the response id before forwarding the allocate request as we\n        // could have different values for each UAM\n        AllocateRequest request \u003d requestInfo.getRequest();\n        if (request \u003d\u003d null) {\n          throw new YarnException(\"Null allocateRequest from requestInfo\");\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n              + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                  : request.getAskList().size()));\n        }\n\n        request.setResponseId(lastResponseId);\n        AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n        if (response \u003d\u003d null) {\n          throw new YarnException(\"Null allocateResponse from allocate\");\n        }\n\n        lastResponseId \u003d response.getResponseId();\n        // update token if RM has reissued/renewed\n        if (response.getAMRMToken() !\u003d null) {\n          LOG.debug(\"Received new AMRMToken\");\n          YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n              userUgi, conf);\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n              + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                  : response.getAllocatedContainers().size()));\n        }\n\n        if (requestInfo.getCallback() \u003d\u003d null) {\n          throw new YarnException(\"Null callback from requestInfo\");\n        }\n        requestInfo.getCallback().callback(response);\n      } catch (InterruptedException ex) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Interrupted while waiting for queue\", ex);\n        }\n      } catch (Throwable ex) {\n        LOG.warn(\n            \"Error occurred while processing heart beat for \" + applicationId,\n            ex);\n      }\n    }\n\n    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\",\n        applicationId);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMHeartbeatRequestHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7899. [AMRMProxy] Stateful FederationInterceptor for pending requests. Contributed by Botong Huang.\n",
      "commitDate": "09/07/18 12:27 PM",
      "commitName": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 27.16,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,66 @@\n     public void run() {\n       while (keepRunning) {\n         AsyncAllocateRequestInfo requestInfo;\n         try {\n           requestInfo \u003d requestQueue.take();\n           if (requestInfo \u003d\u003d null) {\n             throw new YarnException(\n                 \"Null requestInfo taken from request queue\");\n           }\n           if (!keepRunning) {\n             break;\n           }\n \n           // change the response id before forwarding the allocate request as we\n           // could have different values for each UAM\n           AllocateRequest request \u003d requestInfo.getRequest();\n           if (request \u003d\u003d null) {\n             throw new YarnException(\"Null allocateRequest from requestInfo\");\n           }\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n                 + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                     : request.getAskList().size()));\n           }\n \n           request.setResponseId(lastResponseId);\n-\n-          AllocateResponse response \u003d AMRMClientUtils.allocateWithReRegister(\n-              request, rmProxy, registerRequest, applicationId);\n-\n+          AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n           if (response \u003d\u003d null) {\n             throw new YarnException(\"Null allocateResponse from allocate\");\n           }\n \n           lastResponseId \u003d response.getResponseId();\n           // update token if RM has reissued/renewed\n           if (response.getAMRMToken() !\u003d null) {\n             LOG.debug(\"Received new AMRMToken\");\n             YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n                 userUgi, conf);\n           }\n \n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n                 + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                     : response.getAllocatedContainers().size()));\n           }\n \n           if (requestInfo.getCallback() \u003d\u003d null) {\n             throw new YarnException(\"Null callback from requestInfo\");\n           }\n           requestInfo.getCallback().callback(response);\n         } catch (InterruptedException ex) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Interrupted while waiting for queue\", ex);\n           }\n         } catch (IOException ex) {\n           LOG.warn(\"IO Error occurred while processing heart beat for \"\n               + applicationId, ex);\n         } catch (Throwable ex) {\n           LOG.warn(\n               \"Error occurred while processing heart beat for \" + applicationId,\n               ex);\n         }\n       }\n \n       LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n           + \"AMRequestHandlerThread thread is exiting\", applicationId);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (keepRunning) {\n        AsyncAllocateRequestInfo requestInfo;\n        try {\n          requestInfo \u003d requestQueue.take();\n          if (requestInfo \u003d\u003d null) {\n            throw new YarnException(\n                \"Null requestInfo taken from request queue\");\n          }\n          if (!keepRunning) {\n            break;\n          }\n\n          // change the response id before forwarding the allocate request as we\n          // could have different values for each UAM\n          AllocateRequest request \u003d requestInfo.getRequest();\n          if (request \u003d\u003d null) {\n            throw new YarnException(\"Null allocateRequest from requestInfo\");\n          }\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n                + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                    : request.getAskList().size()));\n          }\n\n          request.setResponseId(lastResponseId);\n          AllocateResponse response \u003d rmProxyRelayer.allocate(request);\n          if (response \u003d\u003d null) {\n            throw new YarnException(\"Null allocateResponse from allocate\");\n          }\n\n          lastResponseId \u003d response.getResponseId();\n          // update token if RM has reissued/renewed\n          if (response.getAMRMToken() !\u003d null) {\n            LOG.debug(\"Received new AMRMToken\");\n            YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n                userUgi, conf);\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n                + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                    : response.getAllocatedContainers().size()));\n          }\n\n          if (requestInfo.getCallback() \u003d\u003d null) {\n            throw new YarnException(\"Null callback from requestInfo\");\n          }\n          requestInfo.getCallback().callback(response);\n        } catch (InterruptedException ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Interrupted while waiting for queue\", ex);\n          }\n        } catch (IOException ex) {\n          LOG.warn(\"IO Error occurred while processing heart beat for \"\n              + applicationId, ex);\n        } catch (Throwable ex) {\n          LOG.warn(\n              \"Error occurred while processing heart beat for \" + applicationId,\n              ex);\n        }\n      }\n\n      LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n          + \"AMRequestHandlerThread thread is exiting\", applicationId);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "29/08/17 2:53 PM",
      "commitNameOld": "cc8893edc0b7960e958723c81062986c12f06ade",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 80.16,
      "commitsBetweenForRepo": 783,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n     public void run() {\n       while (keepRunning) {\n         AsyncAllocateRequestInfo requestInfo;\n         try {\n           requestInfo \u003d requestQueue.take();\n           if (requestInfo \u003d\u003d null) {\n             throw new YarnException(\n                 \"Null requestInfo taken from request queue\");\n           }\n           if (!keepRunning) {\n             break;\n           }\n \n           // change the response id before forwarding the allocate request as we\n           // could have different values for each UAM\n           AllocateRequest request \u003d requestInfo.getRequest();\n           if (request \u003d\u003d null) {\n             throw new YarnException(\"Null allocateRequest from requestInfo\");\n           }\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n                 + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                     : request.getAskList().size()));\n           }\n \n           request.setResponseId(lastResponseId);\n+\n           AllocateResponse response \u003d AMRMClientUtils.allocateWithReRegister(\n-              request, rmProxy, registerRequest, attemptId);\n+              request, rmProxy, registerRequest, applicationId);\n+\n           if (response \u003d\u003d null) {\n             throw new YarnException(\"Null allocateResponse from allocate\");\n           }\n \n           lastResponseId \u003d response.getResponseId();\n           // update token if RM has reissued/renewed\n           if (response.getAMRMToken() !\u003d null) {\n             LOG.debug(\"Received new AMRMToken\");\n             YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n                 userUgi, conf);\n           }\n \n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n                 + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                     : response.getAllocatedContainers().size()));\n           }\n \n           if (requestInfo.getCallback() \u003d\u003d null) {\n             throw new YarnException(\"Null callback from requestInfo\");\n           }\n           requestInfo.getCallback().callback(response);\n         } catch (InterruptedException ex) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Interrupted while waiting for queue\", ex);\n           }\n         } catch (IOException ex) {\n-          LOG.warn(\n-              \"IO Error occurred while processing heart beat for \" + attemptId,\n-              ex);\n+          LOG.warn(\"IO Error occurred while processing heart beat for \"\n+              + applicationId, ex);\n         } catch (Throwable ex) {\n           LOG.warn(\n-              \"Error occurred while processing heart beat for \" + attemptId,\n+              \"Error occurred while processing heart beat for \" + applicationId,\n               ex);\n         }\n       }\n \n       LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n-          + \"AMRequestHandlerThread thread is exiting\", attemptId);\n+          + \"AMRequestHandlerThread thread is exiting\", applicationId);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (keepRunning) {\n        AsyncAllocateRequestInfo requestInfo;\n        try {\n          requestInfo \u003d requestQueue.take();\n          if (requestInfo \u003d\u003d null) {\n            throw new YarnException(\n                \"Null requestInfo taken from request queue\");\n          }\n          if (!keepRunning) {\n            break;\n          }\n\n          // change the response id before forwarding the allocate request as we\n          // could have different values for each UAM\n          AllocateRequest request \u003d requestInfo.getRequest();\n          if (request \u003d\u003d null) {\n            throw new YarnException(\"Null allocateRequest from requestInfo\");\n          }\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n                + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                    : request.getAskList().size()));\n          }\n\n          request.setResponseId(lastResponseId);\n\n          AllocateResponse response \u003d AMRMClientUtils.allocateWithReRegister(\n              request, rmProxy, registerRequest, applicationId);\n\n          if (response \u003d\u003d null) {\n            throw new YarnException(\"Null allocateResponse from allocate\");\n          }\n\n          lastResponseId \u003d response.getResponseId();\n          // update token if RM has reissued/renewed\n          if (response.getAMRMToken() !\u003d null) {\n            LOG.debug(\"Received new AMRMToken\");\n            YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n                userUgi, conf);\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n                + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                    : response.getAllocatedContainers().size()));\n          }\n\n          if (requestInfo.getCallback() \u003d\u003d null) {\n            throw new YarnException(\"Null callback from requestInfo\");\n          }\n          requestInfo.getCallback().callback(response);\n        } catch (InterruptedException ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Interrupted while waiting for queue\", ex);\n          }\n        } catch (IOException ex) {\n          LOG.warn(\"IO Error occurred while processing heart beat for \"\n              + applicationId, ex);\n        } catch (Throwable ex) {\n          LOG.warn(\n              \"Error occurred while processing heart beat for \" + applicationId,\n              ex);\n        }\n      }\n\n      LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n          + \"AMRequestHandlerThread thread is exiting\", applicationId);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "859aa1f9d621d07693825e610bdc0149f7a2770a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,68 @@\n+    public void run() {\n+      while (keepRunning) {\n+        AsyncAllocateRequestInfo requestInfo;\n+        try {\n+          requestInfo \u003d requestQueue.take();\n+          if (requestInfo \u003d\u003d null) {\n+            throw new YarnException(\n+                \"Null requestInfo taken from request queue\");\n+          }\n+          if (!keepRunning) {\n+            break;\n+          }\n+\n+          // change the response id before forwarding the allocate request as we\n+          // could have different values for each UAM\n+          AllocateRequest request \u003d requestInfo.getRequest();\n+          if (request \u003d\u003d null) {\n+            throw new YarnException(\"Null allocateRequest from requestInfo\");\n+          }\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n+                + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n+                    : request.getAskList().size()));\n+          }\n+\n+          request.setResponseId(lastResponseId);\n+          AllocateResponse response \u003d AMRMClientUtils.allocateWithReRegister(\n+              request, rmProxy, registerRequest, attemptId);\n+          if (response \u003d\u003d null) {\n+            throw new YarnException(\"Null allocateResponse from allocate\");\n+          }\n+\n+          lastResponseId \u003d response.getResponseId();\n+          // update token if RM has reissued/renewed\n+          if (response.getAMRMToken() !\u003d null) {\n+            LOG.debug(\"Received new AMRMToken\");\n+            YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n+                userUgi, conf);\n+          }\n+\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n+                + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n+                    : response.getAllocatedContainers().size()));\n+          }\n+\n+          if (requestInfo.getCallback() \u003d\u003d null) {\n+            throw new YarnException(\"Null callback from requestInfo\");\n+          }\n+          requestInfo.getCallback().callback(response);\n+        } catch (InterruptedException ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Interrupted while waiting for queue\", ex);\n+          }\n+        } catch (IOException ex) {\n+          LOG.warn(\n+              \"IO Error occurred while processing heart beat for \" + attemptId,\n+              ex);\n+        } catch (Throwable ex) {\n+          LOG.warn(\n+              \"Error occurred while processing heart beat for \" + attemptId,\n+              ex);\n+        }\n+      }\n+\n+      LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n+          + \"AMRequestHandlerThread thread is exiting\", attemptId);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (keepRunning) {\n        AsyncAllocateRequestInfo requestInfo;\n        try {\n          requestInfo \u003d requestQueue.take();\n          if (requestInfo \u003d\u003d null) {\n            throw new YarnException(\n                \"Null requestInfo taken from request queue\");\n          }\n          if (!keepRunning) {\n            break;\n          }\n\n          // change the response id before forwarding the allocate request as we\n          // could have different values for each UAM\n          AllocateRequest request \u003d requestInfo.getRequest();\n          if (request \u003d\u003d null) {\n            throw new YarnException(\"Null allocateRequest from requestInfo\");\n          }\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending Heartbeat to Unmanaged AM. AskList:\"\n                + ((request.getAskList() \u003d\u003d null) ? \" empty\"\n                    : request.getAskList().size()));\n          }\n\n          request.setResponseId(lastResponseId);\n          AllocateResponse response \u003d AMRMClientUtils.allocateWithReRegister(\n              request, rmProxy, registerRequest, attemptId);\n          if (response \u003d\u003d null) {\n            throw new YarnException(\"Null allocateResponse from allocate\");\n          }\n\n          lastResponseId \u003d response.getResponseId();\n          // update token if RM has reissued/renewed\n          if (response.getAMRMToken() !\u003d null) {\n            LOG.debug(\"Received new AMRMToken\");\n            YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(),\n                userUgi, conf);\n          }\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:\"\n                + ((response.getAllocatedContainers() \u003d\u003d null) ? \" empty\"\n                    : response.getAllocatedContainers().size()));\n          }\n\n          if (requestInfo.getCallback() \u003d\u003d null) {\n            throw new YarnException(\"Null callback from requestInfo\");\n          }\n          requestInfo.getCallback().callback(response);\n        } catch (InterruptedException ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Interrupted while waiting for queue\", ex);\n          }\n        } catch (IOException ex) {\n          LOG.warn(\n              \"IO Error occurred while processing heart beat for \" + attemptId,\n              ex);\n        } catch (Throwable ex) {\n          LOG.warn(\n              \"Error occurred while processing heart beat for \" + attemptId,\n              ex);\n        }\n      }\n\n      LOG.info(\"UnmanagedApplicationManager has been stopped for {}. \"\n          + \"AMRequestHandlerThread thread is exiting\", attemptId);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java"
    }
  }
}