{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AUtils.java",
  "functionName": "getEncryptionAlgorithm",
  "functionId": "getEncryptionAlgorithm___bucket-String__conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
  "functionStartLine": 1577,
  "functionEndLine": 1611,
  "numCommitsSeen": 80,
  "timeTaken": 4596,
  "changeHistory": [
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "87f63b6479330840e9d708a729355948bb91fd4d",
    "7ac88244c54ce483729af3d2736d9f4731e230ca",
    "667966c13c1e09077c2e2088bd66c9d7851dd14e"
  ],
  "changeHistoryShort": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ymultichange(Ymodifierchange,Ybodychange)",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ymultichange(Ymodifierchange,Ybodychange)",
    "87f63b6479330840e9d708a729355948bb91fd4d": "Ybodychange",
    "7ac88244c54ce483729af3d2736d9f4731e230ca": "Ymultichange(Yparameterchange,Ybodychange)",
    "667966c13c1e09077c2e2088bd66c9d7851dd14e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n             SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n+      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n-    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n             SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n+      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n-    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n             SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n-      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n+    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n             SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n-      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n+    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n             SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n+      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n-    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n             SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n+      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n-    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      LOG.debug(\"Using SSE-C with {}\", diagnostics);\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "87f63b6479330840e9d708a729355948bb91fd4d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14833. Remove s3a user:secret authentication. Contributed by Steve Loughran\n",
      "commitDate": "11/09/18 5:18 PM",
      "commitName": "87f63b6479330840e9d708a729355948bb91fd4d",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "08/08/18 10:57 PM",
      "commitNameOld": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 33.76,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n       Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n         lookupPassword(bucket, conf,\n-            SERVER_SIDE_ENCRYPTION_ALGORITHM, null));\n+            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n     String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n     LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n    return sse;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "7ac88244c54ce483729af3d2736d9f4731e230ca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
      "commitDate": "16/02/18 8:37 AM",
      "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
          "commitDate": "16/02/18 8:37 AM",
          "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "15/02/18 7:57 AM",
          "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.03,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n-  static S3AEncryptionMethods getEncryptionAlgorithm(Configuration conf)\n-      throws IOException {\n+  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+      Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n-        conf.getTrimmed(SERVER_SIDE_ENCRYPTION_ALGORITHM));\n-    String sseKey \u003d getServerSideEncryptionKey(conf);\n+        lookupPassword(bucket, conf,\n+            SERVER_SIDE_ENCRYPTION_ALGORITHM, null));\n+    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n     LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM, null));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[bucket-String, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
          "commitDate": "16/02/18 8:37 AM",
          "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "15/02/18 7:57 AM",
          "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.03,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n-  static S3AEncryptionMethods getEncryptionAlgorithm(Configuration conf)\n-      throws IOException {\n+  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n+      Configuration conf) throws IOException {\n     S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n-        conf.getTrimmed(SERVER_SIDE_ENCRYPTION_ALGORITHM));\n-    String sseKey \u003d getServerSideEncryptionKey(conf);\n+        lookupPassword(bucket, conf,\n+            SERVER_SIDE_ENCRYPTION_ALGORITHM, null));\n+    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n     int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n     String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n     switch (sse) {\n     case SSE_C:\n       if (sseKeyLen \u003d\u003d 0) {\n         throw new IOException(SSE_C_NO_KEY_ERROR);\n       }\n       break;\n \n     case SSE_S3:\n       if (sseKeyLen !\u003d 0) {\n         throw new IOException(SSE_S3_WITH_KEY_ERROR\n             + \" (\" + diagnostics + \")\");\n       }\n       break;\n \n     case SSE_KMS:\n       LOG.debug(\"Using SSE-KMS with {}\",\n           diagnostics);\n       break;\n \n     case NONE:\n     default:\n       LOG.debug(\"Data is unencrypted\");\n       break;\n     }\n     LOG.debug(\"Using SSE-C with {}\", diagnostics);\n     return sse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,\n      Configuration conf) throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        lookupPassword(bucket, conf,\n            SERVER_SIDE_ENCRYPTION_ALGORITHM, null));\n    String sseKey \u003d getServerSideEncryptionKey(bucket, conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n    return sse;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "667966c13c1e09077c2e2088bd66c9d7851dd14e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14324. Refine S3 server-side-encryption key as encryption secret; improve error reporting and diagnostics. Contributed by Steve Loughran\n",
      "commitDate": "20/04/17 5:13 PM",
      "commitName": "667966c13c1e09077c2e2088bd66c9d7851dd14e",
      "commitAuthor": "Mingliang Liu",
      "diff": "@@ -0,0 +1,34 @@\n+  static S3AEncryptionMethods getEncryptionAlgorithm(Configuration conf)\n+      throws IOException {\n+    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n+        conf.getTrimmed(SERVER_SIDE_ENCRYPTION_ALGORITHM));\n+    String sseKey \u003d getServerSideEncryptionKey(conf);\n+    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n+    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n+    switch (sse) {\n+    case SSE_C:\n+      if (sseKeyLen \u003d\u003d 0) {\n+        throw new IOException(SSE_C_NO_KEY_ERROR);\n+      }\n+      break;\n+\n+    case SSE_S3:\n+      if (sseKeyLen !\u003d 0) {\n+        throw new IOException(SSE_S3_WITH_KEY_ERROR\n+            + \" (\" + diagnostics + \")\");\n+      }\n+      break;\n+\n+    case SSE_KMS:\n+      LOG.debug(\"Using SSE-KMS with {}\",\n+          diagnostics);\n+      break;\n+\n+    case NONE:\n+    default:\n+      LOG.debug(\"Data is unencrypted\");\n+      break;\n+    }\n+    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n+    return sse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static S3AEncryptionMethods getEncryptionAlgorithm(Configuration conf)\n      throws IOException {\n    S3AEncryptionMethods sse \u003d S3AEncryptionMethods.getMethod(\n        conf.getTrimmed(SERVER_SIDE_ENCRYPTION_ALGORITHM));\n    String sseKey \u003d getServerSideEncryptionKey(conf);\n    int sseKeyLen \u003d StringUtils.isBlank(sseKey) ? 0 : sseKey.length();\n    String diagnostics \u003d passwordDiagnostics(sseKey, \"key\");\n    switch (sse) {\n    case SSE_C:\n      if (sseKeyLen \u003d\u003d 0) {\n        throw new IOException(SSE_C_NO_KEY_ERROR);\n      }\n      break;\n\n    case SSE_S3:\n      if (sseKeyLen !\u003d 0) {\n        throw new IOException(SSE_S3_WITH_KEY_ERROR\n            + \" (\" + diagnostics + \")\");\n      }\n      break;\n\n    case SSE_KMS:\n      LOG.debug(\"Using SSE-KMS with {}\",\n          diagnostics);\n      break;\n\n    case NONE:\n    default:\n      LOG.debug(\"Data is unencrypted\");\n      break;\n    }\n    LOG.debug(\"Using SSE-C with {}\", diagnostics);\n    return sse;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java"
    }
  }
}