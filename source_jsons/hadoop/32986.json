{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationService.java",
  "functionName": "stopContainer",
  "functionId": "stopContainer___containerId-ContainerId__containerType-ContainerType__exitCode-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
  "functionStartLine": 323,
  "functionEndLine": 337,
  "numCommitsSeen": 87,
  "timeTaken": 9198,
  "changeHistory": [
    "e864f81471407a384395fefe1ceb3b66fc7f87f2",
    "8ed0d4b744e5321c9f0f7f19a6c9737bb2da2ef6",
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "e9aa5aac6805c7e40e3fd0a0e0a046fbbb4f94d2",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e864f81471407a384395fefe1ceb3b66fc7f87f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "8ed0d4b744e5321c9f0f7f19a6c9737bb2da2ef6": "Ybodychange",
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "e9aa5aac6805c7e40e3fd0a0e0a046fbbb4f94d2": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ymultichange(Yparameterchange,Ybodychange)",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e864f81471407a384395fefe1ceb3b66fc7f87f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7087. NM failed to perform log aggregation due to absent container. Contributed by Jason Lowe.\n",
      "commitDate": "25/08/17 1:37 PM",
      "commitName": "e864f81471407a384395fefe1ceb3b66fc7f87f2",
      "commitAuthor": "Eric Payne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7087. NM failed to perform log aggregation due to absent container. Contributed by Jason Lowe.\n",
          "commitDate": "25/08/17 1:37 PM",
          "commitName": "e864f81471407a384395fefe1ceb3b66fc7f87f2",
          "commitAuthor": "Eric Payne",
          "commitDateOld": "24/08/17 1:36 PM",
          "commitNameOld": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 1.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,15 @@\n-  private void stopContainer(ContainerId containerId, int exitCode) {\n+  private void stopContainer(ContainerId containerId,\n+      ContainerType containerType, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n     AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n         containerId.getApplicationAttemptId().getApplicationId());\n     if (aggregator \u003d\u003d null) {\n       LOG.warn(\"Log aggregation is not initialized for \" + containerId\n           + \", did it fail to start?\");\n       return;\n     }\n-    Container container \u003d context.getContainers().get(containerId);\n-    if (null \u003d\u003d container) {\n-      LOG.warn(\"Log aggregation cannot be started for \" + containerId\n-          + \", as its an absent container\");\n-      return;\n-    }\n-    ContainerType containerType \u003d\n-        container.getContainerTokenIdentifier().getContainerType();\n     aggregator.startContainerLogAggregation(\n         new ContainerLogContext(containerId, containerType, exitCode));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainer(ContainerId containerId,\n      ContainerType containerType, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId());\n    if (aggregator \u003d\u003d null) {\n      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n          + \", did it fail to start?\");\n      return;\n    }\n    aggregator.startContainerLogAggregation(\n        new ContainerLogContext(containerId, containerType, exitCode));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, exitCode-int]",
            "newValue": "[containerId-ContainerId, containerType-ContainerType, exitCode-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7087. NM failed to perform log aggregation due to absent container. Contributed by Jason Lowe.\n",
          "commitDate": "25/08/17 1:37 PM",
          "commitName": "e864f81471407a384395fefe1ceb3b66fc7f87f2",
          "commitAuthor": "Eric Payne",
          "commitDateOld": "24/08/17 1:36 PM",
          "commitNameOld": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 1.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,15 @@\n-  private void stopContainer(ContainerId containerId, int exitCode) {\n+  private void stopContainer(ContainerId containerId,\n+      ContainerType containerType, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n     AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n         containerId.getApplicationAttemptId().getApplicationId());\n     if (aggregator \u003d\u003d null) {\n       LOG.warn(\"Log aggregation is not initialized for \" + containerId\n           + \", did it fail to start?\");\n       return;\n     }\n-    Container container \u003d context.getContainers().get(containerId);\n-    if (null \u003d\u003d container) {\n-      LOG.warn(\"Log aggregation cannot be started for \" + containerId\n-          + \", as its an absent container\");\n-      return;\n-    }\n-    ContainerType containerType \u003d\n-        container.getContainerTokenIdentifier().getContainerType();\n     aggregator.startContainerLogAggregation(\n         new ContainerLogContext(containerId, containerType, exitCode));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainer(ContainerId containerId,\n      ContainerType containerType, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId());\n    if (aggregator \u003d\u003d null) {\n      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n          + \", did it fail to start?\");\n      return;\n    }\n    aggregator.startContainerLogAggregation(\n        new ContainerLogContext(containerId, containerType, exitCode));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "8ed0d4b744e5321c9f0f7f19a6c9737bb2da2ef6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4152. NodeManager crash with NPE when LogAggregationService#stopContainer called for absent container. (Bibin A Chundatt via rohithsharmaks)\n",
      "commitDate": "23/09/15 10:54 PM",
      "commitName": "8ed0d4b744e5321c9f0f7f19a6c9737bb2da2ef6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "08/09/15 12:29 PM",
      "commitNameOld": "16b9037dc1300b8bdbe54ba7cd47c53fe16e93d8",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 15.43,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,23 @@\n   private void stopContainer(ContainerId containerId, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n \n     AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n         containerId.getApplicationAttemptId().getApplicationId());\n     if (aggregator \u003d\u003d null) {\n       LOG.warn(\"Log aggregation is not initialized for \" + containerId\n           + \", did it fail to start?\");\n       return;\n     }\n-    ContainerType containerType \u003d context.getContainers().get(\n-        containerId).getContainerTokenIdentifier().getContainerType();\n+    Container container \u003d context.getContainers().get(containerId);\n+    if (null \u003d\u003d container) {\n+      LOG.warn(\"Log aggregation cannot be started for \" + containerId\n+          + \", as its an absent container\");\n+      return;\n+    }\n+    ContainerType containerType \u003d\n+        container.getContainerTokenIdentifier().getContainerType();\n     aggregator.startContainerLogAggregation(\n         new ContainerLogContext(containerId, containerType, exitCode));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainer(ContainerId containerId, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId());\n    if (aggregator \u003d\u003d null) {\n      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n          + \", did it fail to start?\");\n      return;\n    }\n    Container container \u003d context.getContainers().get(containerId);\n    if (null \u003d\u003d container) {\n      LOG.warn(\"Log aggregation cannot be started for \" + containerId\n          + \", as its an absent container\");\n      return;\n    }\n    ContainerType containerType \u003d\n        container.getContainerTokenIdentifier().getContainerType();\n    aggregator.startContainerLogAggregation(\n        new ContainerLogContext(containerId, containerType, exitCode));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
      "commitDate": "22/08/15 4:25 PM",
      "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
      "commitAuthor": "Xuan",
      "commitDateOld": "08/05/15 3:10 PM",
      "commitNameOld": "088156de43abb07bec590a3fcd1a5af2feb02cd2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 106.05,
      "commitsBetweenForRepo": 708,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,17 @@\n   private void stopContainer(ContainerId containerId, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n \n     AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n         containerId.getApplicationAttemptId().getApplicationId());\n     if (aggregator \u003d\u003d null) {\n       LOG.warn(\"Log aggregation is not initialized for \" + containerId\n           + \", did it fail to start?\");\n       return;\n     }\n-    aggregator.startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n+    ContainerType containerType \u003d context.getContainers().get(\n+        containerId).getContainerTokenIdentifier().getContainerType();\n+    aggregator.startContainerLogAggregation(\n+        new ContainerLogContext(containerId, containerType, exitCode));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainer(ContainerId containerId, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId());\n    if (aggregator \u003d\u003d null) {\n      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n          + \", did it fail to start?\");\n      return;\n    }\n    ContainerType containerType \u003d context.getContainers().get(\n        containerId).getContainerTokenIdentifier().getContainerType();\n    aggregator.startContainerLogAggregation(\n        new ContainerLogContext(containerId, containerType, exitCode));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void stopContainer(ContainerId containerId, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId());\n    if (aggregator \u003d\u003d null) {\n      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n          + \", did it fail to start?\");\n      return;\n    }\n    aggregator.startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "e9aa5aac6805c7e40e3fd0a0e0a046fbbb4f94d2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4448. Fix NM crash during app cleanup if aggregation didn\u0027t init. (Jason Lowe via daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362618 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/12 12:32 PM",
      "commitName": "e9aa5aac6805c7e40e3fd0a0e0a046fbbb4f94d2",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "01/06/12 2:54 PM",
      "commitNameOld": "1cf60106758c482991f08caa136446885d5f8f27",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 45.9,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   private void stopContainer(ContainerId containerId, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n \n-    if (!this.appLogAggregators.containsKey(\n-        containerId.getApplicationAttemptId().getApplicationId())) {\n-      throw new YarnException(\"Application is not initialized yet for \"\n-          + containerId);\n+    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n+        containerId.getApplicationAttemptId().getApplicationId());\n+    if (aggregator \u003d\u003d null) {\n+      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n+          + \", did it fail to start?\");\n+      return;\n     }\n-    this.appLogAggregators.get(\n-        containerId.getApplicationAttemptId().getApplicationId())\n-        .startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n+    aggregator.startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainer(ContainerId containerId, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    AppLogAggregator aggregator \u003d this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId());\n    if (aggregator \u003d\u003d null) {\n      LOG.warn(\"Log aggregation is not initialized for \" + containerId\n          + \", did it fail to start?\");\n      return;\n    }\n    aggregator.startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/10/11 11:45 PM",
          "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/10/11 12:27 PM",
          "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private void stopContainer(ContainerId containerId, String exitCode) {\n+  private void stopContainer(ContainerId containerId, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n \n     if (!this.appLogAggregators.containsKey(\n         containerId.getApplicationAttemptId().getApplicationId())) {\n       throw new YarnException(\"Application is not initialized yet for \"\n           + containerId);\n     }\n     this.appLogAggregators.get(\n         containerId.getApplicationAttemptId().getApplicationId())\n-        .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n+        .startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainer(ContainerId containerId, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    if (!this.appLogAggregators.containsKey(\n        containerId.getApplicationAttemptId().getApplicationId())) {\n      throw new YarnException(\"Application is not initialized yet for \"\n          + containerId);\n    }\n    this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId())\n        .startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, exitCode-String]",
            "newValue": "[containerId-ContainerId, exitCode-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/10/11 11:45 PM",
          "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/10/11 12:27 PM",
          "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private void stopContainer(ContainerId containerId, String exitCode) {\n+  private void stopContainer(ContainerId containerId, int exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n \n     if (!this.appLogAggregators.containsKey(\n         containerId.getApplicationAttemptId().getApplicationId())) {\n       throw new YarnException(\"Application is not initialized yet for \"\n           + containerId);\n     }\n     this.appLogAggregators.get(\n         containerId.getApplicationAttemptId().getApplicationId())\n-        .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n+        .startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainer(ContainerId containerId, int exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    if (!this.appLogAggregators.containsKey(\n        containerId.getApplicationAttemptId().getApplicationId())) {\n      throw new YarnException(\"Application is not initialized yet for \"\n          + containerId);\n    }\n    this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId())\n        .startContainerLogAggregation(containerId, exitCode \u003d\u003d 0);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   private void stopContainer(ContainerId containerId, String exitCode) {\n \n     // A container is complete. Put this containers\u0027 logs up for aggregation if\n     // this containers\u0027 logs are needed.\n \n-    if (!this.appLogAggregators.containsKey(containerId.getAppId())) {\n+    if (!this.appLogAggregators.containsKey(\n+        containerId.getApplicationAttemptId().getApplicationId())) {\n       throw new YarnException(\"Application is not initialized yet for \"\n           + containerId);\n     }\n-    this.appLogAggregators.get(containerId.getAppId())\n+    this.appLogAggregators.get(\n+        containerId.getApplicationAttemptId().getApplicationId())\n         .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainer(ContainerId containerId, String exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    if (!this.appLogAggregators.containsKey(\n        containerId.getApplicationAttemptId().getApplicationId())) {\n      throw new YarnException(\"Application is not initialized yet for \"\n          + containerId);\n    }\n    this.appLogAggregators.get(\n        containerId.getApplicationAttemptId().getApplicationId())\n        .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void stopContainer(ContainerId containerId, String exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    if (!this.appLogAggregators.containsKey(containerId.getAppId())) {\n      throw new YarnException(\"Application is not initialized yet for \"\n          + containerId);\n    }\n    this.appLogAggregators.get(containerId.getAppId())\n        .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,12 @@\n+  private void stopContainer(ContainerId containerId, String exitCode) {\n+\n+    // A container is complete. Put this containers\u0027 logs up for aggregation if\n+    // this containers\u0027 logs are needed.\n+\n+    if (!this.appLogAggregators.containsKey(containerId.getAppId())) {\n+      throw new YarnException(\"Application is not initialized yet for \"\n+          + containerId);\n+    }\n+    this.appLogAggregators.get(containerId.getAppId())\n+        .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainer(ContainerId containerId, String exitCode) {\n\n    // A container is complete. Put this containers\u0027 logs up for aggregation if\n    // this containers\u0027 logs are needed.\n\n    if (!this.appLogAggregators.containsKey(containerId.getAppId())) {\n      throw new YarnException(\"Application is not initialized yet for \"\n          + containerId);\n    }\n    this.appLogAggregators.get(containerId.getAppId())\n        .startContainerLogAggregation(containerId, exitCode.equals(\"0\"));\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}