{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsCpuResourceHandlerImpl.java",
  "functionName": "bootstrap",
  "functionId": "bootstrap___plugin-ResourceCalculatorPlugin__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
  "functionStartLine": 92,
  "functionEndLine": 127,
  "numCommitsSeen": 6,
  "timeTaken": 1181,
  "changeHistory": [
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4"
  ],
  "changeHistoryShort": {
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": "Ybodychange",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "11/01/17 4:00 PM",
      "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "25/01/16 4:19 PM",
      "commitNameOld": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 351.99,
      "commitsBetweenForRepo": 2447,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   List\u003cPrivilegedOperation\u003e bootstrap(\n       ResourceCalculatorPlugin plugin, Configuration conf)\n       throws ResourceHandlerException {\n     this.strictResourceUsageMode \u003d conf.getBoolean(\n         YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,\n         YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n-    this.cGroupsHandler.mountCGroupController(CPU);\n+    this.cGroupsHandler.initializeCGroupController(CPU);\n     nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n \n     // cap overall usage to the number of cores allocated to YARN\n     yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n     int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n     boolean existingCpuLimits;\n     try {\n       existingCpuLimits \u003d\n           cpuLimitsExist(cGroupsHandler.getPathForCGroup(CPU, \"\"));\n     } catch (IOException ie) {\n       throw new ResourceHandlerException(ie);\n     }\n     if (systemProcessors !\u003d (int) yarnProcessors) {\n       LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n       int[] limits \u003d getOverallLimits(yarnProcessors);\n       cGroupsHandler\n           .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US,\n               String.valueOf(limits[0]));\n       cGroupsHandler\n           .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n               String.valueOf(limits[1]));\n     } else if (existingCpuLimits) {\n       LOG.info(\"Removing CPU constraints for YARN containers.\");\n       cGroupsHandler\n           .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n               String.valueOf(-1));\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cPrivilegedOperation\u003e bootstrap(\n      ResourceCalculatorPlugin plugin, Configuration conf)\n      throws ResourceHandlerException {\n    this.strictResourceUsageMode \u003d conf.getBoolean(\n        YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,\n        YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n    this.cGroupsHandler.initializeCGroupController(CPU);\n    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n\n    // cap overall usage to the number of cores allocated to YARN\n    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n    boolean existingCpuLimits;\n    try {\n      existingCpuLimits \u003d\n          cpuLimitsExist(cGroupsHandler.getPathForCGroup(CPU, \"\"));\n    } catch (IOException ie) {\n      throw new ResourceHandlerException(ie);\n    }\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      cGroupsHandler\n          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US,\n              String.valueOf(limits[0]));\n      cGroupsHandler\n          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n              String.valueOf(limits[1]));\n    } else if (existingCpuLimits) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      cGroupsHandler\n          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n              String.valueOf(-1));\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3542. Refactored existing CPU cgroups support to use the newer and integrated ResourceHandler mechanism, and also deprecated the old LCEResourceHandler inteface hierarchy. Contributed by Varun Vasudev.\n",
      "commitDate": "25/01/16 4:19 PM",
      "commitName": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "diff": "@@ -0,0 +1,36 @@\n+  List\u003cPrivilegedOperation\u003e bootstrap(\n+      ResourceCalculatorPlugin plugin, Configuration conf)\n+      throws ResourceHandlerException {\n+    this.strictResourceUsageMode \u003d conf.getBoolean(\n+        YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,\n+        YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n+    this.cGroupsHandler.mountCGroupController(CPU);\n+    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n+\n+    // cap overall usage to the number of cores allocated to YARN\n+    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n+    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n+    boolean existingCpuLimits;\n+    try {\n+      existingCpuLimits \u003d\n+          cpuLimitsExist(cGroupsHandler.getPathForCGroup(CPU, \"\"));\n+    } catch (IOException ie) {\n+      throw new ResourceHandlerException(ie);\n+    }\n+    if (systemProcessors !\u003d (int) yarnProcessors) {\n+      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n+      int[] limits \u003d getOverallLimits(yarnProcessors);\n+      cGroupsHandler\n+          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US,\n+              String.valueOf(limits[0]));\n+      cGroupsHandler\n+          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n+              String.valueOf(limits[1]));\n+    } else if (existingCpuLimits) {\n+      LOG.info(\"Removing CPU constraints for YARN containers.\");\n+      cGroupsHandler\n+          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n+              String.valueOf(-1));\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cPrivilegedOperation\u003e bootstrap(\n      ResourceCalculatorPlugin plugin, Configuration conf)\n      throws ResourceHandlerException {\n    this.strictResourceUsageMode \u003d conf.getBoolean(\n        YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,\n        YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n    this.cGroupsHandler.mountCGroupController(CPU);\n    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n\n    // cap overall usage to the number of cores allocated to YARN\n    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n    boolean existingCpuLimits;\n    try {\n      existingCpuLimits \u003d\n          cpuLimitsExist(cGroupsHandler.getPathForCGroup(CPU, \"\"));\n    } catch (IOException ie) {\n      throw new ResourceHandlerException(ie);\n    }\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      cGroupsHandler\n          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US,\n              String.valueOf(limits[0]));\n      cGroupsHandler\n          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n              String.valueOf(limits[1]));\n    } else if (existingCpuLimits) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      cGroupsHandler\n          .updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US,\n              String.valueOf(-1));\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java"
    }
  }
}