{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TotalOrderPartitioner.java",
  "functionName": "buildTrieRec",
  "functionId": "buildTrieRec___splits-BinaryComparable[]__lower-int__upper-int__prefix-byte[]__maxDepth-int__ref-CarriedTrieNodeRef",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java",
  "functionStartLine": 374,
  "functionEndLine": 412,
  "numCommitsSeen": 7,
  "timeTaken": 4178,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private TrieNode buildTrieRec(BinaryComparable[] splits, int lower,\n      int upper, byte[] prefix, int maxDepth, CarriedTrieNodeRef ref) {\n    final int depth \u003d prefix.length;\n    // We generate leaves for a single split point as well as for \n    // no split points.\n    if (depth \u003e\u003d maxDepth || lower \u003e\u003d upper - 1) {\n        // If we have two consecutive requests for an unsplit trie node, we\n        // can deliver the same one the second time.\n        if (lower \u003d\u003d upper \u0026\u0026 ref.content !\u003d null) {\n            return ref.content;\n        }\n        TrieNode  result \u003d LeafTrieNodeFactory(depth, splits, lower, upper);\n        ref.content \u003d lower \u003d\u003d upper ? result : null;\n        return result;\n    }\n    InnerTrieNode result \u003d new InnerTrieNode(depth);\n    byte[] trial \u003d Arrays.copyOf(prefix, prefix.length + 1);\n    // append an extra byte on to the prefix\n    int         currentBound \u003d lower;\n    for(int ch \u003d 0; ch \u003c 0xFF; ++ch) {\n      trial[depth] \u003d (byte) (ch + 1);\n      lower \u003d currentBound;\n      while (currentBound \u003c upper) {\n        if (splits[currentBound].compareTo(trial, 0, trial.length) \u003e\u003d 0) {\n          break;\n        }\n        currentBound +\u003d 1;\n      }\n      trial[depth] \u003d (byte) ch;\n      result.child[0xFF \u0026 ch]\n                   \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n    }\n    // pick up the rest\n    trial[depth] \u003d (byte)0xFF;\n    result.child[0xFF] \n                 \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n    \n    return result;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private TrieNode buildTrieRec(BinaryComparable[] splits, int lower,\n      int upper, byte[] prefix, int maxDepth, CarriedTrieNodeRef ref) {\n    final int depth \u003d prefix.length;\n    // We generate leaves for a single split point as well as for \n    // no split points.\n    if (depth \u003e\u003d maxDepth || lower \u003e\u003d upper - 1) {\n        // If we have two consecutive requests for an unsplit trie node, we\n        // can deliver the same one the second time.\n        if (lower \u003d\u003d upper \u0026\u0026 ref.content !\u003d null) {\n            return ref.content;\n        }\n        TrieNode  result \u003d LeafTrieNodeFactory(depth, splits, lower, upper);\n        ref.content \u003d lower \u003d\u003d upper ? result : null;\n        return result;\n    }\n    InnerTrieNode result \u003d new InnerTrieNode(depth);\n    byte[] trial \u003d Arrays.copyOf(prefix, prefix.length + 1);\n    // append an extra byte on to the prefix\n    int         currentBound \u003d lower;\n    for(int ch \u003d 0; ch \u003c 0xFF; ++ch) {\n      trial[depth] \u003d (byte) (ch + 1);\n      lower \u003d currentBound;\n      while (currentBound \u003c upper) {\n        if (splits[currentBound].compareTo(trial, 0, trial.length) \u003e\u003d 0) {\n          break;\n        }\n        currentBound +\u003d 1;\n      }\n      trial[depth] \u003d (byte) ch;\n      result.child[0xFF \u0026 ch]\n                   \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n    }\n    // pick up the rest\n    trial[depth] \u003d (byte)0xFF;\n    result.child[0xFF] \n                 \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n    \n    return result;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,39 @@\n+  private TrieNode buildTrieRec(BinaryComparable[] splits, int lower,\n+      int upper, byte[] prefix, int maxDepth, CarriedTrieNodeRef ref) {\n+    final int depth \u003d prefix.length;\n+    // We generate leaves for a single split point as well as for \n+    // no split points.\n+    if (depth \u003e\u003d maxDepth || lower \u003e\u003d upper - 1) {\n+        // If we have two consecutive requests for an unsplit trie node, we\n+        // can deliver the same one the second time.\n+        if (lower \u003d\u003d upper \u0026\u0026 ref.content !\u003d null) {\n+            return ref.content;\n+        }\n+        TrieNode  result \u003d LeafTrieNodeFactory(depth, splits, lower, upper);\n+        ref.content \u003d lower \u003d\u003d upper ? result : null;\n+        return result;\n+    }\n+    InnerTrieNode result \u003d new InnerTrieNode(depth);\n+    byte[] trial \u003d Arrays.copyOf(prefix, prefix.length + 1);\n+    // append an extra byte on to the prefix\n+    int         currentBound \u003d lower;\n+    for(int ch \u003d 0; ch \u003c 0xFF; ++ch) {\n+      trial[depth] \u003d (byte) (ch + 1);\n+      lower \u003d currentBound;\n+      while (currentBound \u003c upper) {\n+        if (splits[currentBound].compareTo(trial, 0, trial.length) \u003e\u003d 0) {\n+          break;\n+        }\n+        currentBound +\u003d 1;\n+      }\n+      trial[depth] \u003d (byte) ch;\n+      result.child[0xFF \u0026 ch]\n+                   \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n+    }\n+    // pick up the rest\n+    trial[depth] \u003d (byte)0xFF;\n+    result.child[0xFF] \n+                 \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n+    \n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private TrieNode buildTrieRec(BinaryComparable[] splits, int lower,\n      int upper, byte[] prefix, int maxDepth, CarriedTrieNodeRef ref) {\n    final int depth \u003d prefix.length;\n    // We generate leaves for a single split point as well as for \n    // no split points.\n    if (depth \u003e\u003d maxDepth || lower \u003e\u003d upper - 1) {\n        // If we have two consecutive requests for an unsplit trie node, we\n        // can deliver the same one the second time.\n        if (lower \u003d\u003d upper \u0026\u0026 ref.content !\u003d null) {\n            return ref.content;\n        }\n        TrieNode  result \u003d LeafTrieNodeFactory(depth, splits, lower, upper);\n        ref.content \u003d lower \u003d\u003d upper ? result : null;\n        return result;\n    }\n    InnerTrieNode result \u003d new InnerTrieNode(depth);\n    byte[] trial \u003d Arrays.copyOf(prefix, prefix.length + 1);\n    // append an extra byte on to the prefix\n    int         currentBound \u003d lower;\n    for(int ch \u003d 0; ch \u003c 0xFF; ++ch) {\n      trial[depth] \u003d (byte) (ch + 1);\n      lower \u003d currentBound;\n      while (currentBound \u003c upper) {\n        if (splits[currentBound].compareTo(trial, 0, trial.length) \u003e\u003d 0) {\n          break;\n        }\n        currentBound +\u003d 1;\n      }\n      trial[depth] \u003d (byte) ch;\n      result.child[0xFF \u0026 ch]\n                   \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n    }\n    // pick up the rest\n    trial[depth] \u003d (byte)0xFF;\n    result.child[0xFF] \n                 \u003d buildTrieRec(splits, lower, currentBound, trial, maxDepth, ref);\n    \n    return result;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java"
    }
  }
}