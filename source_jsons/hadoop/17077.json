{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RBFMetrics.java",
  "functionName": "getMountTable",
  "functionId": "getMountTable",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java",
  "functionStartLine": 258,
  "functionEndLine": 308,
  "numCommitsSeen": 21,
  "timeTaken": 3455,
  "changeHistory": [
    "18d74fe41c0982dc1540367805b0c3d0d4fc29d3",
    "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e",
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54"
  ],
  "changeHistoryShort": {
    "18d74fe41c0982dc1540367805b0c3d0d4fc29d3": "Ybodychange",
    "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e": "Yfilerename",
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18d74fe41c0982dc1540367805b0c3d0d4fc29d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14711. RBF: RBFMetrics throws NullPointerException if stateStore disabled. Contributed by Chen Zhang.\n",
      "commitDate": "01/09/19 12:23 AM",
      "commitName": "18d74fe41c0982dc1540367805b0c3d0d4fc29d3",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "ba221dc50e793bdde99fcb8176783412d4de2d97",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 68.62,
      "commitsBetweenForRepo": 569,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,51 @@\n   public String getMountTable() {\n     final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n+    if (mountTableStore \u003d\u003d null) {\n+      return \"[]\";\n+    }\n \n     try {\n       // Get all the mount points in order\n       GetMountTableEntriesRequest request \u003d\n           GetMountTableEntriesRequest.newInstance(\"/\");\n       GetMountTableEntriesResponse response \u003d\n           mountTableStore.getMountTableEntries(request);\n       final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n       List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n       Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n \n       // Dump mount table entries information into JSON\n       for (MountTable entry : orderedMounts) {\n         // Sumarize destinations\n         Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n         Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n         for (RemoteLocation location : entry.getDestinations()) {\n           nameservices.add(location.getNameserviceId());\n           paths.add(location.getDest());\n         }\n \n         Map\u003cString, Object\u003e map \u003d getJson(entry);\n         // We add some values with a cleaner format\n         map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n         map.put(\"dateModified\", getDateString(entry.getDateModified()));\n \n         Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n         innerInfo.putAll(map);\n         innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n         innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n         if (nameservices.size() \u003e 1) {\n           innerInfo.put(\"order\", entry.getDestOrder().toString());\n         } else {\n           innerInfo.put(\"order\", \"\");\n         }\n         innerInfo.put(\"readonly\", entry.isReadOnly());\n         innerInfo.put(\"faulttolerant\", entry.isFaultTolerant());\n         info.add(Collections.unmodifiableMap(innerInfo));\n       }\n     } catch (IOException e) {\n       LOG.error(\n           \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n       return \"[]\";\n     }\n     return JSON.toString(info);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getMountTable() {\n    final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n    if (mountTableStore \u003d\u003d null) {\n      return \"[]\";\n    }\n\n    try {\n      // Get all the mount points in order\n      GetMountTableEntriesRequest request \u003d\n          GetMountTableEntriesRequest.newInstance(\"/\");\n      GetMountTableEntriesResponse response \u003d\n          mountTableStore.getMountTableEntries(request);\n      final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n      List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n      Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n\n      // Dump mount table entries information into JSON\n      for (MountTable entry : orderedMounts) {\n        // Sumarize destinations\n        Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n        Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n        for (RemoteLocation location : entry.getDestinations()) {\n          nameservices.add(location.getNameserviceId());\n          paths.add(location.getDest());\n        }\n\n        Map\u003cString, Object\u003e map \u003d getJson(entry);\n        // We add some values with a cleaner format\n        map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n        map.put(\"dateModified\", getDateString(entry.getDateModified()));\n\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        innerInfo.putAll(map);\n        innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n        innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n        if (nameservices.size() \u003e 1) {\n          innerInfo.put(\"order\", entry.getDestOrder().toString());\n        } else {\n          innerInfo.put(\"order\", \"\");\n        }\n        innerInfo.put(\"readonly\", entry.isReadOnly());\n        innerInfo.put(\"faulttolerant\", entry.isFaultTolerant());\n        info.add(Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\n          \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n      return \"[]\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java",
      "extendedDetails": {}
    },
    "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-14508. RBF: Clean-up and refactor UI components. Contributed by Takanobu Asanuma.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6915d7e13c2afbb2738176ba55ea0774f25e1264",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getMountTable() {\n    final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n\n    try {\n      // Get all the mount points in order\n      GetMountTableEntriesRequest request \u003d\n          GetMountTableEntriesRequest.newInstance(\"/\");\n      GetMountTableEntriesResponse response \u003d\n          mountTableStore.getMountTableEntries(request);\n      final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n      List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n      Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n\n      // Dump mount table entries information into JSON\n      for (MountTable entry : orderedMounts) {\n        // Sumarize destinations\n        Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n        Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n        for (RemoteLocation location : entry.getDestinations()) {\n          nameservices.add(location.getNameserviceId());\n          paths.add(location.getDest());\n        }\n\n        Map\u003cString, Object\u003e map \u003d getJson(entry);\n        // We add some values with a cleaner format\n        map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n        map.put(\"dateModified\", getDateString(entry.getDateModified()));\n\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        innerInfo.putAll(map);\n        innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n        innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n        if (nameservices.size() \u003e 1) {\n          innerInfo.put(\"order\", entry.getDestOrder().toString());\n        } else {\n          innerInfo.put(\"order\", \"\");\n        }\n        innerInfo.put(\"readonly\", entry.isReadOnly());\n        innerInfo.put(\"faulttolerant\", entry.isFaultTolerant());\n        info.add(Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\n          \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n      return \"[]\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java"
      }
    },
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public String getMountTable() {\n     final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n \n     try {\n       // Get all the mount points in order\n       GetMountTableEntriesRequest request \u003d\n           GetMountTableEntriesRequest.newInstance(\"/\");\n       GetMountTableEntriesResponse response \u003d\n           mountTableStore.getMountTableEntries(request);\n       final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n       List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n       Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n \n       // Dump mount table entries information into JSON\n       for (MountTable entry : orderedMounts) {\n         // Sumarize destinations\n         Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n         Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n         for (RemoteLocation location : entry.getDestinations()) {\n           nameservices.add(location.getNameserviceId());\n           paths.add(location.getDest());\n         }\n \n         Map\u003cString, Object\u003e map \u003d getJson(entry);\n         // We add some values with a cleaner format\n         map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n         map.put(\"dateModified\", getDateString(entry.getDateModified()));\n \n         Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n         innerInfo.putAll(map);\n         innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n         innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n         if (nameservices.size() \u003e 1) {\n           innerInfo.put(\"order\", entry.getDestOrder().toString());\n         } else {\n           innerInfo.put(\"order\", \"\");\n         }\n         innerInfo.put(\"readonly\", entry.isReadOnly());\n+        innerInfo.put(\"faulttolerant\", entry.isFaultTolerant());\n         info.add(Collections.unmodifiableMap(innerInfo));\n       }\n     } catch (IOException e) {\n       LOG.error(\n           \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n       return \"[]\";\n     }\n     return JSON.toString(info);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getMountTable() {\n    final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n\n    try {\n      // Get all the mount points in order\n      GetMountTableEntriesRequest request \u003d\n          GetMountTableEntriesRequest.newInstance(\"/\");\n      GetMountTableEntriesResponse response \u003d\n          mountTableStore.getMountTableEntries(request);\n      final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n      List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n      Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n\n      // Dump mount table entries information into JSON\n      for (MountTable entry : orderedMounts) {\n        // Sumarize destinations\n        Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n        Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n        for (RemoteLocation location : entry.getDestinations()) {\n          nameservices.add(location.getNameserviceId());\n          paths.add(location.getDest());\n        }\n\n        Map\u003cString, Object\u003e map \u003d getJson(entry);\n        // We add some values with a cleaner format\n        map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n        map.put(\"dateModified\", getDateString(entry.getDateModified()));\n\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        innerInfo.putAll(map);\n        innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n        innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n        if (nameservices.size() \u003e 1) {\n          innerInfo.put(\"order\", entry.getDestOrder().toString());\n        } else {\n          innerInfo.put(\"order\", \"\");\n        }\n        innerInfo.put(\"readonly\", entry.isReadOnly());\n        innerInfo.put(\"faulttolerant\", entry.isFaultTolerant());\n        info.add(Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\n          \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n      return \"[]\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getMountTable() {\n    final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n\n    try {\n      // Get all the mount points in order\n      GetMountTableEntriesRequest request \u003d\n          GetMountTableEntriesRequest.newInstance(\"/\");\n      GetMountTableEntriesResponse response \u003d\n          mountTableStore.getMountTableEntries(request);\n      final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n      List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n      Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n\n      // Dump mount table entries information into JSON\n      for (MountTable entry : orderedMounts) {\n        // Sumarize destinations\n        Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n        Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n        for (RemoteLocation location : entry.getDestinations()) {\n          nameservices.add(location.getNameserviceId());\n          paths.add(location.getDest());\n        }\n\n        Map\u003cString, Object\u003e map \u003d getJson(entry);\n        // We add some values with a cleaner format\n        map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n        map.put(\"dateModified\", getDateString(entry.getDateModified()));\n\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        innerInfo.putAll(map);\n        innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n        innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n        if (nameservices.size() \u003e 1) {\n          innerInfo.put(\"order\", entry.getDestOrder().toString());\n        } else {\n          innerInfo.put(\"order\", \"\");\n        }\n        innerInfo.put(\"readonly\", entry.isReadOnly());\n        info.add(Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\n          \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n      return \"[]\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java"
      }
    },
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12335. Federation Metrics. Contributed by Inigo Goiri.\n\n(cherry picked from commit 3b19e77752afce87936f5c0d1e6d272fba798d7b)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,47 @@\n+  public String getMountTable() {\n+    final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n+\n+    try {\n+      // Get all the mount points in order\n+      GetMountTableEntriesRequest request \u003d\n+          GetMountTableEntriesRequest.newInstance(\"/\");\n+      GetMountTableEntriesResponse response \u003d\n+          mountTableStore.getMountTableEntries(request);\n+      final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n+      List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n+      Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n+\n+      // Dump mount table entries information into JSON\n+      for (MountTable entry : orderedMounts) {\n+        // Sumarize destinations\n+        Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n+        Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n+        for (RemoteLocation location : entry.getDestinations()) {\n+          nameservices.add(location.getNameserviceId());\n+          paths.add(location.getDest());\n+        }\n+\n+        Map\u003cString, Object\u003e map \u003d getJson(entry);\n+        // We add some values with a cleaner format\n+        map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n+        map.put(\"dateModified\", getDateString(entry.getDateModified()));\n+\n+        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n+        innerInfo.putAll(map);\n+        innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n+        innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n+        if (nameservices.size() \u003e 1) {\n+          innerInfo.put(\"order\", entry.getDestOrder().toString());\n+        } else {\n+          innerInfo.put(\"order\", \"\");\n+        }\n+        innerInfo.put(\"readonly\", entry.isReadOnly());\n+        info.add(Collections.unmodifiableMap(innerInfo));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\n+          \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n+      return \"[]\";\n+    }\n+    return JSON.toString(info);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getMountTable() {\n    final List\u003cMap\u003cString, Object\u003e\u003e info \u003d new LinkedList\u003c\u003e();\n\n    try {\n      // Get all the mount points in order\n      GetMountTableEntriesRequest request \u003d\n          GetMountTableEntriesRequest.newInstance(\"/\");\n      GetMountTableEntriesResponse response \u003d\n          mountTableStore.getMountTableEntries(request);\n      final List\u003cMountTable\u003e mounts \u003d response.getEntries();\n      List\u003cMountTable\u003e orderedMounts \u003d new ArrayList\u003c\u003e(mounts);\n      Collections.sort(orderedMounts, MountTable.SOURCE_COMPARATOR);\n\n      // Dump mount table entries information into JSON\n      for (MountTable entry : orderedMounts) {\n        // Sumarize destinations\n        Set\u003cString\u003e nameservices \u003d new LinkedHashSet\u003c\u003e();\n        Set\u003cString\u003e paths \u003d new LinkedHashSet\u003c\u003e();\n        for (RemoteLocation location : entry.getDestinations()) {\n          nameservices.add(location.getNameserviceId());\n          paths.add(location.getDest());\n        }\n\n        Map\u003cString, Object\u003e map \u003d getJson(entry);\n        // We add some values with a cleaner format\n        map.put(\"dateCreated\", getDateString(entry.getDateCreated()));\n        map.put(\"dateModified\", getDateString(entry.getDateModified()));\n\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        innerInfo.putAll(map);\n        innerInfo.put(\"nameserviceId\", StringUtils.join(\",\", nameservices));\n        innerInfo.put(\"path\", StringUtils.join(\",\", paths));\n        if (nameservices.size() \u003e 1) {\n          innerInfo.put(\"order\", entry.getDestOrder().toString());\n        } else {\n          innerInfo.put(\"order\", \"\");\n        }\n        innerInfo.put(\"readonly\", entry.isReadOnly());\n        info.add(Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\n          \"Cannot generate JSON of mount table from store: {}\", e.getMessage());\n      return \"[]\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java"
    }
  }
}