{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecayRpcScheduler.java",
  "functionName": "cachedOrComputedPriorityLevel",
  "functionId": "cachedOrComputedPriorityLevel___identity-Object",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
  "functionStartLine": 563,
  "functionEndLine": 581,
  "numCommitsSeen": 19,
  "timeTaken": 1828,
  "changeHistory": [
    "129576f628d370def74e56112aba3a93e97bbf70",
    "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
    "e0a9e1bfb724b60af322666b8267c7a9121f84a7"
  ],
  "changeHistoryShort": {
    "129576f628d370def74e56112aba3a93e97bbf70": "Ybodychange",
    "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5": "Ybodychange",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": "Ybodychange",
    "e0a9e1bfb724b60af322666b8267c7a9121f84a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "129576f628d370def74e56112aba3a93e97bbf70": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14403. Cost-based extension to the RPC Fair Call Queue. Contributed by Christopher Gregorian.\n",
      "commitDate": "24/06/19 12:09 PM",
      "commitName": "129576f628d370def74e56112aba3a93e97bbf70",
      "commitAuthor": "Christopher Gregorian",
      "commitDateOld": "23/05/19 10:28 AM",
      "commitNameOld": "f96a2df38d889f29314c57f4d94227b2e419a11f",
      "commitAuthorOld": "Christopher Gregorian",
      "daysBetweenCommits": 32.07,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,19 @@\n   private int cachedOrComputedPriorityLevel(Object identity) {\n-    try {\n-      long occurrences \u003d this.getAndIncrementCallCounts(identity);\n-\n-      // Try the cache\n-      Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n-      if (scheduleCache !\u003d null) {\n-        Integer priority \u003d scheduleCache.get(identity);\n-        if (priority !\u003d null) {\n-          LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n-              priority);\n-          return priority;\n-        }\n+    // Try the cache\n+    Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n+    if (scheduleCache !\u003d null) {\n+      Integer priority \u003d scheduleCache.get(identity);\n+      if (priority !\u003d null) {\n+        LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n+            priority);\n+        return priority;\n       }\n-\n-      // Cache was no good, compute it\n-      int priority \u003d computePriorityLevel(occurrences);\n-      LOG.debug(\"compute priority for \" + identity + \" priority \" + priority);\n-      return priority;\n-\n-    } catch (InterruptedException ie) {\n-      LOG.warn(\"Caught InterruptedException, returning low priority level\");\n-      LOG.debug(\"Fallback priority for: {} with priority: {}\", identity,\n-          numLevels - 1);\n-      return numLevels - 1;\n     }\n+\n+    // Cache was no good, compute it\n+    List\u003cAtomicLong\u003e costList \u003d callCosts.get(identity);\n+    long currentCost \u003d costList \u003d\u003d null ? 0 : costList.get(0).get();\n+    int priority \u003d computePriorityLevel(currentCost);\n+    LOG.debug(\"compute priority for {} priority {}\", identity, priority);\n+    return priority;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int cachedOrComputedPriorityLevel(Object identity) {\n    // Try the cache\n    Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n    if (scheduleCache !\u003d null) {\n      Integer priority \u003d scheduleCache.get(identity);\n      if (priority !\u003d null) {\n        LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n            priority);\n        return priority;\n      }\n    }\n\n    // Cache was no good, compute it\n    List\u003cAtomicLong\u003e costList \u003d callCosts.get(identity);\n    long currentCost \u003d costList \u003d\u003d null ? 0 : costList.get(0).get();\n    int priority \u003d computePriorityLevel(currentCost);\n    LOG.debug(\"compute priority for {} priority {}\", identity, priority);\n    return priority;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
      "extendedDetails": {}
    },
    "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13197. Add non-decayed call metrics for DecayRpcScheduler. Contributed by Xiaoyu Yao.\n",
      "commitDate": "27/05/16 6:07 PM",
      "commitName": "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "17/05/16 2:58 PM",
      "commitNameOld": "94784848456a92a6502f3a3c0074e44fba4b19c9",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 10.13,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private int cachedOrComputedPriorityLevel(Object identity) {\n     try {\n-      long occurrences \u003d this.getAndIncrement(identity);\n+      long occurrences \u003d this.getAndIncrementCallCounts(identity);\n \n       // Try the cache\n       Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n       if (scheduleCache !\u003d null) {\n         Integer priority \u003d scheduleCache.get(identity);\n         if (priority !\u003d null) {\n           LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n               priority);\n           return priority;\n         }\n       }\n \n       // Cache was no good, compute it\n       int priority \u003d computePriorityLevel(occurrences);\n       LOG.debug(\"compute priority for \" + identity + \" priority \" + priority);\n       return priority;\n \n     } catch (InterruptedException ie) {\n       LOG.warn(\"Caught InterruptedException, returning low priority level\");\n       LOG.debug(\"Fallback priority for: {} with priority: {}\", identity,\n           numLevels - 1);\n       return numLevels - 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int cachedOrComputedPriorityLevel(Object identity) {\n    try {\n      long occurrences \u003d this.getAndIncrementCallCounts(identity);\n\n      // Try the cache\n      Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n      if (scheduleCache !\u003d null) {\n        Integer priority \u003d scheduleCache.get(identity);\n        if (priority !\u003d null) {\n          LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n              priority);\n          return priority;\n        }\n      }\n\n      // Cache was no good, compute it\n      int priority \u003d computePriorityLevel(occurrences);\n      LOG.debug(\"compute priority for \" + identity + \" priority \" + priority);\n      return priority;\n\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Caught InterruptedException, returning low priority level\");\n      LOG.debug(\"Fallback priority for: {} with priority: {}\", identity,\n          numLevels - 1);\n      return numLevels - 1;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
      "extendedDetails": {}
    },
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 8:42 AM",
      "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "01/12/15 9:27 AM",
      "commitNameOld": "485c3468a8520fcde14800af3e4a075231c946de",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 120.93,
      "commitsBetweenForRepo": 745,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,27 @@\n   private int cachedOrComputedPriorityLevel(Object identity) {\n     try {\n       long occurrences \u003d this.getAndIncrement(identity);\n \n       // Try the cache\n       Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n       if (scheduleCache !\u003d null) {\n         Integer priority \u003d scheduleCache.get(identity);\n         if (priority !\u003d null) {\n+          LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n+              priority);\n           return priority;\n         }\n       }\n \n       // Cache was no good, compute it\n-      return computePriorityLevel(occurrences);\n+      int priority \u003d computePriorityLevel(occurrences);\n+      LOG.debug(\"compute priority for \" + identity + \" priority \" + priority);\n+      return priority;\n+\n     } catch (InterruptedException ie) {\n-      LOG.warn(\"Caught InterruptedException, returning low priority queue\");\n-      return numQueues - 1;\n+      LOG.warn(\"Caught InterruptedException, returning low priority level\");\n+      LOG.debug(\"Fallback priority for: {} with priority: {}\", identity,\n+          numLevels - 1);\n+      return numLevels - 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int cachedOrComputedPriorityLevel(Object identity) {\n    try {\n      long occurrences \u003d this.getAndIncrement(identity);\n\n      // Try the cache\n      Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n      if (scheduleCache !\u003d null) {\n        Integer priority \u003d scheduleCache.get(identity);\n        if (priority !\u003d null) {\n          LOG.debug(\"Cache priority for: {} with priority: {}\", identity,\n              priority);\n          return priority;\n        }\n      }\n\n      // Cache was no good, compute it\n      int priority \u003d computePriorityLevel(occurrences);\n      LOG.debug(\"compute priority for \" + identity + \" priority \" + priority);\n      return priority;\n\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Caught InterruptedException, returning low priority level\");\n      LOG.debug(\"Fallback priority for: {} with priority: {}\", identity,\n          numLevels - 1);\n      return numLevels - 1;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
      "extendedDetails": {}
    },
    "e0a9e1bfb724b60af322666b8267c7a9121f84a7": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10281. Create a scheduler, which assigns schedulables a priority level. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617643 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 5:54 PM",
      "commitName": "e0a9e1bfb724b60af322666b8267c7a9121f84a7",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,20 @@\n+  private int cachedOrComputedPriorityLevel(Object identity) {\n+    try {\n+      long occurrences \u003d this.getAndIncrement(identity);\n+\n+      // Try the cache\n+      Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n+      if (scheduleCache !\u003d null) {\n+        Integer priority \u003d scheduleCache.get(identity);\n+        if (priority !\u003d null) {\n+          return priority;\n+        }\n+      }\n+\n+      // Cache was no good, compute it\n+      return computePriorityLevel(occurrences);\n+    } catch (InterruptedException ie) {\n+      LOG.warn(\"Caught InterruptedException, returning low priority queue\");\n+      return numQueues - 1;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int cachedOrComputedPriorityLevel(Object identity) {\n    try {\n      long occurrences \u003d this.getAndIncrement(identity);\n\n      // Try the cache\n      Map\u003cObject, Integer\u003e scheduleCache \u003d scheduleCacheRef.get();\n      if (scheduleCache !\u003d null) {\n        Integer priority \u003d scheduleCache.get(identity);\n        if (priority !\u003d null) {\n          return priority;\n        }\n      }\n\n      // Cache was no good, compute it\n      return computePriorityLevel(occurrences);\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Caught InterruptedException, returning low priority queue\");\n      return numQueues - 1;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java"
    }
  }
}