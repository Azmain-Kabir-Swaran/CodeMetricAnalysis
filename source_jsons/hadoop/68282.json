{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftRestClient.java",
  "functionName": "getObjectLocation",
  "functionId": "getObjectLocation___path-SwiftObjectPath__requestHeaders-Header(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
  "functionStartLine": 701,
  "functionEndLine": 750,
  "numCommitsSeen": 6,
  "timeTaken": 999,
  "changeHistory": [
    "62579b69a0a294ba1ea14cf76c650b640f89f331",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "62579b69a0a294ba1ea14cf76c650b640f89f331": "Ybodychange",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "62579b69a0a294ba1ea14cf76c650b640f89f331": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
      "commitDate": "27/04/17 12:57 AM",
      "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "01/10/15 9:25 AM",
      "commitNameOld": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 573.65,
      "commitsBetweenForRepo": 3812,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   public byte[] getObjectLocation(SwiftObjectPath path,\n                                   final Header... requestHeaders) throws IOException {\n     if (!isLocationAware()) {\n       //if the filesystem is not location aware, do not ask for this information\n       return null;\n     }\n     preRemoteCommand(\"getObjectLocation\");\n     try {\n       return perform(\"getObjectLocation\", pathToObjectLocation(path),\n-              new GetMethodProcessor\u003cbyte[]\u003e() {\n-                @Override\n-                protected int[] getAllowedStatusCodes() {\n-                  return new int[]{\n-                    SC_OK,\n-                    SC_FORBIDDEN,\n-                    SC_NO_CONTENT\n-                  };\n-                }\n+          new GetRequestProcessor\u003cbyte[]\u003e() {\n+            @Override\n+            protected int[] getAllowedStatusCodes() {\n+              return new int[]{\n+                  SC_OK,\n+                  SC_FORBIDDEN,\n+                  SC_NO_CONTENT\n+              };\n+            }\n \n-                @Override\n-                public byte[] extractResult(GetMethod method) throws\n-                        IOException {\n+            @Override\n+            public byte[] extractResult(HttpGet req, HttpResponse resp) throws\n+                IOException {\n \n-                  //TODO: remove SC_NO_CONTENT if it depends on Swift versions\n-                  if (method.getStatusCode() \u003d\u003d SC_NOT_FOUND\n-                      || method.getStatusCode() \u003d\u003d SC_FORBIDDEN ||\n-                          method.getStatusCode() \u003d\u003d SC_NO_CONTENT ||\n-                          method.getResponseBodyAsStream() \u003d\u003d null) {\n-                    return null;\n-                  }\n-                  final InputStream responseBodyAsStream \u003d method.getResponseBodyAsStream();\n-                  final byte[] locationData \u003d new byte[1024];\n+              //TODO: remove SC_NO_CONTENT if it depends on Swift versions\n+              int statusCode \u003d resp.getStatusLine().getStatusCode();\n+              if (statusCode \u003d\u003d SC_NOT_FOUND\n+                  || statusCode \u003d\u003d SC_FORBIDDEN\n+                  || statusCode \u003d\u003d SC_NO_CONTENT\n+                  || resp.getEntity().getContent() \u003d\u003d null) {\n+                return null;\n+              }\n+              final InputStream responseBodyAsStream \u003d\n+                  resp.getEntity().getContent();\n+              final byte[] locationData \u003d new byte[1024];\n \n-                  return responseBodyAsStream.read(locationData) \u003e 0 ? locationData : null;\n-                }\n+              return responseBodyAsStream.read(locationData) \u003e 0 ?\n+                  locationData : null;\n+            }\n \n-                @Override\n-                     protected void setup(GetMethod method)\n-                       throws SwiftInternalStateException {\n-                  setHeaders(method, requestHeaders);\n-                }\n-              });\n+            @Override\n+            protected void setup(HttpGet req)\n+                throws SwiftInternalStateException {\n+              setHeaders(req, requestHeaders);\n+            }\n+          });\n     } catch (IOException e) {\n       LOG.warn(\"Failed to get the location of \" + path + \": \" + e, e);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] getObjectLocation(SwiftObjectPath path,\n                                  final Header... requestHeaders) throws IOException {\n    if (!isLocationAware()) {\n      //if the filesystem is not location aware, do not ask for this information\n      return null;\n    }\n    preRemoteCommand(\"getObjectLocation\");\n    try {\n      return perform(\"getObjectLocation\", pathToObjectLocation(path),\n          new GetRequestProcessor\u003cbyte[]\u003e() {\n            @Override\n            protected int[] getAllowedStatusCodes() {\n              return new int[]{\n                  SC_OK,\n                  SC_FORBIDDEN,\n                  SC_NO_CONTENT\n              };\n            }\n\n            @Override\n            public byte[] extractResult(HttpGet req, HttpResponse resp) throws\n                IOException {\n\n              //TODO: remove SC_NO_CONTENT if it depends on Swift versions\n              int statusCode \u003d resp.getStatusLine().getStatusCode();\n              if (statusCode \u003d\u003d SC_NOT_FOUND\n                  || statusCode \u003d\u003d SC_FORBIDDEN\n                  || statusCode \u003d\u003d SC_NO_CONTENT\n                  || resp.getEntity().getContent() \u003d\u003d null) {\n                return null;\n              }\n              final InputStream responseBodyAsStream \u003d\n                  resp.getEntity().getContent();\n              final byte[] locationData \u003d new byte[1024];\n\n              return responseBodyAsStream.read(locationData) \u003e 0 ?\n                  locationData : null;\n            }\n\n            @Override\n            protected void setup(HttpGet req)\n                throws SwiftInternalStateException {\n              setHeaders(req, requestHeaders);\n            }\n          });\n    } catch (IOException e) {\n      LOG.warn(\"Failed to get the location of \" + path + \": \" + e, e);\n      return null;\n    }\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
      "extendedDetails": {}
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,47 @@\n+  public byte[] getObjectLocation(SwiftObjectPath path,\n+                                  final Header... requestHeaders) throws IOException {\n+    if (!isLocationAware()) {\n+      //if the filesystem is not location aware, do not ask for this information\n+      return null;\n+    }\n+    preRemoteCommand(\"getObjectLocation\");\n+    try {\n+      return perform(\"getObjectLocation\", pathToObjectLocation(path),\n+              new GetMethodProcessor\u003cbyte[]\u003e() {\n+                @Override\n+                protected int[] getAllowedStatusCodes() {\n+                  return new int[]{\n+                    SC_OK,\n+                    SC_FORBIDDEN,\n+                    SC_NO_CONTENT\n+                  };\n+                }\n+\n+                @Override\n+                public byte[] extractResult(GetMethod method) throws\n+                        IOException {\n+\n+                  //TODO: remove SC_NO_CONTENT if it depends on Swift versions\n+                  if (method.getStatusCode() \u003d\u003d SC_NOT_FOUND\n+                      || method.getStatusCode() \u003d\u003d SC_FORBIDDEN ||\n+                          method.getStatusCode() \u003d\u003d SC_NO_CONTENT ||\n+                          method.getResponseBodyAsStream() \u003d\u003d null) {\n+                    return null;\n+                  }\n+                  final InputStream responseBodyAsStream \u003d method.getResponseBodyAsStream();\n+                  final byte[] locationData \u003d new byte[1024];\n+\n+                  return responseBodyAsStream.read(locationData) \u003e 0 ? locationData : null;\n+                }\n+\n+                @Override\n+                     protected void setup(GetMethod method)\n+                       throws SwiftInternalStateException {\n+                  setHeaders(method, requestHeaders);\n+                }\n+              });\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to get the location of \" + path + \": \" + e, e);\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] getObjectLocation(SwiftObjectPath path,\n                                  final Header... requestHeaders) throws IOException {\n    if (!isLocationAware()) {\n      //if the filesystem is not location aware, do not ask for this information\n      return null;\n    }\n    preRemoteCommand(\"getObjectLocation\");\n    try {\n      return perform(\"getObjectLocation\", pathToObjectLocation(path),\n              new GetMethodProcessor\u003cbyte[]\u003e() {\n                @Override\n                protected int[] getAllowedStatusCodes() {\n                  return new int[]{\n                    SC_OK,\n                    SC_FORBIDDEN,\n                    SC_NO_CONTENT\n                  };\n                }\n\n                @Override\n                public byte[] extractResult(GetMethod method) throws\n                        IOException {\n\n                  //TODO: remove SC_NO_CONTENT if it depends on Swift versions\n                  if (method.getStatusCode() \u003d\u003d SC_NOT_FOUND\n                      || method.getStatusCode() \u003d\u003d SC_FORBIDDEN ||\n                          method.getStatusCode() \u003d\u003d SC_NO_CONTENT ||\n                          method.getResponseBodyAsStream() \u003d\u003d null) {\n                    return null;\n                  }\n                  final InputStream responseBodyAsStream \u003d method.getResponseBodyAsStream();\n                  final byte[] locationData \u003d new byte[1024];\n\n                  return responseBodyAsStream.read(locationData) \u003e 0 ? locationData : null;\n                }\n\n                @Override\n                     protected void setup(GetMethod method)\n                       throws SwiftInternalStateException {\n                  setHeaders(method, requestHeaders);\n                }\n              });\n    } catch (IOException e) {\n      LOG.warn(\"Failed to get the location of \" + path + \": \" + e, e);\n      return null;\n    }\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java"
    }
  }
}