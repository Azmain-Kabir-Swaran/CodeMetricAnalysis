{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "open",
  "functionId": "open___file-Path(modifiers-final)__options-Optional__Configuration__(modifiers-final)__providedStatus-Optional__S3AFileStatus__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 1082,
  "functionEndLine": 1122,
  "numCommitsSeen": 272,
  "timeTaken": 5574,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "e02eb24e0a9139418120027b694492e0738df20a",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "6fa229891e06eea62cb9634efde755f40247e816",
    "f365957c6326f88734bc0a5d01cfb7eac713db20"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ymultichange(Yparameterchange,Ybodychange)",
    "e02eb24e0a9139418120027b694492e0738df20a": "Ybodychange",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "6fa229891e06eea62cb9634efde755f40247e816": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "10/01/20 3:11 AM",
          "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,41 @@\n   private FSDataInputStream open(\n-      final Path path,\n-      final Optional\u003cConfiguration\u003e options)\n+      final Path file,\n+      final Optional\u003cConfiguration\u003e options,\n+      final Optional\u003cS3AFileStatus\u003e providedStatus)\n       throws IOException {\n \n     entryPoint(INVOCATION_OPEN);\n-    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n-    if (fileStatus.isDirectory()) {\n-      throw new FileNotFoundException(\"Can\u0027t open \" + path\n-          + \" because it is a directory\");\n-    }\n+    final Path path \u003d qualify(file);\n+    S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n+        providedStatus);\n \n     S3AReadOpContext readContext;\n     if (options.isPresent()) {\n       Configuration o \u003d options.get();\n       // normal path. Open the file with the chosen seek policy, if different\n       // from the normal one.\n       // and readahead.\n       S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n           o.get(INPUT_FADVISE, inputPolicy.toString()));\n       long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n       // TODO support change detection policy from options?\n       readContext \u003d createReadContext(\n           fileStatus,\n           policy,\n           changeDetectionPolicy,\n           readAheadRange2);\n     } else {\n       readContext \u003d createReadContext(\n           fileStatus,\n           inputPolicy,\n           changeDetectionPolicy,\n           readAhead);\n     }\n     LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n \n     return new FSDataInputStream(\n         new S3AInputStream(\n             readContext,\n             createObjectAttributes(fileStatus),\n             s3));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSDataInputStream open(\n      final Path file,\n      final Optional\u003cConfiguration\u003e options,\n      final Optional\u003cS3AFileStatus\u003e providedStatus)\n      throws IOException {\n\n    entryPoint(INVOCATION_OPEN);\n    final Path path \u003d qualify(file);\n    S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n        providedStatus);\n\n    S3AReadOpContext readContext;\n    if (options.isPresent()) {\n      Configuration o \u003d options.get();\n      // normal path. Open the file with the chosen seek policy, if different\n      // from the normal one.\n      // and readahead.\n      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n          o.get(INPUT_FADVISE, inputPolicy.toString()));\n      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n      // TODO support change detection policy from options?\n      readContext \u003d createReadContext(\n          fileStatus,\n          policy,\n          changeDetectionPolicy,\n          readAheadRange2);\n    } else {\n      readContext \u003d createReadContext(\n          fileStatus,\n          inputPolicy,\n          changeDetectionPolicy,\n          readAhead);\n    }\n    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n\n    return new FSDataInputStream(\n        new S3AInputStream(\n            readContext,\n            createObjectAttributes(fileStatus),\n            s3));\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[path-Path(modifiers-final), options-Optional\u003cConfiguration\u003e(modifiers-final)]",
            "newValue": "[file-Path(modifiers-final), options-Optional\u003cConfiguration\u003e(modifiers-final), providedStatus-Optional\u003cS3AFileStatus\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "10/01/20 3:11 AM",
          "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,41 @@\n   private FSDataInputStream open(\n-      final Path path,\n-      final Optional\u003cConfiguration\u003e options)\n+      final Path file,\n+      final Optional\u003cConfiguration\u003e options,\n+      final Optional\u003cS3AFileStatus\u003e providedStatus)\n       throws IOException {\n \n     entryPoint(INVOCATION_OPEN);\n-    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n-    if (fileStatus.isDirectory()) {\n-      throw new FileNotFoundException(\"Can\u0027t open \" + path\n-          + \" because it is a directory\");\n-    }\n+    final Path path \u003d qualify(file);\n+    S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n+        providedStatus);\n \n     S3AReadOpContext readContext;\n     if (options.isPresent()) {\n       Configuration o \u003d options.get();\n       // normal path. Open the file with the chosen seek policy, if different\n       // from the normal one.\n       // and readahead.\n       S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n           o.get(INPUT_FADVISE, inputPolicy.toString()));\n       long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n       // TODO support change detection policy from options?\n       readContext \u003d createReadContext(\n           fileStatus,\n           policy,\n           changeDetectionPolicy,\n           readAheadRange2);\n     } else {\n       readContext \u003d createReadContext(\n           fileStatus,\n           inputPolicy,\n           changeDetectionPolicy,\n           readAhead);\n     }\n     LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n \n     return new FSDataInputStream(\n         new S3AInputStream(\n             readContext,\n             createObjectAttributes(fileStatus),\n             s3));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSDataInputStream open(\n      final Path file,\n      final Optional\u003cConfiguration\u003e options,\n      final Optional\u003cS3AFileStatus\u003e providedStatus)\n      throws IOException {\n\n    entryPoint(INVOCATION_OPEN);\n    final Path path \u003d qualify(file);\n    S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n        providedStatus);\n\n    S3AReadOpContext readContext;\n    if (options.isPresent()) {\n      Configuration o \u003d options.get();\n      // normal path. Open the file with the chosen seek policy, if different\n      // from the normal one.\n      // and readahead.\n      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n          o.get(INPUT_FADVISE, inputPolicy.toString()));\n      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n      // TODO support change detection policy from options?\n      readContext \u003d createReadContext(\n          fileStatus,\n          policy,\n          changeDetectionPolicy,\n          readAheadRange2);\n    } else {\n      readContext \u003d createReadContext(\n          fileStatus,\n          inputPolicy,\n          changeDetectionPolicy,\n          readAhead);\n    }\n    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n\n    return new FSDataInputStream(\n        new S3AInputStream(\n            readContext,\n            createObjectAttributes(fileStatus),\n            s3));\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "16/06/19 9:05 AM",
      "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 3.7,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,42 @@\n   private FSDataInputStream open(\n       final Path path,\n       final Optional\u003cConfiguration\u003e options)\n       throws IOException {\n \n     entryPoint(INVOCATION_OPEN);\n     final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + path\n           + \" because it is a directory\");\n     }\n \n     S3AReadOpContext readContext;\n     if (options.isPresent()) {\n       Configuration o \u003d options.get();\n       // normal path. Open the file with the chosen seek policy, if different\n       // from the normal one.\n       // and readahead.\n       S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n           o.get(INPUT_FADVISE, inputPolicy.toString()));\n       long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n       // TODO support change detection policy from options?\n       readContext \u003d createReadContext(\n           fileStatus,\n           policy,\n           changeDetectionPolicy,\n           readAheadRange2);\n     } else {\n       readContext \u003d createReadContext(\n           fileStatus,\n           inputPolicy,\n           changeDetectionPolicy,\n           readAhead);\n     }\n     LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n \n     return new FSDataInputStream(\n         new S3AInputStream(\n             readContext,\n-            createObjectAttributes(\n-                path,\n-                fileStatus.getETag(),\n-                fileStatus.getVersionId()),\n-            fileStatus.getLen(),\n+            createObjectAttributes(fileStatus),\n             s3));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream open(\n      final Path path,\n      final Optional\u003cConfiguration\u003e options)\n      throws IOException {\n\n    entryPoint(INVOCATION_OPEN);\n    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + path\n          + \" because it is a directory\");\n    }\n\n    S3AReadOpContext readContext;\n    if (options.isPresent()) {\n      Configuration o \u003d options.get();\n      // normal path. Open the file with the chosen seek policy, if different\n      // from the normal one.\n      // and readahead.\n      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n          o.get(INPUT_FADVISE, inputPolicy.toString()));\n      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n      // TODO support change detection policy from options?\n      readContext \u003d createReadContext(\n          fileStatus,\n          policy,\n          changeDetectionPolicy,\n          readAheadRange2);\n    } else {\n      readContext \u003d createReadContext(\n          fileStatus,\n          inputPolicy,\n          changeDetectionPolicy,\n          readAhead);\n    }\n    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n\n    return new FSDataInputStream(\n        new S3AInputStream(\n            readContext,\n            createObjectAttributes(fileStatus),\n            s3));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "30/04/19 3:53 AM",
      "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 19.44,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   private FSDataInputStream open(\n       final Path path,\n       final Optional\u003cConfiguration\u003e options)\n       throws IOException {\n \n     entryPoint(INVOCATION_OPEN);\n-    final FileStatus fileStatus \u003d getFileStatus(path);\n+    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + path\n           + \" because it is a directory\");\n     }\n \n     S3AReadOpContext readContext;\n     if (options.isPresent()) {\n       Configuration o \u003d options.get();\n       // normal path. Open the file with the chosen seek policy, if different\n       // from the normal one.\n       // and readahead.\n       S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n           o.get(INPUT_FADVISE, inputPolicy.toString()));\n       long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n       // TODO support change detection policy from options?\n       readContext \u003d createReadContext(\n           fileStatus,\n           policy,\n           changeDetectionPolicy,\n           readAheadRange2);\n     } else {\n       readContext \u003d createReadContext(\n           fileStatus,\n           inputPolicy,\n           changeDetectionPolicy,\n           readAhead);\n     }\n     LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n \n     return new FSDataInputStream(\n         new S3AInputStream(\n             readContext,\n-            createObjectAttributes(path),\n+            createObjectAttributes(\n+                path,\n+                fileStatus.getETag(),\n+                fileStatus.getVersionId()),\n             fileStatus.getLen(),\n             s3));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream open(\n      final Path path,\n      final Optional\u003cConfiguration\u003e options)\n      throws IOException {\n\n    entryPoint(INVOCATION_OPEN);\n    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + path\n          + \" because it is a directory\");\n    }\n\n    S3AReadOpContext readContext;\n    if (options.isPresent()) {\n      Configuration o \u003d options.get();\n      // normal path. Open the file with the chosen seek policy, if different\n      // from the normal one.\n      // and readahead.\n      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n          o.get(INPUT_FADVISE, inputPolicy.toString()));\n      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n      // TODO support change detection policy from options?\n      readContext \u003d createReadContext(\n          fileStatus,\n          policy,\n          changeDetectionPolicy,\n          readAheadRange2);\n    } else {\n      readContext \u003d createReadContext(\n          fileStatus,\n          inputPolicy,\n          changeDetectionPolicy,\n          readAhead);\n    }\n    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n\n    return new FSDataInputStream(\n        new S3AInputStream(\n            readContext,\n            createObjectAttributes(\n                path,\n                fileStatus.getETag(),\n                fileStatus.getVersionId()),\n            fileStatus.getLen(),\n            s3));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6fa229891e06eea62cb9634efde755f40247e816": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15625. S3A input stream to use etags/version number to detect changed source files.\n\nAuthor: Ben Roling \u003cben.roling@gmail.com\u003e\n\nInitial patch from Brahma Reddy Battula.\n",
      "commitDate": "13/03/19 1:37 PM",
      "commitName": "6fa229891e06eea62cb9634efde755f40247e816",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "05/02/19 3:51 AM",
      "commitNameOld": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 36.37,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,43 @@\n   private FSDataInputStream open(\n       final Path path,\n       final Optional\u003cConfiguration\u003e options)\n       throws IOException {\n \n     entryPoint(INVOCATION_OPEN);\n     final FileStatus fileStatus \u003d getFileStatus(path);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + path\n           + \" because it is a directory\");\n     }\n \n     S3AReadOpContext readContext;\n     if (options.isPresent()) {\n       Configuration o \u003d options.get();\n       // normal path. Open the file with the chosen seek policy, if different\n       // from the normal one.\n       // and readahead.\n       S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n           o.get(INPUT_FADVISE, inputPolicy.toString()));\n       long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n-      readContext \u003d createReadContext(fileStatus, policy, readAheadRange2);\n+      // TODO support change detection policy from options?\n+      readContext \u003d createReadContext(\n+          fileStatus,\n+          policy,\n+          changeDetectionPolicy,\n+          readAheadRange2);\n     } else {\n-      readContext \u003d createReadContext(fileStatus, inputPolicy, readAhead);\n+      readContext \u003d createReadContext(\n+          fileStatus,\n+          inputPolicy,\n+          changeDetectionPolicy,\n+          readAhead);\n     }\n     LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n \n     return new FSDataInputStream(\n         new S3AInputStream(\n             readContext,\n             createObjectAttributes(path),\n             fileStatus.getLen(),\n             s3));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream open(\n      final Path path,\n      final Optional\u003cConfiguration\u003e options)\n      throws IOException {\n\n    entryPoint(INVOCATION_OPEN);\n    final FileStatus fileStatus \u003d getFileStatus(path);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + path\n          + \" because it is a directory\");\n    }\n\n    S3AReadOpContext readContext;\n    if (options.isPresent()) {\n      Configuration o \u003d options.get();\n      // normal path. Open the file with the chosen seek policy, if different\n      // from the normal one.\n      // and readahead.\n      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n          o.get(INPUT_FADVISE, inputPolicy.toString()));\n      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n      // TODO support change detection policy from options?\n      readContext \u003d createReadContext(\n          fileStatus,\n          policy,\n          changeDetectionPolicy,\n          readAheadRange2);\n    } else {\n      readContext \u003d createReadContext(\n          fileStatus,\n          inputPolicy,\n          changeDetectionPolicy,\n          readAhead);\n    }\n    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n\n    return new FSDataInputStream(\n        new S3AInputStream(\n            readContext,\n            createObjectAttributes(path),\n            fileStatus.getLen(),\n            s3));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,34 @@\n+  private FSDataInputStream open(\n+      final Path path,\n+      final Optional\u003cConfiguration\u003e options)\n+      throws IOException {\n+\n+    entryPoint(INVOCATION_OPEN);\n+    final FileStatus fileStatus \u003d getFileStatus(path);\n+    if (fileStatus.isDirectory()) {\n+      throw new FileNotFoundException(\"Can\u0027t open \" + path\n+          + \" because it is a directory\");\n+    }\n+\n+    S3AReadOpContext readContext;\n+    if (options.isPresent()) {\n+      Configuration o \u003d options.get();\n+      // normal path. Open the file with the chosen seek policy, if different\n+      // from the normal one.\n+      // and readahead.\n+      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n+          o.get(INPUT_FADVISE, inputPolicy.toString()));\n+      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n+      readContext \u003d createReadContext(fileStatus, policy, readAheadRange2);\n+    } else {\n+      readContext \u003d createReadContext(fileStatus, inputPolicy, readAhead);\n+    }\n+    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n+\n+    return new FSDataInputStream(\n+        new S3AInputStream(\n+            readContext,\n+            createObjectAttributes(path),\n+            fileStatus.getLen(),\n+            s3));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream open(\n      final Path path,\n      final Optional\u003cConfiguration\u003e options)\n      throws IOException {\n\n    entryPoint(INVOCATION_OPEN);\n    final FileStatus fileStatus \u003d getFileStatus(path);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + path\n          + \" because it is a directory\");\n    }\n\n    S3AReadOpContext readContext;\n    if (options.isPresent()) {\n      Configuration o \u003d options.get();\n      // normal path. Open the file with the chosen seek policy, if different\n      // from the normal one.\n      // and readahead.\n      S3AInputPolicy policy \u003d S3AInputPolicy.getPolicy(\n          o.get(INPUT_FADVISE, inputPolicy.toString()));\n      long readAheadRange2 \u003d o.getLong(READAHEAD_RANGE, readAhead);\n      readContext \u003d createReadContext(fileStatus, policy, readAheadRange2);\n    } else {\n      readContext \u003d createReadContext(fileStatus, inputPolicy, readAhead);\n    }\n    LOG.debug(\"Opening \u0027{}\u0027\", readContext);\n\n    return new FSDataInputStream(\n        new S3AInputStream(\n            readContext,\n            createObjectAttributes(path),\n            fileStatus.getLen(),\n            s3));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}