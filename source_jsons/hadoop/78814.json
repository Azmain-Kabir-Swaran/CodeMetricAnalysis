{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContext.java",
  "functionName": "copy",
  "functionId": "copy___src-Path(modifiers-final)__dst-Path(modifiers-final)__deleteSource-boolean__overwrite-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
  "functionStartLine": 2174,
  "functionEndLine": 2209,
  "numCommitsSeen": 94,
  "timeTaken": 3363,
  "changeHistory": [
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
    "dff95f7af899a4f2add791afbd20c8a1e33c7a36",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "a8dbce159679cd031f60e6151399fa2cd5ac9374",
    "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72",
    "f5efc187e5490b2172e0f1d68ce5b528977c81ee",
    "ad5306f24ccb42ced48a95419850f41d662fc5ac",
    "7578282edce0eba3f24c96355c944c02156ece79",
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
    "8991eb7959947735449d300a60aaadb897c11ba2",
    "33e3f7949bb30b87c4e57de0cf7f58d81016aaea",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
    "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0",
    "0294c49df60150bd9b363af5cfbc312222c12c69"
  ],
  "changeHistoryShort": {
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d": "Ybodychange",
    "dff95f7af899a4f2add791afbd20c8a1e33c7a36": "Ybodychange",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": "Ybodychange",
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "a8dbce159679cd031f60e6151399fa2cd5ac9374": "Ybodychange",
    "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72": "Ybodychange",
    "f5efc187e5490b2172e0f1d68ce5b528977c81ee": "Ybodychange",
    "ad5306f24ccb42ced48a95419850f41d662fc5ac": "Ybodychange",
    "7578282edce0eba3f24c96355c944c02156ece79": "Ybodychange",
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15": "Yexceptionschange",
    "8991eb7959947735449d300a60aaadb897c11ba2": "Ybodychange",
    "33e3f7949bb30b87c4e57de0cf7f58d81016aaea": "Ybodychange",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": "Yexceptionschange",
    "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0": "Ybodychange",
    "0294c49df60150bd9b363af5cfbc312222c12c69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15085. Output streams closed with IOUtils suppressing write errors. Contributed by Jim Brennan\n",
      "commitDate": "14/12/17 8:18 AM",
      "commitName": "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "12/09/17 5:35 PM",
      "commitNameOld": "f4b6267465d139bfdaf75e25761672eaf61d8a11",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 92.65,
      "commitsBetweenForRepo": 715,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,36 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n         IOException {\n       src.checkNotSchemeWithRelative();\n       dst.checkNotSchemeWithRelative();\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDirDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n-        InputStream in\u003dnull;\n-        OutputStream out \u003d null;\n-        try {\n-          in \u003d open(qSrc);\n-          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n-              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n-                EnumSet.of(CreateFlag.CREATE);\n-          out \u003d create(qDst, createFlag);\n+        EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n+            CreateFlag.CREATE, CreateFlag.OVERWRITE) :\n+            EnumSet.of(CreateFlag.CREATE);\n+        InputStream in \u003d open(qSrc);\n+        try (OutputStream out \u003d create(qDst, createFlag)) {\n           IOUtils.copyBytes(in, out, conf, true);\n         } finally {\n-          IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n        IOException {\n      src.checkNotSchemeWithRelative();\n      dst.checkNotSchemeWithRelative();\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDirDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n            CreateFlag.CREATE, CreateFlag.OVERWRITE) :\n            EnumSet.of(CreateFlag.CREATE);\n        InputStream in \u003d open(qSrc);\n        try (OutputStream out \u003d create(qDst, createFlag)) {\n          IOUtils.copyBytes(in, out, conf, true);\n        } finally {\n          IOUtils.closeStream(in);\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "dff95f7af899a4f2add791afbd20c8a1e33c7a36": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11101. How about inputstream close statement from catch block to finally block in FileContext#copy() ( Contributed by skrho )\n",
      "commitDate": "25/09/14 12:16 AM",
      "commitName": "dff95f7af899a4f2add791afbd20c8a1e33c7a36",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "30/07/14 10:49 AM",
      "commitNameOld": "535fe14dedbf919442ec03ac573315c7a16a6dbe",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 56.56,
      "commitsBetweenForRepo": 537,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n         IOException {\n       src.checkNotSchemeWithRelative();\n       dst.checkNotSchemeWithRelative();\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDirDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n               CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                 EnumSet.of(CreateFlag.CREATE);\n           out \u003d create(qDst, createFlag);\n           IOUtils.copyBytes(in, out, conf, true);\n-        } catch (IOException e) {\n+        } finally {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n-          throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n        IOException {\n      src.checkNotSchemeWithRelative();\n      dst.checkNotSchemeWithRelative();\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDirDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } finally {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/13 3:09 PM",
      "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/04/13 12:43 PM",
      "commitNameOld": "0e9f61addc67e598cfcde0e9c537954ef00f311e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 89.1,
      "commitsBetweenForRepo": 566,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n-\tIOException {\n-      checkNotSchemeWithRelative(src);\n-      checkNotSchemeWithRelative(dst);\n+        IOException {\n+      src.checkNotSchemeWithRelative();\n+      dst.checkNotSchemeWithRelative();\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDirDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n               CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                 EnumSet.of(CreateFlag.CREATE);\n           out \u003d create(qDst, createFlag);\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n        IOException {\n      src.checkNotSchemeWithRelative();\n      dst.checkNotSchemeWithRelative();\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDirDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9155. FsPermission should have different default value, 777 for directory and 666 for file. Contributed by Binglin Chang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431148 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 3:30 PM",
      "commitName": "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "20/11/12 9:55 PM",
      "commitNameOld": "c24bc56484369404afae52fc2f3a23b75bfbbe75",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 49.73,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n \tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n-        mkdir(qDst, FsPermission.getDefault(), true);\n+        mkdir(qDst, FsPermission.getDirDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n               CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                 EnumSet.of(CreateFlag.CREATE);\n           out \u003d create(qDst, createFlag);\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDirDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a8dbce159679cd031f60e6151399fa2cd5ac9374": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7223. FileContext createFlag combinations are not clearly defined. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1092565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/04/11 6:51 PM",
      "commitName": "a8dbce159679cd031f60e6151399fa2cd5ac9374",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "13/04/11 1:55 PM",
      "commitNameOld": "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n \tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n-          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n+          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n+              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n+                EnumSet.of(CreateFlag.CREATE);\n+          out \u003d create(qDst, createFlag);\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72": {
      "type": "Ybodychange",
      "commitMessage": "Undoing commit r1091613 for HADOOP-7223. FileContext createFlag combinations are not clearly defined.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1091916 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/11 1:55 PM",
      "commitName": "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "12/04/11 5:42 PM",
      "commitNameOld": "d03e5b75bc03b4fd11917c9950749856f0333af2",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n \tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n-          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n-              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n-                EnumSet.of(CreateFlag.CREATE);\n-          out \u003d create(qDst, createFlag);\n+          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "f5efc187e5490b2172e0f1d68ce5b528977c81ee": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7223. FileContext createFlag combinations are not clearly defined. Contributed by Suresh Srinivas.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1091613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/04/11 5:09 PM",
      "commitName": "f5efc187e5490b2172e0f1d68ce5b528977c81ee",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/02/11 4:11 PM",
      "commitNameOld": "449478c8320e67055bce6ea1dacb4e7574e289e3",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 70.0,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n \tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n               content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n-          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n+          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n+              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n+                EnumSet.of(CreateFlag.CREATE);\n+          out \u003d create(qDst, createFlag);\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          EnumSet\u003cCreateFlag\u003e createFlag \u003d overwrite ? EnumSet.of(\n              CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n                EnumSet.of(CreateFlag.CREATE);\n          out \u003d create(qDst, createFlag);\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "ad5306f24ccb42ced48a95419850f41d662fc5ac": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6906.  FileContext copy() utility doesn\u0027t work with recursive copying of directories. (vinod k v via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@987374 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/10 8:46 PM",
      "commitName": "ad5306f24ccb42ced48a95419850f41d662fc5ac",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "10/08/10 9:43 PM",
      "commitNameOld": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n \tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n-          copy(content.getPath(), new Path(qDst, content.getPath()),\n-               deleteSource, overwrite);\n+          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n+              content.getPath().getName())), deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(makeQualified(content.getPath()), makeQualified(new Path(qDst,\n              content.getPath().getName())), deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "7578282edce0eba3f24c96355c944c02156ece79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6585.  Add FileStatus#isDirectory and isFile.  Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@949658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/10 8:14 PM",
      "commitName": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthor": "Thomas White",
      "commitDateOld": "03/05/10 10:36 AM",
      "commitNameOld": "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 27.4,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException, \n \tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n-      if (fs.isDir()) {\n+      if (fs.isDirectory()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(content.getPath(), new Path(qDst, content.getPath()),\n                deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDirectory()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-6727. Remove UnresolvedLinkException from public FileContext APIs. Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@940527 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/10 10:36 AM",
      "commitName": "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/05/10 2:08 PM",
      "commitNameOld": "fe49f6e47391ff3eb6372dc5acc592bbc2e8f683",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n-        ParentNotDirectoryException, UnresolvedLinkException,\n-        UnsupportedFileSystemException, IOException {\n+        ParentNotDirectoryException, UnsupportedFileSystemException, \n+\tIOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, overwrite);\n       FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n       if (fs.isDir()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(content.getPath(), new Path(qDst, content.getPath()),\n                deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnsupportedFileSystemException, \n\tIOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDir()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnresolvedLinkException, UnsupportedFileSystemException, IOException]",
        "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, IOException]"
      }
    },
    "8991eb7959947735449d300a60aaadb897c11ba2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6678. Remove FileContext#isFile, isDirectory and exists. Contributed by Eli Collins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@939140 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/04/10 4:58 PM",
      "commitName": "8991eb7959947735449d300a60aaadb897c11ba2",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "27/04/10 9:53 AM",
      "commitNameOld": "9ad633f011700997c2f571e990ed9a3745955ac4",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 1.29,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnresolvedLinkException,\n         UnsupportedFileSystemException, IOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n-      checkDest(qSrc.getName(), qDst, false);\n-      if (isDirectory(qSrc)) {\n+      checkDest(qSrc.getName(), qDst, overwrite);\n+      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n+      if (fs.isDir()) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n         FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(content.getPath(), new Path(qDst, content.getPath()),\n                deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnresolvedLinkException,\n        UnsupportedFileSystemException, IOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, overwrite);\n      FileStatus fs \u003d FileContext.this.getFileStatus(qSrc);\n      if (fs.isDir()) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "33e3f7949bb30b87c4e57de0cf7f58d81016aaea": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6692. Add FileContext#listStatus that returns an iterator. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@938136 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/10 10:32 AM",
      "commitName": "33e3f7949bb30b87c4e57de0cf7f58d81016aaea",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "02/03/10 6:48 PM",
      "commitNameOld": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 54.61,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public boolean copy(final Path src, final Path dst, boolean deleteSource,\n         boolean overwrite) throws AccessControlException,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnresolvedLinkException,\n         UnsupportedFileSystemException, IOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, false);\n       if (isDirectory(qSrc)) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n-        FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n+        FileStatus[] contents \u003d listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(content.getPath(), new Path(qDst, content.getPath()),\n                deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnresolvedLinkException,\n        UnsupportedFileSystemException, IOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, false);\n      if (isDirectory(qSrc)) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": {
      "type": "Yexceptionschange",
      "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/10 6:48 PM",
      "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "16/02/10 1:43 PM",
      "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n-    public boolean copy(final Path src,  final Path dst,\n-        boolean deleteSource, boolean overwrite)\n-      throws IOException {\n+    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n+        boolean overwrite) throws AccessControlException,\n+        FileAlreadyExistsException, FileNotFoundException,\n+        ParentNotDirectoryException, UnresolvedLinkException,\n+        UnsupportedFileSystemException, IOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, false);\n       if (isDirectory(qSrc)) {\n         checkDependencies(qSrc, qDst);\n         mkdir(qDst, FsPermission.getDefault(), true);\n-\n         FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(content.getPath(), new Path(qDst, content.getPath()),\n                deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src, final Path dst, boolean deleteSource,\n        boolean overwrite) throws AccessControlException,\n        FileAlreadyExistsException, FileNotFoundException,\n        ParentNotDirectoryException, UnresolvedLinkException,\n        UnsupportedFileSystemException, IOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, false);\n      if (isDirectory(qSrc)) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n        FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnresolvedLinkException, UnsupportedFileSystemException, IOException]"
      }
    },
    "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6271. Add recursive and non recursive create and mkdir to FileContext. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816818 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/09 5:03 PM",
      "commitName": "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "18/09/09 2:52 PM",
      "commitNameOld": "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n     public boolean copy(final Path src,  final Path dst,\n         boolean deleteSource, boolean overwrite)\n       throws IOException {\n       checkNotSchemeWithRelative(src);\n       checkNotSchemeWithRelative(dst);\n       Path qSrc \u003d makeQualified(src);\n       Path qDst \u003d makeQualified(dst);\n       checkDest(qSrc.getName(), qDst, false);\n       if (isDirectory(qSrc)) {\n         checkDependencies(qSrc, qDst);\n-        if (!mkdirs(qDst, FsPermission.getDefault())) {\n-          throw new IOException(\"Failed to create destination directory `\" +\n-              qDst + \"\u0027\");\n-        }\n+        mkdir(qDst, FsPermission.getDefault(), true);\n+\n         FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n         for (FileStatus content : contents) {\n           copy(content.getPath(), new Path(qDst, content.getPath()),\n                deleteSource, overwrite);\n         }\n       } else {\n         InputStream in\u003dnull;\n         OutputStream out \u003d null;\n         try {\n           in \u003d open(qSrc);\n           out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n           IOUtils.copyBytes(in, out, conf, true);\n         } catch (IOException e) {\n           IOUtils.closeStream(out);\n           IOUtils.closeStream(in);\n           throw e;\n         }\n       }\n       if (deleteSource) {\n         return delete(qSrc, true);\n       } else {\n         return true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src,  final Path dst,\n        boolean deleteSource, boolean overwrite)\n      throws IOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, false);\n      if (isDirectory(qSrc)) {\n        checkDependencies(qSrc, qDst);\n        mkdir(qDst, FsPermission.getDefault(), true);\n\n        FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "0294c49df60150bd9b363af5cfbc312222c12c69": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4952. Add new improved file system interface FileContext for the application writer. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816398 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/09 3:27 PM",
      "commitName": "0294c49df60150bd9b363af5cfbc312222c12c69",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,38 @@\n+    public boolean copy(final Path src,  final Path dst,\n+        boolean deleteSource, boolean overwrite)\n+      throws IOException {\n+      checkNotSchemeWithRelative(src);\n+      checkNotSchemeWithRelative(dst);\n+      Path qSrc \u003d makeQualified(src);\n+      Path qDst \u003d makeQualified(dst);\n+      checkDest(qSrc.getName(), qDst, false);\n+      if (isDirectory(qSrc)) {\n+        checkDependencies(qSrc, qDst);\n+        if (!mkdirs(qDst, FsPermission.getDefault())) {\n+          throw new IOException(\"Failed to create destination directory `\" +\n+              qDst + \"\u0027\");\n+        }\n+        FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n+        for (FileStatus content : contents) {\n+          copy(content.getPath(), new Path(qDst, content.getPath()),\n+               deleteSource, overwrite);\n+        }\n+      } else {\n+        InputStream in\u003dnull;\n+        OutputStream out \u003d null;\n+        try {\n+          in \u003d open(qSrc);\n+          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n+          IOUtils.copyBytes(in, out, conf, true);\n+        } catch (IOException e) {\n+          IOUtils.closeStream(out);\n+          IOUtils.closeStream(in);\n+          throw e;\n+        }\n+      }\n+      if (deleteSource) {\n+        return delete(qSrc, true);\n+      } else {\n+        return true;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean copy(final Path src,  final Path dst,\n        boolean deleteSource, boolean overwrite)\n      throws IOException {\n      checkNotSchemeWithRelative(src);\n      checkNotSchemeWithRelative(dst);\n      Path qSrc \u003d makeQualified(src);\n      Path qDst \u003d makeQualified(dst);\n      checkDest(qSrc.getName(), qDst, false);\n      if (isDirectory(qSrc)) {\n        checkDependencies(qSrc, qDst);\n        if (!mkdirs(qDst, FsPermission.getDefault())) {\n          throw new IOException(\"Failed to create destination directory `\" +\n              qDst + \"\u0027\");\n        }\n        FileStatus[] contents \u003d FileContext.this.listStatus(qSrc);\n        for (FileStatus content : contents) {\n          copy(content.getPath(), new Path(qDst, content.getPath()),\n               deleteSource, overwrite);\n        }\n      } else {\n        InputStream in\u003dnull;\n        OutputStream out \u003d null;\n        try {\n          in \u003d open(qSrc);\n          out \u003d create(qDst, EnumSet.of(CreateFlag.OVERWRITE));\n          IOUtils.copyBytes(in, out, conf, true);\n        } catch (IOException e) {\n          IOUtils.closeStream(out);\n          IOUtils.closeStream(in);\n          throw e;\n        }\n      }\n      if (deleteSource) {\n        return delete(qSrc, true);\n      } else {\n        return true;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}