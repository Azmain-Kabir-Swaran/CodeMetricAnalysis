{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStoreTableManager.java",
  "functionName": "verifyVersionCompatibility",
  "functionId": "verifyVersionCompatibility",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
  "functionStartLine": 423,
  "functionEndLine": 501,
  "numCommitsSeen": 3,
  "timeTaken": 1214,
  "changeHistory": [
    "d5e9971e6d98b50de64acbf46154f82208919930",
    "4a700c20d553dc5336ee881719bcf189fc46bfbf"
  ],
  "changeHistoryShort": {
    "d5e9971e6d98b50de64acbf46154f82208919930": "Ybodychange",
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5e9971e6d98b50de64acbf46154f82208919930": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16653. S3Guard DDB overreacts to no tag access (#1660). Contributed by Gabor Bota.\n\n",
      "commitDate": "28/10/19 3:22 AM",
      "commitName": "d5e9971e6d98b50de64acbf46154f82208919930",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "11/10/19 3:08 AM",
      "commitNameOld": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 17.01,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,79 @@\n   protected void verifyVersionCompatibility() throws IOException {\n     final Item versionMarkerItem \u003d getVersionMarkerItem();\n-    final Item versionMarkerFromTag \u003d\n-        getVersionMarkerFromTags(table, amazonDynamoDB);\n+    Item versionMarkerFromTag \u003d null;\n+    boolean canReadDdbTags \u003d true;\n+\n+    try {\n+      versionMarkerFromTag \u003d getVersionMarkerFromTags(table, amazonDynamoDB);\n+    } catch (AccessDeniedException e) {\n+      LOG.debug(\"Can not read tags of table.\");\n+      canReadDdbTags \u003d false;\n+    }\n \n     LOG.debug(\"versionMarkerItem: {};  versionMarkerFromTag: {}\",\n         versionMarkerItem, versionMarkerFromTag);\n \n     if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n       if (!isEmptyTable(tableName, amazonDynamoDB)) {\n         LOG.error(\"Table is not empty but missing the version maker. Failing.\");\n         throw new IOException(E_NO_VERSION_MARKER_AND_NOT_EMPTY\n             + \" Table: \" + tableName);\n       }\n \n-      LOG.info(\"Table {} contains no version marker item or tag. \" +\n-              \"The table is empty, so the version marker will be added \" +\n-              \"as TAG and ITEM.\", tableName);\n+      if (canReadDdbTags) {\n+        LOG.info(\"Table {} contains no version marker item and tag. \" +\n+            \"The table is empty, so the version marker will be added \" +\n+            \"as TAG and ITEM.\", tableName);\n+        putVersionMarkerItemToTable();\n+        tagTableWithVersionMarker();\n+      }\n \n-      tagTableWithVersionMarker();\n-      putVersionMarkerItemToTable();\n+      if (!canReadDdbTags) {\n+        LOG.info(\"Table {} contains no version marker item and the tags are not readable. \" +\n+            \"The table is empty, so the ITEM version marker will be added .\", tableName);\n+        putVersionMarkerItemToTable();\n+      }\n     }\n \n     if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n       final int tagVersionMarker \u003d\n           extractVersionFromMarker(versionMarkerFromTag);\n       throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n           E_INCOMPATIBLE_TAG_VERSION);\n \n       LOG.info(\"Table {} contains no version marker ITEM but contains \" +\n               \"compatible version marker TAG. Restoring the version marker \" +\n               \"item from tag.\", tableName);\n \n       putVersionMarkerItemToTable();\n     }\n \n-    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n+    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null\n+        \u0026\u0026 canReadDdbTags) {\n       final int itemVersionMarker \u003d\n           extractVersionFromMarker(versionMarkerItem);\n       throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n           E_INCOMPATIBLE_ITEM_VERSION);\n \n       LOG.info(\"Table {} contains no version marker TAG but contains \" +\n           \"compatible version marker ITEM. Restoring the version marker \" +\n           \"item from item.\", tableName);\n \n       tagTableWithVersionMarker();\n     }\n \n     if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n       final int tagVersionMarker \u003d\n           extractVersionFromMarker(versionMarkerFromTag);\n       final int itemVersionMarker \u003d\n           extractVersionFromMarker(versionMarkerItem);\n \n       throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n           E_INCOMPATIBLE_TAG_VERSION);\n       throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n           E_INCOMPATIBLE_ITEM_VERSION);\n \n       LOG.debug(\"Table {} contains correct version marker TAG and ITEM.\",\n           tableName);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void verifyVersionCompatibility() throws IOException {\n    final Item versionMarkerItem \u003d getVersionMarkerItem();\n    Item versionMarkerFromTag \u003d null;\n    boolean canReadDdbTags \u003d true;\n\n    try {\n      versionMarkerFromTag \u003d getVersionMarkerFromTags(table, amazonDynamoDB);\n    } catch (AccessDeniedException e) {\n      LOG.debug(\"Can not read tags of table.\");\n      canReadDdbTags \u003d false;\n    }\n\n    LOG.debug(\"versionMarkerItem: {};  versionMarkerFromTag: {}\",\n        versionMarkerItem, versionMarkerFromTag);\n\n    if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n      if (!isEmptyTable(tableName, amazonDynamoDB)) {\n        LOG.error(\"Table is not empty but missing the version maker. Failing.\");\n        throw new IOException(E_NO_VERSION_MARKER_AND_NOT_EMPTY\n            + \" Table: \" + tableName);\n      }\n\n      if (canReadDdbTags) {\n        LOG.info(\"Table {} contains no version marker item and tag. \" +\n            \"The table is empty, so the version marker will be added \" +\n            \"as TAG and ITEM.\", tableName);\n        putVersionMarkerItemToTable();\n        tagTableWithVersionMarker();\n      }\n\n      if (!canReadDdbTags) {\n        LOG.info(\"Table {} contains no version marker item and the tags are not readable. \" +\n            \"The table is empty, so the ITEM version marker will be added .\", tableName);\n        putVersionMarkerItemToTable();\n      }\n    }\n\n    if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n      final int tagVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerFromTag);\n      throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n          E_INCOMPATIBLE_TAG_VERSION);\n\n      LOG.info(\"Table {} contains no version marker ITEM but contains \" +\n              \"compatible version marker TAG. Restoring the version marker \" +\n              \"item from tag.\", tableName);\n\n      putVersionMarkerItemToTable();\n    }\n\n    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null\n        \u0026\u0026 canReadDdbTags) {\n      final int itemVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerItem);\n      throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n          E_INCOMPATIBLE_ITEM_VERSION);\n\n      LOG.info(\"Table {} contains no version marker TAG but contains \" +\n          \"compatible version marker ITEM. Restoring the version marker \" +\n          \"item from item.\", tableName);\n\n      tagTableWithVersionMarker();\n    }\n\n    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n      final int tagVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerFromTag);\n      final int itemVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerItem);\n\n      throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n          E_INCOMPATIBLE_TAG_VERSION);\n      throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n          E_INCOMPATIBLE_ITEM_VERSION);\n\n      LOG.debug(\"Table {} contains correct version marker TAG and ITEM.\",\n          tableName);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
      "extendedDetails": {}
    },
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
      "commitDate": "11/10/19 3:08 AM",
      "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
      "commitAuthor": "Gabor Bota",
      "diff": "@@ -0,0 +1,64 @@\n+  protected void verifyVersionCompatibility() throws IOException {\n+    final Item versionMarkerItem \u003d getVersionMarkerItem();\n+    final Item versionMarkerFromTag \u003d\n+        getVersionMarkerFromTags(table, amazonDynamoDB);\n+\n+    LOG.debug(\"versionMarkerItem: {};  versionMarkerFromTag: {}\",\n+        versionMarkerItem, versionMarkerFromTag);\n+\n+    if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n+      if (!isEmptyTable(tableName, amazonDynamoDB)) {\n+        LOG.error(\"Table is not empty but missing the version maker. Failing.\");\n+        throw new IOException(E_NO_VERSION_MARKER_AND_NOT_EMPTY\n+            + \" Table: \" + tableName);\n+      }\n+\n+      LOG.info(\"Table {} contains no version marker item or tag. \" +\n+              \"The table is empty, so the version marker will be added \" +\n+              \"as TAG and ITEM.\", tableName);\n+\n+      tagTableWithVersionMarker();\n+      putVersionMarkerItemToTable();\n+    }\n+\n+    if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n+      final int tagVersionMarker \u003d\n+          extractVersionFromMarker(versionMarkerFromTag);\n+      throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n+          E_INCOMPATIBLE_TAG_VERSION);\n+\n+      LOG.info(\"Table {} contains no version marker ITEM but contains \" +\n+              \"compatible version marker TAG. Restoring the version marker \" +\n+              \"item from tag.\", tableName);\n+\n+      putVersionMarkerItemToTable();\n+    }\n+\n+    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n+      final int itemVersionMarker \u003d\n+          extractVersionFromMarker(versionMarkerItem);\n+      throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n+          E_INCOMPATIBLE_ITEM_VERSION);\n+\n+      LOG.info(\"Table {} contains no version marker TAG but contains \" +\n+          \"compatible version marker ITEM. Restoring the version marker \" +\n+          \"item from item.\", tableName);\n+\n+      tagTableWithVersionMarker();\n+    }\n+\n+    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n+      final int tagVersionMarker \u003d\n+          extractVersionFromMarker(versionMarkerFromTag);\n+      final int itemVersionMarker \u003d\n+          extractVersionFromMarker(versionMarkerItem);\n+\n+      throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n+          E_INCOMPATIBLE_TAG_VERSION);\n+      throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n+          E_INCOMPATIBLE_ITEM_VERSION);\n+\n+      LOG.debug(\"Table {} contains correct version marker TAG and ITEM.\",\n+          tableName);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void verifyVersionCompatibility() throws IOException {\n    final Item versionMarkerItem \u003d getVersionMarkerItem();\n    final Item versionMarkerFromTag \u003d\n        getVersionMarkerFromTags(table, amazonDynamoDB);\n\n    LOG.debug(\"versionMarkerItem: {};  versionMarkerFromTag: {}\",\n        versionMarkerItem, versionMarkerFromTag);\n\n    if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n      if (!isEmptyTable(tableName, amazonDynamoDB)) {\n        LOG.error(\"Table is not empty but missing the version maker. Failing.\");\n        throw new IOException(E_NO_VERSION_MARKER_AND_NOT_EMPTY\n            + \" Table: \" + tableName);\n      }\n\n      LOG.info(\"Table {} contains no version marker item or tag. \" +\n              \"The table is empty, so the version marker will be added \" +\n              \"as TAG and ITEM.\", tableName);\n\n      tagTableWithVersionMarker();\n      putVersionMarkerItemToTable();\n    }\n\n    if (versionMarkerItem \u003d\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n      final int tagVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerFromTag);\n      throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n          E_INCOMPATIBLE_TAG_VERSION);\n\n      LOG.info(\"Table {} contains no version marker ITEM but contains \" +\n              \"compatible version marker TAG. Restoring the version marker \" +\n              \"item from tag.\", tableName);\n\n      putVersionMarkerItemToTable();\n    }\n\n    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag \u003d\u003d null) {\n      final int itemVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerItem);\n      throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n          E_INCOMPATIBLE_ITEM_VERSION);\n\n      LOG.info(\"Table {} contains no version marker TAG but contains \" +\n          \"compatible version marker ITEM. Restoring the version marker \" +\n          \"item from item.\", tableName);\n\n      tagTableWithVersionMarker();\n    }\n\n    if (versionMarkerItem !\u003d null \u0026\u0026 versionMarkerFromTag !\u003d null) {\n      final int tagVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerFromTag);\n      final int itemVersionMarker \u003d\n          extractVersionFromMarker(versionMarkerItem);\n\n      throwExceptionOnVersionMismatch(tagVersionMarker, tableName,\n          E_INCOMPATIBLE_TAG_VERSION);\n      throwExceptionOnVersionMismatch(itemVersionMarker, tableName,\n          E_INCOMPATIBLE_ITEM_VERSION);\n\n      LOG.debug(\"Table {} contains correct version marker TAG and ITEM.\",\n          tableName);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java"
    }
  }
}