{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerExecutor.java",
  "functionName": "getRunCommand",
  "functionId": "getRunCommand___command-String__groupId-String__userName-String__pidFile-Path__config-Configuration__resource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
  "functionStartLine": 613,
  "functionEndLine": 622,
  "numCommitsSeen": 108,
  "timeTaken": 6328,
  "changeHistory": [
    "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "dfa78484633b3ce21471d527b9c24671e3ca5df9",
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
    "500a1d9c76ec612b4e737888f4be79951c11591d",
    "21101c01f242439ec8ec40fb3a9ab1991ae0adc7",
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
    "d8ea364d07f782f8693b1ac0c340d4bd8d471c32",
    "5f2c518c95b2186b784877a5f41c7b71f8abc2f6",
    "638801cce16fc1dc3259c541dc30a599faaddda1"
  ],
  "changeHistoryShort": {
    "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0": "Ymultichange(Yparameterchange,Ybodychange)",
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "dfa78484633b3ce21471d527b9c24671e3ca5df9": "Ybodychange",
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec": "Ybodychange",
    "500a1d9c76ec612b4e737888f4be79951c11591d": "Ybodychange",
    "21101c01f242439ec8ec40fb3a9ab1991ae0adc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769": "Ymultichange(Yparameterchange,Ymodifierchange)",
    "d8ea364d07f782f8693b1ac0c340d4bd8d471c32": "Ybodychange",
    "5f2c518c95b2186b784877a5f41c7b71f8abc2f6": "Ymultichange(Yparameterchange,Ybodychange)",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5383. Fix findbugs and checkstyle issues in ContainerExecutor. (Vrushali C via Varun Saxena)\n",
      "commitDate": "15/07/16 10:47 AM",
      "commitName": "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5383. Fix findbugs and checkstyle issues in ContainerExecutor. (Vrushali C via Varun Saxena)\n",
          "commitDate": "15/07/16 10:47 AM",
          "commitName": "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "14/07/16 6:58 AM",
          "commitNameOld": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n   protected String[] getRunCommand(String command, String groupId,\n-      String userName, Path pidFile, Configuration conf, Resource resource) {\n+      String userName, Path pidFile, Configuration config, Resource resource) {\n     if (Shell.WINDOWS) {\n       return getRunCommandForWindows(command, groupId, userName, pidFile,\n-          conf, resource);\n+          config, resource);\n     } else {\n-      return getRunCommandForOther(command, conf);\n+      return getRunCommandForOther(command, config);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration config, Resource resource) {\n    if (Shell.WINDOWS) {\n      return getRunCommandForWindows(command, groupId, userName, pidFile,\n          config, resource);\n    } else {\n      return getRunCommandForOther(command, config);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[command-String, groupId-String, userName-String, pidFile-Path, conf-Configuration, resource-Resource]",
            "newValue": "[command-String, groupId-String, userName-String, pidFile-Path, config-Configuration, resource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5383. Fix findbugs and checkstyle issues in ContainerExecutor. (Vrushali C via Varun Saxena)\n",
          "commitDate": "15/07/16 10:47 AM",
          "commitName": "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "14/07/16 6:58 AM",
          "commitNameOld": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n   protected String[] getRunCommand(String command, String groupId,\n-      String userName, Path pidFile, Configuration conf, Resource resource) {\n+      String userName, Path pidFile, Configuration config, Resource resource) {\n     if (Shell.WINDOWS) {\n       return getRunCommandForWindows(command, groupId, userName, pidFile,\n-          conf, resource);\n+          config, resource);\n     } else {\n-      return getRunCommandForOther(command, conf);\n+      return getRunCommandForOther(command, config);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration config, Resource resource) {\n    if (Shell.WINDOWS) {\n      return getRunCommandForWindows(command, groupId, userName, pidFile,\n          config, resource);\n    } else {\n      return getRunCommandForOther(command, config);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5303. Clean up ContainerExecutor JavaDoc. Contributed by Daniel Templeton.\n",
      "commitDate": "14/07/16 6:58 AM",
      "commitName": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "20/06/16 9:56 AM",
      "commitNameOld": "5107a967fa2558deba11c33a326d4d2e5748f452",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 23.88,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,10 @@\n   protected String[] getRunCommand(String command, String groupId,\n       String userName, Path pidFile, Configuration conf, Resource resource) {\n-    boolean containerSchedPriorityIsSet \u003d false;\n-    int containerSchedPriorityAdjustment \u003d \n-        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n-\n-    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n-        null) {\n-      containerSchedPriorityIsSet \u003d true;\n-      containerSchedPriorityAdjustment \u003d conf \n-          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n-          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n-    }\n-  \n     if (Shell.WINDOWS) {\n-      int cpuRate \u003d -1;\n-      int memory \u003d -1;\n-      if (resource !\u003d null) {\n-        if (conf\n-            .getBoolean(\n-                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n-                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n-          memory \u003d (int) resource.getMemorySize();\n-        }\n-\n-        if (conf.getBoolean(\n-            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n-            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n-          int containerVCores \u003d resource.getVirtualCores();\n-          int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n-          int nodeCpuPercentage \u003d\n-              NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n-\n-          float containerCpuPercentage \u003d\n-              (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n-\n-          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n-          // should be set as 20 * 100.\n-          cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n-        }\n-      }\n-      return new String[] { Shell.getWinUtilsPath(), \"task\", \"create\", \"-m\",\n-          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n-          \"cmd /c \" + command };\n+      return getRunCommandForWindows(command, groupId, userName, pidFile,\n+          conf, resource);\n     } else {\n-      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n-      if (containerSchedPriorityIsSet) {\n-        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n-            Integer.toString(containerSchedPriorityAdjustment)));\n-      }\n-      retCommand.addAll(Arrays.asList(\"bash\", command));\n-      return retCommand.toArray(new String[retCommand.size()]);\n+      return getRunCommandForOther(command, conf);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    if (Shell.WINDOWS) {\n      return getRunCommandForWindows(command, groupId, userName, pidFile,\n          conf, resource);\n    } else {\n      return getRunCommandForOther(command, conf);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "29/04/16 3:39 AM",
      "commitNameOld": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 30.22,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   protected String[] getRunCommand(String command, String groupId,\n       String userName, Path pidFile, Configuration conf, Resource resource) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       int cpuRate \u003d -1;\n       int memory \u003d -1;\n       if (resource !\u003d null) {\n         if (conf\n             .getBoolean(\n                 YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                 YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n-          memory \u003d resource.getMemory();\n+          memory \u003d (int) resource.getMemorySize();\n         }\n \n         if (conf.getBoolean(\n             YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n             YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n           int containerVCores \u003d resource.getVirtualCores();\n           int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n           int nodeCpuPercentage \u003d\n               NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n           float containerCpuPercentage \u003d\n               (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n \n           // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n           // should be set as 20 * 100.\n           cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n         }\n       }\n       return new String[] { Shell.getWinUtilsPath(), \"task\", \"create\", \"-m\",\n           String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      int cpuRate \u003d -1;\n      int memory \u003d -1;\n      if (resource !\u003d null) {\n        if (conf\n            .getBoolean(\n                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n          memory \u003d (int) resource.getMemorySize();\n        }\n\n        if (conf.getBoolean(\n            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n          int containerVCores \u003d resource.getVirtualCores();\n          int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n          int nodeCpuPercentage \u003d\n              NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n          float containerCpuPercentage \u003d\n              (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n\n          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n          // should be set as 20 * 100.\n          cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n        }\n      }\n      return new String[] { Shell.getWinUtilsPath(), \"task\", \"create\", \"-m\",\n          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "dfa78484633b3ce21471d527b9c24671e3ca5df9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12478. Shell.getWinUtilsPath() has been renamed Shell.getWinutilsPath(). (stevel)\n",
      "commitDate": "14/10/15 12:25 PM",
      "commitName": "dfa78484633b3ce21471d527b9c24671e3ca5df9",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "13/10/15 1:49 PM",
      "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   protected String[] getRunCommand(String command, String groupId,\n       String userName, Path pidFile, Configuration conf, Resource resource) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       int cpuRate \u003d -1;\n       int memory \u003d -1;\n       if (resource !\u003d null) {\n         if (conf\n             .getBoolean(\n                 YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                 YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n           memory \u003d resource.getMemory();\n         }\n \n         if (conf.getBoolean(\n             YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n             YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n           int containerVCores \u003d resource.getVirtualCores();\n           int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n           int nodeCpuPercentage \u003d\n               NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n           float containerCpuPercentage \u003d\n               (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n \n           // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n           // should be set as 20 * 100.\n           cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n         }\n       }\n-      return new String[] { Shell.getWinutilsPath(), \"task\", \"create\", \"-m\",\n+      return new String[] { Shell.getWinUtilsPath(), \"task\", \"create\", \"-m\",\n           String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      int cpuRate \u003d -1;\n      int memory \u003d -1;\n      if (resource !\u003d null) {\n        if (conf\n            .getBoolean(\n                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n          memory \u003d resource.getMemory();\n        }\n\n        if (conf.getBoolean(\n            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n          int containerVCores \u003d resource.getVirtualCores();\n          int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n          int nodeCpuPercentage \u003d\n              NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n          float containerCpuPercentage \u003d\n              (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n\n          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n          // should be set as 20 * 100.\n          cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n        }\n      }\n      return new String[] { Shell.getWinUtilsPath(), \"task\", \"create\", \"-m\",\n          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10775. Shell operations to fail with meaningful errors on windows if winutils.exe not found. (stevel)\n",
      "commitDate": "13/10/15 1:49 PM",
      "commitName": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/07/15 11:57 AM",
      "commitNameOld": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 78.08,
      "commitsBetweenForRepo": 499,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   protected String[] getRunCommand(String command, String groupId,\n       String userName, Path pidFile, Configuration conf, Resource resource) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       int cpuRate \u003d -1;\n       int memory \u003d -1;\n       if (resource !\u003d null) {\n         if (conf\n             .getBoolean(\n                 YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                 YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n           memory \u003d resource.getMemory();\n         }\n \n         if (conf.getBoolean(\n             YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n             YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n           int containerVCores \u003d resource.getVirtualCores();\n           int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n           int nodeCpuPercentage \u003d\n               NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n           float containerCpuPercentage \u003d\n               (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n \n           // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n           // should be set as 20 * 100.\n           cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n         }\n       }\n-      return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n+      return new String[] { Shell.getWinutilsPath(), \"task\", \"create\", \"-m\",\n           String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      int cpuRate \u003d -1;\n      int memory \u003d -1;\n      if (resource !\u003d null) {\n        if (conf\n            .getBoolean(\n                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n          memory \u003d resource.getMemory();\n        }\n\n        if (conf.getBoolean(\n            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n          int containerVCores \u003d resource.getVirtualCores();\n          int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n          int nodeCpuPercentage \u003d\n              NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n          float containerCpuPercentage \u003d\n              (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n\n          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n          // should be set as 20 * 100.\n          cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n        }\n      }\n      return new String[] { Shell.getWinutilsPath(), \"task\", \"create\", \"-m\",\n          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "500a1d9c76ec612b4e737888f4be79951c11591d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-160. Enhanced NodeManager to automatically obtain cpu/memory values from underlying OS when configured to do so. Contributed by Varun Vasudev.\n",
      "commitDate": "26/05/15 11:38 AM",
      "commitName": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/05/15 3:50 PM",
      "commitNameOld": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,55 @@\n   protected String[] getRunCommand(String command, String groupId,\n       String userName, Path pidFile, Configuration conf, Resource resource) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       int cpuRate \u003d -1;\n       int memory \u003d -1;\n       if (resource !\u003d null) {\n         if (conf\n             .getBoolean(\n                 YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                 YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n           memory \u003d resource.getMemory();\n         }\n \n         if (conf.getBoolean(\n             YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n             YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n           int containerVCores \u003d resource.getVirtualCores();\n-          int nodeVCores \u003d conf.getInt(YarnConfiguration.NM_VCORES,\n-              YarnConfiguration.DEFAULT_NM_VCORES);\n-          // cap overall usage to the number of cores allocated to YARN\n-          int nodeCpuPercentage \u003d Math\n-              .min(\n-                  conf.getInt(\n-                      YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,\n-                      YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT),\n-                  100);\n-          nodeCpuPercentage \u003d Math.max(0, nodeCpuPercentage);\n-          if (nodeCpuPercentage \u003d\u003d 0) {\n-            String message \u003d \"Illegal value for \"\n-                + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT\n-                + \". Value cannot be less than or equal to 0.\";\n-            throw new IllegalArgumentException(message);\n-          }\n-          float yarnVCores \u003d (nodeCpuPercentage * nodeVCores) / 100.0f;\n+          int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n+          int nodeCpuPercentage \u003d\n+              NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+\n+          float containerCpuPercentage \u003d\n+              (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n+\n           // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n-          // should be set as 20 * 100. The following setting is equal to:\n-          // 100 * (100 * (vcores / Total # of cores allocated to YARN))\n-          cpuRate \u003d Math.min(10000,\n-              (int) ((containerVCores * 10000) / yarnVCores));\n+          // should be set as 20 * 100.\n+          cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n         }\n       }\n       return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n           String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      int cpuRate \u003d -1;\n      int memory \u003d -1;\n      if (resource !\u003d null) {\n        if (conf\n            .getBoolean(\n                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n          memory \u003d resource.getMemory();\n        }\n\n        if (conf.getBoolean(\n            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n          int containerVCores \u003d resource.getVirtualCores();\n          int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n          int nodeCpuPercentage \u003d\n              NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n          float containerCpuPercentage \u003d\n              (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\n\n          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n          // should be set as 20 * 100.\n          cpuRate \u003d Math.min(10000, (int) (containerCpuPercentage * 100));\n        }\n      }\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "21101c01f242439ec8ec40fb3a9ab1991ae0adc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2190. Added CPU and memory limit options to the default container executor for Windows containers. Contributed by Chuan Liu\n",
      "commitDate": "06/03/15 2:18 PM",
      "commitName": "21101c01f242439ec8ec40fb3a9ab1991ae0adc7",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2190. Added CPU and memory limit options to the default container executor for Windows containers. Contributed by Chuan Liu\n",
          "commitDate": "06/03/15 2:18 PM",
          "commitName": "21101c01f242439ec8ec40fb3a9ab1991ae0adc7",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/12/14 8:32 PM",
          "commitNameOld": "41a548a916d4248164cb9495320f123ec215d70e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 72.74,
          "commitsBetweenForRepo": 556,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,67 @@\n   protected String[] getRunCommand(String command, String groupId,\n-      String userName, Path pidFile, Configuration conf) {\n+      String userName, Path pidFile, Configuration conf, Resource resource) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n-      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n+      int cpuRate \u003d -1;\n+      int memory \u003d -1;\n+      if (resource !\u003d null) {\n+        if (conf\n+            .getBoolean(\n+                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n+                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n+          memory \u003d resource.getMemory();\n+        }\n+\n+        if (conf.getBoolean(\n+            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n+            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n+          int containerVCores \u003d resource.getVirtualCores();\n+          int nodeVCores \u003d conf.getInt(YarnConfiguration.NM_VCORES,\n+              YarnConfiguration.DEFAULT_NM_VCORES);\n+          // cap overall usage to the number of cores allocated to YARN\n+          int nodeCpuPercentage \u003d Math\n+              .min(\n+                  conf.getInt(\n+                      YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,\n+                      YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT),\n+                  100);\n+          nodeCpuPercentage \u003d Math.max(0, nodeCpuPercentage);\n+          if (nodeCpuPercentage \u003d\u003d 0) {\n+            String message \u003d \"Illegal value for \"\n+                + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT\n+                + \". Value cannot be less than or equal to 0.\";\n+            throw new IllegalArgumentException(message);\n+          }\n+          float yarnVCores \u003d (nodeCpuPercentage * nodeVCores) / 100.0f;\n+          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n+          // should be set as 20 * 100. The following setting is equal to:\n+          // 100 * (100 * (vcores / Total # of cores allocated to YARN))\n+          cpuRate \u003d Math.min(10000,\n+              (int) ((containerVCores * 10000) / yarnVCores));\n+        }\n+      }\n+      return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n+          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      int cpuRate \u003d -1;\n      int memory \u003d -1;\n      if (resource !\u003d null) {\n        if (conf\n            .getBoolean(\n                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n          memory \u003d resource.getMemory();\n        }\n\n        if (conf.getBoolean(\n            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n          int containerVCores \u003d resource.getVirtualCores();\n          int nodeVCores \u003d conf.getInt(YarnConfiguration.NM_VCORES,\n              YarnConfiguration.DEFAULT_NM_VCORES);\n          // cap overall usage to the number of cores allocated to YARN\n          int nodeCpuPercentage \u003d Math\n              .min(\n                  conf.getInt(\n                      YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,\n                      YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT),\n                  100);\n          nodeCpuPercentage \u003d Math.max(0, nodeCpuPercentage);\n          if (nodeCpuPercentage \u003d\u003d 0) {\n            String message \u003d \"Illegal value for \"\n                + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT\n                + \". Value cannot be less than or equal to 0.\";\n            throw new IllegalArgumentException(message);\n          }\n          float yarnVCores \u003d (nodeCpuPercentage * nodeVCores) / 100.0f;\n          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n          // should be set as 20 * 100. The following setting is equal to:\n          // 100 * (100 * (vcores / Total # of cores allocated to YARN))\n          cpuRate \u003d Math.min(10000,\n              (int) ((containerVCores * 10000) / yarnVCores));\n        }\n      }\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[command-String, groupId-String, userName-String, pidFile-Path, conf-Configuration]",
            "newValue": "[command-String, groupId-String, userName-String, pidFile-Path, conf-Configuration, resource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2190. Added CPU and memory limit options to the default container executor for Windows containers. Contributed by Chuan Liu\n",
          "commitDate": "06/03/15 2:18 PM",
          "commitName": "21101c01f242439ec8ec40fb3a9ab1991ae0adc7",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/12/14 8:32 PM",
          "commitNameOld": "41a548a916d4248164cb9495320f123ec215d70e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 72.74,
          "commitsBetweenForRepo": 556,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,67 @@\n   protected String[] getRunCommand(String command, String groupId,\n-      String userName, Path pidFile, Configuration conf) {\n+      String userName, Path pidFile, Configuration conf, Resource resource) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n-      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n+      int cpuRate \u003d -1;\n+      int memory \u003d -1;\n+      if (resource !\u003d null) {\n+        if (conf\n+            .getBoolean(\n+                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n+                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n+          memory \u003d resource.getMemory();\n+        }\n+\n+        if (conf.getBoolean(\n+            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n+            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n+          int containerVCores \u003d resource.getVirtualCores();\n+          int nodeVCores \u003d conf.getInt(YarnConfiguration.NM_VCORES,\n+              YarnConfiguration.DEFAULT_NM_VCORES);\n+          // cap overall usage to the number of cores allocated to YARN\n+          int nodeCpuPercentage \u003d Math\n+              .min(\n+                  conf.getInt(\n+                      YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,\n+                      YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT),\n+                  100);\n+          nodeCpuPercentage \u003d Math.max(0, nodeCpuPercentage);\n+          if (nodeCpuPercentage \u003d\u003d 0) {\n+            String message \u003d \"Illegal value for \"\n+                + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT\n+                + \". Value cannot be less than or equal to 0.\";\n+            throw new IllegalArgumentException(message);\n+          }\n+          float yarnVCores \u003d (nodeCpuPercentage * nodeVCores) / 100.0f;\n+          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n+          // should be set as 20 * 100. The following setting is equal to:\n+          // 100 * (100 * (vcores / Total # of cores allocated to YARN))\n+          cpuRate \u003d Math.min(10000,\n+              (int) ((containerVCores * 10000) / yarnVCores));\n+        }\n+      }\n+      return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n+          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      int cpuRate \u003d -1;\n      int memory \u003d -1;\n      if (resource !\u003d null) {\n        if (conf\n            .getBoolean(\n                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n          memory \u003d resource.getMemory();\n        }\n\n        if (conf.getBoolean(\n            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n          int containerVCores \u003d resource.getVirtualCores();\n          int nodeVCores \u003d conf.getInt(YarnConfiguration.NM_VCORES,\n              YarnConfiguration.DEFAULT_NM_VCORES);\n          // cap overall usage to the number of cores allocated to YARN\n          int nodeCpuPercentage \u003d Math\n              .min(\n                  conf.getInt(\n                      YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,\n                      YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT),\n                  100);\n          nodeCpuPercentage \u003d Math.max(0, nodeCpuPercentage);\n          if (nodeCpuPercentage \u003d\u003d 0) {\n            String message \u003d \"Illegal value for \"\n                + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT\n                + \". Value cannot be less than or equal to 0.\";\n            throw new IllegalArgumentException(message);\n          }\n          float yarnVCores \u003d (nodeCpuPercentage * nodeVCores) / 100.0f;\n          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n          // should be set as 20 * 100. The following setting is equal to:\n          // 100 * (100 * (vcores / Total # of cores allocated to YARN))\n          cpuRate \u003d Math.min(10000,\n              (int) ((containerVCores * 10000) / yarnVCores));\n        }\n      }\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", \"-m\",\n          String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange)",
      "commitMessage": "YARN-1972. Added a secure container-executor for Windows. Contributed by Remus Rusanu.\n",
      "commitDate": "01/10/14 10:14 AM",
      "commitName": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1972. Added a secure container-executor for Windows. Contributed by Remus Rusanu.\n",
          "commitDate": "01/10/14 10:14 AM",
          "commitName": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 50.26,
          "commitsBetweenForRepo": 539,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  protected static String[] getRunCommand(String command, String groupId,\n-                                          Configuration conf) {\n+  protected String[] getRunCommand(String command, String groupId,\n+      String userName, Path pidFile, Configuration conf) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[command-String, groupId-String, conf-Configuration]",
            "newValue": "[command-String, groupId-String, userName-String, pidFile-Path, conf-Configuration]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-1972. Added a secure container-executor for Windows. Contributed by Remus Rusanu.\n",
          "commitDate": "01/10/14 10:14 AM",
          "commitName": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 50.26,
          "commitsBetweenForRepo": 539,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  protected static String[] getRunCommand(String command, String groupId,\n-                                          Configuration conf) {\n+  protected String[] getRunCommand(String command, String groupId,\n+      String userName, Path pidFile, Configuration conf) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n       retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommand(String command, String groupId,\n      String userName, Path pidFile, Configuration conf) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[protected, static]",
            "newValue": "[protected]"
          }
        }
      ]
    },
    "d8ea364d07f782f8693b1ac0c340d4bd8d471c32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1271. Text file busy errors launching containers again (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529058 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 6:30 PM",
      "commitName": "d8ea364d07f782f8693b1ac0c340d4bd8d471c32",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "18/07/13 5:28 PM",
      "commitNameOld": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 77.04,
      "commitsBetweenForRepo": 459,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   protected static String[] getRunCommand(String command, String groupId,\n                                           Configuration conf) {\n     boolean containerSchedPriorityIsSet \u003d false;\n     int containerSchedPriorityAdjustment \u003d \n         YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n \n     if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n         null) {\n       containerSchedPriorityIsSet \u003d true;\n       containerSchedPriorityAdjustment \u003d conf \n           .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n           YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n     }\n   \n     if (Shell.WINDOWS) {\n       return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n           \"cmd /c \" + command };\n     } else {\n       List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n       if (containerSchedPriorityIsSet) {\n         retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n             Integer.toString(containerSchedPriorityAdjustment)));\n       }\n-      retCommand.addAll(Arrays.asList(\"bash\", \"-c\", command));\n+      retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected static String[] getRunCommand(String command, String groupId,\n                                          Configuration conf) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "5f2c518c95b2186b784877a5f41c7b71f8abc2f6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-443. allow OS scheduling priority of NM to be different than the containers it launches (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/13 6:46 AM",
      "commitName": "5f2c518c95b2186b784877a5f41c7b71f8abc2f6",
      "commitAuthor": "Thomas Graves",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-443. allow OS scheduling priority of NM to be different than the containers it launches (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454411 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/03/13 6:46 AM",
          "commitName": "5f2c518c95b2186b784877a5f41c7b71f8abc2f6",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "06/03/13 11:15 AM",
          "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 1.81,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,28 @@\n-  protected static String[] getRunCommand(String command,\n-                                          String groupId) {\n+  protected static String[] getRunCommand(String command, String groupId,\n+                                          Configuration conf) {\n+    boolean containerSchedPriorityIsSet \u003d false;\n+    int containerSchedPriorityAdjustment \u003d \n+        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n+\n+    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n+        null) {\n+      containerSchedPriorityIsSet \u003d true;\n+      containerSchedPriorityAdjustment \u003d conf \n+          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n+          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n+    }\n+  \n     if (Shell.WINDOWS) {\n       return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n-        \"cmd /c \" + command };\n+          \"cmd /c \" + command };\n     } else {\n-      return new String[] { \"bash\", \"-c\", command };\n+      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n+      if (containerSchedPriorityIsSet) {\n+        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n+            Integer.toString(containerSchedPriorityAdjustment)));\n+      }\n+      retCommand.addAll(Arrays.asList(\"bash\", \"-c\", command));\n+      return retCommand.toArray(new String[retCommand.size()]);\n     }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static String[] getRunCommand(String command, String groupId,\n                                          Configuration conf) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", \"-c\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[command-String, groupId-String]",
            "newValue": "[command-String, groupId-String, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-443. allow OS scheduling priority of NM to be different than the containers it launches (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454411 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/03/13 6:46 AM",
          "commitName": "5f2c518c95b2186b784877a5f41c7b71f8abc2f6",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "06/03/13 11:15 AM",
          "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 1.81,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,28 @@\n-  protected static String[] getRunCommand(String command,\n-                                          String groupId) {\n+  protected static String[] getRunCommand(String command, String groupId,\n+                                          Configuration conf) {\n+    boolean containerSchedPriorityIsSet \u003d false;\n+    int containerSchedPriorityAdjustment \u003d \n+        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n+\n+    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n+        null) {\n+      containerSchedPriorityIsSet \u003d true;\n+      containerSchedPriorityAdjustment \u003d conf \n+          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n+          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n+    }\n+  \n     if (Shell.WINDOWS) {\n       return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n-        \"cmd /c \" + command };\n+          \"cmd /c \" + command };\n     } else {\n-      return new String[] { \"bash\", \"-c\", command };\n+      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n+      if (containerSchedPriorityIsSet) {\n+        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n+            Integer.toString(containerSchedPriorityAdjustment)));\n+      }\n+      retCommand.addAll(Arrays.asList(\"bash\", \"-c\", command));\n+      return retCommand.toArray(new String[retCommand.size()]);\n     }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static String[] getRunCommand(String command, String groupId,\n                                          Configuration conf) {\n    boolean containerSchedPriorityIsSet \u003d false;\n    int containerSchedPriorityAdjustment \u003d \n        YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\n\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) !\u003d \n        null) {\n      containerSchedPriorityIsSet \u003d true;\n      containerSchedPriorityAdjustment \u003d conf \n          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, \n          YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\n    }\n  \n    if (Shell.WINDOWS) {\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n          \"cmd /c \" + command };\n    } else {\n      List\u003cString\u003e retCommand \u003d new ArrayList\u003cString\u003e();\n      if (containerSchedPriorityIsSet) {\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n            Integer.toString(containerSchedPriorityAdjustment)));\n      }\n      retCommand.addAll(Arrays.asList(\"bash\", \"-c\", command));\n      return retCommand.toArray(new String[retCommand.size()]);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,9 @@\n+  protected static String[] getRunCommand(String command,\n+                                          String groupId) {\n+    if (Shell.WINDOWS) {\n+      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n+        \"cmd /c \" + command };\n+    } else {\n+      return new String[] { \"bash\", \"-c\", command };\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static String[] getRunCommand(String command,\n                                          String groupId) {\n    if (Shell.WINDOWS) {\n      return new String[] { Shell.WINUTILS, \"task\", \"create\", groupId,\n        \"cmd /c \" + command };\n    } else {\n      return new String[] { \"bash\", \"-c\", command };\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java"
    }
  }
}