{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "getDomains",
  "functionId": "getDomains___owner-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 1752,
  "functionEndLine": 1799,
  "numCommitsSeen": 19,
  "timeTaken": 2877,
  "changeHistory": [
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": "Ybodychange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n     LeveldbIterator iterator \u003d null;\n     try {\n       byte[] prefix \u003d KeyBuilder.newInstance()\n           .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n       List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n       for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n           iterator.hasNext();) {\n         byte[] key \u003d iterator.peekNext().getKey();\n         if (!prefixMatches(prefix, prefix.length, key)) {\n           break;\n         }\n         // Iterator to parse the rows of an individual domain\n         KeyParser kp \u003d new KeyParser(key, prefix.length);\n         String domainId \u003d kp.getNextString();\n         byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n             .add(owner).add(domainId).getBytesForLookup();\n         TimelineDomain domainToReturn \u003d\n             getTimelineDomain(iterator, domainId, prefixExt);\n         if (domainToReturn !\u003d null) {\n           domains.add(domainToReturn);\n         }\n       }\n       // Sort the domains to return\n       Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n         @Override\n         public int compare(\n             TimelineDomain domain1, TimelineDomain domain2) {\n            int result \u003d domain2.getCreatedTime().compareTo(\n                domain1.getCreatedTime());\n            if (result \u003d\u003d 0) {\n              return domain2.getModifiedTime().compareTo(\n                  domain1.getModifiedTime());\n            } else {\n              return result;\n            }\n         }\n       });\n       TimelineDomains domainsToReturn \u003d new TimelineDomains();\n       domainsToReturn.addDomains(domains);\n       return domainsToReturn;\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanup(LOG, iterator);\n+      IOUtils.cleanupWithLogger(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    LeveldbIterator iterator \u003d null;\n    try {\n      byte[] prefix \u003d KeyBuilder.newInstance()\n          .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n          iterator.hasNext();) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n            .add(owner).add(domainId).getBytesForLookup();\n        TimelineDomain domainToReturn \u003d\n            getTimelineDomain(iterator, domainId, prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(\n            TimelineDomain domain1, TimelineDomain domain2) {\n           int result \u003d domain2.getCreatedTime().compareTo(\n               domain1.getCreatedTime());\n           if (result \u003d\u003d 0) {\n             return domain2.getModifiedTime().compareTo(\n                 domain1.getModifiedTime());\n           } else {\n             return result;\n           }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n     LeveldbIterator iterator \u003d null;\n     try {\n       byte[] prefix \u003d KeyBuilder.newInstance()\n           .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n       List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n       for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n           iterator.hasNext();) {\n         byte[] key \u003d iterator.peekNext().getKey();\n         if (!prefixMatches(prefix, prefix.length, key)) {\n           break;\n         }\n         // Iterator to parse the rows of an individual domain\n         KeyParser kp \u003d new KeyParser(key, prefix.length);\n         String domainId \u003d kp.getNextString();\n         byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n             .add(owner).add(domainId).getBytesForLookup();\n         TimelineDomain domainToReturn \u003d\n             getTimelineDomain(iterator, domainId, prefixExt);\n         if (domainToReturn !\u003d null) {\n           domains.add(domainToReturn);\n         }\n       }\n       // Sort the domains to return\n       Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n         @Override\n         public int compare(\n             TimelineDomain domain1, TimelineDomain domain2) {\n            int result \u003d domain2.getCreatedTime().compareTo(\n                domain1.getCreatedTime());\n            if (result \u003d\u003d 0) {\n              return domain2.getModifiedTime().compareTo(\n                  domain1.getModifiedTime());\n            } else {\n              return result;\n            }\n         }\n       });\n       TimelineDomains domainsToReturn \u003d new TimelineDomains();\n       domainsToReturn.addDomains(domains);\n       return domainsToReturn;\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanupWithLogger(LOG, iterator);\n+      IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    LeveldbIterator iterator \u003d null;\n    try {\n      byte[] prefix \u003d KeyBuilder.newInstance()\n          .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n          iterator.hasNext();) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n            .add(owner).add(domainId).getBytesForLookup();\n        TimelineDomain domainToReturn \u003d\n            getTimelineDomain(iterator, domainId, prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(\n            TimelineDomain domain1, TimelineDomain domain2) {\n           int result \u003d domain2.getCreatedTime().compareTo(\n               domain1.getCreatedTime());\n           if (result \u003d\u003d 0) {\n             return domain2.getModifiedTime().compareTo(\n                 domain1.getModifiedTime());\n           } else {\n             return result;\n           }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/01/17 2:24 AM",
      "commitNameOld": "4c431a694059e40e78365b02a1497a6c7e479a70",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 202.65,
      "commitsBetweenForRepo": 1063,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n     LeveldbIterator iterator \u003d null;\n     try {\n       byte[] prefix \u003d KeyBuilder.newInstance()\n           .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n       List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n       for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n           iterator.hasNext();) {\n         byte[] key \u003d iterator.peekNext().getKey();\n         if (!prefixMatches(prefix, prefix.length, key)) {\n           break;\n         }\n         // Iterator to parse the rows of an individual domain\n         KeyParser kp \u003d new KeyParser(key, prefix.length);\n         String domainId \u003d kp.getNextString();\n         byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n             .add(owner).add(domainId).getBytesForLookup();\n         TimelineDomain domainToReturn \u003d\n             getTimelineDomain(iterator, domainId, prefixExt);\n         if (domainToReturn !\u003d null) {\n           domains.add(domainToReturn);\n         }\n       }\n       // Sort the domains to return\n       Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n         @Override\n         public int compare(\n             TimelineDomain domain1, TimelineDomain domain2) {\n            int result \u003d domain2.getCreatedTime().compareTo(\n                domain1.getCreatedTime());\n            if (result \u003d\u003d 0) {\n              return domain2.getModifiedTime().compareTo(\n                  domain1.getModifiedTime());\n            } else {\n              return result;\n            }\n         }\n       });\n       TimelineDomains domainsToReturn \u003d new TimelineDomains();\n       domainsToReturn.addDomains(domains);\n       return domainsToReturn;\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanup(LOG, iterator);\n+      IOUtils.cleanupWithLogger(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    LeveldbIterator iterator \u003d null;\n    try {\n      byte[] prefix \u003d KeyBuilder.newInstance()\n          .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n          iterator.hasNext();) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n            .add(owner).add(domainId).getBytesForLookup();\n        TimelineDomain domainToReturn \u003d\n            getTimelineDomain(iterator, domainId, prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(\n            TimelineDomain domain1, TimelineDomain domain2) {\n           int result \u003d domain2.getCreatedTime().compareTo(\n               domain1.getCreatedTime());\n           if (result \u003d\u003d 0) {\n             return domain2.getModifiedTime().compareTo(\n                 domain1.getModifiedTime());\n           } else {\n             return result;\n           }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1984. LeveldbTimelineStore does not handle db exceptions properly. Contributed by Varun Saxena\n",
      "commitDate": "24/11/14 2:36 PM",
      "commitName": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n-    DBIterator iterator \u003d null;\n+    LeveldbIterator iterator \u003d null;\n     try {\n       byte[] prefix \u003d KeyBuilder.newInstance()\n           .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n       List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n-      for (iterator \u003d db.iterator(), iterator.seek(prefix);\n+      for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n           iterator.hasNext();) {\n         byte[] key \u003d iterator.peekNext().getKey();\n         if (!prefixMatches(prefix, prefix.length, key)) {\n           break;\n         }\n         // Iterator to parse the rows of an individual domain\n         KeyParser kp \u003d new KeyParser(key, prefix.length);\n         String domainId \u003d kp.getNextString();\n         byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n             .add(owner).add(domainId).getBytesForLookup();\n         TimelineDomain domainToReturn \u003d\n             getTimelineDomain(iterator, domainId, prefixExt);\n         if (domainToReturn !\u003d null) {\n           domains.add(domainToReturn);\n         }\n       }\n       // Sort the domains to return\n       Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n         @Override\n         public int compare(\n             TimelineDomain domain1, TimelineDomain domain2) {\n            int result \u003d domain2.getCreatedTime().compareTo(\n                domain1.getCreatedTime());\n            if (result \u003d\u003d 0) {\n              return domain2.getModifiedTime().compareTo(\n                  domain1.getModifiedTime());\n            } else {\n              return result;\n            }\n         }\n       });\n       TimelineDomains domainsToReturn \u003d new TimelineDomains();\n       domainsToReturn.addDomains(domains);\n       return domainsToReturn;\n+    } catch(DBException e) {\n+      throw new IOException(e);            \t\n     } finally {\n       IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    LeveldbIterator iterator \u003d null;\n    try {\n      byte[] prefix \u003d KeyBuilder.newInstance()\n          .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      for (iterator \u003d new LeveldbIterator(db), iterator.seek(prefix);\n          iterator.hasNext();) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n            .add(owner).add(domainId).getBytesForLookup();\n        TimelineDomain domainToReturn \u003d\n            getTimelineDomain(iterator, domainId, prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(\n            TimelineDomain domain1, TimelineDomain domain2) {\n           int result \u003d domain2.getCreatedTime().compareTo(\n               domain1.getCreatedTime());\n           if (result \u003d\u003d 0) {\n             return domain2.getModifiedTime().compareTo(\n                 domain1.getModifiedTime());\n           } else {\n             return result;\n           }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,46 @@\n+  public TimelineDomains getDomains(String owner)\n+      throws IOException {\n+    DBIterator iterator \u003d null;\n+    try {\n+      byte[] prefix \u003d KeyBuilder.newInstance()\n+          .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n+      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n+      for (iterator \u003d db.iterator(), iterator.seek(prefix);\n+          iterator.hasNext();) {\n+        byte[] key \u003d iterator.peekNext().getKey();\n+        if (!prefixMatches(prefix, prefix.length, key)) {\n+          break;\n+        }\n+        // Iterator to parse the rows of an individual domain\n+        KeyParser kp \u003d new KeyParser(key, prefix.length);\n+        String domainId \u003d kp.getNextString();\n+        byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n+            .add(owner).add(domainId).getBytesForLookup();\n+        TimelineDomain domainToReturn \u003d\n+            getTimelineDomain(iterator, domainId, prefixExt);\n+        if (domainToReturn !\u003d null) {\n+          domains.add(domainToReturn);\n+        }\n+      }\n+      // Sort the domains to return\n+      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n+        @Override\n+        public int compare(\n+            TimelineDomain domain1, TimelineDomain domain2) {\n+           int result \u003d domain2.getCreatedTime().compareTo(\n+               domain1.getCreatedTime());\n+           if (result \u003d\u003d 0) {\n+             return domain2.getModifiedTime().compareTo(\n+                 domain1.getModifiedTime());\n+           } else {\n+             return result;\n+           }\n+        }\n+      });\n+      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n+      domainsToReturn.addDomains(domains);\n+      return domainsToReturn;\n+    } finally {\n+      IOUtils.cleanup(LOG, iterator);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    DBIterator iterator \u003d null;\n    try {\n      byte[] prefix \u003d KeyBuilder.newInstance()\n          .add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      for (iterator \u003d db.iterator(), iterator.seek(prefix);\n          iterator.hasNext();) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX)\n            .add(owner).add(domainId).getBytesForLookup();\n        TimelineDomain domainToReturn \u003d\n            getTimelineDomain(iterator, domainId, prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(\n            TimelineDomain domain1, TimelineDomain domain2) {\n           int result \u003d domain2.getCreatedTime().compareTo(\n               domain1.getCreatedTime());\n           if (result \u003d\u003d 0) {\n             return domain2.getModifiedTime().compareTo(\n                 domain1.getModifiedTime());\n           } else {\n             return result;\n           }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
    }
  }
}