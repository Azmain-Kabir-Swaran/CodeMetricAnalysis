{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "assign",
  "functionId": "assign___allocatedContainers-List__Container__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 1165,
  "functionEndLine": 1273,
  "numCommitsSeen": 83,
  "timeTaken": 9237,
  "changeHistory": [
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
    "3f82f582e51c514cc0f052c828c2f58c6e8927ad",
    "4228de94028f1e10ca59ce23e963e488fe566909",
    "376233cdd4a4ddbde5a92a0627f78338cb4c38b7",
    "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698",
    "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
    "eff9fa1aad7e22d445a11e4ba732b4d49cdaca65",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "74748ec62570f92d57dbad3ba4cca47402990db5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": "Ybodychange",
    "3f82f582e51c514cc0f052c828c2f58c6e8927ad": "Ybodychange",
    "4228de94028f1e10ca59ce23e963e488fe566909": "Ybodychange",
    "376233cdd4a4ddbde5a92a0627f78338cb4c38b7": "Ybodychange",
    "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698": "Ybodychange",
    "28c308d5e81432b79f9c9e14df316a52cc7ba48f": "Ybodychange",
    "eff9fa1aad7e22d445a11e4ba732b4d49cdaca65": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "74748ec62570f92d57dbad3ba4cca47402990db5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6703. Add flag to allow MapReduce AM to request for OPPORTUNISTIC containers. Contributed by Arun Suresh\n",
      "commitDate": "24/05/16 7:47 PM",
      "commitName": "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/05/16 3:25 PM",
      "commitNameOld": "c9bb96fa81fc925e33ccc0b02c98cc2d929df120",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,109 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       int reducePending \u003d reduces.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         Resource allocatedResource \u003d allocated.getResource();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n-            || PRIORITY_MAP.equals(priority)) {\n+            || PRIORITY_MAP.equals(priority)\n+            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n           if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n               mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceRequest\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n               reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || (reducePending \u003c\u003d 0)) {\n             LOG.info(\"Cannot assign container \" + allocated\n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceRequest\n                 + \" or no pending reduce tasks.\");\n             isAssignable \u003d false;\n           } else {\n             reducePending--;\n           }\n         } else {\n           LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n               \". Returning to RM...\");\n           isAssignable \u003d false;\n         }\n         \n         if(!isAssignable) {\n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n         \n         // do not assign if allocated container is on a  \n         // blacklisted host\n         String allocatedHost \u003d allocated.getNodeId().getHost();\n         if (isNodeBlacklisted(allocatedHost)) {\n           // we need to request for a new container \n           // and release the current one\n           LOG.info(\"Got allocated container on a blacklisted \"\n               + \" host \"+allocatedHost\n               +\". Releasing container \" + allocated);\n \n           // find the request matching this allocated container \n           // and replace it with a new one \n           ContainerRequest toBeReplacedReq \u003d \n               getContainerReqToReplace(allocated);\n           if (toBeReplacedReq !\u003d null) {\n             LOG.info(\"Placing a new container request for task attempt \" \n                 + toBeReplacedReq.attemptID);\n             ContainerRequest newReq \u003d \n                 getFilteredContainerRequest(toBeReplacedReq);\n             decContainerReq(toBeReplacedReq);\n             if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                 TaskType.MAP) {\n               maps.put(newReq.attemptID, newReq);\n             }\n             else {\n               reduces.put(newReq.attemptID, newReq);\n             }\n             addContainerReq(newReq);\n           }\n           else {\n             LOG.info(\"Could not map allocated container to a valid request.\"\n                 + \" Releasing allocated container \" + allocated);\n           }\n           \n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n       }\n \n       assignContainers(allocatedContainers);\n        \n       // release container if we could not assign it \n       it \u003d allocatedContainers.iterator();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         LOG.info(\"Releasing unassigned container \" + allocated);\n         containerNotAssigned(allocated);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      int reducePending \u003d reduces.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        Resource allocatedResource \u003d allocated.getResource();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)\n            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceRequest\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || (reducePending \u003c\u003d 0)) {\n            LOG.info(\"Cannot assign container \" + allocated\n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceRequest\n                + \" or no pending reduce tasks.\");\n            isAssignable \u003d false;\n          } else {\n            reducePending--;\n          }\n        } else {\n          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n              \". Returning to RM...\");\n          isAssignable \u003d false;\n        }\n        \n        if(!isAssignable) {\n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n        \n        // do not assign if allocated container is on a  \n        // blacklisted host\n        String allocatedHost \u003d allocated.getNodeId().getHost();\n        if (isNodeBlacklisted(allocatedHost)) {\n          // we need to request for a new container \n          // and release the current one\n          LOG.info(\"Got allocated container on a blacklisted \"\n              + \" host \"+allocatedHost\n              +\". Releasing container \" + allocated);\n\n          // find the request matching this allocated container \n          // and replace it with a new one \n          ContainerRequest toBeReplacedReq \u003d \n              getContainerReqToReplace(allocated);\n          if (toBeReplacedReq !\u003d null) {\n            LOG.info(\"Placing a new container request for task attempt \" \n                + toBeReplacedReq.attemptID);\n            ContainerRequest newReq \u003d \n                getFilteredContainerRequest(toBeReplacedReq);\n            decContainerReq(toBeReplacedReq);\n            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                TaskType.MAP) {\n              maps.put(newReq.attemptID, newReq);\n            }\n            else {\n              reduces.put(newReq.attemptID, newReq);\n            }\n            addContainerReq(newReq);\n          }\n          else {\n            LOG.info(\"Could not map allocated container to a valid request.\"\n                + \" Releasing allocated container \" + allocated);\n          }\n          \n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n      }\n\n      assignContainers(allocatedContainers);\n       \n      // release container if we could not assign it \n      it \u003d allocatedContainers.iterator();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Releasing unassigned container \" + allocated);\n        containerNotAssigned(allocated);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "3f82f582e51c514cc0f052c828c2f58c6e8927ad": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5002. AM could potentially allocate a reduce container to a map attempt. Contributed by Chang Li\n",
      "commitDate": "17/09/15 11:17 AM",
      "commitName": "3f82f582e51c514cc0f052c828c2f58c6e8927ad",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/08/15 12:52 AM",
      "commitNameOld": "8dfec7a1979e8f70f8355c096874921d368342ef",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 33.43,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,108 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n+      int reducePending \u003d reduces.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         Resource allocatedResource \u003d allocated.getResource();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n           if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n               mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceRequest\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n               reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n-              || reduces.isEmpty()) {\n-            LOG.info(\"Cannot assign container \" + allocated \n+              || (reducePending \u003c\u003d 0)) {\n+            LOG.info(\"Cannot assign container \" + allocated\n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceRequest\n-                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n-                + reduces.isEmpty()); \n+                + \" or no pending reduce tasks.\");\n             isAssignable \u003d false;\n+          } else {\n+            reducePending--;\n           }\n         } else {\n           LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n               \". Returning to RM...\");\n           isAssignable \u003d false;\n         }\n         \n         if(!isAssignable) {\n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n         \n         // do not assign if allocated container is on a  \n         // blacklisted host\n         String allocatedHost \u003d allocated.getNodeId().getHost();\n         if (isNodeBlacklisted(allocatedHost)) {\n           // we need to request for a new container \n           // and release the current one\n           LOG.info(\"Got allocated container on a blacklisted \"\n               + \" host \"+allocatedHost\n               +\". Releasing container \" + allocated);\n \n           // find the request matching this allocated container \n           // and replace it with a new one \n           ContainerRequest toBeReplacedReq \u003d \n               getContainerReqToReplace(allocated);\n           if (toBeReplacedReq !\u003d null) {\n             LOG.info(\"Placing a new container request for task attempt \" \n                 + toBeReplacedReq.attemptID);\n             ContainerRequest newReq \u003d \n                 getFilteredContainerRequest(toBeReplacedReq);\n             decContainerReq(toBeReplacedReq);\n             if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                 TaskType.MAP) {\n               maps.put(newReq.attemptID, newReq);\n             }\n             else {\n               reduces.put(newReq.attemptID, newReq);\n             }\n             addContainerReq(newReq);\n           }\n           else {\n             LOG.info(\"Could not map allocated container to a valid request.\"\n                 + \" Releasing allocated container \" + allocated);\n           }\n           \n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n       }\n \n       assignContainers(allocatedContainers);\n        \n       // release container if we could not assign it \n       it \u003d allocatedContainers.iterator();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         LOG.info(\"Releasing unassigned container \" + allocated);\n         containerNotAssigned(allocated);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      int reducePending \u003d reduces.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        Resource allocatedResource \u003d allocated.getResource();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceRequest\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || (reducePending \u003c\u003d 0)) {\n            LOG.info(\"Cannot assign container \" + allocated\n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceRequest\n                + \" or no pending reduce tasks.\");\n            isAssignable \u003d false;\n          } else {\n            reducePending--;\n          }\n        } else {\n          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n              \". Returning to RM...\");\n          isAssignable \u003d false;\n        }\n        \n        if(!isAssignable) {\n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n        \n        // do not assign if allocated container is on a  \n        // blacklisted host\n        String allocatedHost \u003d allocated.getNodeId().getHost();\n        if (isNodeBlacklisted(allocatedHost)) {\n          // we need to request for a new container \n          // and release the current one\n          LOG.info(\"Got allocated container on a blacklisted \"\n              + \" host \"+allocatedHost\n              +\". Releasing container \" + allocated);\n\n          // find the request matching this allocated container \n          // and replace it with a new one \n          ContainerRequest toBeReplacedReq \u003d \n              getContainerReqToReplace(allocated);\n          if (toBeReplacedReq !\u003d null) {\n            LOG.info(\"Placing a new container request for task attempt \" \n                + toBeReplacedReq.attemptID);\n            ContainerRequest newReq \u003d \n                getFilteredContainerRequest(toBeReplacedReq);\n            decContainerReq(toBeReplacedReq);\n            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                TaskType.MAP) {\n              maps.put(newReq.attemptID, newReq);\n            }\n            else {\n              reduces.put(newReq.attemptID, newReq);\n            }\n            addContainerReq(newReq);\n          }\n          else {\n            LOG.info(\"Could not map allocated container to a valid request.\"\n                + \" Releasing allocated container \" + allocated);\n          }\n          \n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n      }\n\n      assignContainers(allocatedContainers);\n       \n      // release container if we could not assign it \n      it \u003d allocatedContainers.iterator();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Releasing unassigned container \" + allocated);\n        containerNotAssigned(allocated);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "4228de94028f1e10ca59ce23e963e488fe566909": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.\n",
      "commitDate": "03/03/15 2:02 AM",
      "commitName": "4228de94028f1e10ca59ce23e963e488fe566909",
      "commitAuthor": "Junping Du",
      "commitDateOld": "28/01/15 3:51 PM",
      "commitNameOld": "cff05bff1fe24628677d41a0d537f2c383b44faf",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.42,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,106 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         Resource allocatedResource \u003d allocated.getResource();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n           if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n               mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceRequest\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n               reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceRequest\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         } else {\n           LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n               \". Returning to RM...\");\n           isAssignable \u003d false;\n         }\n         \n         if(!isAssignable) {\n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n         \n         // do not assign if allocated container is on a  \n         // blacklisted host\n         String allocatedHost \u003d allocated.getNodeId().getHost();\n         if (isNodeBlacklisted(allocatedHost)) {\n           // we need to request for a new container \n           // and release the current one\n           LOG.info(\"Got allocated container on a blacklisted \"\n               + \" host \"+allocatedHost\n               +\". Releasing container \" + allocated);\n \n           // find the request matching this allocated container \n           // and replace it with a new one \n           ContainerRequest toBeReplacedReq \u003d \n               getContainerReqToReplace(allocated);\n           if (toBeReplacedReq !\u003d null) {\n             LOG.info(\"Placing a new container request for task attempt \" \n                 + toBeReplacedReq.attemptID);\n             ContainerRequest newReq \u003d \n                 getFilteredContainerRequest(toBeReplacedReq);\n             decContainerReq(toBeReplacedReq);\n             if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                 TaskType.MAP) {\n               maps.put(newReq.attemptID, newReq);\n             }\n             else {\n               reduces.put(newReq.attemptID, newReq);\n             }\n             addContainerReq(newReq);\n           }\n           else {\n             LOG.info(\"Could not map allocated container to a valid request.\"\n                 + \" Releasing allocated container \" + allocated);\n           }\n           \n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n       }\n \n       assignContainers(allocatedContainers);\n        \n       // release container if we could not assign it \n       it \u003d allocatedContainers.iterator();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n-        LOG.info(\"Releasing unassigned and invalid container \" \n-            + allocated + \". RM may have assignment issues\");\n+        LOG.info(\"Releasing unassigned container \" + allocated);\n         containerNotAssigned(allocated);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        Resource allocatedResource \u003d allocated.getResource();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceRequest\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceRequest\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        } else {\n          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n              \". Returning to RM...\");\n          isAssignable \u003d false;\n        }\n        \n        if(!isAssignable) {\n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n        \n        // do not assign if allocated container is on a  \n        // blacklisted host\n        String allocatedHost \u003d allocated.getNodeId().getHost();\n        if (isNodeBlacklisted(allocatedHost)) {\n          // we need to request for a new container \n          // and release the current one\n          LOG.info(\"Got allocated container on a blacklisted \"\n              + \" host \"+allocatedHost\n              +\". Releasing container \" + allocated);\n\n          // find the request matching this allocated container \n          // and replace it with a new one \n          ContainerRequest toBeReplacedReq \u003d \n              getContainerReqToReplace(allocated);\n          if (toBeReplacedReq !\u003d null) {\n            LOG.info(\"Placing a new container request for task attempt \" \n                + toBeReplacedReq.attemptID);\n            ContainerRequest newReq \u003d \n                getFilteredContainerRequest(toBeReplacedReq);\n            decContainerReq(toBeReplacedReq);\n            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                TaskType.MAP) {\n              maps.put(newReq.attemptID, newReq);\n            }\n            else {\n              reduces.put(newReq.attemptID, newReq);\n            }\n            addContainerReq(newReq);\n          }\n          else {\n            LOG.info(\"Could not map allocated container to a valid request.\"\n                + \" Releasing allocated container \" + allocated);\n          }\n          \n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n      }\n\n      assignContainers(allocatedContainers);\n       \n      // release container if we could not assign it \n      it \u003d allocatedContainers.iterator();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Releasing unassigned container \" + allocated);\n        containerNotAssigned(allocated);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "376233cdd4a4ddbde5a92a0627f78338cb4c38b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5279. Made MR headroom calculation honor cpu dimension when YARN scheduler resource type is memory plus cpu. Contributed by Peng Zhang and Varun Vasudev.\n",
      "commitDate": "22/09/14 9:28 AM",
      "commitName": "376233cdd4a4ddbde5a92a0627f78338cb4c38b7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "08/08/14 2:38 PM",
      "commitNameOld": "eeb4acd955802e2a84ea94cecf2e2341b83d5efb",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 44.78,
      "commitsBetweenForRepo": 414,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,107 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n-        int allocatedMemory \u003d allocated.getResource().getMemory();\n+        Resource allocatedResource \u003d allocated.getResource();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n-          if (allocatedMemory \u003c mapResourceRequest\n+          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n+              mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceRequest\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n-          if (allocatedMemory \u003c reduceResourceRequest\n+          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n+              reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceRequest\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         } else {\n           LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n               \". Returning to RM...\");\n           isAssignable \u003d false;\n         }\n         \n         if(!isAssignable) {\n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n         \n         // do not assign if allocated container is on a  \n         // blacklisted host\n         String allocatedHost \u003d allocated.getNodeId().getHost();\n         if (isNodeBlacklisted(allocatedHost)) {\n           // we need to request for a new container \n           // and release the current one\n           LOG.info(\"Got allocated container on a blacklisted \"\n               + \" host \"+allocatedHost\n               +\". Releasing container \" + allocated);\n \n           // find the request matching this allocated container \n           // and replace it with a new one \n           ContainerRequest toBeReplacedReq \u003d \n               getContainerReqToReplace(allocated);\n           if (toBeReplacedReq !\u003d null) {\n             LOG.info(\"Placing a new container request for task attempt \" \n                 + toBeReplacedReq.attemptID);\n             ContainerRequest newReq \u003d \n                 getFilteredContainerRequest(toBeReplacedReq);\n             decContainerReq(toBeReplacedReq);\n             if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                 TaskType.MAP) {\n               maps.put(newReq.attemptID, newReq);\n             }\n             else {\n               reduces.put(newReq.attemptID, newReq);\n             }\n             addContainerReq(newReq);\n           }\n           else {\n             LOG.info(\"Could not map allocated container to a valid request.\"\n                 + \" Releasing allocated container \" + allocated);\n           }\n           \n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n       }\n \n       assignContainers(allocatedContainers);\n        \n       // release container if we could not assign it \n       it \u003d allocatedContainers.iterator();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         LOG.info(\"Releasing unassigned and invalid container \" \n             + allocated + \". RM may have assignment issues\");\n         containerNotAssigned(allocated);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        Resource allocatedResource \u003d allocated.getResource();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              mapResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceRequest\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,\n              reduceResourceRequest, getSchedulerResourceTypes()) \u003c\u003d 0\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceRequest\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        } else {\n          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n              \". Returning to RM...\");\n          isAssignable \u003d false;\n        }\n        \n        if(!isAssignable) {\n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n        \n        // do not assign if allocated container is on a  \n        // blacklisted host\n        String allocatedHost \u003d allocated.getNodeId().getHost();\n        if (isNodeBlacklisted(allocatedHost)) {\n          // we need to request for a new container \n          // and release the current one\n          LOG.info(\"Got allocated container on a blacklisted \"\n              + \" host \"+allocatedHost\n              +\". Releasing container \" + allocated);\n\n          // find the request matching this allocated container \n          // and replace it with a new one \n          ContainerRequest toBeReplacedReq \u003d \n              getContainerReqToReplace(allocated);\n          if (toBeReplacedReq !\u003d null) {\n            LOG.info(\"Placing a new container request for task attempt \" \n                + toBeReplacedReq.attemptID);\n            ContainerRequest newReq \u003d \n                getFilteredContainerRequest(toBeReplacedReq);\n            decContainerReq(toBeReplacedReq);\n            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                TaskType.MAP) {\n              maps.put(newReq.attemptID, newReq);\n            }\n            else {\n              reduces.put(newReq.attemptID, newReq);\n            }\n            addContainerReq(newReq);\n          }\n          else {\n            LOG.info(\"Could not map allocated container to a valid request.\"\n                + \" Releasing allocated container \" + allocated);\n          }\n          \n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n      }\n\n      assignContainers(allocatedContainers);\n       \n      // release container if we could not assign it \n      it \u003d allocatedContainers.iterator();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Releasing unassigned and invalid container \" \n            + allocated + \". RM may have assignment issues\");\n        containerNotAssigned(allocated);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5844. Add a configurable delay to reducer-preemption. (Maysam Yabandeh via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 10:22 AM",
      "commitName": "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/04/14 11:44 AM",
      "commitNameOld": "4a91b876db768e7997e740d754aeea66c3b7a36c",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 57.94,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,105 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         int allocatedMemory \u003d allocated.getResource().getMemory();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n-          if (allocatedMemory \u003c mapResourceReqt\n+          if (allocatedMemory \u003c mapResourceRequest\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n-                + \" container memory less than required \" + mapResourceReqt\n+                + \" container memory less than required \" + mapResourceRequest\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n-          if (allocatedMemory \u003c reduceResourceReqt\n+          if (allocatedMemory \u003c reduceResourceRequest\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n-                + \" container memory less than required \" + reduceResourceReqt\n+                + \" container memory less than required \" + reduceResourceRequest\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         } else {\n           LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n               \". Returning to RM...\");\n           isAssignable \u003d false;\n         }\n         \n         if(!isAssignable) {\n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n         \n         // do not assign if allocated container is on a  \n         // blacklisted host\n         String allocatedHost \u003d allocated.getNodeId().getHost();\n         if (isNodeBlacklisted(allocatedHost)) {\n           // we need to request for a new container \n           // and release the current one\n           LOG.info(\"Got allocated container on a blacklisted \"\n               + \" host \"+allocatedHost\n               +\". Releasing container \" + allocated);\n \n           // find the request matching this allocated container \n           // and replace it with a new one \n           ContainerRequest toBeReplacedReq \u003d \n               getContainerReqToReplace(allocated);\n           if (toBeReplacedReq !\u003d null) {\n             LOG.info(\"Placing a new container request for task attempt \" \n                 + toBeReplacedReq.attemptID);\n             ContainerRequest newReq \u003d \n                 getFilteredContainerRequest(toBeReplacedReq);\n             decContainerReq(toBeReplacedReq);\n             if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                 TaskType.MAP) {\n               maps.put(newReq.attemptID, newReq);\n             }\n             else {\n               reduces.put(newReq.attemptID, newReq);\n             }\n             addContainerReq(newReq);\n           }\n           else {\n             LOG.info(\"Could not map allocated container to a valid request.\"\n                 + \" Releasing allocated container \" + allocated);\n           }\n           \n           // release container if we could not assign it \n           containerNotAssigned(allocated);\n           it.remove();\n           continue;\n         }\n       }\n \n       assignContainers(allocatedContainers);\n        \n       // release container if we could not assign it \n       it \u003d allocatedContainers.iterator();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         LOG.info(\"Releasing unassigned and invalid container \" \n             + allocated + \". RM may have assignment issues\");\n         containerNotAssigned(allocated);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        int allocatedMemory \u003d allocated.getResource().getMemory();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocatedMemory \u003c mapResourceRequest\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceRequest\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocatedMemory \u003c reduceResourceRequest\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceRequest\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        } else {\n          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n              \". Returning to RM...\");\n          isAssignable \u003d false;\n        }\n        \n        if(!isAssignable) {\n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n        \n        // do not assign if allocated container is on a  \n        // blacklisted host\n        String allocatedHost \u003d allocated.getNodeId().getHost();\n        if (isNodeBlacklisted(allocatedHost)) {\n          // we need to request for a new container \n          // and release the current one\n          LOG.info(\"Got allocated container on a blacklisted \"\n              + \" host \"+allocatedHost\n              +\". Releasing container \" + allocated);\n\n          // find the request matching this allocated container \n          // and replace it with a new one \n          ContainerRequest toBeReplacedReq \u003d \n              getContainerReqToReplace(allocated);\n          if (toBeReplacedReq !\u003d null) {\n            LOG.info(\"Placing a new container request for task attempt \" \n                + toBeReplacedReq.attemptID);\n            ContainerRequest newReq \u003d \n                getFilteredContainerRequest(toBeReplacedReq);\n            decContainerReq(toBeReplacedReq);\n            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                TaskType.MAP) {\n              maps.put(newReq.attemptID, newReq);\n            }\n            else {\n              reduces.put(newReq.attemptID, newReq);\n            }\n            addContainerReq(newReq);\n          }\n          else {\n            LOG.info(\"Could not map allocated container to a valid request.\"\n                + \" Releasing allocated container \" + allocated);\n          }\n          \n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n      }\n\n      assignContainers(allocatedContainers);\n       \n      // release container if we could not assign it \n      it \u003d allocatedContainers.iterator();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Releasing unassigned and invalid container \" \n            + allocated + \". RM may have assignment issues\");\n        containerNotAssigned(allocated);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "28c308d5e81432b79f9c9e14df316a52cc7ba48f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4893. Fixed MR ApplicationMaster to do optimal assignment of containers to get maximum locality. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440749 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/13 4:28 PM",
      "commitName": "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/01/13 4:21 PM",
      "commitNameOld": "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,116 +1,105 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         int allocatedMemory \u003d allocated.getResource().getMemory();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n           if (allocatedMemory \u003c mapResourceReqt\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceReqt\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (allocatedMemory \u003c reduceResourceReqt\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceReqt\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n-        }          \n+        } else {\n+          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n+              \". Returning to RM...\");\n+          isAssignable \u003d false;\n+        }\n         \n-        boolean blackListed \u003d false;         \n-        ContainerRequest assigned \u003d null;\n+        if(!isAssignable) {\n+          // release container if we could not assign it \n+          containerNotAssigned(allocated);\n+          it.remove();\n+          continue;\n+        }\n         \n-        if (isAssignable) {\n-          // do not assign if allocated container is on a  \n-          // blacklisted host\n-          String allocatedHost \u003d allocated.getNodeId().getHost();\n-          blackListed \u003d isNodeBlacklisted(allocatedHost);\n-          if (blackListed) {\n-            // we need to request for a new container \n-            // and release the current one\n-            LOG.info(\"Got allocated container on a blacklisted \"\n-                + \" host \"+allocatedHost\n-                +\". Releasing container \" + allocated);\n+        // do not assign if allocated container is on a  \n+        // blacklisted host\n+        String allocatedHost \u003d allocated.getNodeId().getHost();\n+        if (isNodeBlacklisted(allocatedHost)) {\n+          // we need to request for a new container \n+          // and release the current one\n+          LOG.info(\"Got allocated container on a blacklisted \"\n+              + \" host \"+allocatedHost\n+              +\". Releasing container \" + allocated);\n \n-            // find the request matching this allocated container \n-            // and replace it with a new one \n-            ContainerRequest toBeReplacedReq \u003d \n-                getContainerReqToReplace(allocated);\n-            if (toBeReplacedReq !\u003d null) {\n-              LOG.info(\"Placing a new container request for task attempt \" \n-                  + toBeReplacedReq.attemptID);\n-              ContainerRequest newReq \u003d \n-                  getFilteredContainerRequest(toBeReplacedReq);\n-              decContainerReq(toBeReplacedReq);\n-              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n-                  TaskType.MAP) {\n-                maps.put(newReq.attemptID, newReq);\n-              }\n-              else {\n-                reduces.put(newReq.attemptID, newReq);\n-              }\n-              addContainerReq(newReq);\n+          // find the request matching this allocated container \n+          // and replace it with a new one \n+          ContainerRequest toBeReplacedReq \u003d \n+              getContainerReqToReplace(allocated);\n+          if (toBeReplacedReq !\u003d null) {\n+            LOG.info(\"Placing a new container request for task attempt \" \n+                + toBeReplacedReq.attemptID);\n+            ContainerRequest newReq \u003d \n+                getFilteredContainerRequest(toBeReplacedReq);\n+            decContainerReq(toBeReplacedReq);\n+            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n+                TaskType.MAP) {\n+              maps.put(newReq.attemptID, newReq);\n             }\n             else {\n-              LOG.info(\"Could not map allocated container to a valid request.\"\n-                  + \" Releasing allocated container \" + allocated);\n+              reduces.put(newReq.attemptID, newReq);\n             }\n+            addContainerReq(newReq);\n           }\n           else {\n-            assigned \u003d assign(allocated);\n-            if (assigned !\u003d null) {\n-              // Update resource requests\n-              decContainerReq(assigned);\n-\n-              // send the container-assigned event to task attempt\n-              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n-                  assigned.attemptID, allocated, applicationACLs));\n-\n-              assignedRequests.add(allocated, assigned.attemptID);\n-\n-              if (LOG.isDebugEnabled()) {\n-                LOG.info(\"Assigned container (\" + allocated + \") \"\n-                    + \" to task \" + assigned.attemptID + \" on node \"\n-                    + allocated.getNodeId().toString());\n-              }\n-            }\n-            else {\n-              //not assigned to any request, release the container\n-              LOG.info(\"Releasing unassigned and invalid container \" \n-                  + allocated + \". RM has gone crazy, someone go look!\"\n-                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n-            }\n+            LOG.info(\"Could not map allocated container to a valid request.\"\n+                + \" Releasing allocated container \" + allocated);\n           }\n+          \n+          // release container if we could not assign it \n+          containerNotAssigned(allocated);\n+          it.remove();\n+          continue;\n         }\n-        \n-        // release container if it was blacklisted \n-        // or if we could not assign it \n-        if (blackListed || assigned \u003d\u003d null) {\n-          containersReleased++;\n-          release(allocated.getId());\n-        }\n+      }\n+\n+      assignContainers(allocatedContainers);\n+       \n+      // release container if we could not assign it \n+      it \u003d allocatedContainers.iterator();\n+      while (it.hasNext()) {\n+        Container allocated \u003d it.next();\n+        LOG.info(\"Releasing unassigned and invalid container \" \n+            + allocated + \". RM may have assignment issues\");\n+        containerNotAssigned(allocated);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        int allocatedMemory \u003d allocated.getResource().getMemory();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocatedMemory \u003c mapResourceReqt\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceReqt\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocatedMemory \u003c reduceResourceReqt\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceReqt\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        } else {\n          LOG.warn(\"Container allocated at unwanted priority: \" + priority + \n              \". Returning to RM...\");\n          isAssignable \u003d false;\n        }\n        \n        if(!isAssignable) {\n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n        \n        // do not assign if allocated container is on a  \n        // blacklisted host\n        String allocatedHost \u003d allocated.getNodeId().getHost();\n        if (isNodeBlacklisted(allocatedHost)) {\n          // we need to request for a new container \n          // and release the current one\n          LOG.info(\"Got allocated container on a blacklisted \"\n              + \" host \"+allocatedHost\n              +\". Releasing container \" + allocated);\n\n          // find the request matching this allocated container \n          // and replace it with a new one \n          ContainerRequest toBeReplacedReq \u003d \n              getContainerReqToReplace(allocated);\n          if (toBeReplacedReq !\u003d null) {\n            LOG.info(\"Placing a new container request for task attempt \" \n                + toBeReplacedReq.attemptID);\n            ContainerRequest newReq \u003d \n                getFilteredContainerRequest(toBeReplacedReq);\n            decContainerReq(toBeReplacedReq);\n            if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                TaskType.MAP) {\n              maps.put(newReq.attemptID, newReq);\n            }\n            else {\n              reduces.put(newReq.attemptID, newReq);\n            }\n            addContainerReq(newReq);\n          }\n          else {\n            LOG.info(\"Could not map allocated container to a valid request.\"\n                + \" Releasing allocated container \" + allocated);\n          }\n          \n          // release container if we could not assign it \n          containerNotAssigned(allocated);\n          it.remove();\n          continue;\n        }\n      }\n\n      assignContainers(allocatedContainers);\n       \n      // release container if we could not assign it \n      it \u003d allocatedContainers.iterator();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Releasing unassigned and invalid container \" \n            + allocated + \". RM may have assignment issues\");\n        containerNotAssigned(allocated);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "eff9fa1aad7e22d445a11e4ba732b4d49cdaca65": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3921. MR AM should act on node health status changes. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349065 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 4:14 PM",
      "commitName": "eff9fa1aad7e22d445a11e4ba732b4d49cdaca65",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "06/02/12 2:01 PM",
      "commitNameOld": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 126.05,
      "commitsBetweenForRepo": 880,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,117 +1,116 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigning container \" + allocated.getId()\n               + \" with priority \" + allocated.getPriority() + \" to NM \"\n               + allocated.getNodeId());\n         }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         int allocatedMemory \u003d allocated.getResource().getMemory();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n           if (allocatedMemory \u003c mapResourceReqt\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceReqt\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (allocatedMemory \u003c reduceResourceReqt\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceReqt\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         }          \n         \n         boolean blackListed \u003d false;         \n         ContainerRequest assigned \u003d null;\n         \n-        ContainerId allocatedContainerId \u003d allocated.getId();\n         if (isAssignable) {\n           // do not assign if allocated container is on a  \n           // blacklisted host\n           String allocatedHost \u003d allocated.getNodeId().getHost();\n           blackListed \u003d isNodeBlacklisted(allocatedHost);\n           if (blackListed) {\n             // we need to request for a new container \n             // and release the current one\n             LOG.info(\"Got allocated container on a blacklisted \"\n                 + \" host \"+allocatedHost\n                 +\". Releasing container \" + allocated);\n \n             // find the request matching this allocated container \n             // and replace it with a new one \n             ContainerRequest toBeReplacedReq \u003d \n                 getContainerReqToReplace(allocated);\n             if (toBeReplacedReq !\u003d null) {\n               LOG.info(\"Placing a new container request for task attempt \" \n                   + toBeReplacedReq.attemptID);\n               ContainerRequest newReq \u003d \n                   getFilteredContainerRequest(toBeReplacedReq);\n               decContainerReq(toBeReplacedReq);\n               if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                   TaskType.MAP) {\n                 maps.put(newReq.attemptID, newReq);\n               }\n               else {\n                 reduces.put(newReq.attemptID, newReq);\n               }\n               addContainerReq(newReq);\n             }\n             else {\n               LOG.info(\"Could not map allocated container to a valid request.\"\n                   + \" Releasing allocated container \" + allocated);\n             }\n           }\n           else {\n             assigned \u003d assign(allocated);\n             if (assigned !\u003d null) {\n               // Update resource requests\n               decContainerReq(assigned);\n \n               // send the container-assigned event to task attempt\n               eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                   assigned.attemptID, allocated, applicationACLs));\n \n-              assignedRequests.add(allocatedContainerId, assigned.attemptID);\n+              assignedRequests.add(allocated, assigned.attemptID);\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.info(\"Assigned container (\" + allocated + \") \"\n                     + \" to task \" + assigned.attemptID + \" on node \"\n                     + allocated.getNodeId().toString());\n               }\n             }\n             else {\n               //not assigned to any request, release the container\n               LOG.info(\"Releasing unassigned and invalid container \" \n                   + allocated + \". RM has gone crazy, someone go look!\"\n                   + \" Hey RM, if you are so rich, go donate to non-profits!\");\n             }\n           }\n         }\n         \n         // release container if it was blacklisted \n         // or if we could not assign it \n         if (blackListed || assigned \u003d\u003d null) {\n           containersReleased++;\n-          release(allocatedContainerId);\n+          release(allocated.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        int allocatedMemory \u003d allocated.getResource().getMemory();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocatedMemory \u003c mapResourceReqt\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceReqt\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocatedMemory \u003c reduceResourceReqt\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceReqt\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        }          \n        \n        boolean blackListed \u003d false;         \n        ContainerRequest assigned \u003d null;\n        \n        if (isAssignable) {\n          // do not assign if allocated container is on a  \n          // blacklisted host\n          String allocatedHost \u003d allocated.getNodeId().getHost();\n          blackListed \u003d isNodeBlacklisted(allocatedHost);\n          if (blackListed) {\n            // we need to request for a new container \n            // and release the current one\n            LOG.info(\"Got allocated container on a blacklisted \"\n                + \" host \"+allocatedHost\n                +\". Releasing container \" + allocated);\n\n            // find the request matching this allocated container \n            // and replace it with a new one \n            ContainerRequest toBeReplacedReq \u003d \n                getContainerReqToReplace(allocated);\n            if (toBeReplacedReq !\u003d null) {\n              LOG.info(\"Placing a new container request for task attempt \" \n                  + toBeReplacedReq.attemptID);\n              ContainerRequest newReq \u003d \n                  getFilteredContainerRequest(toBeReplacedReq);\n              decContainerReq(toBeReplacedReq);\n              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                  TaskType.MAP) {\n                maps.put(newReq.attemptID, newReq);\n              }\n              else {\n                reduces.put(newReq.attemptID, newReq);\n              }\n              addContainerReq(newReq);\n            }\n            else {\n              LOG.info(\"Could not map allocated container to a valid request.\"\n                  + \" Releasing allocated container \" + allocated);\n            }\n          }\n          else {\n            assigned \u003d assign(allocated);\n            if (assigned !\u003d null) {\n              // Update resource requests\n              decContainerReq(assigned);\n\n              // send the container-assigned event to task attempt\n              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                  assigned.attemptID, allocated, applicationACLs));\n\n              assignedRequests.add(allocated, assigned.attemptID);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.info(\"Assigned container (\" + allocated + \") \"\n                    + \" to task \" + assigned.attemptID + \" on node \"\n                    + allocated.getNodeId().toString());\n              }\n            }\n            else {\n              //not assigned to any request, release the container\n              LOG.info(\"Releasing unassigned and invalid container \" \n                  + allocated + \". RM has gone crazy, someone go look!\"\n                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n            }\n          }\n        }\n        \n        // release container if it was blacklisted \n        // or if we could not assign it \n        if (blackListed || assigned \u003d\u003d null) {\n          containersReleased++;\n          release(allocated.getId());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "03/02/12 4:04 PM",
      "commitNameOld": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,117 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n-        LOG.info(\"Assigning container \" + allocated.getId() +\n-            \" with priority \" + allocated.getPriority() +\n-            \" to NM \" + allocated.getNodeId());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Assigning container \" + allocated.getId()\n+              + \" with priority \" + allocated.getPriority() + \" to NM \"\n+              + allocated.getNodeId());\n+        }\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n+        int allocatedMemory \u003d allocated.getResource().getMemory();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n-          if (allocated.getResource().getMemory() \u003c mapResourceReqt\n+          if (allocatedMemory \u003c mapResourceReqt\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceReqt\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n-          if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n+          if (allocatedMemory \u003c reduceResourceReqt\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceReqt\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         }          \n         \n         boolean blackListed \u003d false;         \n         ContainerRequest assigned \u003d null;\n         \n+        ContainerId allocatedContainerId \u003d allocated.getId();\n         if (isAssignable) {\n           // do not assign if allocated container is on a  \n           // blacklisted host\n-          blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n+          String allocatedHost \u003d allocated.getNodeId().getHost();\n+          blackListed \u003d isNodeBlacklisted(allocatedHost);\n           if (blackListed) {\n             // we need to request for a new container \n             // and release the current one\n             LOG.info(\"Got allocated container on a blacklisted \"\n-                + \" host \"+allocated.getNodeId().getHost()\n+                + \" host \"+allocatedHost\n                 +\". Releasing container \" + allocated);\n \n             // find the request matching this allocated container \n             // and replace it with a new one \n             ContainerRequest toBeReplacedReq \u003d \n                 getContainerReqToReplace(allocated);\n             if (toBeReplacedReq !\u003d null) {\n               LOG.info(\"Placing a new container request for task attempt \" \n                   + toBeReplacedReq.attemptID);\n               ContainerRequest newReq \u003d \n                   getFilteredContainerRequest(toBeReplacedReq);\n               decContainerReq(toBeReplacedReq);\n               if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                   TaskType.MAP) {\n                 maps.put(newReq.attemptID, newReq);\n               }\n               else {\n                 reduces.put(newReq.attemptID, newReq);\n               }\n               addContainerReq(newReq);\n             }\n             else {\n               LOG.info(\"Could not map allocated container to a valid request.\"\n                   + \" Releasing allocated container \" + allocated);\n             }\n           }\n           else {\n             assigned \u003d assign(allocated);\n             if (assigned !\u003d null) {\n               // Update resource requests\n               decContainerReq(assigned);\n \n               // send the container-assigned event to task attempt\n               eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                   assigned.attemptID, allocated, applicationACLs));\n \n-              assignedRequests.add(allocated.getId(), assigned.attemptID);\n+              assignedRequests.add(allocatedContainerId, assigned.attemptID);\n \n-              LOG.info(\"Assigned container (\" + allocated + \") \" +\n-                  \" to task \" + assigned.attemptID +\n-                  \" on node \" + allocated.getNodeId().toString());\n+              if (LOG.isDebugEnabled()) {\n+                LOG.info(\"Assigned container (\" + allocated + \") \"\n+                    + \" to task \" + assigned.attemptID + \" on node \"\n+                    + allocated.getNodeId().toString());\n+              }\n             }\n             else {\n               //not assigned to any request, release the container\n               LOG.info(\"Releasing unassigned and invalid container \" \n                   + allocated + \". RM has gone crazy, someone go look!\"\n                   + \" Hey RM, if you are so rich, go donate to non-profits!\");\n             }\n           }\n         }\n         \n         // release container if it was blacklisted \n         // or if we could not assign it \n         if (blackListed || assigned \u003d\u003d null) {\n           containersReleased++;\n-          release(allocated.getId());\n+          release(allocatedContainerId);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigning container \" + allocated.getId()\n              + \" with priority \" + allocated.getPriority() + \" to NM \"\n              + allocated.getNodeId());\n        }\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        int allocatedMemory \u003d allocated.getResource().getMemory();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocatedMemory \u003c mapResourceReqt\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceReqt\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocatedMemory \u003c reduceResourceReqt\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceReqt\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        }          \n        \n        boolean blackListed \u003d false;         \n        ContainerRequest assigned \u003d null;\n        \n        ContainerId allocatedContainerId \u003d allocated.getId();\n        if (isAssignable) {\n          // do not assign if allocated container is on a  \n          // blacklisted host\n          String allocatedHost \u003d allocated.getNodeId().getHost();\n          blackListed \u003d isNodeBlacklisted(allocatedHost);\n          if (blackListed) {\n            // we need to request for a new container \n            // and release the current one\n            LOG.info(\"Got allocated container on a blacklisted \"\n                + \" host \"+allocatedHost\n                +\". Releasing container \" + allocated);\n\n            // find the request matching this allocated container \n            // and replace it with a new one \n            ContainerRequest toBeReplacedReq \u003d \n                getContainerReqToReplace(allocated);\n            if (toBeReplacedReq !\u003d null) {\n              LOG.info(\"Placing a new container request for task attempt \" \n                  + toBeReplacedReq.attemptID);\n              ContainerRequest newReq \u003d \n                  getFilteredContainerRequest(toBeReplacedReq);\n              decContainerReq(toBeReplacedReq);\n              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                  TaskType.MAP) {\n                maps.put(newReq.attemptID, newReq);\n              }\n              else {\n                reduces.put(newReq.attemptID, newReq);\n              }\n              addContainerReq(newReq);\n            }\n            else {\n              LOG.info(\"Could not map allocated container to a valid request.\"\n                  + \" Releasing allocated container \" + allocated);\n            }\n          }\n          else {\n            assigned \u003d assign(allocated);\n            if (assigned !\u003d null) {\n              // Update resource requests\n              decContainerReq(assigned);\n\n              // send the container-assigned event to task attempt\n              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                  assigned.attemptID, allocated, applicationACLs));\n\n              assignedRequests.add(allocatedContainerId, assigned.attemptID);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.info(\"Assigned container (\" + allocated + \") \"\n                    + \" to task \" + assigned.attemptID + \" on node \"\n                    + allocated.getNodeId().toString());\n              }\n            }\n            else {\n              //not assigned to any request, release the container\n              LOG.info(\"Releasing unassigned and invalid container \" \n                  + allocated + \". RM has gone crazy, someone go look!\"\n                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n            }\n          }\n        }\n        \n        // release container if it was blacklisted \n        // or if we could not assign it \n        if (blackListed || assigned \u003d\u003d null) {\n          containersReleased++;\n          release(allocatedContainerId);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3460. MR AM can hang if containers are allocated on a node blacklisted by the AM. (Contributed by Hitesh Shah and Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1209737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/12/11 2:18 PM",
      "commitName": "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "27/10/11 6:40 PM",
      "commitNameOld": "b304062f1ffee078ea9575dcee5583d43e33508c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 35.86,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,110 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n-        LOG.info(\"Assigning container \" + allocated);\n+        LOG.info(\"Assigning container \" + allocated.getId() +\n+            \" with priority \" + allocated.getPriority() +\n+            \" to NM \" + allocated.getNodeId());\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n           if (allocated.getResource().getMemory() \u003c mapResourceReqt\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceReqt\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceReqt\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         }          \n         \n         boolean blackListed \u003d false;         \n         ContainerRequest assigned \u003d null;\n         \n         if (isAssignable) {\n           // do not assign if allocated container is on a  \n           // blacklisted host\n           blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n           if (blackListed) {\n             // we need to request for a new container \n             // and release the current one\n             LOG.info(\"Got allocated container on a blacklisted \"\n-                + \" host. Releasing container \" + allocated);\n+                + \" host \"+allocated.getNodeId().getHost()\n+                +\". Releasing container \" + allocated);\n \n             // find the request matching this allocated container \n             // and replace it with a new one \n             ContainerRequest toBeReplacedReq \u003d \n                 getContainerReqToReplace(allocated);\n             if (toBeReplacedReq !\u003d null) {\n               LOG.info(\"Placing a new container request for task attempt \" \n                   + toBeReplacedReq.attemptID);\n               ContainerRequest newReq \u003d \n                   getFilteredContainerRequest(toBeReplacedReq);\n               decContainerReq(toBeReplacedReq);\n               if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                   TaskType.MAP) {\n                 maps.put(newReq.attemptID, newReq);\n               }\n               else {\n                 reduces.put(newReq.attemptID, newReq);\n               }\n               addContainerReq(newReq);\n             }\n             else {\n               LOG.info(\"Could not map allocated container to a valid request.\"\n                   + \" Releasing allocated container \" + allocated);\n             }\n           }\n           else {\n             assigned \u003d assign(allocated);\n             if (assigned !\u003d null) {\n               // Update resource requests\n               decContainerReq(assigned);\n \n               // send the container-assigned event to task attempt\n               eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                   assigned.attemptID, allocated, applicationACLs));\n \n               assignedRequests.add(allocated.getId(), assigned.attemptID);\n \n               LOG.info(\"Assigned container (\" + allocated + \") \" +\n                   \" to task \" + assigned.attemptID +\n                   \" on node \" + allocated.getNodeId().toString());\n             }\n             else {\n               //not assigned to any request, release the container\n               LOG.info(\"Releasing unassigned and invalid container \" \n                   + allocated + \". RM has gone crazy, someone go look!\"\n                   + \" Hey RM, if you are so rich, go donate to non-profits!\");\n             }\n           }\n         }\n         \n         // release container if it was blacklisted \n         // or if we could not assign it \n         if (blackListed || assigned \u003d\u003d null) {\n           containersReleased++;\n           release(allocated.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Assigning container \" + allocated.getId() +\n            \" with priority \" + allocated.getPriority() +\n            \" to NM \" + allocated.getNodeId());\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocated.getResource().getMemory() \u003c mapResourceReqt\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceReqt\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceReqt\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        }          \n        \n        boolean blackListed \u003d false;         \n        ContainerRequest assigned \u003d null;\n        \n        if (isAssignable) {\n          // do not assign if allocated container is on a  \n          // blacklisted host\n          blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n          if (blackListed) {\n            // we need to request for a new container \n            // and release the current one\n            LOG.info(\"Got allocated container on a blacklisted \"\n                + \" host \"+allocated.getNodeId().getHost()\n                +\". Releasing container \" + allocated);\n\n            // find the request matching this allocated container \n            // and replace it with a new one \n            ContainerRequest toBeReplacedReq \u003d \n                getContainerReqToReplace(allocated);\n            if (toBeReplacedReq !\u003d null) {\n              LOG.info(\"Placing a new container request for task attempt \" \n                  + toBeReplacedReq.attemptID);\n              ContainerRequest newReq \u003d \n                  getFilteredContainerRequest(toBeReplacedReq);\n              decContainerReq(toBeReplacedReq);\n              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                  TaskType.MAP) {\n                maps.put(newReq.attemptID, newReq);\n              }\n              else {\n                reduces.put(newReq.attemptID, newReq);\n              }\n              addContainerReq(newReq);\n            }\n            else {\n              LOG.info(\"Could not map allocated container to a valid request.\"\n                  + \" Releasing allocated container \" + allocated);\n            }\n          }\n          else {\n            assigned \u003d assign(allocated);\n            if (assigned !\u003d null) {\n              // Update resource requests\n              decContainerReq(assigned);\n\n              // send the container-assigned event to task attempt\n              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                  assigned.attemptID, allocated, applicationACLs));\n\n              assignedRequests.add(allocated.getId(), assigned.attemptID);\n\n              LOG.info(\"Assigned container (\" + allocated + \") \" +\n                  \" to task \" + assigned.attemptID +\n                  \" on node \" + allocated.getNodeId().toString());\n            }\n            else {\n              //not assigned to any request, release the container\n              LOG.info(\"Releasing unassigned and invalid container \" \n                  + allocated + \". RM has gone crazy, someone go look!\"\n                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n            }\n          }\n        }\n        \n        // release container if it was blacklisted \n        // or if we could not assign it \n        if (blackListed || assigned \u003d\u003d null) {\n          containersReleased++;\n          release(allocated.getId());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/10/11 3:02 PM",
      "commitNameOld": "74748ec62570f92d57dbad3ba4cca47402990db5",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,107 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         LOG.info(\"Assigning container \" + allocated);\n         \n         // check if allocated container meets memory requirements \n         // and whether we have any scheduled tasks that need \n         // a container to be assigned\n         boolean isAssignable \u003d true;\n         Priority priority \u003d allocated.getPriority();\n         if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n             || PRIORITY_MAP.equals(priority)) {\n           if (allocated.getResource().getMemory() \u003c mapResourceReqt\n               || maps.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a map as either \"\n                 + \" container memory less than required \" + mapResourceReqt\n                 + \" or no pending map tasks - maps.isEmpty\u003d\" \n                 + maps.isEmpty()); \n             isAssignable \u003d false; \n           }\n         } \n         else if (PRIORITY_REDUCE.equals(priority)) {\n           if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n               || reduces.isEmpty()) {\n             LOG.info(\"Cannot assign container \" + allocated \n                 + \" for a reduce as either \"\n                 + \" container memory less than required \" + reduceResourceReqt\n                 + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                 + reduces.isEmpty()); \n             isAssignable \u003d false;\n           }\n         }          \n         \n         boolean blackListed \u003d false;         \n         ContainerRequest assigned \u003d null;\n         \n         if (isAssignable) {\n           // do not assign if allocated container is on a  \n           // blacklisted host\n           blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n           if (blackListed) {\n             // we need to request for a new container \n             // and release the current one\n             LOG.info(\"Got allocated container on a blacklisted \"\n                 + \" host. Releasing container \" + allocated);\n \n             // find the request matching this allocated container \n             // and replace it with a new one \n             ContainerRequest toBeReplacedReq \u003d \n                 getContainerReqToReplace(allocated);\n             if (toBeReplacedReq !\u003d null) {\n               LOG.info(\"Placing a new container request for task attempt \" \n                   + toBeReplacedReq.attemptID);\n               ContainerRequest newReq \u003d \n                   getFilteredContainerRequest(toBeReplacedReq);\n               decContainerReq(toBeReplacedReq);\n               if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                   TaskType.MAP) {\n                 maps.put(newReq.attemptID, newReq);\n               }\n               else {\n                 reduces.put(newReq.attemptID, newReq);\n               }\n               addContainerReq(newReq);\n             }\n             else {\n               LOG.info(\"Could not map allocated container to a valid request.\"\n                   + \" Releasing allocated container \" + allocated);\n             }\n           }\n           else {\n             assigned \u003d assign(allocated);\n             if (assigned !\u003d null) {\n               // Update resource requests\n               decContainerReq(assigned);\n \n               // send the container-assigned event to task attempt\n               eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n-                  assigned.attemptID, allocated));\n+                  assigned.attemptID, allocated, applicationACLs));\n \n               assignedRequests.add(allocated.getId(), assigned.attemptID);\n \n               LOG.info(\"Assigned container (\" + allocated + \") \" +\n                   \" to task \" + assigned.attemptID +\n                   \" on node \" + allocated.getNodeId().toString());\n             }\n             else {\n               //not assigned to any request, release the container\n               LOG.info(\"Releasing unassigned and invalid container \" \n                   + allocated + \". RM has gone crazy, someone go look!\"\n                   + \" Hey RM, if you are so rich, go donate to non-profits!\");\n             }\n           }\n         }\n         \n         // release container if it was blacklisted \n         // or if we could not assign it \n         if (blackListed || assigned \u003d\u003d null) {\n           containersReleased++;\n           release(allocated.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Assigning container \" + allocated);\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocated.getResource().getMemory() \u003c mapResourceReqt\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceReqt\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceReqt\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        }          \n        \n        boolean blackListed \u003d false;         \n        ContainerRequest assigned \u003d null;\n        \n        if (isAssignable) {\n          // do not assign if allocated container is on a  \n          // blacklisted host\n          blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n          if (blackListed) {\n            // we need to request for a new container \n            // and release the current one\n            LOG.info(\"Got allocated container on a blacklisted \"\n                + \" host. Releasing container \" + allocated);\n\n            // find the request matching this allocated container \n            // and replace it with a new one \n            ContainerRequest toBeReplacedReq \u003d \n                getContainerReqToReplace(allocated);\n            if (toBeReplacedReq !\u003d null) {\n              LOG.info(\"Placing a new container request for task attempt \" \n                  + toBeReplacedReq.attemptID);\n              ContainerRequest newReq \u003d \n                  getFilteredContainerRequest(toBeReplacedReq);\n              decContainerReq(toBeReplacedReq);\n              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                  TaskType.MAP) {\n                maps.put(newReq.attemptID, newReq);\n              }\n              else {\n                reduces.put(newReq.attemptID, newReq);\n              }\n              addContainerReq(newReq);\n            }\n            else {\n              LOG.info(\"Could not map allocated container to a valid request.\"\n                  + \" Releasing allocated container \" + allocated);\n            }\n          }\n          else {\n            assigned \u003d assign(allocated);\n            if (assigned !\u003d null) {\n              // Update resource requests\n              decContainerReq(assigned);\n\n              // send the container-assigned event to task attempt\n              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                  assigned.attemptID, allocated, applicationACLs));\n\n              assignedRequests.add(allocated.getId(), assigned.attemptID);\n\n              LOG.info(\"Assigned container (\" + allocated + \") \" +\n                  \" to task \" + assigned.attemptID +\n                  \" on node \" + allocated.getNodeId().toString());\n            }\n            else {\n              //not assigned to any request, release the container\n              LOG.info(\"Releasing unassigned and invalid container \" \n                  + allocated + \". RM has gone crazy, someone go look!\"\n                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n            }\n          }\n        }\n        \n        // release container if it was blacklisted \n        // or if we could not assign it \n        if (blackListed || assigned \u003d\u003d null) {\n          containersReleased++;\n          release(allocated.getId());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "74748ec62570f92d57dbad3ba4cca47402990db5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2693. Fix NPE in job-blacklisting. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186529 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/11 3:02 PM",
      "commitName": "74748ec62570f92d57dbad3ba4cca47402990db5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "26/09/11 6:25 AM",
      "commitNameOld": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.36,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,107 @@\n     private void assign(List\u003cContainer\u003e allocatedContainers) {\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n       containersAllocated +\u003d allocatedContainers.size();\n       while (it.hasNext()) {\n         Container allocated \u003d it.next();\n         LOG.info(\"Assigning container \" + allocated);\n-        ContainerRequest assigned \u003d assign(allocated);\n-          \n-        if (assigned !\u003d null) {\n-          // Update resource requests\n-          decContainerReq(assigned);\n+        \n+        // check if allocated container meets memory requirements \n+        // and whether we have any scheduled tasks that need \n+        // a container to be assigned\n+        boolean isAssignable \u003d true;\n+        Priority priority \u003d allocated.getPriority();\n+        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n+            || PRIORITY_MAP.equals(priority)) {\n+          if (allocated.getResource().getMemory() \u003c mapResourceReqt\n+              || maps.isEmpty()) {\n+            LOG.info(\"Cannot assign container \" + allocated \n+                + \" for a map as either \"\n+                + \" container memory less than required \" + mapResourceReqt\n+                + \" or no pending map tasks - maps.isEmpty\u003d\" \n+                + maps.isEmpty()); \n+            isAssignable \u003d false; \n+          }\n+        } \n+        else if (PRIORITY_REDUCE.equals(priority)) {\n+          if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n+              || reduces.isEmpty()) {\n+            LOG.info(\"Cannot assign container \" + allocated \n+                + \" for a reduce as either \"\n+                + \" container memory less than required \" + reduceResourceReqt\n+                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n+                + reduces.isEmpty()); \n+            isAssignable \u003d false;\n+          }\n+        }          \n+        \n+        boolean blackListed \u003d false;         \n+        ContainerRequest assigned \u003d null;\n+        \n+        if (isAssignable) {\n+          // do not assign if allocated container is on a  \n+          // blacklisted host\n+          blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n+          if (blackListed) {\n+            // we need to request for a new container \n+            // and release the current one\n+            LOG.info(\"Got allocated container on a blacklisted \"\n+                + \" host. Releasing container \" + allocated);\n \n-          // send the container-assigned event to task attempt\n-          eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n-              assigned.attemptID, allocated));\n+            // find the request matching this allocated container \n+            // and replace it with a new one \n+            ContainerRequest toBeReplacedReq \u003d \n+                getContainerReqToReplace(allocated);\n+            if (toBeReplacedReq !\u003d null) {\n+              LOG.info(\"Placing a new container request for task attempt \" \n+                  + toBeReplacedReq.attemptID);\n+              ContainerRequest newReq \u003d \n+                  getFilteredContainerRequest(toBeReplacedReq);\n+              decContainerReq(toBeReplacedReq);\n+              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n+                  TaskType.MAP) {\n+                maps.put(newReq.attemptID, newReq);\n+              }\n+              else {\n+                reduces.put(newReq.attemptID, newReq);\n+              }\n+              addContainerReq(newReq);\n+            }\n+            else {\n+              LOG.info(\"Could not map allocated container to a valid request.\"\n+                  + \" Releasing allocated container \" + allocated);\n+            }\n+          }\n+          else {\n+            assigned \u003d assign(allocated);\n+            if (assigned !\u003d null) {\n+              // Update resource requests\n+              decContainerReq(assigned);\n \n-          assignedRequests.add(allocated.getId(), assigned.attemptID);\n-          \n-          LOG.info(\"Assigned container (\" + allocated + \") \" +\n-              \" to task \" + assigned.attemptID +\n-              \" on node \" + allocated.getNodeId().toString());\n-        } else {\n-          //not assigned to any request, release the container\n-          LOG.info(\"Releasing unassigned and invalid container \" + allocated\n-              + \". RM has gone crazy, someone go look!\"\n-              + \" Hey RM, if you are so rich, go donate to non-profits!\");\n+              // send the container-assigned event to task attempt\n+              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n+                  assigned.attemptID, allocated));\n+\n+              assignedRequests.add(allocated.getId(), assigned.attemptID);\n+\n+              LOG.info(\"Assigned container (\" + allocated + \") \" +\n+                  \" to task \" + assigned.attemptID +\n+                  \" on node \" + allocated.getNodeId().toString());\n+            }\n+            else {\n+              //not assigned to any request, release the container\n+              LOG.info(\"Releasing unassigned and invalid container \" \n+                  + allocated + \". RM has gone crazy, someone go look!\"\n+                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n+            }\n+          }\n+        }\n+        \n+        // release container if it was blacklisted \n+        // or if we could not assign it \n+        if (blackListed || assigned \u003d\u003d null) {\n           containersReleased++;\n           release(allocated.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Assigning container \" + allocated);\n        \n        // check if allocated container meets memory requirements \n        // and whether we have any scheduled tasks that need \n        // a container to be assigned\n        boolean isAssignable \u003d true;\n        Priority priority \u003d allocated.getPriority();\n        if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n            || PRIORITY_MAP.equals(priority)) {\n          if (allocated.getResource().getMemory() \u003c mapResourceReqt\n              || maps.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a map as either \"\n                + \" container memory less than required \" + mapResourceReqt\n                + \" or no pending map tasks - maps.isEmpty\u003d\" \n                + maps.isEmpty()); \n            isAssignable \u003d false; \n          }\n        } \n        else if (PRIORITY_REDUCE.equals(priority)) {\n          if (allocated.getResource().getMemory() \u003c reduceResourceReqt\n              || reduces.isEmpty()) {\n            LOG.info(\"Cannot assign container \" + allocated \n                + \" for a reduce as either \"\n                + \" container memory less than required \" + reduceResourceReqt\n                + \" or no pending reduce tasks - reduces.isEmpty\u003d\" \n                + reduces.isEmpty()); \n            isAssignable \u003d false;\n          }\n        }          \n        \n        boolean blackListed \u003d false;         \n        ContainerRequest assigned \u003d null;\n        \n        if (isAssignable) {\n          // do not assign if allocated container is on a  \n          // blacklisted host\n          blackListed \u003d isNodeBlacklisted(allocated.getNodeId().getHost());\n          if (blackListed) {\n            // we need to request for a new container \n            // and release the current one\n            LOG.info(\"Got allocated container on a blacklisted \"\n                + \" host. Releasing container \" + allocated);\n\n            // find the request matching this allocated container \n            // and replace it with a new one \n            ContainerRequest toBeReplacedReq \u003d \n                getContainerReqToReplace(allocated);\n            if (toBeReplacedReq !\u003d null) {\n              LOG.info(\"Placing a new container request for task attempt \" \n                  + toBeReplacedReq.attemptID);\n              ContainerRequest newReq \u003d \n                  getFilteredContainerRequest(toBeReplacedReq);\n              decContainerReq(toBeReplacedReq);\n              if (toBeReplacedReq.attemptID.getTaskId().getTaskType() \u003d\u003d\n                  TaskType.MAP) {\n                maps.put(newReq.attemptID, newReq);\n              }\n              else {\n                reduces.put(newReq.attemptID, newReq);\n              }\n              addContainerReq(newReq);\n            }\n            else {\n              LOG.info(\"Could not map allocated container to a valid request.\"\n                  + \" Releasing allocated container \" + allocated);\n            }\n          }\n          else {\n            assigned \u003d assign(allocated);\n            if (assigned !\u003d null) {\n              // Update resource requests\n              decContainerReq(assigned);\n\n              // send the container-assigned event to task attempt\n              eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n                  assigned.attemptID, allocated));\n\n              assignedRequests.add(allocated.getId(), assigned.attemptID);\n\n              LOG.info(\"Assigned container (\" + allocated + \") \" +\n                  \" to task \" + assigned.attemptID +\n                  \" on node \" + allocated.getNodeId().toString());\n            }\n            else {\n              //not assigned to any request, release the container\n              LOG.info(\"Releasing unassigned and invalid container \" \n                  + allocated + \". RM has gone crazy, someone go look!\"\n                  + \" Hey RM, if you are so rich, go donate to non-profits!\");\n            }\n          }\n        }\n        \n        // release container if it was blacklisted \n        // or if we could not assign it \n        if (blackListed || assigned \u003d\u003d null) {\n          containersReleased++;\n          release(allocated.getId());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Assigning container \" + allocated);\n        ContainerRequest assigned \u003d assign(allocated);\n          \n        if (assigned !\u003d null) {\n          // Update resource requests\n          decContainerReq(assigned);\n\n          // send the container-assigned event to task attempt\n          eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n              assigned.attemptID, allocated));\n\n          assignedRequests.add(allocated.getId(), assigned.attemptID);\n          \n          LOG.info(\"Assigned container (\" + allocated + \") \" +\n              \" to task \" + assigned.attemptID +\n              \" on node \" + allocated.getNodeId().toString());\n        } else {\n          //not assigned to any request, release the container\n          LOG.info(\"Releasing unassigned and invalid container \" + allocated\n              + \". RM has gone crazy, someone go look!\"\n              + \" Hey RM, if you are so rich, go donate to non-profits!\");\n          containersReleased++;\n          release(allocated.getId());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,32 @@\n+    private void assign(List\u003cContainer\u003e allocatedContainers) {\n+      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n+      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n+      containersAllocated +\u003d allocatedContainers.size();\n+      while (it.hasNext()) {\n+        Container allocated \u003d it.next();\n+        LOG.info(\"Assigning container \" + allocated);\n+        ContainerRequest assigned \u003d assign(allocated);\n+          \n+        if (assigned !\u003d null) {\n+          // Update resource requests\n+          decContainerReq(assigned);\n+\n+          // send the container-assigned event to task attempt\n+          eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n+              assigned.attemptID, allocated));\n+\n+          assignedRequests.add(allocated.getId(), assigned.attemptID);\n+          \n+          LOG.info(\"Assigned container (\" + allocated + \") \" +\n+              \" to task \" + assigned.attemptID +\n+              \" on node \" + allocated.getNodeId().toString());\n+        } else {\n+          //not assigned to any request, release the container\n+          LOG.info(\"Releasing unassigned and invalid container \" + allocated\n+              + \". RM has gone crazy, someone go look!\"\n+              + \" Hey RM, if you are so rich, go donate to non-profits!\");\n+          containersReleased++;\n+          release(allocated.getId());\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void assign(List\u003cContainer\u003e allocatedContainers) {\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      LOG.info(\"Got allocated containers \" + allocatedContainers.size());\n      containersAllocated +\u003d allocatedContainers.size();\n      while (it.hasNext()) {\n        Container allocated \u003d it.next();\n        LOG.info(\"Assigning container \" + allocated);\n        ContainerRequest assigned \u003d assign(allocated);\n          \n        if (assigned !\u003d null) {\n          // Update resource requests\n          decContainerReq(assigned);\n\n          // send the container-assigned event to task attempt\n          eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n              assigned.attemptID, allocated));\n\n          assignedRequests.add(allocated.getId(), assigned.attemptID);\n          \n          LOG.info(\"Assigned container (\" + allocated + \") \" +\n              \" to task \" + assigned.attemptID +\n              \" on node \" + allocated.getNodeId().toString());\n        } else {\n          //not assigned to any request, release the container\n          LOG.info(\"Releasing unassigned and invalid container \" + allocated\n              + \". RM has gone crazy, someone go look!\"\n              + \" Hey RM, if you are so rich, go donate to non-profits!\");\n          containersReleased++;\n          release(allocated.getId());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}