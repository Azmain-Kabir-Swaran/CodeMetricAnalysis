{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "matchAsteriskPattern",
  "functionId": "matchAsteriskPattern___pathName-String__pattern-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 1255,
  "functionEndLine": 1301,
  "numCommitsSeen": 53,
  "timeTaken": 1617,
  "changeHistory": [
    "7ccb640a66bb5bb9f657a2db85bcc8ae0ded4892"
  ],
  "changeHistoryShort": {
    "7ccb640a66bb5bb9f657a2db85bcc8ae0ded4892": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7ccb640a66bb5bb9f657a2db85bcc8ae0ded4892": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15957. WASB: Add asterisk wildcard support for PageBlobDirSet.\n\nContributed by Da Zhou.\n",
      "commitDate": "30/11/18 2:12 AM",
      "commitName": "7ccb640a66bb5bb9f657a2db85bcc8ae0ded4892",
      "commitAuthor": "Da Zhou",
      "diff": "@@ -0,0 +1,47 @@\n+  private boolean matchAsteriskPattern(String pathName, String pattern) {\n+    if (pathName \u003d\u003d null || pathName.length() \u003d\u003d 0) {\n+      return false;\n+    }\n+\n+    int pathIndex \u003d 0;\n+    int patternIndex \u003d 0;\n+\n+    while (pathIndex \u003c pathName.length() \u0026\u0026 patternIndex \u003c pattern.length()) {\n+      char charToMatch \u003d pattern.charAt(patternIndex);\n+\n+      // normal char:\n+      if (charToMatch !\u003d ASTERISK_SYMBOL) {\n+        if (charToMatch !\u003d pathName.charAt(pathIndex)) {\n+          return false;\n+        }\n+        pathIndex++;\n+        patternIndex++;\n+        continue;\n+      }\n+\n+      // ASTERISK_SYMBOL\n+      // 1. * is used in path name: *a/b,a*/b, a/*b, a/b*\n+      if (patternIndex \u003e 0 \u0026\u0026 pattern.charAt(patternIndex - 1) !\u003d Path.SEPARATOR_CHAR\n+              || patternIndex + 1 \u003c pattern.length() \u0026\u0026 pattern.charAt(patternIndex + 1) !\u003d Path.SEPARATOR_CHAR) {\n+        if (ASTERISK_SYMBOL !\u003d pathName.charAt(pathIndex)) {\n+          return false;\n+        }\n+\n+        pathIndex++;\n+        patternIndex++;\n+        continue;\n+      }\n+\n+      // 2. * is used as wildcard: */a, a/*/b, a/*\n+      patternIndex++;\n+      // find next path separator\n+      while (pathIndex \u003c pathName.length() \u0026\u0026 pathName.charAt(pathIndex) !\u003d Path.SEPARATOR_CHAR) {\n+        pathIndex++;\n+      }\n+    }\n+\n+    // Ensure it is not a file/dir which shares same prefix as pattern\n+    // Eg: pattern: /A/B, pathName: /A/BBB should not match\n+    return patternIndex \u003d\u003d pattern.length()\n+            \u0026\u0026 (pathIndex \u003d\u003d pathName.length() || pathName.charAt(pathIndex) \u003d\u003d Path.SEPARATOR_CHAR);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean matchAsteriskPattern(String pathName, String pattern) {\n    if (pathName \u003d\u003d null || pathName.length() \u003d\u003d 0) {\n      return false;\n    }\n\n    int pathIndex \u003d 0;\n    int patternIndex \u003d 0;\n\n    while (pathIndex \u003c pathName.length() \u0026\u0026 patternIndex \u003c pattern.length()) {\n      char charToMatch \u003d pattern.charAt(patternIndex);\n\n      // normal char:\n      if (charToMatch !\u003d ASTERISK_SYMBOL) {\n        if (charToMatch !\u003d pathName.charAt(pathIndex)) {\n          return false;\n        }\n        pathIndex++;\n        patternIndex++;\n        continue;\n      }\n\n      // ASTERISK_SYMBOL\n      // 1. * is used in path name: *a/b,a*/b, a/*b, a/b*\n      if (patternIndex \u003e 0 \u0026\u0026 pattern.charAt(patternIndex - 1) !\u003d Path.SEPARATOR_CHAR\n              || patternIndex + 1 \u003c pattern.length() \u0026\u0026 pattern.charAt(patternIndex + 1) !\u003d Path.SEPARATOR_CHAR) {\n        if (ASTERISK_SYMBOL !\u003d pathName.charAt(pathIndex)) {\n          return false;\n        }\n\n        pathIndex++;\n        patternIndex++;\n        continue;\n      }\n\n      // 2. * is used as wildcard: */a, a/*/b, a/*\n      patternIndex++;\n      // find next path separator\n      while (pathIndex \u003c pathName.length() \u0026\u0026 pathName.charAt(pathIndex) !\u003d Path.SEPARATOR_CHAR) {\n        pathIndex++;\n      }\n    }\n\n    // Ensure it is not a file/dir which shares same prefix as pattern\n    // Eg: pattern: /A/B, pathName: /A/BBB should not match\n    return patternIndex \u003d\u003d pattern.length()\n            \u0026\u0026 (pathIndex \u003d\u003d pathName.length() || pathName.charAt(pathIndex) \u003d\u003d Path.SEPARATOR_CHAR);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}