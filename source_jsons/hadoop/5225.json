{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirWriteFileOp.java",
  "functionName": "resolvePathForStartFile",
  "functionId": "resolvePathForStartFile___dir-FSDirectory__pc-FSPermissionChecker__src-String__flag-EnumSet__CreateFlag____createParent-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
  "functionStartLine": 318,
  "functionEndLine": 346,
  "numCommitsSeen": 65,
  "timeTaken": 2610,
  "changeHistory": [
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "e57fa81d9559a93d77fd724f7792326c31a490be",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65"
  ],
  "changeHistoryShort": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "e57fa81d9559a93d77fd724f7792326c31a490be": "Ybodychange",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "07/10/16 3:20 PM",
      "commitNameOld": "e57fa81d9559a93d77fd724f7792326c31a490be",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 17.0,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   static INodesInPath resolvePathForStartFile(FSDirectory dir,\n       FSPermissionChecker pc, String src, EnumSet\u003cCreateFlag\u003e flag,\n       boolean createParent) throws IOException {\n-    INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n+    INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.CREATE);\n     if (dir.isPermissionEnabled()) {\n       dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n     }\n     INode inode \u003d iip.getLastINode();\n     if (inode !\u003d null) {\n       // Verify that the destination does not exist as a directory already.\n       if (inode.isDirectory()) {\n         throw new FileAlreadyExistsException(iip.getPath() +\n             \" already exists as a directory\");\n       }\n       // Verifies it\u0027s indeed a file and perms allow overwrite\n       INodeFile.valueOf(inode, src);\n       if (dir.isPermissionEnabled() \u0026\u0026 flag.contains(CreateFlag.OVERWRITE)) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n     } else {\n       if (!createParent) {\n         dir.verifyParentDir(iip);\n       }\n       if (!flag.contains(CreateFlag.CREATE)) {\n         throw new FileNotFoundException(\"Can\u0027t overwrite non-existent \" + src);\n       }\n     }\n     return iip;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodesInPath resolvePathForStartFile(FSDirectory dir,\n      FSPermissionChecker pc, String src, EnumSet\u003cCreateFlag\u003e flag,\n      boolean createParent) throws IOException {\n    INodesInPath iip \u003d dir.resolvePath(pc, src, DirOp.CREATE);\n    if (dir.isPermissionEnabled()) {\n      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n    }\n    INode inode \u003d iip.getLastINode();\n    if (inode !\u003d null) {\n      // Verify that the destination does not exist as a directory already.\n      if (inode.isDirectory()) {\n        throw new FileAlreadyExistsException(iip.getPath() +\n            \" already exists as a directory\");\n      }\n      // Verifies it\u0027s indeed a file and perms allow overwrite\n      INodeFile.valueOf(inode, src);\n      if (dir.isPermissionEnabled() \u0026\u0026 flag.contains(CreateFlag.OVERWRITE)) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n    } else {\n      if (!createParent) {\n        dir.verifyParentDir(iip);\n      }\n      if (!flag.contains(CreateFlag.CREATE)) {\n        throw new FileNotFoundException(\"Can\u0027t overwrite non-existent \" + src);\n      }\n    }\n    return iip;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "e57fa81d9559a93d77fd724f7792326c31a490be": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10980. Optimize check for existence of parent directory. Contributed by Daryn Sharp.\n",
      "commitDate": "07/10/16 3:20 PM",
      "commitName": "e57fa81d9559a93d77fd724f7792326c31a490be",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   static INodesInPath resolvePathForStartFile(FSDirectory dir,\n       FSPermissionChecker pc, String src, EnumSet\u003cCreateFlag\u003e flag,\n       boolean createParent) throws IOException {\n     INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n     if (dir.isPermissionEnabled()) {\n       dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n     }\n     INode inode \u003d iip.getLastINode();\n     if (inode !\u003d null) {\n       // Verify that the destination does not exist as a directory already.\n       if (inode.isDirectory()) {\n         throw new FileAlreadyExistsException(iip.getPath() +\n             \" already exists as a directory\");\n       }\n       // Verifies it\u0027s indeed a file and perms allow overwrite\n       INodeFile.valueOf(inode, src);\n       if (dir.isPermissionEnabled() \u0026\u0026 flag.contains(CreateFlag.OVERWRITE)) {\n         dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n     } else {\n       if (!createParent) {\n-        dir.verifyParentDir(iip, src);\n+        dir.verifyParentDir(iip);\n       }\n       if (!flag.contains(CreateFlag.CREATE)) {\n         throw new FileNotFoundException(\"Can\u0027t overwrite non-existent \" + src);\n       }\n     }\n     return iip;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodesInPath resolvePathForStartFile(FSDirectory dir,\n      FSPermissionChecker pc, String src, EnumSet\u003cCreateFlag\u003e flag,\n      boolean createParent) throws IOException {\n    INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n    if (dir.isPermissionEnabled()) {\n      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n    }\n    INode inode \u003d iip.getLastINode();\n    if (inode !\u003d null) {\n      // Verify that the destination does not exist as a directory already.\n      if (inode.isDirectory()) {\n        throw new FileAlreadyExistsException(iip.getPath() +\n            \" already exists as a directory\");\n      }\n      // Verifies it\u0027s indeed a file and perms allow overwrite\n      INodeFile.valueOf(inode, src);\n      if (dir.isPermissionEnabled() \u0026\u0026 flag.contains(CreateFlag.OVERWRITE)) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n    } else {\n      if (!createParent) {\n        dir.verifyParentDir(iip);\n      }\n      if (!flag.contains(CreateFlag.CREATE)) {\n        throw new FileNotFoundException(\"Can\u0027t overwrite non-existent \" + src);\n      }\n    }\n    return iip;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,29 @@\n+  static INodesInPath resolvePathForStartFile(FSDirectory dir,\n+      FSPermissionChecker pc, String src, EnumSet\u003cCreateFlag\u003e flag,\n+      boolean createParent) throws IOException {\n+    INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n+    if (dir.isPermissionEnabled()) {\n+      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n+    }\n+    INode inode \u003d iip.getLastINode();\n+    if (inode !\u003d null) {\n+      // Verify that the destination does not exist as a directory already.\n+      if (inode.isDirectory()) {\n+        throw new FileAlreadyExistsException(iip.getPath() +\n+            \" already exists as a directory\");\n+      }\n+      // Verifies it\u0027s indeed a file and perms allow overwrite\n+      INodeFile.valueOf(inode, src);\n+      if (dir.isPermissionEnabled() \u0026\u0026 flag.contains(CreateFlag.OVERWRITE)) {\n+        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n+      }\n+    } else {\n+      if (!createParent) {\n+        dir.verifyParentDir(iip, src);\n+      }\n+      if (!flag.contains(CreateFlag.CREATE)) {\n+        throw new FileNotFoundException(\"Can\u0027t overwrite non-existent \" + src);\n+      }\n+    }\n+    return iip;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static INodesInPath resolvePathForStartFile(FSDirectory dir,\n      FSPermissionChecker pc, String src, EnumSet\u003cCreateFlag\u003e flag,\n      boolean createParent) throws IOException {\n    INodesInPath iip \u003d dir.resolvePathForWrite(pc, src);\n    if (dir.isPermissionEnabled()) {\n      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n    }\n    INode inode \u003d iip.getLastINode();\n    if (inode !\u003d null) {\n      // Verify that the destination does not exist as a directory already.\n      if (inode.isDirectory()) {\n        throw new FileAlreadyExistsException(iip.getPath() +\n            \" already exists as a directory\");\n      }\n      // Verifies it\u0027s indeed a file and perms allow overwrite\n      INodeFile.valueOf(inode, src);\n      if (dir.isPermissionEnabled() \u0026\u0026 flag.contains(CreateFlag.OVERWRITE)) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n    } else {\n      if (!createParent) {\n        dir.verifyParentDir(iip, src);\n      }\n      if (!flag.contains(CreateFlag.CREATE)) {\n        throw new FileNotFoundException(\"Can\u0027t overwrite non-existent \" + src);\n      }\n    }\n    return iip;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java"
    }
  }
}