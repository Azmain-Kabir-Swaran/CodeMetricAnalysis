{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsPermission.java",
  "functionName": "valueOf",
  "functionId": "valueOf___abfsSymbolicPermission-String(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsPermission.java",
  "functionStartLine": 70,
  "functionEndLine": 94,
  "numCommitsSeen": 1,
  "timeTaken": 748,
  "changeHistory": [
    "9c1e4e81399913f180131f4faa95604087c6d962"
  ],
  "changeHistoryShort": {
    "9c1e4e81399913f180131f4faa95604087c6d962": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c1e4e81399913f180131f4faa95604087c6d962": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15661. ABFS: Add support for ACL.\nContributed by Junhua Gu and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,25 @@\n+  public static AbfsPermission valueOf(final String abfsSymbolicPermission) {\n+    if (abfsSymbolicPermission \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    final boolean isExtendedAcl \u003d abfsSymbolicPermission.charAt(abfsSymbolicPermission.length() - 1) \u003d\u003d \u0027+\u0027;\n+\n+    final String abfsRawSymbolicPermission \u003d isExtendedAcl ? abfsSymbolicPermission.substring(0, abfsSymbolicPermission.length() - 1)\n+        : abfsSymbolicPermission;\n+\n+    int n \u003d 0;\n+    for (int i \u003d 0; i \u003c abfsRawSymbolicPermission.length(); i++) {\n+      n \u003d n \u003c\u003c 1;\n+      char c \u003d abfsRawSymbolicPermission.charAt(i);\n+      n +\u003d (c \u003d\u003d \u0027-\u0027 || c \u003d\u003d \u0027T\u0027 || c \u003d\u003d \u0027S\u0027) ? 0: 1;\n+    }\n+\n+    // Add sticky bit value if set\n+    if (abfsRawSymbolicPermission.charAt(abfsRawSymbolicPermission.length() - 1) \u003d\u003d \u0027t\u0027\n+        || abfsRawSymbolicPermission.charAt(abfsRawSymbolicPermission.length() - 1) \u003d\u003d \u0027T\u0027) {\n+      n +\u003d STICKY_BIT_OCTAL_VALUE;\n+    }\n+\n+    return new AbfsPermission((short) n, isExtendedAcl);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AbfsPermission valueOf(final String abfsSymbolicPermission) {\n    if (abfsSymbolicPermission \u003d\u003d null) {\n      return null;\n    }\n\n    final boolean isExtendedAcl \u003d abfsSymbolicPermission.charAt(abfsSymbolicPermission.length() - 1) \u003d\u003d \u0027+\u0027;\n\n    final String abfsRawSymbolicPermission \u003d isExtendedAcl ? abfsSymbolicPermission.substring(0, abfsSymbolicPermission.length() - 1)\n        : abfsSymbolicPermission;\n\n    int n \u003d 0;\n    for (int i \u003d 0; i \u003c abfsRawSymbolicPermission.length(); i++) {\n      n \u003d n \u003c\u003c 1;\n      char c \u003d abfsRawSymbolicPermission.charAt(i);\n      n +\u003d (c \u003d\u003d \u0027-\u0027 || c \u003d\u003d \u0027T\u0027 || c \u003d\u003d \u0027S\u0027) ? 0: 1;\n    }\n\n    // Add sticky bit value if set\n    if (abfsRawSymbolicPermission.charAt(abfsRawSymbolicPermission.length() - 1) \u003d\u003d \u0027t\u0027\n        || abfsRawSymbolicPermission.charAt(abfsRawSymbolicPermission.length() - 1) \u003d\u003d \u0027T\u0027) {\n      n +\u003d STICKY_BIT_OCTAL_VALUE;\n    }\n\n    return new AbfsPermission((short) n, isExtendedAcl);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsPermission.java"
    }
  }
}