{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedBlockUtil.java",
  "functionName": "getSafeLength",
  "functionId": "getSafeLength___ecPolicy-ErasureCodingPolicy__blockLens-long[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
  "functionStartLine": 238,
  "functionEndLine": 253,
  "numCommitsSeen": 17,
  "timeTaken": 945,
  "changeHistory": [
    "def754ec064c8502fbd736efae738bcbdc735f0a"
  ],
  "changeHistoryShort": {
    "def754ec064c8502fbd736efae738bcbdc735f0a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "def754ec064c8502fbd736efae738bcbdc735f0a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9816. Erasure Coding: allow to use multiple EC policies in striping related tests [Part 3]. Contributed by Rui Li.\n\nChange-Id: I64b57bab4722cdc6e1e3148c3a3a401370249afe\n",
      "commitDate": "23/02/16 2:05 PM",
      "commitName": "def754ec064c8502fbd736efae738bcbdc735f0a",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,16 @@\n+  public static long getSafeLength(ErasureCodingPolicy ecPolicy,\n+      long[] blockLens) {\n+    final int cellSize \u003d ecPolicy.getCellSize();\n+    final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n+    Preconditions.checkArgument(blockLens.length \u003e\u003d dataBlkNum);\n+    final int stripeSize \u003d dataBlkNum * cellSize;\n+    long[] cpy \u003d Arrays.copyOf(blockLens, blockLens.length);\n+    Arrays.sort(cpy);\n+    // full stripe is a stripe has at least dataBlkNum full cells.\n+    // lastFullStripeIdx is the index of the last full stripe.\n+    int lastFullStripeIdx \u003d\n+        (int) (cpy[cpy.length - dataBlkNum] / cellSize);\n+    return lastFullStripeIdx * stripeSize; // return the safeLength\n+    // TODO: Include lastFullStripeIdx+1 stripe in safeLength, if there exists\n+    // such a stripe (and it must be partial).\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static long getSafeLength(ErasureCodingPolicy ecPolicy,\n      long[] blockLens) {\n    final int cellSize \u003d ecPolicy.getCellSize();\n    final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n    Preconditions.checkArgument(blockLens.length \u003e\u003d dataBlkNum);\n    final int stripeSize \u003d dataBlkNum * cellSize;\n    long[] cpy \u003d Arrays.copyOf(blockLens, blockLens.length);\n    Arrays.sort(cpy);\n    // full stripe is a stripe has at least dataBlkNum full cells.\n    // lastFullStripeIdx is the index of the last full stripe.\n    int lastFullStripeIdx \u003d\n        (int) (cpy[cpy.length - dataBlkNum] / cellSize);\n    return lastFullStripeIdx * stripeSize; // return the safeLength\n    // TODO: Include lastFullStripeIdx+1 stripe in safeLength, if there exists\n    // such a stripe (and it must be partial).\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java"
    }
  }
}