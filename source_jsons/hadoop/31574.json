{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractTimelineStorageReader.java",
  "functionName": "lookupFlowContext",
  "functionId": "lookupFlowContext___appToFlowRowKey-AppToFlowRowKey__clusterId-String__hbaseConf-Configuration__conn-Connection",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
  "functionStartLine": 63,
  "functionEndLine": 90,
  "numCommitsSeen": 34,
  "timeTaken": 6825,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "71847ed44dc5a1ef702eaf234150a2ff69c15341",
    "4481561e4a3433197dd8e73f38856eef84f0fd03",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "71847ed44dc5a1ef702eaf234150a2ff69c15341": "Ymultichange(Yparameterchange,Ybodychange)",
    "4481561e4a3433197dd8e73f38856eef84f0fd03": "Ymovefromfile",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Ybodychange",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": "Ybodychange",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": "Ymodifierchange",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": "Ymultichange(Ymovefromfile,Yparameterchange)",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n       String clusterId, Configuration hbaseConf, Connection conn)\n       throws IOException {\n     byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n-      Object flowName \u003d\n-          AppToFlowColumnPrefix.FLOW_NAME.readResult(result, clusterId);\n-      Object flowRunId \u003d\n-          AppToFlowColumnPrefix.FLOW_RUN_ID.readResult(result, clusterId);\n-      Object userId \u003d\n-          AppToFlowColumnPrefix.USER_ID.readResult(result, clusterId);\n+      Object flowName \u003d ColumnRWHelper.readResult(\n+          result, AppToFlowColumnPrefix.FLOW_NAME, clusterId);\n+      Object flowRunId \u003d ColumnRWHelper.readResult(\n+          result, AppToFlowColumnPrefix.FLOW_RUN_ID, clusterId);\n+      Object userId \u003d ColumnRWHelper.readResult(\n+          result, AppToFlowColumnPrefix.USER_ID, clusterId);\n       if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n         throw new NotFoundException(\n             \"Unable to find the context flow name, and flow run id, \"\n             + \"and user id for clusterId\u003d\" + clusterId\n             + \", appId\u003d\" + appToFlowRowKey.getAppId());\n       }\n       return new FlowContext((String)userId, (String)flowName,\n           ((Number)flowRunId).longValue());\n     } else {\n       throw new NotFoundException(\n           \"Unable to find the context flow name, and flow run id, \"\n           + \"and user id for clusterId\u003d\" + clusterId\n           + \", appId\u003d\" + appToFlowRowKey.getAppId());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      String clusterId, Configuration hbaseConf, Connection conn)\n      throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      Object flowName \u003d ColumnRWHelper.readResult(\n          result, AppToFlowColumnPrefix.FLOW_NAME, clusterId);\n      Object flowRunId \u003d ColumnRWHelper.readResult(\n          result, AppToFlowColumnPrefix.FLOW_RUN_ID, clusterId);\n      Object userId \u003d ColumnRWHelper.readResult(\n          result, AppToFlowColumnPrefix.USER_ID, clusterId);\n      if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n        throw new NotFoundException(\n            \"Unable to find the context flow name, and flow run id, \"\n            + \"and user id for clusterId\u003d\" + clusterId\n            + \", appId\u003d\" + appToFlowRowKey.getAppId());\n      }\n      return new FlowContext((String)userId, (String)flowName,\n          ((Number)flowRunId).longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow name, and flow run id, \"\n          + \"and user id for clusterId\u003d\" + clusterId\n          + \", appId\u003d\" + appToFlowRowKey.getAppId());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n       String clusterId, Configuration hbaseConf, Connection conn)\n       throws IOException {\n     byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n-      Object flowName \u003d\n-          AppToFlowColumnPrefix.FLOW_NAME.readResult(result, clusterId);\n-      Object flowRunId \u003d\n-          AppToFlowColumnPrefix.FLOW_RUN_ID.readResult(result, clusterId);\n-      Object userId \u003d\n-          AppToFlowColumnPrefix.USER_ID.readResult(result, clusterId);\n+      Object flowName \u003d ColumnRWHelper.readResult(\n+          result, AppToFlowColumnPrefix.FLOW_NAME, clusterId);\n+      Object flowRunId \u003d ColumnRWHelper.readResult(\n+          result, AppToFlowColumnPrefix.FLOW_RUN_ID, clusterId);\n+      Object userId \u003d ColumnRWHelper.readResult(\n+          result, AppToFlowColumnPrefix.USER_ID, clusterId);\n       if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n         throw new NotFoundException(\n             \"Unable to find the context flow name, and flow run id, \"\n             + \"and user id for clusterId\u003d\" + clusterId\n             + \", appId\u003d\" + appToFlowRowKey.getAppId());\n       }\n       return new FlowContext((String)userId, (String)flowName,\n           ((Number)flowRunId).longValue());\n     } else {\n       throw new NotFoundException(\n           \"Unable to find the context flow name, and flow run id, \"\n           + \"and user id for clusterId\u003d\" + clusterId\n           + \", appId\u003d\" + appToFlowRowKey.getAppId());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      String clusterId, Configuration hbaseConf, Connection conn)\n      throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      Object flowName \u003d ColumnRWHelper.readResult(\n          result, AppToFlowColumnPrefix.FLOW_NAME, clusterId);\n      Object flowRunId \u003d ColumnRWHelper.readResult(\n          result, AppToFlowColumnPrefix.FLOW_RUN_ID, clusterId);\n      Object userId \u003d ColumnRWHelper.readResult(\n          result, AppToFlowColumnPrefix.USER_ID, clusterId);\n      if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n        throw new NotFoundException(\n            \"Unable to find the context flow name, and flow run id, \"\n            + \"and user id for clusterId\u003d\" + clusterId\n            + \", appId\u003d\" + appToFlowRowKey.getAppId());\n      }\n      return new FlowContext((String)userId, (String)flowName,\n          ((Number)flowRunId).longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow name, and flow run id, \"\n          + \"and user id for clusterId\u003d\" + clusterId\n          + \", appId\u003d\" + appToFlowRowKey.getAppId());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "71847ed44dc5a1ef702eaf234150a2ff69c15341": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5378. Accommodate app-id-\u003ecluster mapping (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5378. Accommodate app-id-\u003ecluster mapping (Sangjin Lee via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,28 @@\n   protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n-      Configuration hbaseConf, Connection conn) throws IOException {\n+      String clusterId, Configuration hbaseConf, Connection conn)\n+      throws IOException {\n     byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n-      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n-          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n-          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n-          .longValue());\n+      Object flowName \u003d\n+          AppToFlowColumnPrefix.FLOW_NAME.readResult(result, clusterId);\n+      Object flowRunId \u003d\n+          AppToFlowColumnPrefix.FLOW_RUN_ID.readResult(result, clusterId);\n+      Object userId \u003d\n+          AppToFlowColumnPrefix.USER_ID.readResult(result, clusterId);\n+      if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n+        throw new NotFoundException(\n+            \"Unable to find the context flow name, and flow run id, \"\n+            + \"and user id for clusterId\u003d\" + clusterId\n+            + \", appId\u003d\" + appToFlowRowKey.getAppId());\n+      }\n+      return new FlowContext((String)userId, (String)flowName,\n+          ((Number)flowRunId).longValue());\n     } else {\n       throw new NotFoundException(\n-          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n-              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n-              + appToFlowRowKey.getAppId());\n+          \"Unable to find the context flow name, and flow run id, \"\n+          + \"and user id for clusterId\u003d\" + clusterId\n+          + \", appId\u003d\" + appToFlowRowKey.getAppId());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      String clusterId, Configuration hbaseConf, Connection conn)\n      throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      Object flowName \u003d\n          AppToFlowColumnPrefix.FLOW_NAME.readResult(result, clusterId);\n      Object flowRunId \u003d\n          AppToFlowColumnPrefix.FLOW_RUN_ID.readResult(result, clusterId);\n      Object userId \u003d\n          AppToFlowColumnPrefix.USER_ID.readResult(result, clusterId);\n      if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n        throw new NotFoundException(\n            \"Unable to find the context flow name, and flow run id, \"\n            + \"and user id for clusterId\u003d\" + clusterId\n            + \", appId\u003d\" + appToFlowRowKey.getAppId());\n      }\n      return new FlowContext((String)userId, (String)flowName,\n          ((Number)flowRunId).longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow name, and flow run id, \"\n          + \"and user id for clusterId\u003d\" + clusterId\n          + \", appId\u003d\" + appToFlowRowKey.getAppId());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
          "extendedDetails": {
            "oldValue": "[appToFlowRowKey-AppToFlowRowKey, hbaseConf-Configuration, conn-Connection]",
            "newValue": "[appToFlowRowKey-AppToFlowRowKey, clusterId-String, hbaseConf-Configuration, conn-Connection]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5378. Accommodate app-id-\u003ecluster mapping (Sangjin Lee via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,28 @@\n   protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n-      Configuration hbaseConf, Connection conn) throws IOException {\n+      String clusterId, Configuration hbaseConf, Connection conn)\n+      throws IOException {\n     byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n-      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n-          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n-          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n-          .longValue());\n+      Object flowName \u003d\n+          AppToFlowColumnPrefix.FLOW_NAME.readResult(result, clusterId);\n+      Object flowRunId \u003d\n+          AppToFlowColumnPrefix.FLOW_RUN_ID.readResult(result, clusterId);\n+      Object userId \u003d\n+          AppToFlowColumnPrefix.USER_ID.readResult(result, clusterId);\n+      if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n+        throw new NotFoundException(\n+            \"Unable to find the context flow name, and flow run id, \"\n+            + \"and user id for clusterId\u003d\" + clusterId\n+            + \", appId\u003d\" + appToFlowRowKey.getAppId());\n+      }\n+      return new FlowContext((String)userId, (String)flowName,\n+          ((Number)flowRunId).longValue());\n     } else {\n       throw new NotFoundException(\n-          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n-              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n-              + appToFlowRowKey.getAppId());\n+          \"Unable to find the context flow name, and flow run id, \"\n+          + \"and user id for clusterId\u003d\" + clusterId\n+          + \", appId\u003d\" + appToFlowRowKey.getAppId());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      String clusterId, Configuration hbaseConf, Connection conn)\n      throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      Object flowName \u003d\n          AppToFlowColumnPrefix.FLOW_NAME.readResult(result, clusterId);\n      Object flowRunId \u003d\n          AppToFlowColumnPrefix.FLOW_RUN_ID.readResult(result, clusterId);\n      Object userId \u003d\n          AppToFlowColumnPrefix.USER_ID.readResult(result, clusterId);\n      if (flowName \u003d\u003d null || userId \u003d\u003d null || flowRunId \u003d\u003d null) {\n        throw new NotFoundException(\n            \"Unable to find the context flow name, and flow run id, \"\n            + \"and user id for clusterId\u003d\" + clusterId\n            + \", appId\u003d\" + appToFlowRowKey.getAppId());\n      }\n      return new FlowContext((String)userId, (String)flowName,\n          ((Number)flowRunId).longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow name, and flow run id, \"\n          + \"and user id for clusterId\u003d\" + clusterId\n          + \", appId\u003d\" + appToFlowRowKey.getAppId());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "4481561e4a3433197dd8e73f38856eef84f0fd03": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-5739. Provide timeline reader API to list available timeline entity types for one application. Contributed by Li Lu.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n          .longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n              + appToFlowRowKey.getAppId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/AbstractTimelineStorageReader.java",
        "oldMethodName": "lookupFlowContext",
        "newMethodName": "lookupFlowContext"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n          .longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n              + appToFlowRowKey.getAppId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  protected FlowContext lookupFlowContext(String clusterId, String appId,\n+  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n       Configuration hbaseConf, Connection conn) throws IOException {\n-    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n+    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n-      return new FlowContext(\n-          AppToFlowColumn.USER_ID.readResult(result).toString(),\n-          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n-          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n+      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n+          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n+          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n+          .longValue());\n     } else {\n       throw new NotFoundException(\n-          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n-          clusterId + \", appId\u003d\" + appId);\n+          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n+              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n+              + appToFlowRowKey.getAppId());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n          .longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n              + appToFlowRowKey.getAppId());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
          "extendedDetails": {
            "oldValue": "[clusterId-String, appId-String, hbaseConf-Configuration, conn-Connection]",
            "newValue": "[appToFlowRowKey-AppToFlowRowKey, hbaseConf-Configuration, conn-Connection]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  protected FlowContext lookupFlowContext(String clusterId, String appId,\n+  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n       Configuration hbaseConf, Connection conn) throws IOException {\n-    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n+    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n-      return new FlowContext(\n-          AppToFlowColumn.USER_ID.readResult(result).toString(),\n-          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n-          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n+      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n+          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n+          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n+          .longValue());\n     } else {\n       throw new NotFoundException(\n-          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n-          clusterId + \", appId\u003d\" + appId);\n+          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n+              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n+              + appToFlowRowKey.getAppId());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FlowContext lookupFlowContext(AppToFlowRowKey appToFlowRowKey,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d appToFlowRowKey.getRowKey();\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(AppToFlowColumn.USER_ID.readResult(result)\n          .toString(), AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result))\n          .longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\"\n              + appToFlowRowKey.getClusterId() + \", appId\u003d\"\n              + appToFlowRowKey.getAppId());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   protected FlowContext lookupFlowContext(String clusterId, String appId,\n       Configuration hbaseConf, Connection conn) throws IOException {\n     byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n       return new FlowContext(\n           AppToFlowColumn.USER_ID.readResult(result).toString(),\n           AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n           ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n     } else {\n-       throw new IOException(\n-           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n-           clusterId + \", appId\u003d\" + appId);\n+      throw new NotFoundException(\n+          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n+          clusterId + \", appId\u003d\" + appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FlowContext lookupFlowContext(String clusterId, String appId,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.USER_ID.readResult(result).toString(),\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n      throw new NotFoundException(\n          \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n          clusterId + \", appId\u003d\" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {}
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FlowContext lookupFlowContext(String clusterId, String appId,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.USER_ID.readResult(result).toString(),\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n       throw new IOException(\n           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n           clusterId + \", appId\u003d\" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   protected FlowContext lookupFlowContext(String clusterId, String appId,\n       Configuration hbaseConf, Connection conn) throws IOException {\n     byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n       return new FlowContext(\n+          AppToFlowColumn.USER_ID.readResult(result).toString(),\n           AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n           ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n     } else {\n        throw new IOException(\n            \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n            clusterId + \", appId\u003d\" + appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FlowContext lookupFlowContext(String clusterId, String appId,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.USER_ID.readResult(result).toString(),\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n       throw new IOException(\n           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n           clusterId + \", appId\u003d\" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
      "extendedDetails": {}
    },
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3864. Implement support for querying single app and all apps for a flow run (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "708fa8b1ae85b6efda318368bc0c0ba02d4958c8",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  private FlowContext lookupFlowContext(String clusterId, String appId,\n+  protected FlowContext lookupFlowContext(String clusterId, String appId,\n       Configuration hbaseConf, Connection conn) throws IOException {\n     byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n       return new FlowContext(\n           AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n           ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n     } else {\n        throw new IOException(\n            \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n            clusterId + \", appId\u003d\" + appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FlowContext lookupFlowContext(String clusterId, String appId,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n       throw new IOException(\n           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n           clusterId + \", appId\u003d\" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": {
      "type": "Ymultichange(Ymovefromfile,Yparameterchange)",
      "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthor": "Vrushali",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private FlowContext lookupFlowContext(String clusterId, String appId)\n-      throws IOException {\n+  private FlowContext lookupFlowContext(String clusterId, String appId,\n+      Configuration hbaseConf, Connection conn) throws IOException {\n     byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n       return new FlowContext(\n           AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n-          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n+          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n     } else {\n        throw new IOException(\n            \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n            clusterId + \", appId\u003d\" + appId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FlowContext lookupFlowContext(String clusterId, String appId,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n       throw new IOException(\n           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n           clusterId + \", appId\u003d\" + appId);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
            "oldMethodName": "lookupFlowContext",
            "newMethodName": "lookupFlowContext"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private FlowContext lookupFlowContext(String clusterId, String appId)\n-      throws IOException {\n+  private FlowContext lookupFlowContext(String clusterId, String appId,\n+      Configuration hbaseConf, Connection conn) throws IOException {\n     byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n     Get get \u003d new Get(rowKey);\n     Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n     if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n       return new FlowContext(\n           AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n-          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n+          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n     } else {\n        throw new IOException(\n            \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n            clusterId + \", appId\u003d\" + appId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FlowContext lookupFlowContext(String clusterId, String appId,\n      Configuration hbaseConf, Connection conn) throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number)AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n       throw new IOException(\n           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n           clusterId + \", appId\u003d\" + appId);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
          "extendedDetails": {
            "oldValue": "[clusterId-String, appId-String]",
            "newValue": "[clusterId-String, appId-String, hbaseConf-Configuration, conn-Connection]"
          }
        }
      ]
    },
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3049. [Storage Implementation] Implement storage reader interface to fetch raw data from HBase backend (Zhijie Shen via sjlee)\n\n(cherry picked from commit 07433c2ad52df9e844dbd90020c277d3df844dcd)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,15 @@\n+  private FlowContext lookupFlowContext(String clusterId, String appId)\n+      throws IOException {\n+    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n+    Get get \u003d new Get(rowKey);\n+    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n+    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n+      return new FlowContext(\n+          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n+          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n+    } else {\n+       throw new IOException(\n+           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n+           clusterId + \", appId\u003d\" + appId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FlowContext lookupFlowContext(String clusterId, String appId)\n      throws IOException {\n    byte[] rowKey \u003d AppToFlowRowKey.getRowKey(clusterId, appId);\n    Get get \u003d new Get(rowKey);\n    Result result \u003d appToFlowTable.getResult(hbaseConf, conn, get);\n    if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n      return new FlowContext(\n          AppToFlowColumn.FLOW_ID.readResult(result).toString(),\n          ((Number) AppToFlowColumn.FLOW_RUN_ID.readResult(result)).longValue());\n    } else {\n       throw new IOException(\n           \"Unable to find the context flow ID and flow run ID for clusterId\u003d\" +\n           clusterId + \", appId\u003d\" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java"
    }
  }
}