{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceResourceHandlerImpl.java",
  "functionName": "tryIsolateDevices",
  "functionId": "tryIsolateDevices___allocation-DeviceMappingManager.DeviceAllocation__containerIdStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
  "functionStartLine": 178,
  "functionEndLine": 236,
  "numCommitsSeen": 6,
  "timeTaken": 1222,
  "changeHistory": [
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0"
  ],
  "changeHistoryShort": {
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,59 @@\n+  private void tryIsolateDevices(\n+      DeviceMappingManager.DeviceAllocation allocation,\n+      String containerIdStr) throws ResourceHandlerException {\n+    try {\n+      // Execute c-e to setup device isolation before launch the container\n+      PrivilegedOperation privilegedOperation \u003d new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.DEVICE,\n+          Arrays.asList(CONTAINER_ID_CLI_OPTION, containerIdStr));\n+      boolean needNativeDeviceOperation \u003d false;\n+      int majorNumber;\n+      int minorNumber;\n+      List\u003cString\u003e devNumbers \u003d new ArrayList\u003c\u003e();\n+      if (!allocation.getDenied().isEmpty()) {\n+        DeviceType devType;\n+        for (Device deniedDevice : allocation.getDenied()) {\n+          majorNumber \u003d deniedDevice.getMajorNumber();\n+          minorNumber \u003d deniedDevice.getMinorNumber();\n+          // Add device type\n+          devType \u003d getDeviceType(deniedDevice);\n+          if (devType !\u003d null) {\n+            devNumbers.add(devType.getName() + \"-\" + majorNumber + \":\"\n+                + minorNumber + \"-rwm\");\n+          }\n+        }\n+        if (devNumbers.size() !\u003d 0) {\n+          privilegedOperation.appendArgs(\n+              Arrays.asList(EXCLUDED_DEVICES_CLI_OPTION,\n+                  StringUtils.join(\",\", devNumbers)));\n+          needNativeDeviceOperation \u003d true;\n+        }\n+      }\n+\n+      if (!allocation.getAllowed().isEmpty()) {\n+        devNumbers.clear();\n+        for (Device allowedDevice : allocation.getAllowed()) {\n+          majorNumber \u003d allowedDevice.getMajorNumber();\n+          minorNumber \u003d allowedDevice.getMinorNumber();\n+          if (majorNumber !\u003d -1 \u0026\u0026 minorNumber !\u003d -1) {\n+            devNumbers.add(majorNumber + \":\" + minorNumber);\n+          }\n+        }\n+        if (devNumbers.size() \u003e 0) {\n+          privilegedOperation.appendArgs(\n+              Arrays.asList(ALLOWED_DEVICES_CLI_OPTION,\n+                  StringUtils.join(\",\", devNumbers)));\n+          needNativeDeviceOperation \u003d true;\n+        }\n+      }\n+      if (needNativeDeviceOperation) {\n+        privilegedOperationExecutor.executePrivilegedOperation(\n+            privilegedOperation, true);\n+      }\n+    } catch (PrivilegedOperationException e) {\n+      cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES,\n+          containerIdStr);\n+      LOG.warn(\"Could not update cgroup for container\", e);\n+      throw new ResourceHandlerException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void tryIsolateDevices(\n      DeviceMappingManager.DeviceAllocation allocation,\n      String containerIdStr) throws ResourceHandlerException {\n    try {\n      // Execute c-e to setup device isolation before launch the container\n      PrivilegedOperation privilegedOperation \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.DEVICE,\n          Arrays.asList(CONTAINER_ID_CLI_OPTION, containerIdStr));\n      boolean needNativeDeviceOperation \u003d false;\n      int majorNumber;\n      int minorNumber;\n      List\u003cString\u003e devNumbers \u003d new ArrayList\u003c\u003e();\n      if (!allocation.getDenied().isEmpty()) {\n        DeviceType devType;\n        for (Device deniedDevice : allocation.getDenied()) {\n          majorNumber \u003d deniedDevice.getMajorNumber();\n          minorNumber \u003d deniedDevice.getMinorNumber();\n          // Add device type\n          devType \u003d getDeviceType(deniedDevice);\n          if (devType !\u003d null) {\n            devNumbers.add(devType.getName() + \"-\" + majorNumber + \":\"\n                + minorNumber + \"-rwm\");\n          }\n        }\n        if (devNumbers.size() !\u003d 0) {\n          privilegedOperation.appendArgs(\n              Arrays.asList(EXCLUDED_DEVICES_CLI_OPTION,\n                  StringUtils.join(\",\", devNumbers)));\n          needNativeDeviceOperation \u003d true;\n        }\n      }\n\n      if (!allocation.getAllowed().isEmpty()) {\n        devNumbers.clear();\n        for (Device allowedDevice : allocation.getAllowed()) {\n          majorNumber \u003d allowedDevice.getMajorNumber();\n          minorNumber \u003d allowedDevice.getMinorNumber();\n          if (majorNumber !\u003d -1 \u0026\u0026 minorNumber !\u003d -1) {\n            devNumbers.add(majorNumber + \":\" + minorNumber);\n          }\n        }\n        if (devNumbers.size() \u003e 0) {\n          privilegedOperation.appendArgs(\n              Arrays.asList(ALLOWED_DEVICES_CLI_OPTION,\n                  StringUtils.join(\",\", devNumbers)));\n          needNativeDeviceOperation \u003d true;\n        }\n      }\n      if (needNativeDeviceOperation) {\n        privilegedOperationExecutor.executePrivilegedOperation(\n            privilegedOperation, true);\n      }\n    } catch (PrivilegedOperationException e) {\n      cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES,\n          containerIdStr);\n      LOG.warn(\"Could not update cgroup for container\", e);\n      throw new ResourceHandlerException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java"
    }
  }
}