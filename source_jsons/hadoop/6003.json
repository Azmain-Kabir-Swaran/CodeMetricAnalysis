{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeFsck.java",
  "functionName": "newConnectedPeer",
  "functionId": "newConnectedPeer___addr-InetSocketAddress__blockToken-Token__BlockTokenIdentifier____datanodeId-DatanodeID",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
  "functionStartLine": 1092,
  "functionEndLine": 1109,
  "numCommitsSeen": 154,
  "timeTaken": 4837,
  "changeHistory": [
    "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "3aac4758b007a56e3d66998d457b2156effca528",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "3b54223c0f32d42a84436c670d80b791a8e9696d",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9": "Ybodychange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Ybodychange",
    "3aac4758b007a56e3d66998d457b2156effca528": "Ybodychange",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ybodychange",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Ymultichange(Yparameterchange,Ybodychange)",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10223. peerFromSocketAndKey performs SASL exchange before setting connection timeouts (cmccabe)\n",
      "commitDate": "30/03/16 1:37 PM",
      "commitName": "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "10/03/16 7:03 PM",
      "commitNameOld": "e01c6ea688e62f25c4310e771a0cd85b53a5fb87",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n               public Peer newConnectedPeer(InetSocketAddress addr,\n                   Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                   throws IOException {\n                 Peer peer \u003d null;\n                 Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                 try {\n                   s.connect(addr, HdfsConstants.READ_TIMEOUT);\n                   s.setSoTimeout(HdfsConstants.READ_TIMEOUT);\n                   peer \u003d DFSUtilClient.peerFromSocketAndKey(\n                         dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n-                        blockToken, datanodeId);\n+                        blockToken, datanodeId, HdfsConstants.READ_TIMEOUT);\n                 } finally {\n                   if (peer \u003d\u003d null) {\n                     IOUtils.closeQuietly(s);\n                   }\n                 }\n                 return peer;\n               }\n\\ No newline at end of file\n",
      "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr,\n                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsConstants.READ_TIMEOUT);\n                  peer \u003d DFSUtilClient.peerFromSocketAndKey(\n                        dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n                        blockToken, datanodeId, HdfsConstants.READ_TIMEOUT);\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/08/15 1:03 PM",
      "commitNameOld": "f97a0f8c2cdad0668a3892319f6969fafc2f04cd",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n               public Peer newConnectedPeer(InetSocketAddress addr,\n                   Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                   throws IOException {\n                 Peer peer \u003d null;\n                 Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                 try {\n                   s.connect(addr, HdfsConstants.READ_TIMEOUT);\n                   s.setSoTimeout(HdfsConstants.READ_TIMEOUT);\n-                  peer \u003d TcpPeerServer.peerFromSocketAndKey(\n+                  peer \u003d DFSUtilClient.peerFromSocketAndKey(\n                         dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n                         blockToken, datanodeId);\n                 } finally {\n                   if (peer \u003d\u003d null) {\n                     IOUtils.closeQuietly(s);\n                   }\n                 }\n                 return peer;\n               }\n\\ No newline at end of file\n",
      "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr,\n                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsConstants.READ_TIMEOUT);\n                  peer \u003d DFSUtilClient.peerFromSocketAndKey(\n                        dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n                        blockToken, datanodeId);\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "3aac4758b007a56e3d66998d457b2156effca528": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8803. Move DfsClientConf to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "19/08/15 11:28 AM",
      "commitName": "3aac4758b007a56e3d66998d457b2156effca528",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n               public Peer newConnectedPeer(InetSocketAddress addr,\n                   Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                   throws IOException {\n                 Peer peer \u003d null;\n                 Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                 try {\n-                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n-                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n+                  s.connect(addr, HdfsConstants.READ_TIMEOUT);\n+                  s.setSoTimeout(HdfsConstants.READ_TIMEOUT);\n                   peer \u003d TcpPeerServer.peerFromSocketAndKey(\n                         dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n                         blockToken, datanodeId);\n                 } finally {\n                   if (peer \u003d\u003d null) {\n                     IOUtils.closeQuietly(s);\n                   }\n                 }\n                 return peer;\n               }\n\\ No newline at end of file\n",
      "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr,\n                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsConstants.READ_TIMEOUT);\n                  peer \u003d TcpPeerServer.peerFromSocketAndKey(\n                        dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n                        blockToken, datanodeId);\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "16/07/14 4:55 PM",
      "commitNameOld": "c477a166e18e122b101c372b1c0a2f362e53866d",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 65.19,
      "commitsBetweenForRepo": 626,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n               public Peer newConnectedPeer(InetSocketAddress addr,\n                   Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                   throws IOException {\n                 Peer peer \u003d null;\n                 Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                 try {\n                   s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                   s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n-                  peer \u003d TcpPeerServer.peerFromSocketAndKey(saslClient, s,\n-                        NamenodeFsck.this, blockToken, datanodeId);\n+                  peer \u003d TcpPeerServer.peerFromSocketAndKey(\n+                        dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n+                        blockToken, datanodeId);\n                 } finally {\n                   if (peer \u003d\u003d null) {\n                     IOUtils.closeQuietly(s);\n                   }\n                 }\n                 return peer;\n               }\n\\ No newline at end of file\n",
      "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr,\n                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n                  peer \u003d TcpPeerServer.peerFromSocketAndKey(\n                        dfs.getSaslDataTransferClient(), s, NamenodeFsck.this,\n                        blockToken, datanodeId);\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "03/05/14 4:02 AM",
          "commitNameOld": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 72.3,
          "commitsBetweenForRepo": 427,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-              public Peer newConnectedPeer(InetSocketAddress addr)\n+              public Peer newConnectedPeer(InetSocketAddress addr,\n+                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                   throws IOException {\n                 Peer peer \u003d null;\n                 Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                 try {\n                   s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                   s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n-                  peer \u003d TcpPeerServer.peerFromSocketAndKey(s, namenode.getRpcServer().\n-                        getDataEncryptionKey());\n+                  peer \u003d TcpPeerServer.peerFromSocketAndKey(saslClient, s,\n+                        NamenodeFsck.this, blockToken, datanodeId);\n                 } finally {\n                   if (peer \u003d\u003d null) {\n                     IOUtils.closeQuietly(s);\n                   }\n                 }\n                 return peer;\n               }\n\\ No newline at end of file\n",
          "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr,\n                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n                  peer \u003d TcpPeerServer.peerFromSocketAndKey(saslClient, s,\n                        NamenodeFsck.this, blockToken, datanodeId);\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
          "extendedDetails": {
            "oldValue": "[addr-InetSocketAddress]",
            "newValue": "[addr-InetSocketAddress, blockToken-Token\u003cBlockTokenIdentifier\u003e, datanodeId-DatanodeID]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "03/05/14 4:02 AM",
          "commitNameOld": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 72.3,
          "commitsBetweenForRepo": 427,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-              public Peer newConnectedPeer(InetSocketAddress addr)\n+              public Peer newConnectedPeer(InetSocketAddress addr,\n+                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                   throws IOException {\n                 Peer peer \u003d null;\n                 Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                 try {\n                   s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                   s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n-                  peer \u003d TcpPeerServer.peerFromSocketAndKey(s, namenode.getRpcServer().\n-                        getDataEncryptionKey());\n+                  peer \u003d TcpPeerServer.peerFromSocketAndKey(saslClient, s,\n+                        NamenodeFsck.this, blockToken, datanodeId);\n                 } finally {\n                   if (peer \u003d\u003d null) {\n                     IOUtils.closeQuietly(s);\n                   }\n                 }\n                 return peer;\n               }\n\\ No newline at end of file\n",
          "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr,\n                  Token\u003cBlockTokenIdentifier\u003e blockToken, DatanodeID datanodeId)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n                  peer \u003d TcpPeerServer.peerFromSocketAndKey(saslClient, s,\n                        NamenodeFsck.this, blockToken, datanodeId);\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
          "extendedDetails": {}
        }
      ]
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,16 @@\n+              public Peer newConnectedPeer(InetSocketAddress addr)\n+                  throws IOException {\n+                Peer peer \u003d null;\n+                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n+                try {\n+                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n+                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n+                  peer \u003d TcpPeerServer.peerFromSocketAndKey(s, namenode.getRpcServer().\n+                        getDataEncryptionKey());\n+                } finally {\n+                  if (peer \u003d\u003d null) {\n+                    IOUtils.closeQuietly(s);\n+                  }\n+                }\n+                return peer;\n+              }\n\\ No newline at end of file\n",
      "actualSource": "              public Peer newConnectedPeer(InetSocketAddress addr)\n                  throws IOException {\n                Peer peer \u003d null;\n                Socket s \u003d NetUtils.getDefaultSocketFactory(conf).createSocket();\n                try {\n                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);\n                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);\n                  peer \u003d TcpPeerServer.peerFromSocketAndKey(s, namenode.getRpcServer().\n                        getDataEncryptionKey());\n                } finally {\n                  if (peer \u003d\u003d null) {\n                    IOUtils.closeQuietly(s);\n                  }\n                }\n                return peer;\n              }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java"
    }
  }
}