{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobInfo.java",
  "functionName": "countTasksAndAttempts",
  "functionId": "countTasksAndAttempts___job-Job",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/JobInfo.java",
  "functionStartLine": 279,
  "functionEndLine": 360,
  "numCommitsSeen": 9,
  "timeTaken": 7511,
  "changeHistory": [
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ymultichange(Ymovefromfile,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "10/01/12 2:26 PM",
      "commitNameOld": "bc374626bebef8297c7fd03ceaa27932baf6a523",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 309.08,
      "commitsBetweenForRepo": 2002,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,82 @@\n   private void countTasksAndAttempts(Job job) {\n     final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n     if (tasks \u003d\u003d null) {\n       return;\n     }\n     for (Task task : tasks.values()) {\n       switch (task.getType()) {\n       case MAP:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n           ++this.mapsRunning;\n           break;\n         case SCHEDULED:\n           ++this.mapsPending;\n           break;\n+        default:\n+          break;\n         }\n         break;\n       case REDUCE:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n           ++this.reducesRunning;\n           break;\n         case SCHEDULED:\n           ++this.reducesPending;\n           break;\n+        default:\n+          break;\n         }\n         break;\n+      default:\n+        throw new IllegalStateException(\n+            \"Task type is neither map nor reduce: \" + task.getType());\n       }\n       // Attempts counts\n       Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n       int newAttempts, running, successful, failed, killed;\n       for (TaskAttempt attempt : attempts.values()) {\n \n         newAttempts \u003d 0;\n         running \u003d 0;\n         successful \u003d 0;\n         failed \u003d 0;\n         killed \u003d 0;\n         if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n           ++newAttempts;\n         } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n           ++running;\n         } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n             .getState())) {\n           ++successful;\n         } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n           ++failed;\n         } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n           ++killed;\n         }\n \n         switch (task.getType()) {\n         case MAP:\n           this.newMapAttempts +\u003d newAttempts;\n           this.runningMapAttempts +\u003d running;\n           this.successfulMapAttempts +\u003d successful;\n           this.failedMapAttempts +\u003d failed;\n           this.killedMapAttempts +\u003d killed;\n           break;\n         case REDUCE:\n           this.newReduceAttempts +\u003d newAttempts;\n           this.runningReduceAttempts +\u003d running;\n           this.successfulReduceAttempts +\u003d successful;\n           this.failedReduceAttempts +\u003d failed;\n           this.killedReduceAttempts +\u003d killed;\n           break;\n+        default:\n+          throw new IllegalStateException(\"Task type neither map nor reduce: \" + \n+              task.getType());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void countTasksAndAttempts(Job job) {\n    final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n    if (tasks \u003d\u003d null) {\n      return;\n    }\n    for (Task task : tasks.values()) {\n      switch (task.getType()) {\n      case MAP:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.mapsRunning;\n          break;\n        case SCHEDULED:\n          ++this.mapsPending;\n          break;\n        default:\n          break;\n        }\n        break;\n      case REDUCE:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.reducesRunning;\n          break;\n        case SCHEDULED:\n          ++this.reducesPending;\n          break;\n        default:\n          break;\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Task type is neither map nor reduce: \" + task.getType());\n      }\n      // Attempts counts\n      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n      int newAttempts, running, successful, failed, killed;\n      for (TaskAttempt attempt : attempts.values()) {\n\n        newAttempts \u003d 0;\n        running \u003d 0;\n        successful \u003d 0;\n        failed \u003d 0;\n        killed \u003d 0;\n        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n          ++newAttempts;\n        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n          ++running;\n        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n            .getState())) {\n          ++successful;\n        } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n          ++failed;\n        } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n          ++killed;\n        }\n\n        switch (task.getType()) {\n        case MAP:\n          this.newMapAttempts +\u003d newAttempts;\n          this.runningMapAttempts +\u003d running;\n          this.successfulMapAttempts +\u003d successful;\n          this.failedMapAttempts +\u003d failed;\n          this.killedMapAttempts +\u003d killed;\n          break;\n        case REDUCE:\n          this.newReduceAttempts +\u003d newAttempts;\n          this.runningReduceAttempts +\u003d running;\n          this.successfulReduceAttempts +\u003d successful;\n          this.failedReduceAttempts +\u003d failed;\n          this.killedReduceAttempts +\u003d killed;\n          break;\n        default:\n          throw new IllegalStateException(\"Task type neither map nor reduce: \" + \n              task.getType());\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/JobInfo.java",
      "extendedDetails": {}
    },
    "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3548. Added more unit tests for MR AM \u0026 JHS web-services. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 12:01 PM",
      "commitName": "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 22.87,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,72 @@\n   private void countTasksAndAttempts(Job job) {\n-    numReduces \u003d 0;\n-    numMaps \u003d 0;\n     final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n     if (tasks \u003d\u003d null) {\n       return;\n     }\n     for (Task task : tasks.values()) {\n       switch (task.getType()) {\n       case MAP:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n           ++this.mapsRunning;\n           break;\n         case SCHEDULED:\n           ++this.mapsPending;\n           break;\n         }\n         break;\n       case REDUCE:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n           ++this.reducesRunning;\n           break;\n         case SCHEDULED:\n           ++this.reducesPending;\n           break;\n         }\n         break;\n       }\n       // Attempts counts\n       Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n       int newAttempts, running, successful, failed, killed;\n       for (TaskAttempt attempt : attempts.values()) {\n \n         newAttempts \u003d 0;\n         running \u003d 0;\n         successful \u003d 0;\n         failed \u003d 0;\n         killed \u003d 0;\n         if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n           ++newAttempts;\n         } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n           ++running;\n         } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n             .getState())) {\n           ++successful;\n         } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n           ++failed;\n         } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n           ++killed;\n         }\n \n         switch (task.getType()) {\n         case MAP:\n           this.newMapAttempts +\u003d newAttempts;\n           this.runningMapAttempts +\u003d running;\n           this.successfulMapAttempts +\u003d successful;\n           this.failedMapAttempts +\u003d failed;\n           this.killedMapAttempts +\u003d killed;\n           break;\n         case REDUCE:\n           this.newReduceAttempts +\u003d newAttempts;\n           this.runningReduceAttempts +\u003d running;\n           this.successfulReduceAttempts +\u003d successful;\n           this.failedReduceAttempts +\u003d failed;\n           this.killedReduceAttempts +\u003d killed;\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void countTasksAndAttempts(Job job) {\n    final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n    if (tasks \u003d\u003d null) {\n      return;\n    }\n    for (Task task : tasks.values()) {\n      switch (task.getType()) {\n      case MAP:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.mapsRunning;\n          break;\n        case SCHEDULED:\n          ++this.mapsPending;\n          break;\n        }\n        break;\n      case REDUCE:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.reducesRunning;\n          break;\n        case SCHEDULED:\n          ++this.reducesPending;\n          break;\n        }\n        break;\n      }\n      // Attempts counts\n      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n      int newAttempts, running, successful, failed, killed;\n      for (TaskAttempt attempt : attempts.values()) {\n\n        newAttempts \u003d 0;\n        running \u003d 0;\n        successful \u003d 0;\n        failed \u003d 0;\n        killed \u003d 0;\n        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n          ++newAttempts;\n        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n          ++running;\n        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n            .getState())) {\n          ++successful;\n        } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n          ++failed;\n        } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n          ++killed;\n        }\n\n        switch (task.getType()) {\n        case MAP:\n          this.newMapAttempts +\u003d newAttempts;\n          this.runningMapAttempts +\u003d running;\n          this.successfulMapAttempts +\u003d successful;\n          this.failedMapAttempts +\u003d failed;\n          this.killedMapAttempts +\u003d killed;\n          break;\n        case REDUCE:\n          this.newReduceAttempts +\u003d newAttempts;\n          this.runningReduceAttempts +\u003d running;\n          this.successfulReduceAttempts +\u003d successful;\n          this.failedReduceAttempts +\u003d failed;\n          this.killedReduceAttempts +\u003d killed;\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/JobInfo.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/12/11 3:05 PM",
          "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/12/11 2:59 PM",
          "commitNameOld": "37b8cc3f190972c150b6fb1103d6b7a319b9bfc1",
          "commitAuthorOld": "Thomas White",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,74 @@\n   private void countTasksAndAttempts(Job job) {\n-    Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n+    numReduces \u003d 0;\n+    numMaps \u003d 0;\n+    final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n+    if (tasks \u003d\u003d null) {\n+      return;\n+    }\n     for (Task task : tasks.values()) {\n       switch (task.getType()) {\n       case MAP:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n-          ++runningMapTasks;\n+          ++this.mapsRunning;\n           break;\n         case SCHEDULED:\n-          ++pendingMapTasks;\n+          ++this.mapsPending;\n           break;\n         }\n         break;\n       case REDUCE:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n-          ++runningReduceTasks;\n+          ++this.reducesRunning;\n           break;\n         case SCHEDULED:\n-          ++pendingReduceTasks;\n+          ++this.reducesPending;\n           break;\n         }\n         break;\n       }\n-\n       // Attempts counts\n       Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n+      int newAttempts, running, successful, failed, killed;\n       for (TaskAttempt attempt : attempts.values()) {\n \n-        int newAttempts \u003d 0, running \u003d 0, successful \u003d 0, failed \u003d 0, killed \u003d0;\n-\n+        newAttempts \u003d 0;\n+        running \u003d 0;\n+        successful \u003d 0;\n+        failed \u003d 0;\n+        killed \u003d 0;\n         if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n           ++newAttempts;\n-        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt\n-            .getState())) {\n+        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n           ++running;\n         } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n             .getState())) {\n           ++successful;\n-        } else if (TaskAttemptStateUI.FAILED\n-            .correspondsTo(attempt.getState())) {\n+        } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n           ++failed;\n-        } else if (TaskAttemptStateUI.KILLED\n-            .correspondsTo(attempt.getState())) {\n+        } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n           ++killed;\n         }\n \n         switch (task.getType()) {\n         case MAP:\n-          newMapAttempts +\u003d newAttempts;\n-          runningMapAttempts +\u003d running;\n-          successfulMapAttempts +\u003d successful;\n-          failedMapAttempts +\u003d failed;\n-          killedMapAttempts +\u003d killed;\n+          this.newMapAttempts +\u003d newAttempts;\n+          this.runningMapAttempts +\u003d running;\n+          this.successfulMapAttempts +\u003d successful;\n+          this.failedMapAttempts +\u003d failed;\n+          this.killedMapAttempts +\u003d killed;\n           break;\n         case REDUCE:\n-          newReduceAttempts +\u003d newAttempts;\n-          runningReduceAttempts +\u003d running;\n-          successfulReduceAttempts +\u003d successful;\n-          failedReduceAttempts +\u003d failed;\n-          killedReduceAttempts +\u003d killed;\n+          this.newReduceAttempts +\u003d newAttempts;\n+          this.runningReduceAttempts +\u003d running;\n+          this.successfulReduceAttempts +\u003d successful;\n+          this.failedReduceAttempts +\u003d failed;\n+          this.killedReduceAttempts +\u003d killed;\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void countTasksAndAttempts(Job job) {\n    numReduces \u003d 0;\n    numMaps \u003d 0;\n    final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n    if (tasks \u003d\u003d null) {\n      return;\n    }\n    for (Task task : tasks.values()) {\n      switch (task.getType()) {\n      case MAP:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.mapsRunning;\n          break;\n        case SCHEDULED:\n          ++this.mapsPending;\n          break;\n        }\n        break;\n      case REDUCE:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.reducesRunning;\n          break;\n        case SCHEDULED:\n          ++this.reducesPending;\n          break;\n        }\n        break;\n      }\n      // Attempts counts\n      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n      int newAttempts, running, successful, failed, killed;\n      for (TaskAttempt attempt : attempts.values()) {\n\n        newAttempts \u003d 0;\n        running \u003d 0;\n        successful \u003d 0;\n        failed \u003d 0;\n        killed \u003d 0;\n        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n          ++newAttempts;\n        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n          ++running;\n        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n            .getState())) {\n          ++successful;\n        } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n          ++failed;\n        } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n          ++killed;\n        }\n\n        switch (task.getType()) {\n        case MAP:\n          this.newMapAttempts +\u003d newAttempts;\n          this.runningMapAttempts +\u003d running;\n          this.successfulMapAttempts +\u003d successful;\n          this.failedMapAttempts +\u003d failed;\n          this.killedMapAttempts +\u003d killed;\n          break;\n        case REDUCE:\n          this.newReduceAttempts +\u003d newAttempts;\n          this.runningReduceAttempts +\u003d running;\n          this.successfulReduceAttempts +\u003d successful;\n          this.failedReduceAttempts +\u003d failed;\n          this.killedReduceAttempts +\u003d killed;\n          break;\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/JobInfo.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/JobBlock.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/JobInfo.java",
            "oldMethodName": "countTasksAndAttempts",
            "newMethodName": "countTasksAndAttempts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/12/11 3:05 PM",
          "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/12/11 2:59 PM",
          "commitNameOld": "37b8cc3f190972c150b6fb1103d6b7a319b9bfc1",
          "commitAuthorOld": "Thomas White",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,74 @@\n   private void countTasksAndAttempts(Job job) {\n-    Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n+    numReduces \u003d 0;\n+    numMaps \u003d 0;\n+    final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n+    if (tasks \u003d\u003d null) {\n+      return;\n+    }\n     for (Task task : tasks.values()) {\n       switch (task.getType()) {\n       case MAP:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n-          ++runningMapTasks;\n+          ++this.mapsRunning;\n           break;\n         case SCHEDULED:\n-          ++pendingMapTasks;\n+          ++this.mapsPending;\n           break;\n         }\n         break;\n       case REDUCE:\n         // Task counts\n         switch (task.getState()) {\n         case RUNNING:\n-          ++runningReduceTasks;\n+          ++this.reducesRunning;\n           break;\n         case SCHEDULED:\n-          ++pendingReduceTasks;\n+          ++this.reducesPending;\n           break;\n         }\n         break;\n       }\n-\n       // Attempts counts\n       Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n+      int newAttempts, running, successful, failed, killed;\n       for (TaskAttempt attempt : attempts.values()) {\n \n-        int newAttempts \u003d 0, running \u003d 0, successful \u003d 0, failed \u003d 0, killed \u003d0;\n-\n+        newAttempts \u003d 0;\n+        running \u003d 0;\n+        successful \u003d 0;\n+        failed \u003d 0;\n+        killed \u003d 0;\n         if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n           ++newAttempts;\n-        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt\n-            .getState())) {\n+        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n           ++running;\n         } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n             .getState())) {\n           ++successful;\n-        } else if (TaskAttemptStateUI.FAILED\n-            .correspondsTo(attempt.getState())) {\n+        } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n           ++failed;\n-        } else if (TaskAttemptStateUI.KILLED\n-            .correspondsTo(attempt.getState())) {\n+        } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n           ++killed;\n         }\n \n         switch (task.getType()) {\n         case MAP:\n-          newMapAttempts +\u003d newAttempts;\n-          runningMapAttempts +\u003d running;\n-          successfulMapAttempts +\u003d successful;\n-          failedMapAttempts +\u003d failed;\n-          killedMapAttempts +\u003d killed;\n+          this.newMapAttempts +\u003d newAttempts;\n+          this.runningMapAttempts +\u003d running;\n+          this.successfulMapAttempts +\u003d successful;\n+          this.failedMapAttempts +\u003d failed;\n+          this.killedMapAttempts +\u003d killed;\n           break;\n         case REDUCE:\n-          newReduceAttempts +\u003d newAttempts;\n-          runningReduceAttempts +\u003d running;\n-          successfulReduceAttempts +\u003d successful;\n-          failedReduceAttempts +\u003d failed;\n-          killedReduceAttempts +\u003d killed;\n+          this.newReduceAttempts +\u003d newAttempts;\n+          this.runningReduceAttempts +\u003d running;\n+          this.successfulReduceAttempts +\u003d successful;\n+          this.failedReduceAttempts +\u003d failed;\n+          this.killedReduceAttempts +\u003d killed;\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void countTasksAndAttempts(Job job) {\n    numReduces \u003d 0;\n    numMaps \u003d 0;\n    final Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n    if (tasks \u003d\u003d null) {\n      return;\n    }\n    for (Task task : tasks.values()) {\n      switch (task.getType()) {\n      case MAP:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.mapsRunning;\n          break;\n        case SCHEDULED:\n          ++this.mapsPending;\n          break;\n        }\n        break;\n      case REDUCE:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++this.reducesRunning;\n          break;\n        case SCHEDULED:\n          ++this.reducesPending;\n          break;\n        }\n        break;\n      }\n      // Attempts counts\n      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n      int newAttempts, running, successful, failed, killed;\n      for (TaskAttempt attempt : attempts.values()) {\n\n        newAttempts \u003d 0;\n        running \u003d 0;\n        successful \u003d 0;\n        failed \u003d 0;\n        killed \u003d 0;\n        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n          ++newAttempts;\n        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {\n          ++running;\n        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n            .getState())) {\n          ++successful;\n        } else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {\n          ++failed;\n        } else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {\n          ++killed;\n        }\n\n        switch (task.getType()) {\n        case MAP:\n          this.newMapAttempts +\u003d newAttempts;\n          this.runningMapAttempts +\u003d running;\n          this.successfulMapAttempts +\u003d successful;\n          this.failedMapAttempts +\u003d failed;\n          this.killedMapAttempts +\u003d killed;\n          break;\n        case REDUCE:\n          this.newReduceAttempts +\u003d newAttempts;\n          this.runningReduceAttempts +\u003d running;\n          this.successfulReduceAttempts +\u003d successful;\n          this.failedReduceAttempts +\u003d failed;\n          this.killedReduceAttempts +\u003d killed;\n          break;\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/JobInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void countTasksAndAttempts(Job job) {\n    Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n    for (Task task : tasks.values()) {\n      switch (task.getType()) {\n      case MAP:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++runningMapTasks;\n          break;\n        case SCHEDULED:\n          ++pendingMapTasks;\n          break;\n        }\n        break;\n      case REDUCE:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++runningReduceTasks;\n          break;\n        case SCHEDULED:\n          ++pendingReduceTasks;\n          break;\n        }\n        break;\n      }\n\n      // Attempts counts\n      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n      for (TaskAttempt attempt : attempts.values()) {\n\n        int newAttempts \u003d 0, running \u003d 0, successful \u003d 0, failed \u003d 0, killed \u003d0;\n\n        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n          ++newAttempts;\n        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt\n            .getState())) {\n          ++running;\n        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n            .getState())) {\n          ++successful;\n        } else if (TaskAttemptStateUI.FAILED\n            .correspondsTo(attempt.getState())) {\n          ++failed;\n        } else if (TaskAttemptStateUI.KILLED\n            .correspondsTo(attempt.getState())) {\n          ++killed;\n        }\n\n        switch (task.getType()) {\n        case MAP:\n          newMapAttempts +\u003d newAttempts;\n          runningMapAttempts +\u003d running;\n          successfulMapAttempts +\u003d successful;\n          failedMapAttempts +\u003d failed;\n          killedMapAttempts +\u003d killed;\n          break;\n        case REDUCE:\n          newReduceAttempts +\u003d newAttempts;\n          runningReduceAttempts +\u003d running;\n          successfulReduceAttempts +\u003d successful;\n          failedReduceAttempts +\u003d failed;\n          killedReduceAttempts +\u003d killed;\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/JobBlock.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/JobBlock.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/JobBlock.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,69 @@\n+  private void countTasksAndAttempts(Job job) {\n+    Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n+    for (Task task : tasks.values()) {\n+      switch (task.getType()) {\n+      case MAP:\n+        // Task counts\n+        switch (task.getState()) {\n+        case RUNNING:\n+          ++runningMapTasks;\n+          break;\n+        case SCHEDULED:\n+          ++pendingMapTasks;\n+          break;\n+        }\n+        break;\n+      case REDUCE:\n+        // Task counts\n+        switch (task.getState()) {\n+        case RUNNING:\n+          ++runningReduceTasks;\n+          break;\n+        case SCHEDULED:\n+          ++pendingReduceTasks;\n+          break;\n+        }\n+        break;\n+      }\n+\n+      // Attempts counts\n+      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n+      for (TaskAttempt attempt : attempts.values()) {\n+\n+        int newAttempts \u003d 0, running \u003d 0, successful \u003d 0, failed \u003d 0, killed \u003d0;\n+\n+        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n+          ++newAttempts;\n+        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt\n+            .getState())) {\n+          ++running;\n+        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n+            .getState())) {\n+          ++successful;\n+        } else if (TaskAttemptStateUI.FAILED\n+            .correspondsTo(attempt.getState())) {\n+          ++failed;\n+        } else if (TaskAttemptStateUI.KILLED\n+            .correspondsTo(attempt.getState())) {\n+          ++killed;\n+        }\n+\n+        switch (task.getType()) {\n+        case MAP:\n+          newMapAttempts +\u003d newAttempts;\n+          runningMapAttempts +\u003d running;\n+          successfulMapAttempts +\u003d successful;\n+          failedMapAttempts +\u003d failed;\n+          killedMapAttempts +\u003d killed;\n+          break;\n+        case REDUCE:\n+          newReduceAttempts +\u003d newAttempts;\n+          runningReduceAttempts +\u003d running;\n+          successfulReduceAttempts +\u003d successful;\n+          failedReduceAttempts +\u003d failed;\n+          killedReduceAttempts +\u003d killed;\n+          break;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void countTasksAndAttempts(Job job) {\n    Map\u003cTaskId, Task\u003e tasks \u003d job.getTasks();\n    for (Task task : tasks.values()) {\n      switch (task.getType()) {\n      case MAP:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++runningMapTasks;\n          break;\n        case SCHEDULED:\n          ++pendingMapTasks;\n          break;\n        }\n        break;\n      case REDUCE:\n        // Task counts\n        switch (task.getState()) {\n        case RUNNING:\n          ++runningReduceTasks;\n          break;\n        case SCHEDULED:\n          ++pendingReduceTasks;\n          break;\n        }\n        break;\n      }\n\n      // Attempts counts\n      Map\u003cTaskAttemptId, TaskAttempt\u003e attempts \u003d task.getAttempts();\n      for (TaskAttempt attempt : attempts.values()) {\n\n        int newAttempts \u003d 0, running \u003d 0, successful \u003d 0, failed \u003d 0, killed \u003d0;\n\n        if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {\n          ++newAttempts;\n        } else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt\n            .getState())) {\n          ++running;\n        } else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt\n            .getState())) {\n          ++successful;\n        } else if (TaskAttemptStateUI.FAILED\n            .correspondsTo(attempt.getState())) {\n          ++failed;\n        } else if (TaskAttemptStateUI.KILLED\n            .correspondsTo(attempt.getState())) {\n          ++killed;\n        }\n\n        switch (task.getType()) {\n        case MAP:\n          newMapAttempts +\u003d newAttempts;\n          runningMapAttempts +\u003d running;\n          successfulMapAttempts +\u003d successful;\n          failedMapAttempts +\u003d failed;\n          killedMapAttempts +\u003d killed;\n          break;\n        case REDUCE:\n          newReduceAttempts +\u003d newAttempts;\n          runningReduceAttempts +\u003d running;\n          successfulReduceAttempts +\u003d successful;\n          failedReduceAttempts +\u003d failed;\n          killedReduceAttempts +\u003d killed;\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/JobBlock.java"
    }
  }
}