{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PrometheusMetricsSink.java",
  "functionName": "putMetrics",
  "functionId": "putMetrics___metricsRecord-MetricsRecord",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/PrometheusMetricsSink.java",
  "functionStartLine": 55,
  "functionEndLine": 94,
  "numCommitsSeen": 3,
  "timeTaken": 1209,
  "changeHistory": [
    "30ce8546f13209e7272617178f3f2f8753a6c3f2",
    "8bda91d20ab248a0d262d396646861113195f3ed"
  ],
  "changeHistoryShort": {
    "30ce8546f13209e7272617178f3f2f8753a6c3f2": "Ybodychange",
    "8bda91d20ab248a0d262d396646861113195f3ed": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30ce8546f13209e7272617178f3f2f8753a6c3f2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16496. Apply HDDS-1870 (ConcurrentModification at PrometheusMetricsSink) to Hadoop common.\n\nThis closes #1317\n\nReviewed-by: Bharat Viswanadham \u003cbharat@apache.org\u003e\n",
      "commitDate": "20/08/19 6:10 PM",
      "commitName": "30ce8546f13209e7272617178f3f2f8753a6c3f2",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "13/08/19 8:24 PM",
      "commitNameOld": "0f8add8a60d159c2933a8fccffd83a64eb73eadc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.91,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,40 @@\n   public void putMetrics(MetricsRecord metricsRecord) {\n     for (AbstractMetric metrics : metricsRecord.metrics()) {\n       if (metrics.type() \u003d\u003d MetricType.COUNTER\n           || metrics.type() \u003d\u003d MetricType.GAUGE) {\n \n         String key \u003d prometheusName(\n             metricsRecord.name(), metrics.name());\n \n         StringBuilder builder \u003d new StringBuilder();\n-        builder.append(\"# TYPE \" + key + \" \" +\n-            metrics.type().toString().toLowerCase() + \"\\n\");\n-        builder.append(key + \"{\");\n+        builder.append(\"# TYPE \")\n+            .append(key)\n+            .append(\" \")\n+            .append(metrics.type().toString().toLowerCase())\n+            .append(\"\\n\")\n+            .append(key)\n+            .append(\"{\");\n         String sep \u003d \"\";\n \n         //add tags\n         for (MetricsTag tag : metricsRecord.tags()) {\n           String tagName \u003d tag.name().toLowerCase();\n \n           //ignore specific tag which includes sub-hierarchy\n           if (!tagName.equals(\"numopenconnectionsperuser\")) {\n-            builder.append(\n-                sep + tagName + \"\u003d\\\"\" + tag.value() + \"\\\"\");\n+            builder.append(sep)\n+                .append(tagName)\n+                .append(\"\u003d\\\"\")\n+                .append(tag.value())\n+                .append(\"\\\"\");\n             sep \u003d \",\";\n           }\n         }\n         builder.append(\"} \");\n         builder.append(metrics.value());\n+        builder.append(\"\\n\");\n         metricLines.put(key, builder.toString());\n \n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void putMetrics(MetricsRecord metricsRecord) {\n    for (AbstractMetric metrics : metricsRecord.metrics()) {\n      if (metrics.type() \u003d\u003d MetricType.COUNTER\n          || metrics.type() \u003d\u003d MetricType.GAUGE) {\n\n        String key \u003d prometheusName(\n            metricsRecord.name(), metrics.name());\n\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"# TYPE \")\n            .append(key)\n            .append(\" \")\n            .append(metrics.type().toString().toLowerCase())\n            .append(\"\\n\")\n            .append(key)\n            .append(\"{\");\n        String sep \u003d \"\";\n\n        //add tags\n        for (MetricsTag tag : metricsRecord.tags()) {\n          String tagName \u003d tag.name().toLowerCase();\n\n          //ignore specific tag which includes sub-hierarchy\n          if (!tagName.equals(\"numopenconnectionsperuser\")) {\n            builder.append(sep)\n                .append(tagName)\n                .append(\"\u003d\\\"\")\n                .append(tag.value())\n                .append(\"\\\"\");\n            sep \u003d \",\";\n          }\n        }\n        builder.append(\"} \");\n        builder.append(metrics.value());\n        builder.append(\"\\n\");\n        metricLines.put(key, builder.toString());\n\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/PrometheusMetricsSink.java",
      "extendedDetails": {}
    },
    "8bda91d20ab248a0d262d396646861113195f3ed": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16398. Exports Hadoop metrics to Prometheus (#1170)\n\n",
      "commitDate": "31/07/19 10:11 AM",
      "commitName": "8bda91d20ab248a0d262d396646861113195f3ed",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,32 @@\n+  public void putMetrics(MetricsRecord metricsRecord) {\n+    for (AbstractMetric metrics : metricsRecord.metrics()) {\n+      if (metrics.type() \u003d\u003d MetricType.COUNTER\n+          || metrics.type() \u003d\u003d MetricType.GAUGE) {\n+\n+        String key \u003d prometheusName(\n+            metricsRecord.name(), metrics.name());\n+\n+        StringBuilder builder \u003d new StringBuilder();\n+        builder.append(\"# TYPE \" + key + \" \" +\n+            metrics.type().toString().toLowerCase() + \"\\n\");\n+        builder.append(key + \"{\");\n+        String sep \u003d \"\";\n+\n+        //add tags\n+        for (MetricsTag tag : metricsRecord.tags()) {\n+          String tagName \u003d tag.name().toLowerCase();\n+\n+          //ignore specific tag which includes sub-hierarchy\n+          if (!tagName.equals(\"numopenconnectionsperuser\")) {\n+            builder.append(\n+                sep + tagName + \"\u003d\\\"\" + tag.value() + \"\\\"\");\n+            sep \u003d \",\";\n+          }\n+        }\n+        builder.append(\"} \");\n+        builder.append(metrics.value());\n+        metricLines.put(key, builder.toString());\n+\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void putMetrics(MetricsRecord metricsRecord) {\n    for (AbstractMetric metrics : metricsRecord.metrics()) {\n      if (metrics.type() \u003d\u003d MetricType.COUNTER\n          || metrics.type() \u003d\u003d MetricType.GAUGE) {\n\n        String key \u003d prometheusName(\n            metricsRecord.name(), metrics.name());\n\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"# TYPE \" + key + \" \" +\n            metrics.type().toString().toLowerCase() + \"\\n\");\n        builder.append(key + \"{\");\n        String sep \u003d \"\";\n\n        //add tags\n        for (MetricsTag tag : metricsRecord.tags()) {\n          String tagName \u003d tag.name().toLowerCase();\n\n          //ignore specific tag which includes sub-hierarchy\n          if (!tagName.equals(\"numopenconnectionsperuser\")) {\n            builder.append(\n                sep + tagName + \"\u003d\\\"\" + tag.value() + \"\\\"\");\n            sep \u003d \",\";\n          }\n        }\n        builder.append(\"} \");\n        builder.append(metrics.value());\n        metricLines.put(key, builder.toString());\n\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/PrometheusMetricsSink.java"
    }
  }
}