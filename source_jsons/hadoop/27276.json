{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "parseDateRange",
  "functionId": "parseDateRange___dateRange-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 123,
  "functionEndLine": 171,
  "numCommitsSeen": 36,
  "timeTaken": 1129,
  "changeHistory": [
    "e3e857866d9fdefb7e353b21ae24eab4401e60b3"
  ],
  "changeHistoryShort": {
    "e3e857866d9fdefb7e353b21ae24eab4401e60b3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e3e857866d9fdefb7e353b21ae24eab4401e60b3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4179. [reader implementation] support flow activity queries based on time (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,49 @@\n+  private static DateRange parseDateRange(String dateRange)\n+      throws IllegalArgumentException {\n+    if (dateRange \u003d\u003d null || dateRange.isEmpty()) {\n+      return new DateRange(null, null);\n+    }\n+    // Split date range around \"-\" fetching two components indicating start and\n+    // end date.\n+    String[] dates \u003d dateRange.split(RANGE_DELIMITER, 2);\n+    Long start \u003d null;\n+    Long end \u003d null;\n+    try {\n+      String startDate \u003d dates[0].trim();\n+      if (!startDate.isEmpty()) {\n+        // Start date is not in yyyyMMdd format.\n+        if (startDate.length() !\u003d DATE_PATTERN.length()) {\n+          throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\n+        }\n+        // Parse start date which exists before \"-\" in date range.\n+        // If \"-\" does not exist in date range, this effectively\n+        // gives single date.\n+        start \u003d parseDate(startDate);\n+      }\n+      if (dates.length \u003e 1) {\n+        String endDate \u003d dates[1].trim();\n+        if (!endDate.isEmpty()) {\n+          // End date is not in yyyyMMdd format.\n+          if (endDate.length() !\u003d DATE_PATTERN.length()) {\n+            throw new IllegalArgumentException(\n+                \"Invalid date range \" + dateRange);\n+          }\n+          // Parse end date which exists after \"-\" in date range.\n+          end \u003d parseDate(endDate);\n+        }\n+      } else {\n+        // Its a single date(without \"-\" in date range), so set\n+        // end equal to start.\n+        end \u003d start;\n+      }\n+      if (start !\u003d null \u0026\u0026 end !\u003d null) {\n+        if (start \u003e end) {\n+          throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\n+        }\n+      }\n+      return new DateRange(start, end);\n+    } catch (ParseException e) {\n+      // Date could not be parsed.\n+      throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static DateRange parseDateRange(String dateRange)\n      throws IllegalArgumentException {\n    if (dateRange \u003d\u003d null || dateRange.isEmpty()) {\n      return new DateRange(null, null);\n    }\n    // Split date range around \"-\" fetching two components indicating start and\n    // end date.\n    String[] dates \u003d dateRange.split(RANGE_DELIMITER, 2);\n    Long start \u003d null;\n    Long end \u003d null;\n    try {\n      String startDate \u003d dates[0].trim();\n      if (!startDate.isEmpty()) {\n        // Start date is not in yyyyMMdd format.\n        if (startDate.length() !\u003d DATE_PATTERN.length()) {\n          throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\n        }\n        // Parse start date which exists before \"-\" in date range.\n        // If \"-\" does not exist in date range, this effectively\n        // gives single date.\n        start \u003d parseDate(startDate);\n      }\n      if (dates.length \u003e 1) {\n        String endDate \u003d dates[1].trim();\n        if (!endDate.isEmpty()) {\n          // End date is not in yyyyMMdd format.\n          if (endDate.length() !\u003d DATE_PATTERN.length()) {\n            throw new IllegalArgumentException(\n                \"Invalid date range \" + dateRange);\n          }\n          // Parse end date which exists after \"-\" in date range.\n          end \u003d parseDate(endDate);\n        }\n      } else {\n        // Its a single date(without \"-\" in date range), so set\n        // end equal to start.\n        end \u003d start;\n      }\n      if (start !\u003d null \u0026\u0026 end !\u003d null) {\n        if (start \u003e end) {\n          throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\n        }\n      }\n      return new DateRange(start, end);\n    } catch (ParseException e) {\n      // Date could not be parsed.\n      throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}