{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyValueBasedTimelineStore.java",
  "functionName": "getEntityTimelines",
  "functionId": "getEntityTimelines___entityType-String__entityIds-SortedSet__String____limit-Long__windowStart-Long__windowEnd-Long__eventTypes-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
  "functionStartLine": 210,
  "functionEndLine": 258,
  "numCommitsSeen": 19,
  "timeTaken": 2595,
  "changeHistory": [
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "23b2e43f5d678517e33590d15dec73225b9c5682",
    "96578f0e01ba751175d4bcbad48d6f679e662382"
  ],
  "changeHistoryShort": {
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": "Ymultichange(Ymovefromfile,Ybodychange)",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ymodifierchange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "23b2e43f5d678517e33590d15dec73225b9c5682": "Ybodychange",
    "96578f0e01ba751175d4bcbad48d6f679e662382": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
      "commitDate": "28/01/16 2:24 PM",
      "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,49 @@\n   public synchronized TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n+    if (getServiceStopped()) {\n+      LOG.info(\"Service stopped, return null for the storage\");\n+      return null;\n+    }\n     TimelineEvents allEvents \u003d new TimelineEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n       EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n       TimelineEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n       EventsOfOneEntity events \u003d new EventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n       for (TimelineEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
            "oldMethodName": "getEntityTimelines",
            "newMethodName": "getEntityTimelines"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,49 @@\n   public synchronized TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n+    if (getServiceStopped()) {\n+      LOG.info(\"Service stopped, return null for the storage\");\n+      return null;\n+    }\n     TimelineEvents allEvents \u003d new TimelineEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n       EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n       TimelineEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n       EventsOfOneEntity events \u003d new EventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n       for (TimelineEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "28/05/14 11:09 AM",
      "commitNameOld": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 106.33,
      "commitsBetweenForRepo": 825,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n-  public TimelineEvents getEntityTimelines(String entityType,\n+  public synchronized TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n     TimelineEvents allEvents \u003d new TimelineEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n       EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n       TimelineEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n       EventsOfOneEntity events \u003d new EventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n       for (TimelineEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java"
      }
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  public ATSEvents getEntityTimelines(String entityType,\n+  public TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n-    ATSEvents allEvents \u003d new ATSEvents();\n+    TimelineEvents allEvents \u003d new TimelineEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n       EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n-      ATSEntity entity \u003d entities.get(entityID);\n+      TimelineEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n-      ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n+      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n-      for (ATSEvent event : entity.getEvents()) {\n+      for (TimelineEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/MemoryApplicationTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  public ATSEvents getEntityTimelines(String entityType,\n+  public TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n-    ATSEvents allEvents \u003d new ATSEvents();\n+    TimelineEvents allEvents \u003d new TimelineEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n       EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n-      ATSEntity entity \u003d entities.get(entityID);\n+      TimelineEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n-      ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n+      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n-      for (ATSEvent event : entity.getEvents()) {\n+      for (TimelineEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldValue": "ATSEvents",
            "newValue": "TimelineEvents"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  public ATSEvents getEntityTimelines(String entityType,\n+  public TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n-    ATSEvents allEvents \u003d new ATSEvents();\n+    TimelineEvents allEvents \u003d new TimelineEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n       EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n-      ATSEntity entity \u003d entities.get(entityID);\n+      TimelineEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n-      ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n+      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n-      for (ATSEvent event : entity.getEvents()) {\n+      for (TimelineEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    TimelineEvents allEvents \u003d new TimelineEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      TimelineEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      EventsOfOneEntity events \u003d new EventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (TimelineEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "23b2e43f5d678517e33590d15dec73225b9c5682": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1635. Implemented a Leveldb based ApplicationTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 6:15 PM",
      "commitName": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "04/02/14 4:32 PM",
      "commitNameOld": "96578f0e01ba751175d4bcbad48d6f679e662382",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public ATSEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd,\n       Set\u003cString\u003e eventTypes) {\n     ATSEvents allEvents \u003d new ATSEvents();\n     if (entityIds \u003d\u003d null) {\n       return allEvents;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     for (String entityId : entityIds) {\n-      EntityId entityID \u003d new EntityId(entityId, entityType);\n+      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n       ATSEntity entity \u003d entities.get(entityID);\n       if (entity \u003d\u003d null) {\n         continue;\n       }\n       ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n       events.setEntityId(entityId);\n       events.setEntityType(entityType);\n       for (ATSEvent event : entity.getEvents()) {\n         if (events.getEvents().size() \u003e\u003d limit) {\n           break;\n         }\n         if (event.getTimestamp() \u003c\u003d windowStart) {\n           continue;\n         }\n         if (event.getTimestamp() \u003e windowEnd) {\n           continue;\n         }\n         if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n           continue;\n         }\n         events.addEvent(event);\n       }\n       allEvents.addEvent(events);\n     }\n     return allEvents;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    ATSEvents allEvents \u003d new ATSEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityIdentifier entityID \u003d new EntityIdentifier(entityId, entityType);\n      ATSEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (ATSEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/MemoryApplicationTimelineStore.java",
      "extendedDetails": {}
    },
    "96578f0e01ba751175d4bcbad48d6f679e662382": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1634. Added a testable in-memory implementation of ApplicationTimelineStore. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564583 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 4:32 PM",
      "commitName": "96578f0e01ba751175d4bcbad48d6f679e662382",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,45 @@\n+  public ATSEvents getEntityTimelines(String entityType,\n+      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n+      Long windowEnd,\n+      Set\u003cString\u003e eventTypes) {\n+    ATSEvents allEvents \u003d new ATSEvents();\n+    if (entityIds \u003d\u003d null) {\n+      return allEvents;\n+    }\n+    if (limit \u003d\u003d null) {\n+      limit \u003d DEFAULT_LIMIT;\n+    }\n+    if (windowStart \u003d\u003d null) {\n+      windowStart \u003d Long.MIN_VALUE;\n+    }\n+    if (windowEnd \u003d\u003d null) {\n+      windowEnd \u003d Long.MAX_VALUE;\n+    }\n+    for (String entityId : entityIds) {\n+      EntityId entityID \u003d new EntityId(entityId, entityType);\n+      ATSEntity entity \u003d entities.get(entityID);\n+      if (entity \u003d\u003d null) {\n+        continue;\n+      }\n+      ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n+      events.setEntityId(entityId);\n+      events.setEntityType(entityType);\n+      for (ATSEvent event : entity.getEvents()) {\n+        if (events.getEvents().size() \u003e\u003d limit) {\n+          break;\n+        }\n+        if (event.getTimestamp() \u003c\u003d windowStart) {\n+          continue;\n+        }\n+        if (event.getTimestamp() \u003e windowEnd) {\n+          continue;\n+        }\n+        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n+          continue;\n+        }\n+        events.addEvent(event);\n+      }\n+      allEvents.addEvent(events);\n+    }\n+    return allEvents;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd,\n      Set\u003cString\u003e eventTypes) {\n    ATSEvents allEvents \u003d new ATSEvents();\n    if (entityIds \u003d\u003d null) {\n      return allEvents;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    for (String entityId : entityIds) {\n      EntityId entityID \u003d new EntityId(entityId, entityType);\n      ATSEntity entity \u003d entities.get(entityID);\n      if (entity \u003d\u003d null) {\n        continue;\n      }\n      ATSEventsOfOneEntity events \u003d new ATSEventsOfOneEntity();\n      events.setEntityId(entityId);\n      events.setEntityType(entityType);\n      for (ATSEvent event : entity.getEvents()) {\n        if (events.getEvents().size() \u003e\u003d limit) {\n          break;\n        }\n        if (event.getTimestamp() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (event.getTimestamp() \u003e windowEnd) {\n          continue;\n        }\n        if (eventTypes !\u003d null \u0026\u0026 !eventTypes.contains(event.getEventType())) {\n          continue;\n        }\n        events.addEvent(event);\n      }\n      allEvents.addEvent(events);\n    }\n    return allEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/MemoryApplicationTimelineStore.java"
    }
  }
}