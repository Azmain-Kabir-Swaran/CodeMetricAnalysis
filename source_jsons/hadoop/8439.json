{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAttrOp.java",
  "functionName": "unprotectedSetTimes",
  "functionId": "unprotectedSetTimes___fsd-FSDirectory__iip-INodesInPath__mtime-long__atime-long__force-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
  "functionStartLine": 472,
  "functionEndLine": 494,
  "numCommitsSeen": 413,
  "timeTaken": 9866,
  "changeHistory": [
    "91b01a1db794581c67e1ccf9aabaa7cafd686c48",
    "cf93d60d3f032000e5b78a08d320793d78799f3d",
    "f6e80acd681548b14fe3f0f3d2b3aaf800d10310",
    "48b9d5fd2a96728b1118be217ca597c4098e99ca",
    "015535dc0ad00c2ba357afb3d1e283e56ddda0d6",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823"
  ],
  "changeHistoryShort": {
    "91b01a1db794581c67e1ccf9aabaa7cafd686c48": "Ybodychange",
    "cf93d60d3f032000e5b78a08d320793d78799f3d": "Ybodychange",
    "f6e80acd681548b14fe3f0f3d2b3aaf800d10310": "Ybodychange",
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "015535dc0ad00c2ba357afb3d1e283e56ddda0d6": "Ybodychange",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange"
  },
  "changeHistoryDetails": {
    "91b01a1db794581c67e1ccf9aabaa7cafd686c48": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14807. SetTimes updates all negative values apart from -1. Contributed by Ayush Saxena.\n",
      "commitDate": "03/09/19 5:38 AM",
      "commitName": "91b01a1db794581c67e1ccf9aabaa7cafd686c48",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "30/05/19 3:28 PM",
      "commitNameOld": "9122b9b6493d315c8910fbc06eaba96273ee335c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 95.59,
      "commitsBetweenForRepo": 840,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   static boolean unprotectedSetTimes(\n       FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n           throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     INode inode \u003d iip.getLastINode();\n     int latest \u003d iip.getLatestSnapshotId();\n-    if (mtime !\u003d -1) {\n+    if (mtime \u003e\u003d 0) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n \n     // if the last access time update was within the last precision interval,\n     // then no need to store access time\n-    if (atime !\u003d -1 \u0026\u0026 (status || force\n+    if (atime \u003e\u003d 0 \u0026\u0026 (status || force\n         || atime \u003e inode.getAccessTime() + fsd.getAccessTimePrecision())) {\n       inode.setAccessTime(atime, latest,\n           fsd.getFSNamesystem().getSnapshotManager().\n           getSkipCaptureAccessTimeOnlyChange());\n       status \u003d true;\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean unprotectedSetTimes(\n      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n          throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    INode inode \u003d iip.getLastINode();\n    int latest \u003d iip.getLatestSnapshotId();\n    if (mtime \u003e\u003d 0) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n\n    // if the last access time update was within the last precision interval,\n    // then no need to store access time\n    if (atime \u003e\u003d 0 \u0026\u0026 (status || force\n        || atime \u003e inode.getAccessTime() + fsd.getAccessTimePrecision())) {\n      inode.setAccessTime(atime, latest,\n          fsd.getFSNamesystem().getSnapshotManager().\n          getSkipCaptureAccessTimeOnlyChange());\n      status \u003d true;\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "cf93d60d3f032000e5b78a08d320793d78799f3d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12191. Provide option to not capture the accessTime change of a file to snapshot if no other modification has been done to this file. Contributed by Yongjun Zhang.\n",
      "commitDate": "29/08/17 4:57 PM",
      "commitName": "cf93d60d3f032000e5b78a08d320793d78799f3d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "16/05/17 9:28 AM",
      "commitNameOld": "9b90e52f1ec22c18cd535af2a569defcef65b093",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 105.31,
      "commitsBetweenForRepo": 608,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   static boolean unprotectedSetTimes(\n       FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n           throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     INode inode \u003d iip.getLastINode();\n     int latest \u003d iip.getLatestSnapshotId();\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n \n     // if the last access time update was within the last precision interval,\n     // then no need to store access time\n     if (atime !\u003d -1 \u0026\u0026 (status || force\n         || atime \u003e inode.getAccessTime() + fsd.getAccessTimePrecision())) {\n-      inode.setAccessTime(atime, latest);\n+      inode.setAccessTime(atime, latest,\n+          fsd.getFSNamesystem().getSnapshotManager().\n+          getSkipCaptureAccessTimeOnlyChange());\n       status \u003d true;\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean unprotectedSetTimes(\n      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n          throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    INode inode \u003d iip.getLastINode();\n    int latest \u003d iip.getLatestSnapshotId();\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n\n    // if the last access time update was within the last precision interval,\n    // then no need to store access time\n    if (atime !\u003d -1 \u0026\u0026 (status || force\n        || atime \u003e inode.getAccessTime() + fsd.getAccessTimePrecision())) {\n      inode.setAccessTime(atime, latest,\n          fsd.getFSNamesystem().getSnapshotManager().\n          getSkipCaptureAccessTimeOnlyChange());\n      status \u003d true;\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "f6e80acd681548b14fe3f0f3d2b3aaf800d10310": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11258. File mtime change could not save to editlog. Contributed by Jimmy Xiang.\n",
      "commitDate": "21/12/16 1:04 PM",
      "commitName": "f6e80acd681548b14fe3f0f3d2b3aaf800d10310",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/10/16 11:52 AM",
      "commitNameOld": "e9c7a97089dd1234a7f1782f79b1b0b190b98f39",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 52.09,
      "commitsBetweenForRepo": 358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,21 @@\n   static boolean unprotectedSetTimes(\n       FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n           throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     INode inode \u003d iip.getLastINode();\n     int latest \u003d iip.getLatestSnapshotId();\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n-    if (atime !\u003d -1) {\n-      long inodeTime \u003d inode.getAccessTime();\n \n-      // if the last access time update was within the last precision interval, then\n-      // no need to store access time\n-      if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n-        status \u003d  false;\n-      } else {\n-        inode.setAccessTime(atime, latest);\n-        status \u003d true;\n-      }\n+    // if the last access time update was within the last precision interval,\n+    // then no need to store access time\n+    if (atime !\u003d -1 \u0026\u0026 (status || force\n+        || atime \u003e inode.getAccessTime() + fsd.getAccessTimePrecision())) {\n+      inode.setAccessTime(atime, latest);\n+      status \u003d true;\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean unprotectedSetTimes(\n      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n          throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    INode inode \u003d iip.getLastINode();\n    int latest \u003d iip.getLatestSnapshotId();\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n\n    // if the last access time update was within the last precision interval,\n    // then no need to store access time\n    if (atime !\u003d -1 \u0026\u0026 (status || force\n        || atime \u003e inode.getAccessTime() + fsd.getAccessTimePrecision())) {\n      inode.setAccessTime(atime, latest);\n      status \u003d true;\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
      "commitDate": "06/10/16 2:33 PM",
      "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
          "commitDate": "06/10/16 2:33 PM",
          "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "23/09/16 10:37 AM",
          "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 13.16,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,25 @@\n-  private static boolean unprotectedSetTimes(\n-      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n-      int latest) throws QuotaExceededException {\n+  static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n+          throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n+    INode inode \u003d iip.getLastINode();\n+    int latest \u003d iip.getLatestSnapshotId();\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n       if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean unprotectedSetTimes(\n      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n          throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    INode inode \u003d iip.getLastINode();\n    int latest \u003d iip.getLatestSnapshotId();\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, inode-INode, mtime-long, atime-long, force-boolean, latest-int]",
            "newValue": "[fsd-FSDirectory, iip-INodesInPath, mtime-long, atime-long, force-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
          "commitDate": "06/10/16 2:33 PM",
          "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "23/09/16 10:37 AM",
          "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 13.16,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,25 @@\n-  private static boolean unprotectedSetTimes(\n-      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n-      int latest) throws QuotaExceededException {\n+  static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n+          throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n+    INode inode \u003d iip.getLastINode();\n+    int latest \u003d iip.getLatestSnapshotId();\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n       if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean unprotectedSetTimes(\n      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n          throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    INode inode \u003d iip.getLastINode();\n    int latest \u003d iip.getLatestSnapshotId();\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
          "commitDate": "06/10/16 2:33 PM",
          "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "23/09/16 10:37 AM",
          "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 13.16,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,25 @@\n-  private static boolean unprotectedSetTimes(\n-      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n-      int latest) throws QuotaExceededException {\n+  static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n+          throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n+    INode inode \u003d iip.getLastINode();\n+    int latest \u003d iip.getLatestSnapshotId();\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n       if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean unprotectedSetTimes(\n      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)\n          throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    INode inode \u003d iip.getLastINode();\n    int latest \u003d iip.getLatestSnapshotId();\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "015535dc0ad00c2ba357afb3d1e283e56ddda0d6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8446. Separate safemode related operations in GetBlockLocations(). Contributed by Haohui Mai.\n",
      "commitDate": "17/06/15 4:38 PM",
      "commitName": "015535dc0ad00c2ba357afb3d1e283e56ddda0d6",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/06/15 8:05 AM",
      "commitNameOld": "6e3fcffe291faec40fa9214f4880a35a952836c4",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.36,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   private static boolean unprotectedSetTimes(\n       FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n       int latest) throws QuotaExceededException {\n     assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n-      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n-          \u0026\u0026 !force) {\n+      if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean unprotectedSetTimes(\n      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n      int latest) throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "15/12/14 10:40 AM",
      "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  private boolean unprotectedSetTimes(INode inode, long mtime,\n-      long atime, boolean force, int latest) throws QuotaExceededException {\n-    assert hasWriteLock();\n+  private static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n+      int latest) throws QuotaExceededException {\n+    assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n-      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n+      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n+          \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n-    } \n+    }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean unprotectedSetTimes(\n      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n      int latest) throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n          \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
            "oldMethodName": "unprotectedSetTimes",
            "newMethodName": "unprotectedSetTimes"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  private boolean unprotectedSetTimes(INode inode, long mtime,\n-      long atime, boolean force, int latest) throws QuotaExceededException {\n-    assert hasWriteLock();\n+  private static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n+      int latest) throws QuotaExceededException {\n+    assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n-      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n+      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n+          \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n-    } \n+    }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean unprotectedSetTimes(\n      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n      int latest) throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n          \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  private boolean unprotectedSetTimes(INode inode, long mtime,\n-      long atime, boolean force, int latest) throws QuotaExceededException {\n-    assert hasWriteLock();\n+  private static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n+      int latest) throws QuotaExceededException {\n+    assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n-      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n+      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n+          \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n-    } \n+    }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean unprotectedSetTimes(\n      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n      int latest) throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n          \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  private boolean unprotectedSetTimes(INode inode, long mtime,\n-      long atime, boolean force, int latest) throws QuotaExceededException {\n-    assert hasWriteLock();\n+  private static boolean unprotectedSetTimes(\n+      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n+      int latest) throws QuotaExceededException {\n+    assert fsd.hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n-      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n+      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n+          \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n-    } \n+    }\n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean unprotectedSetTimes(\n      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,\n      int latest) throws QuotaExceededException {\n    assert fsd.hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + fsd.getFSNamesystem().getAccessTimePrecision()\n          \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    }\n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, mtime-long, atime-long, force-boolean, latest-int]",
            "newValue": "[fsd-FSDirectory, inode-INode, mtime-long, atime-long, force-boolean, latest-int]"
          }
        }
      ]
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n   private boolean unprotectedSetTimes(INode inode, long mtime,\n-      long atime, boolean force, Snapshot latest) throws QuotaExceededException {\n+      long atime, boolean force, int latest) throws QuotaExceededException {\n     assert hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n-      long inodeTime \u003d inode.getAccessTime(null);\n+      long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n       if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     } \n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean unprotectedSetTimes(INode inode, long mtime,\n      long atime, boolean force, int latest) throws QuotaExceededException {\n    assert hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    } \n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, mtime-long, atime-long, force-boolean, latest-Snapshot]",
            "newValue": "[inode-INode, mtime-long, atime-long, force-boolean, latest-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n   private boolean unprotectedSetTimes(INode inode, long mtime,\n-      long atime, boolean force, Snapshot latest) throws QuotaExceededException {\n+      long atime, boolean force, int latest) throws QuotaExceededException {\n     assert hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n       inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n-      long inodeTime \u003d inode.getAccessTime(null);\n+      long inodeTime \u003d inode.getAccessTime();\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n       if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n         inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     } \n     return status;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean unprotectedSetTimes(INode inode, long mtime,\n      long atime, boolean force, int latest) throws QuotaExceededException {\n    assert hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime();\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    } \n    return status;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/12/13 9:41 AM",
      "commitNameOld": "18159be495f96bde4bd4fa2cacb14aafb87e87bc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 11.69,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private boolean unprotectedSetTimes(INode inode, long mtime,\n       long atime, boolean force, Snapshot latest) throws QuotaExceededException {\n     assert hasWriteLock();\n     boolean status \u003d false;\n     if (mtime !\u003d -1) {\n-      inode \u003d inode.setModificationTime(mtime, latest, inodeMap);\n+      inode \u003d inode.setModificationTime(mtime, latest);\n       status \u003d true;\n     }\n     if (atime !\u003d -1) {\n       long inodeTime \u003d inode.getAccessTime(null);\n \n       // if the last access time update was within the last precision interval, then\n       // no need to store access time\n       if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n         status \u003d  false;\n       } else {\n-        inode.setAccessTime(atime, latest, inodeMap);\n+        inode.setAccessTime(atime, latest);\n         status \u003d true;\n       }\n     } \n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean unprotectedSetTimes(INode inode, long mtime,\n      long atime, boolean force, Snapshot latest) throws QuotaExceededException {\n    assert hasWriteLock();\n    boolean status \u003d false;\n    if (mtime !\u003d -1) {\n      inode \u003d inode.setModificationTime(mtime, latest);\n      status \u003d true;\n    }\n    if (atime !\u003d -1) {\n      long inodeTime \u003d inode.getAccessTime(null);\n\n      // if the last access time update was within the last precision interval, then\n      // no need to store access time\n      if (atime \u003c\u003d inodeTime + getFSNamesystem().getAccessTimePrecision() \u0026\u0026 !force) {\n        status \u003d  false;\n      } else {\n        inode.setAccessTime(atime, latest);\n        status \u003d true;\n      }\n    } \n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    }
  }
}