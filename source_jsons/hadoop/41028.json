{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueuePlacementConverter.java",
  "functionName": "convertPlacementPolicy",
  "functionId": "convertPlacementPolicy___placementManager-PlacementManager__ruleHandler-FSConfigToCSConfigRuleHandler__userAsDefaultQueue-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/QueuePlacementConverter.java",
  "functionStartLine": 39,
  "functionEndLine": 102,
  "numCommitsSeen": 5,
  "timeTaken": 3456,
  "changeHistory": [
    "72fa9c7f1b262839b88533a61e8f2ffbbfd15a1d",
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
    "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "72fa9c7f1b262839b88533a61e8f2ffbbfd15a1d": "Ybodychange",
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a": "Ybodychange",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": "Ybodychange",
    "8c9018d5c7830ae8ec85f446985cafbc8a14d688": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "72fa9c7f1b262839b88533a61e8f2ffbbfd15a1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10135. FS-CS converter tool: issue warning on dynamic auto-create mapping rules. Contributed by Peter Bacsko\n",
      "commitDate": "24/02/20 12:54 PM",
      "commitName": "72fa9c7f1b262839b88533a61e8f2ffbbfd15a1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "30/01/20 7:03 AM",
      "commitNameOld": "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 25.24,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n       FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n     StringBuilder mapping \u003d new StringBuilder();\n     Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n \n     if (userAsDefaultQueue) {\n       mapping.append(\"u:\" + USER + \":\" + USER);\n     }\n \n     int ruleCount \u003d 0;\n     for (PlacementRule rule : placementManager.getPlacementRules()) {\n       if (((FSPlacementRule)rule).getCreateFlag()) {\n         ruleHandler.handleQueueAutoCreate(rule.getName());\n       }\n \n       ruleCount++;\n       if (rule instanceof UserPlacementRule) {\n         UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n \n         // nested rule\n         if (userRule.getParentRule() !\u003d null) {\n-          handleNestedRule(mapping, userRule);\n+          handleNestedRule(mapping, userRule, ruleHandler);\n         } else {\n           if (!userAsDefaultQueue) {\n             if (mapping.length() \u003e 0) {\n               mapping.append(RULE_SEPARATOR);\n             }\n             mapping.append(\"u:\" + USER + \":\" + USER);\n           }\n         }\n       } else if (rule instanceof SpecifiedPlacementRule) {\n         if (ruleCount \u003e 1) {\n           ruleHandler.handleSpecifiedNotFirstRule();\n         }\n         properties.put(\n             \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n       } else if (rule instanceof PrimaryGroupPlacementRule) {\n         if (mapping.length() \u003e 0) {\n           mapping.append(RULE_SEPARATOR);\n         }\n         mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n       } else if (rule instanceof DefaultPlacementRule) {\n         DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n         if (mapping.length() \u003e 0) {\n           mapping.append(RULE_SEPARATOR);\n         }\n         mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n       } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n         if (mapping.length() \u003e 0) {\n           mapping.append(RULE_SEPARATOR);\n         }\n         mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n       } else if (!(rule instanceof RejectPlacementRule)) {\n         throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n       }\n     }\n \n     if (mapping.length() \u003e 0) {\n       properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n           mapping.toString());\n     }\n \n     return properties;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n      FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n    StringBuilder mapping \u003d new StringBuilder();\n    Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n\n    if (userAsDefaultQueue) {\n      mapping.append(\"u:\" + USER + \":\" + USER);\n    }\n\n    int ruleCount \u003d 0;\n    for (PlacementRule rule : placementManager.getPlacementRules()) {\n      if (((FSPlacementRule)rule).getCreateFlag()) {\n        ruleHandler.handleQueueAutoCreate(rule.getName());\n      }\n\n      ruleCount++;\n      if (rule instanceof UserPlacementRule) {\n        UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n\n        // nested rule\n        if (userRule.getParentRule() !\u003d null) {\n          handleNestedRule(mapping, userRule, ruleHandler);\n        } else {\n          if (!userAsDefaultQueue) {\n            if (mapping.length() \u003e 0) {\n              mapping.append(RULE_SEPARATOR);\n            }\n            mapping.append(\"u:\" + USER + \":\" + USER);\n          }\n        }\n      } else if (rule instanceof SpecifiedPlacementRule) {\n        if (ruleCount \u003e 1) {\n          ruleHandler.handleSpecifiedNotFirstRule();\n        }\n        properties.put(\n            \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n      } else if (rule instanceof PrimaryGroupPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(RULE_SEPARATOR);\n        }\n        mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n      } else if (rule instanceof DefaultPlacementRule) {\n        DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n        if (mapping.length() \u003e 0) {\n          mapping.append(RULE_SEPARATOR);\n        }\n        mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n      } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(RULE_SEPARATOR);\n        }\n        mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n      } else if (!(rule instanceof RejectPlacementRule)) {\n        throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n      }\n    }\n\n    if (mapping.length() \u003e 0) {\n      properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n          mapping.toString());\n    }\n\n    return properties;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/QueuePlacementConverter.java",
      "extendedDetails": {}
    },
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10099. FS-CS converter: handle allow-undeclared-pools and user-as-default-queue properly and fix misc issues. Contributed by Peter Bacsko\n",
      "commitDate": "30/01/20 7:03 AM",
      "commitName": "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "28/01/20 6:22 AM",
      "commitNameOld": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n       FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n     StringBuilder mapping \u003d new StringBuilder();\n     Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n \n     if (userAsDefaultQueue) {\n       mapping.append(\"u:\" + USER + \":\" + USER);\n     }\n \n     int ruleCount \u003d 0;\n     for (PlacementRule rule : placementManager.getPlacementRules()) {\n       if (((FSPlacementRule)rule).getCreateFlag()) {\n         ruleHandler.handleQueueAutoCreate(rule.getName());\n       }\n \n       ruleCount++;\n       if (rule instanceof UserPlacementRule) {\n         UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n \n         // nested rule\n         if (userRule.getParentRule() !\u003d null) {\n           handleNestedRule(mapping, userRule);\n         } else {\n           if (!userAsDefaultQueue) {\n             if (mapping.length() \u003e 0) {\n-              mapping.append(\";\");\n+              mapping.append(RULE_SEPARATOR);\n             }\n             mapping.append(\"u:\" + USER + \":\" + USER);\n           }\n         }\n       } else if (rule instanceof SpecifiedPlacementRule) {\n         if (ruleCount \u003e 1) {\n           ruleHandler.handleSpecifiedNotFirstRule();\n         }\n         properties.put(\n             \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n       } else if (rule instanceof PrimaryGroupPlacementRule) {\n         if (mapping.length() \u003e 0) {\n-          mapping.append(\";\");\n+          mapping.append(RULE_SEPARATOR);\n         }\n         mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n       } else if (rule instanceof DefaultPlacementRule) {\n         DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n         if (mapping.length() \u003e 0) {\n-          mapping.append(\";\");\n+          mapping.append(RULE_SEPARATOR);\n         }\n         mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n       } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n         if (mapping.length() \u003e 0) {\n-          mapping.append(\";\");\n+          mapping.append(RULE_SEPARATOR);\n         }\n         mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n       } else if (!(rule instanceof RejectPlacementRule)) {\n         throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n       }\n     }\n \n     if (mapping.length() \u003e 0) {\n       properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n           mapping.toString());\n     }\n \n     return properties;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n      FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n    StringBuilder mapping \u003d new StringBuilder();\n    Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n\n    if (userAsDefaultQueue) {\n      mapping.append(\"u:\" + USER + \":\" + USER);\n    }\n\n    int ruleCount \u003d 0;\n    for (PlacementRule rule : placementManager.getPlacementRules()) {\n      if (((FSPlacementRule)rule).getCreateFlag()) {\n        ruleHandler.handleQueueAutoCreate(rule.getName());\n      }\n\n      ruleCount++;\n      if (rule instanceof UserPlacementRule) {\n        UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n\n        // nested rule\n        if (userRule.getParentRule() !\u003d null) {\n          handleNestedRule(mapping, userRule);\n        } else {\n          if (!userAsDefaultQueue) {\n            if (mapping.length() \u003e 0) {\n              mapping.append(RULE_SEPARATOR);\n            }\n            mapping.append(\"u:\" + USER + \":\" + USER);\n          }\n        }\n      } else if (rule instanceof SpecifiedPlacementRule) {\n        if (ruleCount \u003e 1) {\n          ruleHandler.handleSpecifiedNotFirstRule();\n        }\n        properties.put(\n            \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n      } else if (rule instanceof PrimaryGroupPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(RULE_SEPARATOR);\n        }\n        mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n      } else if (rule instanceof DefaultPlacementRule) {\n        DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n        if (mapping.length() \u003e 0) {\n          mapping.append(RULE_SEPARATOR);\n        }\n        mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n      } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(RULE_SEPARATOR);\n        }\n        mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n      } else if (!(rule instanceof RejectPlacementRule)) {\n        throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n      }\n    }\n\n    if (mapping.length() \u003e 0) {\n      properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n          mapping.toString());\n    }\n\n    return properties;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/QueuePlacementConverter.java",
      "extendedDetails": {}
    },
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
      "commitDate": "28/01/20 6:22 AM",
      "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "26/11/19 12:22 PM",
      "commitNameOld": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 62.75,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,64 @@\n   Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n       FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n     StringBuilder mapping \u003d new StringBuilder();\n     Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n \n     if (userAsDefaultQueue) {\n       mapping.append(\"u:\" + USER + \":\" + USER);\n     }\n \n     int ruleCount \u003d 0;\n     for (PlacementRule rule : placementManager.getPlacementRules()) {\n       if (((FSPlacementRule)rule).getCreateFlag()) {\n         ruleHandler.handleQueueAutoCreate(rule.getName());\n       }\n \n       ruleCount++;\n       if (rule instanceof UserPlacementRule) {\n         UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n \n         // nested rule\n         if (userRule.getParentRule() !\u003d null) {\n           handleNestedRule(mapping, userRule);\n         } else {\n           if (!userAsDefaultQueue) {\n             if (mapping.length() \u003e 0) {\n               mapping.append(\";\");\n             }\n             mapping.append(\"u:\" + USER + \":\" + USER);\n           }\n         }\n       } else if (rule instanceof SpecifiedPlacementRule) {\n         if (ruleCount \u003e 1) {\n           ruleHandler.handleSpecifiedNotFirstRule();\n         }\n         properties.put(\n             \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n       } else if (rule instanceof PrimaryGroupPlacementRule) {\n         if (mapping.length() \u003e 0) {\n           mapping.append(\";\");\n         }\n         mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n       } else if (rule instanceof DefaultPlacementRule) {\n         DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n         if (mapping.length() \u003e 0) {\n           mapping.append(\";\");\n         }\n         mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n       } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n-        // TODO: wait for YARN-9840\n         if (mapping.length() \u003e 0) {\n           mapping.append(\";\");\n         }\n         mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n       } else if (!(rule instanceof RejectPlacementRule)) {\n         throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n       }\n     }\n \n     if (mapping.length() \u003e 0) {\n       properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n           mapping.toString());\n     }\n \n     return properties;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n      FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n    StringBuilder mapping \u003d new StringBuilder();\n    Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n\n    if (userAsDefaultQueue) {\n      mapping.append(\"u:\" + USER + \":\" + USER);\n    }\n\n    int ruleCount \u003d 0;\n    for (PlacementRule rule : placementManager.getPlacementRules()) {\n      if (((FSPlacementRule)rule).getCreateFlag()) {\n        ruleHandler.handleQueueAutoCreate(rule.getName());\n      }\n\n      ruleCount++;\n      if (rule instanceof UserPlacementRule) {\n        UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n\n        // nested rule\n        if (userRule.getParentRule() !\u003d null) {\n          handleNestedRule(mapping, userRule);\n        } else {\n          if (!userAsDefaultQueue) {\n            if (mapping.length() \u003e 0) {\n              mapping.append(\";\");\n            }\n            mapping.append(\"u:\" + USER + \":\" + USER);\n          }\n        }\n      } else if (rule instanceof SpecifiedPlacementRule) {\n        if (ruleCount \u003e 1) {\n          ruleHandler.handleSpecifiedNotFirstRule();\n        }\n        properties.put(\n            \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n      } else if (rule instanceof PrimaryGroupPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n      } else if (rule instanceof DefaultPlacementRule) {\n        DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n      } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n      } else if (!(rule instanceof RejectPlacementRule)) {\n        throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n      }\n    }\n\n    if (mapping.length() \u003e 0) {\n      properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n          mapping.toString());\n    }\n\n    return properties;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/QueuePlacementConverter.java",
      "extendedDetails": {}
    },
    "8c9018d5c7830ae8ec85f446985cafbc8a14d688": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9899. Migration tool that help to generate CS config based on FS config [Phase 2]. Contributed by Peter Bacsko\n",
      "commitDate": "26/11/19 12:22 PM",
      "commitName": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/10/19 8:19 AM",
      "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 43.21,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,65 @@\n   Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n       FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n     StringBuilder mapping \u003d new StringBuilder();\n     Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n \n     if (userAsDefaultQueue) {\n       mapping.append(\"u:\" + USER + \":\" + USER);\n     }\n \n     int ruleCount \u003d 0;\n     for (PlacementRule rule : placementManager.getPlacementRules()) {\n       if (((FSPlacementRule)rule).getCreateFlag()) {\n         ruleHandler.handleQueueAutoCreate(rule.getName());\n       }\n \n       ruleCount++;\n       if (rule instanceof UserPlacementRule) {\n         UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n-        if (mapping.length() \u003e 0) {\n-          mapping.append(\";\");\n-        }\n \n         // nested rule\n         if (userRule.getParentRule() !\u003d null) {\n           handleNestedRule(mapping, userRule);\n         } else {\n           if (!userAsDefaultQueue) {\n+            if (mapping.length() \u003e 0) {\n+              mapping.append(\";\");\n+            }\n             mapping.append(\"u:\" + USER + \":\" + USER);\n           }\n         }\n       } else if (rule instanceof SpecifiedPlacementRule) {\n         if (ruleCount \u003e 1) {\n           ruleHandler.handleSpecifiedNotFirstRule();\n         }\n         properties.put(\n             \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n       } else if (rule instanceof PrimaryGroupPlacementRule) {\n         if (mapping.length() \u003e 0) {\n           mapping.append(\";\");\n         }\n         mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n       } else if (rule instanceof DefaultPlacementRule) {\n         DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n         if (mapping.length() \u003e 0) {\n           mapping.append(\";\");\n         }\n         mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n       } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n         // TODO: wait for YARN-9840\n+        if (mapping.length() \u003e 0) {\n+          mapping.append(\";\");\n+        }\n         mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n-      } else {\n+      } else if (!(rule instanceof RejectPlacementRule)) {\n         throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n       }\n     }\n \n     if (mapping.length() \u003e 0) {\n       properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n           mapping.toString());\n     }\n \n     return properties;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n      FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n    StringBuilder mapping \u003d new StringBuilder();\n    Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n\n    if (userAsDefaultQueue) {\n      mapping.append(\"u:\" + USER + \":\" + USER);\n    }\n\n    int ruleCount \u003d 0;\n    for (PlacementRule rule : placementManager.getPlacementRules()) {\n      if (((FSPlacementRule)rule).getCreateFlag()) {\n        ruleHandler.handleQueueAutoCreate(rule.getName());\n      }\n\n      ruleCount++;\n      if (rule instanceof UserPlacementRule) {\n        UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n\n        // nested rule\n        if (userRule.getParentRule() !\u003d null) {\n          handleNestedRule(mapping, userRule);\n        } else {\n          if (!userAsDefaultQueue) {\n            if (mapping.length() \u003e 0) {\n              mapping.append(\";\");\n            }\n            mapping.append(\"u:\" + USER + \":\" + USER);\n          }\n        }\n      } else if (rule instanceof SpecifiedPlacementRule) {\n        if (ruleCount \u003e 1) {\n          ruleHandler.handleSpecifiedNotFirstRule();\n        }\n        properties.put(\n            \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n      } else if (rule instanceof PrimaryGroupPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n      } else if (rule instanceof DefaultPlacementRule) {\n        DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n      } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n        // TODO: wait for YARN-9840\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n      } else if (!(rule instanceof RejectPlacementRule)) {\n        throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n      }\n    }\n\n    if (mapping.length() \u003e 0) {\n      properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n          mapping.toString());\n    }\n\n    return properties;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/QueuePlacementConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,62 @@\n+  Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n+      FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n+    StringBuilder mapping \u003d new StringBuilder();\n+    Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n+\n+    if (userAsDefaultQueue) {\n+      mapping.append(\"u:\" + USER + \":\" + USER);\n+    }\n+\n+    int ruleCount \u003d 0;\n+    for (PlacementRule rule : placementManager.getPlacementRules()) {\n+      if (((FSPlacementRule)rule).getCreateFlag()) {\n+        ruleHandler.handleQueueAutoCreate(rule.getName());\n+      }\n+\n+      ruleCount++;\n+      if (rule instanceof UserPlacementRule) {\n+        UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n+        if (mapping.length() \u003e 0) {\n+          mapping.append(\";\");\n+        }\n+\n+        // nested rule\n+        if (userRule.getParentRule() !\u003d null) {\n+          handleNestedRule(mapping, userRule);\n+        } else {\n+          if (!userAsDefaultQueue) {\n+            mapping.append(\"u:\" + USER + \":\" + USER);\n+          }\n+        }\n+      } else if (rule instanceof SpecifiedPlacementRule) {\n+        if (ruleCount \u003e 1) {\n+          ruleHandler.handleSpecifiedNotFirstRule();\n+        }\n+        properties.put(\n+            \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n+      } else if (rule instanceof PrimaryGroupPlacementRule) {\n+        if (mapping.length() \u003e 0) {\n+          mapping.append(\";\");\n+        }\n+        mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n+      } else if (rule instanceof DefaultPlacementRule) {\n+        DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n+        if (mapping.length() \u003e 0) {\n+          mapping.append(\";\");\n+        }\n+        mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n+      } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n+        // TODO: wait for YARN-9840\n+        mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n+      } else {\n+        throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n+      }\n+    }\n+\n+    if (mapping.length() \u003e 0) {\n+      properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n+          mapping.toString());\n+    }\n+\n+    return properties;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, String\u003e convertPlacementPolicy(PlacementManager placementManager,\n      FSConfigToCSConfigRuleHandler ruleHandler, boolean userAsDefaultQueue) {\n    StringBuilder mapping \u003d new StringBuilder();\n    Map\u003cString, String\u003e properties \u003d new HashMap\u003c\u003e();\n\n    if (userAsDefaultQueue) {\n      mapping.append(\"u:\" + USER + \":\" + USER);\n    }\n\n    int ruleCount \u003d 0;\n    for (PlacementRule rule : placementManager.getPlacementRules()) {\n      if (((FSPlacementRule)rule).getCreateFlag()) {\n        ruleHandler.handleQueueAutoCreate(rule.getName());\n      }\n\n      ruleCount++;\n      if (rule instanceof UserPlacementRule) {\n        UserPlacementRule userRule \u003d (UserPlacementRule) rule;\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n\n        // nested rule\n        if (userRule.getParentRule() !\u003d null) {\n          handleNestedRule(mapping, userRule);\n        } else {\n          if (!userAsDefaultQueue) {\n            mapping.append(\"u:\" + USER + \":\" + USER);\n          }\n        }\n      } else if (rule instanceof SpecifiedPlacementRule) {\n        if (ruleCount \u003e 1) {\n          ruleHandler.handleSpecifiedNotFirstRule();\n        }\n        properties.put(\n            \"yarn.scheduler.capacity.queue-mappings-override.enable\", \"false\");\n      } else if (rule instanceof PrimaryGroupPlacementRule) {\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\" + PRIMARY_GROUP);\n      } else if (rule instanceof DefaultPlacementRule) {\n        DefaultPlacementRule defaultRule \u003d (DefaultPlacementRule) rule;\n        if (mapping.length() \u003e 0) {\n          mapping.append(\";\");\n        }\n        mapping.append(\"u:\" + USER + \":\").append(defaultRule.defaultQueueName);\n      } else if (rule instanceof SecondaryGroupExistingPlacementRule) {\n        // TODO: wait for YARN-9840\n        mapping.append(\"u:\" + USER + \":\" + SECONDARY_GROUP);\n      } else {\n        throw new IllegalArgumentException(\"Unknown placement rule: \" + rule);\n      }\n    }\n\n    if (mapping.length() \u003e 0) {\n      properties.put(\"yarn.scheduler.capacity.queue-mappings\",\n          mapping.toString());\n    }\n\n    return properties;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/QueuePlacementConverter.java"
    }
  }
}