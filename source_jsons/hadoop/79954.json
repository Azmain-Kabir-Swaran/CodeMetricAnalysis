{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawLocalFileSystem.java",
  "functionName": "mkdirsWithOptionalPermission",
  "functionId": "mkdirsWithOptionalPermission___f-Path__permission-FsPermission",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
  "functionStartLine": 569,
  "functionEndLine": 590,
  "numCommitsSeen": 101,
  "timeTaken": 3249,
  "changeHistory": [
    "d11d280b8b527d572ca0b29ef57434e9ff533ffe",
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "9b0b37e410afaf8fe0f7c6e0938a2095bef9e6d2",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "d11d280b8b527d572ca0b29ef57434e9ff533ffe": "Ybodychange",
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": "Ybodychange",
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "9b0b37e410afaf8fe0f7c6e0938a2095bef9e6d2": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d11d280b8b527d572ca0b29ef57434e9ff533ffe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12856. FileUtil.checkDest() and RawLocalFileSystem.mkdirs() to throw stricter IOEs; RawLocalFS contract tests to verify. Contributed by Steve Loughran\n",
      "commitDate": "25/04/17 6:33 PM",
      "commitName": "d11d280b8b527d572ca0b29ef57434e9ff533ffe",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "07/12/16 8:37 PM",
      "commitNameOld": "deb4743b2c3bb5c23842f0e224b89e41ef2d36d4",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 138.87,
      "commitsBetweenForRepo": 718,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n       throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n     File parent2f \u003d null;\n     if(parent !\u003d null) {\n       parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n         throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n     if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n-      throw new FileNotFoundException(\"Destination exists\" +\n+      throw new FileAlreadyExistsException(\"Destination exists\" +\n               \" and is not a directory: \" + p2f.getCanonicalPath());\n     }\n     return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n       (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n      throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    File parent2f \u003d null;\n    if(parent !\u003d null) {\n      parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileAlreadyExistsException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
      "commitDate": "16/12/14 3:29 PM",
      "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
          "commitDate": "16/12/14 3:29 PM",
          "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
          "commitAuthor": "cnauroth",
          "commitDateOld": "09/12/14 2:31 PM",
          "commitNameOld": "03867eb1bb173c66b5eb3bebf2fe03a1188635b5",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 7.04,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public boolean mkdirs(Path f) throws IOException {\n+  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n+      throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n     File parent2f \u003d null;\n     if(parent !\u003d null) {\n       parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n         throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n     if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n       throw new FileNotFoundException(\"Destination exists\" +\n               \" and is not a directory: \" + p2f.getCanonicalPath());\n     }\n     return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n-      (mkOneDir(p2f) || p2f.isDirectory());\n+      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n      throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    File parent2f \u003d null;\n    if(parent !\u003d null) {\n      parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileNotFoundException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
          "extendedDetails": {
            "oldValue": "mkdirs",
            "newValue": "mkdirsWithOptionalPermission"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
          "commitDate": "16/12/14 3:29 PM",
          "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
          "commitAuthor": "cnauroth",
          "commitDateOld": "09/12/14 2:31 PM",
          "commitNameOld": "03867eb1bb173c66b5eb3bebf2fe03a1188635b5",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 7.04,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public boolean mkdirs(Path f) throws IOException {\n+  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n+      throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n     File parent2f \u003d null;\n     if(parent !\u003d null) {\n       parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n         throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n     if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n       throw new FileNotFoundException(\"Destination exists\" +\n               \" and is not a directory: \" + p2f.getCanonicalPath());\n     }\n     return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n-      (mkOneDir(p2f) || p2f.isDirectory());\n+      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n      throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    File parent2f \u003d null;\n    if(parent !\u003d null) {\n      parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileNotFoundException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path]",
            "newValue": "[f-Path, permission-FsPermission]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
          "commitDate": "16/12/14 3:29 PM",
          "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
          "commitAuthor": "cnauroth",
          "commitDateOld": "09/12/14 2:31 PM",
          "commitNameOld": "03867eb1bb173c66b5eb3bebf2fe03a1188635b5",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 7.04,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public boolean mkdirs(Path f) throws IOException {\n+  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n+      throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n     File parent2f \u003d null;\n     if(parent !\u003d null) {\n       parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n         throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n     if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n       throw new FileNotFoundException(\"Destination exists\" +\n               \" and is not a directory: \" + p2f.getCanonicalPath());\n     }\n     return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n-      (mkOneDir(p2f) || p2f.isDirectory());\n+      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n      throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    File parent2f \u003d null;\n    if(parent !\u003d null) {\n      parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileNotFoundException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
          "commitDate": "16/12/14 3:29 PM",
          "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
          "commitAuthor": "cnauroth",
          "commitDateOld": "09/12/14 2:31 PM",
          "commitNameOld": "03867eb1bb173c66b5eb3bebf2fe03a1188635b5",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 7.04,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public boolean mkdirs(Path f) throws IOException {\n+  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n+      throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n     File parent2f \u003d null;\n     if(parent !\u003d null) {\n       parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n         throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n     if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n       throw new FileNotFoundException(\"Destination exists\" +\n               \" and is not a directory: \" + p2f.getCanonicalPath());\n     }\n     return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n-      (mkOneDir(p2f) || p2f.isDirectory());\n+      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean mkdirsWithOptionalPermission(Path f, FsPermission permission)\n      throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    File parent2f \u003d null;\n    if(parent !\u003d null) {\n      parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileNotFoundException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n      (mkOneDirWithMode(f, p2f, permission) || p2f.isDirectory());\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
      "commitDate": "22/10/14 3:57 PM",
      "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/09/14 10:27 PM",
      "commitNameOld": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 22.73,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   public boolean mkdirs(Path f) throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n+    File parent2f \u003d null;\n     if(parent !\u003d null) {\n-      File parent2f \u003d pathToFile(parent);\n+      parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n         throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n     if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n       throw new FileNotFoundException(\"Destination exists\" +\n               \" and is not a directory: \" + p2f.getCanonicalPath());\n     }\n-    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n-      (p2f.mkdir() || p2f.isDirectory());\n+    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n+      (mkOneDir(p2f) || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    File parent2f \u003d null;\n    if(parent !\u003d null) {\n      parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileNotFoundException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || parent2f.exists() || mkdirs(parent)) \u0026\u0026\n      (mkOneDir(p2f) || p2f.isDirectory());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9361: Strictly define FileSystem APIs\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:04 AM",
      "commitName": "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "21/02/14 10:42 AM",
      "commitNameOld": "58fb83d98299bfeb2de9899140e2cb626b9f8327",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 131.72,
      "commitsBetweenForRepo": 877,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,20 @@\n   public boolean mkdirs(Path f) throws IOException {\n     if(f \u003d\u003d null) {\n       throw new IllegalArgumentException(\"mkdirs path arg is null\");\n     }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n     if(parent !\u003d null) {\n       File parent2f \u003d pathToFile(parent);\n       if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n-        throw new FileAlreadyExistsException(\"Parent path is not a directory: \" \n+        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n             + parent);\n       }\n     }\n+    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n+      throw new FileNotFoundException(\"Destination exists\" +\n+              \" and is not a directory: \" + p2f.getCanonicalPath());\n+    }\n     return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n       (p2f.mkdir() || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    if(parent !\u003d null) {\n      File parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new ParentNotDirectoryException(\"Parent path is not a directory: \"\n            + parent);\n      }\n    }\n    if (p2f.exists() \u0026\u0026 !p2f.isDirectory()) {\n      throw new FileNotFoundException(\"Destination exists\" +\n              \" and is not a directory: \" + p2f.getCanonicalPath());\n    }\n    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n      (p2f.mkdir() || p2f.isDirectory());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    if(parent !\u003d null) {\n      File parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new FileAlreadyExistsException(\"Parent path is not a directory: \" \n            + parent);\n      }\n    }\n    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n      (p2f.mkdir() || p2f.isDirectory());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    if(parent !\u003d null) {\n      File parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new FileAlreadyExistsException(\"Parent path is not a directory: \" \n            + parent);\n      }\n    }\n    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n      (p2f.mkdir() || p2f.isDirectory());\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    if(parent !\u003d null) {\n      File parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new FileAlreadyExistsException(\"Parent path is not a directory: \" \n            + parent);\n      }\n    }\n    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n      (p2f.mkdir() || p2f.isDirectory());\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
      }
    },
    "9b0b37e410afaf8fe0f7c6e0938a2095bef9e6d2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6229. Attempt to make a directory under an existing file on LocalFileSystem should throw an Exception. Contributed by Boris Shkolnik.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812127 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/09/09 6:25 AM",
      "commitName": "9b0b37e410afaf8fe0f7c6e0938a2095bef9e6d2",
      "commitAuthor": "Thomas White",
      "commitDateOld": "21/08/09 3:50 PM",
      "commitNameOld": "76a77aea78301c6b632d06d20520abc8a21d4cb0",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 16.61,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,16 @@\n   public boolean mkdirs(Path f) throws IOException {\n+    if(f \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n+    }\n     Path parent \u003d f.getParent();\n     File p2f \u003d pathToFile(f);\n+    if(parent !\u003d null) {\n+      File parent2f \u003d pathToFile(parent);\n+      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n+        throw new FileAlreadyExistsException(\"Parent path is not a directory: \" \n+            + parent);\n+      }\n+    }\n     return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n       (p2f.mkdir() || p2f.isDirectory());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    if(f \u003d\u003d null) {\n      throw new IllegalArgumentException(\"mkdirs path arg is null\");\n    }\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    if(parent !\u003d null) {\n      File parent2f \u003d pathToFile(parent);\n      if(parent2f !\u003d null \u0026\u0026 parent2f.exists() \u0026\u0026 !parent2f.isDirectory()) {\n        throw new FileAlreadyExistsException(\"Parent path is not a directory: \" \n            + parent);\n      }\n    }\n    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n      (p2f.mkdir() || p2f.isDirectory());\n  }",
      "path": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,6 @@\n+  public boolean mkdirs(Path f) throws IOException {\n+    Path parent \u003d f.getParent();\n+    File p2f \u003d pathToFile(f);\n+    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n+      (p2f.mkdir() || p2f.isDirectory());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f) throws IOException {\n    Path parent \u003d f.getParent();\n    File p2f \u003d pathToFile(f);\n    return (parent \u003d\u003d null || mkdirs(parent)) \u0026\u0026\n      (p2f.mkdir() || p2f.isDirectory());\n  }",
      "path": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
    }
  }
}