{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirXAttrOp.java",
  "functionName": "setINodeXAttrs",
  "functionId": "setINodeXAttrs___fsd-FSDirectory__existingXAttrs-List__XAttr__(modifiers-final)__toSet-List__XAttr__(modifiers-final)__flag-EnumSet__XAttrSetFlag__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
  "functionStartLine": 335,
  "functionEndLine": 403,
  "numCommitsSeen": 402,
  "timeTaken": 7429,
  "changeHistory": [
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
    "d417e49ce4db119cdeb01be526cdb07f24baf388",
    "befa4bb1edb9687cc625e1a823148781f7de8257",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "d417e49ce4db119cdeb01be526cdb07f24baf388": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
    "befa4bb1edb9687cc625e1a823148781f7de8257": "Ybodychange",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,69 @@\n-  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+  static List\u003cXAttr\u003e setINodeXAttrs(\n+      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n       final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     // Check for duplicate XAttrs in toSet\n     // We need to use a custom comparator, so using a HashSet is not suitable\n     for (int i \u003d 0; i \u003c toSet.size(); i++) {\n       for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n         if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n           throw new IOException(\"Cannot specify the same XAttr to be set \" +\n               \"more than once\");\n         }\n       }\n     }\n \n     // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n \n     // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n     // so there\u0027s no need to size it precisely here.\n     int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n     newSize +\u003d toSet.size();\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n \n     // Check if the XAttr already exists to validate with the provided flag\n     for (XAttr xAttr: toSet) {\n       boolean exist \u003d false;\n       if (existingXAttrs !\u003d null) {\n         for (XAttr a : existingXAttrs) {\n           if (a.equalsIgnoreValue(xAttr)) {\n             exist \u003d true;\n             break;\n           }\n         }\n       }\n       XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n       // add the new XAttr since it passed validation\n       xAttrs.add(xAttr);\n       if (isUserVisible(xAttr)) {\n         userVisibleXAttrsNum++;\n       }\n     }\n \n     // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n       for (XAttr existing : existingXAttrs) {\n         boolean alreadySet \u003d false;\n         for (XAttr set : toSet) {\n           if (set.equalsIgnoreValue(existing)) {\n             alreadySet \u003d true;\n             break;\n           }\n         }\n         if (!alreadySet) {\n           xAttrs.add(existing);\n           if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n \n-    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n+    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n-          + \"would exceed limit of \" + inodeXAttrsLimit);\n+          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n     }\n \n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e setINodeXAttrs(\n      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
            "oldMethodName": "setINodeXAttrs",
            "newMethodName": "setINodeXAttrs"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,69 @@\n-  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+  static List\u003cXAttr\u003e setINodeXAttrs(\n+      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n       final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     // Check for duplicate XAttrs in toSet\n     // We need to use a custom comparator, so using a HashSet is not suitable\n     for (int i \u003d 0; i \u003c toSet.size(); i++) {\n       for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n         if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n           throw new IOException(\"Cannot specify the same XAttr to be set \" +\n               \"more than once\");\n         }\n       }\n     }\n \n     // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n \n     // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n     // so there\u0027s no need to size it precisely here.\n     int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n     newSize +\u003d toSet.size();\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n \n     // Check if the XAttr already exists to validate with the provided flag\n     for (XAttr xAttr: toSet) {\n       boolean exist \u003d false;\n       if (existingXAttrs !\u003d null) {\n         for (XAttr a : existingXAttrs) {\n           if (a.equalsIgnoreValue(xAttr)) {\n             exist \u003d true;\n             break;\n           }\n         }\n       }\n       XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n       // add the new XAttr since it passed validation\n       xAttrs.add(xAttr);\n       if (isUserVisible(xAttr)) {\n         userVisibleXAttrsNum++;\n       }\n     }\n \n     // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n       for (XAttr existing : existingXAttrs) {\n         boolean alreadySet \u003d false;\n         for (XAttr set : toSet) {\n           if (set.equalsIgnoreValue(existing)) {\n             alreadySet \u003d true;\n             break;\n           }\n         }\n         if (!alreadySet) {\n           xAttrs.add(existing);\n           if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n \n-    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n+    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n-          + \"would exceed limit of \" + inodeXAttrsLimit);\n+          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n     }\n \n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e setINodeXAttrs(\n      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,69 @@\n-  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+  static List\u003cXAttr\u003e setINodeXAttrs(\n+      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n       final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     // Check for duplicate XAttrs in toSet\n     // We need to use a custom comparator, so using a HashSet is not suitable\n     for (int i \u003d 0; i \u003c toSet.size(); i++) {\n       for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n         if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n           throw new IOException(\"Cannot specify the same XAttr to be set \" +\n               \"more than once\");\n         }\n       }\n     }\n \n     // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n \n     // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n     // so there\u0027s no need to size it precisely here.\n     int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n     newSize +\u003d toSet.size();\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n \n     // Check if the XAttr already exists to validate with the provided flag\n     for (XAttr xAttr: toSet) {\n       boolean exist \u003d false;\n       if (existingXAttrs !\u003d null) {\n         for (XAttr a : existingXAttrs) {\n           if (a.equalsIgnoreValue(xAttr)) {\n             exist \u003d true;\n             break;\n           }\n         }\n       }\n       XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n       // add the new XAttr since it passed validation\n       xAttrs.add(xAttr);\n       if (isUserVisible(xAttr)) {\n         userVisibleXAttrsNum++;\n       }\n     }\n \n     // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n       for (XAttr existing : existingXAttrs) {\n         boolean alreadySet \u003d false;\n         for (XAttr set : toSet) {\n           if (set.equalsIgnoreValue(existing)) {\n             alreadySet \u003d true;\n             break;\n           }\n         }\n         if (!alreadySet) {\n           xAttrs.add(existing);\n           if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n \n-    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n+    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n-          + \"would exceed limit of \" + inodeXAttrsLimit);\n+          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n     }\n \n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e setINodeXAttrs(\n      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,69 @@\n-  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+  static List\u003cXAttr\u003e setINodeXAttrs(\n+      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n       final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     // Check for duplicate XAttrs in toSet\n     // We need to use a custom comparator, so using a HashSet is not suitable\n     for (int i \u003d 0; i \u003c toSet.size(); i++) {\n       for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n         if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n           throw new IOException(\"Cannot specify the same XAttr to be set \" +\n               \"more than once\");\n         }\n       }\n     }\n \n     // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n \n     // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n     // so there\u0027s no need to size it precisely here.\n     int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n     newSize +\u003d toSet.size();\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n \n     // Check if the XAttr already exists to validate with the provided flag\n     for (XAttr xAttr: toSet) {\n       boolean exist \u003d false;\n       if (existingXAttrs !\u003d null) {\n         for (XAttr a : existingXAttrs) {\n           if (a.equalsIgnoreValue(xAttr)) {\n             exist \u003d true;\n             break;\n           }\n         }\n       }\n       XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n       // add the new XAttr since it passed validation\n       xAttrs.add(xAttr);\n       if (isUserVisible(xAttr)) {\n         userVisibleXAttrsNum++;\n       }\n     }\n \n     // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n       for (XAttr existing : existingXAttrs) {\n         boolean alreadySet \u003d false;\n         for (XAttr set : toSet) {\n           if (set.equalsIgnoreValue(existing)) {\n             alreadySet \u003d true;\n             break;\n           }\n         }\n         if (!alreadySet) {\n           xAttrs.add(existing);\n           if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n \n-    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n+    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n-          + \"would exceed limit of \" + inodeXAttrsLimit);\n+          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n     }\n \n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e setINodeXAttrs(\n      FSDirectory fsd, final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e fsd.getInodeXAttrsLimit()) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + fsd.getInodeXAttrsLimit());\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[existingXAttrs-List\u003cXAttr\u003e(modifiers-final), toSet-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]",
            "newValue": "[fsd-FSDirectory, existingXAttrs-List\u003cXAttr\u003e(modifiers-final), toSet-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "d417e49ce4db119cdeb01be526cdb07f24baf388": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 10:37 AM",
      "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,68 @@\n-  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n-        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws IOException {\n+    // Check for duplicate XAttrs in toSet\n+    // We need to use a custom comparator, so using a HashSet is not suitable\n+    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n+      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n+        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n+          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n+              \"more than once\");\n+        }\n+      }\n+    }\n+\n+    // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n-    boolean exist \u003d false;\n+\n+    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n+    // so there\u0027s no need to size it precisely here.\n+    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n+    newSize +\u003d toSet.size();\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n+\n+    // Check if the XAttr already exists to validate with the provided flag\n+    for (XAttr xAttr: toSet) {\n+      boolean exist \u003d false;\n+      if (existingXAttrs !\u003d null) {\n+        for (XAttr a : existingXAttrs) {\n+          if (a.equalsIgnoreValue(xAttr)) {\n+            exist \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n+      // add the new XAttr since it passed validation\n+      xAttrs.add(xAttr);\n+      if (isUserVisible(xAttr)) {\n+        userVisibleXAttrsNum++;\n+      }\n+    }\n+\n+    // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n-      for (XAttr a: existingXAttrs) {\n-        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-          exist \u003d true;\n-        } else {\n-          xAttrs.add(a);\n-          \n-          if (isUserVisible(a)) {\n+      for (XAttr existing : existingXAttrs) {\n+        boolean alreadySet \u003d false;\n+        for (XAttr set : toSet) {\n+          if (set.equalsIgnoreValue(existing)) {\n+            alreadySet \u003d true;\n+            break;\n+          }\n+        }\n+        if (!alreadySet) {\n+          xAttrs.add(existing);\n+          if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n-    \n-    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n-    xAttrs.add(xAttr);\n-    \n-    if (isUserVisible(xAttr)) {\n-      userVisibleXAttrsNum++;\n-    }\n-    \n+\n     if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n           + \"would exceed limit of \" + inodeXAttrsLimit);\n     }\n-    \n+\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "setINodeXAttr",
            "newValue": "setINodeXAttrs"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,68 @@\n-  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n-        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws IOException {\n+    // Check for duplicate XAttrs in toSet\n+    // We need to use a custom comparator, so using a HashSet is not suitable\n+    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n+      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n+        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n+          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n+              \"more than once\");\n+        }\n+      }\n+    }\n+\n+    // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n-    boolean exist \u003d false;\n+\n+    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n+    // so there\u0027s no need to size it precisely here.\n+    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n+    newSize +\u003d toSet.size();\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n+\n+    // Check if the XAttr already exists to validate with the provided flag\n+    for (XAttr xAttr: toSet) {\n+      boolean exist \u003d false;\n+      if (existingXAttrs !\u003d null) {\n+        for (XAttr a : existingXAttrs) {\n+          if (a.equalsIgnoreValue(xAttr)) {\n+            exist \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n+      // add the new XAttr since it passed validation\n+      xAttrs.add(xAttr);\n+      if (isUserVisible(xAttr)) {\n+        userVisibleXAttrsNum++;\n+      }\n+    }\n+\n+    // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n-      for (XAttr a: existingXAttrs) {\n-        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-          exist \u003d true;\n-        } else {\n-          xAttrs.add(a);\n-          \n-          if (isUserVisible(a)) {\n+      for (XAttr existing : existingXAttrs) {\n+        boolean alreadySet \u003d false;\n+        for (XAttr set : toSet) {\n+          if (set.equalsIgnoreValue(existing)) {\n+            alreadySet \u003d true;\n+            break;\n+          }\n+        }\n+        if (!alreadySet) {\n+          xAttrs.add(existing);\n+          if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n-    \n-    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n-    xAttrs.add(xAttr);\n-    \n-    if (isUserVisible(xAttr)) {\n-      userVisibleXAttrsNum++;\n-    }\n-    \n+\n     if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n           + \"would exceed limit of \" + inodeXAttrsLimit);\n     }\n-    \n+\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[existingXAttrs-List\u003cXAttr\u003e, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e]",
            "newValue": "[existingXAttrs-List\u003cXAttr\u003e(modifiers-final), toSet-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,68 @@\n-  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n-        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws IOException {\n+    // Check for duplicate XAttrs in toSet\n+    // We need to use a custom comparator, so using a HashSet is not suitable\n+    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n+      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n+        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n+          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n+              \"more than once\");\n+        }\n+      }\n+    }\n+\n+    // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n-    boolean exist \u003d false;\n+\n+    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n+    // so there\u0027s no need to size it precisely here.\n+    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n+    newSize +\u003d toSet.size();\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n+\n+    // Check if the XAttr already exists to validate with the provided flag\n+    for (XAttr xAttr: toSet) {\n+      boolean exist \u003d false;\n+      if (existingXAttrs !\u003d null) {\n+        for (XAttr a : existingXAttrs) {\n+          if (a.equalsIgnoreValue(xAttr)) {\n+            exist \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n+      // add the new XAttr since it passed validation\n+      xAttrs.add(xAttr);\n+      if (isUserVisible(xAttr)) {\n+        userVisibleXAttrsNum++;\n+      }\n+    }\n+\n+    // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n-      for (XAttr a: existingXAttrs) {\n-        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-          exist \u003d true;\n-        } else {\n-          xAttrs.add(a);\n-          \n-          if (isUserVisible(a)) {\n+      for (XAttr existing : existingXAttrs) {\n+        boolean alreadySet \u003d false;\n+        for (XAttr set : toSet) {\n+          if (set.equalsIgnoreValue(existing)) {\n+            alreadySet \u003d true;\n+            break;\n+          }\n+        }\n+        if (!alreadySet) {\n+          xAttrs.add(existing);\n+          if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n-    \n-    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n-    xAttrs.add(xAttr);\n-    \n-    if (isUserVisible(xAttr)) {\n-      userVisibleXAttrsNum++;\n-    }\n-    \n+\n     if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n           + \"would exceed limit of \" + inodeXAttrsLimit);\n     }\n-    \n+\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,68 @@\n-  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n-        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws IOException {\n+    // Check for duplicate XAttrs in toSet\n+    // We need to use a custom comparator, so using a HashSet is not suitable\n+    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n+      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n+        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n+          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n+              \"more than once\");\n+        }\n+      }\n+    }\n+\n+    // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n-    boolean exist \u003d false;\n+\n+    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n+    // so there\u0027s no need to size it precisely here.\n+    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n+    newSize +\u003d toSet.size();\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n+\n+    // Check if the XAttr already exists to validate with the provided flag\n+    for (XAttr xAttr: toSet) {\n+      boolean exist \u003d false;\n+      if (existingXAttrs !\u003d null) {\n+        for (XAttr a : existingXAttrs) {\n+          if (a.equalsIgnoreValue(xAttr)) {\n+            exist \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n+      // add the new XAttr since it passed validation\n+      xAttrs.add(xAttr);\n+      if (isUserVisible(xAttr)) {\n+        userVisibleXAttrsNum++;\n+      }\n+    }\n+\n+    // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n-      for (XAttr a: existingXAttrs) {\n-        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-          exist \u003d true;\n-        } else {\n-          xAttrs.add(a);\n-          \n-          if (isUserVisible(a)) {\n+      for (XAttr existing : existingXAttrs) {\n+        boolean alreadySet \u003d false;\n+        for (XAttr set : toSet) {\n+          if (set.equalsIgnoreValue(existing)) {\n+            alreadySet \u003d true;\n+            break;\n+          }\n+        }\n+        if (!alreadySet) {\n+          xAttrs.add(existing);\n+          if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n-    \n-    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n-    xAttrs.add(xAttr);\n-    \n-    if (isUserVisible(xAttr)) {\n-      userVisibleXAttrsNum++;\n-    }\n-    \n+\n     if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n           + \"would exceed limit of \" + inodeXAttrsLimit);\n     }\n-    \n+\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,68 @@\n-  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n-        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws IOException {\n+    // Check for duplicate XAttrs in toSet\n+    // We need to use a custom comparator, so using a HashSet is not suitable\n+    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n+      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n+        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n+          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n+              \"more than once\");\n+        }\n+      }\n+    }\n+\n+    // Count the current number of user-visible XAttrs for limit checking\n     int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n-    boolean exist \u003d false;\n+\n+    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n+    // so there\u0027s no need to size it precisely here.\n+    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n+    newSize +\u003d toSet.size();\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n+\n+    // Check if the XAttr already exists to validate with the provided flag\n+    for (XAttr xAttr: toSet) {\n+      boolean exist \u003d false;\n+      if (existingXAttrs !\u003d null) {\n+        for (XAttr a : existingXAttrs) {\n+          if (a.equalsIgnoreValue(xAttr)) {\n+            exist \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n+      // add the new XAttr since it passed validation\n+      xAttrs.add(xAttr);\n+      if (isUserVisible(xAttr)) {\n+        userVisibleXAttrsNum++;\n+      }\n+    }\n+\n+    // Add the existing xattrs back in, if they weren\u0027t already set\n     if (existingXAttrs !\u003d null) {\n-      for (XAttr a: existingXAttrs) {\n-        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-          exist \u003d true;\n-        } else {\n-          xAttrs.add(a);\n-          \n-          if (isUserVisible(a)) {\n+      for (XAttr existing : existingXAttrs) {\n+        boolean alreadySet \u003d false;\n+        for (XAttr set : toSet) {\n+          if (set.equalsIgnoreValue(existing)) {\n+            alreadySet \u003d true;\n+            break;\n+          }\n+        }\n+        if (!alreadySet) {\n+          xAttrs.add(existing);\n+          if (isUserVisible(existing)) {\n             userVisibleXAttrsNum++;\n           }\n         }\n       }\n     }\n-    \n-    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n-    xAttrs.add(xAttr);\n-    \n-    if (isUserVisible(xAttr)) {\n-      userVisibleXAttrsNum++;\n-    }\n-    \n+\n     if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n           + \"would exceed limit of \" + inodeXAttrsLimit);\n     }\n-    \n+\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e setINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toSet, final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    // Check for duplicate XAttrs in toSet\n    // We need to use a custom comparator, so using a HashSet is not suitable\n    for (int i \u003d 0; i \u003c toSet.size(); i++) {\n      for (int j \u003d i + 1; j \u003c toSet.size(); j++) {\n        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {\n          throw new IOException(\"Cannot specify the same XAttr to be set \" +\n              \"more than once\");\n        }\n      }\n    }\n\n    // Count the current number of user-visible XAttrs for limit checking\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n\n    // The XAttr list is copied to an exactly-sized array when it\u0027s stored,\n    // so there\u0027s no need to size it precisely here.\n    int newSize \u003d (existingXAttrs !\u003d null) ? existingXAttrs.size() : 0;\n    newSize +\u003d toSet.size();\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(newSize);\n\n    // Check if the XAttr already exists to validate with the provided flag\n    for (XAttr xAttr: toSet) {\n      boolean exist \u003d false;\n      if (existingXAttrs !\u003d null) {\n        for (XAttr a : existingXAttrs) {\n          if (a.equalsIgnoreValue(xAttr)) {\n            exist \u003d true;\n            break;\n          }\n        }\n      }\n      XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n      // add the new XAttr since it passed validation\n      xAttrs.add(xAttr);\n      if (isUserVisible(xAttr)) {\n        userVisibleXAttrsNum++;\n      }\n    }\n\n    // Add the existing xattrs back in, if they weren\u0027t already set\n    if (existingXAttrs !\u003d null) {\n      for (XAttr existing : existingXAttrs) {\n        boolean alreadySet \u003d false;\n        for (XAttr set : toSet) {\n          if (set.equalsIgnoreValue(existing)) {\n            alreadySet \u003d true;\n            break;\n          }\n        }\n        if (!alreadySet) {\n          xAttrs.add(existing);\n          if (isUserVisible(existing)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n\n    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n\n    return xAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[existingXAttrs-List\u003cXAttr\u003e, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e]",
            "newValue": "[existingXAttrs-List\u003cXAttr\u003e(modifiers-final), toSet-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "befa4bb1edb9687cc625e1a823148781f7de8257": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6395. Skip checking xattr limits for non-user-visible namespaces. Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602288 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/14 1:55 PM",
      "commitName": "befa4bb1edb9687cc625e1a823148781f7de8257",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/06/14 10:22 AM",
      "commitNameOld": "e98529858edeed11c4f900b0db30d7e4eb2ab1ec",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,35 @@\n   List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n       EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n         existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n     boolean exist \u003d false;\n     if (existingXAttrs !\u003d null) {\n       for (XAttr a: existingXAttrs) {\n         if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n             \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n           exist \u003d true;\n         } else {\n           xAttrs.add(a);\n+          \n+          if (isUserVisible(a)) {\n+            userVisibleXAttrsNum++;\n+          }\n         }\n       }\n     }\n     \n     XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n     xAttrs.add(xAttr);\n     \n-    if (xAttrs.size() \u003e inodeXAttrsLimit) {\n+    if (isUserVisible(xAttr)) {\n+      userVisibleXAttrsNum++;\n+    }\n+    \n+    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n       throw new IOException(\"Cannot add additional XAttr to inode, \"\n           + \"would exceed limit of \" + inodeXAttrsLimit);\n     }\n     \n     return xAttrs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n    int userVisibleXAttrsNum \u003d 0; // Number of user visible xAttrs\n    boolean exist \u003d false;\n    if (existingXAttrs !\u003d null) {\n      for (XAttr a: existingXAttrs) {\n        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n          exist \u003d true;\n        } else {\n          xAttrs.add(a);\n          \n          if (isUserVisible(a)) {\n            userVisibleXAttrsNum++;\n          }\n        }\n      }\n    }\n    \n    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n    xAttrs.add(xAttr);\n    \n    if (isUserVisible(xAttr)) {\n      userVisibleXAttrsNum++;\n    }\n    \n    if (userVisibleXAttrsNum \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n    \n    return xAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Yintroduced",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,26 @@\n+  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n+      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n+        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n+    boolean exist \u003d false;\n+    if (existingXAttrs !\u003d null) {\n+      for (XAttr a: existingXAttrs) {\n+        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n+            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n+          exist \u003d true;\n+        } else {\n+          xAttrs.add(a);\n+        }\n+      }\n+    }\n+    \n+    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n+    xAttrs.add(xAttr);\n+    \n+    if (xAttrs.size() \u003e inodeXAttrsLimit) {\n+      throw new IOException(\"Cannot add additional XAttr to inode, \"\n+          + \"would exceed limit of \" + inodeXAttrsLimit);\n+    }\n+    \n+    return xAttrs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cXAttr\u003e setINodeXAttr(List\u003cXAttr\u003e existingXAttrs, XAttr xAttr, \n      EnumSet\u003cXAttrSetFlag\u003e flag) throws QuotaExceededException, IOException {\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(\n        existingXAttrs !\u003d null ? existingXAttrs.size() + 1 : 1);\n    boolean exist \u003d false;\n    if (existingXAttrs !\u003d null) {\n      for (XAttr a: existingXAttrs) {\n        if ((a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n            \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n          exist \u003d true;\n        } else {\n          xAttrs.add(a);\n        }\n      }\n    }\n    \n    XAttrSetFlag.validate(xAttr.getName(), exist, flag);\n    xAttrs.add(xAttr);\n    \n    if (xAttrs.size() \u003e inodeXAttrsLimit) {\n      throw new IOException(\"Cannot add additional XAttr to inode, \"\n          + \"would exceed limit of \" + inodeXAttrsLimit);\n    }\n    \n    return xAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
    }
  }
}