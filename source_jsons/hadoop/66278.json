{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSUtils.java",
  "functionName": "parseNodesFromNodeFile",
  "functionId": "parseNodesFromNodeFile___nodeFile-String__nmDefaultResource-Resource",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
  "functionStartLine": 169,
  "functionEndLine": 208,
  "numCommitsSeen": 25,
  "timeTaken": 3635,
  "changeHistory": [
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
    "78860372bd8048168c6aa27a9526c40f5869cf2c",
    "2cc841f16ec9aa5336495fc20ee781a1276fddc5",
    "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Ymultichange(Yreturntypechange,Ybodychange)",
    "78860372bd8048168c6aa27a9526c40f5869cf2c": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "2cc841f16ec9aa5336495fc20ee781a1276fddc5": "Ybodychange",
    "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "31/07/18 9:36 AM",
          "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "17/04/18 1:11 PM",
          "commitNameOld": "78860372bd8048168c6aa27a9526c40f5869cf2c",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 104.85,
          "commitsBetweenForRepo": 1242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,40 @@\n-  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n-      Resource nmDefaultResource) throws IOException {\n-    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n+  public static Set\u003cNodeDetails\u003e parseNodesFromNodeFile(\n+      String nodeFile, Resource nmDefaultResource) throws IOException {\n+    Set\u003cNodeDetails\u003e nodeSet \u003d new HashSet\u003c\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Reader input \u003d\n         new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n       Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n+          NodeDetails nodeDetails \u003d new NodeDetails(\n+              rack + \"/\" + jsonNode.get(\"node\"));\n           Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n           ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n           for (ResourceInformation info : infors) {\n             if (jsonNode.get(info.getName()) !\u003d null) {\n               nodeResource.setResourceValue(info.getName(),\n                   Integer.parseInt(jsonNode.get(info.getName()).toString()));\n             }\n           }\n-          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n+          nodeDetails.setNodeResource(nodeResource);\n+          if (jsonNode.get(\"labels\") !\u003d null) {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d  new HashSet\u003c\u003e(\n+                YarnClientUtils.buildNodeLabelsFromStr(\n+                    jsonNode.get(\"labels\").toString()));\n+            nodeDetails.setLabels(nodeLabels);\n+          }\n+          nodeSet.add(nodeDetails);\n         }\n       }\n     } finally {\n       input.close();\n     }\n-    return nodeResourceMap;\n+    return nodeSet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Set\u003cNodeDetails\u003e parseNodesFromNodeFile(\n      String nodeFile, Resource nmDefaultResource) throws IOException {\n    Set\u003cNodeDetails\u003e nodeSet \u003d new HashSet\u003c\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          NodeDetails nodeDetails \u003d new NodeDetails(\n              rack + \"/\" + jsonNode.get(\"node\"));\n          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n          for (ResourceInformation info : infors) {\n            if (jsonNode.get(info.getName()) !\u003d null) {\n              nodeResource.setResourceValue(info.getName(),\n                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n            }\n          }\n          nodeDetails.setNodeResource(nodeResource);\n          if (jsonNode.get(\"labels\") !\u003d null) {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d  new HashSet\u003c\u003e(\n                YarnClientUtils.buildNodeLabelsFromStr(\n                    jsonNode.get(\"labels\").toString()));\n            nodeDetails.setLabels(nodeLabels);\n          }\n          nodeSet.add(nodeDetails);\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeSet;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
          "extendedDetails": {
            "oldValue": "Map\u003cString,Resource\u003e",
            "newValue": "Set\u003cNodeDetails\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "31/07/18 9:36 AM",
          "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "17/04/18 1:11 PM",
          "commitNameOld": "78860372bd8048168c6aa27a9526c40f5869cf2c",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 104.85,
          "commitsBetweenForRepo": 1242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,40 @@\n-  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n-      Resource nmDefaultResource) throws IOException {\n-    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n+  public static Set\u003cNodeDetails\u003e parseNodesFromNodeFile(\n+      String nodeFile, Resource nmDefaultResource) throws IOException {\n+    Set\u003cNodeDetails\u003e nodeSet \u003d new HashSet\u003c\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Reader input \u003d\n         new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n       Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n+          NodeDetails nodeDetails \u003d new NodeDetails(\n+              rack + \"/\" + jsonNode.get(\"node\"));\n           Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n           ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n           for (ResourceInformation info : infors) {\n             if (jsonNode.get(info.getName()) !\u003d null) {\n               nodeResource.setResourceValue(info.getName(),\n                   Integer.parseInt(jsonNode.get(info.getName()).toString()));\n             }\n           }\n-          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n+          nodeDetails.setNodeResource(nodeResource);\n+          if (jsonNode.get(\"labels\") !\u003d null) {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d  new HashSet\u003c\u003e(\n+                YarnClientUtils.buildNodeLabelsFromStr(\n+                    jsonNode.get(\"labels\").toString()));\n+            nodeDetails.setLabels(nodeLabels);\n+          }\n+          nodeSet.add(nodeDetails);\n         }\n       }\n     } finally {\n       input.close();\n     }\n-    return nodeResourceMap;\n+    return nodeSet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Set\u003cNodeDetails\u003e parseNodesFromNodeFile(\n      String nodeFile, Resource nmDefaultResource) throws IOException {\n    Set\u003cNodeDetails\u003e nodeSet \u003d new HashSet\u003c\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          NodeDetails nodeDetails \u003d new NodeDetails(\n              rack + \"/\" + jsonNode.get(\"node\"));\n          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n          for (ResourceInformation info : infors) {\n            if (jsonNode.get(info.getName()) !\u003d null) {\n              nodeResource.setResourceValue(info.getName(),\n                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n            }\n          }\n          nodeDetails.setNodeResource(nodeResource);\n          if (jsonNode.get(\"labels\") !\u003d null) {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d  new HashSet\u003c\u003e(\n                YarnClientUtils.buildNodeLabelsFromStr(\n                    jsonNode.get(\"labels\").toString()));\n            nodeDetails.setLabels(nodeLabels);\n          }\n          nodeSet.add(nodeDetails);\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeSet;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "78860372bd8048168c6aa27a9526c40f5869cf2c": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8134. Support specifying node resources in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "17/04/18 1:11 PM",
      "commitName": "78860372bd8048168c6aa27a9526c40f5869cf2c",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8134. Support specifying node resources in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "17/04/18 1:11 PM",
          "commitName": "78860372bd8048168c6aa27a9526c40f5869cf2c",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "27/10/17 2:41 PM",
          "commitNameOld": "99880d0a16727c770da053464da87960c5b02065",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 171.94,
          "commitsBetweenForRepo": 1271,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,31 @@\n-  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n-          throws IOException {\n-    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n+  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n+      Resource nmDefaultResource) throws IOException {\n+    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Reader input \u003d\n         new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n       Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n-          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n+          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n+          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n+          for (ResourceInformation info : infors) {\n+            if (jsonNode.get(info.getName()) !\u003d null) {\n+              nodeResource.setResourceValue(info.getName(),\n+                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n+            }\n+          }\n+          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n         }\n       }\n     } finally {\n       input.close();\n     }\n-    return nodeSet;\n+    return nodeResourceMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n      Resource nmDefaultResource) throws IOException {\n    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n          for (ResourceInformation info : infors) {\n            if (jsonNode.get(info.getName()) !\u003d null) {\n              nodeResource.setResourceValue(info.getName(),\n                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n            }\n          }\n          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeResourceMap;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
          "extendedDetails": {
            "oldValue": "[nodeFile-String]",
            "newValue": "[nodeFile-String, nmDefaultResource-Resource]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8134. Support specifying node resources in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "17/04/18 1:11 PM",
          "commitName": "78860372bd8048168c6aa27a9526c40f5869cf2c",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "27/10/17 2:41 PM",
          "commitNameOld": "99880d0a16727c770da053464da87960c5b02065",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 171.94,
          "commitsBetweenForRepo": 1271,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,31 @@\n-  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n-          throws IOException {\n-    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n+  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n+      Resource nmDefaultResource) throws IOException {\n+    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Reader input \u003d\n         new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n       Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n-          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n+          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n+          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n+          for (ResourceInformation info : infors) {\n+            if (jsonNode.get(info.getName()) !\u003d null) {\n+              nodeResource.setResourceValue(info.getName(),\n+                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n+            }\n+          }\n+          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n         }\n       }\n     } finally {\n       input.close();\n     }\n-    return nodeSet;\n+    return nodeResourceMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n      Resource nmDefaultResource) throws IOException {\n    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n          for (ResourceInformation info : infors) {\n            if (jsonNode.get(info.getName()) !\u003d null) {\n              nodeResource.setResourceValue(info.getName(),\n                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n            }\n          }\n          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeResourceMap;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
          "extendedDetails": {
            "oldValue": "Set\u003cString\u003e",
            "newValue": "Map\u003cString,Resource\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8134. Support specifying node resources in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "17/04/18 1:11 PM",
          "commitName": "78860372bd8048168c6aa27a9526c40f5869cf2c",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "27/10/17 2:41 PM",
          "commitNameOld": "99880d0a16727c770da053464da87960c5b02065",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 171.94,
          "commitsBetweenForRepo": 1271,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,31 @@\n-  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n-          throws IOException {\n-    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n+  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n+      Resource nmDefaultResource) throws IOException {\n+    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Reader input \u003d\n         new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n       Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n-          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n+          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n+          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n+          for (ResourceInformation info : infors) {\n+            if (jsonNode.get(info.getName()) !\u003d null) {\n+              nodeResource.setResourceValue(info.getName(),\n+                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n+            }\n+          }\n+          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n         }\n       }\n     } finally {\n       input.close();\n     }\n-    return nodeSet;\n+    return nodeResourceMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, Resource\u003e parseNodesFromNodeFile(String nodeFile,\n      Resource nmDefaultResource) throws IOException {\n    Map\u003cString, Resource\u003e nodeResourceMap \u003d new HashMap\u003c\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          Resource nodeResource \u003d Resources.clone(nmDefaultResource);\n          ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n          for (ResourceInformation info : infors) {\n            if (jsonNode.get(info.getName()) !\u003d null) {\n              nodeResource.setResourceValue(info.getName(),\n                  Integer.parseInt(jsonNode.get(info.getName()).toString()));\n            }\n          }\n          nodeResourceMap.put(rack + \"/\" + jsonNode.get(\"node\"), nodeResource);\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeResourceMap;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "2cc841f16ec9aa5336495fc20ee781a1276fddc5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13678 Update jackson from 1.9.13 to 2.x in hadoop-tools. Contributed by Akira Ajisaka.\n",
      "commitDate": "06/10/16 8:31 AM",
      "commitName": "2cc841f16ec9aa5336495fc20ee781a1276fddc5",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "26/01/16 6:17 PM",
      "commitNameOld": "4efdf3a979c361348612f817a3253be6d0de58f7",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 253.55,
      "commitsBetweenForRepo": 1765,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n           throws IOException {\n     Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Reader input \u003d\n         new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n-      Iterator\u003cMap\u003e i \u003d mapper.readValues(\n-              jsonF.createJsonParser(input), Map.class);\n+      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n           nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n         }\n       }\n     } finally {\n       input.close();\n     }\n     return nodeSet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n          throws IOException {\n    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(jsonF.createParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeSet;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
      "extendedDetails": {}
    },
    "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11821. Fix findbugs warnings in hadoop-sls. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "30/04/15 3:34 AM",
      "commitName": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/07/14 10:12 AM",
      "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 278.72,
      "commitsBetweenForRepo": 2401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n           throws IOException {\n     Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n     JsonFactory jsonF \u003d new JsonFactory();\n     ObjectMapper mapper \u003d new ObjectMapper();\n-    Reader input \u003d new FileReader(nodeFile);\n+    Reader input \u003d\n+        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n     try {\n       Iterator\u003cMap\u003e i \u003d mapper.readValues(\n               jsonF.createJsonParser(input), Map.class);\n       while (i.hasNext()) {\n         Map jsonE \u003d i.next();\n         String rack \u003d \"/\" + jsonE.get(\"rack\");\n         List tasks \u003d (List) jsonE.get(\"nodes\");\n         for (Object o : tasks) {\n           Map jsonNode \u003d (Map) o;\n           nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n         }\n       }\n     } finally {\n       input.close();\n     }\n     return nodeSet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n          throws IOException {\n    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d\n        new InputStreamReader(new FileInputStream(nodeFile), \"UTF-8\");\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(\n              jsonF.createJsonParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeSet;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,23 @@\n+  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n+          throws IOException {\n+    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n+    JsonFactory jsonF \u003d new JsonFactory();\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    Reader input \u003d new FileReader(nodeFile);\n+    try {\n+      Iterator\u003cMap\u003e i \u003d mapper.readValues(\n+              jsonF.createJsonParser(input), Map.class);\n+      while (i.hasNext()) {\n+        Map jsonE \u003d i.next();\n+        String rack \u003d \"/\" + jsonE.get(\"rack\");\n+        List tasks \u003d (List) jsonE.get(\"nodes\");\n+        for (Object o : tasks) {\n+          Map jsonNode \u003d (Map) o;\n+          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n+        }\n+      }\n+    } finally {\n+      input.close();\n+    }\n+    return nodeSet;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Set\u003cString\u003e parseNodesFromNodeFile(String nodeFile)\n          throws IOException {\n    Set\u003cString\u003e nodeSet \u003d new HashSet\u003cString\u003e();\n    JsonFactory jsonF \u003d new JsonFactory();\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Reader input \u003d new FileReader(nodeFile);\n    try {\n      Iterator\u003cMap\u003e i \u003d mapper.readValues(\n              jsonF.createJsonParser(input), Map.class);\n      while (i.hasNext()) {\n        Map jsonE \u003d i.next();\n        String rack \u003d \"/\" + jsonE.get(\"rack\");\n        List tasks \u003d (List) jsonE.get(\"nodes\");\n        for (Object o : tasks) {\n          Map jsonNode \u003d (Map) o;\n          nodeSet.add(rack + \"/\" + jsonNode.get(\"node\"));\n        }\n      }\n    } finally {\n      input.close();\n    }\n    return nodeSet;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/utils/SLSUtils.java"
    }
  }
}