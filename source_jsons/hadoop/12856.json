{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyRackFaultTolerant.java",
  "functionName": "verifyBlockPlacement",
  "functionId": "verifyBlockPlacement___locs-DatanodeInfo[]__numberOfReplicas-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
  "functionStartLine": 232,
  "functionEndLine": 248,
  "numCommitsSeen": 7,
  "timeTaken": 1956,
  "changeHistory": [
    "e54cc2931262bf49682a8323da9811976218c03b",
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e"
  ],
  "changeHistoryShort": {
    "e54cc2931262bf49682a8323da9811976218c03b": "Ybodychange",
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e54cc2931262bf49682a8323da9811976218c03b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9818. Correctly handle EC reconstruction work caused by not enough racks. Contributed by Jing Zhao.\n",
      "commitDate": "19/02/16 7:02 PM",
      "commitName": "e54cc2931262bf49682a8323da9811976218c03b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/11/15 10:30 AM",
      "commitNameOld": "0e54b164a8d8acf09aca8712116bf7a554cb4846",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 87.36,
      "commitsBetweenForRepo": 548,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   public BlockPlacementStatus verifyBlockPlacement(DatanodeInfo[] locs,\n       int numberOfReplicas) {\n     if (locs \u003d\u003d null)\n       locs \u003d DatanodeDescriptor.EMPTY_ARRAY;\n     if (!clusterMap.hasClusterEverBeenMultiRack()) {\n       // only one rack\n-      return new BlockPlacementStatusDefault(1, 1);\n+      return new BlockPlacementStatusDefault(1, 1, 1);\n     }\n     // 1. Check that all locations are different.\n     // 2. Count locations on different racks.\n-    Set\u003cString\u003e racks \u003d new TreeSet\u003cString\u003e();\n-    for (DatanodeInfo dn : locs)\n+    Set\u003cString\u003e racks \u003d new TreeSet\u003c\u003e();\n+    for (DatanodeInfo dn : locs) {\n       racks.add(dn.getNetworkLocation());\n-    return new BlockPlacementStatusDefault(racks.size(), numberOfReplicas);\n+    }\n+    return new BlockPlacementStatusDefault(racks.size(), numberOfReplicas,\n+        clusterMap.getNumOfRacks());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockPlacementStatus verifyBlockPlacement(DatanodeInfo[] locs,\n      int numberOfReplicas) {\n    if (locs \u003d\u003d null)\n      locs \u003d DatanodeDescriptor.EMPTY_ARRAY;\n    if (!clusterMap.hasClusterEverBeenMultiRack()) {\n      // only one rack\n      return new BlockPlacementStatusDefault(1, 1, 1);\n    }\n    // 1. Check that all locations are different.\n    // 2. Count locations on different racks.\n    Set\u003cString\u003e racks \u003d new TreeSet\u003c\u003e();\n    for (DatanodeInfo dn : locs) {\n      racks.add(dn.getNetworkLocation());\n    }\n    return new BlockPlacementStatusDefault(racks.size(), numberOfReplicas,\n        clusterMap.getNumOfRacks());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
      "extendedDetails": {}
    },
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8647. Abstract BlockManager\u0027s rack policy into BlockPlacementPolicy. (Brahma Reddy Battula via mingma)\n",
      "commitDate": "21/10/15 8:06 AM",
      "commitName": "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
      "commitAuthor": "Ming Ma",
      "diff": "@@ -0,0 +1,15 @@\n+  public BlockPlacementStatus verifyBlockPlacement(DatanodeInfo[] locs,\n+      int numberOfReplicas) {\n+    if (locs \u003d\u003d null)\n+      locs \u003d DatanodeDescriptor.EMPTY_ARRAY;\n+    if (!clusterMap.hasClusterEverBeenMultiRack()) {\n+      // only one rack\n+      return new BlockPlacementStatusDefault(1, 1);\n+    }\n+    // 1. Check that all locations are different.\n+    // 2. Count locations on different racks.\n+    Set\u003cString\u003e racks \u003d new TreeSet\u003cString\u003e();\n+    for (DatanodeInfo dn : locs)\n+      racks.add(dn.getNetworkLocation());\n+    return new BlockPlacementStatusDefault(racks.size(), numberOfReplicas);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockPlacementStatus verifyBlockPlacement(DatanodeInfo[] locs,\n      int numberOfReplicas) {\n    if (locs \u003d\u003d null)\n      locs \u003d DatanodeDescriptor.EMPTY_ARRAY;\n    if (!clusterMap.hasClusterEverBeenMultiRack()) {\n      // only one rack\n      return new BlockPlacementStatusDefault(1, 1);\n    }\n    // 1. Check that all locations are different.\n    // 2. Count locations on different racks.\n    Set\u003cString\u003e racks \u003d new TreeSet\u003cString\u003e();\n    for (DatanodeInfo dn : locs)\n      racks.add(dn.getNetworkLocation());\n    return new BlockPlacementStatusDefault(racks.size(), numberOfReplicas);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java"
    }
  }
}