{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSHAAdmin.java",
  "functionName": "failover",
  "functionId": "failover___cmd-CommandLine",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSHAAdmin.java",
  "functionStartLine": 270,
  "functionEndLine": 326,
  "numCommitsSeen": 70,
  "timeTaken": 3712,
  "changeHistory": [
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
    "7d46a806e71de6692cd230e64e7de18a8252019d",
    "9d5799553fea81920edfab611e5d485a97841848",
    "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
    "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
    "840df19ceecca1be26c572da2afe2f4d5f958b24",
    "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
    "90ea037d21be08821fc9c95b80bec1e1078d79cc",
    "7b913180be9cb8f5aaded964179d6313add2f13f",
    "4324e1bcd78a98e2fb92c81ee959e25b4193da4f",
    "68843484448fcf45e2c48bed2426d9844ee8128c",
    "fb9cdcfa60cb641faded2d3843c81e969ac33147"
  ],
  "changeHistoryShort": {
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76": "Ymultichange(Ymovefromfile,Ybodychange)",
    "7d46a806e71de6692cd230e64e7de18a8252019d": "Ybodychange",
    "9d5799553fea81920edfab611e5d485a97841848": "Ybodychange",
    "41a014c31b3e435354a25d4b7d53f0bd2cede9a1": "Ymultichange(Yparameterchange,Ybodychange)",
    "a4ccb8f504e79802f1b3c69acbcbb00b2343c529": "Ybodychange",
    "840df19ceecca1be26c572da2afe2f4d5f958b24": "Ybodychange",
    "39775dca68643b37a3b9a5ae7bc8eea1418f60d1": "Ybodychange",
    "90ea037d21be08821fc9c95b80bec1e1078d79cc": "Ybodychange",
    "7b913180be9cb8f5aaded964179d6313add2f13f": "Ybodychange",
    "4324e1bcd78a98e2fb92c81ee959e25b4193da4f": "Ybodychange",
    "68843484448fcf45e2c48bed2426d9844ee8128c": "Ybodychange",
    "fb9cdcfa60cb641faded2d3843c81e969ac33147": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-16753. Refactor HAAdmin. Contributed by Xieming Li.\n",
      "commitDate": "20/01/20 5:58 PM",
      "commitName": "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-16753. Refactor HAAdmin. Contributed by Xieming Li.\n",
          "commitDate": "20/01/20 5:58 PM",
          "commitName": "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "20/01/20 8:23 AM",
          "commitNameOld": "6a859d33aa77260a4329035066c7c63c02df0fcd",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private int failover(CommandLine cmd)\n       throws IOException, ServiceFailedException {\n     boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n     boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 3 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n-      printUsage(errOut, \"-failover\");\n+      printUsage(errOut, \"-failover\", USAGE_DFS_MERGED);\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n-    \n+\n     // Check that auto-failover is consistently configured for both nodes.\n     Preconditions.checkState(\n         fromNode.isAutoFailoverEnabled() \u003d\u003d\n-          toNode.isAutoFailoverEnabled(),\n-          \"Inconsistent auto-failover configs between %s and %s!\",\n-          fromNode, toNode);\n-    \n+            toNode.isAutoFailoverEnabled(),\n+        \"Inconsistent auto-failover configs between %s and %s!\",\n+        fromNode, toNode);\n+\n     if (fromNode.isAutoFailoverEnabled()) {\n       if (forceFence || forceActive) {\n         // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n         // is not healthy, then its ZKFC will immediately quit the election\n         // again the next time a health check runs.\n         //\n         // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n         // so it isn\u0027t implemented.\n         errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n             \"supported with auto-failover enabled.\");\n         return -1;\n       }\n       try {\n         return gracefulFailoverThroughZKFCs(toNode);\n       } catch (UnsupportedOperationException e){\n         errOut.println(\"Failover command is not supported with \" +\n             \"auto-failover enabled: \" + e.getLocalizedMessage());\n         return -1;\n       }\n     }\n-    \n-    FailoverController fc \u003d new FailoverController(getConf(),\n-        requestSource);\n-    \n+\n+    FailoverController fc \u003d\n+        new FailoverController(getConf(), getRequestSource());\n+\n     try {\n-      fc.failover(fromNode, toNode, forceFence, forceActive); \n+      fc.failover(fromNode, toNode, forceFence, forceActive);\n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int failover(CommandLine cmd)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n\n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 3 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\", USAGE_DFS_MERGED);\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n\n    // Check that auto-failover is consistently configured for both nodes.\n    Preconditions.checkState(\n        fromNode.isAutoFailoverEnabled() \u003d\u003d\n            toNode.isAutoFailoverEnabled(),\n        \"Inconsistent auto-failover configs between %s and %s!\",\n        fromNode, toNode);\n\n    if (fromNode.isAutoFailoverEnabled()) {\n      if (forceFence || forceActive) {\n        // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n        // is not healthy, then its ZKFC will immediately quit the election\n        // again the next time a health check runs.\n        //\n        // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n        // so it isn\u0027t implemented.\n        errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n            \"supported with auto-failover enabled.\");\n        return -1;\n      }\n      try {\n        return gracefulFailoverThroughZKFCs(toNode);\n      } catch (UnsupportedOperationException e){\n        errOut.println(\"Failover command is not supported with \" +\n            \"auto-failover enabled: \" + e.getLocalizedMessage());\n        return -1;\n      }\n    }\n\n    FailoverController fc \u003d\n        new FailoverController(getConf(), getRequestSource());\n\n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive);\n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSHAAdmin.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSHAAdmin.java",
            "oldMethodName": "failover",
            "newMethodName": "failover"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16753. Refactor HAAdmin. Contributed by Xieming Li.\n",
          "commitDate": "20/01/20 5:58 PM",
          "commitName": "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "20/01/20 8:23 AM",
          "commitNameOld": "6a859d33aa77260a4329035066c7c63c02df0fcd",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private int failover(CommandLine cmd)\n       throws IOException, ServiceFailedException {\n     boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n     boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 3 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n-      printUsage(errOut, \"-failover\");\n+      printUsage(errOut, \"-failover\", USAGE_DFS_MERGED);\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n-    \n+\n     // Check that auto-failover is consistently configured for both nodes.\n     Preconditions.checkState(\n         fromNode.isAutoFailoverEnabled() \u003d\u003d\n-          toNode.isAutoFailoverEnabled(),\n-          \"Inconsistent auto-failover configs between %s and %s!\",\n-          fromNode, toNode);\n-    \n+            toNode.isAutoFailoverEnabled(),\n+        \"Inconsistent auto-failover configs between %s and %s!\",\n+        fromNode, toNode);\n+\n     if (fromNode.isAutoFailoverEnabled()) {\n       if (forceFence || forceActive) {\n         // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n         // is not healthy, then its ZKFC will immediately quit the election\n         // again the next time a health check runs.\n         //\n         // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n         // so it isn\u0027t implemented.\n         errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n             \"supported with auto-failover enabled.\");\n         return -1;\n       }\n       try {\n         return gracefulFailoverThroughZKFCs(toNode);\n       } catch (UnsupportedOperationException e){\n         errOut.println(\"Failover command is not supported with \" +\n             \"auto-failover enabled: \" + e.getLocalizedMessage());\n         return -1;\n       }\n     }\n-    \n-    FailoverController fc \u003d new FailoverController(getConf(),\n-        requestSource);\n-    \n+\n+    FailoverController fc \u003d\n+        new FailoverController(getConf(), getRequestSource());\n+\n     try {\n-      fc.failover(fromNode, toNode, forceFence, forceActive); \n+      fc.failover(fromNode, toNode, forceFence, forceActive);\n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int failover(CommandLine cmd)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n\n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 3 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\", USAGE_DFS_MERGED);\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n\n    // Check that auto-failover is consistently configured for both nodes.\n    Preconditions.checkState(\n        fromNode.isAutoFailoverEnabled() \u003d\u003d\n            toNode.isAutoFailoverEnabled(),\n        \"Inconsistent auto-failover configs between %s and %s!\",\n        fromNode, toNode);\n\n    if (fromNode.isAutoFailoverEnabled()) {\n      if (forceFence || forceActive) {\n        // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n        // is not healthy, then its ZKFC will immediately quit the election\n        // again the next time a health check runs.\n        //\n        // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n        // so it isn\u0027t implemented.\n        errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n            \"supported with auto-failover enabled.\");\n        return -1;\n      }\n      try {\n        return gracefulFailoverThroughZKFCs(toNode);\n      } catch (UnsupportedOperationException e){\n        errOut.println(\"Failover command is not supported with \" +\n            \"auto-failover enabled: \" + e.getLocalizedMessage());\n        return -1;\n      }\n    }\n\n    FailoverController fc \u003d\n        new FailoverController(getConf(), getRequestSource());\n\n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive);\n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSHAAdmin.java",
          "extendedDetails": {}
        }
      ]
    },
    "7d46a806e71de6692cd230e64e7de18a8252019d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3006. Improve the error message when attempting manual failover with auto-failover enabled. (Akira AJISAKA via wangda)\n",
      "commitDate": "01/05/15 4:40 PM",
      "commitName": "7d46a806e71de6692cd230e64e7de18a8252019d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/02/15 9:39 PM",
      "commitNameOld": "253035491ce208a8c9b50a20da91f5b8e679eebf",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 77.75,
      "commitsBetweenForRepo": 670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,57 @@\n   private int failover(CommandLine cmd)\n       throws IOException, ServiceFailedException {\n     boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n     boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 3 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n     \n     // Check that auto-failover is consistently configured for both nodes.\n     Preconditions.checkState(\n         fromNode.isAutoFailoverEnabled() \u003d\u003d\n           toNode.isAutoFailoverEnabled(),\n           \"Inconsistent auto-failover configs between %s and %s!\",\n           fromNode, toNode);\n     \n     if (fromNode.isAutoFailoverEnabled()) {\n       if (forceFence || forceActive) {\n         // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n         // is not healthy, then its ZKFC will immediately quit the election\n         // again the next time a health check runs.\n         //\n         // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n         // so it isn\u0027t implemented.\n         errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n             \"supported with auto-failover enabled.\");\n         return -1;\n       }\n-      return gracefulFailoverThroughZKFCs(toNode);\n+      try {\n+        return gracefulFailoverThroughZKFCs(toNode);\n+      } catch (UnsupportedOperationException e){\n+        errOut.println(\"Failover command is not supported with \" +\n+            \"auto-failover enabled: \" + e.getLocalizedMessage());\n+        return -1;\n+      }\n     }\n     \n     FailoverController fc \u003d new FailoverController(getConf(),\n         requestSource);\n     \n     try {\n       fc.failover(fromNode, toNode, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(CommandLine cmd)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n\n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 3 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    // Check that auto-failover is consistently configured for both nodes.\n    Preconditions.checkState(\n        fromNode.isAutoFailoverEnabled() \u003d\u003d\n          toNode.isAutoFailoverEnabled(),\n          \"Inconsistent auto-failover configs between %s and %s!\",\n          fromNode, toNode);\n    \n    if (fromNode.isAutoFailoverEnabled()) {\n      if (forceFence || forceActive) {\n        // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n        // is not healthy, then its ZKFC will immediately quit the election\n        // again the next time a health check runs.\n        //\n        // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n        // so it isn\u0027t implemented.\n        errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n            \"supported with auto-failover enabled.\");\n        return -1;\n      }\n      try {\n        return gracefulFailoverThroughZKFCs(toNode);\n      } catch (UnsupportedOperationException e){\n        errOut.println(\"Failover command is not supported with \" +\n            \"auto-failover enabled: \" + e.getLocalizedMessage());\n        return -1;\n      }\n    }\n    \n    FailoverController fc \u003d new FailoverController(getConf(),\n        requestSource);\n    \n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "9d5799553fea81920edfab611e5d485a97841848": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8279. Allow manual failover to be invoked when auto-failover is enabled. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1333288 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/05/12 6:56 PM",
      "commitName": "9d5799553fea81920edfab611e5d485a97841848",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "10/04/12 10:40 PM",
      "commitNameOld": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 21.84,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,51 @@\n   private int failover(CommandLine cmd)\n       throws IOException, ServiceFailedException {\n     boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n     boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 3 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n     \n-    if (!checkManualStateManagementOK(fromNode) ||\n-        !checkManualStateManagementOK(toNode)) {\n-      return -1;\n+    // Check that auto-failover is consistently configured for both nodes.\n+    Preconditions.checkState(\n+        fromNode.isAutoFailoverEnabled() \u003d\u003d\n+          toNode.isAutoFailoverEnabled(),\n+          \"Inconsistent auto-failover configs between %s and %s!\",\n+          fromNode, toNode);\n+    \n+    if (fromNode.isAutoFailoverEnabled()) {\n+      if (forceFence || forceActive) {\n+        // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n+        // is not healthy, then its ZKFC will immediately quit the election\n+        // again the next time a health check runs.\n+        //\n+        // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n+        // so it isn\u0027t implemented.\n+        errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n+            \"supported with auto-failover enabled.\");\n+        return -1;\n+      }\n+      return gracefulFailoverThroughZKFCs(toNode);\n     }\n     \n     FailoverController fc \u003d new FailoverController(getConf(),\n         requestSource);\n     \n     try {\n       fc.failover(fromNode, toNode, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(CommandLine cmd)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n\n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 3 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    // Check that auto-failover is consistently configured for both nodes.\n    Preconditions.checkState(\n        fromNode.isAutoFailoverEnabled() \u003d\u003d\n          toNode.isAutoFailoverEnabled(),\n          \"Inconsistent auto-failover configs between %s and %s!\",\n          fromNode, toNode);\n    \n    if (fromNode.isAutoFailoverEnabled()) {\n      if (forceFence || forceActive) {\n        // -forceActive doesn\u0027t make sense with auto-HA, since, if the node\n        // is not healthy, then its ZKFC will immediately quit the election\n        // again the next time a health check runs.\n        //\n        // -forceFence doesn\u0027t seem to have any real use cases with auto-HA\n        // so it isn\u0027t implemented.\n        errOut.println(FORCEFENCE + \" and \" + FORCEACTIVE + \" flags not \" +\n            \"supported with auto-failover enabled.\");\n        return -1;\n      }\n      return gracefulFailoverThroughZKFCs(toNode);\n    }\n    \n    FailoverController fc \u003d new FailoverController(getConf(),\n        requestSource);\n    \n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "41a014c31b3e435354a25d4b7d53f0bd2cede9a1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8247. Add a config to enable auto-HA, which disables manual FailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1324566 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 10:40 PM",
      "commitName": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8247. Add a config to enable auto-HA, which disables manual FailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1324566 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/12 10:40 PM",
          "commitName": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "03/04/12 1:41 PM",
          "commitNameOld": "84ff2d6d066ee7d854dfcb93bb85df7b98a3d761",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 7.37,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,34 @@\n-  private int failover(final String[] argv)\n+  private int failover(CommandLine cmd)\n       throws IOException, ServiceFailedException {\n-    boolean forceFence \u003d false;\n-    boolean forceActive \u003d false;\n+    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n+    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n \n-    Options failoverOpts \u003d new Options();\n-    // \"-failover\" isn\u0027t really an option but we need to add\n-    // it to appease CommandLineParser\n-    failoverOpts.addOption(\"failover\", false, \"failover\");\n-    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n-    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n-\n-    CommandLineParser parser \u003d new GnuParser();\n-    CommandLine cmd;\n-\n-    try {\n-      cmd \u003d parser.parse(failoverOpts, argv);\n-      forceFence \u003d cmd.hasOption(FORCEFENCE);\n-      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n-    } catch (ParseException pe) {\n-      errOut.println(\"failover: incorrect arguments\");\n-      printUsage(errOut, \"-failover\");\n-      return -1;\n-    }\n-    \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n-    if (numOpts \u003e 2 || args.length !\u003d 2) {\n+    if (numOpts \u003e 3 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n     \n-    FailoverController fc \u003d new FailoverController(getConf());\n+    if (!checkManualStateManagementOK(fromNode) ||\n+        !checkManualStateManagementOK(toNode)) {\n+      return -1;\n+    }\n+    \n+    FailoverController fc \u003d new FailoverController(getConf(),\n+        requestSource);\n     \n     try {\n       fc.failover(fromNode, toNode, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int failover(CommandLine cmd)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n\n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 3 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    if (!checkManualStateManagementOK(fromNode) ||\n        !checkManualStateManagementOK(toNode)) {\n      return -1;\n    }\n    \n    FailoverController fc \u003d new FailoverController(getConf(),\n        requestSource);\n    \n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
          "extendedDetails": {
            "oldValue": "[argv-String[](modifiers-final)]",
            "newValue": "[cmd-CommandLine]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8247. Add a config to enable auto-HA, which disables manual FailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1324566 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/12 10:40 PM",
          "commitName": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "03/04/12 1:41 PM",
          "commitNameOld": "84ff2d6d066ee7d854dfcb93bb85df7b98a3d761",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 7.37,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,34 @@\n-  private int failover(final String[] argv)\n+  private int failover(CommandLine cmd)\n       throws IOException, ServiceFailedException {\n-    boolean forceFence \u003d false;\n-    boolean forceActive \u003d false;\n+    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n+    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n \n-    Options failoverOpts \u003d new Options();\n-    // \"-failover\" isn\u0027t really an option but we need to add\n-    // it to appease CommandLineParser\n-    failoverOpts.addOption(\"failover\", false, \"failover\");\n-    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n-    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n-\n-    CommandLineParser parser \u003d new GnuParser();\n-    CommandLine cmd;\n-\n-    try {\n-      cmd \u003d parser.parse(failoverOpts, argv);\n-      forceFence \u003d cmd.hasOption(FORCEFENCE);\n-      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n-    } catch (ParseException pe) {\n-      errOut.println(\"failover: incorrect arguments\");\n-      printUsage(errOut, \"-failover\");\n-      return -1;\n-    }\n-    \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n-    if (numOpts \u003e 2 || args.length !\u003d 2) {\n+    if (numOpts \u003e 3 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n     \n-    FailoverController fc \u003d new FailoverController(getConf());\n+    if (!checkManualStateManagementOK(fromNode) ||\n+        !checkManualStateManagementOK(toNode)) {\n+      return -1;\n+    }\n+    \n+    FailoverController fc \u003d new FailoverController(getConf(),\n+        requestSource);\n     \n     try {\n       fc.failover(fromNode, toNode, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int failover(CommandLine cmd)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d cmd.hasOption(FORCEFENCE);\n    boolean forceActive \u003d cmd.hasOption(FORCEACTIVE);\n\n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 3 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    if (!checkManualStateManagementOK(fromNode) ||\n        !checkManualStateManagementOK(toNode)) {\n      return -1;\n    }\n    \n    FailoverController fc \u003d new FailoverController(getConf(),\n        requestSource);\n    \n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
          "extendedDetails": {}
        }
      ]
    },
    "a4ccb8f504e79802f1b3c69acbcbb00b2343c529": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8236. haadmin should have configurable timeouts for failover commands. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308235 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/12 8:48 PM",
      "commitName": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/03/12 6:54 PM",
      "commitNameOld": "840df19ceecca1be26c572da2afe2f4d5f958b24",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 7.08,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n     boolean forceFence \u003d false;\n     boolean forceActive \u003d false;\n \n     Options failoverOpts \u003d new Options();\n     // \"-failover\" isn\u0027t really an option but we need to add\n     // it to appease CommandLineParser\n     failoverOpts.addOption(\"failover\", false, \"failover\");\n     failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n     failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n \n     CommandLineParser parser \u003d new GnuParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(failoverOpts, argv);\n       forceFence \u003d cmd.hasOption(FORCEFENCE);\n       forceActive \u003d cmd.hasOption(FORCEACTIVE);\n     } catch (ParseException pe) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n     \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 2 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n     HAServiceTarget toNode \u003d resolveTarget(args[1]);\n     \n+    FailoverController fc \u003d new FailoverController(getConf());\n+    \n     try {\n-      FailoverController.failover(fromNode, toNode,\n-          forceFence, forceActive); \n+      fc.failover(fromNode, toNode, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d false;\n    boolean forceActive \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    FailoverController fc \u003d new FailoverController(getConf());\n    \n    try {\n      fc.failover(fromNode, toNode, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "840df19ceecca1be26c572da2afe2f4d5f958b24": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305195 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/12 6:54 PM",
      "commitName": "840df19ceecca1be26c572da2afe2f4d5f958b24",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/03/12 2:38 PM",
      "commitNameOld": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,47 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n-    Configuration conf \u003d getConf();\n     boolean forceFence \u003d false;\n     boolean forceActive \u003d false;\n \n     Options failoverOpts \u003d new Options();\n     // \"-failover\" isn\u0027t really an option but we need to add\n     // it to appease CommandLineParser\n     failoverOpts.addOption(\"failover\", false, \"failover\");\n     failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n     failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n \n     CommandLineParser parser \u003d new GnuParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(failoverOpts, argv);\n       forceFence \u003d cmd.hasOption(FORCEFENCE);\n       forceActive \u003d cmd.hasOption(FORCEACTIVE);\n     } catch (ParseException pe) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n     \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 2 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n-    NodeFencer fencer;\n+    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n+    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n+    \n     try {\n-      fencer \u003d NodeFencer.create(conf);\n-    } catch (BadFencingConfigurationException bfce) {\n-      errOut.println(\"failover: incorrect fencing configuration: \" + \n-          bfce.getLocalizedMessage());\n-      return -1;\n-    }\n-    if (fencer \u003d\u003d null) {\n-      errOut.println(\"failover: no fencer configured\");\n-      return -1;\n-    }\n-\n-    InetSocketAddress addr1 \u003d \n-      NetUtils.createSocketAddr(getServiceAddr(args[0]));\n-    InetSocketAddress addr2 \u003d \n-      NetUtils.createSocketAddr(getServiceAddr(args[1]));\n-    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n-    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n-\n-    try {\n-      FailoverController.failover(proto1, addr1, proto2, addr2,\n-          fencer, forceFence, forceActive); \n+      FailoverController.failover(fromNode, toNode,\n+          forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d false;\n    boolean forceActive \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    try {\n      FailoverController.failover(fromNode, toNode,\n          forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "39775dca68643b37a3b9a5ae7bc8eea1418f60d1": {
      "type": "Ybodychange",
      "commitMessage": "Revert HADOOP-8193 from r1304967. Patch introduced some NPEs in a test case.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305152 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/12 2:38 PM",
      "commitName": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/03/12 4:48 PM",
      "commitNameOld": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,65 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n+    Configuration conf \u003d getConf();\n     boolean forceFence \u003d false;\n     boolean forceActive \u003d false;\n \n     Options failoverOpts \u003d new Options();\n     // \"-failover\" isn\u0027t really an option but we need to add\n     // it to appease CommandLineParser\n     failoverOpts.addOption(\"failover\", false, \"failover\");\n     failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n     failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n \n     CommandLineParser parser \u003d new GnuParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(failoverOpts, argv);\n       forceFence \u003d cmd.hasOption(FORCEFENCE);\n       forceActive \u003d cmd.hasOption(FORCEACTIVE);\n     } catch (ParseException pe) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n     \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 2 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n-    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n-    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n-    \n+    NodeFencer fencer;\n     try {\n-      FailoverController.failover(fromNode, toNode,\n-          forceFence, forceActive); \n+      fencer \u003d NodeFencer.create(conf);\n+    } catch (BadFencingConfigurationException bfce) {\n+      errOut.println(\"failover: incorrect fencing configuration: \" + \n+          bfce.getLocalizedMessage());\n+      return -1;\n+    }\n+    if (fencer \u003d\u003d null) {\n+      errOut.println(\"failover: no fencer configured\");\n+      return -1;\n+    }\n+\n+    InetSocketAddress addr1 \u003d \n+      NetUtils.createSocketAddr(getServiceAddr(args[0]));\n+    InetSocketAddress addr2 \u003d \n+      NetUtils.createSocketAddr(getServiceAddr(args[1]));\n+    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n+    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n+\n+    try {\n+      FailoverController.failover(proto1, addr1, proto2, addr2,\n+          fencer, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    Configuration conf \u003d getConf();\n    boolean forceFence \u003d false;\n    boolean forceActive \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    NodeFencer fencer;\n    try {\n      fencer \u003d NodeFencer.create(conf);\n    } catch (BadFencingConfigurationException bfce) {\n      errOut.println(\"failover: incorrect fencing configuration: \" + \n          bfce.getLocalizedMessage());\n      return -1;\n    }\n    if (fencer \u003d\u003d null) {\n      errOut.println(\"failover: no fencer configured\");\n      return -1;\n    }\n\n    InetSocketAddress addr1 \u003d \n      NetUtils.createSocketAddr(getServiceAddr(args[0]));\n    InetSocketAddress addr2 \u003d \n      NetUtils.createSocketAddr(getServiceAddr(args[1]));\n    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n\n    try {\n      FailoverController.failover(proto1, addr1, proto2, addr2,\n          fencer, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "90ea037d21be08821fc9c95b80bec1e1078d79cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304967 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/12 4:48 PM",
      "commitName": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "22/03/12 11:29 PM",
      "commitNameOld": "b795c65f4929330972c07ec2d5d7ce987c5c2316",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,47 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n-    Configuration conf \u003d getConf();\n     boolean forceFence \u003d false;\n     boolean forceActive \u003d false;\n \n     Options failoverOpts \u003d new Options();\n     // \"-failover\" isn\u0027t really an option but we need to add\n     // it to appease CommandLineParser\n     failoverOpts.addOption(\"failover\", false, \"failover\");\n     failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n     failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n \n     CommandLineParser parser \u003d new GnuParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(failoverOpts, argv);\n       forceFence \u003d cmd.hasOption(FORCEFENCE);\n       forceActive \u003d cmd.hasOption(FORCEACTIVE);\n     } catch (ParseException pe) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n     \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 2 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n-    NodeFencer fencer;\n+    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n+    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n+    \n     try {\n-      fencer \u003d NodeFencer.create(conf);\n-    } catch (BadFencingConfigurationException bfce) {\n-      errOut.println(\"failover: incorrect fencing configuration: \" + \n-          bfce.getLocalizedMessage());\n-      return -1;\n-    }\n-    if (fencer \u003d\u003d null) {\n-      errOut.println(\"failover: no fencer configured\");\n-      return -1;\n-    }\n-\n-    InetSocketAddress addr1 \u003d \n-      NetUtils.createSocketAddr(getServiceAddr(args[0]));\n-    InetSocketAddress addr2 \u003d \n-      NetUtils.createSocketAddr(getServiceAddr(args[1]));\n-    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n-    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n-\n-    try {\n-      FailoverController.failover(proto1, addr1, proto2, addr2,\n-          fencer, forceFence, forceActive); \n+      FailoverController.failover(fromNode, toNode,\n+          forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    boolean forceFence \u003d false;\n    boolean forceActive \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceTarget fromNode \u003d resolveTarget(args[0]);\n    HAServiceTarget toNode \u003d resolveTarget(args[1]);\n    \n    try {\n      FailoverController.failover(fromNode, toNode,\n          forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "7b913180be9cb8f5aaded964179d6313add2f13f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2808. HA: haadmin should use namenode ids. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/12 12:12 PM",
      "commitName": "7b913180be9cb8f5aaded964179d6313add2f13f",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/02/12 11:20 AM",
      "commitNameOld": "4324e1bcd78a98e2fb92c81ee959e25b4193da4f",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,65 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n     Configuration conf \u003d getConf();\n     boolean forceFence \u003d false;\n     boolean forceActive \u003d false;\n \n     Options failoverOpts \u003d new Options();\n     // \"-failover\" isn\u0027t really an option but we need to add\n     // it to appease CommandLineParser\n     failoverOpts.addOption(\"failover\", false, \"failover\");\n     failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n     failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n \n     CommandLineParser parser \u003d new GnuParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(failoverOpts, argv);\n       forceFence \u003d cmd.hasOption(FORCEFENCE);\n       forceActive \u003d cmd.hasOption(FORCEACTIVE);\n     } catch (ParseException pe) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n     \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 2 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     NodeFencer fencer;\n     try {\n       fencer \u003d NodeFencer.create(conf);\n     } catch (BadFencingConfigurationException bfce) {\n       errOut.println(\"failover: incorrect fencing configuration: \" + \n           bfce.getLocalizedMessage());\n       return -1;\n     }\n     if (fencer \u003d\u003d null) {\n       errOut.println(\"failover: no fencer configured\");\n       return -1;\n     }\n \n-    InetSocketAddress addr1 \u003d NetUtils.createSocketAddr(args[0]);\n-    InetSocketAddress addr2 \u003d NetUtils.createSocketAddr(args[1]);\n+    InetSocketAddress addr1 \u003d \n+      NetUtils.createSocketAddr(getServiceAddr(args[0]));\n+    InetSocketAddress addr2 \u003d \n+      NetUtils.createSocketAddr(getServiceAddr(args[1]));\n     HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n     HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n \n     try {\n       FailoverController.failover(proto1, addr1, proto2, addr2,\n           fencer, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    Configuration conf \u003d getConf();\n    boolean forceFence \u003d false;\n    boolean forceActive \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    NodeFencer fencer;\n    try {\n      fencer \u003d NodeFencer.create(conf);\n    } catch (BadFencingConfigurationException bfce) {\n      errOut.println(\"failover: incorrect fencing configuration: \" + \n          bfce.getLocalizedMessage());\n      return -1;\n    }\n    if (fencer \u003d\u003d null) {\n      errOut.println(\"failover: no fencer configured\");\n      return -1;\n    }\n\n    InetSocketAddress addr1 \u003d \n      NetUtils.createSocketAddr(getServiceAddr(args[0]));\n    InetSocketAddress addr2 \u003d \n      NetUtils.createSocketAddr(getServiceAddr(args[1]));\n    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n\n    try {\n      FailoverController.failover(proto1, addr1, proto2, addr2,\n          fencer, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "4324e1bcd78a98e2fb92c81ee959e25b4193da4f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7991. HA: the FailoverController should check the standby is ready before failing over. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1239774 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 11:20 AM",
      "commitName": "4324e1bcd78a98e2fb92c81ee959e25b4193da4f",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "30/01/12 2:42 PM",
      "commitNameOld": "68843484448fcf45e2c48bed2426d9844ee8128c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 2.86,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,63 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n     Configuration conf \u003d getConf();\n     boolean forceFence \u003d false;\n+    boolean forceActive \u003d false;\n \n     Options failoverOpts \u003d new Options();\n     // \"-failover\" isn\u0027t really an option but we need to add\n     // it to appease CommandLineParser\n     failoverOpts.addOption(\"failover\", false, \"failover\");\n     failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n+    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n \n     CommandLineParser parser \u003d new GnuParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(failoverOpts, argv);\n       forceFence \u003d cmd.hasOption(FORCEFENCE);\n+      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n     } catch (ParseException pe) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n     \n     int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n     final String[] args \u003d cmd.getArgs();\n \n     if (numOpts \u003e 2 || args.length !\u003d 2) {\n       errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n     NodeFencer fencer;\n     try {\n       fencer \u003d NodeFencer.create(conf);\n     } catch (BadFencingConfigurationException bfce) {\n       errOut.println(\"failover: incorrect fencing configuration: \" + \n           bfce.getLocalizedMessage());\n       return -1;\n     }\n     if (fencer \u003d\u003d null) {\n       errOut.println(\"failover: no fencer configured\");\n       return -1;\n     }\n \n     InetSocketAddress addr1 \u003d NetUtils.createSocketAddr(args[0]);\n     InetSocketAddress addr2 \u003d NetUtils.createSocketAddr(args[1]);\n     HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n     HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n \n     try {\n       FailoverController.failover(proto1, addr1, proto2, addr2,\n-          fencer, forceFence); \n+          fencer, forceFence, forceActive); \n       out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    Configuration conf \u003d getConf();\n    boolean forceFence \u003d false;\n    boolean forceActive \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n    failoverOpts.addOption(FORCEACTIVE, false, \"force failover\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n      forceActive \u003d cmd.hasOption(FORCEACTIVE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    NodeFencer fencer;\n    try {\n      fencer \u003d NodeFencer.create(conf);\n    } catch (BadFencingConfigurationException bfce) {\n      errOut.println(\"failover: incorrect fencing configuration: \" + \n          bfce.getLocalizedMessage());\n      return -1;\n    }\n    if (fencer \u003d\u003d null) {\n      errOut.println(\"failover: no fencer configured\");\n      return -1;\n    }\n\n    InetSocketAddress addr1 \u003d NetUtils.createSocketAddr(args[0]);\n    InetSocketAddress addr2 \u003d NetUtils.createSocketAddr(args[1]);\n    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n\n    try {\n      FailoverController.failover(proto1, addr1, proto2, addr2,\n          fencer, forceFence, forceActive); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "68843484448fcf45e2c48bed2426d9844ee8128c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7938. HA: the FailoverController should optionally fence the active during failover. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238058 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 2:42 PM",
      "commitName": "68843484448fcf45e2c48bed2426d9844ee8128c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "29/01/12 6:52 PM",
      "commitNameOld": "6122357da51bc447391a464a8f7b4de1bae2d8cf",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,60 @@\n   private int failover(final String[] argv)\n       throws IOException, ServiceFailedException {\n-    if (argv.length !\u003d 3) {\n-      errOut.println(\"failover: incorrect number of arguments\");\n+    Configuration conf \u003d getConf();\n+    boolean forceFence \u003d false;\n+\n+    Options failoverOpts \u003d new Options();\n+    // \"-failover\" isn\u0027t really an option but we need to add\n+    // it to appease CommandLineParser\n+    failoverOpts.addOption(\"failover\", false, \"failover\");\n+    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n+\n+    CommandLineParser parser \u003d new GnuParser();\n+    CommandLine cmd;\n+\n+    try {\n+      cmd \u003d parser.parse(failoverOpts, argv);\n+      forceFence \u003d cmd.hasOption(FORCEFENCE);\n+    } catch (ParseException pe) {\n+      errOut.println(\"failover: incorrect arguments\");\n+      printUsage(errOut, \"-failover\");\n+      return -1;\n+    }\n+    \n+    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n+    final String[] args \u003d cmd.getArgs();\n+\n+    if (numOpts \u003e 2 || args.length !\u003d 2) {\n+      errOut.println(\"failover: incorrect arguments\");\n       printUsage(errOut, \"-failover\");\n       return -1;\n     }\n \n-    HAServiceProtocol proto1 \u003d getProtocol(argv[1]);\n-    HAServiceProtocol proto2 \u003d getProtocol(argv[2]);\n+    NodeFencer fencer;\n     try {\n-      FailoverController.failover(proto1, argv[1], proto2, argv[2]);\n-      out.println(\"Failover from \"+argv[1]+\" to \"+argv[2]+\" successful\");\n+      fencer \u003d NodeFencer.create(conf);\n+    } catch (BadFencingConfigurationException bfce) {\n+      errOut.println(\"failover: incorrect fencing configuration: \" + \n+          bfce.getLocalizedMessage());\n+      return -1;\n+    }\n+    if (fencer \u003d\u003d null) {\n+      errOut.println(\"failover: no fencer configured\");\n+      return -1;\n+    }\n+\n+    InetSocketAddress addr1 \u003d NetUtils.createSocketAddr(args[0]);\n+    InetSocketAddress addr2 \u003d NetUtils.createSocketAddr(args[1]);\n+    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n+    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n+\n+    try {\n+      FailoverController.failover(proto1, addr1, proto2, addr2,\n+          fencer, forceFence); \n+      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n     } catch (FailoverFailedException ffe) {\n       errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n-      return 1;\n+      return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    Configuration conf \u003d getConf();\n    boolean forceFence \u003d false;\n\n    Options failoverOpts \u003d new Options();\n    // \"-failover\" isn\u0027t really an option but we need to add\n    // it to appease CommandLineParser\n    failoverOpts.addOption(\"failover\", false, \"failover\");\n    failoverOpts.addOption(FORCEFENCE, false, \"force fencing\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(failoverOpts, argv);\n      forceFence \u003d cmd.hasOption(FORCEFENCE);\n    } catch (ParseException pe) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n    \n    int numOpts \u003d cmd.getOptions() \u003d\u003d null ? 0 : cmd.getOptions().length;\n    final String[] args \u003d cmd.getArgs();\n\n    if (numOpts \u003e 2 || args.length !\u003d 2) {\n      errOut.println(\"failover: incorrect arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    NodeFencer fencer;\n    try {\n      fencer \u003d NodeFencer.create(conf);\n    } catch (BadFencingConfigurationException bfce) {\n      errOut.println(\"failover: incorrect fencing configuration: \" + \n          bfce.getLocalizedMessage());\n      return -1;\n    }\n    if (fencer \u003d\u003d null) {\n      errOut.println(\"failover: no fencer configured\");\n      return -1;\n    }\n\n    InetSocketAddress addr1 \u003d NetUtils.createSocketAddr(args[0]);\n    InetSocketAddress addr2 \u003d NetUtils.createSocketAddr(args[1]);\n    HAServiceProtocol proto1 \u003d getProtocol(args[0]);\n    HAServiceProtocol proto2 \u003d getProtocol(args[1]);\n\n    try {\n      FailoverController.failover(proto1, addr1, proto2, addr2,\n          fencer, forceFence); \n      out.println(\"Failover from \"+args[0]+\" to \"+args[1]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "fb9cdcfa60cb641faded2d3843c81e969ac33147": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7924. \u2029FailoverController for client-based configuration. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227836 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 1:02 PM",
      "commitName": "fb9cdcfa60cb641faded2d3843c81e969ac33147",
      "commitAuthor": "Eli Collins",
      "diff": "@@ -0,0 +1,19 @@\n+  private int failover(final String[] argv)\n+      throws IOException, ServiceFailedException {\n+    if (argv.length !\u003d 3) {\n+      errOut.println(\"failover: incorrect number of arguments\");\n+      printUsage(errOut, \"-failover\");\n+      return -1;\n+    }\n+\n+    HAServiceProtocol proto1 \u003d getProtocol(argv[1]);\n+    HAServiceProtocol proto2 \u003d getProtocol(argv[2]);\n+    try {\n+      FailoverController.failover(proto1, argv[1], proto2, argv[2]);\n+      out.println(\"Failover from \"+argv[1]+\" to \"+argv[2]+\" successful\");\n+    } catch (FailoverFailedException ffe) {\n+      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n+      return 1;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int failover(final String[] argv)\n      throws IOException, ServiceFailedException {\n    if (argv.length !\u003d 3) {\n      errOut.println(\"failover: incorrect number of arguments\");\n      printUsage(errOut, \"-failover\");\n      return -1;\n    }\n\n    HAServiceProtocol proto1 \u003d getProtocol(argv[1]);\n    HAServiceProtocol proto2 \u003d getProtocol(argv[2]);\n    try {\n      FailoverController.failover(proto1, argv[1], proto2, argv[2]);\n      out.println(\"Failover from \"+argv[1]+\" to \"+argv[2]+\" successful\");\n    } catch (FailoverFailedException ffe) {\n      errOut.println(\"Failover failed: \" + ffe.getLocalizedMessage());\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java"
    }
  }
}