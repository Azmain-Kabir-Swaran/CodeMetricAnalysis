{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppImpl.java",
  "functionName": "getLogAggregationReportsForApp",
  "functionId": "getLogAggregationReportsForApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
  "functionStartLine": 1764,
  "functionEndLine": 1766,
  "numCommitsSeen": 170,
  "timeTaken": 6144,
  "changeHistory": [
    "4456ea67b949553b85e101e866b4b3f4b335f1f0",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "29dad7d258c621a0ff3a64c595a2e32c66c59d11",
    "cd014d57aa8b896da02b5bcadafbd404bca2bc12",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1",
    "92431c961741747b5d6442f4025016d48d9a6863"
  ],
  "changeHistoryShort": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "29dad7d258c621a0ff3a64c595a2e32c66c59d11": "Ybodychange",
    "cd014d57aa8b896da02b5bcadafbd404bca2bc12": "Ybodychange",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Ybodychange",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": "Ybodychange",
    "92431c961741747b5d6442f4025016d48d9a6863": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
      "commitDate": "16/08/19 2:36 AM",
      "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "11/06/19 10:41 AM",
      "commitNameOld": "60c95e9b6a899e37ecdc8bce7bb6d9ed0dc7a6be",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 65.66,
      "commitsBetweenForRepo": 585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,3 @@\n   public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n-    this.readLock.lock();\n-    try {\n-      if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n-          systemClock.getTime() \u003e this.logAggregationStartTime\n-          + this.logAggregationStatusTimeout) {\n-        for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n-            logAggregationStatus.entrySet()) {\n-          if (!output.getValue().getLogAggregationStatus()\n-            .equals(LogAggregationStatus.TIME_OUT)\n-              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n-                .equals(LogAggregationStatus.SUCCEEDED)\n-              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n-                .equals(LogAggregationStatus.FAILED)) {\n-            output.getValue().setLogAggregationStatus(\n-              LogAggregationStatus.TIME_OUT);\n-          }\n-        }\n-      }\n-      return Collections.unmodifiableMap(logAggregationStatus);\n-    } finally {\n-      this.readLock.unlock();\n-    }\n+    return logAggregation.getLogAggregationReportsForApp(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    return logAggregation.getLogAggregationReportsForApp(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n+    this.readLock.lock();\n     try {\n-      this.readLock.lock();\n       if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n           systemClock.getTime() \u003e this.logAggregationStartTime\n           + this.logAggregationStatusTimeout) {\n         for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n             logAggregationStatus.entrySet()) {\n           if (!output.getValue().getLogAggregationStatus()\n             .equals(LogAggregationStatus.TIME_OUT)\n               \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                 .equals(LogAggregationStatus.SUCCEEDED)\n               \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                 .equals(LogAggregationStatus.FAILED)) {\n             output.getValue().setLogAggregationStatus(\n               LogAggregationStatus.TIME_OUT);\n           }\n         }\n       }\n       return Collections.unmodifiableMap(logAggregationStatus);\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    this.readLock.lock();\n    try {\n      if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n          systemClock.getTime() \u003e this.logAggregationStartTime\n          + this.logAggregationStatusTimeout) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n            logAggregationStatus.entrySet()) {\n          if (!output.getValue().getLogAggregationStatus()\n            .equals(LogAggregationStatus.TIME_OUT)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.SUCCEEDED)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.FAILED)) {\n            output.getValue().setLogAggregationStatus(\n              LogAggregationStatus.TIME_OUT);\n          }\n        }\n      }\n      return Collections.unmodifiableMap(logAggregationStatus);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "29dad7d258c621a0ff3a64c595a2e32c66c59d11": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8616. systemClock should be used in RMAppImpl instead of System.currentTimeMills(), to be consistent. (Contributed by Szilard Nemeth)\n",
      "commitDate": "24/09/18 4:04 PM",
      "commitName": "29dad7d258c621a0ff3a64c595a2e32c66c59d11",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "09/08/18 2:58 PM",
      "commitNameOld": "b2517dd66b3c88fdd478411cf208921bd3023755",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 46.05,
      "commitsBetweenForRepo": 449,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n     try {\n       this.readLock.lock();\n       if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n-          System.currentTimeMillis() \u003e this.logAggregationStartTime\n+          systemClock.getTime() \u003e this.logAggregationStartTime\n           + this.logAggregationStatusTimeout) {\n         for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n             logAggregationStatus.entrySet()) {\n           if (!output.getValue().getLogAggregationStatus()\n             .equals(LogAggregationStatus.TIME_OUT)\n               \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                 .equals(LogAggregationStatus.SUCCEEDED)\n               \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                 .equals(LogAggregationStatus.FAILED)) {\n             output.getValue().setLogAggregationStatus(\n               LogAggregationStatus.TIME_OUT);\n           }\n         }\n       }\n       return Collections.unmodifiableMap(logAggregationStatus);\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    try {\n      this.readLock.lock();\n      if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n          systemClock.getTime() \u003e this.logAggregationStartTime\n          + this.logAggregationStatusTimeout) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n            logAggregationStatus.entrySet()) {\n          if (!output.getValue().getLogAggregationStatus()\n            .equals(LogAggregationStatus.TIME_OUT)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.SUCCEEDED)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.FAILED)) {\n            output.getValue().setLogAggregationStatus(\n              LogAggregationStatus.TIME_OUT);\n          }\n        }\n      }\n      return Collections.unmodifiableMap(logAggregationStatus);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "cd014d57aa8b896da02b5bcadafbd404bca2bc12": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6339. Improve performance for createAndGetApplicationReport. (Yunjiong Zhao via wangda)\n",
      "commitDate": "27/03/17 1:29 PM",
      "commitName": "cd014d57aa8b896da02b5bcadafbd404bca2bc12",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/02/17 1:23 PM",
      "commitNameOld": "235203dffda1482fb38762fde544c4dd9c3e1fa8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 26.96,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,24 @@\n   public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n     try {\n       this.readLock.lock();\n-      Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n-          new HashMap\u003cNodeId, LogAggregationReport\u003e();\n-      outputs.putAll(logAggregationStatus);\n-      if (!isLogAggregationFinished()) {\n-        for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n+      if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n+          System.currentTimeMillis() \u003e this.logAggregationStartTime\n+          + this.logAggregationStatusTimeout) {\n+        for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n+            logAggregationStatus.entrySet()) {\n           if (!output.getValue().getLogAggregationStatus()\n             .equals(LogAggregationStatus.TIME_OUT)\n               \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                 .equals(LogAggregationStatus.SUCCEEDED)\n               \u0026\u0026 !output.getValue().getLogAggregationStatus()\n-                .equals(LogAggregationStatus.FAILED)\n-              \u0026\u0026 isAppInFinalState(this)\n-              \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n-                  + this.logAggregationStatusTimeout) {\n+                .equals(LogAggregationStatus.FAILED)) {\n             output.getValue().setLogAggregationStatus(\n               LogAggregationStatus.TIME_OUT);\n           }\n         }\n       }\n-      return outputs;\n+      return Collections.unmodifiableMap(logAggregationStatus);\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    try {\n      this.readLock.lock();\n      if (!isLogAggregationFinished() \u0026\u0026 isAppInFinalState(this) \u0026\u0026\n          System.currentTimeMillis() \u003e this.logAggregationStartTime\n          + this.logAggregationStatusTimeout) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e output :\n            logAggregationStatus.entrySet()) {\n          if (!output.getValue().getLogAggregationStatus()\n            .equals(LogAggregationStatus.TIME_OUT)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.SUCCEEDED)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.FAILED)) {\n            output.getValue().setLogAggregationStatus(\n              LogAggregationStatus.TIME_OUT);\n          }\n        }\n      }\n      return Collections.unmodifiableMap(logAggregationStatus);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "24/04/15 12:13 PM",
      "commitNameOld": "d03dcb9635dbd79a45d229d1cab5fd28e5e49f49",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 19.95,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n     try {\n       this.readLock.lock();\n       Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n           new HashMap\u003cNodeId, LogAggregationReport\u003e();\n       outputs.putAll(logAggregationStatus);\n-      for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n-        if (!output.getValue().getLogAggregationStatus()\n-          .equals(LogAggregationStatus.TIME_OUT)\n-            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n-              .equals(LogAggregationStatus.SUCCEEDED)\n-            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n-              .equals(LogAggregationStatus.FAILED)\n-            \u0026\u0026 isAppInFinalState(this)\n-            \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n-                + this.logAggregationStatusTimeout) {\n-          output.getValue().setLogAggregationStatus(\n-            LogAggregationStatus.TIME_OUT);\n+      if (!isLogAggregationFinished()) {\n+        for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n+          if (!output.getValue().getLogAggregationStatus()\n+            .equals(LogAggregationStatus.TIME_OUT)\n+              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n+                .equals(LogAggregationStatus.SUCCEEDED)\n+              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n+                .equals(LogAggregationStatus.FAILED)\n+              \u0026\u0026 isAppInFinalState(this)\n+              \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n+                  + this.logAggregationStatusTimeout) {\n+            output.getValue().setLogAggregationStatus(\n+              LogAggregationStatus.TIME_OUT);\n+          }\n         }\n       }\n       return outputs;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    try {\n      this.readLock.lock();\n      Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n          new HashMap\u003cNodeId, LogAggregationReport\u003e();\n      outputs.putAll(logAggregationStatus);\n      if (!isLogAggregationFinished()) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n          if (!output.getValue().getLogAggregationStatus()\n            .equals(LogAggregationStatus.TIME_OUT)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.SUCCEEDED)\n              \u0026\u0026 !output.getValue().getLogAggregationStatus()\n                .equals(LogAggregationStatus.FAILED)\n              \u0026\u0026 isAppInFinalState(this)\n              \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n                  + this.logAggregationStatusTimeout) {\n            output.getValue().setLogAggregationStatus(\n              LogAggregationStatus.TIME_OUT);\n          }\n        }\n      }\n      return outputs;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1402. Update related Web UI and CLI with exposing client API to check log aggregation status. Contributed by Xuan Gong.\n",
      "commitDate": "17/04/15 1:18 PM",
      "commitName": "1db355a875c3ecc40a244045c6812e00c8d36ef1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n     try {\n       this.readLock.lock();\n       Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n           new HashMap\u003cNodeId, LogAggregationReport\u003e();\n       outputs.putAll(logAggregationStatus);\n       for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n         if (!output.getValue().getLogAggregationStatus()\n           .equals(LogAggregationStatus.TIME_OUT)\n             \u0026\u0026 !output.getValue().getLogAggregationStatus()\n-              .equals(LogAggregationStatus.FINISHED)\n+              .equals(LogAggregationStatus.SUCCEEDED)\n+            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n+              .equals(LogAggregationStatus.FAILED)\n             \u0026\u0026 isAppInFinalState(this)\n             \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n                 + this.logAggregationStatusTimeout) {\n           output.getValue().setLogAggregationStatus(\n             LogAggregationStatus.TIME_OUT);\n         }\n       }\n       return outputs;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    try {\n      this.readLock.lock();\n      Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n          new HashMap\u003cNodeId, LogAggregationReport\u003e();\n      outputs.putAll(logAggregationStatus);\n      for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n        if (!output.getValue().getLogAggregationStatus()\n          .equals(LogAggregationStatus.TIME_OUT)\n            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n              .equals(LogAggregationStatus.SUCCEEDED)\n            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n              .equals(LogAggregationStatus.FAILED)\n            \u0026\u0026 isAppInFinalState(this)\n            \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n                + this.logAggregationStatusTimeout) {\n          output.getValue().setLogAggregationStatus(\n            LogAggregationStatus.TIME_OUT);\n        }\n      }\n      return outputs;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,23 @@\n+  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n+    try {\n+      this.readLock.lock();\n+      Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n+          new HashMap\u003cNodeId, LogAggregationReport\u003e();\n+      outputs.putAll(logAggregationStatus);\n+      for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n+        if (!output.getValue().getLogAggregationStatus()\n+          .equals(LogAggregationStatus.TIME_OUT)\n+            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n+              .equals(LogAggregationStatus.FINISHED)\n+            \u0026\u0026 isAppInFinalState(this)\n+            \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n+                + this.logAggregationStatusTimeout) {\n+          output.getValue().setLogAggregationStatus(\n+            LogAggregationStatus.TIME_OUT);\n+        }\n+      }\n+      return outputs;\n+    } finally {\n+      this.readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, LogAggregationReport\u003e getLogAggregationReportsForApp() {\n    try {\n      this.readLock.lock();\n      Map\u003cNodeId, LogAggregationReport\u003e outputs \u003d\n          new HashMap\u003cNodeId, LogAggregationReport\u003e();\n      outputs.putAll(logAggregationStatus);\n      for (Entry\u003cNodeId, LogAggregationReport\u003e output : outputs.entrySet()) {\n        if (!output.getValue().getLogAggregationStatus()\n          .equals(LogAggregationStatus.TIME_OUT)\n            \u0026\u0026 !output.getValue().getLogAggregationStatus()\n              .equals(LogAggregationStatus.FINISHED)\n            \u0026\u0026 isAppInFinalState(this)\n            \u0026\u0026 System.currentTimeMillis() \u003e this.logAggregationStartTime\n                + this.logAggregationStatusTimeout) {\n          output.getValue().setLogAggregationStatus(\n            LogAggregationStatus.TIME_OUT);\n        }\n      }\n      return outputs;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}