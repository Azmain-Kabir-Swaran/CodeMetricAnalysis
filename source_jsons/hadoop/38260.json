{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetricsInvariantChecker.java",
  "functionName": "init",
  "functionId": "init___config-Configuration__rmContext-RMContext__scheduler-ResourceScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/invariants/MetricsInvariantChecker.java",
  "functionStartLine": 79,
  "functionEndLine": 145,
  "numCommitsSeen": 4,
  "timeTaken": 2790,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "218588be773123404af4fd26eed5c9e3625feaa7",
    "af8e9842d2ca566528e09d905b609f1cf160d367"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "218588be773123404af4fd26eed5c9e3625feaa7": "Ymultichange(Yparameterchange,Ybodychange)",
    "af8e9842d2ca566528e09d905b609f1cf160d367": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "11/08/17 2:04 PM",
      "commitNameOld": "218588be773123404af4fd26eed5c9e3625feaa7",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 562.95,
      "commitsBetweenForRepo": 4841,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n   public void init(Configuration config, RMContext rmContext,\n       ResourceScheduler scheduler) {\n \n     super.init(config, rmContext, scheduler);\n \n     this.metricsSystem \u003d DefaultMetricsSystem.instance();\n     this.queueMetrics \u003d\n         QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n     this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n \n     // at first collect all metrics\n     collector \u003d new MetricsCollectorImpl();\n     queueMetrics.getMetrics(collector, true);\n     jvmMetrics.getMetrics(collector, true);\n \n     // prepare bindings and evaluation engine\n     this.bindings \u003d new SimpleBindings();\n     this.manager \u003d new ScriptEngineManager();\n     this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n \n     // load metrics invariant from file\n     this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n \n     this.invariants \u003d new HashMap\u003c\u003e();\n \n     // preload all bindings\n     queueMetrics.getMetrics(collector, true);\n     jvmMetrics.getMetrics(collector, true);\n     for (MetricsRecord record : collector.getRecords()) {\n       for (AbstractMetric am : record.metrics()) {\n         bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n       }\n     }\n \n     StringBuilder sb \u003d new StringBuilder();\n     try {\n       List\u003cString\u003e tempInv \u003d\n           Files.readLines(new File(invariantFile), Charsets.UTF_8);\n \n \n       boolean first \u003d true;\n       // precompile individual invariants\n       for (String inv : tempInv) {\n \n         if(first) {\n           first \u003d false;\n         } else {\n           sb.append(\"\u0026\u0026\");\n         }\n \n         invariants.put(inv, scriptEngine.compile(inv));\n-        sb.append(\" (\");\n-        sb.append(inv);\n-        sb.append(\") \");\n+        sb.append(\" (\")\n+            .append(inv)\n+            .append(\") \");\n       }\n \n       // create a single large combined invariant for speed of checking\n       combinedInvariants \u003d scriptEngine.compile(sb.toString());\n \n     } catch (IOException e) {\n       throw new RuntimeException(\n           \"Error loading invariant file: \" + e.getMessage());\n     } catch (ScriptException e) {\n       throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config, RMContext rmContext,\n      ResourceScheduler scheduler) {\n\n    super.init(config, rmContext, scheduler);\n\n    this.metricsSystem \u003d DefaultMetricsSystem.instance();\n    this.queueMetrics \u003d\n        QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n    this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n\n    // at first collect all metrics\n    collector \u003d new MetricsCollectorImpl();\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n\n    // prepare bindings and evaluation engine\n    this.bindings \u003d new SimpleBindings();\n    this.manager \u003d new ScriptEngineManager();\n    this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n\n    // load metrics invariant from file\n    this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n\n    this.invariants \u003d new HashMap\u003c\u003e();\n\n    // preload all bindings\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n    for (MetricsRecord record : collector.getRecords()) {\n      for (AbstractMetric am : record.metrics()) {\n        bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n      }\n    }\n\n    StringBuilder sb \u003d new StringBuilder();\n    try {\n      List\u003cString\u003e tempInv \u003d\n          Files.readLines(new File(invariantFile), Charsets.UTF_8);\n\n\n      boolean first \u003d true;\n      // precompile individual invariants\n      for (String inv : tempInv) {\n\n        if(first) {\n          first \u003d false;\n        } else {\n          sb.append(\"\u0026\u0026\");\n        }\n\n        invariants.put(inv, scriptEngine.compile(inv));\n        sb.append(\" (\")\n            .append(inv)\n            .append(\") \");\n      }\n\n      // create a single large combined invariant for speed of checking\n      combinedInvariants \u003d scriptEngine.compile(sb.toString());\n\n    } catch (IOException e) {\n      throw new RuntimeException(\n          \"Error loading invariant file: \" + e.getMessage());\n    } catch (ScriptException e) {\n      throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/invariants/MetricsInvariantChecker.java",
      "extendedDetails": {}
    },
    "218588be773123404af4fd26eed5c9e3625feaa7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6952. Enable scheduling monitor in FS (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "11/08/17 2:04 PM",
      "commitName": "218588be773123404af4fd26eed5c9e3625feaa7",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6952. Enable scheduling monitor in FS (Contributed by Yufei Gu via Daniel Templeton)\n",
          "commitDate": "11/08/17 2:04 PM",
          "commitName": "218588be773123404af4fd26eed5c9e3625feaa7",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "18/04/17 10:29 AM",
          "commitNameOld": "af8e9842d2ca566528e09d905b609f1cf160d367",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 115.15,
          "commitsBetweenForRepo": 658,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,67 @@\n   public void init(Configuration config, RMContext rmContext,\n-      PreemptableResourceScheduler preemptableResourceScheduler) {\n+      ResourceScheduler scheduler) {\n \n-    super.init(config, rmContext, preemptableResourceScheduler);\n+    super.init(config, rmContext, scheduler);\n \n     this.metricsSystem \u003d DefaultMetricsSystem.instance();\n     this.queueMetrics \u003d\n         QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n     this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n \n     // at first collect all metrics\n     collector \u003d new MetricsCollectorImpl();\n     queueMetrics.getMetrics(collector, true);\n     jvmMetrics.getMetrics(collector, true);\n \n     // prepare bindings and evaluation engine\n     this.bindings \u003d new SimpleBindings();\n     this.manager \u003d new ScriptEngineManager();\n     this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n \n     // load metrics invariant from file\n     this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n \n     this.invariants \u003d new HashMap\u003c\u003e();\n \n     // preload all bindings\n     queueMetrics.getMetrics(collector, true);\n     jvmMetrics.getMetrics(collector, true);\n     for (MetricsRecord record : collector.getRecords()) {\n       for (AbstractMetric am : record.metrics()) {\n         bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n       }\n     }\n \n     StringBuilder sb \u003d new StringBuilder();\n     try {\n       List\u003cString\u003e tempInv \u003d\n           Files.readLines(new File(invariantFile), Charsets.UTF_8);\n \n \n       boolean first \u003d true;\n       // precompile individual invariants\n       for (String inv : tempInv) {\n \n         if(first) {\n           first \u003d false;\n         } else {\n           sb.append(\"\u0026\u0026\");\n         }\n \n         invariants.put(inv, scriptEngine.compile(inv));\n         sb.append(\" (\");\n         sb.append(inv);\n         sb.append(\") \");\n       }\n \n       // create a single large combined invariant for speed of checking\n       combinedInvariants \u003d scriptEngine.compile(sb.toString());\n \n     } catch (IOException e) {\n       throw new RuntimeException(\n           \"Error loading invariant file: \" + e.getMessage());\n     } catch (ScriptException e) {\n       throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Configuration config, RMContext rmContext,\n      ResourceScheduler scheduler) {\n\n    super.init(config, rmContext, scheduler);\n\n    this.metricsSystem \u003d DefaultMetricsSystem.instance();\n    this.queueMetrics \u003d\n        QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n    this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n\n    // at first collect all metrics\n    collector \u003d new MetricsCollectorImpl();\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n\n    // prepare bindings and evaluation engine\n    this.bindings \u003d new SimpleBindings();\n    this.manager \u003d new ScriptEngineManager();\n    this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n\n    // load metrics invariant from file\n    this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n\n    this.invariants \u003d new HashMap\u003c\u003e();\n\n    // preload all bindings\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n    for (MetricsRecord record : collector.getRecords()) {\n      for (AbstractMetric am : record.metrics()) {\n        bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n      }\n    }\n\n    StringBuilder sb \u003d new StringBuilder();\n    try {\n      List\u003cString\u003e tempInv \u003d\n          Files.readLines(new File(invariantFile), Charsets.UTF_8);\n\n\n      boolean first \u003d true;\n      // precompile individual invariants\n      for (String inv : tempInv) {\n\n        if(first) {\n          first \u003d false;\n        } else {\n          sb.append(\"\u0026\u0026\");\n        }\n\n        invariants.put(inv, scriptEngine.compile(inv));\n        sb.append(\" (\");\n        sb.append(inv);\n        sb.append(\") \");\n      }\n\n      // create a single large combined invariant for speed of checking\n      combinedInvariants \u003d scriptEngine.compile(sb.toString());\n\n    } catch (IOException e) {\n      throw new RuntimeException(\n          \"Error loading invariant file: \" + e.getMessage());\n    } catch (ScriptException e) {\n      throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/invariants/MetricsInvariantChecker.java",
          "extendedDetails": {
            "oldValue": "[config-Configuration, rmContext-RMContext, preemptableResourceScheduler-PreemptableResourceScheduler]",
            "newValue": "[config-Configuration, rmContext-RMContext, scheduler-ResourceScheduler]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6952. Enable scheduling monitor in FS (Contributed by Yufei Gu via Daniel Templeton)\n",
          "commitDate": "11/08/17 2:04 PM",
          "commitName": "218588be773123404af4fd26eed5c9e3625feaa7",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "18/04/17 10:29 AM",
          "commitNameOld": "af8e9842d2ca566528e09d905b609f1cf160d367",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 115.15,
          "commitsBetweenForRepo": 658,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,67 @@\n   public void init(Configuration config, RMContext rmContext,\n-      PreemptableResourceScheduler preemptableResourceScheduler) {\n+      ResourceScheduler scheduler) {\n \n-    super.init(config, rmContext, preemptableResourceScheduler);\n+    super.init(config, rmContext, scheduler);\n \n     this.metricsSystem \u003d DefaultMetricsSystem.instance();\n     this.queueMetrics \u003d\n         QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n     this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n \n     // at first collect all metrics\n     collector \u003d new MetricsCollectorImpl();\n     queueMetrics.getMetrics(collector, true);\n     jvmMetrics.getMetrics(collector, true);\n \n     // prepare bindings and evaluation engine\n     this.bindings \u003d new SimpleBindings();\n     this.manager \u003d new ScriptEngineManager();\n     this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n \n     // load metrics invariant from file\n     this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n \n     this.invariants \u003d new HashMap\u003c\u003e();\n \n     // preload all bindings\n     queueMetrics.getMetrics(collector, true);\n     jvmMetrics.getMetrics(collector, true);\n     for (MetricsRecord record : collector.getRecords()) {\n       for (AbstractMetric am : record.metrics()) {\n         bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n       }\n     }\n \n     StringBuilder sb \u003d new StringBuilder();\n     try {\n       List\u003cString\u003e tempInv \u003d\n           Files.readLines(new File(invariantFile), Charsets.UTF_8);\n \n \n       boolean first \u003d true;\n       // precompile individual invariants\n       for (String inv : tempInv) {\n \n         if(first) {\n           first \u003d false;\n         } else {\n           sb.append(\"\u0026\u0026\");\n         }\n \n         invariants.put(inv, scriptEngine.compile(inv));\n         sb.append(\" (\");\n         sb.append(inv);\n         sb.append(\") \");\n       }\n \n       // create a single large combined invariant for speed of checking\n       combinedInvariants \u003d scriptEngine.compile(sb.toString());\n \n     } catch (IOException e) {\n       throw new RuntimeException(\n           \"Error loading invariant file: \" + e.getMessage());\n     } catch (ScriptException e) {\n       throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Configuration config, RMContext rmContext,\n      ResourceScheduler scheduler) {\n\n    super.init(config, rmContext, scheduler);\n\n    this.metricsSystem \u003d DefaultMetricsSystem.instance();\n    this.queueMetrics \u003d\n        QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n    this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n\n    // at first collect all metrics\n    collector \u003d new MetricsCollectorImpl();\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n\n    // prepare bindings and evaluation engine\n    this.bindings \u003d new SimpleBindings();\n    this.manager \u003d new ScriptEngineManager();\n    this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n\n    // load metrics invariant from file\n    this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n\n    this.invariants \u003d new HashMap\u003c\u003e();\n\n    // preload all bindings\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n    for (MetricsRecord record : collector.getRecords()) {\n      for (AbstractMetric am : record.metrics()) {\n        bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n      }\n    }\n\n    StringBuilder sb \u003d new StringBuilder();\n    try {\n      List\u003cString\u003e tempInv \u003d\n          Files.readLines(new File(invariantFile), Charsets.UTF_8);\n\n\n      boolean first \u003d true;\n      // precompile individual invariants\n      for (String inv : tempInv) {\n\n        if(first) {\n          first \u003d false;\n        } else {\n          sb.append(\"\u0026\u0026\");\n        }\n\n        invariants.put(inv, scriptEngine.compile(inv));\n        sb.append(\" (\");\n        sb.append(inv);\n        sb.append(\") \");\n      }\n\n      // create a single large combined invariant for speed of checking\n      combinedInvariants \u003d scriptEngine.compile(sb.toString());\n\n    } catch (IOException e) {\n      throw new RuntimeException(\n          \"Error loading invariant file: \" + e.getMessage());\n    } catch (ScriptException e) {\n      throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/invariants/MetricsInvariantChecker.java",
          "extendedDetails": {}
        }
      ]
    },
    "af8e9842d2ca566528e09d905b609f1cf160d367": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6451. Add RM monitor validating metrics invariants. Contributed by Carlo Curino\n",
      "commitDate": "18/04/17 10:29 AM",
      "commitName": "af8e9842d2ca566528e09d905b609f1cf160d367",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,67 @@\n+  public void init(Configuration config, RMContext rmContext,\n+      PreemptableResourceScheduler preemptableResourceScheduler) {\n+\n+    super.init(config, rmContext, preemptableResourceScheduler);\n+\n+    this.metricsSystem \u003d DefaultMetricsSystem.instance();\n+    this.queueMetrics \u003d\n+        QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n+    this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n+\n+    // at first collect all metrics\n+    collector \u003d new MetricsCollectorImpl();\n+    queueMetrics.getMetrics(collector, true);\n+    jvmMetrics.getMetrics(collector, true);\n+\n+    // prepare bindings and evaluation engine\n+    this.bindings \u003d new SimpleBindings();\n+    this.manager \u003d new ScriptEngineManager();\n+    this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n+\n+    // load metrics invariant from file\n+    this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n+\n+    this.invariants \u003d new HashMap\u003c\u003e();\n+\n+    // preload all bindings\n+    queueMetrics.getMetrics(collector, true);\n+    jvmMetrics.getMetrics(collector, true);\n+    for (MetricsRecord record : collector.getRecords()) {\n+      for (AbstractMetric am : record.metrics()) {\n+        bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n+      }\n+    }\n+\n+    StringBuilder sb \u003d new StringBuilder();\n+    try {\n+      List\u003cString\u003e tempInv \u003d\n+          Files.readLines(new File(invariantFile), Charsets.UTF_8);\n+\n+\n+      boolean first \u003d true;\n+      // precompile individual invariants\n+      for (String inv : tempInv) {\n+\n+        if(first) {\n+          first \u003d false;\n+        } else {\n+          sb.append(\"\u0026\u0026\");\n+        }\n+\n+        invariants.put(inv, scriptEngine.compile(inv));\n+        sb.append(\" (\");\n+        sb.append(inv);\n+        sb.append(\") \");\n+      }\n+\n+      // create a single large combined invariant for speed of checking\n+      combinedInvariants \u003d scriptEngine.compile(sb.toString());\n+\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          \"Error loading invariant file: \" + e.getMessage());\n+    } catch (ScriptException e) {\n+      throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config, RMContext rmContext,\n      PreemptableResourceScheduler preemptableResourceScheduler) {\n\n    super.init(config, rmContext, preemptableResourceScheduler);\n\n    this.metricsSystem \u003d DefaultMetricsSystem.instance();\n    this.queueMetrics \u003d\n        QueueMetrics.forQueue(metricsSystem, \"root\", null, false, getConf());\n    this.jvmMetrics \u003d (JvmMetrics) metricsSystem.getSource(\"JvmMetrics\");\n\n    // at first collect all metrics\n    collector \u003d new MetricsCollectorImpl();\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n\n    // prepare bindings and evaluation engine\n    this.bindings \u003d new SimpleBindings();\n    this.manager \u003d new ScriptEngineManager();\n    this.scriptEngine \u003d (Compilable) manager.getEngineByName(\"JavaScript\");\n\n    // load metrics invariant from file\n    this.invariantFile \u003d getConf().get(MetricsInvariantChecker.INVARIANTS_FILE);\n\n    this.invariants \u003d new HashMap\u003c\u003e();\n\n    // preload all bindings\n    queueMetrics.getMetrics(collector, true);\n    jvmMetrics.getMetrics(collector, true);\n    for (MetricsRecord record : collector.getRecords()) {\n      for (AbstractMetric am : record.metrics()) {\n        bindings.put(am.name().replace(\u0027 \u0027, \u0027_\u0027), am.value());\n      }\n    }\n\n    StringBuilder sb \u003d new StringBuilder();\n    try {\n      List\u003cString\u003e tempInv \u003d\n          Files.readLines(new File(invariantFile), Charsets.UTF_8);\n\n\n      boolean first \u003d true;\n      // precompile individual invariants\n      for (String inv : tempInv) {\n\n        if(first) {\n          first \u003d false;\n        } else {\n          sb.append(\"\u0026\u0026\");\n        }\n\n        invariants.put(inv, scriptEngine.compile(inv));\n        sb.append(\" (\");\n        sb.append(inv);\n        sb.append(\") \");\n      }\n\n      // create a single large combined invariant for speed of checking\n      combinedInvariants \u003d scriptEngine.compile(sb.toString());\n\n    } catch (IOException e) {\n      throw new RuntimeException(\n          \"Error loading invariant file: \" + e.getMessage());\n    } catch (ScriptException e) {\n      throw new RuntimeException(\"Error compiling invariant \" + e.getMessage());\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/invariants/MetricsInvariantChecker.java"
    }
  }
}