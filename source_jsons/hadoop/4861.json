{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectorySnapshottableFeature.java",
  "functionName": "dumpTreeRecursively",
  "functionId": "dumpTreeRecursively___snapshotRoot-INodeDirectory__out-PrintWriter__prefix-StringBuilder__snapshot-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
  "functionStartLine": 563,
  "functionEndLine": 626,
  "numCommitsSeen": 145,
  "timeTaken": 3567,
  "changeHistory": [
    "76a621ffd2d66bf012a554f4400091a92a5b473e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "419fd3999c651099272a2ae0ee241bd199165608",
    "d42d0860cb670c8284bb298029cd6f8f59db9510",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16",
    "f84000900afa8b6274eb227992134f24dbf5c2b4",
    "8b71399abb323698a4850cd4f4a1e3763f13e6a2"
  ],
  "changeHistoryShort": {
    "76a621ffd2d66bf012a554f4400091a92a5b473e": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "419fd3999c651099272a2ae0ee241bd199165608": "Ybodychange",
    "d42d0860cb670c8284bb298029cd6f8f59db9510": "Ybodychange",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": "Ybodychange",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": "Ybodychange",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": "Ymultichange(Yparameterchange,Ybodychange)",
    "f84000900afa8b6274eb227992134f24dbf5c2b4": "Ybodychange",
    "8b71399abb323698a4850cd4f4a1e3763f13e6a2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76a621ffd2d66bf012a554f4400091a92a5b473e": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 5:08 PM",
      "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/07/14 5:08 PM",
          "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "07/07/14 1:14 PM",
          "commitNameOld": "4b2ded8202f9d07ba44066650dc4e5c987cbbacc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,64 @@\n-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n-      int snapshot) {\n-    super.dumpTreeRecursively(out, prefix, snapshot);\n-\n+  public void dumpTreeRecursively(INodeDirectory snapshotRoot, PrintWriter out,\n+      StringBuilder prefix, int snapshot) {\n     if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       out.println();\n       out.print(prefix);\n \n       out.print(\"Snapshot of \");\n-      final String name \u003d getLocalName();\n+      final String name \u003d snapshotRoot.getLocalName();\n       out.print(name.isEmpty()? \"/\": name);\n       out.print(\": quota\u003d\");\n       out.print(getSnapshotQuota());\n \n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n       Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n           + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n       out.print(\", #snapshot\u003d\");\n       out.println(n);\n \n-      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n+      INodeDirectory.dumpTreeRecursively(out, prefix,\n+          new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n         public Iterator\u003cSnapshotAndINode\u003e iterator() {\n           return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n-  \n+\n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n-  \n+\n             @Override\n             public SnapshotAndINode next() {\n               final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                   .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                   .getRoot());\n               next \u003d findNext();\n               return pair;\n             }\n-  \n+\n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(INodeDirectory snapshotRoot, PrintWriter out,\n      StringBuilder prefix, int snapshot) {\n    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      out.println();\n      out.print(prefix);\n\n      out.print(\"Snapshot of \");\n      final String name \u003d snapshotRoot.getLocalName();\n      out.print(name.isEmpty()? \"/\": name);\n      out.print(\": quota\u003d\");\n      out.print(getSnapshotQuota());\n\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n      out.print(\", #snapshot\u003d\");\n      out.println(n);\n\n      INodeDirectory.dumpTreeRecursively(out, prefix,\n          new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n\n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n\n            @Override\n            public SnapshotAndINode next() {\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                  .getRoot());\n              next \u003d findNext();\n              return pair;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/07/14 5:08 PM",
          "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "07/07/14 1:14 PM",
          "commitNameOld": "4b2ded8202f9d07ba44066650dc4e5c987cbbacc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,64 @@\n-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n-      int snapshot) {\n-    super.dumpTreeRecursively(out, prefix, snapshot);\n-\n+  public void dumpTreeRecursively(INodeDirectory snapshotRoot, PrintWriter out,\n+      StringBuilder prefix, int snapshot) {\n     if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       out.println();\n       out.print(prefix);\n \n       out.print(\"Snapshot of \");\n-      final String name \u003d getLocalName();\n+      final String name \u003d snapshotRoot.getLocalName();\n       out.print(name.isEmpty()? \"/\": name);\n       out.print(\": quota\u003d\");\n       out.print(getSnapshotQuota());\n \n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n       Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n           + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n       out.print(\", #snapshot\u003d\");\n       out.println(n);\n \n-      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n+      INodeDirectory.dumpTreeRecursively(out, prefix,\n+          new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n         public Iterator\u003cSnapshotAndINode\u003e iterator() {\n           return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n-  \n+\n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n-  \n+\n             @Override\n             public SnapshotAndINode next() {\n               final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                   .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                   .getRoot());\n               next \u003d findNext();\n               return pair;\n             }\n-  \n+\n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(INodeDirectory snapshotRoot, PrintWriter out,\n      StringBuilder prefix, int snapshot) {\n    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      out.println();\n      out.print(prefix);\n\n      out.print(\"Snapshot of \");\n      final String name \u003d snapshotRoot.getLocalName();\n      out.print(name.isEmpty()? \"/\": name);\n      out.print(\": quota\u003d\");\n      out.print(getSnapshotQuota());\n\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n      out.print(\", #snapshot\u003d\");\n      out.println(n);\n\n      INodeDirectory.dumpTreeRecursively(out, prefix,\n          new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n\n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n\n            @Override\n            public SnapshotAndINode next() {\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                  .getRoot());\n              next \u003d findNext();\n              return pair;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/07/14 5:08 PM",
          "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "07/07/14 1:14 PM",
          "commitNameOld": "4b2ded8202f9d07ba44066650dc4e5c987cbbacc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,64 @@\n-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n-      int snapshot) {\n-    super.dumpTreeRecursively(out, prefix, snapshot);\n-\n+  public void dumpTreeRecursively(INodeDirectory snapshotRoot, PrintWriter out,\n+      StringBuilder prefix, int snapshot) {\n     if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       out.println();\n       out.print(prefix);\n \n       out.print(\"Snapshot of \");\n-      final String name \u003d getLocalName();\n+      final String name \u003d snapshotRoot.getLocalName();\n       out.print(name.isEmpty()? \"/\": name);\n       out.print(\": quota\u003d\");\n       out.print(getSnapshotQuota());\n \n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n       Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n           + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n       out.print(\", #snapshot\u003d\");\n       out.println(n);\n \n-      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n+      INodeDirectory.dumpTreeRecursively(out, prefix,\n+          new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n         public Iterator\u003cSnapshotAndINode\u003e iterator() {\n           return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n-  \n+\n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n-  \n+\n             @Override\n             public SnapshotAndINode next() {\n               final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                   .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                   .getRoot());\n               next \u003d findNext();\n               return pair;\n             }\n-  \n+\n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(INodeDirectory snapshotRoot, PrintWriter out,\n      StringBuilder prefix, int snapshot) {\n    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      out.println();\n      out.print(prefix);\n\n      out.print(\"Snapshot of \");\n      final String name \u003d snapshotRoot.getLocalName();\n      out.print(name.isEmpty()? \"/\": name);\n      out.print(\": quota\u003d\");\n      out.print(getSnapshotQuota());\n\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n      out.print(\", #snapshot\u003d\");\n      out.println(n);\n\n      INodeDirectory.dumpTreeRecursively(out, prefix,\n          new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n\n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n\n            @Override\n            public SnapshotAndINode next() {\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                  .getRoot());\n              next \u003d findNext();\n              return pair;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldValue": "[out-PrintWriter, prefix-StringBuilder, snapshot-int]",
            "newValue": "[snapshotRoot-INodeDirectory, out-PrintWriter, prefix-StringBuilder, snapshot-int]"
          }
        }
      ]
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,65 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n-      Snapshot snapshot) {\n+      int snapshot) {\n     super.dumpTreeRecursively(out, prefix, snapshot);\n \n-    if (snapshot \u003d\u003d null) {\n+    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       out.println();\n       out.print(prefix);\n \n       out.print(\"Snapshot of \");\n       final String name \u003d getLocalName();\n       out.print(name.isEmpty()? \"/\": name);\n       out.print(\": quota\u003d\");\n       out.print(getSnapshotQuota());\n \n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n-      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size());\n+      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n+          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n       out.print(\", #snapshot\u003d\");\n       out.println(n);\n \n       dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n         public Iterator\u003cSnapshotAndINode\u003e iterator() {\n           return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n   \n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n   \n             @Override\n             public SnapshotAndINode next() {\n-              final Snapshot s \u003d next.snapshot;\n-              final SnapshotAndINode pair \u003d new SnapshotAndINode(s);\n+              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n+                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n+                  .getRoot());\n               next \u003d findNext();\n               return pair;\n             }\n   \n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      int snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      out.println();\n      out.print(prefix);\n\n      out.print(\"Snapshot of \");\n      final String name \u003d getLocalName();\n      out.print(name.isEmpty()? \"/\": name);\n      out.print(\": quota\u003d\");\n      out.print(getSnapshotQuota());\n\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n      out.print(\", #snapshot\u003d\");\n      out.println(n);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n  \n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public SnapshotAndINode next() {\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                  .getRoot());\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {
            "oldValue": "[out-PrintWriter, prefix-StringBuilder, snapshot-Snapshot]",
            "newValue": "[out-PrintWriter, prefix-StringBuilder, snapshot-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,65 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n-      Snapshot snapshot) {\n+      int snapshot) {\n     super.dumpTreeRecursively(out, prefix, snapshot);\n \n-    if (snapshot \u003d\u003d null) {\n+    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       out.println();\n       out.print(prefix);\n \n       out.print(\"Snapshot of \");\n       final String name \u003d getLocalName();\n       out.print(name.isEmpty()? \"/\": name);\n       out.print(\": quota\u003d\");\n       out.print(getSnapshotQuota());\n \n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n-      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size());\n+      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n+          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n       out.print(\", #snapshot\u003d\");\n       out.println(n);\n \n       dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n         public Iterator\u003cSnapshotAndINode\u003e iterator() {\n           return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n   \n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n   \n             @Override\n             public SnapshotAndINode next() {\n-              final Snapshot s \u003d next.snapshot;\n-              final SnapshotAndINode pair \u003d new SnapshotAndINode(s);\n+              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n+                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n+                  .getRoot());\n               next \u003d findNext();\n               return pair;\n             }\n   \n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      int snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      out.println();\n      out.print(prefix);\n\n      out.print(\"Snapshot of \");\n      final String name \u003d getLocalName();\n      out.print(name.isEmpty()? \"/\": name);\n      out.print(\": quota\u003d\");\n      out.print(getSnapshotQuota());\n\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size(), \"#n\u003d\" + n\n          + \", snapshotsByNames.size()\u003d\" + snapshotsByNames.size());\n      out.print(\", #snapshot\u003d\");\n      out.println(n);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n  \n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public SnapshotAndINode next() {\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(next\n                  .getSnapshotId(), getSnapshotById(next.getSnapshotId())\n                  .getRoot());\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {}
        }
      ]
    },
    "419fd3999c651099272a2ae0ee241bd199165608": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4706. Do not replace root inode for disallowSnapshot.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1469122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/13 6:39 PM",
      "commitName": "419fd3999c651099272a2ae0ee241bd199165608",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/04/13 3:03 PM",
      "commitNameOld": "6bda1f20ad396918edde211f709f5819a361b51e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,63 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n       Snapshot snapshot) {\n     super.dumpTreeRecursively(out, prefix, snapshot);\n \n     if (snapshot \u003d\u003d null) {\n       out.println();\n       out.print(prefix);\n+\n+      out.print(\"Snapshot of \");\n+      final String name \u003d getLocalName();\n+      out.print(name.isEmpty()? \"/\": name);\n+      out.print(\": quota\u003d\");\n+      out.print(getSnapshotQuota());\n+\n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n-      out.print(n);\n-      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n-      final String name \u003d getLocalName();\n-      out.println(name.isEmpty()? \"/\": name);\n+      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size());\n+      out.print(\", #snapshot\u003d\");\n+      out.println(n);\n \n       dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n         public Iterator\u003cSnapshotAndINode\u003e iterator() {\n           return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n   \n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n   \n             @Override\n             public SnapshotAndINode next() {\n               final Snapshot s \u003d next.snapshot;\n               final SnapshotAndINode pair \u003d new SnapshotAndINode(s);\n               next \u003d findNext();\n               return pair;\n             }\n   \n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      Snapshot snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    if (snapshot \u003d\u003d null) {\n      out.println();\n      out.print(prefix);\n\n      out.print(\"Snapshot of \");\n      final String name \u003d getLocalName();\n      out.print(name.isEmpty()? \"/\": name);\n      out.print(\": quota\u003d\");\n      out.print(getSnapshotQuota());\n\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      Preconditions.checkState(n \u003d\u003d snapshotsByNames.size());\n      out.print(\", #snapshot\u003d\");\n      out.println(n);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n  \n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public SnapshotAndINode next() {\n              final Snapshot s \u003d next.snapshot;\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(s);\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "d42d0860cb670c8284bb298029cd6f8f59db9510": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4500. Refactor snapshot INode methods.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446355 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/13 2:00 PM",
      "commitName": "d42d0860cb670c8284bb298029cd6f8f59db9510",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "13/02/13 4:43 PM",
      "commitNameOld": "02e6b72ae148fc8c2ba02ef624536b9e48997b31",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,57 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n       Snapshot snapshot) {\n     super.dumpTreeRecursively(out, prefix, snapshot);\n \n     if (snapshot \u003d\u003d null) {\n       out.println();\n       out.print(prefix);\n       int n \u003d 0;\n       for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n       out.print(n);\n       out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n       final String name \u003d getLocalName();\n       out.println(name.isEmpty()? \"/\": name);\n \n-      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n+      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n         @Override\n-        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n-          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n+        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n+          return new Iterator\u003cSnapshotAndINode\u003e() {\n             final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n             private DirectoryDiff next \u003d findNext();\n   \n             private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n   \n             @Override\n-            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n+            public SnapshotAndINode next() {\n               final Snapshot s \u003d next.snapshot;\n-              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n-                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n+              final SnapshotAndINode pair \u003d new SnapshotAndINode(s);\n               next \u003d findNext();\n               return pair;\n             }\n   \n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      Snapshot snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    if (snapshot \u003d\u003d null) {\n      out.println();\n      out.print(prefix);\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      out.print(n);\n      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n      final String name \u003d getLocalName();\n      out.println(name.isEmpty()? \"/\": name);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cSnapshotAndINode\u003e() {\n        @Override\n        public Iterator\u003cSnapshotAndINode\u003e iterator() {\n          return new Iterator\u003cSnapshotAndINode\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n  \n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public SnapshotAndINode next() {\n              final Snapshot s \u003d next.snapshot;\n              final SnapshotAndINode pair \u003d new SnapshotAndINode(s);\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 3:25 PM",
      "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/01/13 1:31 PM",
      "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n       Snapshot snapshot) {\n     super.dumpTreeRecursively(out, prefix, snapshot);\n \n     if (snapshot \u003d\u003d null) {\n       out.println();\n       out.print(prefix);\n       int n \u003d 0;\n-      for(SnapshotDiff diff : getSnapshotDiffs()) {\n+      for(DirectoryDiff diff : getDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n       out.print(n);\n       out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n       final String name \u003d getLocalName();\n       out.println(name.isEmpty()? \"/\": name);\n \n       dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n         @Override\n         public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n           return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n-            final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n-            private SnapshotDiff next \u003d findNext();\n+            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n+            private DirectoryDiff next \u003d findNext();\n   \n-            private SnapshotDiff findNext() {\n+            private DirectoryDiff findNext() {\n               for(; i.hasNext(); ) {\n-                final SnapshotDiff diff \u003d i.next();\n+                final DirectoryDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n   \n             @Override\n             public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n               final Snapshot s \u003d next.snapshot;\n               final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n                   new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n               next \u003d findNext();\n               return pair;\n             }\n   \n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      Snapshot snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    if (snapshot \u003d\u003d null) {\n      out.println();\n      out.print(prefix);\n      int n \u003d 0;\n      for(DirectoryDiff diff : getDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      out.print(n);\n      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n      final String name \u003d getLocalName();\n      out.println(name.isEmpty()? \"/\": name);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n        @Override\n        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n            final Iterator\u003cDirectoryDiff\u003e i \u003d getDiffs().iterator();\n            private DirectoryDiff next \u003d findNext();\n  \n            private DirectoryDiff findNext() {\n              for(; i.hasNext(); ) {\n                final DirectoryDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n              final Snapshot s \u003d next.snapshot;\n              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/01/13 10:20 PM",
      "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/01/13 12:40 AM",
      "commitNameOld": "686e13db2fdb1cb7b8d0cc55a677b25df420156d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,58 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n       Snapshot snapshot) {\n     super.dumpTreeRecursively(out, prefix, snapshot);\n \n-    try {\n     if (snapshot \u003d\u003d null) {\n       out.println();\n       out.print(prefix);\n       int n \u003d 0;\n       for(SnapshotDiff diff : getSnapshotDiffs()) {\n         if (diff.isSnapshotRoot()) {\n           n++;\n         }\n       }\n       out.print(n);\n       out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n       final String name \u003d getLocalName();\n       out.println(name.isEmpty()? \"/\": name);\n \n       dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n         @Override\n         public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n           return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n             final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n             private SnapshotDiff next \u003d findNext();\n   \n             private SnapshotDiff findNext() {\n               for(; i.hasNext(); ) {\n                 final SnapshotDiff diff \u003d i.next();\n                 if (diff.isSnapshotRoot()) {\n                   return diff;\n                 }\n               }\n               return null;\n             }\n \n             @Override\n             public boolean hasNext() {\n               return next !\u003d null;\n             }\n   \n             @Override\n             public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n               final Snapshot s \u003d next.snapshot;\n               final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n                   new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n               next \u003d findNext();\n               return pair;\n             }\n   \n             @Override\n             public void remove() {\n               throw new UnsupportedOperationException();\n             }\n           };\n         }\n       });\n     }\n-    } catch(Exception e) {\n-      throw new RuntimeException(\"this\u003d\" + this, e);\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      Snapshot snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    if (snapshot \u003d\u003d null) {\n      out.println();\n      out.print(prefix);\n      int n \u003d 0;\n      for(SnapshotDiff diff : getSnapshotDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      out.print(n);\n      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n      final String name \u003d getLocalName();\n      out.println(name.isEmpty()? \"/\": name);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n        @Override\n        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n            final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n            private SnapshotDiff next \u003d findNext();\n  \n            private SnapshotDiff findNext() {\n              for(; i.hasNext(); ) {\n                final SnapshotDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n              final Snapshot s \u003d next.snapshot;\n              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/12 5:30 PM",
      "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/12/12 5:30 PM",
          "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/12/12 7:40 PM",
          "commitNameOld": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,62 @@\n-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {\n-    super.dumpTreeRecursively(out, prefix);\n+  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n+      Snapshot snapshot) {\n+    super.dumpTreeRecursively(out, prefix, snapshot);\n \n-    out.print(prefix);\n-    out.print(snapshots.size());\n-    out.print(snapshots.size() \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n-    out.println(getLocalName());\n-\n-    dumpTreeRecursively(out, prefix, new Iterable\u003cINodeDirectoryWithSnapshot\u003e() {\n-      @Override\n-      public Iterator\u003cINodeDirectoryWithSnapshot\u003e iterator() {\n-        return new Iterator\u003cINodeDirectoryWithSnapshot\u003e() {\n-          final Iterator\u003cSnapshot\u003e i \u003d snapshots.iterator();\n-\n-          @Override\n-          public boolean hasNext() {\n-            return i.hasNext();\n-          }\n-\n-          @Override\n-          public INodeDirectoryWithSnapshot next() {\n-            return i.next().getRoot();\n-          }\n-\n-          @Override\n-          public void remove() {\n-            throw new UnsupportedOperationException();\n-          }\n-        };\n+    try {\n+    if (snapshot \u003d\u003d null) {\n+      out.println();\n+      out.print(prefix);\n+      int n \u003d 0;\n+      for(SnapshotDiff diff : getSnapshotDiffs()) {\n+        if (diff.isSnapshotRoot()) {\n+          n++;\n+        }\n       }\n-    });\n+      out.print(n);\n+      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n+      final String name \u003d getLocalName();\n+      out.println(name.isEmpty()? \"/\": name);\n+\n+      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n+        @Override\n+        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n+          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n+            final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n+            private SnapshotDiff next \u003d findNext();\n+  \n+            private SnapshotDiff findNext() {\n+              for(; i.hasNext(); ) {\n+                final SnapshotDiff diff \u003d i.next();\n+                if (diff.isSnapshotRoot()) {\n+                  return diff;\n+                }\n+              }\n+              return null;\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+              return next !\u003d null;\n+            }\n+  \n+            @Override\n+            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n+              final Snapshot s \u003d next.snapshot;\n+              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n+                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n+              next \u003d findNext();\n+              return pair;\n+            }\n+  \n+            @Override\n+            public void remove() {\n+              throw new UnsupportedOperationException();\n+            }\n+          };\n+        }\n+      });\n+    }\n+    } catch(Exception e) {\n+      throw new RuntimeException(\"this\u003d\" + this, e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      Snapshot snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    try {\n    if (snapshot \u003d\u003d null) {\n      out.println();\n      out.print(prefix);\n      int n \u003d 0;\n      for(SnapshotDiff diff : getSnapshotDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      out.print(n);\n      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n      final String name \u003d getLocalName();\n      out.println(name.isEmpty()? \"/\": name);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n        @Override\n        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n            final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n            private SnapshotDiff next \u003d findNext();\n  \n            private SnapshotDiff findNext() {\n              for(; i.hasNext(); ) {\n                final SnapshotDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n              final Snapshot s \u003d next.snapshot;\n              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n    } catch(Exception e) {\n      throw new RuntimeException(\"this\u003d\" + this, e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {
            "oldValue": "[out-PrintWriter, prefix-StringBuilder]",
            "newValue": "[out-PrintWriter, prefix-StringBuilder, snapshot-Snapshot]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/12/12 5:30 PM",
          "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/12/12 7:40 PM",
          "commitNameOld": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,62 @@\n-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {\n-    super.dumpTreeRecursively(out, prefix);\n+  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n+      Snapshot snapshot) {\n+    super.dumpTreeRecursively(out, prefix, snapshot);\n \n-    out.print(prefix);\n-    out.print(snapshots.size());\n-    out.print(snapshots.size() \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n-    out.println(getLocalName());\n-\n-    dumpTreeRecursively(out, prefix, new Iterable\u003cINodeDirectoryWithSnapshot\u003e() {\n-      @Override\n-      public Iterator\u003cINodeDirectoryWithSnapshot\u003e iterator() {\n-        return new Iterator\u003cINodeDirectoryWithSnapshot\u003e() {\n-          final Iterator\u003cSnapshot\u003e i \u003d snapshots.iterator();\n-\n-          @Override\n-          public boolean hasNext() {\n-            return i.hasNext();\n-          }\n-\n-          @Override\n-          public INodeDirectoryWithSnapshot next() {\n-            return i.next().getRoot();\n-          }\n-\n-          @Override\n-          public void remove() {\n-            throw new UnsupportedOperationException();\n-          }\n-        };\n+    try {\n+    if (snapshot \u003d\u003d null) {\n+      out.println();\n+      out.print(prefix);\n+      int n \u003d 0;\n+      for(SnapshotDiff diff : getSnapshotDiffs()) {\n+        if (diff.isSnapshotRoot()) {\n+          n++;\n+        }\n       }\n-    });\n+      out.print(n);\n+      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n+      final String name \u003d getLocalName();\n+      out.println(name.isEmpty()? \"/\": name);\n+\n+      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n+        @Override\n+        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n+          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n+            final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n+            private SnapshotDiff next \u003d findNext();\n+  \n+            private SnapshotDiff findNext() {\n+              for(; i.hasNext(); ) {\n+                final SnapshotDiff diff \u003d i.next();\n+                if (diff.isSnapshotRoot()) {\n+                  return diff;\n+                }\n+              }\n+              return null;\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+              return next !\u003d null;\n+            }\n+  \n+            @Override\n+            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n+              final Snapshot s \u003d next.snapshot;\n+              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n+                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n+              next \u003d findNext();\n+              return pair;\n+            }\n+  \n+            @Override\n+            public void remove() {\n+              throw new UnsupportedOperationException();\n+            }\n+          };\n+        }\n+      });\n+    }\n+    } catch(Exception e) {\n+      throw new RuntimeException(\"this\u003d\" + this, e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,\n      Snapshot snapshot) {\n    super.dumpTreeRecursively(out, prefix, snapshot);\n\n    try {\n    if (snapshot \u003d\u003d null) {\n      out.println();\n      out.print(prefix);\n      int n \u003d 0;\n      for(SnapshotDiff diff : getSnapshotDiffs()) {\n        if (diff.isSnapshotRoot()) {\n          n++;\n        }\n      }\n      out.print(n);\n      out.print(n \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n      final String name \u003d getLocalName();\n      out.println(name.isEmpty()? \"/\": name);\n\n      dumpTreeRecursively(out, prefix, new Iterable\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n        @Override\n        public Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e iterator() {\n          return new Iterator\u003cPair\u003c? extends INode, Snapshot\u003e\u003e() {\n            final Iterator\u003cSnapshotDiff\u003e i \u003d getSnapshotDiffs().iterator();\n            private SnapshotDiff next \u003d findNext();\n  \n            private SnapshotDiff findNext() {\n              for(; i.hasNext(); ) {\n                final SnapshotDiff diff \u003d i.next();\n                if (diff.isSnapshotRoot()) {\n                  return diff;\n                }\n              }\n              return null;\n            }\n\n            @Override\n            public boolean hasNext() {\n              return next !\u003d null;\n            }\n  \n            @Override\n            public Pair\u003cINodeDirectory, Snapshot\u003e next() {\n              final Snapshot s \u003d next.snapshot;\n              final Pair\u003cINodeDirectory, Snapshot\u003e pair \u003d\n                  new Pair\u003cINodeDirectory, Snapshot\u003e(s.getRoot(), s);\n              next \u003d findNext();\n              return pair;\n            }\n  \n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n    }\n    } catch(Exception e) {\n      throw new RuntimeException(\"this\u003d\" + this, e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {}
        }
      ]
    },
    "f84000900afa8b6274eb227992134f24dbf5c2b4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4149. Implement the disallowSnapshot(..) in FSNamesystem and add resetSnapshottable(..) to SnapshotManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1405683 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/11/12 4:40 PM",
      "commitName": "f84000900afa8b6274eb227992134f24dbf5c2b4",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/11/12 6:31 PM",
      "commitNameOld": "e5a7b3d4307951f0574c2341178e3cd95e69f7b7",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,32 @@\n   public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {\n     super.dumpTreeRecursively(out, prefix);\n \n     out.print(prefix);\n     out.print(snapshots.size());\n     out.print(snapshots.size() \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n     out.println(getLocalName());\n \n-    dumpTreeRecursively(out, prefix, snapshots);\n+    dumpTreeRecursively(out, prefix, new Iterable\u003cINodeDirectoryWithSnapshot\u003e() {\n+      @Override\n+      public Iterator\u003cINodeDirectoryWithSnapshot\u003e iterator() {\n+        return new Iterator\u003cINodeDirectoryWithSnapshot\u003e() {\n+          final Iterator\u003cSnapshot\u003e i \u003d snapshots.iterator();\n+\n+          @Override\n+          public boolean hasNext() {\n+            return i.hasNext();\n+          }\n+\n+          @Override\n+          public INodeDirectoryWithSnapshot next() {\n+            return i.next().getRoot();\n+          }\n+\n+          @Override\n+          public void remove() {\n+            throw new UnsupportedOperationException();\n+          }\n+        };\n+      }\n+    });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {\n    super.dumpTreeRecursively(out, prefix);\n\n    out.print(prefix);\n    out.print(snapshots.size());\n    out.print(snapshots.size() \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n    out.println(getLocalName());\n\n    dumpTreeRecursively(out, prefix, new Iterable\u003cINodeDirectoryWithSnapshot\u003e() {\n      @Override\n      public Iterator\u003cINodeDirectoryWithSnapshot\u003e iterator() {\n        return new Iterator\u003cINodeDirectoryWithSnapshot\u003e() {\n          final Iterator\u003cSnapshot\u003e i \u003d snapshots.iterator();\n\n          @Override\n          public boolean hasNext() {\n            return i.hasNext();\n          }\n\n          @Override\n          public INodeDirectoryWithSnapshot next() {\n            return i.next().getRoot();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "8b71399abb323698a4850cd4f4a1e3763f13e6a2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4133. Add testcases for testing basic snapshot functionalities. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1404498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/11/12 1:29 AM",
      "commitName": "8b71399abb323698a4850cd4f4a1e3763f13e6a2",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,10 @@\n+  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {\n+    super.dumpTreeRecursively(out, prefix);\n+\n+    out.print(prefix);\n+    out.print(snapshots.size());\n+    out.print(snapshots.size() \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n+    out.println(getLocalName());\n+\n+    dumpTreeRecursively(out, prefix, snapshots);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {\n    super.dumpTreeRecursively(out, prefix);\n\n    out.print(prefix);\n    out.print(snapshots.size());\n    out.print(snapshots.size() \u003c\u003d 1 ? \" snapshot of \" : \" snapshots of \");\n    out.println(getLocalName());\n\n    dumpTreeRecursively(out, prefix, snapshots);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java"
    }
  }
}