{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerExecutor.java",
  "functionName": "writeLaunchEnv",
  "functionId": "writeLaunchEnv___out-OutputStream__environment-Map__String,String____resources-Map__Path,List__String______command-List__String____logDir-Path__user-String__nmVars-LinkedHashSet__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
  "functionStartLine": 377,
  "functionEndLine": 382,
  "numCommitsSeen": 293,
  "timeTaken": 14140,
  "changeHistory": [
    "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
    "b9a429bb2854910add8d4cf787e6ee65ebdfc9cf",
    "8013475d447a8377b5aed858208bf8b91dd32366",
    "cde3a00526c562a500308232e2b93498d22c90d7",
    "dfcbbddb0963c89c0455d41223427165b9f9e537",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "41a548a916d4248164cb9495320f123ec215d70e",
    "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
    "4810e2b849e8a27a30d2906e1389adf79952006e",
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "2fe343f96348e894e6ed16c447c8c77ba1611d11",
    "811a6a9e308935fca762a57610c56b317c43a349",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "d69b31f7f70f296ddd180e004fa0f827c2f737f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "b9a429bb2854910add8d4cf787e6ee65ebdfc9cf": "Ymultichange(Yparameterchange,Ybodychange)",
    "8013475d447a8377b5aed858208bf8b91dd32366": "Ymultichange(Yparameterchange,Ybodychange)",
    "cde3a00526c562a500308232e2b93498d22c90d7": "Ymultichange(Yparameterchange,Ybodychange)",
    "dfcbbddb0963c89c0455d41223427165b9f9e537": "Ymultichange(Yparameterchange,Ybodychange)",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "41a548a916d4248164cb9495320f123ec215d70e": "Ybodychange",
    "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "4810e2b849e8a27a30d2906e1389adf79952006e": "Ybodychange",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ybodychange",
    "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "2fe343f96348e894e6ed16c447c8c77ba1611d11": "Ybodychange",
    "811a6a9e308935fca762a57610c56b317c43a349": "Ymodifierchange",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d69b31f7f70f296ddd180e004fa0f827c2f737f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\n",
      "commitDate": "07/03/18 7:20 AM",
      "commitName": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\n",
          "commitDate": "07/03/18 7:20 AM",
          "commitName": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "23/02/18 1:46 PM",
          "commitNameOld": "8e728f39c961f034369b43e087d68d01aa4a0e7d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 11.73,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n       Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n-      String user) throws IOException {\n+      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n     this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n-        ContainerLaunch.CONTAINER_SCRIPT);\n+        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String, nmVars-LinkedHashSet\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\n",
          "commitDate": "07/03/18 7:20 AM",
          "commitName": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "23/02/18 1:46 PM",
          "commitNameOld": "8e728f39c961f034369b43e087d68d01aa4a0e7d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 11.73,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n       Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n-      String user) throws IOException {\n+      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n     this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n-        ContainerLaunch.CONTAINER_SCRIPT);\n+        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "b9a429bb2854910add8d4cf787e6ee65ebdfc9cf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\"\n\nThis reverts commit 8013475d447a8377b5aed858208bf8b91dd32366.\n",
      "commitDate": "19/02/18 6:16 AM",
      "commitName": "b9a429bb2854910add8d4cf787e6ee65ebdfc9cf",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\"\n\nThis reverts commit 8013475d447a8377b5aed858208bf8b91dd32366.\n",
          "commitDate": "19/02/18 6:16 AM",
          "commitName": "b9a429bb2854910add8d4cf787e6ee65ebdfc9cf",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "15/02/18 3:09 PM",
          "commitNameOld": "8013475d447a8377b5aed858208bf8b91dd32366",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 3.63,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n       Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n-      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n+      String user) throws IOException {\n     this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n-        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n+        ContainerLaunch.CONTAINER_SCRIPT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String, nmVars-LinkedHashSet\u003cString\u003e]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\"\n\nThis reverts commit 8013475d447a8377b5aed858208bf8b91dd32366.\n",
          "commitDate": "19/02/18 6:16 AM",
          "commitName": "b9a429bb2854910add8d4cf787e6ee65ebdfc9cf",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "15/02/18 3:09 PM",
          "commitNameOld": "8013475d447a8377b5aed858208bf8b91dd32366",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 3.63,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n       Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n-      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n+      String user) throws IOException {\n     this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n-        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n+        ContainerLaunch.CONTAINER_SCRIPT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "8013475d447a8377b5aed858208bf8b91dd32366": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\n",
      "commitDate": "15/02/18 3:09 PM",
      "commitName": "8013475d447a8377b5aed858208bf8b91dd32366",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\n",
          "commitDate": "15/02/18 3:09 PM",
          "commitName": "8013475d447a8377b5aed858208bf8b91dd32366",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "01/02/18 10:14 AM",
          "commitNameOld": "682ea21f2bbc587e1b727b3c895c2f513a908432",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 14.2,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n       Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n-      String user) throws IOException {\n+      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n     this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n-        ContainerLaunch.CONTAINER_SCRIPT);\n+        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String, nmVars-LinkedHashSet\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan\n",
          "commitDate": "15/02/18 3:09 PM",
          "commitName": "8013475d447a8377b5aed858208bf8b91dd32366",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "01/02/18 10:14 AM",
          "commitNameOld": "682ea21f2bbc587e1b727b3c895c2f513a908432",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 14.2,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n       Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n-      String user) throws IOException {\n+      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n     this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n-        ContainerLaunch.CONTAINER_SCRIPT);\n+        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user, LinkedHashSet\u003cString\u003e nmVars) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT, nmVars);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "cde3a00526c562a500308232e2b93498d22c90d7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5373. NPE listing wildcard directory in containerLaunch. (Daniel Templeton via kasha)\n",
      "commitDate": "26/08/16 11:04 AM",
      "commitName": "cde3a00526c562a500308232e2b93498d22c90d7",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5373. NPE listing wildcard directory in containerLaunch. (Daniel Templeton via kasha)\n",
          "commitDate": "26/08/16 11:04 AM",
          "commitName": "cde3a00526c562a500308232e2b93498d22c90d7",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "26/08/16 4:00 AM",
          "commitNameOld": "bfb4d950596d6198e473045dac6eb36c685b0319",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n-      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir)\n-      throws IOException {\n-    this.writeLaunchEnv(out, environment, resources, command, logDir,\n+      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n+      String user) throws IOException {\n+    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n         ContainerLaunch.CONTAINER_SCRIPT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path, user-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5373. NPE listing wildcard directory in containerLaunch. (Daniel Templeton via kasha)\n",
          "commitDate": "26/08/16 11:04 AM",
          "commitName": "cde3a00526c562a500308232e2b93498d22c90d7",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "26/08/16 4:00 AM",
          "commitNameOld": "bfb4d950596d6198e473045dac6eb36c685b0319",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n-      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir)\n-      throws IOException {\n-    this.writeLaunchEnv(out, environment, resources, command, logDir,\n+      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n+      String user) throws IOException {\n+    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n         ContainerLaunch.CONTAINER_SCRIPT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir,\n      String user) throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user,\n        ContainerLaunch.CONTAINER_SCRIPT);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "dfcbbddb0963c89c0455d41223427165b9f9e537": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4309. Add container launch related debug information to container logs when a container fails. (Varun Vasudev via wangda)\n",
      "commitDate": "14/12/15 11:13 AM",
      "commitName": "dfcbbddb0963c89c0455d41223427165b9f9e537",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4309. Add container launch related debug information to container logs when a container fails. (Varun Vasudev via wangda)\n",
          "commitDate": "14/12/15 11:13 AM",
          "commitName": "dfcbbddb0963c89c0455d41223427165b9f9e537",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "14/10/15 12:25 PM",
          "commitNameOld": "dfa78484633b3ce21471d527b9c24671e3ca5df9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.99,
          "commitsBetweenForRepo": 437,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n-    Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n-    ContainerLaunch.ShellScriptBuilder sb \u003d\n-      ContainerLaunch.ShellScriptBuilder.create();\n-    Set\u003cString\u003e whitelist \u003d new HashSet\u003cString\u003e();\n-    whitelist.add(YarnConfiguration.NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME);\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_YARN_HOME.name());\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_COMMON_HOME.name());\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_HDFS_HOME.name());\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n-    whitelist.add(ApplicationConstants.Environment.JAVA_HOME.name());\n-    if (environment !\u003d null) {\n-      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n-        if (!whitelist.contains(env.getKey())) {\n-          sb.env(env.getKey().toString(), env.getValue().toString());\n-        } else {\n-          sb.whitelistedEnv(env.getKey().toString(), env.getValue().toString());\n-        }\n-      }\n-    }\n-    if (resources !\u003d null) {\n-      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n-        for (String linkName : entry.getValue()) {\n-          sb.symlink(entry.getKey(), new Path(linkName));\n-        }\n-      }\n-    }\n-\n-    sb.command(command);\n-\n-    PrintStream pout \u003d null;\n-    try {\n-      pout \u003d new PrintStream(out, false, \"UTF-8\");\n-      sb.write(pout);\n-    } finally {\n-      if (out !\u003d null) {\n-        out.close();\n-      }\n-    }\n+      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir)\n+      throws IOException {\n+    this.writeLaunchEnv(out, environment, resources, command, logDir,\n+        ContainerLaunch.CONTAINER_SCRIPT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir)\n      throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir,\n        ContainerLaunch.CONTAINER_SCRIPT);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e, logDir-Path]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4309. Add container launch related debug information to container logs when a container fails. (Varun Vasudev via wangda)\n",
          "commitDate": "14/12/15 11:13 AM",
          "commitName": "dfcbbddb0963c89c0455d41223427165b9f9e537",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "14/10/15 12:25 PM",
          "commitNameOld": "dfa78484633b3ce21471d527b9c24671e3ca5df9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.99,
          "commitsBetweenForRepo": 437,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,6 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n-    Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n-    ContainerLaunch.ShellScriptBuilder sb \u003d\n-      ContainerLaunch.ShellScriptBuilder.create();\n-    Set\u003cString\u003e whitelist \u003d new HashSet\u003cString\u003e();\n-    whitelist.add(YarnConfiguration.NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME);\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_YARN_HOME.name());\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_COMMON_HOME.name());\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_HDFS_HOME.name());\n-    whitelist.add(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n-    whitelist.add(ApplicationConstants.Environment.JAVA_HOME.name());\n-    if (environment !\u003d null) {\n-      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n-        if (!whitelist.contains(env.getKey())) {\n-          sb.env(env.getKey().toString(), env.getValue().toString());\n-        } else {\n-          sb.whitelistedEnv(env.getKey().toString(), env.getValue().toString());\n-        }\n-      }\n-    }\n-    if (resources !\u003d null) {\n-      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n-        for (String linkName : entry.getValue()) {\n-          sb.symlink(entry.getKey(), new Path(linkName));\n-        }\n-      }\n-    }\n-\n-    sb.command(command);\n-\n-    PrintStream pout \u003d null;\n-    try {\n-      pout \u003d new PrintStream(out, false, \"UTF-8\");\n-      sb.write(pout);\n-    } finally {\n-      if (out !\u003d null) {\n-        out.close();\n-      }\n-    }\n+      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir)\n+      throws IOException {\n+    this.writeLaunchEnv(out, environment, resources, command, logDir,\n+        ContainerLaunch.CONTAINER_SCRIPT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n      Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command, Path logDir)\n      throws IOException {\n    this.writeLaunchEnv(out, environment, resources, command, logDir,\n        ContainerLaunch.CONTAINER_SCRIPT);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/05/15 11:38 AM",
      "commitNameOld": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 62.01,
      "commitsBetweenForRepo": 420,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,40 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n     Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n     ContainerLaunch.ShellScriptBuilder sb \u003d\n       ContainerLaunch.ShellScriptBuilder.create();\n+    Set\u003cString\u003e whitelist \u003d new HashSet\u003cString\u003e();\n+    whitelist.add(YarnConfiguration.NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME);\n+    whitelist.add(ApplicationConstants.Environment.HADOOP_YARN_HOME.name());\n+    whitelist.add(ApplicationConstants.Environment.HADOOP_COMMON_HOME.name());\n+    whitelist.add(ApplicationConstants.Environment.HADOOP_HDFS_HOME.name());\n+    whitelist.add(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n+    whitelist.add(ApplicationConstants.Environment.JAVA_HOME.name());\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n-        sb.env(env.getKey().toString(), env.getValue().toString());\n+        if (!whitelist.contains(env.getKey())) {\n+          sb.env(env.getKey().toString(), env.getValue().toString());\n+        } else {\n+          sb.whitelistedEnv(env.getKey().toString(), env.getValue().toString());\n+        }\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n           sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n     sb.command(command);\n \n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out, false, \"UTF-8\");\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment,\n    Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n    ContainerLaunch.ShellScriptBuilder sb \u003d\n      ContainerLaunch.ShellScriptBuilder.create();\n    Set\u003cString\u003e whitelist \u003d new HashSet\u003cString\u003e();\n    whitelist.add(YarnConfiguration.NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME);\n    whitelist.add(ApplicationConstants.Environment.HADOOP_YARN_HOME.name());\n    whitelist.add(ApplicationConstants.Environment.HADOOP_COMMON_HOME.name());\n    whitelist.add(ApplicationConstants.Environment.HADOOP_HDFS_HOME.name());\n    whitelist.add(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    whitelist.add(ApplicationConstants.Environment.JAVA_HOME.name());\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        if (!whitelist.contains(env.getKey())) {\n          sb.env(env.getKey().toString(), env.getValue().toString());\n        } else {\n          sb.whitelistedEnv(env.getKey().toString(), env.getValue().toString());\n        }\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out, false, \"UTF-8\");\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "41a548a916d4248164cb9495320f123ec215d70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2937. Fixed new findbugs warnings in hadoop-yarn-nodemanager. Contributed by Varun Saxena.\n",
      "commitDate": "23/12/14 8:32 PM",
      "commitName": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "13/11/14 8:11 AM",
      "commitNameOld": "33ea5ae92b9dd3abace104903d9a94d17dd75af5",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 40.51,
      "commitsBetweenForRepo": 283,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n     ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n           sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n     sb.command(command);\n \n     PrintStream pout \u003d null;\n     try {\n-      pout \u003d new PrintStream(out);\n+      pout \u003d new PrintStream(out, false, \"UTF-8\");\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out, false, \"UTF-8\");\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-1964. Create Docker analog of the LinuxContainerExecutor in YARN\n",
      "commitDate": "11/11/14 9:28 PM",
      "commitName": "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
      "commitAuthor": "Ravi Prakash",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-1964. Create Docker analog of the LinuxContainerExecutor in YARN\n",
          "commitDate": "11/11/14 9:28 PM",
          "commitName": "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
          "commitAuthor": "Ravi Prakash",
          "commitDateOld": "11/11/14 6:22 PM",
          "commitNameOld": "46f6f9d60d0a2c1f441a0e81a071b08c24dbd6d6",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,27 @@\n-  static void writeLaunchEnv(OutputStream out,\n-      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n-      List\u003cString\u003e command)\n-      throws IOException {\n-    ShellScriptBuilder sb \u003d ShellScriptBuilder.create();\n+  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n+    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n           sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n     sb.command(command);\n \n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
            "oldMethodName": "writeLaunchEnv",
            "newMethodName": "writeLaunchEnv"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-1964. Create Docker analog of the LinuxContainerExecutor in YARN\n",
          "commitDate": "11/11/14 9:28 PM",
          "commitName": "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
          "commitAuthor": "Ravi Prakash",
          "commitDateOld": "11/11/14 6:22 PM",
          "commitNameOld": "46f6f9d60d0a2c1f441a0e81a071b08c24dbd6d6",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,27 @@\n-  static void writeLaunchEnv(OutputStream out,\n-      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n-      List\u003cString\u003e command)\n-      throws IOException {\n-    ShellScriptBuilder sb \u003d ShellScriptBuilder.create();\n+  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n+    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n           sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n     sb.command(command);\n \n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1964. Create Docker analog of the LinuxContainerExecutor in YARN\n",
          "commitDate": "11/11/14 9:28 PM",
          "commitName": "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
          "commitAuthor": "Ravi Prakash",
          "commitDateOld": "11/11/14 6:22 PM",
          "commitNameOld": "46f6f9d60d0a2c1f441a0e81a071b08c24dbd6d6",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,27 @@\n-  static void writeLaunchEnv(OutputStream out,\n-      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n-      List\u003cString\u003e command)\n-      throws IOException {\n-    ShellScriptBuilder sb \u003d ShellScriptBuilder.create();\n+  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n+    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n           sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n     sb.command(command);\n \n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void writeLaunchEnv(OutputStream out, Map\u003cString, String\u003e environment, Map\u003cPath, List\u003cString\u003e\u003e resources, List\u003cString\u003e command) throws IOException{\n    ContainerLaunch.ShellScriptBuilder sb \u003d ContainerLaunch.ShellScriptBuilder.create();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "4810e2b849e8a27a30d2906e1389adf79952006e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1865. ShellScriptBuilder does not check for some error conditions. Contributed by Remus Rusanu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1588693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/14 11:55 AM",
      "commitName": "4810e2b849e8a27a30d2906e1389adf79952006e",
      "commitAuthor": "Ivan Mitic",
      "commitDateOld": "16/03/14 11:32 AM",
      "commitNameOld": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 34.02,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   static void writeLaunchEnv(OutputStream out,\n       Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n       List\u003cString\u003e command)\n       throws IOException {\n-    ShellScriptBuilder sb \u003d Shell.WINDOWS ? new WindowsShellScriptBuilder() :\n-      new UnixShellScriptBuilder();\n+    ShellScriptBuilder sb \u003d ShellScriptBuilder.create();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n           sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n     sb.command(command);\n \n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d ShellScriptBuilder.create();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/08/12 12:15 PM",
      "commitNameOld": "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 209.0,
      "commitsBetweenForRepo": 1053,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,31 @@\n   static void writeLaunchEnv(OutputStream out,\n       Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n       List\u003cString\u003e command)\n       throws IOException {\n-    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n+    ShellScriptBuilder sb \u003d Shell.WINDOWS ? new WindowsShellScriptBuilder() :\n+      new UnixShellScriptBuilder();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n         for (String linkName : entry.getValue()) {\n-          sb.symlink(entry.getKey(), linkName);\n+          sb.symlink(entry.getKey(), new Path(linkName));\n         }\n       }\n     }\n \n-    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n-    cmd.add(\"exec /bin/bash \");\n-    cmd.add(\"-c \");\n-    cmd.add(\"\\\"\");\n-    for (String cs : command) {\n-      cmd.add(cs.toString());\n-      cmd.add(\" \");\n-    }\n-    cmd.add(\"\\\"\");\n-    sb.line(cmd.toArray(new String[cmd.size()]));\n+    sb.command(command);\n+\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d Shell.WINDOWS ? new WindowsShellScriptBuilder() :\n      new UnixShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), new Path(linkName));\n        }\n      }\n    }\n\n    sb.command(command);\n\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-14. Symlinks to peer distributed cache files no longer work (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371390 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/12 12:15 PM",
      "commitName": "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-14. Symlinks to peer distributed cache files no longer work (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371390 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/08/12 12:15 PM",
          "commitName": "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.58,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n   static void writeLaunchEnv(OutputStream out,\n-      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n+      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n       List\u003cString\u003e command)\n       throws IOException {\n     ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n-      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n-        sb.symlink(link.getKey(), link.getValue());\n+      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n+        for (String linkName : entry.getValue()) {\n+          sb.symlink(entry.getKey(), linkName);\n+        }\n       }\n     }\n \n     ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n     cmd.add(\"exec /bin/bash \");\n     cmd.add(\"-c \");\n     cmd.add(\"\\\"\");\n     for (String cs : command) {\n       cmd.add(cs.toString());\n       cmd.add(\" \");\n     }\n     cmd.add(\"\\\"\");\n     sb.line(cmd.toArray(new String[cmd.size()]));\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), linkName);\n        }\n      }\n    }\n\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(\"exec /bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,String\u003e, command-List\u003cString\u003e]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,List\u003cString\u003e\u003e, command-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-14. Symlinks to peer distributed cache files no longer work (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371390 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/08/12 12:15 PM",
          "commitName": "82910ecaa383381ea04932a9d5e2dfa78ae9e5cb",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.58,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n   static void writeLaunchEnv(OutputStream out,\n-      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n+      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n       List\u003cString\u003e command)\n       throws IOException {\n     ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n-      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n-        sb.symlink(link.getKey(), link.getValue());\n+      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n+        for (String linkName : entry.getValue()) {\n+          sb.symlink(entry.getKey(), linkName);\n+        }\n       }\n     }\n \n     ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n     cmd.add(\"exec /bin/bash \");\n     cmd.add(\"-c \");\n     cmd.add(\"\\\"\");\n     for (String cs : command) {\n       cmd.add(cs.toString());\n       cmd.add(\" \");\n     }\n     cmd.add(\"\\\"\");\n     sb.line(cmd.toArray(new String[cmd.size()]));\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,List\u003cString\u003e\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,List\u003cString\u003e\u003e entry : resources.entrySet()) {\n        for (String linkName : entry.getValue()) {\n          sb.symlink(entry.getKey(), linkName);\n        }\n      }\n    }\n\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(\"exec /bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(\"exec /bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
      }
    },
    "2fe343f96348e894e6ed16c447c8c77ba1611d11": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3240. Fixed NodeManager to be able to forcefully cleanup its containers (process-trees) irrespective of whether the container succeeded, or killed. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 5:03 AM",
      "commitName": "2fe343f96348e894e6ed16c447c8c77ba1611d11",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/10/11 10:09 AM",
      "commitNameOld": "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   static void writeLaunchEnv(OutputStream out,\n       Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n       List\u003cString\u003e command)\n       throws IOException {\n     ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n         sb.symlink(link.getKey(), link.getValue());\n       }\n     }\n+\n     ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n-    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n-    cmd.add(\"/bin/bash \");\n+    cmd.add(\"exec /bin/bash \");\n     cmd.add(\"-c \");\n     cmd.add(\"\\\"\");\n     for (String cs : command) {\n       cmd.add(cs.toString());\n       cmd.add(\" \");\n     }\n     cmd.add(\"\\\"\");\n     sb.line(cmd.toArray(new String[cmd.size()]));\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(\"exec /bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "811a6a9e308935fca762a57610c56b317c43a349": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-3123. Fix NM to quote symlink names to escape special characters. Contributed by Hitesh Shah. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1180772 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/10/11 8:27 PM",
      "commitName": "811a6a9e308935fca762a57610c56b317c43a349",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/10/11 8:23 AM",
      "commitNameOld": "02a81203bd0ff6116e3c68d376b3af3838231986",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.5,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n-  private static void writeLaunchEnv(OutputStream out,\n+  static void writeLaunchEnv(OutputStream out,\n       Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n       List\u003cString\u003e command)\n       throws IOException {\n     ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n         sb.symlink(link.getKey(), link.getValue());\n       }\n     }\n     ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n     cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n     cmd.add(\"/bin/bash \");\n     cmd.add(\"-c \");\n     cmd.add(\"\\\"\");\n     for (String cs : command) {\n       cmd.add(cs.toString());\n       cmd.add(\" \");\n     }\n     cmd.add(\"\\\"\");\n     sb.line(cmd.toArray(new String[cmd.size()]));\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n    cmd.add(\"/bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[static]"
      }
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/09/11 11:28 AM",
          "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,36 @@\n   private static void writeLaunchEnv(OutputStream out,\n       Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n-      List\u003cString\u003e command, List\u003cPath\u003e appDirs)\n+      List\u003cString\u003e command)\n       throws IOException {\n     ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n-    if (System.getenv(\"YARN_HOME\") !\u003d null) {\n-      // TODO: Get from whitelist.\n-      sb.env(\"YARN_HOME\", System.getenv(\"YARN_HOME\"));\n-    }\n-    sb.env(ApplicationConstants.LOCAL_DIR_ENV, StringUtils.join(\",\", appDirs));\n-    if (!Shell.WINDOWS) {\n-      sb.env(\"JVM_PID\", \"$$\");\n-    }\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n         sb.symlink(link.getKey(), link.getValue());\n       }\n     }\n     ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n     cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n     cmd.add(\"/bin/bash \");\n     cmd.add(\"-c \");\n     cmd.add(\"\\\"\");\n     for (String cs : command) {\n       cmd.add(cs.toString());\n       cmd.add(\" \");\n     }\n     cmd.add(\"\\\"\");\n     sb.line(cmd.toArray(new String[cmd.size()]));\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n    cmd.add(\"/bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {
            "oldValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,String\u003e, command-List\u003cString\u003e, appDirs-List\u003cPath\u003e]",
            "newValue": "[out-OutputStream, environment-Map\u003cString,String\u003e, resources-Map\u003cPath,String\u003e, command-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/09/11 11:28 AM",
          "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,36 @@\n   private static void writeLaunchEnv(OutputStream out,\n       Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n-      List\u003cString\u003e command, List\u003cPath\u003e appDirs)\n+      List\u003cString\u003e command)\n       throws IOException {\n     ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n-    if (System.getenv(\"YARN_HOME\") !\u003d null) {\n-      // TODO: Get from whitelist.\n-      sb.env(\"YARN_HOME\", System.getenv(\"YARN_HOME\"));\n-    }\n-    sb.env(ApplicationConstants.LOCAL_DIR_ENV, StringUtils.join(\",\", appDirs));\n-    if (!Shell.WINDOWS) {\n-      sb.env(\"JVM_PID\", \"$$\");\n-    }\n     if (environment !\u003d null) {\n       for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n         sb.env(env.getKey().toString(), env.getValue().toString());\n       }\n     }\n     if (resources !\u003d null) {\n       for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n         sb.symlink(link.getKey(), link.getValue());\n       }\n     }\n     ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n     cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n     cmd.add(\"/bin/bash \");\n     cmd.add(\"-c \");\n     cmd.add(\"\\\"\");\n     for (String cs : command) {\n       cmd.add(cs.toString());\n       cmd.add(\" \");\n     }\n     cmd.add(\"\\\"\");\n     sb.line(cmd.toArray(new String[cmd.size()]));\n     PrintStream pout \u003d null;\n     try {\n       pout \u003d new PrintStream(out);\n       sb.write(pout);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n    cmd.add(\"/bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command, List\u003cPath\u003e appDirs)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (System.getenv(\"YARN_HOME\") !\u003d null) {\n      // TODO: Get from whitelist.\n      sb.env(\"YARN_HOME\", System.getenv(\"YARN_HOME\"));\n    }\n    sb.env(ApplicationConstants.LOCAL_DIR_ENV, StringUtils.join(\",\", appDirs));\n    if (!Shell.WINDOWS) {\n      sb.env(\"JVM_PID\", \"$$\");\n    }\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n    cmd.add(\"/bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,44 @@\n+  private static void writeLaunchEnv(OutputStream out,\n+      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n+      List\u003cString\u003e command, List\u003cPath\u003e appDirs)\n+      throws IOException {\n+    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n+    if (System.getenv(\"YARN_HOME\") !\u003d null) {\n+      // TODO: Get from whitelist.\n+      sb.env(\"YARN_HOME\", System.getenv(\"YARN_HOME\"));\n+    }\n+    sb.env(ApplicationConstants.LOCAL_DIR_ENV, StringUtils.join(\",\", appDirs));\n+    if (!Shell.WINDOWS) {\n+      sb.env(\"JVM_PID\", \"$$\");\n+    }\n+    if (environment !\u003d null) {\n+      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n+        sb.env(env.getKey().toString(), env.getValue().toString());\n+      }\n+    }\n+    if (resources !\u003d null) {\n+      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n+        sb.symlink(link.getKey(), link.getValue());\n+      }\n+    }\n+    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n+    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n+    cmd.add(\"/bin/bash \");\n+    cmd.add(\"-c \");\n+    cmd.add(\"\\\"\");\n+    for (String cs : command) {\n+      cmd.add(cs.toString());\n+      cmd.add(\" \");\n+    }\n+    cmd.add(\"\\\"\");\n+    sb.line(cmd.toArray(new String[cmd.size()]));\n+    PrintStream pout \u003d null;\n+    try {\n+      pout \u003d new PrintStream(out);\n+      sb.write(pout);\n+    } finally {\n+      if (out !\u003d null) {\n+        out.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void writeLaunchEnv(OutputStream out,\n      Map\u003cString,String\u003e environment, Map\u003cPath,String\u003e resources,\n      List\u003cString\u003e command, List\u003cPath\u003e appDirs)\n      throws IOException {\n    ShellScriptBuilder sb \u003d new ShellScriptBuilder();\n    if (System.getenv(\"YARN_HOME\") !\u003d null) {\n      // TODO: Get from whitelist.\n      sb.env(\"YARN_HOME\", System.getenv(\"YARN_HOME\"));\n    }\n    sb.env(ApplicationConstants.LOCAL_DIR_ENV, StringUtils.join(\",\", appDirs));\n    if (!Shell.WINDOWS) {\n      sb.env(\"JVM_PID\", \"$$\");\n    }\n    if (environment !\u003d null) {\n      for (Map.Entry\u003cString,String\u003e env : environment.entrySet()) {\n        sb.env(env.getKey().toString(), env.getValue().toString());\n      }\n    }\n    if (resources !\u003d null) {\n      for (Map.Entry\u003cPath,String\u003e link : resources.entrySet()) {\n        sb.symlink(link.getKey(), link.getValue());\n      }\n    }\n    ArrayList\u003cString\u003e cmd \u003d new ArrayList\u003cString\u003e(2 * command.size() + 5);\n    cmd.add(ContainerExecutor.isSetsidAvailable ? \"exec setsid \" : \"exec \");\n    cmd.add(\"/bin/bash \");\n    cmd.add(\"-c \");\n    cmd.add(\"\\\"\");\n    for (String cs : command) {\n      cmd.add(cs.toString());\n      cmd.add(\" \");\n    }\n    cmd.add(\"\\\"\");\n    sb.line(cmd.toArray(new String[cmd.size()]));\n    PrintStream pout \u003d null;\n    try {\n      pout \u003d new PrintStream(out);\n      sb.write(pout);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}