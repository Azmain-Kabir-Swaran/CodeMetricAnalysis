{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LoadBalancingKMSClientProvider.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken___renewer-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
  "functionStartLine": 251,
  "functionEndLine": 263,
  "numCommitsSeen": 32,
  "timeTaken": 3816,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
    "71385f9b70e22618db3f3d2b2c6dca3b1e82c317"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange,Yparametermetachange)",
    "edeb2a356ad671d962764c6e2aee9f9e7d6f394c": "Ybodychange",
    "71385f9b70e22618db3f3d2b2c6dca3b1e82c317": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "16/08/18 10:42 PM",
          "commitNameOld": "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 56.45,
          "commitsBetweenForRepo": 506,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,13 @@\n-      addDelegationTokens(final String renewer, final Credentials credentials)\n-          throws IOException {\n-    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n+  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n+    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n       @Override\n-      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n-        return provider.addDelegationTokens(renewer, credentials);\n+      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n+        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n+        // override sub-providers service with our own so it can be used\n+        // across all providers.\n+        token.setService(dtService);\n+        LOG.debug(\"New token service set. Token: ({})\", token);\n+        return token;\n       }\n     }, nextIdx(), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n      @Override\n      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n        // override sub-providers service with our own so it can be used\n        // across all providers.\n        token.setService(dtService);\n        LOG.debug(\"New token service set. Token: ({})\", token);\n        return token;\n      }\n    }, nextIdx(), false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "addDelegationTokens",
            "newValue": "getDelegationToken"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "16/08/18 10:42 PM",
          "commitNameOld": "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 56.45,
          "commitsBetweenForRepo": 506,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,13 @@\n-      addDelegationTokens(final String renewer, final Credentials credentials)\n-          throws IOException {\n-    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n+  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n+    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n       @Override\n-      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n-        return provider.addDelegationTokens(renewer, credentials);\n+      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n+        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n+        // override sub-providers service with our own so it can be used\n+        // across all providers.\n+        token.setService(dtService);\n+        LOG.debug(\"New token service set. Token: ({})\", token);\n+        return token;\n       }\n     }, nextIdx(), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n      @Override\n      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n        // override sub-providers service with our own so it can be used\n        // across all providers.\n        token.setService(dtService);\n        LOG.debug(\"New token service set. Token: ({})\", token);\n        return token;\n      }\n    }, nextIdx(), false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[renewer-String(modifiers-final), credentials-Credentials(modifiers-final)]",
            "newValue": "[renewer-String]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "16/08/18 10:42 PM",
          "commitNameOld": "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 56.45,
          "commitsBetweenForRepo": 506,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,13 @@\n-      addDelegationTokens(final String renewer, final Credentials credentials)\n-          throws IOException {\n-    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n+  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n+    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n       @Override\n-      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n-        return provider.addDelegationTokens(renewer, credentials);\n+      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n+        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n+        // override sub-providers service with our own so it can be used\n+        // across all providers.\n+        token.setService(dtService);\n+        LOG.debug(\"New token service set. Token: ({})\", token);\n+        return token;\n       }\n     }, nextIdx(), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n      @Override\n      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n        // override sub-providers service with our own so it can be used\n        // across all providers.\n        token.setService(dtService);\n        LOG.debug(\"New token service set. Token: ({})\", token);\n        return token;\n      }\n    }, nextIdx(), false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "Token\u003c?\u003e[]",
            "newValue": "Token\u003c?\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "16/08/18 10:42 PM",
          "commitNameOld": "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 56.45,
          "commitsBetweenForRepo": 506,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,13 @@\n-      addDelegationTokens(final String renewer, final Credentials credentials)\n-          throws IOException {\n-    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n+  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n+    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n       @Override\n-      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n-        return provider.addDelegationTokens(renewer, credentials);\n+      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n+        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n+        // override sub-providers service with our own so it can be used\n+        // across all providers.\n+        token.setService(dtService);\n+        LOG.debug(\"New token service set. Token: ({})\", token);\n+        return token;\n       }\n     }, nextIdx(), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n      @Override\n      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n        // override sub-providers service with our own so it can be used\n        // across all providers.\n        token.setService(dtService);\n        LOG.debug(\"New token service set. Token: ({})\", token);\n        return token;\n      }\n    }, nextIdx(), false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "16/08/18 10:42 PM",
          "commitNameOld": "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 56.45,
          "commitsBetweenForRepo": 506,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,13 @@\n-      addDelegationTokens(final String renewer, final Credentials credentials)\n-          throws IOException {\n-    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n+  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n+    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n       @Override\n-      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n-        return provider.addDelegationTokens(renewer, credentials);\n+      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n+        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n+        // override sub-providers service with our own so it can be used\n+        // across all providers.\n+        token.setService(dtService);\n+        LOG.debug(\"New token service set. Token: ({})\", token);\n+        return token;\n       }\n     }, nextIdx(), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003c?\u003e getDelegationToken(String renewer) throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e\u003e() {\n      @Override\n      public Token\u003c?\u003e call(KMSClientProvider provider) throws IOException {\n        Token\u003c?\u003e token \u003d provider.getDelegationToken(renewer);\n        // override sub-providers service with our own so it can be used\n        // across all providers.\n        token.setService(dtService);\n        LOG.debug(\"New token service set. Token: ({})\", token);\n        return token;\n      }\n    }, nextIdx(), false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[renewer-String(modifiers-final), credentials-Credentials(modifiers-final)]",
            "newValue": "[renewer-String]"
          }
        }
      ]
    },
    "edeb2a356ad671d962764c6e2aee9f9e7d6f394c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15655. Enhance KMS client retry behavior. Contributed by Kitti Nanasi.\n",
      "commitDate": "16/08/18 10:42 PM",
      "commitName": "edeb2a356ad671d962764c6e2aee9f9e7d6f394c",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "24/07/18 9:45 PM",
      "commitNameOld": "81d59506e539673edde12e19c0df5c2edd9d02ad",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 23.04,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n       addDelegationTokens(final String renewer, final Credentials credentials)\n           throws IOException {\n     return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n       @Override\n       public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n         return provider.addDelegationTokens(renewer, credentials);\n       }\n-    }, nextIdx());\n+    }, nextIdx(), false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addDelegationTokens(final String renewer, final Credentials credentials)\n          throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n      @Override\n      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n        return provider.addDelegationTokens(renewer, credentials);\n      }\n    }, nextIdx(), false);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java",
      "extendedDetails": {}
    },
    "71385f9b70e22618db3f3d2b2c6dca3b1e82c317": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11620. Add support for load balancing across a group of KMS for HA. Contributed by Arun Suresh.\n",
      "commitDate": "25/02/15 9:16 PM",
      "commitName": "71385f9b70e22618db3f3d2b2c6dca3b1e82c317",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,9 @@\n+      addDelegationTokens(final String renewer, final Credentials credentials)\n+          throws IOException {\n+    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n+      @Override\n+      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n+        return provider.addDelegationTokens(renewer, credentials);\n+      }\n+    }, nextIdx());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      addDelegationTokens(final String renewer, final Credentials credentials)\n          throws IOException {\n    return doOp(new ProviderCallable\u003cToken\u003c?\u003e[]\u003e() {\n      @Override\n      public Token\u003c?\u003e[] call(KMSClientProvider provider) throws IOException {\n        return provider.addDelegationTokens(renewer, credentials);\n      }\n    }, nextIdx());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/LoadBalancingKMSClientProvider.java"
    }
  }
}