{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "getContainerLogFiles",
  "functionId": "getContainerLogFiles___conf-Configuration__containerIdStr-String__nodeHttpAddress-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 491,
  "functionEndLine": 554,
  "numCommitsSeen": 52,
  "timeTaken": 7419,
  "changeHistory": [
    "b65815d6914996fed25bd9fef4d37d00828bc664",
    "7836bc4c3533e93e7adc0c7da0659bc04bdf2494",
    "1a84c24b0cf6674fa755403971fa57d8e412b320",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
    "c01d15ab2731b6710c94ff3bfa37d496a87b0c9f",
    "871dc420f8a4f151189c0925e062c64859a8f275",
    "1a16431bd0df52d2df32c594f8b9b506c2101ad8",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "4c9e1aeb94247a6e97215e902bdc71a325244243",
    "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
    "34ef1a092bcab369bb845481efffb8c47adef53a"
  ],
  "changeHistoryShort": {
    "b65815d6914996fed25bd9fef4d37d00828bc664": "Ybodychange",
    "7836bc4c3533e93e7adc0c7da0659bc04bdf2494": "Ybodychange",
    "1a84c24b0cf6674fa755403971fa57d8e412b320": "Ybodychange",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Ymultichange(Yreturntypechange,Ybodychange)",
    "c01d15ab2731b6710c94ff3bfa37d496a87b0c9f": "Ybodychange",
    "871dc420f8a4f151189c0925e062c64859a8f275": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1a16431bd0df52d2df32c594f8b9b506c2101ad8": "Ybodychange",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "4c9e1aeb94247a6e97215e902bdc71a325244243": "Ybodychange",
    "5d58858bb6dfc07272ef099d60ca7cfb3b04423c": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yreturntypechange,Ybodychange)",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": "Ybodychange",
    "34ef1a092bcab369bb845481efffb8c47adef53a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b65815d6914996fed25bd9fef4d37d00828bc664": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-9606. Set sslfactory for AuthenticatedURL() while creating LogsCLI#webServiceClient.\"\n\nThis reverts commit 7836bc4c3533e93e7adc0c7da0659bc04bdf2494.\n",
      "commitDate": "18/05/20 12:29 AM",
      "commitName": "b65815d6914996fed25bd9fef4d37d00828bc664",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/05/20 7:10 AM",
      "commitNameOld": "7836bc4c3533e93e7adc0c7da0659bc04bdf2494",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 3.72,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n     List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n         \u003d new ArrayList\u003c\u003e();\n     try {\n-      WebResource webResource \u003d client\n+      WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           if (!json.has(\"containerLogsInfo\")) {\n             return logFileInfos;\n           }\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             String aggregateType \u003d log.has(\"logAggregationType\") ?\n                 log.getString(\"logAggregationType\") : \"N/A\";\n             if (!log.has(\"containerLogInfo\")) {\n               continue;\n             }\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                 logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                     generatePerContainerLogFileInfoFromJSON(\n                         obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n               logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                   generatePerContainerLogFileInfoFromJSON(\n                       (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          if (!json.has(\"containerLogsInfo\")) {\n            return logFileInfos;\n          }\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            if (!log.has(\"containerLogInfo\")) {\n              continue;\n            }\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "7836bc4c3533e93e7adc0c7da0659bc04bdf2494": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9606. Set sslfactory for AuthenticatedURL() while creating LogsCLI#webServiceClient.\n\nContributed by Bilwa S T. Reviewed by Brahma Reddy Battula.\n",
      "commitDate": "14/05/20 7:10 AM",
      "commitName": "7836bc4c3533e93e7adc0c7da0659bc04bdf2494",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "06/02/20 3:25 AM",
      "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 98.11,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n     List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n         \u003d new ArrayList\u003c\u003e();\n     try {\n-      WebResource webResource \u003d webServiceClient\n+      WebResource webResource \u003d client\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           if (!json.has(\"containerLogsInfo\")) {\n             return logFileInfos;\n           }\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             String aggregateType \u003d log.has(\"logAggregationType\") ?\n                 log.getString(\"logAggregationType\") : \"N/A\";\n             if (!log.has(\"containerLogInfo\")) {\n               continue;\n             }\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                 logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                     generatePerContainerLogFileInfoFromJSON(\n                         obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n               logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                   generatePerContainerLogFileInfoFromJSON(\n                       (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    try {\n      WebResource webResource \u003d client\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          if (!json.has(\"containerLogsInfo\")) {\n            return logFileInfos;\n          }\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            if (!log.has(\"containerLogInfo\")) {\n              continue;\n            }\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "1a84c24b0cf6674fa755403971fa57d8e412b320": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7174. Add retry logic in LogsCLI when fetch running application logs. Contributed by Xuan Gong.\n",
      "commitDate": "15/09/17 3:33 PM",
      "commitName": "1a84c24b0cf6674fa755403971fa57d8e412b320",
      "commitAuthor": "Junping Du",
      "commitDateOld": "08/09/17 3:16 PM",
      "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.01,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,64 @@\n   private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n     List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n         \u003d new ArrayList\u003c\u003e();\n-    Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           if (!json.has(\"containerLogsInfo\")) {\n             return logFileInfos;\n           }\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             String aggregateType \u003d log.has(\"logAggregationType\") ?\n                 log.getString(\"logAggregationType\") : \"N/A\";\n             if (!log.has(\"containerLogInfo\")) {\n               continue;\n             }\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                 logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                     generatePerContainerLogFileInfoFromJSON(\n                         obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n               logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                   generatePerContainerLogFileInfoFromJSON(\n                       (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          if (!json.has(\"containerLogsInfo\")) {\n            return logFileInfos;\n          }\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            if (!log.has(\"containerLogInfo\")) {\n              continue;\n            }\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
          "commitDate": "08/09/17 3:16 PM",
          "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
          "commitAuthor": "Junping Du",
          "commitDateOld": "01/05/17 6:08 AM",
          "commitNameOld": "64f68cb0b8c0b93d37699893b812b37c4b05c939",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 130.38,
          "commitsBetweenForRepo": 830,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,65 @@\n-  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n+  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n-    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n+    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n         \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           if (!json.has(\"containerLogsInfo\")) {\n             return logFileInfos;\n           }\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             String aggregateType \u003d log.has(\"logAggregationType\") ?\n                 log.getString(\"logAggregationType\") : \"N/A\";\n             if (!log.has(\"containerLogInfo\")) {\n               continue;\n             }\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n-                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                     generatePerContainerLogFileInfoFromJSON(\n                         obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n-              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                   generatePerContainerLogFileInfoFromJSON(\n                       (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          if (!json.has(\"containerLogsInfo\")) {\n            return logFileInfos;\n          }\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            if (!log.has(\"containerLogInfo\")) {\n              continue;\n            }\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "List\u003cPair\u003cPerContainerLogFileInfo,String\u003e\u003e",
            "newValue": "List\u003cPair\u003cContainerLogFileInfo,String\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
          "commitDate": "08/09/17 3:16 PM",
          "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
          "commitAuthor": "Junping Du",
          "commitDateOld": "01/05/17 6:08 AM",
          "commitNameOld": "64f68cb0b8c0b93d37699893b812b37c4b05c939",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 130.38,
          "commitsBetweenForRepo": 830,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,65 @@\n-  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n+  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n-    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n+    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n         \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           if (!json.has(\"containerLogsInfo\")) {\n             return logFileInfos;\n           }\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             String aggregateType \u003d log.has(\"logAggregationType\") ?\n                 log.getString(\"logAggregationType\") : \"N/A\";\n             if (!log.has(\"containerLogInfo\")) {\n               continue;\n             }\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n-                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                     generatePerContainerLogFileInfoFromJSON(\n                         obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n-              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                   generatePerContainerLogFileInfoFromJSON(\n                       (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          if (!json.has(\"containerLogsInfo\")) {\n            return logFileInfos;\n          }\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            if (!log.has(\"containerLogInfo\")) {\n              continue;\n            }\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "c01d15ab2731b6710c94ff3bfa37d496a87b0c9f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6367. YARN logs CLI needs alway check containerLogsInfo/containerLogInfo before parse the JSON object from NMWebService. Contributed by Xuan Gong.\n",
      "commitDate": "21/03/17 10:53 AM",
      "commitName": "c01d15ab2731b6710c94ff3bfa37d496a87b0c9f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/03/17 12:58 PM",
      "commitNameOld": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 6.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,65 @@\n   private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n     List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n         \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n+          if (!json.has(\"containerLogsInfo\")) {\n+            return logFileInfos;\n+          }\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             String aggregateType \u003d log.has(\"logAggregationType\") ?\n                 log.getString(\"logAggregationType\") : \"N/A\";\n+            if (!log.has(\"containerLogInfo\")) {\n+              continue;\n+            }\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                 logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                     generatePerContainerLogFileInfoFromJSON(\n                         obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n               logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                   generatePerContainerLogFileInfoFromJSON(\n                       (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          if (!json.has(\"containerLogsInfo\")) {\n            return logFileInfos;\n          }\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            if (!log.has(\"containerLogInfo\")) {\n              continue;\n            }\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "871dc420f8a4f151189c0925e062c64859a8f275": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
      "commitDate": "14/03/17 12:58 PM",
      "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
          "commitDate": "14/03/17 12:58 PM",
          "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 40.47,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,59 @@\n-  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n+  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n-    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n+    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n+        \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n+            String aggregateType \u003d log.has(\"logAggregationType\") ?\n+                log.getString(\"logAggregationType\") : \"N/A\";\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n-                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n-                    obArray.getJSONObject(j)));\n+                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+                    generatePerContainerLogFileInfoFromJSON(\n+                        obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n-              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n-                  (JSONObject)ob));\n+              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+                  generatePerContainerLogFileInfoFromJSON(\n+                      (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "List\u003cPerContainerLogFileInfo\u003e",
            "newValue": "List\u003cPair\u003cPerContainerLogFileInfo,String\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
          "commitDate": "14/03/17 12:58 PM",
          "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 40.47,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,59 @@\n-  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n+  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n-    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n+    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n+        \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n           if (logsInfoObj instanceof JSONObject) {\n             array.put((JSONObject)logsInfoObj);\n           } else if (logsInfoObj instanceof JSONArray) {\n             JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n             for (int i\u003d0; i \u003c logsArray.length(); i++) {\n               array.put(logsArray.getJSONObject(i));\n             }\n           }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n+            String aggregateType \u003d log.has(\"logAggregationType\") ?\n+                log.getString(\"logAggregationType\") : \"N/A\";\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n-                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n-                    obArray.getJSONObject(j)));\n+                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+                    generatePerContainerLogFileInfoFromJSON(\n+                        obArray.getJSONObject(j)), aggregateType));\n               }\n             } else if (ob instanceof JSONObject) {\n-              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n-                  (JSONObject)ob));\n+              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n+                  generatePerContainerLogFileInfoFromJSON(\n+                      (JSONObject)ob), aggregateType));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPair\u003cPerContainerLogFileInfo, String\u003e\u003e logFileInfos\n        \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            String aggregateType \u003d log.has(\"logAggregationType\") ?\n                log.getString(\"logAggregationType\") : \"N/A\";\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                    generatePerContainerLogFileInfoFromJSON(\n                        obArray.getJSONObject(j)), aggregateType));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(new Pair\u003cPerContainerLogFileInfo, String\u003e(\n                  generatePerContainerLogFileInfoFromJSON(\n                      (JSONObject)ob), aggregateType));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "1a16431bd0df52d2df32c594f8b9b506c2101ad8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6126. Obtaining app logs for Running application fails with json parse error. Contributed by Xuan Gong.\n",
      "commitDate": "27/01/17 6:31 AM",
      "commitName": "1a16431bd0df52d2df32c594f8b9b506c2101ad8",
      "commitAuthor": "Junping Du",
      "commitDateOld": "24/01/17 3:26 PM",
      "commitNameOld": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 2.63,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,54 @@\n   private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n       Configuration conf, String containerIdStr, String nodeHttpAddress)\n       throws IOException {\n     List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n+          JSONArray array \u003d new JSONArray();\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n-          JSONArray array \u003d json.getJSONArray(\"containerLogsInfo\");\n+          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n+          if (logsInfoObj instanceof JSONObject) {\n+            array.put((JSONObject)logsInfoObj);\n+          } else if (logsInfoObj instanceof JSONArray) {\n+            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n+            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n+              array.put(logsArray.getJSONObject(i));\n+            }\n+          }\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n             JSONObject log \u003d array.getJSONObject(i);\n             Object ob \u003d log.get(\"containerLogInfo\");\n             if (ob instanceof JSONArray) {\n               JSONArray obArray \u003d (JSONArray)ob;\n               for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                 logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                     obArray.getJSONObject(j)));\n               }\n             } else if (ob instanceof JSONObject) {\n               logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                   (JSONObject)ob));\n             }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONArray array \u003d new JSONArray();\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          Object logsInfoObj \u003d json.get(\"containerLogsInfo\");\n          if (logsInfoObj instanceof JSONObject) {\n            array.put((JSONObject)logsInfoObj);\n          } else if (logsInfoObj instanceof JSONArray) {\n            JSONArray logsArray \u003d (JSONArray)logsInfoObj;\n            for (int i\u003d0; i \u003c logsArray.length(); i++) {\n              array.put(logsArray.getJSONObject(i));\n            }\n          }\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                    obArray.getJSONObject(j)));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                  (JSONObject)ob));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "19/12/16 5:06 PM",
          "commitNameOld": "358341398adfe8f59bb2165472b50751de3ffb98",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 35.93,
          "commitsBetweenForRepo": 171,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,45 @@\n-  private List\u003cPerLogFileInfo\u003e getContainerLogFiles(Configuration conf,\n-      String containerIdStr, String nodeHttpAddress) throws IOException {\n-    List\u003cPerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n+  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n+      Configuration conf, String containerIdStr, String nodeHttpAddress)\n+      throws IOException {\n+    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n-          JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n+          JSONArray array \u003d json.getJSONArray(\"containerLogsInfo\");\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n-            String fileName \u003d array.getJSONObject(i).getString(\"fileName\");\n-            String fileSize \u003d array.getJSONObject(i).getString(\"fileSize\");\n-            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));\n+            JSONObject log \u003d array.getJSONObject(i);\n+            Object ob \u003d log.get(\"containerLogInfo\");\n+            if (ob instanceof JSONArray) {\n+              JSONArray obArray \u003d (JSONArray)ob;\n+              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n+                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n+                    obArray.getJSONObject(j)));\n+              }\n+            } else if (ob instanceof JSONObject) {\n+              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n+                  (JSONObject)ob));\n+            }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          JSONArray array \u003d json.getJSONArray(\"containerLogsInfo\");\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                    obArray.getJSONObject(j)));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                  (JSONObject)ob));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "List\u003cPerLogFileInfo\u003e",
            "newValue": "List\u003cPerContainerLogFileInfo\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "19/12/16 5:06 PM",
          "commitNameOld": "358341398adfe8f59bb2165472b50751de3ffb98",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 35.93,
          "commitsBetweenForRepo": 171,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,45 @@\n-  private List\u003cPerLogFileInfo\u003e getContainerLogFiles(Configuration conf,\n-      String containerIdStr, String nodeHttpAddress) throws IOException {\n-    List\u003cPerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n+  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n+      Configuration conf, String containerIdStr, String nodeHttpAddress)\n+      throws IOException {\n+    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n-          JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n+          JSONArray array \u003d json.getJSONArray(\"containerLogsInfo\");\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n-            String fileName \u003d array.getJSONObject(i).getString(\"fileName\");\n-            String fileSize \u003d array.getJSONObject(i).getString(\"fileSize\");\n-            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));\n+            JSONObject log \u003d array.getJSONObject(i);\n+            Object ob \u003d log.get(\"containerLogInfo\");\n+            if (ob instanceof JSONArray) {\n+              JSONArray obArray \u003d (JSONArray)ob;\n+              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n+                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n+                    obArray.getJSONObject(j)));\n+              }\n+            } else if (ob instanceof JSONObject) {\n+              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n+                  (JSONObject)ob));\n+            }\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPerContainerLogFileInfo\u003e getContainerLogFiles(\n      Configuration conf, String containerIdStr, String nodeHttpAddress)\n      throws IOException {\n    List\u003cPerContainerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          JSONArray array \u003d json.getJSONArray(\"containerLogsInfo\");\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            JSONObject log \u003d array.getJSONObject(i);\n            Object ob \u003d log.get(\"containerLogInfo\");\n            if (ob instanceof JSONArray) {\n              JSONArray obArray \u003d (JSONArray)ob;\n              for (int j \u003d 0; j \u003c obArray.length(); j++) {\n                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                    obArray.getJSONObject(j)));\n              }\n            } else if (ob instanceof JSONObject) {\n              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(\n                  (JSONObject)ob));\n            }\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
          "commitDate": "13/07/16 10:54 AM",
          "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/07/16 8:29 AM",
          "commitNameOld": "7705812c7e3a9f3f774130e25443fda249c08c9c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,35 @@\n-  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n+  private List\u003cPerLogFileInfo\u003e getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n-    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n+    List\u003cPerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n-            logFiles.add(array.getJSONObject(i).getString(\"fileName\"));\n+            String fileName \u003d array.getJSONObject(i).getString(\"fileName\");\n+            String fileSize \u003d array.getJSONObject(i).getString(\"fileSize\");\n+            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n-    return logFiles;\n+    return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPerLogFileInfo\u003e getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cPerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            String fileName \u003d array.getJSONObject(i).getString(\"fileName\");\n            String fileSize \u003d array.getJSONObject(i).getString(\"fileSize\");\n            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "List\u003cString\u003e",
            "newValue": "List\u003cPerLogFileInfo\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
          "commitDate": "13/07/16 10:54 AM",
          "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/07/16 8:29 AM",
          "commitNameOld": "7705812c7e3a9f3f774130e25443fda249c08c9c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,35 @@\n-  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n+  private List\u003cPerLogFileInfo\u003e getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n-    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n+    List\u003cPerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).path(\"logs\")\n               .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           JSONObject json \u003d response.getEntity(JSONObject.class);\n           JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n           for (int i \u003d 0; i \u003c array.length(); i++) {\n-            logFiles.add(array.getJSONObject(i).getString(\"fileName\"));\n+            String fileName \u003d array.getJSONObject(i).getString(\"fileName\");\n+            String fileSize \u003d array.getJSONObject(i).getString(\"fileSize\");\n+            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n-    return logFiles;\n+    return logFileInfos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cPerLogFileInfo\u003e getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cPerLogFileInfo\u003e logFileInfos \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            String fileName \u003d array.getJSONObject(i).getString(\"fileName\");\n            String fileSize \u003d array.getJSONObject(i).getString(\"fileSize\");\n            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFileInfos;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c9e1aeb94247a6e97215e902bdc71a325244243": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5224. Added new web-services /containers/{containerid}/logs \u0026 /containers/{containerid}/logs/{filename} and using them in \"yarn logs\" CLI to get logs of finished containers of a running application. Contributed by Xuan Gong.\n",
      "commitDate": "06/07/16 2:10 PM",
      "commitName": "4c9e1aeb94247a6e97215e902bdc71a325244243",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/07/16 10:43 AM",
      "commitNameOld": "d169f5052fe83debcea7cf2f317dcd990890a857",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,33 @@\n   private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n     List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n-              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n+              .path(containerIdStr).path(\"logs\")\n+              .accept(MediaType.APPLICATION_JSON)\n               .get(ClientResponse.class);\n       if (response.getStatusInfo().getStatusCode() \u003d\u003d\n           ClientResponse.Status.OK.getStatusCode()) {\n         try {\n-          String xml \u003d response.getEntity(String.class);\n-          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n-          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n-          InputSource is \u003d new InputSource();\n-          is.setCharacterStream(new StringReader(xml));\n-          Document dom \u003d db.parse(is);\n-          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n-          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n-            logFiles.add(elements.item(i).getTextContent());\n+          JSONObject json \u003d response.getEntity(JSONObject.class);\n+          JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n+          for (int i \u003d 0; i \u003c array.length(); i++) {\n+            logFiles.add(array.getJSONObject(i).getString(\"fileName\"));\n           }\n         } catch (Exception e) {\n-          System.err.println(\"Unable to parse xml from webservice. Error:\");\n+          System.err.println(\"Unable to parse json from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).path(\"logs\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          JSONObject json \u003d response.getEntity(JSONObject.class);\n          JSONArray array \u003d json.getJSONArray(\"containerLogInfo\");\n          for (int i \u003d 0; i \u003c array.length(); i++) {\n            logFiles.add(array.getJSONObject(i).getString(\"fileName\"));\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse json from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "5d58858bb6dfc07272ef099d60ca7cfb3b04423c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9613. [JDK8] Update jersey version to latest 1.x release.\n",
      "commitDate": "20/06/16 4:05 PM",
      "commitName": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "16/06/16 8:55 AM",
      "commitNameOld": "e14ee0d3b55816bed1d27a8caf78001985119e3c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 4.3,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n     List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n               .get(ClientResponse.class);\n-      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n+      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n+          ClientResponse.Status.OK.getStatusCode()) {\n         try {\n           String xml \u003d response.getEntity(String.class);\n           DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n           DocumentBuilder db \u003d dbf.newDocumentBuilder();\n           InputSource is \u003d new InputSource();\n           is.setCharacterStream(new StringReader(xml));\n           Document dom \u003d db.parse(is);\n           NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n           for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n             logFiles.add(elements.item(i).getTextContent());\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse xml from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n              .get(ClientResponse.class);\n      if (response.getStatusInfo().getStatusCode() \u003d\u003d\n          ClientResponse.Status.OK.getStatusCode()) {\n        try {\n          String xml \u003d response.getEntity(String.class);\n          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n          InputSource is \u003d new InputSource();\n          is.setCharacterStream(new StringReader(xml));\n          Document dom \u003d db.parse(is);\n          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n            logFiles.add(elements.item(i).getTextContent());\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse xml from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  private String[] getContainerLogFiles(Configuration conf,\n+  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n     List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n               .get(ClientResponse.class);\n       if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n         try {\n           String xml \u003d response.getEntity(String.class);\n           DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n           DocumentBuilder db \u003d dbf.newDocumentBuilder();\n           InputSource is \u003d new InputSource();\n           is.setCharacterStream(new StringReader(xml));\n           Document dom \u003d db.parse(is);\n           NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n           for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n             logFiles.add(elements.item(i).getTextContent());\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse xml from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n-    return logFiles.toArray(new String[0]);\n+    return logFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n              .get(ClientResponse.class);\n      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n        try {\n          String xml \u003d response.getEntity(String.class);\n          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n          InputSource is \u003d new InputSource();\n          is.setCharacterStream(new StringReader(xml));\n          Document dom \u003d db.parse(is);\n          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n            logFiles.add(elements.item(i).getTextContent());\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse xml from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "String[]",
            "newValue": "List\u003cString\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  private String[] getContainerLogFiles(Configuration conf,\n+  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n     List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n               .get(ClientResponse.class);\n       if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n         try {\n           String xml \u003d response.getEntity(String.class);\n           DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n           DocumentBuilder db \u003d dbf.newDocumentBuilder();\n           InputSource is \u003d new InputSource();\n           is.setCharacterStream(new StringReader(xml));\n           Document dom \u003d db.parse(is);\n           NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n           for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n             logFiles.add(elements.item(i).getTextContent());\n           }\n         } catch (Exception e) {\n           System.err.println(\"Unable to parse xml from webservice. Error:\");\n           System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n       System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n-    return logFiles.toArray(new String[0]);\n+    return logFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n              .get(ClientResponse.class);\n      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n        try {\n          String xml \u003d response.getEntity(String.class);\n          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n          InputSource is \u003d new InputSource();\n          is.setCharacterStream(new StringReader(xml));\n          Document dom \u003d db.parse(is);\n          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n            logFiles.add(elements.item(i).getTextContent());\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse xml from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 2:16 PM",
      "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/04/16 3:26 AM",
      "commitNameOld": "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 7.45,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private String[] getContainerLogFiles(Configuration conf,\n       String containerIdStr, String nodeHttpAddress) throws IOException {\n     List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n     Client webServiceClient \u003d Client.create();\n     try {\n       WebResource webResource \u003d webServiceClient\n           .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n       ClientResponse response \u003d\n           webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n               .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n               .get(ClientResponse.class);\n       if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n         try {\n           String xml \u003d response.getEntity(String.class);\n           DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n           DocumentBuilder db \u003d dbf.newDocumentBuilder();\n           InputSource is \u003d new InputSource();\n           is.setCharacterStream(new StringReader(xml));\n           Document dom \u003d db.parse(is);\n           NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n           for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n             logFiles.add(elements.item(i).getTextContent());\n           }\n         } catch (Exception e) {\n-          System.out.println(\"Unable to parse xml from webservice. Error:\");\n-          System.out.println(e.getMessage());\n+          System.err.println(\"Unable to parse xml from webservice. Error:\");\n+          System.err.println(e.getMessage());\n           throw new IOException(e);\n         }\n       }\n \n     } catch (ClientHandlerException | UniformInterfaceException ex) {\n-      System.out.println(\"Unable to fetch log files list\");\n+      System.err.println(\"Unable to fetch log files list\");\n       throw new IOException(ex);\n     }\n     return logFiles.toArray(new String[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String[] getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n              .get(ClientResponse.class);\n      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n        try {\n          String xml \u003d response.getEntity(String.class);\n          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n          InputSource is \u003d new InputSource();\n          is.setCharacterStream(new StringReader(xml));\n          Document dom \u003d db.parse(is);\n          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n            logFiles.add(elements.item(i).getTextContent());\n          }\n        } catch (Exception e) {\n          System.err.println(\"Unable to parse xml from webservice. Error:\");\n          System.err.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.err.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFiles.toArray(new String[0]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "34ef1a092bcab369bb845481efffb8c47adef53a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4149. yarn logs -am should provide an option to fetch all the log\nfiles. Contributed by Varun Vasudev\n",
      "commitDate": "15/09/15 2:36 PM",
      "commitName": "34ef1a092bcab369bb845481efffb8c47adef53a",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,36 @@\n+  private String[] getContainerLogFiles(Configuration conf,\n+      String containerIdStr, String nodeHttpAddress) throws IOException {\n+    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n+    Client webServiceClient \u003d Client.create();\n+    try {\n+      WebResource webResource \u003d webServiceClient\n+          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n+      ClientResponse response \u003d\n+          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n+              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n+              .get(ClientResponse.class);\n+      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n+        try {\n+          String xml \u003d response.getEntity(String.class);\n+          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n+          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n+          InputSource is \u003d new InputSource();\n+          is.setCharacterStream(new StringReader(xml));\n+          Document dom \u003d db.parse(is);\n+          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n+          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n+            logFiles.add(elements.item(i).getTextContent());\n+          }\n+        } catch (Exception e) {\n+          System.out.println(\"Unable to parse xml from webservice. Error:\");\n+          System.out.println(e.getMessage());\n+          throw new IOException(e);\n+        }\n+      }\n+\n+    } catch (ClientHandlerException | UniformInterfaceException ex) {\n+      System.out.println(\"Unable to fetch log files list\");\n+      throw new IOException(ex);\n+    }\n+    return logFiles.toArray(new String[0]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String[] getContainerLogFiles(Configuration conf,\n      String containerIdStr, String nodeHttpAddress) throws IOException {\n    List\u003cString\u003e logFiles \u003d new ArrayList\u003c\u003e();\n    Client webServiceClient \u003d Client.create();\n    try {\n      WebResource webResource \u003d webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\n      ClientResponse response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n              .path(containerIdStr).accept(MediaType.APPLICATION_XML)\n              .get(ClientResponse.class);\n      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {\n        try {\n          String xml \u003d response.getEntity(String.class);\n          DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n          DocumentBuilder db \u003d dbf.newDocumentBuilder();\n          InputSource is \u003d new InputSource();\n          is.setCharacterStream(new StringReader(xml));\n          Document dom \u003d db.parse(is);\n          NodeList elements \u003d dom.getElementsByTagName(\"containerLogFiles\");\n          for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n            logFiles.add(elements.item(i).getTextContent());\n          }\n        } catch (Exception e) {\n          System.out.println(\"Unable to parse xml from webservice. Error:\");\n          System.out.println(e.getMessage());\n          throw new IOException(e);\n        }\n      }\n\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\n      System.out.println(\"Unable to fetch log files list\");\n      throw new IOException(ex);\n    }\n    return logFiles.toArray(new String[0]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}