{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "initAuditLoggers",
  "functionId": "initAuditLoggers___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 1129,
  "functionEndLine": 1180,
  "numCommitsSeen": 873,
  "timeTaken": 47320,
  "changeHistory": [
    "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
    "633b7c1cfecde6166899449efae6326ee03cd8c4",
    "b964b81f8509ba6cd938bc36f3acb5e3112b7ca2",
    "61f0490a73085bbaf6639d9234277e59dc1145db",
    "af2dccbca50b25f84d9d6c88e1a237a42261ce02",
    "fa7b9248e415c04bb555772f44fadaf8d9f34974",
    "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
    "390d689816e7166ad3e823a5610ccff2147087a6",
    "df2fb006b28bf1907fe3c54255e5f6bbb7698285"
  ],
  "changeHistoryShort": {
    "cd2c6b1aac470991b9b90339ce2721ba179e7c48": "Ybodychange",
    "633b7c1cfecde6166899449efae6326ee03cd8c4": "Ybodychange",
    "b964b81f8509ba6cd938bc36f3acb5e3112b7ca2": "Ybodychange",
    "61f0490a73085bbaf6639d9234277e59dc1145db": "Ybodychange",
    "af2dccbca50b25f84d9d6c88e1a237a42261ce02": "Ybodychange",
    "fa7b9248e415c04bb555772f44fadaf8d9f34974": "Ybodychange",
    "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb": "Ybodychange",
    "390d689816e7166ad3e823a5610ccff2147087a6": "Ybodychange",
    "df2fb006b28bf1907fe3c54255e5f6bbb7698285": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd2c6b1aac470991b9b90339ce2721ba179e7c48": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15124. Crashing bugs in NameNode when using a valid configuration for . Contributed by Ctest.\n",
      "commitDate": "27/02/20 8:49 AM",
      "commitName": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "26/02/20 2:32 PM",
      "commitNameOld": "033a3d7ff943c3a0b540db568b54a3ec708e1b5e",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,52 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d\n         conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n+    boolean topAuditLoggerAdded \u003d false;\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new FSNamesystemAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n+            if (TopAuditLogger.class.getName().equals(\n+                    logger.getClass().getName())) {\n+              topAuditLoggerAdded \u003d true;\n+            }\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n+        } catch (InstantiationException e) {\n+          LOG.error(\"{} instantiation failed.\", className, e);\n+          throw new RuntimeException(e);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n       FSNamesystemAuditLogger fsNamesystemAuditLogger \u003d new FSNamesystemAuditLogger();\n       fsNamesystemAuditLogger.initialize(conf);\n       auditLoggers.add(fsNamesystemAuditLogger);\n     }\n \n     // Add audit logger to calculate top users\n-    if (topConf.isEnabled) {\n+    if (topConf.isEnabled \u0026\u0026 !topAuditLoggerAdded) {\n       topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n       if (DefaultMetricsSystem.instance().getSource(\n           TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n         DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n             \"Top N operations by user\", topMetrics);\n       }\n       auditLoggers.add(new TopAuditLogger(topMetrics));\n     }\n \n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d\n        conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    boolean topAuditLoggerAdded \u003d false;\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new FSNamesystemAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n            if (TopAuditLogger.class.getName().equals(\n                    logger.getClass().getName())) {\n              topAuditLoggerAdded \u003d true;\n            }\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (InstantiationException e) {\n          LOG.error(\"{} instantiation failed.\", className, e);\n          throw new RuntimeException(e);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      FSNamesystemAuditLogger fsNamesystemAuditLogger \u003d new FSNamesystemAuditLogger();\n      fsNamesystemAuditLogger.initialize(conf);\n      auditLoggers.add(fsNamesystemAuditLogger);\n    }\n\n    // Add audit logger to calculate top users\n    if (topConf.isEnabled \u0026\u0026 !topAuditLoggerAdded) {\n      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n      if (DefaultMetricsSystem.instance().getSource(\n          TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n        DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n            \"Top N operations by user\", topMetrics);\n      }\n      auditLoggers.add(new TopAuditLogger(topMetrics));\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "633b7c1cfecde6166899449efae6326ee03cd8c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14625. Make DefaultAuditLogger class in FSnamesystem to Abstract. Contributed by hemanthboyina.\n",
      "commitDate": "13/08/19 4:50 PM",
      "commitName": "633b7c1cfecde6166899449efae6326ee03cd8c4",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "02/08/19 10:54 AM",
      "commitNameOld": "b964b81f8509ba6cd938bc36f3acb5e3112b7ca2",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 11.25,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d\n         conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n-            logger \u003d new DefaultAuditLogger();\n+            logger \u003d new FSNamesystemAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n-      DefaultAuditLogger defaultAuditLogger \u003d new DefaultAuditLogger();\n-      defaultAuditLogger.initialize(conf);\n-      auditLoggers.add(defaultAuditLogger);\n+      FSNamesystemAuditLogger fsNamesystemAuditLogger \u003d new FSNamesystemAuditLogger();\n+      fsNamesystemAuditLogger.initialize(conf);\n+      auditLoggers.add(fsNamesystemAuditLogger);\n     }\n \n     // Add audit logger to calculate top users\n     if (topConf.isEnabled) {\n       topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n       if (DefaultMetricsSystem.instance().getSource(\n           TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n         DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n             \"Top N operations by user\", topMetrics);\n       }\n       auditLoggers.add(new TopAuditLogger(topMetrics));\n     }\n \n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d\n        conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new FSNamesystemAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      FSNamesystemAuditLogger fsNamesystemAuditLogger \u003d new FSNamesystemAuditLogger();\n      fsNamesystemAuditLogger.initialize(conf);\n      auditLoggers.add(fsNamesystemAuditLogger);\n    }\n\n    // Add audit logger to calculate top users\n    if (topConf.isEnabled) {\n      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n      if (DefaultMetricsSystem.instance().getSource(\n          TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n        DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n            \"Top N operations by user\", topMetrics);\n      }\n      auditLoggers.add(new TopAuditLogger(topMetrics));\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "b964b81f8509ba6cd938bc36f3acb5e3112b7ca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14685. DefaultAuditLogger doesn\u0027t print CallerContext. Contributed by xuzq.\n",
      "commitDate": "02/08/19 10:54 AM",
      "commitName": "b964b81f8509ba6cd938bc36f3acb5e3112b7ca2",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "30/07/19 1:45 PM",
      "commitNameOld": "7849bdcf70b8170ad50712dde52bfbd1dfccb28a",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d\n         conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new DefaultAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n-      auditLoggers.add(new DefaultAuditLogger());\n+      DefaultAuditLogger defaultAuditLogger \u003d new DefaultAuditLogger();\n+      defaultAuditLogger.initialize(conf);\n+      auditLoggers.add(defaultAuditLogger);\n     }\n \n     // Add audit logger to calculate top users\n     if (topConf.isEnabled) {\n       topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n       if (DefaultMetricsSystem.instance().getSource(\n           TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n         DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n             \"Top N operations by user\", topMetrics);\n       }\n       auditLoggers.add(new TopAuditLogger(topMetrics));\n     }\n \n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d\n        conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      DefaultAuditLogger defaultAuditLogger \u003d new DefaultAuditLogger();\n      defaultAuditLogger.initialize(conf);\n      auditLoggers.add(defaultAuditLogger);\n    }\n\n    // Add audit logger to calculate top users\n    if (topConf.isEnabled) {\n      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n      if (DefaultMetricsSystem.instance().getSource(\n          TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n        DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n            \"Top N operations by user\", topMetrics);\n      }\n      auditLoggers.add(new TopAuditLogger(topMetrics));\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "61f0490a73085bbaf6639d9234277e59dc1145db": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10984. Expose nntop output as metrics. Contributed by Siddharth Wagle.\n",
      "commitDate": "11/10/16 3:55 PM",
      "commitName": "61f0490a73085bbaf6639d9234277e59dc1145db",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "10/10/16 3:30 PM",
      "commitNameOld": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,42 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d\n         conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new DefaultAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n       auditLoggers.add(new DefaultAuditLogger());\n     }\n \n     // Add audit logger to calculate top users\n     if (topConf.isEnabled) {\n       topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n+      if (DefaultMetricsSystem.instance().getSource(\n+          TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n+        DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n+            \"Top N operations by user\", topMetrics);\n+      }\n       auditLoggers.add(new TopAuditLogger(topMetrics));\n     }\n \n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d\n        conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      auditLoggers.add(new DefaultAuditLogger());\n    }\n\n    // Add audit logger to calculate top users\n    if (topConf.isEnabled) {\n      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n      if (DefaultMetricsSystem.instance().getSource(\n          TOPMETRICS_METRICS_SOURCE_NAME) \u003d\u003d null) {\n        DefaultMetricsSystem.instance().register(TOPMETRICS_METRICS_SOURCE_NAME,\n            \"Top N operations by user\", topMetrics);\n      }\n      auditLoggers.add(new TopAuditLogger(topMetrics));\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "af2dccbca50b25f84d9d6c88e1a237a42261ce02": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9708. FSNamesystem.initAuditLoggers() doesn\u0027t trim classnames  (Mingliang Liu via stevel)\n",
      "commitDate": "01/02/16 8:01 AM",
      "commitName": "af2dccbca50b25f84d9d6c88e1a237a42261ce02",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/01/16 4:34 PM",
      "commitNameOld": "ec25c7f9c7e60c077d8c4143253c20445fcdaecf",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 4.64,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n-    Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n+    Collection\u003cString\u003e alClasses \u003d\n+        conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new DefaultAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n       auditLoggers.add(new DefaultAuditLogger());\n     }\n \n     // Add audit logger to calculate top users\n     if (topConf.isEnabled) {\n       topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n       auditLoggers.add(new TopAuditLogger(topMetrics));\n     }\n \n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d\n        conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      auditLoggers.add(new DefaultAuditLogger());\n    }\n\n    // Add audit logger to calculate top users\n    if (topConf.isEnabled) {\n      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n      auditLoggers.add(new TopAuditLogger(topMetrics));\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "fa7b9248e415c04bb555772f44fadaf8d9f34974": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7426. Change nntop JMX format to be a JSON blob.\n",
      "commitDate": "12/12/14 5:04 PM",
      "commitName": "fa7b9248e415c04bb555772f44fadaf8d9f34974",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/12/14 3:13 PM",
      "commitNameOld": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,36 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new DefaultAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n       auditLoggers.add(new DefaultAuditLogger());\n     }\n \n     // Add audit logger to calculate top users\n-    if (conf.getBoolean(DFSConfigKeys.NNTOP_ENABLED_KEY,\n-        DFSConfigKeys.NNTOP_ENABLED_DEFAULT)) {\n-      String sessionId \u003d conf.get(DFSConfigKeys.DFS_METRICS_SESSION_ID_KEY);\n-      TopConf nntopConf \u003d new TopConf(conf);\n-      TopMetrics.initSingleton(conf, NamenodeRole.NAMENODE.name(), sessionId,\n-          nntopConf.nntopReportingPeriodsMs);\n-      auditLoggers.add(new TopAuditLogger());\n+    if (topConf.isEnabled) {\n+      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n+      auditLoggers.add(new TopAuditLogger(topMetrics));\n     }\n \n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      auditLoggers.add(new DefaultAuditLogger());\n    }\n\n    // Add audit logger to calculate top users\n    if (topConf.isEnabled) {\n      topMetrics \u003d new TopMetrics(conf, topConf.nntopReportingPeriodsMs);\n      auditLoggers.add(new TopAuditLogger(topMetrics));\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6982. nntop: top­-like tool for name node users. (Maysam Yabandeh via wang)\n",
      "commitDate": "17/11/14 5:33 PM",
      "commitName": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/11/14 6:22 PM",
      "commitNameOld": "46f6f9d60d0a2c1f441a0e81a071b08c24dbd6d6",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 5.97,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,40 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new DefaultAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n       auditLoggers.add(new DefaultAuditLogger());\n     }\n+\n+    // Add audit logger to calculate top users\n+    if (conf.getBoolean(DFSConfigKeys.NNTOP_ENABLED_KEY,\n+        DFSConfigKeys.NNTOP_ENABLED_DEFAULT)) {\n+      String sessionId \u003d conf.get(DFSConfigKeys.DFS_METRICS_SESSION_ID_KEY);\n+      TopConf nntopConf \u003d new TopConf(conf);\n+      TopMetrics.initSingleton(conf, NamenodeRole.NAMENODE.name(), sessionId,\n+          nntopConf.nntopReportingPeriodsMs);\n+      auditLoggers.add(new TopAuditLogger());\n+    }\n+\n     return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      auditLoggers.add(new DefaultAuditLogger());\n    }\n\n    // Add audit logger to calculate top users\n    if (conf.getBoolean(DFSConfigKeys.NNTOP_ENABLED_KEY,\n        DFSConfigKeys.NNTOP_ENABLED_DEFAULT)) {\n      String sessionId \u003d conf.get(DFSConfigKeys.DFS_METRICS_SESSION_ID_KEY);\n      TopConf nntopConf \u003d new TopConf(conf);\n      TopMetrics.initSingleton(conf, NamenodeRole.NAMENODE.name(), sessionId,\n          nntopConf.nntopReportingPeriodsMs);\n      auditLoggers.add(new TopAuditLogger());\n    }\n\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "390d689816e7166ad3e823a5610ccff2147087a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5061. Make FSNameSystem#auditLoggers an unmodifiable list. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1510611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/13 10:08 AM",
      "commitName": "390d689816e7166ad3e823a5610ccff2147087a6",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "30/07/13 12:51 AM",
      "commitNameOld": "8c7a7e619699386f9e6991842558d78aa0c8053d",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 6.39,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n     // Initialize the custom access loggers if configured.\n     Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n     List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n     if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n       for (String className : alClasses) {\n         try {\n           AuditLogger logger;\n           if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n             logger \u003d new DefaultAuditLogger();\n           } else {\n             logger \u003d (AuditLogger) Class.forName(className).newInstance();\n           }\n           logger.initialize(conf);\n           auditLoggers.add(logger);\n         } catch (RuntimeException re) {\n           throw re;\n         } catch (Exception e) {\n           throw new RuntimeException(e);\n         }\n       }\n     }\n \n     // Make sure there is at least one logger installed.\n     if (auditLoggers.isEmpty()) {\n       auditLoggers.add(new DefaultAuditLogger());\n     }\n-    return auditLoggers;\n+    return Collections.unmodifiableList(auditLoggers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      auditLoggers.add(new DefaultAuditLogger());\n    }\n    return Collections.unmodifiableList(auditLoggers);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "df2fb006b28bf1907fe3c54255e5f6bbb7698285": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3680. Allow customized audit logging in HDFS FSNamesystem. Contributed by Marcelo Vanzin.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1418114 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/12 2:27 PM",
      "commitName": "df2fb006b28bf1907fe3c54255e5f6bbb7698285",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,29 @@\n+  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n+    // Initialize the custom access loggers if configured.\n+    Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n+    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n+    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n+      for (String className : alClasses) {\n+        try {\n+          AuditLogger logger;\n+          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n+            logger \u003d new DefaultAuditLogger();\n+          } else {\n+            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n+          }\n+          logger.initialize(conf);\n+          auditLoggers.add(logger);\n+        } catch (RuntimeException re) {\n+          throw re;\n+        } catch (Exception e) {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+    }\n+\n+    // Make sure there is at least one logger installed.\n+    if (auditLoggers.isEmpty()) {\n+      auditLoggers.add(new DefaultAuditLogger());\n+    }\n+    return auditLoggers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cAuditLogger\u003e initAuditLoggers(Configuration conf) {\n    // Initialize the custom access loggers if configured.\n    Collection\u003cString\u003e alClasses \u003d conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n    List\u003cAuditLogger\u003e auditLoggers \u003d Lists.newArrayList();\n    if (alClasses !\u003d null \u0026\u0026 !alClasses.isEmpty()) {\n      for (String className : alClasses) {\n        try {\n          AuditLogger logger;\n          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n            logger \u003d new DefaultAuditLogger();\n          } else {\n            logger \u003d (AuditLogger) Class.forName(className).newInstance();\n          }\n          logger.initialize(conf);\n          auditLoggers.add(logger);\n        } catch (RuntimeException re) {\n          throw re;\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Make sure there is at least one logger installed.\n    if (auditLoggers.isEmpty()) {\n      auditLoggers.add(new DefaultAuditLogger());\n    }\n    return auditLoggers;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}