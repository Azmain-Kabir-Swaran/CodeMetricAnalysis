{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "setattr",
  "functionId": "setattr___xdr-XDR__info-RpcInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 402,
  "functionEndLine": 404,
  "numCommitsSeen": 105,
  "timeTaken": 3968,
  "changeHistory": [
    "c9aa74743773c61be938cc1a6ea811ae1404bca2",
    "2ecab65e3e290a1ee192b39ec70868863853543a",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
    "05f35518f19d48890770128727289582cca3457b",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Ybodychange",
    "2ecab65e3e290a1ee192b39ec70868863853543a": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": "Ybodychange",
    "05f35518f19d48890770128727289582cca3457b": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Ymultichange(Yparameterchange,Ybodychange)",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Ymultichange(Yparameterchange,Ybodychange)",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,3 @@\n   public SETATTR3Response setattr(XDR xdr, RpcInfo info) {\n-    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n-    \n-    SETATTR3Request request \u003d null;\n-    try {\n-      request \u003d new SETATTR3Request(xdr);\n-    } catch (IOException e) {\n-      LOG.error(\"Invalid SETATTR request\");\n-      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n-      return response;\n-    }\n-\n-    FileHandle handle \u003d request.getHandle();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n-    }\n-\n-    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n-      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n-          + handle.getFileId());\n-      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n-      return response;\n-    }\n-\n-    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n-    Nfs3FileAttributes preOpAttr \u003d null;\n-    try {\n-      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      if (preOpAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n-        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n-        return response;\n-      }\n-      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n-      if (request.isCheck()) {\n-        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n-          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n-          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n-        }\n-      }\n-      \n-      // check the write access privilege\n-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n-        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n-            preOpWcc, preOpAttr));\n-      }\n-\n-      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n-      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n-          fileIdPath, iug);\n-      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n-      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n-    } catch (IOException e) {\n-      LOG.warn(\"Exception \", e);\n-      WccData wccData \u003d null;\n-      try {\n-        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n-            dfsClient, fileIdPath, iug);\n-      } catch (IOException e1) {\n-        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n-      }\n-      if (e instanceof AccessControlException) {\n-        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n-      } else {\n-        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n-      }\n-    }\n+    return setattr(xdr, getSecurityHandler(info), info.remoteAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SETATTR3Response setattr(XDR xdr, RpcInfo info) {\n    return setattr(xdr, getSecurityHandler(info), info.remoteAddress());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "2ecab65e3e290a1ee192b39ec70868863853543a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 1:45 PM",
      "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-  public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  public SETATTR3Response setattr(XDR xdr, RpcInfo info) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n       WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n           WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n       \n       // check the write access privilege\n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             preOpWcc, preOpAttr));\n       }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n         wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n             dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SETATTR3Response setattr(XDR xdr, RpcInfo info) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]",
            "newValue": "[xdr-XDR, info-RpcInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-  public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  public SETATTR3Response setattr(XDR xdr, RpcInfo info) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n       WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n           WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n       \n       // check the write access privilege\n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             preOpWcc, preOpAttr));\n       }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n         wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n             dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SETATTR3Response setattr(XDR xdr, RpcInfo info) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6050. NFS does not handle exceptions correctly in a few places. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 1:49 PM",
      "commitName": "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "13/03/14 2:03 PM",
      "commitNameOld": "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n       WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n           WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n       \n       // check the write access privilege\n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             preOpWcc, preOpAttr));\n       }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n         wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n             dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n-        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n+        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath, e1);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "05f35518f19d48890770128727289582cca3457b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5171. NFS should create input stream for a file and try to share it with multiple read requests. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:40 PM",
      "commitName": "05f35518f19d48890770128727289582cca3457b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "15/10/13 2:23 PM",
      "commitNameOld": "a9befa6f0a8a27b49b1e6483e749661f493f06cf",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.1,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n       WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n           WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n       \n       // check the write access privilege\n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             preOpWcc, preOpAttr));\n       }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n         wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n             dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,74 @@\n-  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys,\n-      InetAddress client) {\n+  public SETATTR3Response setattr(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n       WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n           WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n       \n       // check the write access privilege\n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             preOpWcc, preOpAttr));\n       }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n         wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n             dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SETATTR3Response setattr(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,74 @@\n-  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys,\n-      InetAddress client) {\n+  public SETATTR3Response setattr(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n       WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n           WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n       \n       // check the write access privilege\n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             preOpWcc, preOpAttr));\n       }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n         wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n             dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SETATTR3Response setattr(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,75 @@\n-  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys) {\n+  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys,\n+      InetAddress client) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n-    WccAttr preOpAttr \u003d null;\n+    Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n-      preOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fileIdPath);\n+      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n+      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n-          WccData wccData \u003d Nfs3Utils.createWccData(preOpAttr, dfsClient,\n-              fileIdPath, iug);\n+          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n+      \n+      // check the write access privilege\n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n+            preOpWcc, preOpAttr));\n+      }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n-      WccData wccData \u003d new WccData(preOpAttr, postOpAttr);\n+      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n-\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n-        wccData \u003d Nfs3Utils\n-            .createWccData(preOpAttr, dfsClient, fileIdPath, iug);\n+        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n+            dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys,\n      InetAddress client) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys]",
            "newValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,75 @@\n-  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys) {\n+  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys,\n+      InetAddress client) {\n     SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     SETATTR3Request request \u003d null;\n     try {\n       request \u003d new SETATTR3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid SETATTR request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n     }\n \n     if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n           + handle.getFileId());\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n-    WccAttr preOpAttr \u003d null;\n+    Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n-      preOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fileIdPath);\n+      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         response.setStatus(Nfs3Status.NFS3ERR_STALE);\n         return response;\n       }\n+      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n       if (request.isCheck()) {\n         if (!preOpAttr.getCtime().equals(request.getCtime())) {\n-          WccData wccData \u003d Nfs3Utils.createWccData(preOpAttr, dfsClient,\n-              fileIdPath, iug);\n+          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n           return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n         }\n       }\n+      \n+      // check the write access privilege\n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n+            preOpWcc, preOpAttr));\n+      }\n \n       setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n-      WccData wccData \u003d new WccData(preOpAttr, postOpAttr);\n+      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n       return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n-\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       WccData wccData \u003d null;\n       try {\n-        wccData \u003d Nfs3Utils\n-            .createWccData(preOpAttr, dfsClient, fileIdPath, iug);\n+        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n+            dfsClient, fileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n       } else {\n         return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys,\n      InetAddress client) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      WccAttr preOpWcc \u003d Nfs3Utils.getWccAttr(preOpAttr);\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d new WccData(preOpWcc, preOpAttr);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n      \n      // check the write access privilege\n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            preOpWcc, preOpAttr));\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpWcc, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),\n            dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,69 @@\n+  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys) {\n+    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n+    String uname \u003d authSysCheck(authSys);\n+    DFSClient dfsClient \u003d clientCache.get(uname);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+    \n+    SETATTR3Request request \u003d null;\n+    try {\n+      request \u003d new SETATTR3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid SETATTR request\");\n+      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n+      return response;\n+    }\n+\n+    FileHandle handle \u003d request.getHandle();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n+    }\n+\n+    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n+      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n+          + handle.getFileId());\n+      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n+      return response;\n+    }\n+\n+    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n+    WccAttr preOpAttr \u003d null;\n+    try {\n+      preOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fileIdPath);\n+      if (preOpAttr \u003d\u003d null) {\n+        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n+        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n+        return response;\n+      }\n+      if (request.isCheck()) {\n+        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n+          WccData wccData \u003d Nfs3Utils.createWccData(preOpAttr, dfsClient,\n+              fileIdPath, iug);\n+          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n+        }\n+      }\n+\n+      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n+      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n+          fileIdPath, iug);\n+      WccData wccData \u003d new WccData(preOpAttr, postOpAttr);\n+      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n+\n+    } catch (IOException e) {\n+      LOG.warn(\"Exception \", e);\n+      WccData wccData \u003d null;\n+      try {\n+        wccData \u003d Nfs3Utils\n+            .createWccData(preOpAttr, dfsClient, fileIdPath, iug);\n+      } catch (IOException e1) {\n+        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n+      }\n+      if (e instanceof AccessControlException) {\n+        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n+      } else {\n+        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys) {\n    SETATTR3Response response \u003d new SETATTR3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    SETATTR3Request request \u003d null;\n    try {\n      request \u003d new SETATTR3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid SETATTR request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS SETATTR fileId: \" + handle.getFileId());\n    }\n\n    if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when setattr, fileId: \"\n          + handle.getFileId());\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    WccAttr preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fileIdPath);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        response.setStatus(Nfs3Status.NFS3ERR_STALE);\n        return response;\n      }\n      if (request.isCheck()) {\n        if (!preOpAttr.getCtime().equals(request.getCtime())) {\n          WccData wccData \u003d Nfs3Utils.createWccData(preOpAttr, dfsClient,\n              fileIdPath, iug);\n          return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC, wccData);\n        }\n      }\n\n      setattrInternal(dfsClient, fileIdPath, request.getAttr(), true);\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      WccData wccData \u003d new WccData(preOpAttr, postOpAttr);\n      return new SETATTR3Response(Nfs3Status.NFS3_OK, wccData);\n\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      WccData wccData \u003d null;\n      try {\n        wccData \u003d Nfs3Utils\n            .createWccData(preOpAttr, dfsClient, fileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileIdPath: \" + fileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);\n      } else {\n        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}