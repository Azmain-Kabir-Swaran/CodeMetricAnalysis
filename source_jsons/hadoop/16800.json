{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeHeartbeatService.java",
  "functionName": "updateJMXParameters",
  "functionId": "updateJMXParameters___address-String__report-NamenodeStatusReport",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
  "functionStartLine": 344,
  "functionEndLine": 353,
  "numCommitsSeen": 14,
  "timeTaken": 4707,
  "changeHistory": [
    "275c478330d5c8cae3c15b876cc8128d164e9fa0",
    "8627f6532baa0488c28514d9dfdd5c4f8bf8f378",
    "ddbe08db3323431693ceb91ca00bc138be7577b0",
    "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
    "1dc01e59af9a504e473d696be3d40e056db450ab",
    "7b0bc492edbbd30c6945c89d8bc5ad0f6cf42b76",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
    "d8c81073320320a019fb3868be4f06f46aebea43"
  ],
  "changeHistoryShort": {
    "275c478330d5c8cae3c15b876cc8128d164e9fa0": "Ybodychange",
    "8627f6532baa0488c28514d9dfdd5c4f8bf8f378": "Ybodychange",
    "ddbe08db3323431693ceb91ca00bc138be7577b0": "Ybodychange",
    "1ce25e702b5086fc81f7fc23fcb87db167f3804d": "Ybodychange",
    "1dc01e59af9a504e473d696be3d40e056db450ab": "Ybodychange",
    "7b0bc492edbbd30c6945c89d8bc5ad0f6cf42b76": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88": "Ybodychange",
    "d8c81073320320a019fb3868be4f06f46aebea43": "Yintroduced"
  },
  "changeHistoryDetails": {
    "275c478330d5c8cae3c15b876cc8128d164e9fa0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15261. RBF: Add Block Related Metrics. Contributed by Ayush Saxena.\n",
      "commitDate": "09/04/20 11:14 AM",
      "commitName": "275c478330d5c8cae3c15b876cc8128d164e9fa0",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "27/03/20 1:12 AM",
      "commitNameOld": "cbe71eaddf21c0ac5967e67cdd4623bd770aa9e5",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 13.42,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,10 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n-      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n-      JSONArray aux \u003d FederationUtil.getJmx(\n-          query, address, connectionFactory, scheme);\n-      if (aux !\u003d null) {\n-        for (int i \u003d 0; i \u003c aux.length(); i++) {\n-          JSONObject jsonObject \u003d aux.getJSONObject(i);\n-          String name \u003d jsonObject.getString(\"name\");\n-          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n-            report.setDatanodeInfo(\n-                jsonObject.getInt(\"NumLiveDataNodes\"),\n-                jsonObject.getInt(\"NumDeadDataNodes\"),\n-                jsonObject.getInt(\"NumStaleDataNodes\"),\n-                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n-                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n-                jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n-                jsonObject.optInt(\"NumInMaintenanceLiveDataNodes\"),\n-                jsonObject.optInt(\"NumInMaintenanceDeadDataNodes\"),\n-                jsonObject.optInt(\"NumEnteringMaintenanceDataNodes\"));\n-          } else if (name.equals(\n-              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n-            report.setNamesystemInfo(\n-                jsonObject.getLong(\"CapacityRemaining\"),\n-                jsonObject.getLong(\"CapacityTotal\"),\n-                jsonObject.getLong(\"FilesTotal\"),\n-                jsonObject.getLong(\"BlocksTotal\"),\n-                jsonObject.getLong(\"MissingBlocks\"),\n-                jsonObject.getLong(\"PendingReplicationBlocks\"),\n-                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n-                jsonObject.getLong(\"PendingDeletionBlocks\"),\n-                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n-          }\n-        }\n-      }\n+      getFsNamesystemMetrics(address, report);\n+      getNamenodeInfoMetrics(address, report);\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      getFsNamesystemMetrics(address, report);\n      getNamenodeInfoMetrics(address, report);\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "8627f6532baa0488c28514d9dfdd5c4f8bf8f378": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14550. RBF: Failed to get statistics from NameNodes before 2.9.0. Contributed by He Xiaoqiao.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "8627f6532baa0488c28514d9dfdd5c4f8bf8f378",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "ddbe08db3323431693ceb91ca00bc138be7577b0",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n       String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n       JSONArray aux \u003d FederationUtil.getJmx(\n           query, address, connectionFactory, scheme);\n       if (aux !\u003d null) {\n         for (int i \u003d 0; i \u003c aux.length(); i++) {\n           JSONObject jsonObject \u003d aux.getJSONObject(i);\n           String name \u003d jsonObject.getString(\"name\");\n           if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n             report.setDatanodeInfo(\n                 jsonObject.getInt(\"NumLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDeadDataNodes\"),\n                 jsonObject.getInt(\"NumStaleDataNodes\"),\n                 jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                 jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n-                jsonObject.getInt(\"NumInMaintenanceLiveDataNodes\"),\n-                jsonObject.getInt(\"NumInMaintenanceDeadDataNodes\"),\n-                jsonObject.getInt(\"NumEnteringMaintenanceDataNodes\"));\n+                jsonObject.optInt(\"NumInMaintenanceLiveDataNodes\"),\n+                jsonObject.optInt(\"NumInMaintenanceDeadDataNodes\"),\n+                jsonObject.optInt(\"NumEnteringMaintenanceDataNodes\"));\n           } else if (name.equals(\n               \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n             report.setNamesystemInfo(\n                 jsonObject.getLong(\"CapacityRemaining\"),\n                 jsonObject.getLong(\"CapacityTotal\"),\n                 jsonObject.getLong(\"FilesTotal\"),\n                 jsonObject.getLong(\"BlocksTotal\"),\n                 jsonObject.getLong(\"MissingBlocks\"),\n                 jsonObject.getLong(\"PendingReplicationBlocks\"),\n                 jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                 jsonObject.getLong(\"PendingDeletionBlocks\"),\n                 jsonObject.optLong(\"ProvidedCapacityTotal\"));\n           }\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(\n          query, address, connectionFactory, scheme);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumStaleDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n                jsonObject.optInt(\"NumInMaintenanceLiveDataNodes\"),\n                jsonObject.optInt(\"NumInMaintenanceDeadDataNodes\"),\n                jsonObject.optInt(\"NumEnteringMaintenanceDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "ddbe08db3323431693ceb91ca00bc138be7577b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13955. RBF: Support secure Namenode in NamenodeHeartbeatService. Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "ddbe08db3323431693ceb91ca00bc138be7577b0",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n       String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n-      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n+      JSONArray aux \u003d FederationUtil.getJmx(\n+          query, address, connectionFactory, scheme);\n       if (aux !\u003d null) {\n         for (int i \u003d 0; i \u003c aux.length(); i++) {\n           JSONObject jsonObject \u003d aux.getJSONObject(i);\n           String name \u003d jsonObject.getString(\"name\");\n           if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n             report.setDatanodeInfo(\n                 jsonObject.getInt(\"NumLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDeadDataNodes\"),\n                 jsonObject.getInt(\"NumStaleDataNodes\"),\n                 jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                 jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n                 jsonObject.getInt(\"NumInMaintenanceLiveDataNodes\"),\n                 jsonObject.getInt(\"NumInMaintenanceDeadDataNodes\"),\n                 jsonObject.getInt(\"NumEnteringMaintenanceDataNodes\"));\n           } else if (name.equals(\n               \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n             report.setNamesystemInfo(\n                 jsonObject.getLong(\"CapacityRemaining\"),\n                 jsonObject.getLong(\"CapacityTotal\"),\n                 jsonObject.getLong(\"FilesTotal\"),\n                 jsonObject.getLong(\"BlocksTotal\"),\n                 jsonObject.getLong(\"MissingBlocks\"),\n                 jsonObject.getLong(\"PendingReplicationBlocks\"),\n                 jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                 jsonObject.getLong(\"PendingDeletionBlocks\"),\n                 jsonObject.optLong(\"ProvidedCapacityTotal\"));\n           }\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(\n          query, address, connectionFactory, scheme);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumStaleDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n                jsonObject.getInt(\"NumInMaintenanceLiveDataNodes\"),\n                jsonObject.getInt(\"NumInMaintenanceDeadDataNodes\"),\n                jsonObject.getInt(\"NumEnteringMaintenanceDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "1ce25e702b5086fc81f7fc23fcb87db167f3804d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14329. RBF: Add maintenance nodes to federation metrics. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "1dc01e59af9a504e473d696be3d40e056db450ab",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n       String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n       JSONArray aux \u003d FederationUtil.getJmx(query, address);\n       if (aux !\u003d null) {\n         for (int i \u003d 0; i \u003c aux.length(); i++) {\n           JSONObject jsonObject \u003d aux.getJSONObject(i);\n           String name \u003d jsonObject.getString(\"name\");\n           if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n             report.setDatanodeInfo(\n                 jsonObject.getInt(\"NumLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDeadDataNodes\"),\n                 jsonObject.getInt(\"NumStaleDataNodes\"),\n                 jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                 jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n-                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n+                jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n+                jsonObject.getInt(\"NumInMaintenanceLiveDataNodes\"),\n+                jsonObject.getInt(\"NumInMaintenanceDeadDataNodes\"),\n+                jsonObject.getInt(\"NumEnteringMaintenanceDataNodes\"));\n           } else if (name.equals(\n               \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n             report.setNamesystemInfo(\n                 jsonObject.getLong(\"CapacityRemaining\"),\n                 jsonObject.getLong(\"CapacityTotal\"),\n                 jsonObject.getLong(\"FilesTotal\"),\n                 jsonObject.getLong(\"BlocksTotal\"),\n                 jsonObject.getLong(\"MissingBlocks\"),\n                 jsonObject.getLong(\"PendingReplicationBlocks\"),\n                 jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                 jsonObject.getLong(\"PendingDeletionBlocks\"),\n                 jsonObject.optLong(\"ProvidedCapacityTotal\"));\n           }\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumStaleDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"),\n                jsonObject.getInt(\"NumInMaintenanceLiveDataNodes\"),\n                jsonObject.getInt(\"NumInMaintenanceDeadDataNodes\"),\n                jsonObject.getInt(\"NumEnteringMaintenanceDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "1dc01e59af9a504e473d696be3d40e056db450ab": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14167. RBF: Add stale nodes to federation metrics. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "1dc01e59af9a504e473d696be3d40e056db450ab",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "19088e1b496edd55cc2110ecee973d2be8068111",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n       String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n       JSONArray aux \u003d FederationUtil.getJmx(query, address);\n       if (aux !\u003d null) {\n         for (int i \u003d 0; i \u003c aux.length(); i++) {\n           JSONObject jsonObject \u003d aux.getJSONObject(i);\n           String name \u003d jsonObject.getString(\"name\");\n           if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n             report.setDatanodeInfo(\n                 jsonObject.getInt(\"NumLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDeadDataNodes\"),\n+                jsonObject.getInt(\"NumStaleDataNodes\"),\n                 jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                 jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n           } else if (name.equals(\n               \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n             report.setNamesystemInfo(\n                 jsonObject.getLong(\"CapacityRemaining\"),\n                 jsonObject.getLong(\"CapacityTotal\"),\n                 jsonObject.getLong(\"FilesTotal\"),\n                 jsonObject.getLong(\"BlocksTotal\"),\n                 jsonObject.getLong(\"MissingBlocks\"),\n                 jsonObject.getLong(\"PendingReplicationBlocks\"),\n                 jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                 jsonObject.getLong(\"PendingDeletionBlocks\"),\n                 jsonObject.optLong(\"ProvidedCapacityTotal\"));\n           }\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumStaleDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "7b0bc492edbbd30c6945c89d8bc5ad0f6cf42b76": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14024. RBF: ProvidedCapacityTotal json exception in NamenodeHeartbeatService. Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "7b0bc492edbbd30c6945c89d8bc5ad0f6cf42b76",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "19/03/18 10:13 PM",
      "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthorOld": "weiy",
      "daysBetweenCommits": 461.47,
      "commitsBetweenForRepo": 4056,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n       String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n       JSONArray aux \u003d FederationUtil.getJmx(query, address);\n       if (aux !\u003d null) {\n         for (int i \u003d 0; i \u003c aux.length(); i++) {\n           JSONObject jsonObject \u003d aux.getJSONObject(i);\n           String name \u003d jsonObject.getString(\"name\");\n           if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n             report.setDatanodeInfo(\n                 jsonObject.getInt(\"NumLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDeadDataNodes\"),\n                 jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                 jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n           } else if (name.equals(\n               \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n             report.setNamesystemInfo(\n                 jsonObject.getLong(\"CapacityRemaining\"),\n                 jsonObject.getLong(\"CapacityTotal\"),\n                 jsonObject.getLong(\"FilesTotal\"),\n                 jsonObject.getLong(\"BlocksTotal\"),\n                 jsonObject.getLong(\"MissingBlocks\"),\n                 jsonObject.getLong(\"PendingReplicationBlocks\"),\n                 jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                 jsonObject.getLong(\"PendingDeletionBlocks\"),\n-                jsonObject.getLong(\"ProvidedCapacityTotal\"));\n+                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n           }\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.optLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.getLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java"
      }
    },
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12775. [READ] Fix reporting of Provided volumes\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "29/11/17 9:43 AM",
      "commitNameOld": "301641811d93ac22dc6fe1a05f18c1f266cc5e54",
      "commitAuthorOld": "Wei Yan",
      "daysBetweenCommits": 16.34,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private void updateJMXParameters(\n       String address, NamenodeStatusReport report) {\n     try {\n       // TODO part of this should be moved to its own utility\n       String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n       JSONArray aux \u003d FederationUtil.getJmx(query, address);\n       if (aux !\u003d null) {\n         for (int i \u003d 0; i \u003c aux.length(); i++) {\n           JSONObject jsonObject \u003d aux.getJSONObject(i);\n           String name \u003d jsonObject.getString(\"name\");\n           if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n             report.setDatanodeInfo(\n                 jsonObject.getInt(\"NumLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDeadDataNodes\"),\n                 jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                 jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                 jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n           } else if (name.equals(\n               \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n             report.setNamesystemInfo(\n                 jsonObject.getLong(\"CapacityRemaining\"),\n                 jsonObject.getLong(\"CapacityTotal\"),\n                 jsonObject.getLong(\"FilesTotal\"),\n                 jsonObject.getLong(\"BlocksTotal\"),\n                 jsonObject.getLong(\"MissingBlocks\"),\n                 jsonObject.getLong(\"PendingReplicationBlocks\"),\n                 jsonObject.getLong(\"UnderReplicatedBlocks\"),\n-                jsonObject.getLong(\"PendingDeletionBlocks\"));\n+                jsonObject.getLong(\"PendingDeletionBlocks\"),\n+                jsonObject.getLong(\"ProvidedCapacityTotal\"));\n           }\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"),\n                jsonObject.getLong(\"ProvidedCapacityTotal\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "d8c81073320320a019fb3868be4f06f46aebea43": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11826. Federation Namenode Heartbeat. Contributed by Inigo Goiri.\n\n(cherry picked from commit 928f8dab52191e733984d37f47b69719ccf11313)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "d8c81073320320a019fb3868be4f06f46aebea43",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,35 @@\n+  private void updateJMXParameters(\n+      String address, NamenodeStatusReport report) {\n+    try {\n+      // TODO part of this should be moved to its own utility\n+      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n+      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n+      if (aux !\u003d null) {\n+        for (int i \u003d 0; i \u003c aux.length(); i++) {\n+          JSONObject jsonObject \u003d aux.getJSONObject(i);\n+          String name \u003d jsonObject.getString(\"name\");\n+          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n+            report.setDatanodeInfo(\n+                jsonObject.getInt(\"NumLiveDataNodes\"),\n+                jsonObject.getInt(\"NumDeadDataNodes\"),\n+                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n+                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n+                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n+          } else if (name.equals(\n+              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n+            report.setNamesystemInfo(\n+                jsonObject.getLong(\"CapacityRemaining\"),\n+                jsonObject.getLong(\"CapacityTotal\"),\n+                jsonObject.getLong(\"FilesTotal\"),\n+                jsonObject.getLong(\"BlocksTotal\"),\n+                jsonObject.getLong(\"MissingBlocks\"),\n+                jsonObject.getLong(\"PendingReplicationBlocks\"),\n+                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n+                jsonObject.getLong(\"PendingDeletionBlocks\"));\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJMXParameters(\n      String address, NamenodeStatusReport report) {\n    try {\n      // TODO part of this should be moved to its own utility\n      String query \u003d \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem*\";\n      JSONArray aux \u003d FederationUtil.getJmx(query, address);\n      if (aux !\u003d null) {\n        for (int i \u003d 0; i \u003c aux.length(); i++) {\n          JSONObject jsonObject \u003d aux.getJSONObject(i);\n          String name \u003d jsonObject.getString(\"name\");\n          if (name.equals(\"Hadoop:service\u003dNameNode,name\u003dFSNamesystemState\")) {\n            report.setDatanodeInfo(\n                jsonObject.getInt(\"NumLiveDataNodes\"),\n                jsonObject.getInt(\"NumDeadDataNodes\"),\n                jsonObject.getInt(\"NumDecommissioningDataNodes\"),\n                jsonObject.getInt(\"NumDecomLiveDataNodes\"),\n                jsonObject.getInt(\"NumDecomDeadDataNodes\"));\n          } else if (name.equals(\n              \"Hadoop:service\u003dNameNode,name\u003dFSNamesystem\")) {\n            report.setNamesystemInfo(\n                jsonObject.getLong(\"CapacityRemaining\"),\n                jsonObject.getLong(\"CapacityTotal\"),\n                jsonObject.getLong(\"FilesTotal\"),\n                jsonObject.getLong(\"BlocksTotal\"),\n                jsonObject.getLong(\"MissingBlocks\"),\n                jsonObject.getLong(\"PendingReplicationBlocks\"),\n                jsonObject.getLong(\"UnderReplicatedBlocks\"),\n                jsonObject.getLong(\"PendingDeletionBlocks\"));\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Cannot get stat from {} using JMX\", getNamenodeDesc(), e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java"
    }
  }
}