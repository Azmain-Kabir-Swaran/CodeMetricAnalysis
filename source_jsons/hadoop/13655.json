{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CorruptReplicasMap.java",
  "functionName": "addToCorruptReplicasMap",
  "functionId": "addToCorruptReplicasMap___blk-Block__dn-DatanodeDescriptor__reason-String__reasonCode-Reason__isStriped-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
  "functionStartLine": 71,
  "functionEndLine": 100,
  "numCommitsSeen": 57,
  "timeTaken": 6649,
  "changeHistory": [
    "d737bf99d44ce34cd01baad716d23df269267c95",
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
    "b4564103e4709caa1135f6ccc2864d90e54f2ac9",
    "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
    "d62b63d297bff12d93de560dd50ddd48743b851d",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
    "0ed8732feef9f4027e9fc95b6d4852444c1f3426",
    "ceea91c9cd8b2a18be13217894ccf1c17198de18"
  ],
  "changeHistoryShort": {
    "d737bf99d44ce34cd01baad716d23df269267c95": "Ymultichange(Yparameterchange,Ybodychange)",
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e": "Ybodychange",
    "b4564103e4709caa1135f6ccc2864d90e54f2ac9": "Ybodychange",
    "d311a38a6b32bbb210bd8748cfb65463e9c0740e": "Ybodychange",
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75": "Ymultichange(Yparameterchange,Ybodychange)",
    "d62b63d297bff12d93de560dd50ddd48743b851d": "Ymultichange(Yparameterchange,Ybodychange)",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": "Ybodychange",
    "0ed8732feef9f4027e9fc95b6d4852444c1f3426": "Ymodifierchange",
    "ceea91c9cd8b2a18be13217894ccf1c17198de18": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d737bf99d44ce34cd01baad716d23df269267c95": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13350. Negative legacy block ID will confuse Erasure Coding to be considered as striped block. (Contributed by Lei (Eddy) Xu).\n",
      "commitDate": "05/04/18 9:59 AM",
      "commitName": "d737bf99d44ce34cd01baad716d23df269267c95",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13350. Negative legacy block ID will confuse Erasure Coding to be considered as striped block. (Contributed by Lei (Eddy) Xu).\n",
          "commitDate": "05/04/18 9:59 AM",
          "commitName": "d737bf99d44ce34cd01baad716d23df269267c95",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "07/09/17 4:57 PM",
          "commitNameOld": "4e50dc976a92a9560630c87cfc4e4513916e5735",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 209.71,
          "commitsBetweenForRepo": 1606,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n-      String reason, Reason reasonCode) {\n+      String reason, Reason reasonCode, boolean isStriped) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n-      incrementBlockStat(blk);\n+      incrementBlockStat(isStriped);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk, dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode, boolean isStriped) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n      incrementBlockStat(isStriped);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk, dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "[blk-Block, dn-DatanodeDescriptor, reason-String, reasonCode-Reason]",
            "newValue": "[blk-Block, dn-DatanodeDescriptor, reason-String, reasonCode-Reason, isStriped-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13350. Negative legacy block ID will confuse Erasure Coding to be considered as striped block. (Contributed by Lei (Eddy) Xu).\n",
          "commitDate": "05/04/18 9:59 AM",
          "commitName": "d737bf99d44ce34cd01baad716d23df269267c95",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "07/09/17 4:57 PM",
          "commitNameOld": "4e50dc976a92a9560630c87cfc4e4513916e5735",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 209.71,
          "commitsBetweenForRepo": 1606,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n-      String reason, Reason reasonCode) {\n+      String reason, Reason reasonCode, boolean isStriped) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n-      incrementBlockStat(blk);\n+      incrementBlockStat(isStriped);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk, dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode, boolean isStriped) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n      incrementBlockStat(isStriped);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk, dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)\n",
      "commitDate": "14/06/17 10:44 AM",
      "commitName": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "31/05/17 8:09 AM",
      "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 14.11,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n+      incrementBlockStat(blk);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk, dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n      incrementBlockStat(blk);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk, dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {}
    },
    "b4564103e4709caa1135f6ccc2864d90e54f2ac9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10752. Several log refactoring/improvement suggestion in HDFS. Contributed by Hanisha Koneru.\n",
      "commitDate": "19/10/16 5:20 PM",
      "commitName": "b4564103e4709caa1135f6ccc2864d90e54f2ac9",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "27/04/16 6:19 AM",
      "commitNameOld": "919a1d824a0a61145dc7ae59cfba3f34d91f2681",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 175.46,
      "commitsBetweenForRepo": 1290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n-              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n+              + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n-              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n+              \" {} to add as corrupt on {} by {} {}\", blk, dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk, dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk, dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {}
    },
    "d311a38a6b32bbb210bd8748cfb65463e9c0740e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6860. BlockStateChange logs are too noisy. Contributed by Chang Li and Xiaoyu Yao.\n",
      "commitDate": "31/07/15 4:15 PM",
      "commitName": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "20/07/15 6:20 PM",
      "commitNameOld": "d6d58606b8adf94b208aed5fc2d054b9dd081db1",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 10.91,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n-      NameNode.blockStateChangeLog.info(\n+      NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n-      NameNode.blockStateChangeLog.info(\n+      NameNode.blockStateChangeLog.debug(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {}
    },
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\"\n\nThis reverts commit d62b63d297bff12d93de560dd50ddd48743b851d.\n",
      "commitDate": "07/07/15 10:13 AM",
      "commitName": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\"\n\nThis reverts commit d62b63d297bff12d93de560dd50ddd48743b851d.\n",
          "commitDate": "07/07/15 10:13 AM",
          "commitName": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "06/07/15 3:54 PM",
          "commitNameOld": "d62b63d297bff12d93de560dd50ddd48743b851d",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,\n+  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n-      nodes \u003d new HashMap\u003c\u003e();\n+      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n-\n+    \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n-\n+    \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "[blk-BlockInfo, dn-DatanodeDescriptor, reason-String, reasonCode-Reason]",
            "newValue": "[blk-Block, dn-DatanodeDescriptor, reason-String, reasonCode-Reason]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\"\n\nThis reverts commit d62b63d297bff12d93de560dd50ddd48743b851d.\n",
          "commitDate": "07/07/15 10:13 AM",
          "commitName": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "06/07/15 3:54 PM",
          "commitNameOld": "d62b63d297bff12d93de560dd50ddd48743b851d",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,\n+  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n-      nodes \u003d new HashMap\u003c\u003e();\n+      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n-\n+    \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n-\n+    \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "d62b63d297bff12d93de560dd50ddd48743b851d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\n",
      "commitDate": "06/07/15 3:54 PM",
      "commitName": "d62b63d297bff12d93de560dd50ddd48743b851d",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\n",
          "commitDate": "06/07/15 3:54 PM",
          "commitName": "d62b63d297bff12d93de560dd50ddd48743b851d",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "03/02/15 3:01 PM",
          "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 153.0,
          "commitsBetweenForRepo": 1373,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n+  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n-      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n+      nodes \u003d new HashMap\u003c\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n-    \n+\n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n-    \n+\n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003c\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n\n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n\n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "[blk-Block, dn-DatanodeDescriptor, reason-String, reasonCode-Reason]",
            "newValue": "[blk-BlockInfo, dn-DatanodeDescriptor, reason-String, reasonCode-Reason]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\n",
          "commitDate": "06/07/15 3:54 PM",
          "commitName": "d62b63d297bff12d93de560dd50ddd48743b851d",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "03/02/15 3:01 PM",
          "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 153.0,
          "commitsBetweenForRepo": 1373,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n+  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n-      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n+      nodes \u003d new HashMap\u003c\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n-    \n+\n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n-    \n+\n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n               + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n           reasonText);\n     } else {\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n               \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n               Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003c\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n\n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n\n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7712. Switch blockStateChangeLog to use slf4j.\n",
      "commitDate": "03/02/15 3:01 PM",
      "commitName": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/10/14 12:26 PM",
      "commitNameOld": "371a3b87ed346732ed58a4faab0c6c1db57c86ed",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 98.15,
      "commitsBetweenForRepo": 693,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,29 @@\n   void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n-      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n-                                   blk.getBlockName() +\n-                                   \" added as corrupt on \" + dn +\n-                                   \" by \" + Server.getRemoteIp() +\n-                                   reasonText);\n+      NameNode.blockStateChangeLog.info(\n+          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n+              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n+          reasonText);\n     } else {\n-      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n-                                   \"duplicate requested for \" + \n-                                   blk.getBlockName() + \" to add as corrupt \" +\n-                                   \"on \" + dn +\n-                                   \" by \" + Server.getRemoteIp() +\n-                                   reasonText);\n+      NameNode.blockStateChangeLog.info(\n+          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n+              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n+              Server.getRemoteIp(), reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on \"\n              + \"{} by {} {}\", blk.getBlockName(), dn, Server.getRemoteIp(),\n          reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for\" +\n              \" {} to add as corrupt on {} by {} {}\", blk.getBlockName(), dn,\n              Server.getRemoteIp(), reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {}
    },
    "0ed8732feef9f4027e9fc95b6d4852444c1f3426": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-6812. Remove addBlock and replaceBlock from DatanodeDescriptor.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616426 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 12:30 AM",
      "commitName": "0ed8732feef9f4027e9fc95b6d4852444c1f3426",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/03/14 4:32 PM",
      "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 135.33,
      "commitsBetweenForRepo": 852,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  public void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n+  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n       String reason, Reason reasonCode) {\n     Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n     if (nodes \u003d\u003d null) {\n       nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n       corruptReplicasMap.put(blk, nodes);\n     }\n     \n     String reasonText;\n     if (reason !\u003d null) {\n       reasonText \u003d \" because \" + reason;\n     } else {\n       reasonText \u003d \"\";\n     }\n     \n     if (!nodes.keySet().contains(dn)) {\n       NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n                                    blk.getBlockName() +\n                                    \" added as corrupt on \" + dn +\n                                    \" by \" + Server.getRemoteIp() +\n                                    reasonText);\n     } else {\n       NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n                                    \"duplicate requested for \" + \n                                    blk.getBlockName() + \" to add as corrupt \" +\n                                    \"on \" + dn +\n                                    \" by \" + Server.getRemoteIp() +\n                                    reasonText);\n     }\n     // Add the node or update the reason.\n     nodes.put(dn, reasonCode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n                                   blk.getBlockName() +\n                                   \" added as corrupt on \" + dn +\n                                   \" by \" + Server.getRemoteIp() +\n                                   reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n                                   \"duplicate requested for \" + \n                                   blk.getBlockName() + \" to add as corrupt \" +\n                                   \"on \" + dn +\n                                   \" by \" + Server.getRemoteIp() +\n                                   reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "ceea91c9cd8b2a18be13217894ccf1c17198de18": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5438. Flaws in block report processing can cause data loss. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1542054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/13 12:11 PM",
      "commitName": "ceea91c9cd8b2a18be13217894ccf1c17198de18",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,32 @@\n+  public void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n+      String reason, Reason reasonCode) {\n+    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n+    if (nodes \u003d\u003d null) {\n+      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n+      corruptReplicasMap.put(blk, nodes);\n+    }\n+    \n+    String reasonText;\n+    if (reason !\u003d null) {\n+      reasonText \u003d \" because \" + reason;\n+    } else {\n+      reasonText \u003d \"\";\n+    }\n+    \n+    if (!nodes.keySet().contains(dn)) {\n+      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n+                                   blk.getBlockName() +\n+                                   \" added as corrupt on \" + dn +\n+                                   \" by \" + Server.getRemoteIp() +\n+                                   reasonText);\n+    } else {\n+      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n+                                   \"duplicate requested for \" + \n+                                   blk.getBlockName() + \" to add as corrupt \" +\n+                                   \"on \" + dn +\n+                                   \" by \" + Server.getRemoteIp() +\n+                                   reasonText);\n+    }\n+    // Add the node or update the reason.\n+    nodes.put(dn, reasonCode);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,\n      String reason, Reason reasonCode) {\n    Map \u003cDatanodeDescriptor, Reason\u003e nodes \u003d corruptReplicasMap.get(blk);\n    if (nodes \u003d\u003d null) {\n      nodes \u003d new HashMap\u003cDatanodeDescriptor, Reason\u003e();\n      corruptReplicasMap.put(blk, nodes);\n    }\n    \n    String reasonText;\n    if (reason !\u003d null) {\n      reasonText \u003d \" because \" + reason;\n    } else {\n      reasonText \u003d \"\";\n    }\n    \n    if (!nodes.keySet().contains(dn)) {\n      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n                                   blk.getBlockName() +\n                                   \" added as corrupt on \" + dn +\n                                   \" by \" + Server.getRemoteIp() +\n                                   reasonText);\n    } else {\n      NameNode.blockStateChangeLog.info(\"BLOCK NameSystem.addToCorruptReplicasMap: \"+\n                                   \"duplicate requested for \" + \n                                   blk.getBlockName() + \" to add as corrupt \" +\n                                   \"on \" + dn +\n                                   \" by \" + Server.getRemoteIp() +\n                                   reasonText);\n    }\n    // Add the node or update the reason.\n    nodes.put(dn, reasonCode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java"
    }
  }
}