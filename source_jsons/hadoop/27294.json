{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getFlows",
  "functionId": "getFlows___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__clusterId-String(annotations-@PathParam(\"clusterid\"))__limit-String(annotations-@QueryParam(\"limit\"))__dateRange-String(annotations-@QueryParam(\"daterange\"))__fromId-String(annotations-@QueryParam(\"fromid\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 1515,
  "functionEndLine": 1562,
  "numCommitsSeen": 73,
  "timeTaken": 6054,
  "changeHistory": [
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
    "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
    "c05b5d424b000bab766f57e88a07f2b4e9a56647",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
    "b87b72b40a3cd4e124d6c941276481747133895f",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
    "8bb26465956a37d7398818bc0919772e12953725",
    "02a9710a099fc9572122d87dd3e90c78522f5836",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0"
  ],
  "changeHistoryShort": {
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": "Ybodychange",
    "8261f9e5710038ccbc475dbfcea3b9ae79b6f482": "Ybodychange",
    "c05b5d424b000bab766f57e88a07f2b4e9a56647": "Ybodychange",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": "Ybodychange",
    "b87b72b40a3cd4e124d6c941276481747133895f": "Ybodychange",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": "Ybodychange",
    "8bb26465956a37d7398818bc0919772e12953725": "Ymultichange(Yparameterchange,Ybodychange)",
    "02a9710a099fc9572122d87dd3e90c78522f5836": "Ybodychange",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": "Ybodychange",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Ymultichange(Yparameterchange,Ybodychange)",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ybodychange",
    "e3e857866d9fdefb7e353b21ae24eab4401e60b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": "Ybodychange",
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1": "Ybodychange",
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, range.dateStart, range.dateEnd,\n               null, null, null, null, null, null, fromId);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n               createTimelineDataToRetrieve(null, null, null, null, null, null));\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntitiesLatency(latency, succeeded);\n+      LOG.info(\"Processed URL \" + url +\n+          \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     } else {\n       checkAccess(timelineReaderManager, callerUGI, entities,\n           FlowActivityEntity.USER_INFO_KEY, true);\n     }\n-    LOG.info(\"Processed URL \" + url +\n-        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, range.dateStart, range.dateEnd,\n              null, null, null, null, null, null, fromId);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n              createTimelineDataToRetrieve(null, null, null, null, null, null));\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    } else {\n      checkAccess(timelineReaderManager, callerUGI, entities,\n          FlowActivityEntity.USER_INFO_KEY, true);\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8455. Add basic ACL check for all ATS v2 REST APIs. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/06/18 10:02 AM",
      "commitName": "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/06/18 8:59 PM",
      "commitNameOld": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 27.54,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n-    Configuration config \u003d timelineReaderManager.getConfig();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, range.dateStart, range.dateEnd,\n               null, null, null, null, null, null, fromId);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n               createTimelineDataToRetrieve(null, null, null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n-    } else if (isDisplayEntityPerUserFilterEnabled(config)) {\n-      Set\u003cTimelineEntity\u003e userEntities \u003d new LinkedHashSet\u003c\u003e();\n-      userEntities.addAll(entities);\n-      for (TimelineEntity entity : userEntities) {\n-        if (entity.getInfo() !\u003d null) {\n-          String userId \u003d\n-              (String) entity.getInfo().get(FlowActivityEntity.USER_INFO_KEY);\n-          if (!validateAuthUserWithEntityUser(timelineReaderManager, callerUGI,\n-              userId)) {\n-            entities.remove(entity);\n-          }\n-        }\n-      }\n+    } else {\n+      checkAccess(timelineReaderManager, callerUGI, entities,\n+          FlowActivityEntity.USER_INFO_KEY, true);\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, range.dateStart, range.dateEnd,\n              null, null, null, null, null, null, fromId);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n              createTimelineDataToRetrieve(null, null, null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    } else {\n      checkAccess(timelineReaderManager, callerUGI, entities,\n          FlowActivityEntity.USER_INFO_KEY, true);\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "8261f9e5710038ccbc475dbfcea3b9ae79b6f482": {
      "type": "Ybodychange",
      "commitMessage": "More YARN pages need to honor yarn.resourcemanager.display.per-user-apps(addendum). Contributed by Sunil G.\n",
      "commitDate": "01/06/18 8:59 PM",
      "commitName": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "24/05/18 1:49 AM",
      "commitNameOld": "c05b5d424b000bab766f57e88a07f2b4e9a56647",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 8.8,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    Configuration config \u003d timelineReaderManager.getConfig();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, range.dateStart, range.dateEnd,\n               null, null, null, null, null, null, fromId);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n               createTimelineDataToRetrieve(null, null, null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n-    } else if (isDisplayEntityPerUserFilterEnabled(\n-        timelineReaderManager.getConfig())) {\n+    } else if (isDisplayEntityPerUserFilterEnabled(config)) {\n       Set\u003cTimelineEntity\u003e userEntities \u003d new LinkedHashSet\u003c\u003e();\n       userEntities.addAll(entities);\n       for (TimelineEntity entity : userEntities) {\n         if (entity.getInfo() !\u003d null) {\n           String userId \u003d\n               (String) entity.getInfo().get(FlowActivityEntity.USER_INFO_KEY);\n-          if (!validateAuthUserWithEntityUser(callerUGI, userId)) {\n+          if (!validateAuthUserWithEntityUser(timelineReaderManager, callerUGI,\n+              userId)) {\n             entities.remove(entity);\n           }\n         }\n       }\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Configuration config \u003d timelineReaderManager.getConfig();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, range.dateStart, range.dateEnd,\n              null, null, null, null, null, null, fromId);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n              createTimelineDataToRetrieve(null, null, null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    } else if (isDisplayEntityPerUserFilterEnabled(config)) {\n      Set\u003cTimelineEntity\u003e userEntities \u003d new LinkedHashSet\u003c\u003e();\n      userEntities.addAll(entities);\n      for (TimelineEntity entity : userEntities) {\n        if (entity.getInfo() !\u003d null) {\n          String userId \u003d\n              (String) entity.getInfo().get(FlowActivityEntity.USER_INFO_KEY);\n          if (!validateAuthUserWithEntityUser(timelineReaderManager, callerUGI,\n              userId)) {\n            entities.remove(entity);\n          }\n        }\n      }\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "c05b5d424b000bab766f57e88a07f2b4e9a56647": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8319. More YARN pages need to honor yarn.resourcemanager.display.per-user-apps. Contributed by Sunil G.\n",
      "commitDate": "24/05/18 1:49 AM",
      "commitName": "c05b5d424b000bab766f57e88a07f2b4e9a56647",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 267.12,
      "commitsBetweenForRepo": 2555,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,54 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, range.dateStart, range.dateEnd,\n               null, null, null, null, null, null, fromId);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n               createTimelineDataToRetrieve(null, null, null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n+    } else if (isDisplayEntityPerUserFilterEnabled(\n+        timelineReaderManager.getConfig())) {\n+      Set\u003cTimelineEntity\u003e userEntities \u003d new LinkedHashSet\u003c\u003e();\n+      userEntities.addAll(entities);\n+      for (TimelineEntity entity : userEntities) {\n+        if (entity.getInfo() !\u003d null) {\n+          String userId \u003d\n+              (String) entity.getInfo().get(FlowActivityEntity.USER_INFO_KEY);\n+          if (!validateAuthUserWithEntityUser(callerUGI, userId)) {\n+            entities.remove(entity);\n+          }\n+        }\n+      }\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, range.dateStart, range.dateEnd,\n              null, null, null, null, null, null, fromId);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n              createTimelineDataToRetrieve(null, null, null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    } else if (isDisplayEntityPerUserFilterEnabled(\n        timelineReaderManager.getConfig())) {\n      Set\u003cTimelineEntity\u003e userEntities \u003d new LinkedHashSet\u003c\u003e();\n      userEntities.addAll(entities);\n      for (TimelineEntity entity : userEntities) {\n        if (entity.getInfo() !\u003d null) {\n          String userId \u003d\n              (String) entity.getInfo().get(FlowActivityEntity.USER_INFO_KEY);\n          if (!validateAuthUserWithEntityUser(callerUGI, userId)) {\n            entities.remove(entity);\n          }\n        }\n      }\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, range.dateStart, range.dateEnd,\n               null, null, null, null, null, null, fromId);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n-          createTimelineDataToRetrieve(null, null, null, null));\n+              createTimelineDataToRetrieve(null, null, null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, range.dateStart, range.dateEnd,\n              null, null, null, null, null, null, fromId);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n              createTimelineDataToRetrieve(null, null, null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "b87b72b40a3cd4e124d6c941276481747133895f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6146. Add Builder methods for TimelineEntityFilters (Haibo Chen via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b87b72b40a3cd4e124d6c941276481747133895f",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n-              limit, null, null, null, null, null, null, null, null,\n-              fromId);\n-      entityFilters.setCreatedTimeBegin(range.dateStart);\n-      entityFilters.setCreatedTimeEnd(range.dateEnd);\n+              limit, range.dateStart, range.dateEnd,\n+              null, null, null, null, null, null, fromId);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n           createTimelineDataToRetrieve(null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, range.dateStart, range.dateEnd,\n              null, null, null, null, null, null, fromId);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n-              limit, null, null, null, null, null, null, null, null, null,\n+              limit, null, null, null, null, null, null, null, null,\n               fromId);\n       entityFilters.setCreatedTimeBegin(range.dateStart);\n       entityFilters.setCreatedTimeEnd(range.dateEnd);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n           createTimelineDataToRetrieve(null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, null, null, null, null, null, null, null, null,\n              fromId);\n      entityFilters.setCreatedTimeBegin(range.dateStart);\n      entityFilters.setCreatedTimeEnd(range.dateEnd);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "8bb26465956a37d7398818bc0919772e12953725": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6027. Support fromid(offset) filter for /flows API (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "8bb26465956a37d7398818bc0919772e12953725",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6027. Support fromid(offset) filter for /flows API (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "8bb26465956a37d7398818bc0919772e12953725",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n-      @QueryParam(\"daterange\") String dateRange) {\n+      @QueryParam(\"daterange\") String dateRange,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, null, null, null, null, null, null, null, null, null,\n-              null);\n+              fromId);\n       entityFilters.setCreatedTimeBegin(range.dateStart);\n       entityFilters.setCreatedTimeEnd(range.dateEnd);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n           createTimelineDataToRetrieve(null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, null, null, null, null, null, null, null, null, null,\n              fromId);\n      entityFilters.setCreatedTimeBegin(range.dateStart);\n      entityFilters.setCreatedTimeEnd(range.dateEnd);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), limit-String(annotations-@QueryParam(\"limit\")), dateRange-String(annotations-@QueryParam(\"daterange\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), limit-String(annotations-@QueryParam(\"limit\")), dateRange-String(annotations-@QueryParam(\"daterange\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6027. Support fromid(offset) filter for /flows API (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "8bb26465956a37d7398818bc0919772e12953725",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n-      @QueryParam(\"daterange\") String dateRange) {\n+      @QueryParam(\"daterange\") String dateRange,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n               limit, null, null, null, null, null, null, null, null, null,\n-              null);\n+              fromId);\n       entityFilters.setCreatedTimeBegin(range.dateStart);\n       entityFilters.setCreatedTimeEnd(range.dateEnd);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n               TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n           createTimelineDataToRetrieve(null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, null, null, null, null, null, null, null, null, null,\n              fromId);\n      entityFilters.setCreatedTimeBegin(range.dateStart);\n      entityFilters.setCreatedTimeEnd(range.dateEnd);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "02a9710a099fc9572122d87dd3e90c78522f5836": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n-          limit, null, null, null, null, null, null, null, null);\n+              limit, null, null, null, null, null, null, null, null, null,\n+              null);\n       entityFilters.setCreatedTimeBegin(range.dateStart);\n       entityFilters.setCreatedTimeEnd(range.dateEnd);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n-          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null),\n+              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n           entityFilters, TimelineReaderWebServicesUtils.\n           createTimelineDataToRetrieve(null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n              limit, null, null, null, null, null, null, null, null, null,\n              null);\n      entityFilters.setCreatedTimeBegin(range.dateStart);\n      entityFilters.setCreatedTimeEnd(range.dateEnd);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n              TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       TimelineEntityFilters entityFilters \u003d\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, null, null, null, null, null, null, null, null);\n       entityFilters.setCreatedTimeBegin(range.dateStart);\n       entityFilters.setCreatedTimeEnd(range.dateEnd);\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, null, null, null, null,\n           TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null),\n           entityFilters, TimelineReaderWebServicesUtils.\n-          createTimelineDataToRetrieve(null, null, null));\n+          createTimelineDataToRetrieve(null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, null, null, null, null, null, null, null, null);\n      entityFilters.setCreatedTimeBegin(range.dateStart);\n      entityFilters.setCreatedTimeEnd(range.dateEnd);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,41 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n+      TimelineEntityFilters entityFilters \u003d\n+          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n+          limit, null, null, null, null, null, null, null, null);\n+      entityFilters.setCreatedTimeBegin(range.dateStart);\n+      entityFilters.setCreatedTimeEnd(range.dateEnd);\n       entities \u003d timelineReaderManager.getEntities(\n-          null, TimelineReaderWebServicesUtils.parseStr(clusterId), null, null,\n-          null, TimelineEntityType.YARN_FLOW_ACTIVITY.toString(),\n-          TimelineReaderWebServicesUtils.parseLongStr(limit), range.dateStart,\n-          range.dateEnd, null, null, null, null, null, null, null);\n+          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n+          clusterId, null, null, null, null,\n+          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null),\n+          entityFilters, TimelineReaderWebServicesUtils.\n+          createTimelineDataToRetrieve(null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      TimelineEntityFilters entityFilters \u003d\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, null, null, null, null, null, null, null, null);\n      entityFilters.setCreatedTimeBegin(range.dateStart);\n      entityFilters.setCreatedTimeEnd(range.dateEnd);\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, null, null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null),\n          entityFilters, TimelineReaderWebServicesUtils.\n          createTimelineDataToRetrieve(null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n-      @QueryParam(\"daterange\") String dateRange,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"daterange\") String dateRange) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       entities \u003d timelineReaderManager.getEntities(\n-          null, parseStr(clusterId), null, null, null,\n-          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n-          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+          null, TimelineReaderWebServicesUtils.parseStr(clusterId), null, null,\n+          null, TimelineEntityType.YARN_FLOW_ACTIVITY.toString(),\n+          TimelineReaderWebServicesUtils.parseLongStr(limit), range.dateStart,\n+          range.dateEnd, null, null, null, null, null, null, null);\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      entities \u003d timelineReaderManager.getEntities(\n          null, TimelineReaderWebServicesUtils.parseStr(clusterId), null, null,\n          null, TimelineEntityType.YARN_FLOW_ACTIVITY.toString(),\n          TimelineReaderWebServicesUtils.parseLongStr(limit), range.dateStart,\n          range.dateEnd, null, null, null, null, null, null, null);\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), limit-String(annotations-@QueryParam(\"limit\")), dateRange-String(annotations-@QueryParam(\"daterange\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), limit-String(annotations-@QueryParam(\"limit\")), dateRange-String(annotations-@QueryParam(\"daterange\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n-      @QueryParam(\"daterange\") String dateRange,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"daterange\") String dateRange) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       entities \u003d timelineReaderManager.getEntities(\n-          null, parseStr(clusterId), null, null, null,\n-          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n-          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+          null, TimelineReaderWebServicesUtils.parseStr(clusterId), null, null,\n+          null, TimelineEntityType.YARN_FLOW_ACTIVITY.toString(),\n+          TimelineReaderWebServicesUtils.parseLongStr(limit), range.dateStart,\n+          range.dateEnd, null, null, null, null, null, null, null);\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      entities \u003d timelineReaderManager.getEntities(\n          null, TimelineReaderWebServicesUtils.parseStr(clusterId), null, null,\n          null, TimelineEntityType.YARN_FLOW_ACTIVITY.toString(),\n          TimelineReaderWebServicesUtils.parseLongStr(limit), range.dateStart,\n          range.dateEnd, null, null, null, null, null, null, null);\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       DateRange range \u003d parseDateRange(dateRange);\n       entities \u003d timelineReaderManager.getEntities(\n           null, parseStr(clusterId), null, null, null,\n           TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n           range.dateStart, range.dateEnd, null, null, null, null, null, null,\n-          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      entities \u003d timelineReaderManager.getEntities(\n          null, parseStr(clusterId), null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "e3e857866d9fdefb7e353b21ae24eab4401e60b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4179. [reader implementation] support flow activity queries based on time (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4179. [reader implementation] support flow activity queries based on time (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n+      @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n+      DateRange range \u003d parseDateRange(dateRange);\n       entities \u003d timelineReaderManager.getEntities(\n           null, parseStr(clusterId), null, null, null,\n           TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n-          null, null, null, null, null, null, null, null, null, null,\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n+          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      entities \u003d timelineReaderManager.getEntities(\n          null, parseStr(clusterId), null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), limit-String(annotations-@QueryParam(\"limit\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), limit-String(annotations-@QueryParam(\"limit\")), dateRange-String(annotations-@QueryParam(\"daterange\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4179. [reader implementation] support flow activity queries based on time (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n+      @QueryParam(\"daterange\") String dateRange,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n+      DateRange range \u003d parseDateRange(dateRange);\n       entities \u003d timelineReaderManager.getEntities(\n           null, parseStr(clusterId), null, null, null,\n           TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n-          null, null, null, null, null, null, null, null, null, null,\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n+          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"daterange\") String dateRange,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      DateRange range \u003d parseDateRange(dateRange);\n      entities \u003d timelineReaderManager.getEntities(\n          null, parseStr(clusterId), null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n          range.dateStart, range.dateEnd, null, null, null, null, null, null,\n          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3864. Implement support for querying single app and all apps for a flow run (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n-        (null \u003d\u003d req.getQueryString() ? \"\" :\n+        (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           null, parseStr(clusterId), null, null, null,\n           TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n           null, null, null, null, null, null, null, null, null, null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          null, parseStr(clusterId), null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n          null, null, null, null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4203. Add request/response logging \u0026 timing for each REST endpoint call (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
      "commitAuthor": "Vrushali Channapattan",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   public Set\u003cTimelineEntity\u003e getFlows(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"fields\") String fields) {\n+    String url \u003d req.getRequestURI() +\n+        (null \u003d\u003d req.getQueryString() ? \"\" :\n+            QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           null, parseStr(clusterId), null, null, null,\n           TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n           null, null, null, null, null, null, null, null, null, null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n-    } catch (NumberFormatException e) {\n-      throw new BadRequestException(\"limit is not a numeric value.\");\n     } catch (Exception e) {\n-      handleException(e);\n+      handleException(e, url, startTime, \"limit\");\n     }\n+    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n+    LOG.info(\"Processed URL \" + url +\n+        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (null \u003d\u003d req.getQueryString() ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          null, parseStr(clusterId), null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n          null, null, null, null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4075 [reader REST API] implement support for querying for flows and flow runs (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
      "commitAuthor": "Vrushali Channapattan",
      "diff": "@@ -0,0 +1,25 @@\n+  public Set\u003cTimelineEntity\u003e getFlows(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @QueryParam(\"limit\") String limit,\n+      @QueryParam(\"fields\") String fields) {\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    Set\u003cTimelineEntity\u003e entities \u003d null;\n+    try {\n+      entities \u003d timelineReaderManager.getEntities(\n+          null, parseStr(clusterId), null, null, null,\n+          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n+          null, null, null, null, null, null, null, null, null, null,\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n+    } catch (NumberFormatException e) {\n+      throw new BadRequestException(\"limit is not a numeric value.\");\n+    } catch (Exception e) {\n+      handleException(e);\n+    }\n+    if (entities \u003d\u003d null) {\n+      entities \u003d Collections.emptySet();\n+    }\n+    return entities;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlows(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          null, parseStr(clusterId), null, null, null,\n          TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), parseLongStr(limit),\n          null, null, null, null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\"limit is not a numeric value.\");\n    } catch (Exception e) {\n      handleException(e);\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}