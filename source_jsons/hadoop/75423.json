{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "processResult",
  "functionId": "processResult___rc-int__path-String__ctx-Object__stat-Stat",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 524,
  "functionEndLine": 580,
  "numCommitsSeen": 38,
  "timeTaken": 1853,
  "changeHistory": [
    "233cab89adb6bae21d7e171f2af516b92266242c",
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f",
    "b74d7427855eb7e20be70155c11acac0e333bd6a",
    "66931670287bc859300014ad50531f5d9a648067",
    "04416861eb068f5d0a4ba1361924714d89f2d73c",
    "31c2e3f29cbdc33a7333022d61130a25cee03684",
    "805c1280ce2773bc61ea718723b42b09d795688f",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec"
  ],
  "changeHistoryShort": {
    "233cab89adb6bae21d7e171f2af516b92266242c": "Ybodychange",
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": "Ybodychange",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": "Ybodychange",
    "b74d7427855eb7e20be70155c11acac0e333bd6a": "Ybodychange",
    "66931670287bc859300014ad50531f5d9a648067": "Ybodychange",
    "04416861eb068f5d0a4ba1361924714d89f2d73c": "Ybodychange",
    "31c2e3f29cbdc33a7333022d61130a25cee03684": "Ybodychange",
    "805c1280ce2773bc61ea718723b42b09d795688f": "Ybodychange",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "233cab89adb6bae21d7e171f2af516b92266242c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12186. ActiveStandbyElector shouldn\u0027t call monitorLockNodeAsync multiple times (Contributed by zhihai xu)\n",
      "commitDate": "06/07/15 3:09 AM",
      "commitName": "233cab89adb6bae21d7e171f2af516b92266242c",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "25/03/15 12:36 AM",
      "commitNameOld": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 103.11,
      "commitsBetweenForRepo": 878,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     if (isStaleClient(ctx)) return;\n-    \n+    monitorLockNodePending \u003d false;\n+\n     assert wantToBeInElection :\n         \"Got a StatNode result after quitting election\";\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n           + \" connectionState: \" + zkConnectionState + \" for \" + this);\n     }\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         if (!becomeActive()) {\n           reJoinElectionAfterFailureToBecomeActive();\n         }\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (statRetryCount \u003c maxRetryNum) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock monitoring failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    monitorLockNodePending \u003d false;\n\n    assert wantToBeInElection :\n        \"Got a StatNode result after quitting election\";\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n          + \" connectionState: \" + zkConnectionState + \" for \" + this);\n    }\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        if (!becomeActive()) {\n          reJoinElectionAfterFailureToBecomeActive();\n        }\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c maxRetryNum) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock monitoring failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11741. Add LOG.isDebugEnabled() guard for some LOG.debug(). Contributed by Walter Su.\n",
      "commitDate": "25/03/15 12:36 AM",
      "commitName": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "05/01/15 7:45 PM",
      "commitNameOld": "9803ae374f69942aec82ec6eeeb9722523a1ade0",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 78.16,
      "commitsBetweenForRepo": 694,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     if (isStaleClient(ctx)) return;\n     \n     assert wantToBeInElection :\n         \"Got a StatNode result after quitting election\";\n-    \n-    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n-        + \" connectionState: \" + zkConnectionState + \" for \" + this);\n-        \n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n+          + \" connectionState: \" + zkConnectionState + \" for \" + this);\n+    }\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         if (!becomeActive()) {\n           reJoinElectionAfterFailureToBecomeActive();\n         }\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (statRetryCount \u003c maxRetryNum) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock monitoring failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    \n    assert wantToBeInElection :\n        \"Got a StatNode result after quitting election\";\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n          + \" connectionState: \" + zkConnectionState + \" for \" + this);\n    }\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        if (!becomeActive()) {\n          reJoinElectionAfterFailureToBecomeActive();\n        }\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c maxRetryNum) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock monitoring failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10535. Make the retry numbers in ActiveStandbyElector configurable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589905 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/14 4:03 PM",
      "commitName": "6d4c7df43401b87781e81c57405434ba9b9efd6f",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "25/03/14 11:07 AM",
      "commitNameOld": "274d9b2ac48547b8d466e5006c233576c1aa7591",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 30.21,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     if (isStaleClient(ctx)) return;\n     \n     assert wantToBeInElection :\n         \"Got a StatNode result after quitting election\";\n     \n     LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState + \" for \" + this);\n         \n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         if (!becomeActive()) {\n           reJoinElectionAfterFailureToBecomeActive();\n         }\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n-      if (statRetryCount \u003c NUM_RETRIES) {\n+      if (statRetryCount \u003c maxRetryNum) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock monitoring failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    \n    assert wantToBeInElection :\n        \"Got a StatNode result after quitting election\";\n    \n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState + \" for \" + this);\n        \n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        if (!becomeActive()) {\n          reJoinElectionAfterFailureToBecomeActive();\n        }\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c maxRetryNum) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock monitoring failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "b74d7427855eb7e20be70155c11acac0e333bd6a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8245. Fix flakiness in TestZKFailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 12:21 PM",
      "commitName": "b74d7427855eb7e20be70155c11acac0e333bd6a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 4:37 PM",
      "commitNameOld": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,55 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     if (isStaleClient(ctx)) return;\n+    \n+    assert wantToBeInElection :\n+        \"Got a StatNode result after quitting election\";\n+    \n     LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n-        + \" connectionState: \" + zkConnectionState);\n+        + \" connectionState: \" + zkConnectionState + \" for \" + this);\n+        \n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         if (!becomeActive()) {\n           reJoinElectionAfterFailureToBecomeActive();\n         }\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (statRetryCount \u003c NUM_RETRIES) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock monitoring failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    \n    assert wantToBeInElection :\n        \"Got a StatNode result after quitting election\";\n    \n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState + \" for \" + this);\n        \n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        if (!becomeActive()) {\n          reJoinElectionAfterFailureToBecomeActive();\n        }\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c NUM_RETRIES) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock monitoring failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "66931670287bc859300014ad50531f5d9a648067": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8220. ZKFailoverController doesn\u0027t handle failure to become active correctly. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/03/12 1:23 PM",
      "commitName": "66931670287bc859300014ad50531f5d9a648067",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/03/12 2:49 PM",
      "commitNameOld": "04416861eb068f5d0a4ba1361924714d89f2d73c",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     if (isStaleClient(ctx)) return;\n     LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n-        becomeActive();\n+        if (!becomeActive()) {\n+          reJoinElectionAfterFailureToBecomeActive();\n+        }\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (statRetryCount \u003c NUM_RETRIES) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock monitoring failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        if (!becomeActive()) {\n          reJoinElectionAfterFailureToBecomeActive();\n        }\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c NUM_RETRIES) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock monitoring failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "04416861eb068f5d0a4ba1361924714d89f2d73c": {
      "type": "Ybodychange",
      "commitMessage": "Amend HADOOP-8212 (Improve ActiveStandbyElector\u0027s behavior when session expires)\n\nAmendment patch incorporates following feedback from Bikas Saha:\n- adds a new functional test for session expiration while in the standby state\n- adds a safety check in the StatCallback for session expiration\n- improves some comments\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307128 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/03/12 2:49 PM",
      "commitName": "04416861eb068f5d0a4ba1361924714d89f2d73c",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "26/03/12 4:37 PM",
      "commitNameOld": "578f413778a6f005a35d18d7f015df128aeded5b",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     if (isStaleClient(ctx)) return;\n     LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         becomeActive();\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (statRetryCount \u003c NUM_RETRIES) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n+    } else if (isSessionExpired(code)) {\n+      // This isn\u0027t fatal - the client Watcher will re-join the election\n+      LOG.warn(\"Lock monitoring failed because session was lost\");\n+      return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        becomeActive();\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c NUM_RETRIES) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock monitoring failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "31c2e3f29cbdc33a7333022d61130a25cee03684": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 12:31 PM",
      "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/03/12 5:05 PM",
      "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,44 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n+    if (isStaleClient(ctx)) return;\n     LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n-    if (zkClient \u003d\u003d null) {\n-      // zkClient is nulled before closing the connection\n-      // this is the callback with session expired after we closed the session\n-      return;\n-    }\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         becomeActive();\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n     if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (statRetryCount \u003c NUM_RETRIES) {\n         ++statRetryCount;\n         monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        becomeActive();\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c NUM_RETRIES) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "805c1280ce2773bc61ea718723b42b09d795688f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8163. Improve ActiveStandbyElector to provide hooks for fencing old active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/03/12 5:05 PM",
      "commitName": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "01/03/12 5:32 PM",
      "commitNameOld": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 21.94,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       Stat stat) {\n     LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n     if (zkClient \u003d\u003d null) {\n       // zkClient is nulled before closing the connection\n       // this is the callback with session expired after we closed the session\n       return;\n     }\n \n     Code code \u003d Code.get(rc);\n-    if (operationSuccess(code)) {\n+    if (isSuccess(code)) {\n       // the following owner check completes verification in case the lock znode\n       // creation was retried\n       if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n         // we own the lock znode. so we are the leader\n         becomeActive();\n       } else {\n         // we dont own the lock znode. so we are a standby.\n         becomeStandby();\n       }\n       // the watch set by us will notify about changes\n       return;\n     }\n \n-    if (operationNodeDoesNotExist(code)) {\n+    if (isNodeDoesNotExist(code)) {\n       // the lock znode disappeared before we started monitoring it\n       enterNeutralMode();\n       joinElectionInternal();\n       return;\n     }\n \n     String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n         + code.toString();\n     LOG.debug(errorMessage);\n \n-    if (operationRetry(code)) {\n+    if (shouldRetry(code)) {\n       if (statRetryCount \u003c NUM_RETRIES) {\n         ++statRetryCount;\n-        monitorNode();\n+        monitorLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode monitoring connection errors.\";\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n    if (zkClient \u003d\u003d null) {\n      // zkClient is nulled before closing the connection\n      // this is the callback with session expired after we closed the session\n      return;\n    }\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        becomeActive();\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (isNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (statRetryCount \u003c NUM_RETRIES) {\n        ++statRetryCount;\n        monitorLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7992. Add ZKClient library to facilitate leader election. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1235841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:26 AM",
      "commitName": "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,48 @@\n+  public synchronized void processResult(int rc, String path, Object ctx,\n+      Stat stat) {\n+    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n+        + \" connectionState: \" + zkConnectionState);\n+    if (zkClient \u003d\u003d null) {\n+      // zkClient is nulled before closing the connection\n+      // this is the callback with session expired after we closed the session\n+      return;\n+    }\n+\n+    Code code \u003d Code.get(rc);\n+    if (operationSuccess(code)) {\n+      // the following owner check completes verification in case the lock znode\n+      // creation was retried\n+      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n+        // we own the lock znode. so we are the leader\n+        becomeActive();\n+      } else {\n+        // we dont own the lock znode. so we are a standby.\n+        becomeStandby();\n+      }\n+      // the watch set by us will notify about changes\n+      return;\n+    }\n+\n+    if (operationNodeDoesNotExist(code)) {\n+      // the lock znode disappeared before we started monitoring it\n+      enterNeutralMode();\n+      joinElectionInternal();\n+      return;\n+    }\n+\n+    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n+        + code.toString();\n+    LOG.debug(errorMessage);\n+\n+    if (operationRetry(code)) {\n+      if (statRetryCount \u003c NUM_RETRIES) {\n+        ++statRetryCount;\n+        monitorNode();\n+        return;\n+      }\n+      errorMessage \u003d errorMessage\n+          + \". Not retrying further znode monitoring connection errors.\";\n+    }\n+\n+    fatalError(errorMessage);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      Stat stat) {\n    LOG.debug(\"StatNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n    if (zkClient \u003d\u003d null) {\n      // zkClient is nulled before closing the connection\n      // this is the callback with session expired after we closed the session\n      return;\n    }\n\n    Code code \u003d Code.get(rc);\n    if (operationSuccess(code)) {\n      // the following owner check completes verification in case the lock znode\n      // creation was retried\n      if (stat.getEphemeralOwner() \u003d\u003d zkClient.getSessionId()) {\n        // we own the lock znode. so we are the leader\n        becomeActive();\n      } else {\n        // we dont own the lock znode. so we are a standby.\n        becomeStandby();\n      }\n      // the watch set by us will notify about changes\n      return;\n    }\n\n    if (operationNodeDoesNotExist(code)) {\n      // the lock znode disappeared before we started monitoring it\n      enterNeutralMode();\n      joinElectionInternal();\n      return;\n    }\n\n    String errorMessage \u003d \"Received stat error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (operationRetry(code)) {\n      if (statRetryCount \u003c NUM_RETRIES) {\n        ++statRetryCount;\n        monitorNode();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode monitoring connection errors.\";\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}