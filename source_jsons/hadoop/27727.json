{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityMulticastAMRMProxyPolicy.java",
  "functionName": "getHeadroomWeighting",
  "functionId": "getHeadroomWeighting___targetId-SubClusterId__allocationBookkeeper-AllocationBookkeeper",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
  "functionStartLine": 459,
  "functionEndLine": 484,
  "numCommitsSeen": 11,
  "timeTaken": 805,
  "changeHistory": [
    "1dadd0b45a6a605da72eb304808edb49fc66da45"
  ],
  "changeHistoryShort": {
    "1dadd0b45a6a605da72eb304808edb49fc66da45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1dadd0b45a6a605da72eb304808edb49fc66da45": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,26 @@\n+  private float getHeadroomWeighting(SubClusterId targetId,\n+      AllocationBookkeeper allocationBookkeeper) {\n+\n+    // baseline weight for all RMs\n+    float headroomWeighting \u003d\n+        1 / (float) allocationBookkeeper.getActiveAndEnabledSC().size();\n+\n+    // if we have headroom infomration for this sub-cluster (and we are safe\n+    // from /0 issues)\n+    if (headroom.containsKey(targetId)\n+        \u0026\u0026 allocationBookkeeper.totHeadroomMemory \u003e 0) {\n+      // compute which portion of the RMs that are active/enabled have reported\n+      // their headroom (needed as adjustment factor)\n+      // (note: getActiveAndEnabledSC should never be null/zero)\n+      float ratioHeadroomKnown \u003d allocationBookkeeper.totHeadRoomEnabledRMs\n+          / (float) allocationBookkeeper.getActiveAndEnabledSC().size();\n+\n+      // headroomWeighting is the ratio of headroom memory in the targetId\n+      // cluster / total memory. The ratioHeadroomKnown factor is applied to\n+      // adjust for missing information and ensure sum of allocated containers\n+      // closely approximate what the user asked (small excess).\n+      headroomWeighting \u003d (headroom.get(targetId).getMemorySize()\n+          / allocationBookkeeper.totHeadroomMemory) * (ratioHeadroomKnown);\n+    }\n+    return headroomWeighting;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private float getHeadroomWeighting(SubClusterId targetId,\n      AllocationBookkeeper allocationBookkeeper) {\n\n    // baseline weight for all RMs\n    float headroomWeighting \u003d\n        1 / (float) allocationBookkeeper.getActiveAndEnabledSC().size();\n\n    // if we have headroom infomration for this sub-cluster (and we are safe\n    // from /0 issues)\n    if (headroom.containsKey(targetId)\n        \u0026\u0026 allocationBookkeeper.totHeadroomMemory \u003e 0) {\n      // compute which portion of the RMs that are active/enabled have reported\n      // their headroom (needed as adjustment factor)\n      // (note: getActiveAndEnabledSC should never be null/zero)\n      float ratioHeadroomKnown \u003d allocationBookkeeper.totHeadRoomEnabledRMs\n          / (float) allocationBookkeeper.getActiveAndEnabledSC().size();\n\n      // headroomWeighting is the ratio of headroom memory in the targetId\n      // cluster / total memory. The ratioHeadroomKnown factor is applied to\n      // adjust for missing information and ensure sum of allocated containers\n      // closely approximate what the user asked (small excess).\n      headroomWeighting \u003d (headroom.get(targetId).getMemorySize()\n          / allocationBookkeeper.totHeadroomMemory) * (ratioHeadroomKnown);\n    }\n    return headroomWeighting;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java"
    }
  }
}