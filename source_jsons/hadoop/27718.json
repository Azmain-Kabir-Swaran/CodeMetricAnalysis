{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityMulticastAMRMProxyPolicy.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___policyContext-FederationPolicyInitializationContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
  "functionStartLine": 139,
  "functionEndLine": 191,
  "numCommitsSeen": 11,
  "timeTaken": 2054,
  "changeHistory": [
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa",
    "e0f6ffdbad6f43fd43ec57fb68ebf5275b8b9ba0",
    "8623644f4599f51d34ba79c4c1453b3997205d8f",
    "1dadd0b45a6a605da72eb304808edb49fc66da45"
  ],
  "changeHistoryShort": {
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa": "Ybodychange",
    "e0f6ffdbad6f43fd43ec57fb68ebf5275b8b9ba0": "Ybodychange",
    "8623644f4599f51d34ba79c4c1453b3997205d8f": "Ybodychange",
    "1dadd0b45a6a605da72eb304808edb49fc66da45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8933. [AMRMProxy] Fix potential empty fields in allocation response, move SubClusterTimeout to FederationInterceptor. Contributed by Botong Huang.\n",
      "commitDate": "11/11/18 11:12 AM",
      "commitName": "b5ec85d96615e8214c14b57f8980a1dee6197ffa",
      "commitAuthor": "Botong Huang",
      "commitDateOld": "28/08/18 4:01 PM",
      "commitNameOld": "7ed458b255e492fd5bc2ca36f216ff1b16054db7",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 74.84,
      "commitsBetweenForRepo": 697,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,53 @@\n   public void reinitialize(\n       FederationPolicyInitializationContext policyContext)\n       throws FederationPolicyInitializationException {\n \n     // save reference to old weights\n     WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n \n     super.reinitialize(policyContext);\n     if (!getIsDirty()) {\n       return;\n     }\n \n     Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n     boolean allInactive \u003d true;\n     WeightedPolicyInfo policy \u003d getPolicyInfo();\n \n     if (policy.getAMRMPolicyWeights() !\u003d null\n         \u0026\u0026 policy.getAMRMPolicyWeights().size() \u003e 0) {\n       for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n           .entrySet()) {\n         if (e.getValue() \u003e 0) {\n           allInactive \u003d false;\n         }\n         newWeightsConverted.put(e.getKey().toId(), e.getValue());\n       }\n     }\n     if (allInactive) {\n       // reset the policyInfo and throw\n       setPolicyInfo(tempPolicy);\n       throw new FederationPolicyInitializationException(\n           \"The weights used to configure \"\n               + \"this policy are all set to zero! (no ResourceRequest could be \"\n               + \"forwarded with this setting.)\");\n     }\n \n     if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n       setPolicyInfo(tempPolicy);\n       throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n           + \"filed in the context must be initialized to use this policy\");\n     }\n \n     weights \u003d newWeightsConverted;\n     resolver \u003d policyContext.getFederationSubclusterResolver();\n \n     if (headroom \u003d\u003d null) {\n       headroom \u003d new ConcurrentHashMap\u003c\u003e();\n-      lastHeartbeatTimeStamp \u003d new ConcurrentHashMap\u003c\u003e();\n     }\n     hrAlpha \u003d policy.getHeadroomAlpha();\n \n     this.federationFacade \u003d\n         policyContext.getFederationStateStoreFacade();\n     this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n-\n-    this.subClusterTimeOut \u003d this.federationFacade.getConf().getLong(\n-        YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n-        YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n-    if (this.subClusterTimeOut \u003c\u003d 0) {\n-      LOG.info(\n-          \"{} configured to be {}, should be positive. Using default of {}.\",\n-          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n-          this.subClusterTimeOut,\n-          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n-      this.subClusterTimeOut \u003d\n-          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext policyContext)\n      throws FederationPolicyInitializationException {\n\n    // save reference to old weights\n    WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n\n    super.reinitialize(policyContext);\n    if (!getIsDirty()) {\n      return;\n    }\n\n    Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n    boolean allInactive \u003d true;\n    WeightedPolicyInfo policy \u003d getPolicyInfo();\n\n    if (policy.getAMRMPolicyWeights() !\u003d null\n        \u0026\u0026 policy.getAMRMPolicyWeights().size() \u003e 0) {\n      for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n          .entrySet()) {\n        if (e.getValue() \u003e 0) {\n          allInactive \u003d false;\n        }\n        newWeightsConverted.put(e.getKey().toId(), e.getValue());\n      }\n    }\n    if (allInactive) {\n      // reset the policyInfo and throw\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\n          \"The weights used to configure \"\n              + \"this policy are all set to zero! (no ResourceRequest could be \"\n              + \"forwarded with this setting.)\");\n    }\n\n    if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n          + \"filed in the context must be initialized to use this policy\");\n    }\n\n    weights \u003d newWeightsConverted;\n    resolver \u003d policyContext.getFederationSubclusterResolver();\n\n    if (headroom \u003d\u003d null) {\n      headroom \u003d new ConcurrentHashMap\u003c\u003e();\n    }\n    hrAlpha \u003d policy.getHeadroomAlpha();\n\n    this.federationFacade \u003d\n        policyContext.getFederationStateStoreFacade();\n    this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
      "extendedDetails": {}
    },
    "e0f6ffdbad6f43fd43ec57fb68ebf5275b8b9ba0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8581. [AMRMProxy] Add sub-cluster timeout in LocalityMulticastAMRMProxyPolicy. Contributed by Botong Huang.\n",
      "commitDate": "20/08/18 2:33 PM",
      "commitName": "e0f6ffdbad6f43fd43ec57fb68ebf5275b8b9ba0",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "21/06/18 6:24 PM",
      "commitNameOld": "99948565cb5d5706241d7a8fc591e1617c499e03",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 59.84,
      "commitsBetweenForRepo": 435,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,67 @@\n   public void reinitialize(\n       FederationPolicyInitializationContext policyContext)\n       throws FederationPolicyInitializationException {\n \n     // save reference to old weights\n     WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n \n     super.reinitialize(policyContext);\n     if (!getIsDirty()) {\n       return;\n     }\n \n     Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n     boolean allInactive \u003d true;\n     WeightedPolicyInfo policy \u003d getPolicyInfo();\n \n     if (policy.getAMRMPolicyWeights() !\u003d null\n         \u0026\u0026 policy.getAMRMPolicyWeights().size() \u003e 0) {\n       for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n           .entrySet()) {\n         if (e.getValue() \u003e 0) {\n           allInactive \u003d false;\n         }\n         newWeightsConverted.put(e.getKey().toId(), e.getValue());\n       }\n     }\n     if (allInactive) {\n       // reset the policyInfo and throw\n       setPolicyInfo(tempPolicy);\n       throw new FederationPolicyInitializationException(\n           \"The weights used to configure \"\n               + \"this policy are all set to zero! (no ResourceRequest could be \"\n               + \"forwarded with this setting.)\");\n     }\n \n     if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n       setPolicyInfo(tempPolicy);\n       throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n           + \"filed in the context must be initialized to use this policy\");\n     }\n \n     weights \u003d newWeightsConverted;\n     resolver \u003d policyContext.getFederationSubclusterResolver();\n \n     if (headroom \u003d\u003d null) {\n       headroom \u003d new ConcurrentHashMap\u003c\u003e();\n+      lastHeartbeatTimeStamp \u003d new ConcurrentHashMap\u003c\u003e();\n     }\n     hrAlpha \u003d policy.getHeadroomAlpha();\n \n     this.federationFacade \u003d\n         policyContext.getFederationStateStoreFacade();\n     this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n \n+    this.subClusterTimeOut \u003d this.federationFacade.getConf().getLong(\n+        YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n+        YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n+    if (this.subClusterTimeOut \u003c\u003d 0) {\n+      LOG.info(\n+          \"{} configured to be {}, should be positive. Using default of {}.\",\n+          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n+          this.subClusterTimeOut,\n+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n+      this.subClusterTimeOut \u003d\n+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext policyContext)\n      throws FederationPolicyInitializationException {\n\n    // save reference to old weights\n    WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n\n    super.reinitialize(policyContext);\n    if (!getIsDirty()) {\n      return;\n    }\n\n    Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n    boolean allInactive \u003d true;\n    WeightedPolicyInfo policy \u003d getPolicyInfo();\n\n    if (policy.getAMRMPolicyWeights() !\u003d null\n        \u0026\u0026 policy.getAMRMPolicyWeights().size() \u003e 0) {\n      for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n          .entrySet()) {\n        if (e.getValue() \u003e 0) {\n          allInactive \u003d false;\n        }\n        newWeightsConverted.put(e.getKey().toId(), e.getValue());\n      }\n    }\n    if (allInactive) {\n      // reset the policyInfo and throw\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\n          \"The weights used to configure \"\n              + \"this policy are all set to zero! (no ResourceRequest could be \"\n              + \"forwarded with this setting.)\");\n    }\n\n    if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n          + \"filed in the context must be initialized to use this policy\");\n    }\n\n    weights \u003d newWeightsConverted;\n    resolver \u003d policyContext.getFederationSubclusterResolver();\n\n    if (headroom \u003d\u003d null) {\n      headroom \u003d new ConcurrentHashMap\u003c\u003e();\n      lastHeartbeatTimeStamp \u003d new ConcurrentHashMap\u003c\u003e();\n    }\n    hrAlpha \u003d policy.getHeadroomAlpha();\n\n    this.federationFacade \u003d\n        policyContext.getFederationStateStoreFacade();\n    this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n\n    this.subClusterTimeOut \u003d this.federationFacade.getConf().getLong(\n        YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n        YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n    if (this.subClusterTimeOut \u003c\u003d 0) {\n      LOG.info(\n          \"{} configured to be {}, should be positive. Using default of {}.\",\n          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n          this.subClusterTimeOut,\n          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n      this.subClusterTimeOut \u003d\n          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
      "extendedDetails": {}
    },
    "8623644f4599f51d34ba79c4c1453b3997205d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6190. Validation and synchronization fixes in LocalityMulticastAMRMProxyPolicy. (Botong Huang via curino)\n\n(cherry picked from commit 5c486961cd3a175b122ef86275c99b72964f2c50)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "8623644f4599f51d34ba79c4c1453b3997205d8f",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "1dadd0b45a6a605da72eb304808edb49fc66da45",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,54 @@\n   public void reinitialize(\n       FederationPolicyInitializationContext policyContext)\n       throws FederationPolicyInitializationException {\n \n     // save reference to old weights\n     WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n \n     super.reinitialize(policyContext);\n     if (!getIsDirty()) {\n       return;\n     }\n \n     Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n     boolean allInactive \u003d true;\n     WeightedPolicyInfo policy \u003d getPolicyInfo();\n-    if (policy.getAMRMPolicyWeights() \u003d\u003d null\n-        || policy.getAMRMPolicyWeights().size() \u003d\u003d 0) {\n-      allInactive \u003d false;\n-    } else {\n+\n+    if (policy.getAMRMPolicyWeights() !\u003d null\n+        \u0026\u0026 policy.getAMRMPolicyWeights().size() \u003e 0) {\n       for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n           .entrySet()) {\n         if (e.getValue() \u003e 0) {\n           allInactive \u003d false;\n         }\n         newWeightsConverted.put(e.getKey().toId(), e.getValue());\n       }\n     }\n     if (allInactive) {\n       // reset the policyInfo and throw\n       setPolicyInfo(tempPolicy);\n       throw new FederationPolicyInitializationException(\n           \"The weights used to configure \"\n               + \"this policy are all set to zero! (no ResourceRequest could be \"\n               + \"forwarded with this setting.)\");\n     }\n \n     if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n       setPolicyInfo(tempPolicy);\n       throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n           + \"filed in the context must be initialized to use this policy\");\n     }\n \n     weights \u003d newWeightsConverted;\n     resolver \u003d policyContext.getFederationSubclusterResolver();\n \n     if (headroom \u003d\u003d null) {\n       headroom \u003d new ConcurrentHashMap\u003c\u003e();\n     }\n     hrAlpha \u003d policy.getHeadroomAlpha();\n \n     this.federationFacade \u003d\n         policyContext.getFederationStateStoreFacade();\n-    this.bookkeeper \u003d new AllocationBookkeeper();\n     this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext policyContext)\n      throws FederationPolicyInitializationException {\n\n    // save reference to old weights\n    WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n\n    super.reinitialize(policyContext);\n    if (!getIsDirty()) {\n      return;\n    }\n\n    Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n    boolean allInactive \u003d true;\n    WeightedPolicyInfo policy \u003d getPolicyInfo();\n\n    if (policy.getAMRMPolicyWeights() !\u003d null\n        \u0026\u0026 policy.getAMRMPolicyWeights().size() \u003e 0) {\n      for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n          .entrySet()) {\n        if (e.getValue() \u003e 0) {\n          allInactive \u003d false;\n        }\n        newWeightsConverted.put(e.getKey().toId(), e.getValue());\n      }\n    }\n    if (allInactive) {\n      // reset the policyInfo and throw\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\n          \"The weights used to configure \"\n              + \"this policy are all set to zero! (no ResourceRequest could be \"\n              + \"forwarded with this setting.)\");\n    }\n\n    if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n          + \"filed in the context must be initialized to use this policy\");\n    }\n\n    weights \u003d newWeightsConverted;\n    resolver \u003d policyContext.getFederationSubclusterResolver();\n\n    if (headroom \u003d\u003d null) {\n      headroom \u003d new ConcurrentHashMap\u003c\u003e();\n    }\n    hrAlpha \u003d policy.getHeadroomAlpha();\n\n    this.federationFacade \u003d\n        policyContext.getFederationStateStoreFacade();\n    this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
      "extendedDetails": {}
    },
    "1dadd0b45a6a605da72eb304808edb49fc66da45": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,56 @@\n+  public void reinitialize(\n+      FederationPolicyInitializationContext policyContext)\n+      throws FederationPolicyInitializationException {\n+\n+    // save reference to old weights\n+    WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n+\n+    super.reinitialize(policyContext);\n+    if (!getIsDirty()) {\n+      return;\n+    }\n+\n+    Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n+    boolean allInactive \u003d true;\n+    WeightedPolicyInfo policy \u003d getPolicyInfo();\n+    if (policy.getAMRMPolicyWeights() \u003d\u003d null\n+        || policy.getAMRMPolicyWeights().size() \u003d\u003d 0) {\n+      allInactive \u003d false;\n+    } else {\n+      for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n+          .entrySet()) {\n+        if (e.getValue() \u003e 0) {\n+          allInactive \u003d false;\n+        }\n+        newWeightsConverted.put(e.getKey().toId(), e.getValue());\n+      }\n+    }\n+    if (allInactive) {\n+      // reset the policyInfo and throw\n+      setPolicyInfo(tempPolicy);\n+      throw new FederationPolicyInitializationException(\n+          \"The weights used to configure \"\n+              + \"this policy are all set to zero! (no ResourceRequest could be \"\n+              + \"forwarded with this setting.)\");\n+    }\n+\n+    if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n+      setPolicyInfo(tempPolicy);\n+      throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n+          + \"filed in the context must be initialized to use this policy\");\n+    }\n+\n+    weights \u003d newWeightsConverted;\n+    resolver \u003d policyContext.getFederationSubclusterResolver();\n+\n+    if (headroom \u003d\u003d null) {\n+      headroom \u003d new ConcurrentHashMap\u003c\u003e();\n+    }\n+    hrAlpha \u003d policy.getHeadroomAlpha();\n+\n+    this.federationFacade \u003d\n+        policyContext.getFederationStateStoreFacade();\n+    this.bookkeeper \u003d new AllocationBookkeeper();\n+    this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext policyContext)\n      throws FederationPolicyInitializationException {\n\n    // save reference to old weights\n    WeightedPolicyInfo tempPolicy \u003d getPolicyInfo();\n\n    super.reinitialize(policyContext);\n    if (!getIsDirty()) {\n      return;\n    }\n\n    Map\u003cSubClusterId, Float\u003e newWeightsConverted \u003d new HashMap\u003c\u003e();\n    boolean allInactive \u003d true;\n    WeightedPolicyInfo policy \u003d getPolicyInfo();\n    if (policy.getAMRMPolicyWeights() \u003d\u003d null\n        || policy.getAMRMPolicyWeights().size() \u003d\u003d 0) {\n      allInactive \u003d false;\n    } else {\n      for (Map.Entry\u003cSubClusterIdInfo, Float\u003e e : policy.getAMRMPolicyWeights()\n          .entrySet()) {\n        if (e.getValue() \u003e 0) {\n          allInactive \u003d false;\n        }\n        newWeightsConverted.put(e.getKey().toId(), e.getValue());\n      }\n    }\n    if (allInactive) {\n      // reset the policyInfo and throw\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\n          \"The weights used to configure \"\n              + \"this policy are all set to zero! (no ResourceRequest could be \"\n              + \"forwarded with this setting.)\");\n    }\n\n    if (policyContext.getHomeSubcluster() \u003d\u003d null) {\n      setPolicyInfo(tempPolicy);\n      throw new FederationPolicyInitializationException(\"The homeSubcluster \"\n          + \"filed in the context must be initialized to use this policy\");\n    }\n\n    weights \u003d newWeightsConverted;\n    resolver \u003d policyContext.getFederationSubclusterResolver();\n\n    if (headroom \u003d\u003d null) {\n      headroom \u003d new ConcurrentHashMap\u003c\u003e();\n    }\n    hrAlpha \u003d policy.getHeadroomAlpha();\n\n    this.federationFacade \u003d\n        policyContext.getFederationStateStoreFacade();\n    this.bookkeeper \u003d new AllocationBookkeeper();\n    this.homeSubcluster \u003d policyContext.getHomeSubcluster();\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java"
    }
  }
}