{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemAccessService.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
  "functionStartLine": 149,
  "functionEndLine": 204,
  "numCommitsSeen": 14,
  "timeTaken": 1579,
  "changeHistory": [
    "d8313b227495d748abe8884eee34db507476cee1",
    "3c9a01062e9097c2ed1db75318482543db2e382f",
    "20660b7a67b7f2815b1e27b98dce2b2682399505",
    "8bda086d046b12e8efed834f39a775e710ca0962",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "d8313b227495d748abe8884eee34db507476cee1": "Ybodychange",
    "3c9a01062e9097c2ed1db75318482543db2e382f": "Ybodychange",
    "20660b7a67b7f2815b1e27b98dce2b2682399505": "Ybodychange",
    "8bda086d046b12e8efed834f39a775e710ca0962": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d8313b227495d748abe8884eee34db507476cee1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14850. Optimize FileSystemAccessService#getFileSystemConfiguration. Contributed by Lisheng Sun.\n",
      "commitDate": "28/09/19 5:20 PM",
      "commitName": "d8313b227495d748abe8884eee34db507476cee1",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "11/10/16 4:29 PM",
      "commitNameOld": "3c9a01062e9097c2ed1db75318482543db2e382f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 1082.04,
      "commitsBetweenForRepo": 8334,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   protected void init() throws ServiceException {\n     LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n     String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n     if (security.equals(\"kerberos\")) {\n       String defaultName \u003d getServer().getName();\n       String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n       keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n       if (keytab.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n       }\n       String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n       principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n       if (principal.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n       }\n       Configuration conf \u003d new Configuration();\n       conf.set(HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\n       UserGroupInformation.setConfiguration(conf);\n       try {\n         UserGroupInformation.loginUserFromKeytab(principal, keytab);\n       } catch (IOException ex) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n       }\n       LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n     } else if (security.equals(\"simple\")) {\n       Configuration conf \u003d new Configuration();\n       conf.set(HADOOP_SECURITY_AUTHENTICATION, \"simple\");\n       UserGroupInformation.setConfiguration(conf);\n       LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n     } else {\n       throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n     }\n \n     String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n     File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n     if (!hadoopConfDir.exists()) {\n       hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n     }\n     if (!hadoopConfDir.exists()) {\n       throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n     }\n     try {\n       serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n+      fileSystemConf \u003d getNewFileSystemConfiguration();\n     } catch (IOException ex) {\n       throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n     }\n \n     LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n     for (Map.Entry entry : serviceHadoopConf) {\n       LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n     }\n     setRequiredServiceHadoopConf(serviceHadoopConf);\n \n     nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void init() throws ServiceException {\n    LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n    String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n    if (security.equals(\"kerberos\")) {\n      String defaultName \u003d getServer().getName();\n      String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n      keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n      if (keytab.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n      }\n      String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n      principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n      if (principal.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n      }\n      Configuration conf \u003d new Configuration();\n      conf.set(HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      try {\n        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n      } catch (IOException ex) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n      }\n      LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n    } else if (security.equals(\"simple\")) {\n      Configuration conf \u003d new Configuration();\n      conf.set(HADOOP_SECURITY_AUTHENTICATION, \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n    } else {\n      throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n    }\n\n    String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n    File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n    if (!hadoopConfDir.exists()) {\n      hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n    }\n    if (!hadoopConfDir.exists()) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n    }\n    try {\n      serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n      fileSystemConf \u003d getNewFileSystemConfiguration();\n    } catch (IOException ex) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n    }\n\n    LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n    for (Map.Entry entry : serviceHadoopConf) {\n      LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n    }\n    setRequiredServiceHadoopConf(serviceHadoopConf);\n\n    nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "3c9a01062e9097c2ed1db75318482543db2e382f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10903. Replace config key literal strings with config key names II: hadoop hdfs. Contributed by Chen Liang\n",
      "commitDate": "11/10/16 4:29 PM",
      "commitName": "3c9a01062e9097c2ed1db75318482543db2e382f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "16/09/16 3:37 PM",
      "commitNameOld": "8a40953058d50d421d62b71067a13b626b3cba1f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 25.04,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   protected void init() throws ServiceException {\n     LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n     String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n     if (security.equals(\"kerberos\")) {\n       String defaultName \u003d getServer().getName();\n       String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n       keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n       if (keytab.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n       }\n       String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n       principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n       if (principal.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n       }\n       Configuration conf \u003d new Configuration();\n-      conf.set(\"hadoop.security.authentication\", \"kerberos\");\n+      conf.set(HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\n       UserGroupInformation.setConfiguration(conf);\n       try {\n         UserGroupInformation.loginUserFromKeytab(principal, keytab);\n       } catch (IOException ex) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n       }\n       LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n     } else if (security.equals(\"simple\")) {\n       Configuration conf \u003d new Configuration();\n-      conf.set(\"hadoop.security.authentication\", \"simple\");\n+      conf.set(HADOOP_SECURITY_AUTHENTICATION, \"simple\");\n       UserGroupInformation.setConfiguration(conf);\n       LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n     } else {\n       throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n     }\n \n     String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n     File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n     if (!hadoopConfDir.exists()) {\n       hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n     }\n     if (!hadoopConfDir.exists()) {\n       throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n     }\n     try {\n       serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n     } catch (IOException ex) {\n       throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n     }\n \n     LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n     for (Map.Entry entry : serviceHadoopConf) {\n       LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n     }\n     setRequiredServiceHadoopConf(serviceHadoopConf);\n \n     nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void init() throws ServiceException {\n    LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n    String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n    if (security.equals(\"kerberos\")) {\n      String defaultName \u003d getServer().getName();\n      String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n      keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n      if (keytab.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n      }\n      String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n      principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n      if (principal.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n      }\n      Configuration conf \u003d new Configuration();\n      conf.set(HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      try {\n        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n      } catch (IOException ex) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n      }\n      LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n    } else if (security.equals(\"simple\")) {\n      Configuration conf \u003d new Configuration();\n      conf.set(HADOOP_SECURITY_AUTHENTICATION, \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n    } else {\n      throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n    }\n\n    String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n    File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n    if (!hadoopConfDir.exists()) {\n      hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n    }\n    if (!hadoopConfDir.exists()) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n    }\n    try {\n      serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n    } catch (IOException ex) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n    }\n\n    LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n    for (Map.Entry entry : serviceHadoopConf) {\n      LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n    }\n    setRequiredServiceHadoopConf(serviceHadoopConf);\n\n    nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "20660b7a67b7f2815b1e27b98dce2b2682399505": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7709. Fix findbug warnings in httpfs. Contributed by Rakesh R.\n",
      "commitDate": "05/02/15 2:57 AM",
      "commitName": "20660b7a67b7f2815b1e27b98dce2b2682399505",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "30/05/14 9:49 AM",
      "commitNameOld": "e4c06854b4165a9e582b35427785ea34f489c44f",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 250.76,
      "commitsBetweenForRepo": 2057,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   protected void init() throws ServiceException {\n     LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n     String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n     if (security.equals(\"kerberos\")) {\n       String defaultName \u003d getServer().getName();\n       String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n       keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n       if (keytab.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n       }\n       String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n       principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n       if (principal.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n       }\n       Configuration conf \u003d new Configuration();\n       conf.set(\"hadoop.security.authentication\", \"kerberos\");\n       UserGroupInformation.setConfiguration(conf);\n       try {\n         UserGroupInformation.loginUserFromKeytab(principal, keytab);\n       } catch (IOException ex) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n       }\n       LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n     } else if (security.equals(\"simple\")) {\n       Configuration conf \u003d new Configuration();\n       conf.set(\"hadoop.security.authentication\", \"simple\");\n       UserGroupInformation.setConfiguration(conf);\n       LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n     } else {\n       throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n     }\n \n     String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n     File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n-    if (hadoopConfDir \u003d\u003d null) {\n+    if (!hadoopConfDir.exists()) {\n       hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n     }\n     if (!hadoopConfDir.exists()) {\n       throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n     }\n     try {\n       serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n     } catch (IOException ex) {\n       throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n     }\n \n     LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n     for (Map.Entry entry : serviceHadoopConf) {\n       LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n     }\n     setRequiredServiceHadoopConf(serviceHadoopConf);\n \n     nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void init() throws ServiceException {\n    LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n    String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n    if (security.equals(\"kerberos\")) {\n      String defaultName \u003d getServer().getName();\n      String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n      keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n      if (keytab.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n      }\n      String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n      principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n      if (principal.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n      }\n      Configuration conf \u003d new Configuration();\n      conf.set(\"hadoop.security.authentication\", \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      try {\n        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n      } catch (IOException ex) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n      }\n      LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n    } else if (security.equals(\"simple\")) {\n      Configuration conf \u003d new Configuration();\n      conf.set(\"hadoop.security.authentication\", \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n    } else {\n      throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n    }\n\n    String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n    File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n    if (!hadoopConfDir.exists()) {\n      hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n    }\n    if (!hadoopConfDir.exists()) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n    }\n    try {\n      serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n    } catch (IOException ex) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n    }\n\n    LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n    for (Map.Entry entry : serviceHadoopConf) {\n      LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n    }\n    setRequiredServiceHadoopConf(serviceHadoopConf);\n\n    nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "8bda086d046b12e8efed834f39a775e710ca0962": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3263. HttpFS should read HDFS config from Hadoop site.xml files (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327627 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:51 AM",
      "commitName": "8bda086d046b12e8efed834f39a775e710ca0962",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "08/12/11 11:25 AM",
      "commitNameOld": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 131.98,
      "commitsBetweenForRepo": 974,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,55 @@\n   protected void init() throws ServiceException {\n     LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n     String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n     if (security.equals(\"kerberos\")) {\n       String defaultName \u003d getServer().getName();\n       String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n       keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n       if (keytab.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n       }\n       String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n       principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n       if (principal.length() \u003d\u003d 0) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n       }\n       Configuration conf \u003d new Configuration();\n       conf.set(\"hadoop.security.authentication\", \"kerberos\");\n       UserGroupInformation.setConfiguration(conf);\n       try {\n         UserGroupInformation.loginUserFromKeytab(principal, keytab);\n       } catch (IOException ex) {\n         throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n       }\n       LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n     } else if (security.equals(\"simple\")) {\n       Configuration conf \u003d new Configuration();\n       conf.set(\"hadoop.security.authentication\", \"simple\");\n       UserGroupInformation.setConfiguration(conf);\n       LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n     } else {\n       throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n     }\n \n-    serviceHadoopConf \u003d new Configuration(false);\n-    for (Map.Entry entry : getServiceConfig()) {\n-      String name \u003d (String) entry.getKey();\n-      if (name.startsWith(HADOOP_CONF_PREFIX)) {\n-        name \u003d name.substring(HADOOP_CONF_PREFIX.length());\n-        String value \u003d (String) entry.getValue();\n-        serviceHadoopConf.set(name, value);\n-\n-      }\n+    String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n+    File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n+    if (hadoopConfDir \u003d\u003d null) {\n+      hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n     }\n-    setRequiredServiceHadoopConf(serviceHadoopConf);\n+    if (!hadoopConfDir.exists()) {\n+      throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n+    }\n+    try {\n+      serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n+    } catch (IOException ex) {\n+      throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n+    }\n \n-    LOG.debug(\"FileSystemAccess default configuration:\");\n+    LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n     for (Map.Entry entry : serviceHadoopConf) {\n       LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n     }\n+    setRequiredServiceHadoopConf(serviceHadoopConf);\n \n     nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void init() throws ServiceException {\n    LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n    String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n    if (security.equals(\"kerberos\")) {\n      String defaultName \u003d getServer().getName();\n      String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n      keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n      if (keytab.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n      }\n      String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n      principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n      if (principal.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n      }\n      Configuration conf \u003d new Configuration();\n      conf.set(\"hadoop.security.authentication\", \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      try {\n        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n      } catch (IOException ex) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n      }\n      LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n    } else if (security.equals(\"simple\")) {\n      Configuration conf \u003d new Configuration();\n      conf.set(\"hadoop.security.authentication\", \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n    } else {\n      throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n    }\n\n    String hadoopConfDirProp \u003d getServiceConfig().get(HADOOP_CONF_DIR, getServer().getConfigDir());\n    File hadoopConfDir \u003d new File(hadoopConfDirProp).getAbsoluteFile();\n    if (hadoopConfDir \u003d\u003d null) {\n      hadoopConfDir \u003d new File(getServer().getConfigDir()).getAbsoluteFile();\n    }\n    if (!hadoopConfDir.exists()) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H10, hadoopConfDir);\n    }\n    try {\n      serviceHadoopConf \u003d loadHadoopConf(hadoopConfDir);\n    } catch (IOException ex) {\n      throw new ServiceException(FileSystemAccessException.ERROR.H11, ex.toString(), ex);\n    }\n\n    LOG.debug(\"FileSystemAccess FileSystem configuration:\");\n    for (Map.Entry entry : serviceHadoopConf) {\n      LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n    }\n    setRequiredServiceHadoopConf(serviceHadoopConf);\n\n    nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,52 @@\n+  protected void init() throws ServiceException {\n+    LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n+    String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n+    if (security.equals(\"kerberos\")) {\n+      String defaultName \u003d getServer().getName();\n+      String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n+      keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n+      if (keytab.length() \u003d\u003d 0) {\n+        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n+      }\n+      String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n+      principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n+      if (principal.length() \u003d\u003d 0) {\n+        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n+      }\n+      Configuration conf \u003d new Configuration();\n+      conf.set(\"hadoop.security.authentication\", \"kerberos\");\n+      UserGroupInformation.setConfiguration(conf);\n+      try {\n+        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n+      } catch (IOException ex) {\n+        throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n+      }\n+      LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n+    } else if (security.equals(\"simple\")) {\n+      Configuration conf \u003d new Configuration();\n+      conf.set(\"hadoop.security.authentication\", \"simple\");\n+      UserGroupInformation.setConfiguration(conf);\n+      LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n+    } else {\n+      throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n+    }\n+\n+    serviceHadoopConf \u003d new Configuration(false);\n+    for (Map.Entry entry : getServiceConfig()) {\n+      String name \u003d (String) entry.getKey();\n+      if (name.startsWith(HADOOP_CONF_PREFIX)) {\n+        name \u003d name.substring(HADOOP_CONF_PREFIX.length());\n+        String value \u003d (String) entry.getValue();\n+        serviceHadoopConf.set(name, value);\n+\n+      }\n+    }\n+    setRequiredServiceHadoopConf(serviceHadoopConf);\n+\n+    LOG.debug(\"FileSystemAccess default configuration:\");\n+    for (Map.Entry entry : serviceHadoopConf) {\n+      LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n+    }\n+\n+    nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void init() throws ServiceException {\n    LOG.info(\"Using FileSystemAccess JARs version [{}]\", VersionInfo.getVersion());\n    String security \u003d getServiceConfig().get(AUTHENTICATION_TYPE, \"simple\").trim();\n    if (security.equals(\"kerberos\")) {\n      String defaultName \u003d getServer().getName();\n      String keytab \u003d System.getProperty(\"user.home\") + \"/\" + defaultName + \".keytab\";\n      keytab \u003d getServiceConfig().get(KERBEROS_KEYTAB, keytab).trim();\n      if (keytab.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_KEYTAB);\n      }\n      String principal \u003d defaultName + \"/localhost@LOCALHOST\";\n      principal \u003d getServiceConfig().get(KERBEROS_PRINCIPAL, principal).trim();\n      if (principal.length() \u003d\u003d 0) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H01, KERBEROS_PRINCIPAL);\n      }\n      Configuration conf \u003d new Configuration();\n      conf.set(\"hadoop.security.authentication\", \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      try {\n        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n      } catch (IOException ex) {\n        throw new ServiceException(FileSystemAccessException.ERROR.H02, ex.getMessage(), ex);\n      }\n      LOG.info(\"Using FileSystemAccess Kerberos authentication, principal [{}] keytab [{}]\", principal, keytab);\n    } else if (security.equals(\"simple\")) {\n      Configuration conf \u003d new Configuration();\n      conf.set(\"hadoop.security.authentication\", \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LOG.info(\"Using FileSystemAccess simple/pseudo authentication, principal [{}]\", System.getProperty(\"user.name\"));\n    } else {\n      throw new ServiceException(FileSystemAccessException.ERROR.H09, security);\n    }\n\n    serviceHadoopConf \u003d new Configuration(false);\n    for (Map.Entry entry : getServiceConfig()) {\n      String name \u003d (String) entry.getKey();\n      if (name.startsWith(HADOOP_CONF_PREFIX)) {\n        name \u003d name.substring(HADOOP_CONF_PREFIX.length());\n        String value \u003d (String) entry.getValue();\n        serviceHadoopConf.set(name, value);\n\n      }\n    }\n    setRequiredServiceHadoopConf(serviceHadoopConf);\n\n    LOG.debug(\"FileSystemAccess default configuration:\");\n    for (Map.Entry entry : serviceHadoopConf) {\n      LOG.debug(\"  {} \u003d {}\", entry.getKey(), entry.getValue());\n    }\n\n    nameNodeWhitelist \u003d toLowerCase(getServiceConfig().getTrimmedStringCollection(NAME_NODE_WHITELIST));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/hadoop/FileSystemAccessService.java"
    }
  }
}