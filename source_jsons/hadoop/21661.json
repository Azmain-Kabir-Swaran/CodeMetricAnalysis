{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemCounterGroup.java",
  "functionName": "write",
  "functionId": "write___out-DataOutput",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
  "functionStartLine": 124,
  "functionEndLine": 126,
  "numCommitsSeen": 13,
  "timeTaken": 2234,
  "changeHistory": [
    "babd1449bf8898f44c434c852e67240721c0eb00",
    "35f12b955647651940ef43982552e635ec006caf",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "24676e8c2ef48e67265d33c053badb31aecad616"
  ],
  "changeHistoryShort": {
    "babd1449bf8898f44c434c852e67240721c0eb00": "Ymultichange(Ymodifierchange,Ybodychange)",
    "35f12b955647651940ef43982552e635ec006caf": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "24676e8c2ef48e67265d33c053badb31aecad616": "Yintroduced"
  },
  "changeHistoryDetails": {
    "babd1449bf8898f44c434c852e67240721c0eb00": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7150. Optimize collections used by MR JHS to reduce its memory. (Contributed by Misha Dmitriev)\n",
      "commitDate": "16/10/18 1:44 PM",
      "commitName": "babd1449bf8898f44c434c852e67240721c0eb00",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-7150. Optimize collections used by MR JHS to reduce its memory. (Contributed by Misha Dmitriev)\n",
          "commitDate": "16/10/18 1:44 PM",
          "commitName": "babd1449bf8898f44c434c852e67240721c0eb00",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "02/11/17 1:43 AM",
          "commitNameOld": "178751ed8c9d47038acf8616c226f1f52e884feb",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 348.5,
          "commitsBetweenForRepo": 3205,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,19 @@\n-  public void write(DataOutput out) throws IOException {\n-    WritableUtils.writeVInt(out, map.size()); // #scheme\n-    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n-      WritableUtils.writeString(out, entry.getKey()); // scheme\n-      // #counter for the above scheme\n-      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n-      for (Object counter : entry.getValue()) {\n-        if (counter \u003d\u003d null) continue;\n-        @SuppressWarnings(\"unchecked\")\n-        FSCounter c \u003d (FSCounter) ((Counter)counter).getUnderlyingCounter();\n-        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n-        WritableUtils.writeVLong(out, c.getValue());    // value\n+  public synchronized void write(DataOutput out) throws IOException {\n+    if (map !\u003d null) {\n+      WritableUtils.writeVInt(out, map.size()); // #scheme\n+      for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n+        WritableUtils.writeString(out, entry.getKey()); // scheme\n+        // #counter for the above scheme\n+        WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n+        for (Object counter : entry.getValue()) {\n+          if (counter \u003d\u003d null) continue;\n+          @SuppressWarnings(\"unchecked\")\n+          FSCounter c \u003d (FSCounter) ((Counter) counter).getUnderlyingCounter();\n+          WritableUtils.writeVInt(out, c.key.ordinal());  // key\n+          WritableUtils.writeVLong(out, c.getValue());    // value\n+        }\n       }\n+    } else {\n+      WritableUtils.writeVInt(out, 0);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void write(DataOutput out) throws IOException {\n    if (map !\u003d null) {\n      WritableUtils.writeVInt(out, map.size()); // #scheme\n      for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n        WritableUtils.writeString(out, entry.getKey()); // scheme\n        // #counter for the above scheme\n        WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n        for (Object counter : entry.getValue()) {\n          if (counter \u003d\u003d null) continue;\n          @SuppressWarnings(\"unchecked\")\n          FSCounter c \u003d (FSCounter) ((Counter) counter).getUnderlyingCounter();\n          WritableUtils.writeVInt(out, c.key.ordinal());  // key\n          WritableUtils.writeVLong(out, c.getValue());    // value\n        }\n      }\n    } else {\n      WritableUtils.writeVInt(out, 0);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7150. Optimize collections used by MR JHS to reduce its memory. (Contributed by Misha Dmitriev)\n",
          "commitDate": "16/10/18 1:44 PM",
          "commitName": "babd1449bf8898f44c434c852e67240721c0eb00",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "02/11/17 1:43 AM",
          "commitNameOld": "178751ed8c9d47038acf8616c226f1f52e884feb",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 348.5,
          "commitsBetweenForRepo": 3205,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,19 @@\n-  public void write(DataOutput out) throws IOException {\n-    WritableUtils.writeVInt(out, map.size()); // #scheme\n-    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n-      WritableUtils.writeString(out, entry.getKey()); // scheme\n-      // #counter for the above scheme\n-      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n-      for (Object counter : entry.getValue()) {\n-        if (counter \u003d\u003d null) continue;\n-        @SuppressWarnings(\"unchecked\")\n-        FSCounter c \u003d (FSCounter) ((Counter)counter).getUnderlyingCounter();\n-        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n-        WritableUtils.writeVLong(out, c.getValue());    // value\n+  public synchronized void write(DataOutput out) throws IOException {\n+    if (map !\u003d null) {\n+      WritableUtils.writeVInt(out, map.size()); // #scheme\n+      for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n+        WritableUtils.writeString(out, entry.getKey()); // scheme\n+        // #counter for the above scheme\n+        WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n+        for (Object counter : entry.getValue()) {\n+          if (counter \u003d\u003d null) continue;\n+          @SuppressWarnings(\"unchecked\")\n+          FSCounter c \u003d (FSCounter) ((Counter) counter).getUnderlyingCounter();\n+          WritableUtils.writeVInt(out, c.key.ordinal());  // key\n+          WritableUtils.writeVLong(out, c.getValue());    // value\n+        }\n       }\n+    } else {\n+      WritableUtils.writeVInt(out, 0);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void write(DataOutput out) throws IOException {\n    if (map !\u003d null) {\n      WritableUtils.writeVInt(out, map.size()); // #scheme\n      for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n        WritableUtils.writeString(out, entry.getKey()); // scheme\n        // #counter for the above scheme\n        WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n        for (Object counter : entry.getValue()) {\n          if (counter \u003d\u003d null) continue;\n          @SuppressWarnings(\"unchecked\")\n          FSCounter c \u003d (FSCounter) ((Counter) counter).getUnderlyingCounter();\n          WritableUtils.writeVInt(out, c.key.ordinal());  // key\n          WritableUtils.writeVLong(out, c.getValue());    // value\n        }\n      }\n    } else {\n      WritableUtils.writeVInt(out, 0);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
          "extendedDetails": {}
        }
      ]
    },
    "35f12b955647651940ef43982552e635ec006caf": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3697. Support binary compatibility for Counters after MAPREDUCE-901.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 5:41 PM",
      "commitName": "35f12b955647651940ef43982552e635ec006caf",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 166.06,
      "commitsBetweenForRepo": 1046,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public void write(DataOutput out) throws IOException {\n     WritableUtils.writeVInt(out, map.size()); // #scheme\n     for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n       WritableUtils.writeString(out, entry.getKey()); // scheme\n       // #counter for the above scheme\n       WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n       for (Object counter : entry.getValue()) {\n         if (counter \u003d\u003d null) continue;\n         @SuppressWarnings(\"unchecked\")\n-        FSCounter c \u003d (FSCounter) counter;\n+        FSCounter c \u003d (FSCounter) ((Counter)counter).getUnderlyingCounter();\n         WritableUtils.writeVInt(out, c.key.ordinal());  // key\n         WritableUtils.writeVLong(out, c.getValue());    // value\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    WritableUtils.writeVInt(out, map.size()); // #scheme\n    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n      WritableUtils.writeString(out, entry.getKey()); // scheme\n      // #counter for the above scheme\n      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n      for (Object counter : entry.getValue()) {\n        if (counter \u003d\u003d null) continue;\n        @SuppressWarnings(\"unchecked\")\n        FSCounter c \u003d (FSCounter) ((Counter)counter).getUnderlyingCounter();\n        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n        WritableUtils.writeVLong(out, c.getValue());    // value\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    WritableUtils.writeVInt(out, map.size()); // #scheme\n    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n      WritableUtils.writeString(out, entry.getKey()); // scheme\n      // #counter for the above scheme\n      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n      for (Object counter : entry.getValue()) {\n        if (counter \u003d\u003d null) continue;\n        @SuppressWarnings(\"unchecked\")\n        FSCounter c \u003d (FSCounter) counter;\n        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n        WritableUtils.writeVLong(out, c.getValue());    // value\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    WritableUtils.writeVInt(out, map.size()); // #scheme\n    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n      WritableUtils.writeString(out, entry.getKey()); // scheme\n      // #counter for the above scheme\n      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n      for (Object counter : entry.getValue()) {\n        if (counter \u003d\u003d null) continue;\n        @SuppressWarnings(\"unchecked\")\n        FSCounter c \u003d (FSCounter) counter;\n        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n        WritableUtils.writeVLong(out, c.getValue());    // value\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java"
      }
    },
    "24676e8c2ef48e67265d33c053badb31aecad616": {
      "type": "Yintroduced",
      "commitMessage": " MAPREDUCE-901. Efficient framework counters. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1157290 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/11 4:25 PM",
      "commitName": "24676e8c2ef48e67265d33c053badb31aecad616",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,15 @@\n+  public void write(DataOutput out) throws IOException {\n+    WritableUtils.writeVInt(out, map.size()); // #scheme\n+    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n+      WritableUtils.writeString(out, entry.getKey()); // scheme\n+      // #counter for the above scheme\n+      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n+      for (Object counter : entry.getValue()) {\n+        if (counter \u003d\u003d null) continue;\n+        @SuppressWarnings(\"unchecked\")\n+        FSCounter c \u003d (FSCounter) counter;\n+        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n+        WritableUtils.writeVLong(out, c.getValue());    // value\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(DataOutput out) throws IOException {\n    WritableUtils.writeVInt(out, map.size()); // #scheme\n    for (Map.Entry\u003cString, Object[]\u003e entry : map.entrySet()) {\n      WritableUtils.writeString(out, entry.getKey()); // scheme\n      // #counter for the above scheme\n      WritableUtils.writeVInt(out, numSetCounters(entry.getValue()));\n      for (Object counter : entry.getValue()) {\n        if (counter \u003d\u003d null) continue;\n        @SuppressWarnings(\"unchecked\")\n        FSCounter c \u003d (FSCounter) counter;\n        WritableUtils.writeVInt(out, c.key.ordinal());  // key\n        WritableUtils.writeVLong(out, c.getValue());    // value\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java"
    }
  }
}