{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationRMFailoverProxyProvider.java",
  "functionName": "init",
  "functionId": "init___configuration-Configuration__proxy-RMProxy__T____proto-Class__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
  "functionStartLine": 71,
  "functionEndLine": 110,
  "numCommitsSeen": 7,
  "timeTaken": 2552,
  "changeHistory": [
    "09999d7e014fde717e8b122773b68664f4594106",
    "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8",
    "2a2ef15caf791f30c471526c1b74e68803f0c405",
    "98b45b0ed34a060e0a529069cd15676d91600dff",
    "94a24567d65469091c8b521987dc2003d0327159",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1"
  ],
  "changeHistoryShort": {
    "09999d7e014fde717e8b122773b68664f4594106": "Ybodychange",
    "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8": "Ybodychange",
    "2a2ef15caf791f30c471526c1b74e68803f0c405": "Ybodychange",
    "98b45b0ed34a060e0a529069cd15676d91600dff": "Ybodychange",
    "94a24567d65469091c8b521987dc2003d0327159": "Ybodychange",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09999d7e014fde717e8b122773b68664f4594106": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).\n",
      "commitDate": "28/03/18 11:33 AM",
      "commitName": "09999d7e014fde717e8b122773b68664f4594106",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "28/03/18 11:26 AM",
      "commitNameOld": "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n       Class\u003cT\u003e proto) {\n     this.rmProxy \u003d proxy;\n     this.protocol \u003d proto;\n     this.rmProxy.checkAllowedProtocols(this.protocol);\n     String clusterId \u003d configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n     Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n     this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n-    this.facade \u003d facade.getInstance();\n+    this.facade \u003d FederationStateStoreFacade.getInstance();\n     if (configuration instanceof YarnConfiguration) {\n       this.conf \u003d (YarnConfiguration) configuration;\n     }\n     federationFailoverEnabled \u003d\n         conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n             YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n+    flushFacadeCacheForYarnRMAddr \u003d\n+        conf.getBoolean(YarnConfiguration.FEDERATION_FLUSH_CACHE_FOR_RM_ADDR,\n+            YarnConfiguration.DEFAULT_FEDERATION_FLUSH_CACHE_FOR_RM_ADDR);\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n         conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n         conf.getInt(\n             YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n \n     try {\n       this.originalUser \u003d UserGroupInformation.getCurrentUser();\n       LOG.info(\"Initialized Federation proxy for user: {}\",\n           this.originalUser.getUserName());\n     } catch (IOException e) {\n       LOG.warn(\"Could not get information of requester, ignoring for now.\");\n       this.originalUser \u003d null;\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n      Class\u003cT\u003e proto) {\n    this.rmProxy \u003d proxy;\n    this.protocol \u003d proto;\n    this.rmProxy.checkAllowedProtocols(this.protocol);\n    String clusterId \u003d configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n    this.facade \u003d FederationStateStoreFacade.getInstance();\n    if (configuration instanceof YarnConfiguration) {\n      this.conf \u003d (YarnConfiguration) configuration;\n    }\n    federationFailoverEnabled \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n    flushFacadeCacheForYarnRMAddr \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FLUSH_CACHE_FOR_RM_ADDR,\n            YarnConfiguration.DEFAULT_FEDERATION_FLUSH_CACHE_FOR_RM_ADDR);\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n        conf.getInt(\n            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n\n    try {\n      this.originalUser \u003d UserGroupInformation.getCurrentUser();\n      LOG.info(\"Initialized Federation proxy for user: {}\",\n          this.originalUser.getUserName());\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n      this.originalUser \u003d null;\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).\"\n\nThis reverts commit 2a2ef15caf791f30c471526c1b74e68803f0c405 as smart-apply-patch script didn\u0027t pick the latest patch.\n",
      "commitDate": "28/03/18 11:26 AM",
      "commitName": "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "27/03/18 5:39 PM",
      "commitNameOld": "2a2ef15caf791f30c471526c1b74e68803f0c405",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n       Class\u003cT\u003e proto) {\n     this.rmProxy \u003d proxy;\n     this.protocol \u003d proto;\n     this.rmProxy.checkAllowedProtocols(this.protocol);\n     String clusterId \u003d configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n     Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n     this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n-    this.facade \u003d FederationStateStoreFacade.getInstance();\n+    this.facade \u003d facade.getInstance();\n     if (configuration instanceof YarnConfiguration) {\n       this.conf \u003d (YarnConfiguration) configuration;\n     }\n     federationFailoverEnabled \u003d\n         conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n             YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n-    flushFacadeCacheForYarnRMAddr \u003d\n-        conf.getBoolean(YarnConfiguration.FEDERATION_FLUSh_CACHE_FOR_RM_ADDR,\n-            YarnConfiguration.DEFAULT_FEDERATION_FLUSh_CACHE_FOR_RM_ADDR);\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n         conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n         conf.getInt(\n             YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n \n     try {\n       this.originalUser \u003d UserGroupInformation.getCurrentUser();\n       LOG.info(\"Initialized Federation proxy for user: {}\",\n           this.originalUser.getUserName());\n     } catch (IOException e) {\n       LOG.warn(\"Could not get information of requester, ignoring for now.\");\n       this.originalUser \u003d null;\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n      Class\u003cT\u003e proto) {\n    this.rmProxy \u003d proxy;\n    this.protocol \u003d proto;\n    this.rmProxy.checkAllowedProtocols(this.protocol);\n    String clusterId \u003d configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n    this.facade \u003d facade.getInstance();\n    if (configuration instanceof YarnConfiguration) {\n      this.conf \u003d (YarnConfiguration) configuration;\n    }\n    federationFailoverEnabled \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n        conf.getInt(\n            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n\n    try {\n      this.originalUser \u003d UserGroupInformation.getCurrentUser();\n      LOG.info(\"Initialized Federation proxy for user: {}\",\n          this.originalUser.getUserName());\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n      this.originalUser \u003d null;\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "2a2ef15caf791f30c471526c1b74e68803f0c405": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).\n",
      "commitDate": "27/03/18 5:39 PM",
      "commitName": "2a2ef15caf791f30c471526c1b74e68803f0c405",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "03/08/17 2:18 PM",
      "commitNameOld": "0542e6f86e6734f8ceea00960bebe719827136db",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 236.14,
      "commitsBetweenForRepo": 1843,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n       Class\u003cT\u003e proto) {\n     this.rmProxy \u003d proxy;\n     this.protocol \u003d proto;\n     this.rmProxy.checkAllowedProtocols(this.protocol);\n     String clusterId \u003d configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n     Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n     this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n-    this.facade \u003d facade.getInstance();\n+    this.facade \u003d FederationStateStoreFacade.getInstance();\n     if (configuration instanceof YarnConfiguration) {\n       this.conf \u003d (YarnConfiguration) configuration;\n     }\n     federationFailoverEnabled \u003d\n         conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n             YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n+    flushFacadeCacheForYarnRMAddr \u003d\n+        conf.getBoolean(YarnConfiguration.FEDERATION_FLUSh_CACHE_FOR_RM_ADDR,\n+            YarnConfiguration.DEFAULT_FEDERATION_FLUSh_CACHE_FOR_RM_ADDR);\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n         conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n         conf.getInt(\n             YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n \n     try {\n       this.originalUser \u003d UserGroupInformation.getCurrentUser();\n       LOG.info(\"Initialized Federation proxy for user: {}\",\n           this.originalUser.getUserName());\n     } catch (IOException e) {\n       LOG.warn(\"Could not get information of requester, ignoring for now.\");\n       this.originalUser \u003d null;\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n      Class\u003cT\u003e proto) {\n    this.rmProxy \u003d proxy;\n    this.protocol \u003d proto;\n    this.rmProxy.checkAllowedProtocols(this.protocol);\n    String clusterId \u003d configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n    this.facade \u003d FederationStateStoreFacade.getInstance();\n    if (configuration instanceof YarnConfiguration) {\n      this.conf \u003d (YarnConfiguration) configuration;\n    }\n    federationFailoverEnabled \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n    flushFacadeCacheForYarnRMAddr \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FLUSh_CACHE_FOR_RM_ADDR,\n            YarnConfiguration.DEFAULT_FEDERATION_FLUSh_CACHE_FOR_RM_ADDR);\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n        conf.getInt(\n            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n\n    try {\n      this.originalUser \u003d UserGroupInformation.getCurrentUser();\n      LOG.info(\"Initialized Federation proxy for user: {}\",\n          this.originalUser.getUserName());\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n      this.originalUser \u003d null;\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "98b45b0ed34a060e0a529069cd15676d91600dff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6093. Minor bugs with AMRMtoken renewal and state store availability when using FederationRMFailoverProxyProvider during RM failover. (Botong Huang via Subru).\n\n(cherry picked from commit 66500f4fa6155d29435d7c92fd6d68079c4cab86)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "98b45b0ed34a060e0a529069cd15676d91600dff",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n       Class\u003cT\u003e proto) {\n     this.rmProxy \u003d proxy;\n     this.protocol \u003d proto;\n     this.rmProxy.checkAllowedProtocols(this.protocol);\n     String clusterId \u003d\n         configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n     Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n     this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n     this.facade \u003d facade.getInstance();\n     if (configuration instanceof YarnConfiguration) {\n       this.conf \u003d (YarnConfiguration) configuration;\n     }\n     federationFailoverEnabled \u003d\n         conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n             YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n         conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n         conf.getInt(\n             YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n \n     try {\n-      UserGroupInformation currentUser \u003d UserGroupInformation.getCurrentUser();\n-      originalTokens \u003d currentUser.getTokens();\n+      this.originalUser \u003d UserGroupInformation.getCurrentUser();\n       LOG.info(\"Initialized Federation proxy for user: {}\",\n-          currentUser.getUserName());\n+          this.originalUser.getUserName());\n     } catch (IOException e) {\n       LOG.warn(\"Could not get information of requester, ignoring for now.\");\n+      this.originalUser \u003d null;\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n      Class\u003cT\u003e proto) {\n    this.rmProxy \u003d proxy;\n    this.protocol \u003d proto;\n    this.rmProxy.checkAllowedProtocols(this.protocol);\n    String clusterId \u003d\n        configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n    this.facade \u003d facade.getInstance();\n    if (configuration instanceof YarnConfiguration) {\n      this.conf \u003d (YarnConfiguration) configuration;\n    }\n    federationFailoverEnabled \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n        conf.getInt(\n            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n\n    try {\n      this.originalUser \u003d UserGroupInformation.getCurrentUser();\n      LOG.info(\"Initialized Federation proxy for user: {}\",\n          this.originalUser.getUserName());\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n      this.originalUser \u003d null;\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "94a24567d65469091c8b521987dc2003d0327159": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3671. Integrate Federation services with ResourceManager. Contributed by Subru Krishnan\n\n(cherry picked from commit 8573c286e27623155c715a632d56a68f23523c72)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n       Class\u003cT\u003e proto) {\n     this.rmProxy \u003d proxy;\n     this.protocol \u003d proto;\n     this.rmProxy.checkAllowedProtocols(this.protocol);\n     String clusterId \u003d\n-        configuration.get(YarnConfiguration.FEDERATION_SUBCLUSTER_ID);\n-    Preconditions.checkNotNull(clusterId, \"Missing Federation SubClusterId\");\n+        configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n+    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n     this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n     this.facade \u003d facade.getInstance();\n     if (configuration instanceof YarnConfiguration) {\n       this.conf \u003d (YarnConfiguration) configuration;\n     }\n     federationFailoverEnabled \u003d\n         conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n             YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n         conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n \n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n         conf.getInt(\n             YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n             YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n \n     try {\n       UserGroupInformation currentUser \u003d UserGroupInformation.getCurrentUser();\n       originalTokens \u003d currentUser.getTokens();\n       LOG.info(\"Initialized Federation proxy for user: {}\",\n           currentUser.getUserName());\n     } catch (IOException e) {\n       LOG.warn(\"Could not get information of requester, ignoring for now.\");\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n      Class\u003cT\u003e proto) {\n    this.rmProxy \u003d proxy;\n    this.protocol \u003d proto;\n    this.rmProxy.checkAllowedProtocols(this.protocol);\n    String clusterId \u003d\n        configuration.get(YarnConfiguration.RM_CLUSTER_ID);\n    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\n    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n    this.facade \u003d facade.getInstance();\n    if (configuration instanceof YarnConfiguration) {\n      this.conf \u003d (YarnConfiguration) configuration;\n    }\n    federationFailoverEnabled \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n        conf.getInt(\n            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n\n    try {\n      UserGroupInformation currentUser \u003d UserGroupInformation.getCurrentUser();\n      originalTokens \u003d currentUser.getTokens();\n      LOG.info(\"Initialized Federation proxy for user: {}\",\n          currentUser.getUserName());\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3673. Create a FailoverProxy for Federation services. Contributed by Subru Krishnan\n\n(cherry picked from commit 3307564a5f8c8abc5fe84efcd05ee0f7dfdd921c)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,38 @@\n+  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n+      Class\u003cT\u003e proto) {\n+    this.rmProxy \u003d proxy;\n+    this.protocol \u003d proto;\n+    this.rmProxy.checkAllowedProtocols(this.protocol);\n+    String clusterId \u003d\n+        configuration.get(YarnConfiguration.FEDERATION_SUBCLUSTER_ID);\n+    Preconditions.checkNotNull(clusterId, \"Missing Federation SubClusterId\");\n+    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n+    this.facade \u003d facade.getInstance();\n+    if (configuration instanceof YarnConfiguration) {\n+      this.conf \u003d (YarnConfiguration) configuration;\n+    }\n+    federationFailoverEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n+            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n+\n+    conf.setInt(\n+        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n+        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n+            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n+\n+    conf.setInt(\n+        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n+        conf.getInt(\n+            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n+            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n+\n+    try {\n+      UserGroupInformation currentUser \u003d UserGroupInformation.getCurrentUser();\n+      originalTokens \u003d currentUser.getTokens();\n+      LOG.info(\"Initialized Federation proxy for user: {}\",\n+          currentUser.getUserName());\n+    } catch (IOException e) {\n+      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e proxy,\n      Class\u003cT\u003e proto) {\n    this.rmProxy \u003d proxy;\n    this.protocol \u003d proto;\n    this.rmProxy.checkAllowedProtocols(this.protocol);\n    String clusterId \u003d\n        configuration.get(YarnConfiguration.FEDERATION_SUBCLUSTER_ID);\n    Preconditions.checkNotNull(clusterId, \"Missing Federation SubClusterId\");\n    this.subClusterId \u003d SubClusterId.newInstance(clusterId);\n    this.facade \u003d facade.getInstance();\n    if (configuration instanceof YarnConfiguration) {\n      this.conf \u003d (YarnConfiguration) configuration;\n    }\n    federationFailoverEnabled \u003d\n        conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED,\n            YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n        conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\n\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n        conf.getInt(\n            YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS,\n            YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\n\n    try {\n      UserGroupInformation currentUser \u003d UserGroupInformation.getCurrentUser();\n      originalTokens \u003d currentUser.getTokens();\n      LOG.info(\"Initialized Federation proxy for user: {}\",\n          currentUser.getUserName());\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java"
    }
  }
}