{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "getJournalNodeAddresses",
  "functionId": "getJournalNodeAddresses___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 436,
  "functionEndLine": 505,
  "numCommitsSeen": 154,
  "timeTaken": 1347,
  "changeHistory": [
    "cda3378659772f20fd951ae342dc7d9d6db29534"
  ],
  "changeHistoryShort": {
    "cda3378659772f20fd951ae342dc7d9d6db29534": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cda3378659772f20fd951ae342dc7d9d6db29534": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12486. GetConf to get journalnodeslist. Contributed by Bharat Viswanadham.\n",
      "commitDate": "22/09/17 4:52 PM",
      "commitName": "cda3378659772f20fd951ae342dc7d9d6db29534",
      "commitAuthor": "Jitendra Pandey",
      "diff": "@@ -0,0 +1,70 @@\n+  public static Set\u003cString\u003e getJournalNodeAddresses(\n+      Configuration conf) throws URISyntaxException, IOException {\n+    Set\u003cString\u003e journalNodeList \u003d new HashSet\u003c\u003e();\n+    String journalsUri \u003d \"\";\n+    try {\n+      journalsUri \u003d conf.get(DFS_NAMENODE_SHARED_EDITS_DIR_KEY);\n+      if (journalsUri \u003d\u003d null) {\n+        Collection\u003cString\u003e nameserviceIds \u003d DFSUtilClient.\n+            getNameServiceIds(conf);\n+        for (String nsId : nameserviceIds) {\n+          journalsUri \u003d DFSUtilClient.getConfValue(\n+              null, nsId, conf, DFS_NAMENODE_SHARED_EDITS_DIR_KEY);\n+          if (journalsUri \u003d\u003d null) {\n+            Collection\u003cString\u003e nnIds \u003d DFSUtilClient.getNameNodeIds(conf, nsId);\n+            for (String nnId : nnIds) {\n+              String suffix \u003d DFSUtilClient.concatSuffixes(nsId, nnId);\n+              journalsUri \u003d DFSUtilClient.getConfValue(\n+                  null, suffix, conf, DFS_NAMENODE_SHARED_EDITS_DIR_KEY);\n+              if (journalsUri \u003d\u003d null ||\n+                  !journalsUri.startsWith(\"qjournal://\")) {\n+                return journalNodeList;\n+              } else {\n+                LOG.warn(DFS_NAMENODE_SHARED_EDITS_DIR_KEY +\" is to be \" +\n+                    \"configured as nameservice\" +\n+                    \" specific key(append it with nameserviceId), no need\" +\n+                    \" to append it with namenodeId\");\n+                URI uri \u003d new URI(journalsUri);\n+                List\u003cInetSocketAddress\u003e socketAddresses \u003d Util.\n+                    getAddressesList(uri);\n+                for (InetSocketAddress is : socketAddresses) {\n+                  journalNodeList.add(is.getHostName());\n+                }\n+              }\n+            }\n+          } else if (!journalsUri.startsWith(\"qjournal://\")) {\n+            return journalNodeList;\n+          } else {\n+            URI uri \u003d new URI(journalsUri);\n+            List\u003cInetSocketAddress\u003e socketAddresses \u003d Util.\n+                getAddressesList(uri);\n+            for (InetSocketAddress is : socketAddresses) {\n+              journalNodeList.add(is.getHostName());\n+            }\n+          }\n+        }\n+      } else {\n+        if (!journalsUri.startsWith(\"qjournal://\")) {\n+          return journalNodeList;\n+        } else {\n+          URI uri \u003d new URI(journalsUri);\n+          List\u003cInetSocketAddress\u003e socketAddresses \u003d Util.getAddressesList(uri);\n+          for (InetSocketAddress is : socketAddresses) {\n+            journalNodeList.add(is.getHostName());\n+          }\n+        }\n+      }\n+    } catch(UnknownHostException e) {\n+      LOG.error(\"The conf property \" + DFS_NAMENODE_SHARED_EDITS_DIR_KEY\n+          + \" is not properly set with correct journal node hostnames\");\n+      throw new UnknownHostException(journalsUri);\n+    } catch(URISyntaxException e)  {\n+      LOG.error(\"The conf property \" + DFS_NAMENODE_SHARED_EDITS_DIR_KEY\n+          + \"is not set properly with correct journal node uri\");\n+      throw new URISyntaxException(journalsUri, \"The conf property \" +\n+          DFS_NAMENODE_SHARED_EDITS_DIR_KEY + \"is not\" +\n+          \" properly set with correct journal node uri\");\n+    }\n+\n+    return journalNodeList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Set\u003cString\u003e getJournalNodeAddresses(\n      Configuration conf) throws URISyntaxException, IOException {\n    Set\u003cString\u003e journalNodeList \u003d new HashSet\u003c\u003e();\n    String journalsUri \u003d \"\";\n    try {\n      journalsUri \u003d conf.get(DFS_NAMENODE_SHARED_EDITS_DIR_KEY);\n      if (journalsUri \u003d\u003d null) {\n        Collection\u003cString\u003e nameserviceIds \u003d DFSUtilClient.\n            getNameServiceIds(conf);\n        for (String nsId : nameserviceIds) {\n          journalsUri \u003d DFSUtilClient.getConfValue(\n              null, nsId, conf, DFS_NAMENODE_SHARED_EDITS_DIR_KEY);\n          if (journalsUri \u003d\u003d null) {\n            Collection\u003cString\u003e nnIds \u003d DFSUtilClient.getNameNodeIds(conf, nsId);\n            for (String nnId : nnIds) {\n              String suffix \u003d DFSUtilClient.concatSuffixes(nsId, nnId);\n              journalsUri \u003d DFSUtilClient.getConfValue(\n                  null, suffix, conf, DFS_NAMENODE_SHARED_EDITS_DIR_KEY);\n              if (journalsUri \u003d\u003d null ||\n                  !journalsUri.startsWith(\"qjournal://\")) {\n                return journalNodeList;\n              } else {\n                LOG.warn(DFS_NAMENODE_SHARED_EDITS_DIR_KEY +\" is to be \" +\n                    \"configured as nameservice\" +\n                    \" specific key(append it with nameserviceId), no need\" +\n                    \" to append it with namenodeId\");\n                URI uri \u003d new URI(journalsUri);\n                List\u003cInetSocketAddress\u003e socketAddresses \u003d Util.\n                    getAddressesList(uri);\n                for (InetSocketAddress is : socketAddresses) {\n                  journalNodeList.add(is.getHostName());\n                }\n              }\n            }\n          } else if (!journalsUri.startsWith(\"qjournal://\")) {\n            return journalNodeList;\n          } else {\n            URI uri \u003d new URI(journalsUri);\n            List\u003cInetSocketAddress\u003e socketAddresses \u003d Util.\n                getAddressesList(uri);\n            for (InetSocketAddress is : socketAddresses) {\n              journalNodeList.add(is.getHostName());\n            }\n          }\n        }\n      } else {\n        if (!journalsUri.startsWith(\"qjournal://\")) {\n          return journalNodeList;\n        } else {\n          URI uri \u003d new URI(journalsUri);\n          List\u003cInetSocketAddress\u003e socketAddresses \u003d Util.getAddressesList(uri);\n          for (InetSocketAddress is : socketAddresses) {\n            journalNodeList.add(is.getHostName());\n          }\n        }\n      }\n    } catch(UnknownHostException e) {\n      LOG.error(\"The conf property \" + DFS_NAMENODE_SHARED_EDITS_DIR_KEY\n          + \" is not properly set with correct journal node hostnames\");\n      throw new UnknownHostException(journalsUri);\n    } catch(URISyntaxException e)  {\n      LOG.error(\"The conf property \" + DFS_NAMENODE_SHARED_EDITS_DIR_KEY\n          + \"is not set properly with correct journal node uri\");\n      throw new URISyntaxException(journalsUri, \"The conf property \" +\n          DFS_NAMENODE_SHARED_EDITS_DIR_KEY + \"is not\" +\n          \" properly set with correct journal node uri\");\n    }\n\n    return journalNodeList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}