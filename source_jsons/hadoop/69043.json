{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SerialJobFactory.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
  "functionStartLine": 81,
  "functionEndLine": 148,
  "numCommitsSeen": 7,
  "timeTaken": 4852,
  "changeHistory": [
    "dfd807afab0fae3839c9cc5d552aa0304444f956",
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "dfd807afab0fae3839c9cc5d552aa0304444f956": "Ybodychange",
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dfd807afab0fae3839c9cc5d552aa0304444f956": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12428. Fix inconsistency between log-level guards and statements. Contributed by Jagadesh Kiran N and Jackie Chang.\n",
      "commitDate": "21/09/15 8:54 PM",
      "commitName": "dfd807afab0fae3839c9cc5d552aa0304444f956",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "02/04/13 6:45 PM",
      "commitNameOld": "75ef1b4845c8a3f9b01d3c5254163a12ed7235eb",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 902.09,
      "commitsBetweenForRepo": 6640,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     public void run() {\n       try {\n         startFlag.await();\n         if (Thread.currentThread().isInterrupted()) {\n           return;\n         }\n         LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n         GridmixJob prevJob;\n         while (!Thread.currentThread().isInterrupted()) {\n           final JobStory job;\n           try {\n             job \u003d getNextJobFiltered();\n             if (null \u003d\u003d job) {\n               return;\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\n                 \"Serial mode submitting job \" + job.getName());\n             }\n             prevJob \u003d jobCreator.createGridmixJob(\n               conf, 0L, job, scratch, \n               userResolver.getTargetUgi(\n                 UserGroupInformation.createRemoteUser(job.getUser())),\n               sequence.getAndIncrement());\n \n             lock.lock();\n             try {\n               LOG.info(\" Submitted the job \" + prevJob);\n               submitter.add(prevJob);\n             } finally {\n               lock.unlock();\n             }\n           } catch (IOException e) {\n             error \u003d e;\n             //If submission of current job fails , try to submit the next job.\n             return;\n           }\n \n           if (prevJob !\u003d null) {\n             //Wait till previous job submitted is completed.\n             lock.lock();\n             try {\n               while (true) {\n                 try {\n                   jobCompleted.await();\n                 } catch (InterruptedException ie) {\n                   LOG.error(\n                     \" Error in SerialJobFactory while waiting for job completion \",\n                     ie);\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n-                  LOG.info(\" job \" + job.getName() + \" completed \");\n+                  LOG.debug(\" job \" + job.getName() + \" completed \");\n                 }\n                 break;\n               }\n             } finally {\n               lock.unlock();\n             }\n             prevJob \u003d null;\n           }\n         }\n       } catch (InterruptedException e) {\n         return;\n       } finally {\n         IOUtils.cleanup(null, jobProducer);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n        GridmixJob prevJob;\n        while (!Thread.currentThread().isInterrupted()) {\n          final JobStory job;\n          try {\n            job \u003d getNextJobFiltered();\n            if (null \u003d\u003d job) {\n              return;\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                \"Serial mode submitting job \" + job.getName());\n            }\n            prevJob \u003d jobCreator.createGridmixJob(\n              conf, 0L, job, scratch, \n              userResolver.getTargetUgi(\n                UserGroupInformation.createRemoteUser(job.getUser())),\n              sequence.getAndIncrement());\n\n            lock.lock();\n            try {\n              LOG.info(\" Submitted the job \" + prevJob);\n              submitter.add(prevJob);\n            } finally {\n              lock.unlock();\n            }\n          } catch (IOException e) {\n            error \u003d e;\n            //If submission of current job fails , try to submit the next job.\n            return;\n          }\n\n          if (prevJob !\u003d null) {\n            //Wait till previous job submitted is completed.\n            lock.lock();\n            try {\n              while (true) {\n                try {\n                  jobCompleted.await();\n                } catch (InterruptedException ie) {\n                  LOG.error(\n                    \" Error in SerialJobFactory while waiting for job completion \",\n                    ie);\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\" job \" + job.getName() + \" completed \");\n                }\n                break;\n              }\n            } finally {\n              lock.unlock();\n            }\n            prevJob \u003d null;\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
      "extendedDetails": {}
    },
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n        GridmixJob prevJob;\n        while (!Thread.currentThread().isInterrupted()) {\n          final JobStory job;\n          try {\n            job \u003d getNextJobFiltered();\n            if (null \u003d\u003d job) {\n              return;\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                \"Serial mode submitting job \" + job.getName());\n            }\n            prevJob \u003d jobCreator.createGridmixJob(\n              conf, 0L, job, scratch, \n              userResolver.getTargetUgi(\n                UserGroupInformation.createRemoteUser(job.getUser())),\n              sequence.getAndIncrement());\n\n            lock.lock();\n            try {\n              LOG.info(\" Submitted the job \" + prevJob);\n              submitter.add(prevJob);\n            } finally {\n              lock.unlock();\n            }\n          } catch (IOException e) {\n            error \u003d e;\n            //If submission of current job fails , try to submit the next job.\n            return;\n          }\n\n          if (prevJob !\u003d null) {\n            //Wait till previous job submitted is completed.\n            lock.lock();\n            try {\n              while (true) {\n                try {\n                  jobCompleted.await();\n                } catch (InterruptedException ie) {\n                  LOG.error(\n                    \" Error in SerialJobFactory while waiting for job completion \",\n                    ie);\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.info(\" job \" + job.getName() + \" completed \");\n                }\n                break;\n              }\n            } finally {\n              lock.unlock();\n            }\n            prevJob \u003d null;\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n        GridmixJob prevJob;\n        while (!Thread.currentThread().isInterrupted()) {\n          final JobStory job;\n          try {\n            job \u003d getNextJobFiltered();\n            if (null \u003d\u003d job) {\n              return;\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                \"Serial mode submitting job \" + job.getName());\n            }\n            prevJob \u003d jobCreator.createGridmixJob(\n              conf, 0L, job, scratch, \n              userResolver.getTargetUgi(\n                UserGroupInformation.createRemoteUser(job.getUser())),\n              sequence.getAndIncrement());\n\n            lock.lock();\n            try {\n              LOG.info(\" Submitted the job \" + prevJob);\n              submitter.add(prevJob);\n            } finally {\n              lock.unlock();\n            }\n          } catch (IOException e) {\n            error \u003d e;\n            //If submission of current job fails , try to submit the next job.\n            return;\n          }\n\n          if (prevJob !\u003d null) {\n            //Wait till previous job submitted is completed.\n            lock.lock();\n            try {\n              while (true) {\n                try {\n                  jobCompleted.await();\n                } catch (InterruptedException ie) {\n                  LOG.error(\n                    \" Error in SerialJobFactory while waiting for job completion \",\n                    ie);\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.info(\" job \" + job.getName() + \" completed \");\n                }\n                break;\n              }\n            } finally {\n              lock.unlock();\n            }\n            prevJob \u003d null;\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n        GridmixJob prevJob;\n        while (!Thread.currentThread().isInterrupted()) {\n          final JobStory job;\n          try {\n            job \u003d getNextJobFiltered();\n            if (null \u003d\u003d job) {\n              return;\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                \"Serial mode submitting job \" + job.getName());\n            }\n            prevJob \u003d jobCreator.createGridmixJob(\n              conf, 0L, job, scratch, \n              userResolver.getTargetUgi(\n                UserGroupInformation.createRemoteUser(job.getUser())),\n              sequence.getAndIncrement());\n\n            lock.lock();\n            try {\n              LOG.info(\" Submitted the job \" + prevJob);\n              submitter.add(prevJob);\n            } finally {\n              lock.unlock();\n            }\n          } catch (IOException e) {\n            error \u003d e;\n            //If submission of current job fails , try to submit the next job.\n            return;\n          }\n\n          if (prevJob !\u003d null) {\n            //Wait till previous job submitted is completed.\n            lock.lock();\n            try {\n              while (true) {\n                try {\n                  jobCompleted.await();\n                } catch (InterruptedException ie) {\n                  LOG.error(\n                    \" Error in SerialJobFactory while waiting for job completion \",\n                    ie);\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.info(\" job \" + job.getName() + \" completed \");\n                }\n                break;\n              }\n            } finally {\n              lock.unlock();\n            }\n            prevJob \u003d null;\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,68 @@\n+    public void run() {\n+      try {\n+        startFlag.await();\n+        if (Thread.currentThread().isInterrupted()) {\n+          return;\n+        }\n+        LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n+        GridmixJob prevJob;\n+        while (!Thread.currentThread().isInterrupted()) {\n+          final JobStory job;\n+          try {\n+            job \u003d getNextJobFiltered();\n+            if (null \u003d\u003d job) {\n+              return;\n+            }\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\n+                \"Serial mode submitting job \" + job.getName());\n+            }\n+            prevJob \u003d jobCreator.createGridmixJob(\n+              conf, 0L, job, scratch, \n+              userResolver.getTargetUgi(\n+                UserGroupInformation.createRemoteUser(job.getUser())),\n+              sequence.getAndIncrement());\n+\n+            lock.lock();\n+            try {\n+              LOG.info(\" Submitted the job \" + prevJob);\n+              submitter.add(prevJob);\n+            } finally {\n+              lock.unlock();\n+            }\n+          } catch (IOException e) {\n+            error \u003d e;\n+            //If submission of current job fails , try to submit the next job.\n+            return;\n+          }\n+\n+          if (prevJob !\u003d null) {\n+            //Wait till previous job submitted is completed.\n+            lock.lock();\n+            try {\n+              while (true) {\n+                try {\n+                  jobCompleted.await();\n+                } catch (InterruptedException ie) {\n+                  LOG.error(\n+                    \" Error in SerialJobFactory while waiting for job completion \",\n+                    ie);\n+                  return;\n+                }\n+                if (LOG.isDebugEnabled()) {\n+                  LOG.info(\" job \" + job.getName() + \" completed \");\n+                }\n+                break;\n+              }\n+            } finally {\n+              lock.unlock();\n+            }\n+            prevJob \u003d null;\n+          }\n+        }\n+      } catch (InterruptedException e) {\n+        return;\n+      } finally {\n+        IOUtils.cleanup(null, jobProducer);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START SERIAL @ \" + System.currentTimeMillis());\n        GridmixJob prevJob;\n        while (!Thread.currentThread().isInterrupted()) {\n          final JobStory job;\n          try {\n            job \u003d getNextJobFiltered();\n            if (null \u003d\u003d job) {\n              return;\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                \"Serial mode submitting job \" + job.getName());\n            }\n            prevJob \u003d jobCreator.createGridmixJob(\n              conf, 0L, job, scratch, \n              userResolver.getTargetUgi(\n                UserGroupInformation.createRemoteUser(job.getUser())),\n              sequence.getAndIncrement());\n\n            lock.lock();\n            try {\n              LOG.info(\" Submitted the job \" + prevJob);\n              submitter.add(prevJob);\n            } finally {\n              lock.unlock();\n            }\n          } catch (IOException e) {\n            error \u003d e;\n            //If submission of current job fails , try to submit the next job.\n            return;\n          }\n\n          if (prevJob !\u003d null) {\n            //Wait till previous job submitted is completed.\n            lock.lock();\n            try {\n              while (true) {\n                try {\n                  jobCompleted.await();\n                } catch (InterruptedException ie) {\n                  LOG.error(\n                    \" Error in SerialJobFactory while waiting for job completion \",\n                    ie);\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.info(\" job \" + job.getName() + \" completed \");\n                }\n                break;\n              }\n            } finally {\n              lock.unlock();\n            }\n            prevJob \u003d null;\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SerialJobFactory.java"
    }
  }
}