{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalResourcesTrackerImpl.java",
  "functionName": "getPathForLocalization",
  "functionId": "getPathForLocalization___req-LocalResourceRequest__localDirPath-Path__delService-DeletionService",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
  "functionStartLine": 462,
  "functionEndLine": 519,
  "numCommitsSeen": 24,
  "timeTaken": 3485,
  "changeHistory": [
    "585ebd873a55bedd2a364d256837f08ada8ba032",
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
    "854d25b0c30fd40f640c052e79a8747741492042",
    "66598697a6e777615334ebde5ba7738135da83ae",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db"
  ],
  "changeHistoryShort": {
    "585ebd873a55bedd2a364d256837f08ada8ba032": "Ybodychange",
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": "Ybodychange",
    "854d25b0c30fd40f640c052e79a8747741492042": "Ymultichange(Yparameterchange,Ybodychange)",
    "66598697a6e777615334ebde5ba7738135da83ae": "Ybodychange",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": "Yintroduced"
  },
  "changeHistoryDetails": {
    "585ebd873a55bedd2a364d256837f08ada8ba032": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8649. NPE in localizer hearbeat processing if a container is killed while localizing. Contributed by lujie\n",
      "commitDate": "23/08/18 7:29 AM",
      "commitName": "585ebd873a55bedd2a364d256837f08ada8ba032",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 366.26,
      "commitsBetweenForRepo": 3314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,58 @@\n   public Path getPathForLocalization(LocalResourceRequest req,\n       Path localDirPath, DeletionService delService) {\n     Path rPath \u003d localDirPath;\n     if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n \n       if (!directoryManagers.containsKey(localDirPath)) {\n         directoryManagers.putIfAbsent(localDirPath,\n           new LocalCacheDirectoryManager(conf));\n       }\n       LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n \n       rPath \u003d localDirPath;\n       String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n       // For most of the scenarios we will get root path only which\n       // is an empty string\n       if (!hierarchicalPath.isEmpty()) {\n         rPath \u003d new Path(localDirPath, hierarchicalPath);\n       }\n       inProgressLocalResourcesMap.put(req, rPath);\n     }\n \n     while (true) {\n       Path uniquePath \u003d new Path(rPath,\n           Long.toString(uniqueNumberGenerator.incrementAndGet()));\n       File file \u003d new File(uniquePath.toUri().getRawPath());\n       if (!file.exists()) {\n         rPath \u003d uniquePath;\n         break;\n       }\n       // If the directory already exists, delete it and move to next one.\n       LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n           \"try next one.\");\n       if (delService !\u003d null) {\n         FileDeletionTask deletionTask \u003d new FileDeletionTask(delService,\n             getUser(), uniquePath, null);\n         delService.delete(deletionTask);\n       }\n     }\n \n     Path localPath \u003d new Path(rPath, req.getPath().getName());\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n+    if (rsrc \u003d\u003d null) {\n+      LOG.warn(\"Resource \" + req + \" has been removed\"\n+          + \" and will no longer be localized\");\n+      return null;\n+    }\n     rsrc.setLocalPath(localPath);\n     LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n         req.getType(), req.getVisibility(), req.getSize(),\n         req.getTimestamp());\n     try {\n       stateStore.startResourceLocalization(user, appId,\n           ((LocalResourcePBImpl) lr).getProto(), localPath);\n     } catch (IOException e) {\n       LOG.error(\"Unable to record localization start for \" + rsrc, e);\n     }\n     return rPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path getPathForLocalization(LocalResourceRequest req,\n      Path localDirPath, DeletionService delService) {\n    Path rPath \u003d localDirPath;\n    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n\n      if (!directoryManagers.containsKey(localDirPath)) {\n        directoryManagers.putIfAbsent(localDirPath,\n          new LocalCacheDirectoryManager(conf));\n      }\n      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n\n      rPath \u003d localDirPath;\n      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n      // For most of the scenarios we will get root path only which\n      // is an empty string\n      if (!hierarchicalPath.isEmpty()) {\n        rPath \u003d new Path(localDirPath, hierarchicalPath);\n      }\n      inProgressLocalResourcesMap.put(req, rPath);\n    }\n\n    while (true) {\n      Path uniquePath \u003d new Path(rPath,\n          Long.toString(uniqueNumberGenerator.incrementAndGet()));\n      File file \u003d new File(uniquePath.toUri().getRawPath());\n      if (!file.exists()) {\n        rPath \u003d uniquePath;\n        break;\n      }\n      // If the directory already exists, delete it and move to next one.\n      LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n          \"try next one.\");\n      if (delService !\u003d null) {\n        FileDeletionTask deletionTask \u003d new FileDeletionTask(delService,\n            getUser(), uniquePath, null);\n        delService.delete(deletionTask);\n      }\n    }\n\n    Path localPath \u003d new Path(rPath, req.getPath().getName());\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    if (rsrc \u003d\u003d null) {\n      LOG.warn(\"Resource \" + req + \" has been removed\"\n          + \" and will no longer be localized\");\n      return null;\n    }\n    rsrc.setLocalPath(localPath);\n    LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n        req.getType(), req.getVisibility(), req.getSize(),\n        req.getTimestamp());\n    try {\n      stateStore.startResourceLocalization(user, appId,\n          ((LocalResourcePBImpl) lr).getProto(), localPath);\n    } catch (IOException e) {\n      LOG.error(\"Unable to record localization start for \" + rsrc, e);\n    }\n    return rPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
      "commitDate": "31/05/17 3:45 AM",
      "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/05/17 7:37 AM",
      "commitNameOld": "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.84,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   public Path getPathForLocalization(LocalResourceRequest req,\n       Path localDirPath, DeletionService delService) {\n     Path rPath \u003d localDirPath;\n     if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n \n       if (!directoryManagers.containsKey(localDirPath)) {\n         directoryManagers.putIfAbsent(localDirPath,\n           new LocalCacheDirectoryManager(conf));\n       }\n       LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n \n       rPath \u003d localDirPath;\n       String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n       // For most of the scenarios we will get root path only which\n       // is an empty string\n       if (!hierarchicalPath.isEmpty()) {\n         rPath \u003d new Path(localDirPath, hierarchicalPath);\n       }\n       inProgressLocalResourcesMap.put(req, rPath);\n     }\n \n     while (true) {\n       Path uniquePath \u003d new Path(rPath,\n           Long.toString(uniqueNumberGenerator.incrementAndGet()));\n       File file \u003d new File(uniquePath.toUri().getRawPath());\n       if (!file.exists()) {\n         rPath \u003d uniquePath;\n         break;\n       }\n       // If the directory already exists, delete it and move to next one.\n       LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n           \"try next one.\");\n       if (delService !\u003d null) {\n-        delService.delete(getUser(), uniquePath);\n+        FileDeletionTask deletionTask \u003d new FileDeletionTask(delService,\n+            getUser(), uniquePath, null);\n+        delService.delete(deletionTask);\n       }\n     }\n \n     Path localPath \u003d new Path(rPath, req.getPath().getName());\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     rsrc.setLocalPath(localPath);\n     LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n         req.getType(), req.getVisibility(), req.getSize(),\n         req.getTimestamp());\n     try {\n       stateStore.startResourceLocalization(user, appId,\n           ((LocalResourcePBImpl) lr).getProto(), localPath);\n     } catch (IOException e) {\n       LOG.error(\"Unable to record localization start for \" + rsrc, e);\n     }\n     return rPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path getPathForLocalization(LocalResourceRequest req,\n      Path localDirPath, DeletionService delService) {\n    Path rPath \u003d localDirPath;\n    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n\n      if (!directoryManagers.containsKey(localDirPath)) {\n        directoryManagers.putIfAbsent(localDirPath,\n          new LocalCacheDirectoryManager(conf));\n      }\n      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n\n      rPath \u003d localDirPath;\n      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n      // For most of the scenarios we will get root path only which\n      // is an empty string\n      if (!hierarchicalPath.isEmpty()) {\n        rPath \u003d new Path(localDirPath, hierarchicalPath);\n      }\n      inProgressLocalResourcesMap.put(req, rPath);\n    }\n\n    while (true) {\n      Path uniquePath \u003d new Path(rPath,\n          Long.toString(uniqueNumberGenerator.incrementAndGet()));\n      File file \u003d new File(uniquePath.toUri().getRawPath());\n      if (!file.exists()) {\n        rPath \u003d uniquePath;\n        break;\n      }\n      // If the directory already exists, delete it and move to next one.\n      LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n          \"try next one.\");\n      if (delService !\u003d null) {\n        FileDeletionTask deletionTask \u003d new FileDeletionTask(delService,\n            getUser(), uniquePath, null);\n        delService.delete(deletionTask);\n      }\n    }\n\n    Path localPath \u003d new Path(rPath, req.getPath().getName());\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    rsrc.setLocalPath(localPath);\n    LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n        req.getType(), req.getVisibility(), req.getSize(),\n        req.getTimestamp());\n    try {\n      stateStore.startResourceLocalization(user, appId,\n          ((LocalResourcePBImpl) lr).getProto(), localPath);\n    } catch (IOException e) {\n      LOG.error(\"Unable to record localization start for \" + rsrc, e);\n    }\n    return rPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "854d25b0c30fd40f640c052e79a8747741492042": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3727. For better error recovery, check if the directory exists before using it for localization. Contributed by Zhihai Xu\n",
      "commitDate": "30/09/15 7:59 AM",
      "commitName": "854d25b0c30fd40f640c052e79a8747741492042",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3727. For better error recovery, check if the directory exists before using it for localization. Contributed by Zhihai Xu\n",
          "commitDate": "30/09/15 7:59 AM",
          "commitName": "854d25b0c30fd40f640c052e79a8747741492042",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "06/09/15 11:02 PM",
          "commitNameOld": "1dbd8e34a7d97c4d8586da79c980d8f2e0aad61d",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 23.37,
          "commitsBetweenForRepo": 171,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,51 @@\n-      getPathForLocalization(LocalResourceRequest req, Path localDirPath) {\n+  public Path getPathForLocalization(LocalResourceRequest req,\n+      Path localDirPath, DeletionService delService) {\n     Path rPath \u003d localDirPath;\n     if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n \n       if (!directoryManagers.containsKey(localDirPath)) {\n         directoryManagers.putIfAbsent(localDirPath,\n           new LocalCacheDirectoryManager(conf));\n       }\n       LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n \n       rPath \u003d localDirPath;\n       String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n       // For most of the scenarios we will get root path only which\n       // is an empty string\n       if (!hierarchicalPath.isEmpty()) {\n         rPath \u003d new Path(localDirPath, hierarchicalPath);\n       }\n       inProgressLocalResourcesMap.put(req, rPath);\n     }\n \n-    rPath \u003d new Path(rPath,\n-        Long.toString(uniqueNumberGenerator.incrementAndGet()));\n+    while (true) {\n+      Path uniquePath \u003d new Path(rPath,\n+          Long.toString(uniqueNumberGenerator.incrementAndGet()));\n+      File file \u003d new File(uniquePath.toUri().getRawPath());\n+      if (!file.exists()) {\n+        rPath \u003d uniquePath;\n+        break;\n+      }\n+      // If the directory already exists, delete it and move to next one.\n+      LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n+          \"try next one.\");\n+      if (delService !\u003d null) {\n+        delService.delete(getUser(), uniquePath);\n+      }\n+    }\n+\n     Path localPath \u003d new Path(rPath, req.getPath().getName());\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     rsrc.setLocalPath(localPath);\n     LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n         req.getType(), req.getVisibility(), req.getSize(),\n         req.getTimestamp());\n     try {\n       stateStore.startResourceLocalization(user, appId,\n           ((LocalResourcePBImpl) lr).getProto(), localPath);\n     } catch (IOException e) {\n       LOG.error(\"Unable to record localization start for \" + rsrc, e);\n     }\n     return rPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path getPathForLocalization(LocalResourceRequest req,\n      Path localDirPath, DeletionService delService) {\n    Path rPath \u003d localDirPath;\n    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n\n      if (!directoryManagers.containsKey(localDirPath)) {\n        directoryManagers.putIfAbsent(localDirPath,\n          new LocalCacheDirectoryManager(conf));\n      }\n      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n\n      rPath \u003d localDirPath;\n      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n      // For most of the scenarios we will get root path only which\n      // is an empty string\n      if (!hierarchicalPath.isEmpty()) {\n        rPath \u003d new Path(localDirPath, hierarchicalPath);\n      }\n      inProgressLocalResourcesMap.put(req, rPath);\n    }\n\n    while (true) {\n      Path uniquePath \u003d new Path(rPath,\n          Long.toString(uniqueNumberGenerator.incrementAndGet()));\n      File file \u003d new File(uniquePath.toUri().getRawPath());\n      if (!file.exists()) {\n        rPath \u003d uniquePath;\n        break;\n      }\n      // If the directory already exists, delete it and move to next one.\n      LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n          \"try next one.\");\n      if (delService !\u003d null) {\n        delService.delete(getUser(), uniquePath);\n      }\n    }\n\n    Path localPath \u003d new Path(rPath, req.getPath().getName());\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    rsrc.setLocalPath(localPath);\n    LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n        req.getType(), req.getVisibility(), req.getSize(),\n        req.getTimestamp());\n    try {\n      stateStore.startResourceLocalization(user, appId,\n          ((LocalResourcePBImpl) lr).getProto(), localPath);\n    } catch (IOException e) {\n      LOG.error(\"Unable to record localization start for \" + rsrc, e);\n    }\n    return rPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
          "extendedDetails": {
            "oldValue": "[req-LocalResourceRequest, localDirPath-Path]",
            "newValue": "[req-LocalResourceRequest, localDirPath-Path, delService-DeletionService]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3727. For better error recovery, check if the directory exists before using it for localization. Contributed by Zhihai Xu\n",
          "commitDate": "30/09/15 7:59 AM",
          "commitName": "854d25b0c30fd40f640c052e79a8747741492042",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "06/09/15 11:02 PM",
          "commitNameOld": "1dbd8e34a7d97c4d8586da79c980d8f2e0aad61d",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 23.37,
          "commitsBetweenForRepo": 171,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,51 @@\n-      getPathForLocalization(LocalResourceRequest req, Path localDirPath) {\n+  public Path getPathForLocalization(LocalResourceRequest req,\n+      Path localDirPath, DeletionService delService) {\n     Path rPath \u003d localDirPath;\n     if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n \n       if (!directoryManagers.containsKey(localDirPath)) {\n         directoryManagers.putIfAbsent(localDirPath,\n           new LocalCacheDirectoryManager(conf));\n       }\n       LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n \n       rPath \u003d localDirPath;\n       String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n       // For most of the scenarios we will get root path only which\n       // is an empty string\n       if (!hierarchicalPath.isEmpty()) {\n         rPath \u003d new Path(localDirPath, hierarchicalPath);\n       }\n       inProgressLocalResourcesMap.put(req, rPath);\n     }\n \n-    rPath \u003d new Path(rPath,\n-        Long.toString(uniqueNumberGenerator.incrementAndGet()));\n+    while (true) {\n+      Path uniquePath \u003d new Path(rPath,\n+          Long.toString(uniqueNumberGenerator.incrementAndGet()));\n+      File file \u003d new File(uniquePath.toUri().getRawPath());\n+      if (!file.exists()) {\n+        rPath \u003d uniquePath;\n+        break;\n+      }\n+      // If the directory already exists, delete it and move to next one.\n+      LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n+          \"try next one.\");\n+      if (delService !\u003d null) {\n+        delService.delete(getUser(), uniquePath);\n+      }\n+    }\n+\n     Path localPath \u003d new Path(rPath, req.getPath().getName());\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     rsrc.setLocalPath(localPath);\n     LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n         req.getType(), req.getVisibility(), req.getSize(),\n         req.getTimestamp());\n     try {\n       stateStore.startResourceLocalization(user, appId,\n           ((LocalResourcePBImpl) lr).getProto(), localPath);\n     } catch (IOException e) {\n       LOG.error(\"Unable to record localization start for \" + rsrc, e);\n     }\n     return rPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path getPathForLocalization(LocalResourceRequest req,\n      Path localDirPath, DeletionService delService) {\n    Path rPath \u003d localDirPath;\n    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n\n      if (!directoryManagers.containsKey(localDirPath)) {\n        directoryManagers.putIfAbsent(localDirPath,\n          new LocalCacheDirectoryManager(conf));\n      }\n      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n\n      rPath \u003d localDirPath;\n      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n      // For most of the scenarios we will get root path only which\n      // is an empty string\n      if (!hierarchicalPath.isEmpty()) {\n        rPath \u003d new Path(localDirPath, hierarchicalPath);\n      }\n      inProgressLocalResourcesMap.put(req, rPath);\n    }\n\n    while (true) {\n      Path uniquePath \u003d new Path(rPath,\n          Long.toString(uniqueNumberGenerator.incrementAndGet()));\n      File file \u003d new File(uniquePath.toUri().getRawPath());\n      if (!file.exists()) {\n        rPath \u003d uniquePath;\n        break;\n      }\n      // If the directory already exists, delete it and move to next one.\n      LOG.warn(\"Directory \" + uniquePath + \" already exists, \" +\n          \"try next one.\");\n      if (delService !\u003d null) {\n        delService.delete(getUser(), uniquePath);\n      }\n    }\n\n    Path localPath \u003d new Path(rPath, req.getPath().getName());\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    rsrc.setLocalPath(localPath);\n    LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n        req.getType(), req.getVisibility(), req.getSize(),\n        req.getTimestamp());\n    try {\n      stateStore.startResourceLocalization(user, appId,\n          ((LocalResourcePBImpl) lr).getProto(), localPath);\n    } catch (IOException e) {\n      LOG.error(\"Unable to record localization start for \" + rsrc, e);\n    }\n    return rPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/08/13 12:51 PM",
      "commitNameOld": "3e0203a3a428460c1eb9f0f265fb520737b64d55",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 296.82,
      "commitsBetweenForRepo": 1990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,36 @@\n       getPathForLocalization(LocalResourceRequest req, Path localDirPath) {\n+    Path rPath \u003d localDirPath;\n     if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n \n       if (!directoryManagers.containsKey(localDirPath)) {\n         directoryManagers.putIfAbsent(localDirPath,\n           new LocalCacheDirectoryManager(conf));\n       }\n       LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n \n-      Path rPath \u003d localDirPath;\n+      rPath \u003d localDirPath;\n       String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n       // For most of the scenarios we will get root path only which\n       // is an empty string\n       if (!hierarchicalPath.isEmpty()) {\n         rPath \u003d new Path(localDirPath, hierarchicalPath);\n       }\n       inProgressLocalResourcesMap.put(req, rPath);\n-      return rPath;\n-    } else {\n-      return localDirPath;\n     }\n+\n+    rPath \u003d new Path(rPath,\n+        Long.toString(uniqueNumberGenerator.incrementAndGet()));\n+    Path localPath \u003d new Path(rPath, req.getPath().getName());\n+    LocalizedResource rsrc \u003d localrsrc.get(req);\n+    rsrc.setLocalPath(localPath);\n+    LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n+        req.getType(), req.getVisibility(), req.getSize(),\n+        req.getTimestamp());\n+    try {\n+      stateStore.startResourceLocalization(user, appId,\n+          ((LocalResourcePBImpl) lr).getProto(), localPath);\n+    } catch (IOException e) {\n+      LOG.error(\"Unable to record localization start for \" + rsrc, e);\n+    }\n+    return rPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getPathForLocalization(LocalResourceRequest req, Path localDirPath) {\n    Path rPath \u003d localDirPath;\n    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n\n      if (!directoryManagers.containsKey(localDirPath)) {\n        directoryManagers.putIfAbsent(localDirPath,\n          new LocalCacheDirectoryManager(conf));\n      }\n      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n\n      rPath \u003d localDirPath;\n      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n      // For most of the scenarios we will get root path only which\n      // is an empty string\n      if (!hierarchicalPath.isEmpty()) {\n        rPath \u003d new Path(localDirPath, hierarchicalPath);\n      }\n      inProgressLocalResourcesMap.put(req, rPath);\n    }\n\n    rPath \u003d new Path(rPath,\n        Long.toString(uniqueNumberGenerator.incrementAndGet()));\n    Path localPath \u003d new Path(rPath, req.getPath().getName());\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    rsrc.setLocalPath(localPath);\n    LocalResource lr \u003d LocalResource.newInstance(req.getResource(),\n        req.getType(), req.getVisibility(), req.getSize(),\n        req.getTimestamp());\n    try {\n      stateStore.startResourceLocalization(user, appId,\n          ((LocalResourcePBImpl) lr).getProto(), localPath);\n    } catch (IOException e) {\n      LOG.error(\"Unable to record localization start for \" + rsrc, e);\n    }\n    return rPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": {
      "type": "Yintroduced",
      "commitMessage": "YARN-467. Modify public distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/13 10:00 PM",
      "commitName": "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+      getPathForLocalization(LocalResourceRequest req, Path localDirPath) {\n+    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n+\n+      if (!directoryManagers.containsKey(localDirPath)) {\n+        directoryManagers.putIfAbsent(localDirPath,\n+          new LocalCacheDirectoryManager(conf));\n+      }\n+      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n+\n+      Path rPath \u003d localDirPath;\n+      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n+      // For most of the scenarios we will get root path only which\n+      // is an empty string\n+      if (!hierarchicalPath.isEmpty()) {\n+        rPath \u003d new Path(localDirPath, hierarchicalPath);\n+      }\n+      inProgressLocalResourcesMap.put(req, rPath);\n+      return rPath;\n+    } else {\n+      return localDirPath;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getPathForLocalization(LocalResourceRequest req, Path localDirPath) {\n    if (useLocalCacheDirectoryManager \u0026\u0026 localDirPath !\u003d null) {\n\n      if (!directoryManagers.containsKey(localDirPath)) {\n        directoryManagers.putIfAbsent(localDirPath,\n          new LocalCacheDirectoryManager(conf));\n      }\n      LocalCacheDirectoryManager dir \u003d directoryManagers.get(localDirPath);\n\n      Path rPath \u003d localDirPath;\n      String hierarchicalPath \u003d dir.getRelativePathForLocalization();\n      // For most of the scenarios we will get root path only which\n      // is an empty string\n      if (!hierarchicalPath.isEmpty()) {\n        rPath \u003d new Path(localDirPath, hierarchicalPath);\n      }\n      inProgressLocalResourcesMap.put(req, rPath);\n      return rPath;\n    } else {\n      return localDirPath;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
    }
  }
}