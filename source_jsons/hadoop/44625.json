{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeAttributesCLI.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeAttributesCLI.java",
  "functionStartLine": 159,
  "functionEndLine": 216,
  "numCommitsSeen": 4,
  "timeTaken": 1365,
  "changeHistory": [
    "c741109522d2913b87638957c64b94dee6b51029",
    "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1",
    "2475fb0a1e2158aac11829c6e33eae3e02bf33ea"
  ],
  "changeHistoryShort": {
    "c741109522d2913b87638957c64b94dee6b51029": "Ybodychange",
    "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1": "Ybodychange",
    "2475fb0a1e2158aac11829c6e33eae3e02bf33ea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c741109522d2913b87638957c64b94dee6b51029": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8987. Usability improvements node-attributes CLI. Contributed by  Bibin A Chundatt.\n",
      "commitDate": "12/11/18 2:18 AM",
      "commitName": "c741109522d2913b87638957c64b94dee6b51029",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 60.99,
      "commitsBetweenForRepo": 587,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,58 @@\n   public int run(String[] args) throws Exception {\n \n     int exitCode \u003d -1;\n \n     AdminCommandHandler adminCmdHandler \u003d getAdminCommandHandler();\n     ClientCommandHandler clientCmdHandler \u003d getClientCommandHandler();\n \n     // Build options\n     Options opts \u003d buildOptions(adminCmdHandler, clientCmdHandler);\n \n     if (args.length \u003c 1) {\n       printUsage(false, adminCmdHandler, clientCmdHandler);\n       return -1;\n     }\n \n     // Handle command separate\n     if (handleHelpCommand(args, adminCmdHandler, clientCmdHandler)) {\n       return 0;\n     }\n \n     CommandLine cliParser;\n     CommandHandler handler \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n       handler \u003d adminCmdHandler.canHandleCommand(cliParser) ?\n           adminCmdHandler :\n           clientCmdHandler.canHandleCommand(cliParser) ?\n               clientCmdHandler :\n               null;\n       if (handler \u003d\u003d null) {\n         errOut.println(INVALID_COMMAND_USAGE);\n         printUsage(false, adminCmdHandler, clientCmdHandler);\n         return exitCode;\n       } else {\n         return handler.handleCommand(cliParser);\n       }\n     } catch (UnrecognizedOptionException e) {\n       errOut.println(INVALID_COMMAND_USAGE);\n       printUsage(false, adminCmdHandler, clientCmdHandler);\n       return exitCode;\n     } catch (MissingArgumentException ex) {\n       errOut.println(MISSING_ARGUMENT);\n       printUsage(true, adminCmdHandler, clientCmdHandler);\n       return exitCode;\n     } catch (IllegalArgumentException arge) {\n       errOut.println(arge.getLocalizedMessage());\n       // print admin command detail\n       printUsage(true, handler);\n       return exitCode;\n+    } catch (YarnException e) {\n+      errOut.println(e.toString());\n+      return exitCode;\n     } catch (Exception e) {\n       errOut.println(e.toString());\n       printUsage(true, handler);\n       return exitCode;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    int exitCode \u003d -1;\n\n    AdminCommandHandler adminCmdHandler \u003d getAdminCommandHandler();\n    ClientCommandHandler clientCmdHandler \u003d getClientCommandHandler();\n\n    // Build options\n    Options opts \u003d buildOptions(adminCmdHandler, clientCmdHandler);\n\n    if (args.length \u003c 1) {\n      printUsage(false, adminCmdHandler, clientCmdHandler);\n      return -1;\n    }\n\n    // Handle command separate\n    if (handleHelpCommand(args, adminCmdHandler, clientCmdHandler)) {\n      return 0;\n    }\n\n    CommandLine cliParser;\n    CommandHandler handler \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n      handler \u003d adminCmdHandler.canHandleCommand(cliParser) ?\n          adminCmdHandler :\n          clientCmdHandler.canHandleCommand(cliParser) ?\n              clientCmdHandler :\n              null;\n      if (handler \u003d\u003d null) {\n        errOut.println(INVALID_COMMAND_USAGE);\n        printUsage(false, adminCmdHandler, clientCmdHandler);\n        return exitCode;\n      } else {\n        return handler.handleCommand(cliParser);\n      }\n    } catch (UnrecognizedOptionException e) {\n      errOut.println(INVALID_COMMAND_USAGE);\n      printUsage(false, adminCmdHandler, clientCmdHandler);\n      return exitCode;\n    } catch (MissingArgumentException ex) {\n      errOut.println(MISSING_ARGUMENT);\n      printUsage(true, adminCmdHandler, clientCmdHandler);\n      return exitCode;\n    } catch (IllegalArgumentException arge) {\n      errOut.println(arge.getLocalizedMessage());\n      // print admin command detail\n      printUsage(true, handler);\n      return exitCode;\n    } catch (YarnException e) {\n      errOut.println(e.toString());\n      return exitCode;\n    } catch (Exception e) {\n      errOut.println(e.toString());\n      printUsage(true, handler);\n      return exitCode;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeAttributesCLI.java",
      "extendedDetails": {}
    },
    "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8103. Add CLI interface to query node attributes. Contributed by Bibin A Chundatt.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "901e85238da08129374d44af80716b07f0b912e6",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,55 @@\n   public int run(String[] args) throws Exception {\n+\n+    int exitCode \u003d -1;\n+\n+    AdminCommandHandler adminCmdHandler \u003d getAdminCommandHandler();\n+    ClientCommandHandler clientCmdHandler \u003d getClientCommandHandler();\n+\n+    // Build options\n+    Options opts \u003d buildOptions(adminCmdHandler, clientCmdHandler);\n+\n     if (args.length \u003c 1) {\n-      printUsage();\n+      printUsage(false, adminCmdHandler, clientCmdHandler);\n       return -1;\n     }\n \n-    int exitCode \u003d -1;\n-    int i \u003d 0;\n-    String cmd \u003d args[i++];\n+    // Handle command separate\n+    if (handleHelpCommand(args, adminCmdHandler, clientCmdHandler)) {\n+      return 0;\n+    }\n \n-    if (\"-help\".equals(cmd)) {\n-      exitCode \u003d 0;\n-      if (args.length \u003e\u003d 2) {\n-        printHelpMsg(args[i]);\n+    CommandLine cliParser;\n+    CommandHandler handler \u003d null;\n+    try {\n+      cliParser \u003d new GnuParser().parse(opts, args);\n+      handler \u003d adminCmdHandler.canHandleCommand(cliParser) ?\n+          adminCmdHandler :\n+          clientCmdHandler.canHandleCommand(cliParser) ?\n+              clientCmdHandler :\n+              null;\n+      if (handler \u003d\u003d null) {\n+        errOut.println(INVALID_COMMAND_USAGE);\n+        printUsage(false, adminCmdHandler, clientCmdHandler);\n+        return exitCode;\n       } else {\n-        printHelpMsg(\"\");\n+        return handler.handleCommand(cliParser);\n       }\n+    } catch (UnrecognizedOptionException e) {\n+      errOut.println(INVALID_COMMAND_USAGE);\n+      printUsage(false, adminCmdHandler, clientCmdHandler);\n+      return exitCode;\n+    } catch (MissingArgumentException ex) {\n+      errOut.println(MISSING_ARGUMENT);\n+      printUsage(true, adminCmdHandler, clientCmdHandler);\n+      return exitCode;\n+    } catch (IllegalArgumentException arge) {\n+      errOut.println(arge.getLocalizedMessage());\n+      // print admin command detail\n+      printUsage(true, handler);\n+      return exitCode;\n+    } catch (Exception e) {\n+      errOut.println(e.toString());\n+      printUsage(true, handler);\n       return exitCode;\n     }\n-\n-    try {\n-      if (\"-replace\".equals(cmd)) {\n-        exitCode \u003d handleNodeAttributeMapping(args,\n-            AttributeMappingOperationType.REPLACE);\n-      } else if (\"-add\".equals(cmd)) {\n-        exitCode \u003d\n-            handleNodeAttributeMapping(args, AttributeMappingOperationType.ADD);\n-      } else if (\"-remove\".equals(cmd)) {\n-        exitCode \u003d handleNodeAttributeMapping(args,\n-            AttributeMappingOperationType.REMOVE);\n-      } else {\n-        exitCode \u003d -1;\n-        errOut.println(cmd.substring(1) + \": Unknown command\");\n-        printUsage();\n-      }\n-    } catch (IllegalArgumentException arge) {\n-      exitCode \u003d -1;\n-      errOut.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n-      printUsage(cmd);\n-    } catch (RemoteException e) {\n-      //\n-      // This is a error returned by hadoop server. Print\n-      // out the first line of the error message, ignore the stack trace.\n-      exitCode \u003d -1;\n-      try {\n-        String[] content;\n-        content \u003d e.getLocalizedMessage().split(\"\\n\");\n-        errOut.println(cmd.substring(1) + \": \" + content[0]);\n-      } catch (Exception ex) {\n-        errOut.println(cmd.substring(1) + \": \" + ex.getLocalizedMessage());\n-      }\n-    } catch (Exception e) {\n-      exitCode \u003d -1;\n-      errOut.println(cmd.substring(1) + \": \" + e.getLocalizedMessage());\n-    }\n-    return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    int exitCode \u003d -1;\n\n    AdminCommandHandler adminCmdHandler \u003d getAdminCommandHandler();\n    ClientCommandHandler clientCmdHandler \u003d getClientCommandHandler();\n\n    // Build options\n    Options opts \u003d buildOptions(adminCmdHandler, clientCmdHandler);\n\n    if (args.length \u003c 1) {\n      printUsage(false, adminCmdHandler, clientCmdHandler);\n      return -1;\n    }\n\n    // Handle command separate\n    if (handleHelpCommand(args, adminCmdHandler, clientCmdHandler)) {\n      return 0;\n    }\n\n    CommandLine cliParser;\n    CommandHandler handler \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n      handler \u003d adminCmdHandler.canHandleCommand(cliParser) ?\n          adminCmdHandler :\n          clientCmdHandler.canHandleCommand(cliParser) ?\n              clientCmdHandler :\n              null;\n      if (handler \u003d\u003d null) {\n        errOut.println(INVALID_COMMAND_USAGE);\n        printUsage(false, adminCmdHandler, clientCmdHandler);\n        return exitCode;\n      } else {\n        return handler.handleCommand(cliParser);\n      }\n    } catch (UnrecognizedOptionException e) {\n      errOut.println(INVALID_COMMAND_USAGE);\n      printUsage(false, adminCmdHandler, clientCmdHandler);\n      return exitCode;\n    } catch (MissingArgumentException ex) {\n      errOut.println(MISSING_ARGUMENT);\n      printUsage(true, adminCmdHandler, clientCmdHandler);\n      return exitCode;\n    } catch (IllegalArgumentException arge) {\n      errOut.println(arge.getLocalizedMessage());\n      // print admin command detail\n      printUsage(true, handler);\n      return exitCode;\n    } catch (Exception e) {\n      errOut.println(e.toString());\n      printUsage(true, handler);\n      return exitCode;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeAttributesCLI.java",
      "extendedDetails": {}
    },
    "2475fb0a1e2158aac11829c6e33eae3e02bf33ea": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6856. [YARN-3409] Support CLI for Node Attributes Mapping. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:30 AM",
      "commitName": "2475fb0a1e2158aac11829c6e33eae3e02bf33ea",
      "commitAuthor": "Naganarasimha",
      "diff": "@@ -0,0 +1,57 @@\n+  public int run(String[] args) throws Exception {\n+    if (args.length \u003c 1) {\n+      printUsage();\n+      return -1;\n+    }\n+\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d args[i++];\n+\n+    if (\"-help\".equals(cmd)) {\n+      exitCode \u003d 0;\n+      if (args.length \u003e\u003d 2) {\n+        printHelpMsg(args[i]);\n+      } else {\n+        printHelpMsg(\"\");\n+      }\n+      return exitCode;\n+    }\n+\n+    try {\n+      if (\"-replace\".equals(cmd)) {\n+        exitCode \u003d handleNodeAttributeMapping(args,\n+            AttributeMappingOperationType.REPLACE);\n+      } else if (\"-add\".equals(cmd)) {\n+        exitCode \u003d\n+            handleNodeAttributeMapping(args, AttributeMappingOperationType.ADD);\n+      } else if (\"-remove\".equals(cmd)) {\n+        exitCode \u003d handleNodeAttributeMapping(args,\n+            AttributeMappingOperationType.REMOVE);\n+      } else {\n+        exitCode \u003d -1;\n+        errOut.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage();\n+      }\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      errOut.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error message, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        errOut.println(cmd.substring(1) + \": \" + content[0]);\n+      } catch (Exception ex) {\n+        errOut.println(cmd.substring(1) + \": \" + ex.getLocalizedMessage());\n+      }\n+    } catch (Exception e) {\n+      exitCode \u003d -1;\n+      errOut.println(cmd.substring(1) + \": \" + e.getLocalizedMessage());\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage();\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    if (\"-help\".equals(cmd)) {\n      exitCode \u003d 0;\n      if (args.length \u003e\u003d 2) {\n        printHelpMsg(args[i]);\n      } else {\n        printHelpMsg(\"\");\n      }\n      return exitCode;\n    }\n\n    try {\n      if (\"-replace\".equals(cmd)) {\n        exitCode \u003d handleNodeAttributeMapping(args,\n            AttributeMappingOperationType.REPLACE);\n      } else if (\"-add\".equals(cmd)) {\n        exitCode \u003d\n            handleNodeAttributeMapping(args, AttributeMappingOperationType.ADD);\n      } else if (\"-remove\".equals(cmd)) {\n        exitCode \u003d handleNodeAttributeMapping(args,\n            AttributeMappingOperationType.REMOVE);\n      } else {\n        exitCode \u003d -1;\n        errOut.println(cmd.substring(1) + \": Unknown command\");\n        printUsage();\n      }\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      errOut.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        errOut.println(cmd.substring(1) + \": \" + content[0]);\n      } catch (Exception ex) {\n        errOut.println(cmd.substring(1) + \": \" + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      errOut.println(cmd.substring(1) + \": \" + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeAttributesCLI.java"
    }
  }
}