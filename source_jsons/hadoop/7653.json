{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionHandler.java",
  "functionName": "reencryptEdeks",
  "functionId": "reencryptEdeks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
  "functionStartLine": 558,
  "functionEndLine": 580,
  "numCommitsSeen": 10,
  "timeTaken": 1769,
  "changeHistory": [
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,23 @@\n+    private boolean reencryptEdeks() {\n+      // communicate with the kms out of lock\n+      final List\u003cEncryptedKeyVersion\u003e edeks \u003d new ArrayList\u003c\u003e(batch.size());\n+      for (FileEdekInfo entry : batch.getBatch()) {\n+        edeks.add(entry.getExistingEdek());\n+      }\n+      // provider already has LoadBalancingKMSClientProvider\u0027s reties. It that\n+      // fails, just fail this callable.\n+      try {\n+        handler.ezManager.getProvider().reencryptEncryptedKeys(edeks);\n+        EncryptionFaultInjector.getInstance().reencryptEncryptedKeys();\n+      } catch (GeneralSecurityException | IOException ex) {\n+        LOG.warn(\"Failed to re-encrypt one batch of {} edeks, start:{}\",\n+            batch.size(), batch.getFirstFilePath(), ex);\n+        return false;\n+      }\n+      int i \u003d 0;\n+      for (FileEdekInfo entry : batch.getBatch()) {\n+        assert i \u003c edeks.size();\n+        entry.setEdek(edeks.get(i++));\n+      }\n+      return true;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean reencryptEdeks() {\n      // communicate with the kms out of lock\n      final List\u003cEncryptedKeyVersion\u003e edeks \u003d new ArrayList\u003c\u003e(batch.size());\n      for (FileEdekInfo entry : batch.getBatch()) {\n        edeks.add(entry.getExistingEdek());\n      }\n      // provider already has LoadBalancingKMSClientProvider\u0027s reties. It that\n      // fails, just fail this callable.\n      try {\n        handler.ezManager.getProvider().reencryptEncryptedKeys(edeks);\n        EncryptionFaultInjector.getInstance().reencryptEncryptedKeys();\n      } catch (GeneralSecurityException | IOException ex) {\n        LOG.warn(\"Failed to re-encrypt one batch of {} edeks, start:{}\",\n            batch.size(), batch.getFirstFilePath(), ex);\n        return false;\n      }\n      int i \u003d 0;\n      for (FileEdekInfo entry : batch.getBatch()) {\n        assert i \u003c edeks.size();\n        entry.setEdek(edeks.get(i++));\n      }\n      return true;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java"
    }
  }
}