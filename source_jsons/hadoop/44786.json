{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAdminCLI.java",
  "functionName": "handleRefreshNodes",
  "functionId": "handleRefreshNodes___args-String[]__cmd-String__isHAEnabled-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
  "functionStartLine": 817,
  "functionEndLine": 860,
  "numCommitsSeen": 51,
  "timeTaken": 2089,
  "changeHistory": [
    "aacf214a274fb5149437f287c542339966c03ea5",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421"
  ],
  "changeHistoryShort": {
    "aacf214a274fb5149437f287c542339966c03ea5": "Ymultichange(Yexceptionschange,Ybodychange)",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aacf214a274fb5149437f287c542339966c03ea5": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-5697. Use CliParser to parse options in RMAdminCLI. Contributed by Tao jie\n",
      "commitDate": "01/11/16 4:14 PM",
      "commitName": "aacf214a274fb5149437f287c542339966c03ea5",
      "commitAuthor": "Naganarasimha",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-5697. Use CliParser to parse options in RMAdminCLI. Contributed by Tao jie\n",
          "commitDate": "01/11/16 4:14 PM",
          "commitName": "aacf214a274fb5149437f287c542339966c03ea5",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "02/10/16 11:02 PM",
          "commitNameOld": "6e130c308cf1b97e8386b6a43c26d72d2850119c",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 29.72,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,44 @@\n   private int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled)\n-      throws IOException, YarnException {\n-    if (args.length \u003d\u003d 1) {\n-      return refreshNodes();\n-    } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n-      // if the graceful timeout specified\n-      if (\"-g\".equals(args[1]) || \"-graceful\".equals(args[1])) {\n-        int timeout \u003d -1;\n-        String trackingMode;\n-        if (args.length \u003d\u003d 4) {\n-          timeout \u003d validateTimeout(args[2]);\n-          trackingMode \u003d validateTrackingMode(args[3]);\n-        } else {\n-          trackingMode \u003d validateTrackingMode(args[2]);\n-        }\n-        return refreshNodes(timeout, trackingMode);\n+      throws IOException, YarnException, ParseException {\n+    Options opts \u003d new Options();\n+    opts.addOption(\"refreshNodes\", false,\n+        \"Refresh the hosts information at the ResourceManager.\");\n+    Option gracefulOpt \u003d new Option(\"g\", \"graceful\", true,\n+        \"Wait for timeout before marking the NodeManager as decommissioned.\");\n+    gracefulOpt.setOptionalArg(true);\n+    opts.addOption(gracefulOpt);\n+    opts.addOption(\"client\", false,\n+        \"Indicates the timeout tracking should be handled by the client.\");\n+    opts.addOption(\"server\", false,\n+        \"Indicates the timeout tracking should be handled by the RM.\");\n+\n+    int exitCode \u003d -1;\n+    CommandLine cliParser \u003d null;\n+    try {\n+      cliParser \u003d new GnuParser().parse(opts, args);\n+    } catch (MissingArgumentException ex) {\n+      System.out.println(\"Missing argument for options\");\n+      printUsage(args[0], isHAEnabled);\n+      return exitCode;\n+    }\n+\n+    int timeout \u003d -1;\n+    if (cliParser.hasOption(\"g\")) {\n+      String strTimeout \u003d cliParser.getOptionValue(\"g\");\n+      if (strTimeout !\u003d null) {\n+        timeout \u003d validateTimeout(strTimeout);\n+      }\n+      String trackingMode \u003d null;\n+      if (cliParser.hasOption(\"client\")) {\n+        trackingMode \u003d \"client\";\n+      } else if (cliParser.hasOption(\"server\")) {\n+        trackingMode \u003d \"server\";\n       } else {\n         printUsage(cmd, isHAEnabled);\n         return -1;\n       }\n+      return refreshNodes(timeout, trackingMode);\n     } else {\n-      printUsage(cmd, isHAEnabled);\n-      return -1;\n+      return refreshNodes();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled)\n      throws IOException, YarnException, ParseException {\n    Options opts \u003d new Options();\n    opts.addOption(\"refreshNodes\", false,\n        \"Refresh the hosts information at the ResourceManager.\");\n    Option gracefulOpt \u003d new Option(\"g\", \"graceful\", true,\n        \"Wait for timeout before marking the NodeManager as decommissioned.\");\n    gracefulOpt.setOptionalArg(true);\n    opts.addOption(gracefulOpt);\n    opts.addOption(\"client\", false,\n        \"Indicates the timeout tracking should be handled by the client.\");\n    opts.addOption(\"server\", false,\n        \"Indicates the timeout tracking should be handled by the RM.\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.out.println(\"Missing argument for options\");\n      printUsage(args[0], isHAEnabled);\n      return exitCode;\n    }\n\n    int timeout \u003d -1;\n    if (cliParser.hasOption(\"g\")) {\n      String strTimeout \u003d cliParser.getOptionValue(\"g\");\n      if (strTimeout !\u003d null) {\n        timeout \u003d validateTimeout(strTimeout);\n      }\n      String trackingMode \u003d null;\n      if (cliParser.hasOption(\"client\")) {\n        trackingMode \u003d \"client\";\n      } else if (cliParser.hasOption(\"server\")) {\n        trackingMode \u003d \"server\";\n      } else {\n        printUsage(cmd, isHAEnabled);\n        return -1;\n      }\n      return refreshNodes(timeout, trackingMode);\n    } else {\n      return refreshNodes();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
          "extendedDetails": {
            "oldValue": "[IOException, YarnException]",
            "newValue": "[IOException, YarnException, ParseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5697. Use CliParser to parse options in RMAdminCLI. Contributed by Tao jie\n",
          "commitDate": "01/11/16 4:14 PM",
          "commitName": "aacf214a274fb5149437f287c542339966c03ea5",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "02/10/16 11:02 PM",
          "commitNameOld": "6e130c308cf1b97e8386b6a43c26d72d2850119c",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 29.72,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,44 @@\n   private int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled)\n-      throws IOException, YarnException {\n-    if (args.length \u003d\u003d 1) {\n-      return refreshNodes();\n-    } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n-      // if the graceful timeout specified\n-      if (\"-g\".equals(args[1]) || \"-graceful\".equals(args[1])) {\n-        int timeout \u003d -1;\n-        String trackingMode;\n-        if (args.length \u003d\u003d 4) {\n-          timeout \u003d validateTimeout(args[2]);\n-          trackingMode \u003d validateTrackingMode(args[3]);\n-        } else {\n-          trackingMode \u003d validateTrackingMode(args[2]);\n-        }\n-        return refreshNodes(timeout, trackingMode);\n+      throws IOException, YarnException, ParseException {\n+    Options opts \u003d new Options();\n+    opts.addOption(\"refreshNodes\", false,\n+        \"Refresh the hosts information at the ResourceManager.\");\n+    Option gracefulOpt \u003d new Option(\"g\", \"graceful\", true,\n+        \"Wait for timeout before marking the NodeManager as decommissioned.\");\n+    gracefulOpt.setOptionalArg(true);\n+    opts.addOption(gracefulOpt);\n+    opts.addOption(\"client\", false,\n+        \"Indicates the timeout tracking should be handled by the client.\");\n+    opts.addOption(\"server\", false,\n+        \"Indicates the timeout tracking should be handled by the RM.\");\n+\n+    int exitCode \u003d -1;\n+    CommandLine cliParser \u003d null;\n+    try {\n+      cliParser \u003d new GnuParser().parse(opts, args);\n+    } catch (MissingArgumentException ex) {\n+      System.out.println(\"Missing argument for options\");\n+      printUsage(args[0], isHAEnabled);\n+      return exitCode;\n+    }\n+\n+    int timeout \u003d -1;\n+    if (cliParser.hasOption(\"g\")) {\n+      String strTimeout \u003d cliParser.getOptionValue(\"g\");\n+      if (strTimeout !\u003d null) {\n+        timeout \u003d validateTimeout(strTimeout);\n+      }\n+      String trackingMode \u003d null;\n+      if (cliParser.hasOption(\"client\")) {\n+        trackingMode \u003d \"client\";\n+      } else if (cliParser.hasOption(\"server\")) {\n+        trackingMode \u003d \"server\";\n       } else {\n         printUsage(cmd, isHAEnabled);\n         return -1;\n       }\n+      return refreshNodes(timeout, trackingMode);\n     } else {\n-      printUsage(cmd, isHAEnabled);\n-      return -1;\n+      return refreshNodes();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled)\n      throws IOException, YarnException, ParseException {\n    Options opts \u003d new Options();\n    opts.addOption(\"refreshNodes\", false,\n        \"Refresh the hosts information at the ResourceManager.\");\n    Option gracefulOpt \u003d new Option(\"g\", \"graceful\", true,\n        \"Wait for timeout before marking the NodeManager as decommissioned.\");\n    gracefulOpt.setOptionalArg(true);\n    opts.addOption(gracefulOpt);\n    opts.addOption(\"client\", false,\n        \"Indicates the timeout tracking should be handled by the client.\");\n    opts.addOption(\"server\", false,\n        \"Indicates the timeout tracking should be handled by the RM.\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.out.println(\"Missing argument for options\");\n      printUsage(args[0], isHAEnabled);\n      return exitCode;\n    }\n\n    int timeout \u003d -1;\n    if (cliParser.hasOption(\"g\")) {\n      String strTimeout \u003d cliParser.getOptionValue(\"g\");\n      if (strTimeout !\u003d null) {\n        timeout \u003d validateTimeout(strTimeout);\n      }\n      String trackingMode \u003d null;\n      if (cliParser.hasOption(\"client\")) {\n        trackingMode \u003d \"client\";\n      } else if (cliParser.hasOption(\"server\")) {\n        trackingMode \u003d \"server\";\n      } else {\n        printUsage(cmd, isHAEnabled);\n        return -1;\n      }\n      return refreshNodes(timeout, trackingMode);\n    } else {\n      return refreshNodes();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,25 @@\n+  private int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled)\n+      throws IOException, YarnException {\n+    if (args.length \u003d\u003d 1) {\n+      return refreshNodes();\n+    } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n+      // if the graceful timeout specified\n+      if (\"-g\".equals(args[1]) || \"-graceful\".equals(args[1])) {\n+        int timeout \u003d -1;\n+        String trackingMode;\n+        if (args.length \u003d\u003d 4) {\n+          timeout \u003d validateTimeout(args[2]);\n+          trackingMode \u003d validateTrackingMode(args[3]);\n+        } else {\n+          trackingMode \u003d validateTrackingMode(args[2]);\n+        }\n+        return refreshNodes(timeout, trackingMode);\n+      } else {\n+        printUsage(cmd, isHAEnabled);\n+        return -1;\n+      }\n+    } else {\n+      printUsage(cmd, isHAEnabled);\n+      return -1;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled)\n      throws IOException, YarnException {\n    if (args.length \u003d\u003d 1) {\n      return refreshNodes();\n    } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n      // if the graceful timeout specified\n      if (\"-g\".equals(args[1]) || \"-graceful\".equals(args[1])) {\n        int timeout \u003d -1;\n        String trackingMode;\n        if (args.length \u003d\u003d 4) {\n          timeout \u003d validateTimeout(args[2]);\n          trackingMode \u003d validateTrackingMode(args[3]);\n        } else {\n          trackingMode \u003d validateTrackingMode(args[2]);\n        }\n        return refreshNodes(timeout, trackingMode);\n      } else {\n        printUsage(cmd, isHAEnabled);\n        return -1;\n      }\n    } else {\n      printUsage(cmd, isHAEnabled);\n      return -1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java"
    }
  }
}