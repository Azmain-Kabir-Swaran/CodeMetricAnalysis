{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLog.java",
  "functionName": "checkForGaps",
  "functionId": "checkForGaps___streams-List__EditLogInputStream____fromTxId-long__toAtLeastTxId-long__inProgressOk-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
  "functionStartLine": 1764,
  "functionEndLine": 1789,
  "numCommitsSeen": 141,
  "timeTaken": 3227,
  "changeHistory": [
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e"
  ],
  "changeHistoryShort": {
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/03/15 12:02 PM",
      "commitNameOld": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 42.92,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private void checkForGaps(List\u003cEditLogInputStream\u003e streams, long fromTxId,\n       long toAtLeastTxId, boolean inProgressOk) throws IOException {\n     Iterator\u003cEditLogInputStream\u003e iter \u003d streams.iterator();\n     long txId \u003d fromTxId;\n     while (true) {\n       if (txId \u003e toAtLeastTxId) return;\n       if (!iter.hasNext()) break;\n       EditLogInputStream elis \u003d iter.next();\n       if (elis.getFirstTxId() \u003e txId) break;\n       long next \u003d elis.getLastTxId();\n-      if (next \u003d\u003d HdfsConstants.INVALID_TXID) {\n+      if (next \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n         if (!inProgressOk) {\n           throw new RuntimeException(\"inProgressOk \u003d false, but \" +\n               \"selectInputStreams returned an in-progress edit \" +\n               \"log input stream (\" + elis + \")\");\n         }\n         // We don\u0027t know where the in-progress stream ends.\n         // It could certainly go all the way up to toAtLeastTxId.\n         return;\n       }\n       txId \u003d next + 1;\n     }\n     throw new IOException(String.format(\"Gap in transactions. Expected to \"\n         + \"be able to read up until at least txid %d but unable to find any \"\n         + \"edit logs containing txid %d\", toAtLeastTxId, txId));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkForGaps(List\u003cEditLogInputStream\u003e streams, long fromTxId,\n      long toAtLeastTxId, boolean inProgressOk) throws IOException {\n    Iterator\u003cEditLogInputStream\u003e iter \u003d streams.iterator();\n    long txId \u003d fromTxId;\n    while (true) {\n      if (txId \u003e toAtLeastTxId) return;\n      if (!iter.hasNext()) break;\n      EditLogInputStream elis \u003d iter.next();\n      if (elis.getFirstTxId() \u003e txId) break;\n      long next \u003d elis.getLastTxId();\n      if (next \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n        if (!inProgressOk) {\n          throw new RuntimeException(\"inProgressOk \u003d false, but \" +\n              \"selectInputStreams returned an in-progress edit \" +\n              \"log input stream (\" + elis + \")\");\n        }\n        // We don\u0027t know where the in-progress stream ends.\n        // It could certainly go all the way up to toAtLeastTxId.\n        return;\n      }\n      txId \u003d next + 1;\n    }\n    throw new IOException(String.format(\"Gap in transactions. Expected to \"\n        + \"be able to read up until at least txid %d but unable to find any \"\n        + \"edit logs containing txid %d\", toAtLeastTxId, txId));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+  private void checkForGaps(List\u003cEditLogInputStream\u003e streams, long fromTxId,\n+      long toAtLeastTxId, boolean inProgressOk) throws IOException {\n+    Iterator\u003cEditLogInputStream\u003e iter \u003d streams.iterator();\n+    long txId \u003d fromTxId;\n+    while (true) {\n+      if (txId \u003e toAtLeastTxId) return;\n+      if (!iter.hasNext()) break;\n+      EditLogInputStream elis \u003d iter.next();\n+      if (elis.getFirstTxId() \u003e txId) break;\n+      long next \u003d elis.getLastTxId();\n+      if (next \u003d\u003d HdfsConstants.INVALID_TXID) {\n+        if (!inProgressOk) {\n+          throw new RuntimeException(\"inProgressOk \u003d false, but \" +\n+              \"selectInputStreams returned an in-progress edit \" +\n+              \"log input stream (\" + elis + \")\");\n+        }\n+        // We don\u0027t know where the in-progress stream ends.\n+        // It could certainly go all the way up to toAtLeastTxId.\n+        return;\n+      }\n+      txId \u003d next + 1;\n+    }\n+    throw new IOException(String.format(\"Gap in transactions. Expected to \"\n+        + \"be able to read up until at least txid %d but unable to find any \"\n+        + \"edit logs containing txid %d\", toAtLeastTxId, txId));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkForGaps(List\u003cEditLogInputStream\u003e streams, long fromTxId,\n      long toAtLeastTxId, boolean inProgressOk) throws IOException {\n    Iterator\u003cEditLogInputStream\u003e iter \u003d streams.iterator();\n    long txId \u003d fromTxId;\n    while (true) {\n      if (txId \u003e toAtLeastTxId) return;\n      if (!iter.hasNext()) break;\n      EditLogInputStream elis \u003d iter.next();\n      if (elis.getFirstTxId() \u003e txId) break;\n      long next \u003d elis.getLastTxId();\n      if (next \u003d\u003d HdfsConstants.INVALID_TXID) {\n        if (!inProgressOk) {\n          throw new RuntimeException(\"inProgressOk \u003d false, but \" +\n              \"selectInputStreams returned an in-progress edit \" +\n              \"log input stream (\" + elis + \")\");\n        }\n        // We don\u0027t know where the in-progress stream ends.\n        // It could certainly go all the way up to toAtLeastTxId.\n        return;\n      }\n      txId \u003d next + 1;\n    }\n    throw new IOException(String.format(\"Gap in transactions. Expected to \"\n        + \"be able to read up until at least txid %d but unable to find any \"\n        + \"edit logs containing txid %d\", toAtLeastTxId, txId));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
    }
  }
}