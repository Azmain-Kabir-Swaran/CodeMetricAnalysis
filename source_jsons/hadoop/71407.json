{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistrySecurity.java",
  "functionName": "initSecurity",
  "functionId": "initSecurity",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
  "functionStartLine": 233,
  "functionEndLine": 325,
  "numCommitsSeen": 22,
  "timeTaken": 2454,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "6d95866dcf278dd7789604787691fe8ee8d9cc9f",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "6d95866dcf278dd7789604787691fe8ee8d9cc9f": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initSecurity() throws IOException {\n\n    secureRegistry \u003d\n        getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n    systemACLs.clear();\n    if (secureRegistry) {\n      addSystemACL(ALL_READ_ACCESS);\n\n      // determine the kerberos realm from JVM and settings\n      kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n          getDefaultRealmInJVM());\n\n      // System Accounts\n      String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n      usesRealm \u003d system.contains(\"@\");\n\n      systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n\n      LOG.info(\"Registry default system acls: \" + System.lineSeparator() +\n          systemACLs);\n      // user accounts (may be empty, but for digest one user AC must\n      // be built up\n      String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                              DEFAULT_REGISTRY_USER_ACCOUNTS);\n      List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n\n      // add self if the current user can be determined\n      ACL self;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n        if (self !\u003d null) {\n          userACLs.add(self);\n        }\n      }\n      LOG.info(\"Registry User ACLs \" + System.lineSeparator()+ userACLs);\n\n      // here check for UGI having secure on or digest + ID\n      switch (access) {\n        case sasl:\n          // secure + SASL \u003d\u003e has to be authenticated\n          if (!UserGroupInformation.isSecurityEnabled()) {\n            throw new IOException(\"Kerberos required for secure registry access\");\n          }\n          UserGroupInformation currentUser \u003d\n              UserGroupInformation.getCurrentUser();\n          jaasClientEntry \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n              DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n          jaasClientIdentity \u003d currentUser.getShortUserName();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                jaasClientIdentity, jaasClientEntry);\n          }\n          break;\n\n        case digest:\n          String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n          String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n          if (userACLs.isEmpty()) {\n            //\n            throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n          }\n          digest(id, pass);\n          ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n          userACLs.add(acl);\n          digestAuthUser \u003d id;\n          digestAuthPassword \u003d pass;\n          String authPair \u003d id + \":\" + pass;\n          digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n          }\n          break;\n\n        case anon:\n        case simple:\n          // nothing is needed; account is read only.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is anonymous\");\n          }\n          userACLs \u003d new ArrayList\u003cACL\u003e(0);\n          break;\n      }\n      systemACLs.addAll(userACLs);\n\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registry has no security\");\n      }\n      // wide open cluster, adding system acls\n      systemACLs.addAll(WorldReadWriteACL);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java"
      }
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 50.24,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,93 @@\n   private void initSecurity() throws IOException {\n \n     secureRegistry \u003d\n         getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n     systemACLs.clear();\n     if (secureRegistry) {\n       addSystemACL(ALL_READ_ACCESS);\n \n       // determine the kerberos realm from JVM and settings\n       kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n           getDefaultRealmInJVM());\n \n       // System Accounts\n       String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                 DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n       usesRealm \u003d system.contains(\"@\");\n \n       systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n \n       LOG.info(\"Registry default system acls: \" + System.lineSeparator() +\n           systemACLs);\n       // user accounts (may be empty, but for digest one user AC must\n       // be built up\n       String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                               DEFAULT_REGISTRY_USER_ACCOUNTS);\n       List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n \n       // add self if the current user can be determined\n       ACL self;\n       if (UserGroupInformation.isSecurityEnabled()) {\n         self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n         if (self !\u003d null) {\n           userACLs.add(self);\n         }\n       }\n       LOG.info(\"Registry User ACLs \" + System.lineSeparator()+ userACLs);\n \n       // here check for UGI having secure on or digest + ID\n       switch (access) {\n         case sasl:\n           // secure + SASL \u003d\u003e has to be authenticated\n           if (!UserGroupInformation.isSecurityEnabled()) {\n             throw new IOException(\"Kerberos required for secure registry access\");\n           }\n           UserGroupInformation currentUser \u003d\n               UserGroupInformation.getCurrentUser();\n           jaasClientEntry \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n               DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n           jaasClientIdentity \u003d currentUser.getShortUserName();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                 jaasClientIdentity, jaasClientEntry);\n           }\n           break;\n \n         case digest:\n           String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n           String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n           if (userACLs.isEmpty()) {\n             //\n             throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n           }\n           digest(id, pass);\n           ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n           userACLs.add(acl);\n           digestAuthUser \u003d id;\n           digestAuthPassword \u003d pass;\n           String authPair \u003d id + \":\" + pass;\n           digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n           }\n           break;\n \n         case anon:\n+        case simple:\n           // nothing is needed; account is read only.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is anonymous\");\n           }\n           userACLs \u003d new ArrayList\u003cACL\u003e(0);\n           break;\n       }\n       systemACLs.addAll(userACLs);\n \n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Registry has no security\");\n       }\n       // wide open cluster, adding system acls\n       systemACLs.addAll(WorldReadWriteACL);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initSecurity() throws IOException {\n\n    secureRegistry \u003d\n        getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n    systemACLs.clear();\n    if (secureRegistry) {\n      addSystemACL(ALL_READ_ACCESS);\n\n      // determine the kerberos realm from JVM and settings\n      kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n          getDefaultRealmInJVM());\n\n      // System Accounts\n      String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n      usesRealm \u003d system.contains(\"@\");\n\n      systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n\n      LOG.info(\"Registry default system acls: \" + System.lineSeparator() +\n          systemACLs);\n      // user accounts (may be empty, but for digest one user AC must\n      // be built up\n      String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                              DEFAULT_REGISTRY_USER_ACCOUNTS);\n      List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n\n      // add self if the current user can be determined\n      ACL self;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n        if (self !\u003d null) {\n          userACLs.add(self);\n        }\n      }\n      LOG.info(\"Registry User ACLs \" + System.lineSeparator()+ userACLs);\n\n      // here check for UGI having secure on or digest + ID\n      switch (access) {\n        case sasl:\n          // secure + SASL \u003d\u003e has to be authenticated\n          if (!UserGroupInformation.isSecurityEnabled()) {\n            throw new IOException(\"Kerberos required for secure registry access\");\n          }\n          UserGroupInformation currentUser \u003d\n              UserGroupInformation.getCurrentUser();\n          jaasClientEntry \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n              DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n          jaasClientIdentity \u003d currentUser.getShortUserName();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                jaasClientIdentity, jaasClientEntry);\n          }\n          break;\n\n        case digest:\n          String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n          String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n          if (userACLs.isEmpty()) {\n            //\n            throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n          }\n          digest(id, pass);\n          ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n          userACLs.add(acl);\n          digestAuthUser \u003d id;\n          digestAuthPassword \u003d pass;\n          String authPair \u003d id + \":\" + pass;\n          digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n          }\n          break;\n\n        case anon:\n        case simple:\n          // nothing is needed; account is read only.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is anonymous\");\n          }\n          userACLs \u003d new ArrayList\u003cACL\u003e(0);\n          break;\n      }\n      systemACLs.addAll(userACLs);\n\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registry has no security\");\n      }\n      // wide open cluster, adding system acls\n      systemACLs.addAll(WorldReadWriteACL);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/17 9:59 PM",
      "commitNameOld": "6d95866dcf278dd7789604787691fe8ee8d9cc9f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 263.63,
      "commitsBetweenForRepo": 1792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,92 @@\n   private void initSecurity() throws IOException {\n \n     secureRegistry \u003d\n         getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n     systemACLs.clear();\n     if (secureRegistry) {\n       addSystemACL(ALL_READ_ACCESS);\n \n       // determine the kerberos realm from JVM and settings\n       kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n           getDefaultRealmInJVM());\n \n       // System Accounts\n       String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                 DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n       usesRealm \u003d system.contains(\"@\");\n \n       systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n \n+      LOG.info(\"Registry default system acls: \" + System.lineSeparator() +\n+          systemACLs);\n       // user accounts (may be empty, but for digest one user AC must\n       // be built up\n       String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                               DEFAULT_REGISTRY_USER_ACCOUNTS);\n       List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n \n       // add self if the current user can be determined\n       ACL self;\n       if (UserGroupInformation.isSecurityEnabled()) {\n         self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n         if (self !\u003d null) {\n           userACLs.add(self);\n         }\n       }\n+      LOG.info(\"Registry User ACLs \" + System.lineSeparator()+ userACLs);\n \n       // here check for UGI having secure on or digest + ID\n       switch (access) {\n         case sasl:\n           // secure + SASL \u003d\u003e has to be authenticated\n           if (!UserGroupInformation.isSecurityEnabled()) {\n             throw new IOException(\"Kerberos required for secure registry access\");\n           }\n           UserGroupInformation currentUser \u003d\n               UserGroupInformation.getCurrentUser();\n-          jaasClientContext \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n+          jaasClientEntry \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n               DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n           jaasClientIdentity \u003d currentUser.getShortUserName();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n-                jaasClientIdentity,\n-                jaasClientContext);\n+                jaasClientIdentity, jaasClientEntry);\n           }\n           break;\n \n         case digest:\n           String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n           String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n           if (userACLs.isEmpty()) {\n             //\n             throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n           }\n           digest(id, pass);\n           ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n           userACLs.add(acl);\n           digestAuthUser \u003d id;\n           digestAuthPassword \u003d pass;\n           String authPair \u003d id + \":\" + pass;\n           digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n           }\n           break;\n \n         case anon:\n           // nothing is needed; account is read only.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is anonymous\");\n           }\n           userACLs \u003d new ArrayList\u003cACL\u003e(0);\n           break;\n       }\n       systemACLs.addAll(userACLs);\n \n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Registry has no security\");\n       }\n       // wide open cluster, adding system acls\n       systemACLs.addAll(WorldReadWriteACL);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initSecurity() throws IOException {\n\n    secureRegistry \u003d\n        getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n    systemACLs.clear();\n    if (secureRegistry) {\n      addSystemACL(ALL_READ_ACCESS);\n\n      // determine the kerberos realm from JVM and settings\n      kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n          getDefaultRealmInJVM());\n\n      // System Accounts\n      String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n      usesRealm \u003d system.contains(\"@\");\n\n      systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n\n      LOG.info(\"Registry default system acls: \" + System.lineSeparator() +\n          systemACLs);\n      // user accounts (may be empty, but for digest one user AC must\n      // be built up\n      String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                              DEFAULT_REGISTRY_USER_ACCOUNTS);\n      List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n\n      // add self if the current user can be determined\n      ACL self;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n        if (self !\u003d null) {\n          userACLs.add(self);\n        }\n      }\n      LOG.info(\"Registry User ACLs \" + System.lineSeparator()+ userACLs);\n\n      // here check for UGI having secure on or digest + ID\n      switch (access) {\n        case sasl:\n          // secure + SASL \u003d\u003e has to be authenticated\n          if (!UserGroupInformation.isSecurityEnabled()) {\n            throw new IOException(\"Kerberos required for secure registry access\");\n          }\n          UserGroupInformation currentUser \u003d\n              UserGroupInformation.getCurrentUser();\n          jaasClientEntry \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n              DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n          jaasClientIdentity \u003d currentUser.getShortUserName();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                jaasClientIdentity, jaasClientEntry);\n          }\n          break;\n\n        case digest:\n          String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n          String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n          if (userACLs.isEmpty()) {\n            //\n            throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n          }\n          digest(id, pass);\n          ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n          userACLs.add(acl);\n          digestAuthUser \u003d id;\n          digestAuthPassword \u003d pass;\n          String authPair \u003d id + \":\" + pass;\n          digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n          }\n          break;\n\n        case anon:\n          // nothing is needed; account is read only.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is anonymous\");\n          }\n          userACLs \u003d new ArrayList\u003cACL\u003e(0);\n          break;\n      }\n      systemACLs.addAll(userACLs);\n\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registry has no security\");\n      }\n      // wide open cluster, adding system acls\n      systemACLs.addAll(WorldReadWriteACL);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "6d95866dcf278dd7789604787691fe8ee8d9cc9f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6332. Make RegistrySecurity use short user names for ZK ACLs. Contributed by Billie Rinaldi\n",
      "commitDate": "15/03/17 9:59 PM",
      "commitName": "6d95866dcf278dd7789604787691fe8ee8d9cc9f",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/01/17 10:18 AM",
      "commitNameOld": "efc8faa1bae79c17047e920beeb8af983db08e93",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 55.45,
      "commitsBetweenForRepo": 296,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,90 @@\n   private void initSecurity() throws IOException {\n \n     secureRegistry \u003d\n         getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n     systemACLs.clear();\n     if (secureRegistry) {\n       addSystemACL(ALL_READ_ACCESS);\n \n       // determine the kerberos realm from JVM and settings\n       kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n           getDefaultRealmInJVM());\n \n       // System Accounts\n       String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                 DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n+      usesRealm \u003d system.contains(\"@\");\n \n       systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n \n       // user accounts (may be empty, but for digest one user AC must\n       // be built up\n       String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                               DEFAULT_REGISTRY_USER_ACCOUNTS);\n       List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n \n       // add self if the current user can be determined\n       ACL self;\n       if (UserGroupInformation.isSecurityEnabled()) {\n         self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n         if (self !\u003d null) {\n           userACLs.add(self);\n         }\n       }\n \n       // here check for UGI having secure on or digest + ID\n       switch (access) {\n         case sasl:\n           // secure + SASL \u003d\u003e has to be authenticated\n           if (!UserGroupInformation.isSecurityEnabled()) {\n             throw new IOException(\"Kerberos required for secure registry access\");\n           }\n           UserGroupInformation currentUser \u003d\n               UserGroupInformation.getCurrentUser();\n           jaasClientContext \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n               DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n           jaasClientIdentity \u003d currentUser.getShortUserName();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                 jaasClientIdentity,\n                 jaasClientContext);\n           }\n           break;\n \n         case digest:\n           String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n           String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n           if (userACLs.isEmpty()) {\n             //\n             throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n           }\n           digest(id, pass);\n           ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n           userACLs.add(acl);\n           digestAuthUser \u003d id;\n           digestAuthPassword \u003d pass;\n           String authPair \u003d id + \":\" + pass;\n           digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n           }\n           break;\n \n         case anon:\n           // nothing is needed; account is read only.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auth is anonymous\");\n           }\n           userACLs \u003d new ArrayList\u003cACL\u003e(0);\n           break;\n       }\n       systemACLs.addAll(userACLs);\n \n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Registry has no security\");\n       }\n       // wide open cluster, adding system acls\n       systemACLs.addAll(WorldReadWriteACL);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initSecurity() throws IOException {\n\n    secureRegistry \u003d\n        getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n    systemACLs.clear();\n    if (secureRegistry) {\n      addSystemACL(ALL_READ_ACCESS);\n\n      // determine the kerberos realm from JVM and settings\n      kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n          getDefaultRealmInJVM());\n\n      // System Accounts\n      String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n      usesRealm \u003d system.contains(\"@\");\n\n      systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n\n      // user accounts (may be empty, but for digest one user AC must\n      // be built up\n      String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                              DEFAULT_REGISTRY_USER_ACCOUNTS);\n      List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n\n      // add self if the current user can be determined\n      ACL self;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n        if (self !\u003d null) {\n          userACLs.add(self);\n        }\n      }\n\n      // here check for UGI having secure on or digest + ID\n      switch (access) {\n        case sasl:\n          // secure + SASL \u003d\u003e has to be authenticated\n          if (!UserGroupInformation.isSecurityEnabled()) {\n            throw new IOException(\"Kerberos required for secure registry access\");\n          }\n          UserGroupInformation currentUser \u003d\n              UserGroupInformation.getCurrentUser();\n          jaasClientContext \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n              DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n          jaasClientIdentity \u003d currentUser.getShortUserName();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                jaasClientIdentity,\n                jaasClientContext);\n          }\n          break;\n\n        case digest:\n          String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n          String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n          if (userACLs.isEmpty()) {\n            //\n            throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n          }\n          digest(id, pass);\n          ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n          userACLs.add(acl);\n          digestAuthUser \u003d id;\n          digestAuthPassword \u003d pass;\n          String authPair \u003d id + \":\" + pass;\n          digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n          }\n          break;\n\n        case anon:\n          // nothing is needed; account is read only.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is anonymous\");\n          }\n          userACLs \u003d new ArrayList\u003cACL\u003e(0);\n          break;\n      }\n      systemACLs.addAll(userACLs);\n\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registry has no security\");\n      }\n      // wide open cluster, adding system acls\n      systemACLs.addAll(WorldReadWriteACL);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,89 @@\n+  private void initSecurity() throws IOException {\n+\n+    secureRegistry \u003d\n+        getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n+    systemACLs.clear();\n+    if (secureRegistry) {\n+      addSystemACL(ALL_READ_ACCESS);\n+\n+      // determine the kerberos realm from JVM and settings\n+      kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n+          getDefaultRealmInJVM());\n+\n+      // System Accounts\n+      String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n+                                DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n+\n+      systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n+\n+      // user accounts (may be empty, but for digest one user AC must\n+      // be built up\n+      String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n+                              DEFAULT_REGISTRY_USER_ACCOUNTS);\n+      List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n+\n+      // add self if the current user can be determined\n+      ACL self;\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n+        if (self !\u003d null) {\n+          userACLs.add(self);\n+        }\n+      }\n+\n+      // here check for UGI having secure on or digest + ID\n+      switch (access) {\n+        case sasl:\n+          // secure + SASL \u003d\u003e has to be authenticated\n+          if (!UserGroupInformation.isSecurityEnabled()) {\n+            throw new IOException(\"Kerberos required for secure registry access\");\n+          }\n+          UserGroupInformation currentUser \u003d\n+              UserGroupInformation.getCurrentUser();\n+          jaasClientContext \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n+              DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n+          jaasClientIdentity \u003d currentUser.getShortUserName();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n+                jaasClientIdentity,\n+                jaasClientContext);\n+          }\n+          break;\n+\n+        case digest:\n+          String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n+          String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n+          if (userACLs.isEmpty()) {\n+            //\n+            throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n+          }\n+          digest(id, pass);\n+          ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n+          userACLs.add(acl);\n+          digestAuthUser \u003d id;\n+          digestAuthPassword \u003d pass;\n+          String authPair \u003d id + \":\" + pass;\n+          digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n+          }\n+          break;\n+\n+        case anon:\n+          // nothing is needed; account is read only.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Auth is anonymous\");\n+          }\n+          userACLs \u003d new ArrayList\u003cACL\u003e(0);\n+          break;\n+      }\n+      systemACLs.addAll(userACLs);\n+\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Registry has no security\");\n+      }\n+      // wide open cluster, adding system acls\n+      systemACLs.addAll(WorldReadWriteACL);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initSecurity() throws IOException {\n\n    secureRegistry \u003d\n        getConfig().getBoolean(KEY_REGISTRY_SECURE, DEFAULT_REGISTRY_SECURE);\n    systemACLs.clear();\n    if (secureRegistry) {\n      addSystemACL(ALL_READ_ACCESS);\n\n      // determine the kerberos realm from JVM and settings\n      kerberosRealm \u003d getConfig().get(KEY_REGISTRY_KERBEROS_REALM,\n          getDefaultRealmInJVM());\n\n      // System Accounts\n      String system \u003d getOrFail(KEY_REGISTRY_SYSTEM_ACCOUNTS,\n                                DEFAULT_REGISTRY_SYSTEM_ACCOUNTS);\n\n      systemACLs.addAll(buildACLs(system, kerberosRealm, ZooDefs.Perms.ALL));\n\n      // user accounts (may be empty, but for digest one user AC must\n      // be built up\n      String user \u003d getConfig().get(KEY_REGISTRY_USER_ACCOUNTS,\n                              DEFAULT_REGISTRY_USER_ACCOUNTS);\n      List\u003cACL\u003e userACLs \u003d buildACLs(user, kerberosRealm, ZooDefs.Perms.ALL);\n\n      // add self if the current user can be determined\n      ACL self;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        self \u003d createSaslACLFromCurrentUser(ZooDefs.Perms.ALL);\n        if (self !\u003d null) {\n          userACLs.add(self);\n        }\n      }\n\n      // here check for UGI having secure on or digest + ID\n      switch (access) {\n        case sasl:\n          // secure + SASL \u003d\u003e has to be authenticated\n          if (!UserGroupInformation.isSecurityEnabled()) {\n            throw new IOException(\"Kerberos required for secure registry access\");\n          }\n          UserGroupInformation currentUser \u003d\n              UserGroupInformation.getCurrentUser();\n          jaasClientContext \u003d getOrFail(KEY_REGISTRY_CLIENT_JAAS_CONTEXT,\n              DEFAULT_REGISTRY_CLIENT_JAAS_CONTEXT);\n          jaasClientIdentity \u003d currentUser.getShortUserName();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is SASL user\u003d\\\"{}\\\" JAAS context\u003d\\\"{}\\\"\",\n                jaasClientIdentity,\n                jaasClientContext);\n          }\n          break;\n\n        case digest:\n          String id \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_ID, \"\");\n          String pass \u003d getOrFail(KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD, \"\");\n          if (userACLs.isEmpty()) {\n            //\n            throw new ServiceStateException(E_NO_USER_DETERMINED_FOR_ACLS);\n          }\n          digest(id, pass);\n          ACL acl \u003d new ACL(ZooDefs.Perms.ALL, toDigestId(id, pass));\n          userACLs.add(acl);\n          digestAuthUser \u003d id;\n          digestAuthPassword \u003d pass;\n          String authPair \u003d id + \":\" + pass;\n          digestAuthData \u003d authPair.getBytes(\"UTF-8\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is Digest ACL: {}\", aclToString(acl));\n          }\n          break;\n\n        case anon:\n          // nothing is needed; account is read only.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auth is anonymous\");\n          }\n          userACLs \u003d new ArrayList\u003cACL\u003e(0);\n          break;\n      }\n      systemACLs.addAll(userACLs);\n\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registry has no security\");\n      }\n      // wide open cluster, adding system acls\n      systemACLs.addAll(WorldReadWriteACL);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java"
    }
  }
}