{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JWTRedirectAuthenticationHandler.java",
  "functionName": "alternateAuthenticate",
  "functionId": "alternateAuthenticate___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java",
  "functionStartLine": 149,
  "functionEndLine": 188,
  "numCommitsSeen": 5,
  "timeTaken": 734,
  "changeHistory": [
    "08d4386162a878e88ac8f3d8db246e17c2943dad",
    "ce635733144456bce6bcf8664c5850ef6b60aa49"
  ],
  "changeHistoryShort": {
    "08d4386162a878e88ac8f3d8db246e17c2943dad": "Ybodychange",
    "ce635733144456bce6bcf8664c5850ef6b60aa49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "08d4386162a878e88ac8f3d8db246e17c2943dad": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11864. JWTRedirectAuthenticationHandler breaks java8 javadocs. (Larry McCay via stevel)\n",
      "commitDate": "23/04/15 1:06 AM",
      "commitName": "08d4386162a878e88ac8f3d8db246e17c2943dad",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/04/15 8:09 AM",
      "commitNameOld": "ce635733144456bce6bcf8664c5850ef6b60aa49",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 15.71,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public AuthenticationToken alternateAuthenticate(HttpServletRequest request,\n       HttpServletResponse response) throws IOException,\n       AuthenticationException {\n     AuthenticationToken token \u003d null;\n \n     String serializedJWT \u003d null;\n     HttpServletRequest req \u003d (HttpServletRequest) request;\n     serializedJWT \u003d getJWTFromCookie(req);\n     if (serializedJWT \u003d\u003d null) {\n-      String loginURL \u003d constructLoginURL(request, response);\n+      String loginURL \u003d constructLoginURL(request);\n       LOG.info(\"sending redirect to: \" + loginURL);\n       ((HttpServletResponse) response).sendRedirect(loginURL);\n     } else {\n       String userName \u003d null;\n       SignedJWT jwtToken \u003d null;\n       boolean valid \u003d false;\n       try {\n         jwtToken \u003d SignedJWT.parse(serializedJWT);\n         valid \u003d validateToken(jwtToken);\n         if (valid) {\n           userName \u003d jwtToken.getJWTClaimsSet().getSubject();\n           LOG.info(\"USERNAME: \" + userName);\n         } else {\n           LOG.warn(\"jwtToken failed validation: \" + jwtToken.serialize());\n         }\n       } catch(ParseException pe) {\n         // unable to parse the token let\u0027s try and get another one\n         LOG.warn(\"Unable to parse the JWT token\", pe);\n       }\n       if (valid) {\n         LOG.debug(\"Issuing AuthenticationToken for user.\");\n         token \u003d new AuthenticationToken(userName, userName, getType());\n       } else {\n-        String loginURL \u003d constructLoginURL(request, response);\n+        String loginURL \u003d constructLoginURL(request);\n         LOG.info(\"token validation failed - sending redirect to: \" + loginURL);\n         ((HttpServletResponse) response).sendRedirect(loginURL);\n       }\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken alternateAuthenticate(HttpServletRequest request,\n      HttpServletResponse response) throws IOException,\n      AuthenticationException {\n    AuthenticationToken token \u003d null;\n\n    String serializedJWT \u003d null;\n    HttpServletRequest req \u003d (HttpServletRequest) request;\n    serializedJWT \u003d getJWTFromCookie(req);\n    if (serializedJWT \u003d\u003d null) {\n      String loginURL \u003d constructLoginURL(request);\n      LOG.info(\"sending redirect to: \" + loginURL);\n      ((HttpServletResponse) response).sendRedirect(loginURL);\n    } else {\n      String userName \u003d null;\n      SignedJWT jwtToken \u003d null;\n      boolean valid \u003d false;\n      try {\n        jwtToken \u003d SignedJWT.parse(serializedJWT);\n        valid \u003d validateToken(jwtToken);\n        if (valid) {\n          userName \u003d jwtToken.getJWTClaimsSet().getSubject();\n          LOG.info(\"USERNAME: \" + userName);\n        } else {\n          LOG.warn(\"jwtToken failed validation: \" + jwtToken.serialize());\n        }\n      } catch(ParseException pe) {\n        // unable to parse the token let\u0027s try and get another one\n        LOG.warn(\"Unable to parse the JWT token\", pe);\n      }\n      if (valid) {\n        LOG.debug(\"Issuing AuthenticationToken for user.\");\n        token \u003d new AuthenticationToken(userName, userName, getType());\n      } else {\n        String loginURL \u003d constructLoginURL(request);\n        LOG.info(\"token validation failed - sending redirect to: \" + loginURL);\n        ((HttpServletResponse) response).sendRedirect(loginURL);\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "ce635733144456bce6bcf8664c5850ef6b60aa49": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11717. Support JWT tokens for web single sign on to the Hadoop\nservers. (Larry McCay via omalley)\n",
      "commitDate": "07/04/15 8:09 AM",
      "commitName": "ce635733144456bce6bcf8664c5850ef6b60aa49",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,40 @@\n+  public AuthenticationToken alternateAuthenticate(HttpServletRequest request,\n+      HttpServletResponse response) throws IOException,\n+      AuthenticationException {\n+    AuthenticationToken token \u003d null;\n+\n+    String serializedJWT \u003d null;\n+    HttpServletRequest req \u003d (HttpServletRequest) request;\n+    serializedJWT \u003d getJWTFromCookie(req);\n+    if (serializedJWT \u003d\u003d null) {\n+      String loginURL \u003d constructLoginURL(request, response);\n+      LOG.info(\"sending redirect to: \" + loginURL);\n+      ((HttpServletResponse) response).sendRedirect(loginURL);\n+    } else {\n+      String userName \u003d null;\n+      SignedJWT jwtToken \u003d null;\n+      boolean valid \u003d false;\n+      try {\n+        jwtToken \u003d SignedJWT.parse(serializedJWT);\n+        valid \u003d validateToken(jwtToken);\n+        if (valid) {\n+          userName \u003d jwtToken.getJWTClaimsSet().getSubject();\n+          LOG.info(\"USERNAME: \" + userName);\n+        } else {\n+          LOG.warn(\"jwtToken failed validation: \" + jwtToken.serialize());\n+        }\n+      } catch(ParseException pe) {\n+        // unable to parse the token let\u0027s try and get another one\n+        LOG.warn(\"Unable to parse the JWT token\", pe);\n+      }\n+      if (valid) {\n+        LOG.debug(\"Issuing AuthenticationToken for user.\");\n+        token \u003d new AuthenticationToken(userName, userName, getType());\n+      } else {\n+        String loginURL \u003d constructLoginURL(request, response);\n+        LOG.info(\"token validation failed - sending redirect to: \" + loginURL);\n+        ((HttpServletResponse) response).sendRedirect(loginURL);\n+      }\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken alternateAuthenticate(HttpServletRequest request,\n      HttpServletResponse response) throws IOException,\n      AuthenticationException {\n    AuthenticationToken token \u003d null;\n\n    String serializedJWT \u003d null;\n    HttpServletRequest req \u003d (HttpServletRequest) request;\n    serializedJWT \u003d getJWTFromCookie(req);\n    if (serializedJWT \u003d\u003d null) {\n      String loginURL \u003d constructLoginURL(request, response);\n      LOG.info(\"sending redirect to: \" + loginURL);\n      ((HttpServletResponse) response).sendRedirect(loginURL);\n    } else {\n      String userName \u003d null;\n      SignedJWT jwtToken \u003d null;\n      boolean valid \u003d false;\n      try {\n        jwtToken \u003d SignedJWT.parse(serializedJWT);\n        valid \u003d validateToken(jwtToken);\n        if (valid) {\n          userName \u003d jwtToken.getJWTClaimsSet().getSubject();\n          LOG.info(\"USERNAME: \" + userName);\n        } else {\n          LOG.warn(\"jwtToken failed validation: \" + jwtToken.serialize());\n        }\n      } catch(ParseException pe) {\n        // unable to parse the token let\u0027s try and get another one\n        LOG.warn(\"Unable to parse the JWT token\", pe);\n      }\n      if (valid) {\n        LOG.debug(\"Issuing AuthenticationToken for user.\");\n        token \u003d new AuthenticationToken(userName, userName, getType());\n      } else {\n        String loginURL \u003d constructLoginURL(request, response);\n        LOG.info(\"token validation failed - sending redirect to: \" + loginURL);\n        ((HttpServletResponse) response).sendRedirect(loginURL);\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java"
    }
  }
}