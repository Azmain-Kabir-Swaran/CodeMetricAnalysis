{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPOfferService.java",
  "functionName": "refreshNNList",
  "functionId": "refreshNNList___serviceId-String__nnIds-List__String____addrs-ArrayList__InetSocketAddress____lifelineAddrs-ArrayList__InetSocketAddress__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
  "functionStartLine": 143,
  "functionEndLine": 173,
  "numCommitsSeen": 240,
  "timeTaken": 4387,
  "changeHistory": [
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
    "880b9d24ff7b5f350ec99bac9b0862009460b486",
    "2759689d7d23001f007cb0dbe2521de90734dd5c"
  ],
  "changeHistoryShort": {
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "880b9d24ff7b5f350ec99bac9b0862009460b486": "Ybodychange",
    "2759689d7d23001f007cb0dbe2521de90734dd5c": "Yparameterchange"
  },
  "changeHistoryDetails": {
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
      "commitDate": "15/11/18 10:58 AM",
      "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
          "commitDate": "15/11/18 10:58 AM",
          "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 95.37,
          "commitsBetweenForRepo": 841,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs,\n+  void refreshNNList(String serviceId, List\u003cString\u003e nnIds,\n+      ArrayList\u003cInetSocketAddress\u003e addrs,\n       ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n     Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n     for (BPServiceActor actor : bpServices) {\n       oldAddrs.add(actor.getNNSocketAddress());\n     }\n     Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n     \n     // Process added NNs\n     Set\u003cInetSocketAddress\u003e addedNNs \u003d Sets.difference(newAddrs, oldAddrs);\n     for (InetSocketAddress addedNN : addedNNs) {\n-      BPServiceActor actor \u003d new BPServiceActor(addedNN,\n+      BPServiceActor actor \u003d new BPServiceActor(serviceId,\n+          nnIds.get(addrs.indexOf(addedNN)), addedNN,\n           lifelineAddrs.get(addrs.indexOf(addedNN)), this);\n       actor.start();\n       bpServices.add(actor);\n     }\n \n     // Process removed NNs\n     Set\u003cInetSocketAddress\u003e removedNNs \u003d Sets.difference(oldAddrs, newAddrs);\n     for (InetSocketAddress removedNN : removedNNs) {\n       for (BPServiceActor actor : bpServices) {\n         if (actor.getNNSocketAddress().equals(removedNN)) {\n           actor.stop();\n           shutdownActor(actor);\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void refreshNNList(String serviceId, List\u003cString\u003e nnIds,\n      ArrayList\u003cInetSocketAddress\u003e addrs,\n      ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n    Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n    for (BPServiceActor actor : bpServices) {\n      oldAddrs.add(actor.getNNSocketAddress());\n    }\n    Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n    \n    // Process added NNs\n    Set\u003cInetSocketAddress\u003e addedNNs \u003d Sets.difference(newAddrs, oldAddrs);\n    for (InetSocketAddress addedNN : addedNNs) {\n      BPServiceActor actor \u003d new BPServiceActor(serviceId,\n          nnIds.get(addrs.indexOf(addedNN)), addedNN,\n          lifelineAddrs.get(addrs.indexOf(addedNN)), this);\n      actor.start();\n      bpServices.add(actor);\n    }\n\n    // Process removed NNs\n    Set\u003cInetSocketAddress\u003e removedNNs \u003d Sets.difference(oldAddrs, newAddrs);\n    for (InetSocketAddress removedNN : removedNNs) {\n      for (BPServiceActor actor : bpServices) {\n        if (actor.getNNSocketAddress().equals(removedNN)) {\n          actor.stop();\n          shutdownActor(actor);\n          break;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[addrs-ArrayList\u003cInetSocketAddress\u003e, lifelineAddrs-ArrayList\u003cInetSocketAddress\u003e]",
            "newValue": "[serviceId-String, nnIds-List\u003cString\u003e, addrs-ArrayList\u003cInetSocketAddress\u003e, lifelineAddrs-ArrayList\u003cInetSocketAddress\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
          "commitDate": "15/11/18 10:58 AM",
          "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 95.37,
          "commitsBetweenForRepo": 841,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs,\n+  void refreshNNList(String serviceId, List\u003cString\u003e nnIds,\n+      ArrayList\u003cInetSocketAddress\u003e addrs,\n       ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n     Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n     for (BPServiceActor actor : bpServices) {\n       oldAddrs.add(actor.getNNSocketAddress());\n     }\n     Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n     \n     // Process added NNs\n     Set\u003cInetSocketAddress\u003e addedNNs \u003d Sets.difference(newAddrs, oldAddrs);\n     for (InetSocketAddress addedNN : addedNNs) {\n-      BPServiceActor actor \u003d new BPServiceActor(addedNN,\n+      BPServiceActor actor \u003d new BPServiceActor(serviceId,\n+          nnIds.get(addrs.indexOf(addedNN)), addedNN,\n           lifelineAddrs.get(addrs.indexOf(addedNN)), this);\n       actor.start();\n       bpServices.add(actor);\n     }\n \n     // Process removed NNs\n     Set\u003cInetSocketAddress\u003e removedNNs \u003d Sets.difference(oldAddrs, newAddrs);\n     for (InetSocketAddress removedNN : removedNNs) {\n       for (BPServiceActor actor : bpServices) {\n         if (actor.getNNSocketAddress().equals(removedNN)) {\n           actor.stop();\n           shutdownActor(actor);\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void refreshNNList(String serviceId, List\u003cString\u003e nnIds,\n      ArrayList\u003cInetSocketAddress\u003e addrs,\n      ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n    Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n    for (BPServiceActor actor : bpServices) {\n      oldAddrs.add(actor.getNNSocketAddress());\n    }\n    Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n    \n    // Process added NNs\n    Set\u003cInetSocketAddress\u003e addedNNs \u003d Sets.difference(newAddrs, oldAddrs);\n    for (InetSocketAddress addedNN : addedNNs) {\n      BPServiceActor actor \u003d new BPServiceActor(serviceId,\n          nnIds.get(addrs.indexOf(addedNN)), addedNN,\n          lifelineAddrs.get(addrs.indexOf(addedNN)), this);\n      actor.start();\n      bpServices.add(actor);\n    }\n\n    // Process removed NNs\n    Set\u003cInetSocketAddress\u003e removedNNs \u003d Sets.difference(oldAddrs, newAddrs);\n    for (InetSocketAddress removedNN : removedNNs) {\n      for (BPServiceActor actor : bpServices) {\n        if (actor.getNNSocketAddress().equals(removedNN)) {\n          actor.stop();\n          shutdownActor(actor);\n          break;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "880b9d24ff7b5f350ec99bac9b0862009460b486": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8693. refreshNamenodes does not support adding a new standby to a running DN. Contributed by Ajith S.\n",
      "commitDate": "16/01/18 2:51 AM",
      "commitName": "880b9d24ff7b5f350ec99bac9b0862009460b486",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "14/07/17 2:07 PM",
      "commitNameOld": "e7d187a1b6a826edd5bd0f708184d48f3674d489",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 185.57,
      "commitsBetweenForRepo": 1397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,29 @@\n   void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs,\n       ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n     Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n     for (BPServiceActor actor : bpServices) {\n       oldAddrs.add(actor.getNNSocketAddress());\n     }\n     Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n     \n-    if (!Sets.symmetricDifference(oldAddrs, newAddrs).isEmpty()) {\n-      // Keep things simple for now -- we can implement this at a later date.\n-      throw new IOException(\n-          \"HA does not currently support adding a new standby to a running DN. \" +\n-          \"Please do a rolling restart of DNs to reconfigure the list of NNs.\");\n+    // Process added NNs\n+    Set\u003cInetSocketAddress\u003e addedNNs \u003d Sets.difference(newAddrs, oldAddrs);\n+    for (InetSocketAddress addedNN : addedNNs) {\n+      BPServiceActor actor \u003d new BPServiceActor(addedNN,\n+          lifelineAddrs.get(addrs.indexOf(addedNN)), this);\n+      actor.start();\n+      bpServices.add(actor);\n+    }\n+\n+    // Process removed NNs\n+    Set\u003cInetSocketAddress\u003e removedNNs \u003d Sets.difference(oldAddrs, newAddrs);\n+    for (InetSocketAddress removedNN : removedNNs) {\n+      for (BPServiceActor actor : bpServices) {\n+        if (actor.getNNSocketAddress().equals(removedNN)) {\n+          actor.stop();\n+          shutdownActor(actor);\n+          break;\n+        }\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs,\n      ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n    Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n    for (BPServiceActor actor : bpServices) {\n      oldAddrs.add(actor.getNNSocketAddress());\n    }\n    Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n    \n    // Process added NNs\n    Set\u003cInetSocketAddress\u003e addedNNs \u003d Sets.difference(newAddrs, oldAddrs);\n    for (InetSocketAddress addedNN : addedNNs) {\n      BPServiceActor actor \u003d new BPServiceActor(addedNN,\n          lifelineAddrs.get(addrs.indexOf(addedNN)), this);\n      actor.start();\n      bpServices.add(actor);\n    }\n\n    // Process removed NNs\n    Set\u003cInetSocketAddress\u003e removedNNs \u003d Sets.difference(oldAddrs, newAddrs);\n    for (InetSocketAddress removedNN : removedNNs) {\n      for (BPServiceActor actor : bpServices) {\n        if (actor.getNNSocketAddress().equals(removedNN)) {\n          actor.stop();\n          shutdownActor(actor);\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    },
    "2759689d7d23001f007cb0dbe2521de90734dd5c": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-9239. DataNode Lifeline Protocol: an alternative protocol for reporting DataNode liveness. Contributed by Chris Nauroth.\n",
      "commitDate": "04/03/16 3:29 PM",
      "commitName": "2759689d7d23001f007cb0dbe2521de90734dd5c",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/02/16 3:32 PM",
      "commitNameOld": "d1d4e16690cc85f7f22fbead9cf596260819b561",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n-  void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs) throws IOException {\n+  void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs,\n+      ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n     Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n     for (BPServiceActor actor : bpServices) {\n       oldAddrs.add(actor.getNNSocketAddress());\n     }\n     Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n     \n     if (!Sets.symmetricDifference(oldAddrs, newAddrs).isEmpty()) {\n       // Keep things simple for now -- we can implement this at a later date.\n       throw new IOException(\n           \"HA does not currently support adding a new standby to a running DN. \" +\n           \"Please do a rolling restart of DNs to reconfigure the list of NNs.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void refreshNNList(ArrayList\u003cInetSocketAddress\u003e addrs,\n      ArrayList\u003cInetSocketAddress\u003e lifelineAddrs) throws IOException {\n    Set\u003cInetSocketAddress\u003e oldAddrs \u003d Sets.newHashSet();\n    for (BPServiceActor actor : bpServices) {\n      oldAddrs.add(actor.getNNSocketAddress());\n    }\n    Set\u003cInetSocketAddress\u003e newAddrs \u003d Sets.newHashSet(addrs);\n    \n    if (!Sets.symmetricDifference(oldAddrs, newAddrs).isEmpty()) {\n      // Keep things simple for now -- we can implement this at a later date.\n      throw new IOException(\n          \"HA does not currently support adding a new standby to a running DN. \" +\n          \"Please do a rolling restart of DNs to reconfigure the list of NNs.\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {
        "oldValue": "[addrs-ArrayList\u003cInetSocketAddress\u003e]",
        "newValue": "[addrs-ArrayList\u003cInetSocketAddress\u003e, lifelineAddrs-ArrayList\u003cInetSocketAddress\u003e]"
      }
    }
  }
}