{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "updateContainerInternal",
  "functionId": "updateContainerInternal___containerId-ContainerId__containerTokenIdentifier-ContainerTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1304,
  "functionEndLine": 1378,
  "numCommitsSeen": 326,
  "timeTaken": 7017,
  "changeHistory": [
    "df800f6cf3ea663daf4081ebe784808b08d9366d",
    "8410d862d3a72740f461ef91dddb5325955e1ca5",
    "4d7be1d8575e9254c59d41460960708e3718503a",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "c57eac5dfe277845ab4522a1188023a73ee41539",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
    "5f5a968d65c44a831176764439e00db9203999ed",
    "ffd820c27a4f8cf4676ad8758696ed89fde80218"
  ],
  "changeHistoryShort": {
    "df800f6cf3ea663daf4081ebe784808b08d9366d": "Ybodychange",
    "8410d862d3a72740f461ef91dddb5325955e1ca5": "Ybodychange",
    "4d7be1d8575e9254c59d41460960708e3718503a": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Ymultichange(Yparameterchange,Ybodychange)",
    "c57eac5dfe277845ab4522a1188023a73ee41539": "Ybodychange",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": "Ybodychange",
    "5f5a968d65c44a831176764439e00db9203999ed": "Ybodychange",
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df800f6cf3ea663daf4081ebe784808b08d9366d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7240. Add more states and transitions to stabilize the NM Container state machine. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "25/09/17 4:02 PM",
      "commitName": "df800f6cf3ea663daf4081ebe784808b08d9366d",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "9b08f365d749185d7ed8e34dc379b2e415a29e99",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 26.71,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,75 @@\n   private void updateContainerInternal(ContainerId containerId,\n       ContainerTokenIdentifier containerTokenIdentifier)\n       throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container version.\n     int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n     if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n           + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n     }\n \n-    // Check container state\n-    org.apache.hadoop.yarn.server.nodemanager.\n-        containermanager.container.ContainerState currentState \u003d\n-        container.getContainerState();\n-    EnumSet\u003corg.apache.hadoop.yarn.server.nodemanager.containermanager\n-        .container.ContainerState\u003e allowedStates \u003d EnumSet.of(\n-        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n-            .ContainerState.RUNNING,\n-        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n-            .ContainerState.SCHEDULED,\n-        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n-            .ContainerState.LOCALIZING,\n-        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n-            .ContainerState.REINITIALIZING,\n-        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n-            .ContainerState.RELAUNCHING);\n-    if (!allowedStates.contains(currentState)) {\n-      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-          + \" is in \" + currentState.name() + \" state.\"\n-          + \" Resource can only be changed when a container is in\"\n-          + \" RUNNING or SCHEDULED state\");\n-    }\n-\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     ExecutionType currentExecType \u003d\n         container.getContainerTokenIdentifier().getExecutionType();\n     boolean isResourceChange \u003d false;\n     boolean isExecTypeUpdate \u003d false;\n     Resource targetResource \u003d containerTokenIdentifier.getResource();\n     ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n \n     // Is true if either the resources has increased or execution type\n     // updated from opportunistic to guaranteed\n     boolean isIncrease \u003d false;\n     if (!currentResource.equals(targetResource)) {\n       isResourceChange \u003d true;\n       isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n           \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n     } else if (!currentExecType.equals(targetExecType)) {\n       isExecTypeUpdate \u003d true;\n       isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n           targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n     }\n     if (isIncrease) {\n       org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n       if (isResourceChange) {\n         increasedContainer \u003d\n             org.apache.hadoop.yarn.api.records.Container.newInstance(\n                 containerId, null, null, targetResource, null, null,\n                 currentExecType);\n         if (context.getIncreasedContainers().putIfAbsent(containerId,\n             increasedContainer) !\u003d null){\n           throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n               + \" resource is being increased -or- \" +\n               \"is undergoing ExecutionType promoted.\");\n         }\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n-        // Dispatch message to ContainerScheduler to actually\n+        // Dispatch message to Container to actually\n         // make the change.\n-        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n-            container, containerTokenIdentifier, isResourceChange,\n-            isExecTypeUpdate, isIncrease));\n+        dispatcher.getEventHandler().handle(new UpdateContainerTokenEvent(\n+            container.getContainerId(), containerTokenIdentifier,\n+            isResourceChange, isExecTypeUpdate, isIncrease));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerInternal(ContainerId containerId,\n      ContainerTokenIdentifier containerTokenIdentifier)\n      throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container version.\n    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n    }\n\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    ExecutionType currentExecType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    boolean isResourceChange \u003d false;\n    boolean isExecTypeUpdate \u003d false;\n    Resource targetResource \u003d containerTokenIdentifier.getResource();\n    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n\n    // Is true if either the resources has increased or execution type\n    // updated from opportunistic to guaranteed\n    boolean isIncrease \u003d false;\n    if (!currentResource.equals(targetResource)) {\n      isResourceChange \u003d true;\n      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n    } else if (!currentExecType.equals(targetExecType)) {\n      isExecTypeUpdate \u003d true;\n      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n    }\n    if (isIncrease) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n      if (isResourceChange) {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, targetResource, null, null,\n                currentExecType);\n        if (context.getIncreasedContainers().putIfAbsent(containerId,\n            increasedContainer) !\u003d null){\n          throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n              + \" resource is being increased -or- \" +\n              \"is undergoing ExecutionType promoted.\");\n        }\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Dispatch message to Container to actually\n        // make the change.\n        dispatcher.getEventHandler().handle(new UpdateContainerTokenEvent(\n            container.getContainerId(), containerTokenIdentifier,\n            isResourceChange, isExecTypeUpdate, isIncrease));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "8410d862d3a72740f461ef91dddb5325955e1ca5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6979. Add flag to notify all types of container updates to NM via NodeHeartbeatResponse. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "20/08/17 7:54 AM",
      "commitName": "8410d862d3a72740f461ef91dddb5325955e1ca5",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/08/17 7:46 PM",
      "commitNameOld": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 5.51,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,98 @@\n   private void updateContainerInternal(ContainerId containerId,\n       ContainerTokenIdentifier containerTokenIdentifier)\n       throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container version.\n     int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n     if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n           + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n     }\n \n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n-    if (currentState !\u003d org.apache.hadoop.yarn.server.\n-            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n-        currentState !\u003d org.apache.hadoop.yarn.server.\n-            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n+    EnumSet\u003corg.apache.hadoop.yarn.server.nodemanager.containermanager\n+        .container.ContainerState\u003e allowedStates \u003d EnumSet.of(\n+        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n+            .ContainerState.RUNNING,\n+        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n+            .ContainerState.SCHEDULED,\n+        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n+            .ContainerState.LOCALIZING,\n+        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n+            .ContainerState.REINITIALIZING,\n+        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n+            .ContainerState.RELAUNCHING);\n+    if (!allowedStates.contains(currentState)) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n           + \" RUNNING or SCHEDULED state\");\n     }\n \n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     ExecutionType currentExecType \u003d\n         container.getContainerTokenIdentifier().getExecutionType();\n     boolean isResourceChange \u003d false;\n     boolean isExecTypeUpdate \u003d false;\n     Resource targetResource \u003d containerTokenIdentifier.getResource();\n     ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n \n     // Is true if either the resources has increased or execution type\n     // updated from opportunistic to guaranteed\n     boolean isIncrease \u003d false;\n     if (!currentResource.equals(targetResource)) {\n       isResourceChange \u003d true;\n       isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n           \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n     } else if (!currentExecType.equals(targetExecType)) {\n       isExecTypeUpdate \u003d true;\n       isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n           targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n     }\n     if (isIncrease) {\n       org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n       if (isResourceChange) {\n         increasedContainer \u003d\n             org.apache.hadoop.yarn.api.records.Container.newInstance(\n                 containerId, null, null, targetResource, null, null,\n                 currentExecType);\n-      } else {\n-        increasedContainer \u003d\n-            org.apache.hadoop.yarn.api.records.Container.newInstance(\n-                containerId, null, null, currentResource, null, null,\n-                targetExecType);\n-      }\n-      if (context.getIncreasedContainers().putIfAbsent(containerId,\n-          increasedContainer) !\u003d null){\n-        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-            + \" resource is being increased -or- \" +\n-            \"is undergoing ExecutionType promoted.\");\n+        if (context.getIncreasedContainers().putIfAbsent(containerId,\n+            increasedContainer) !\u003d null){\n+          throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+              + \" resource is being increased -or- \" +\n+              \"is undergoing ExecutionType promoted.\");\n+        }\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n         // Dispatch message to ContainerScheduler to actually\n         // make the change.\n         dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n             container, containerTokenIdentifier, isResourceChange,\n             isExecTypeUpdate, isIncrease));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerInternal(ContainerId containerId,\n      ContainerTokenIdentifier containerTokenIdentifier)\n      throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container version.\n    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n    }\n\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    EnumSet\u003corg.apache.hadoop.yarn.server.nodemanager.containermanager\n        .container.ContainerState\u003e allowedStates \u003d EnumSet.of(\n        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n            .ContainerState.RUNNING,\n        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n            .ContainerState.SCHEDULED,\n        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n            .ContainerState.LOCALIZING,\n        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n            .ContainerState.REINITIALIZING,\n        org.apache.hadoop.yarn.server.nodemanager.containermanager.container\n            .ContainerState.RELAUNCHING);\n    if (!allowedStates.contains(currentState)) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING or SCHEDULED state\");\n    }\n\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    ExecutionType currentExecType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    boolean isResourceChange \u003d false;\n    boolean isExecTypeUpdate \u003d false;\n    Resource targetResource \u003d containerTokenIdentifier.getResource();\n    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n\n    // Is true if either the resources has increased or execution type\n    // updated from opportunistic to guaranteed\n    boolean isIncrease \u003d false;\n    if (!currentResource.equals(targetResource)) {\n      isResourceChange \u003d true;\n      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n    } else if (!currentExecType.equals(targetExecType)) {\n      isExecTypeUpdate \u003d true;\n      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n    }\n    if (isIncrease) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n      if (isResourceChange) {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, targetResource, null, null,\n                currentExecType);\n        if (context.getIncreasedContainers().putIfAbsent(containerId,\n            increasedContainer) !\u003d null){\n          throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n              + \" resource is being increased -or- \" +\n              \"is undergoing ExecutionType promoted.\");\n        }\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Dispatch message to ContainerScheduler to actually\n        // make the change.\n        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n            container, containerTokenIdentifier, isResourceChange,\n            isExecTypeUpdate, isIncrease));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4d7be1d8575e9254c59d41460960708e3718503a": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "14/08/17 7:46 PM",
      "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
          "commitDate": "14/08/17 7:46 PM",
          "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "03/08/17 9:15 PM",
          "commitNameOld": "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 10.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,94 @@\n-  private void changeContainerResourceInternal(ContainerId containerId,\n-      int containerVersion, Resource targetResource, boolean increase)\n-          throws YarnException, IOException {\n+  private void updateContainerInternal(ContainerId containerId,\n+      ContainerTokenIdentifier containerTokenIdentifier)\n+      throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n+    // Check container version.\n+    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n+    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n+      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n+          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n+    }\n+\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n-        nodemanager.containermanager.container.ContainerState.RUNNING) {\n+            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n+        currentState !\u003d org.apache.hadoop.yarn.server.\n+            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n-          + \" RUNNING state\");\n+          + \" RUNNING or SCHEDULED state\");\n     }\n+\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n-    if (currentResource.equals(targetResource)) {\n-      LOG.warn(\"Unable to change resource for container \"\n-          + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is the same as the current resource\");\n-      return;\n+    ExecutionType currentExecType \u003d\n+        container.getContainerTokenIdentifier().getExecutionType();\n+    boolean isResourceChange \u003d false;\n+    boolean isExecTypeUpdate \u003d false;\n+    Resource targetResource \u003d containerTokenIdentifier.getResource();\n+    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n+\n+    // Is true if either the resources has increased or execution type\n+    // updated from opportunistic to guaranteed\n+    boolean isIncrease \u003d false;\n+    if (!currentResource.equals(targetResource)) {\n+      isResourceChange \u003d true;\n+      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n+          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n+    } else if (!currentExecType.equals(targetExecType)) {\n+      isExecTypeUpdate \u003d true;\n+      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n+          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n     }\n-    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n-      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n-          + \"container \" + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is smaller than the current resource \"\n-          + currentResource.toString());\n-    }\n-    if (!increase \u0026\u0026\n-        (!Resources.fitsIn(Resources.none(), targetResource)\n-            || !Resources.fitsIn(targetResource, currentResource))) {\n-      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n-          + \"container \" + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is not smaller than the current resource \"\n-          + currentResource.toString());\n-    }\n-    if (increase) {\n-      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n-          org.apache.hadoop.yarn.api.records.Container.newInstance(\n-              containerId, null, null, targetResource, null, null);\n+    if (isIncrease) {\n+      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n+      if (isResourceChange) {\n+        increasedContainer \u003d\n+            org.apache.hadoop.yarn.api.records.Container.newInstance(\n+                containerId, null, null, targetResource, null, null,\n+                currentExecType);\n+      } else {\n+        increasedContainer \u003d\n+            org.apache.hadoop.yarn.api.records.Container.newInstance(\n+                containerId, null, null, currentResource, null, null,\n+                targetExecType);\n+      }\n       if (context.getIncreasedContainers().putIfAbsent(containerId,\n           increasedContainer) !\u003d null){\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-            + \" resource is being increased.\");\n+            + \" resource is being increased -or- \" +\n+            \"is undergoing ExecutionType promoted.\");\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n-        // Persist container resource change for recovery\n-        this.context.getNMStateStore().storeContainerResourceChanged(\n-            containerId, containerVersion, targetResource);\n-        getContainersMonitor().handle(\n-            new ChangeMonitoringContainerResourceEvent(\n-                containerId, targetResource));\n+        // Dispatch message to ContainerScheduler to actually\n+        // make the change.\n+        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n+            container, containerTokenIdentifier, isResourceChange,\n+            isExecTypeUpdate, isIncrease));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateContainerInternal(ContainerId containerId,\n      ContainerTokenIdentifier containerTokenIdentifier)\n      throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container version.\n    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n    }\n\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n        currentState !\u003d org.apache.hadoop.yarn.server.\n            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING or SCHEDULED state\");\n    }\n\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    ExecutionType currentExecType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    boolean isResourceChange \u003d false;\n    boolean isExecTypeUpdate \u003d false;\n    Resource targetResource \u003d containerTokenIdentifier.getResource();\n    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n\n    // Is true if either the resources has increased or execution type\n    // updated from opportunistic to guaranteed\n    boolean isIncrease \u003d false;\n    if (!currentResource.equals(targetResource)) {\n      isResourceChange \u003d true;\n      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n    } else if (!currentExecType.equals(targetExecType)) {\n      isExecTypeUpdate \u003d true;\n      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n    }\n    if (isIncrease) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n      if (isResourceChange) {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, targetResource, null, null,\n                currentExecType);\n      } else {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, currentResource, null, null,\n                targetExecType);\n      }\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased -or- \" +\n            \"is undergoing ExecutionType promoted.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Dispatch message to ContainerScheduler to actually\n        // make the change.\n        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n            container, containerTokenIdentifier, isResourceChange,\n            isExecTypeUpdate, isIncrease));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "changeContainerResourceInternal",
            "newValue": "updateContainerInternal"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
          "commitDate": "14/08/17 7:46 PM",
          "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "03/08/17 9:15 PM",
          "commitNameOld": "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 10.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,94 @@\n-  private void changeContainerResourceInternal(ContainerId containerId,\n-      int containerVersion, Resource targetResource, boolean increase)\n-          throws YarnException, IOException {\n+  private void updateContainerInternal(ContainerId containerId,\n+      ContainerTokenIdentifier containerTokenIdentifier)\n+      throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n+    // Check container version.\n+    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n+    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n+      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n+          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n+    }\n+\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n-        nodemanager.containermanager.container.ContainerState.RUNNING) {\n+            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n+        currentState !\u003d org.apache.hadoop.yarn.server.\n+            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n-          + \" RUNNING state\");\n+          + \" RUNNING or SCHEDULED state\");\n     }\n+\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n-    if (currentResource.equals(targetResource)) {\n-      LOG.warn(\"Unable to change resource for container \"\n-          + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is the same as the current resource\");\n-      return;\n+    ExecutionType currentExecType \u003d\n+        container.getContainerTokenIdentifier().getExecutionType();\n+    boolean isResourceChange \u003d false;\n+    boolean isExecTypeUpdate \u003d false;\n+    Resource targetResource \u003d containerTokenIdentifier.getResource();\n+    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n+\n+    // Is true if either the resources has increased or execution type\n+    // updated from opportunistic to guaranteed\n+    boolean isIncrease \u003d false;\n+    if (!currentResource.equals(targetResource)) {\n+      isResourceChange \u003d true;\n+      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n+          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n+    } else if (!currentExecType.equals(targetExecType)) {\n+      isExecTypeUpdate \u003d true;\n+      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n+          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n     }\n-    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n-      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n-          + \"container \" + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is smaller than the current resource \"\n-          + currentResource.toString());\n-    }\n-    if (!increase \u0026\u0026\n-        (!Resources.fitsIn(Resources.none(), targetResource)\n-            || !Resources.fitsIn(targetResource, currentResource))) {\n-      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n-          + \"container \" + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is not smaller than the current resource \"\n-          + currentResource.toString());\n-    }\n-    if (increase) {\n-      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n-          org.apache.hadoop.yarn.api.records.Container.newInstance(\n-              containerId, null, null, targetResource, null, null);\n+    if (isIncrease) {\n+      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n+      if (isResourceChange) {\n+        increasedContainer \u003d\n+            org.apache.hadoop.yarn.api.records.Container.newInstance(\n+                containerId, null, null, targetResource, null, null,\n+                currentExecType);\n+      } else {\n+        increasedContainer \u003d\n+            org.apache.hadoop.yarn.api.records.Container.newInstance(\n+                containerId, null, null, currentResource, null, null,\n+                targetExecType);\n+      }\n       if (context.getIncreasedContainers().putIfAbsent(containerId,\n           increasedContainer) !\u003d null){\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-            + \" resource is being increased.\");\n+            + \" resource is being increased -or- \" +\n+            \"is undergoing ExecutionType promoted.\");\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n-        // Persist container resource change for recovery\n-        this.context.getNMStateStore().storeContainerResourceChanged(\n-            containerId, containerVersion, targetResource);\n-        getContainersMonitor().handle(\n-            new ChangeMonitoringContainerResourceEvent(\n-                containerId, targetResource));\n+        // Dispatch message to ContainerScheduler to actually\n+        // make the change.\n+        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n+            container, containerTokenIdentifier, isResourceChange,\n+            isExecTypeUpdate, isIncrease));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateContainerInternal(ContainerId containerId,\n      ContainerTokenIdentifier containerTokenIdentifier)\n      throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container version.\n    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n    }\n\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n        currentState !\u003d org.apache.hadoop.yarn.server.\n            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING or SCHEDULED state\");\n    }\n\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    ExecutionType currentExecType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    boolean isResourceChange \u003d false;\n    boolean isExecTypeUpdate \u003d false;\n    Resource targetResource \u003d containerTokenIdentifier.getResource();\n    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n\n    // Is true if either the resources has increased or execution type\n    // updated from opportunistic to guaranteed\n    boolean isIncrease \u003d false;\n    if (!currentResource.equals(targetResource)) {\n      isResourceChange \u003d true;\n      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n    } else if (!currentExecType.equals(targetExecType)) {\n      isExecTypeUpdate \u003d true;\n      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n    }\n    if (isIncrease) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n      if (isResourceChange) {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, targetResource, null, null,\n                currentExecType);\n      } else {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, currentResource, null, null,\n                targetExecType);\n      }\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased -or- \" +\n            \"is undergoing ExecutionType promoted.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Dispatch message to ContainerScheduler to actually\n        // make the change.\n        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n            container, containerTokenIdentifier, isResourceChange,\n            isExecTypeUpdate, isIncrease));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, containerVersion-int, targetResource-Resource, increase-boolean]",
            "newValue": "[containerId-ContainerId, containerTokenIdentifier-ContainerTokenIdentifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
          "commitDate": "14/08/17 7:46 PM",
          "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "03/08/17 9:15 PM",
          "commitNameOld": "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 10.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,94 @@\n-  private void changeContainerResourceInternal(ContainerId containerId,\n-      int containerVersion, Resource targetResource, boolean increase)\n-          throws YarnException, IOException {\n+  private void updateContainerInternal(ContainerId containerId,\n+      ContainerTokenIdentifier containerTokenIdentifier)\n+      throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n+    // Check container version.\n+    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n+    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n+      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n+          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n+    }\n+\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n-        nodemanager.containermanager.container.ContainerState.RUNNING) {\n+            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n+        currentState !\u003d org.apache.hadoop.yarn.server.\n+            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n-          + \" RUNNING state\");\n+          + \" RUNNING or SCHEDULED state\");\n     }\n+\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n-    if (currentResource.equals(targetResource)) {\n-      LOG.warn(\"Unable to change resource for container \"\n-          + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is the same as the current resource\");\n-      return;\n+    ExecutionType currentExecType \u003d\n+        container.getContainerTokenIdentifier().getExecutionType();\n+    boolean isResourceChange \u003d false;\n+    boolean isExecTypeUpdate \u003d false;\n+    Resource targetResource \u003d containerTokenIdentifier.getResource();\n+    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n+\n+    // Is true if either the resources has increased or execution type\n+    // updated from opportunistic to guaranteed\n+    boolean isIncrease \u003d false;\n+    if (!currentResource.equals(targetResource)) {\n+      isResourceChange \u003d true;\n+      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n+          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n+    } else if (!currentExecType.equals(targetExecType)) {\n+      isExecTypeUpdate \u003d true;\n+      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n+          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n     }\n-    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n-      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n-          + \"container \" + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is smaller than the current resource \"\n-          + currentResource.toString());\n-    }\n-    if (!increase \u0026\u0026\n-        (!Resources.fitsIn(Resources.none(), targetResource)\n-            || !Resources.fitsIn(targetResource, currentResource))) {\n-      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n-          + \"container \" + containerId.toString()\n-          + \". The target resource \"\n-          + targetResource.toString()\n-          + \" is not smaller than the current resource \"\n-          + currentResource.toString());\n-    }\n-    if (increase) {\n-      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n-          org.apache.hadoop.yarn.api.records.Container.newInstance(\n-              containerId, null, null, targetResource, null, null);\n+    if (isIncrease) {\n+      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n+      if (isResourceChange) {\n+        increasedContainer \u003d\n+            org.apache.hadoop.yarn.api.records.Container.newInstance(\n+                containerId, null, null, targetResource, null, null,\n+                currentExecType);\n+      } else {\n+        increasedContainer \u003d\n+            org.apache.hadoop.yarn.api.records.Container.newInstance(\n+                containerId, null, null, currentResource, null, null,\n+                targetExecType);\n+      }\n       if (context.getIncreasedContainers().putIfAbsent(containerId,\n           increasedContainer) !\u003d null){\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-            + \" resource is being increased.\");\n+            + \" resource is being increased -or- \" +\n+            \"is undergoing ExecutionType promoted.\");\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n-        // Persist container resource change for recovery\n-        this.context.getNMStateStore().storeContainerResourceChanged(\n-            containerId, containerVersion, targetResource);\n-        getContainersMonitor().handle(\n-            new ChangeMonitoringContainerResourceEvent(\n-                containerId, targetResource));\n+        // Dispatch message to ContainerScheduler to actually\n+        // make the change.\n+        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n+            container, containerTokenIdentifier, isResourceChange,\n+            isExecTypeUpdate, isIncrease));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateContainerInternal(ContainerId containerId,\n      ContainerTokenIdentifier containerTokenIdentifier)\n      throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container version.\n    int currentVersion \u003d container.getContainerTokenIdentifier().getVersion();\n    if (containerTokenIdentifier.getVersion() \u003c\u003d currentVersion) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" has update version [\" + currentVersion + \"] \u003e\u003d requested version\"\n          + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\n    }\n\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n            nodemanager.containermanager.container.ContainerState.RUNNING \u0026\u0026\n        currentState !\u003d org.apache.hadoop.yarn.server.\n            nodemanager.containermanager.container.ContainerState.SCHEDULED) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING or SCHEDULED state\");\n    }\n\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    ExecutionType currentExecType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    boolean isResourceChange \u003d false;\n    boolean isExecTypeUpdate \u003d false;\n    Resource targetResource \u003d containerTokenIdentifier.getResource();\n    ExecutionType targetExecType \u003d containerTokenIdentifier.getExecutionType();\n\n    // Is true if either the resources has increased or execution type\n    // updated from opportunistic to guaranteed\n    boolean isIncrease \u003d false;\n    if (!currentResource.equals(targetResource)) {\n      isResourceChange \u003d true;\n      isIncrease \u003d Resources.fitsIn(currentResource, targetResource)\n          \u0026\u0026 !Resources.fitsIn(targetResource, currentResource);\n    } else if (!currentExecType.equals(targetExecType)) {\n      isExecTypeUpdate \u003d true;\n      isIncrease \u003d currentExecType \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n          targetExecType \u003d\u003d ExecutionType.GUARANTEED;\n    }\n    if (isIncrease) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d null;\n      if (isResourceChange) {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, targetResource, null, null,\n                currentExecType);\n      } else {\n        increasedContainer \u003d\n            org.apache.hadoop.yarn.api.records.Container.newInstance(\n                containerId, null, null, currentResource, null, null,\n                targetExecType);\n      }\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased -or- \" +\n            \"is undergoing ExecutionType promoted.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Dispatch message to ContainerScheduler to actually\n        // make the change.\n        dispatcher.getEventHandler().handle(new UpdateContainerSchedulerEvent(\n            container, containerTokenIdentifier, isResourceChange,\n            isExecTypeUpdate, isIncrease));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
          "commitDate": "30/08/16 3:52 PM",
          "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "26/08/16 9:04 AM",
          "commitNameOld": "9ef632f3b0b0e0808116cd1c7482a205b7ebef7d",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 4.28,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,81 @@\n-  private void changeContainerResourceInternal(\n-      ContainerId containerId, Resource targetResource, boolean increase)\n+  private void changeContainerResourceInternal(ContainerId containerId,\n+      int containerVersion, Resource targetResource, boolean increase)\n           throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n         nodemanager.containermanager.container.ContainerState.RUNNING) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n           + \" RUNNING state\");\n     }\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     if (currentResource.equals(targetResource)) {\n       LOG.warn(\"Unable to change resource for container \"\n           + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is the same as the current resource\");\n       return;\n     }\n     if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n       throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (!increase \u0026\u0026\n         (!Resources.fitsIn(Resources.none(), targetResource)\n             || !Resources.fitsIn(targetResource, currentResource))) {\n       throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is not smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (increase) {\n       org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n           org.apache.hadoop.yarn.api.records.Container.newInstance(\n               containerId, null, null, targetResource, null, null);\n       if (context.getIncreasedContainers().putIfAbsent(containerId,\n           increasedContainer) !\u003d null){\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" resource is being increased.\");\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n         // Persist container resource change for recovery\n         this.context.getNMStateStore().storeContainerResourceChanged(\n-            containerId, targetResource);\n+            containerId, containerVersion, targetResource);\n         getContainersMonitor().handle(\n             new ChangeMonitoringContainerResourceEvent(\n                 containerId, targetResource));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void changeContainerResourceInternal(ContainerId containerId,\n      int containerVersion, Resource targetResource, boolean increase)\n          throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n        nodemanager.containermanager.container.ContainerState.RUNNING) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING state\");\n    }\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    if (currentResource.equals(targetResource)) {\n      LOG.warn(\"Unable to change resource for container \"\n          + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is the same as the current resource\");\n      return;\n    }\n    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (!increase \u0026\u0026\n        (!Resources.fitsIn(Resources.none(), targetResource)\n            || !Resources.fitsIn(targetResource, currentResource))) {\n      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is not smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (increase) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n          org.apache.hadoop.yarn.api.records.Container.newInstance(\n              containerId, null, null, targetResource, null, null);\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Persist container resource change for recovery\n        this.context.getNMStateStore().storeContainerResourceChanged(\n            containerId, containerVersion, targetResource);\n        getContainersMonitor().handle(\n            new ChangeMonitoringContainerResourceEvent(\n                containerId, targetResource));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, targetResource-Resource, increase-boolean]",
            "newValue": "[containerId-ContainerId, containerVersion-int, targetResource-Resource, increase-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
          "commitDate": "30/08/16 3:52 PM",
          "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "26/08/16 9:04 AM",
          "commitNameOld": "9ef632f3b0b0e0808116cd1c7482a205b7ebef7d",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 4.28,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,81 @@\n-  private void changeContainerResourceInternal(\n-      ContainerId containerId, Resource targetResource, boolean increase)\n+  private void changeContainerResourceInternal(ContainerId containerId,\n+      int containerVersion, Resource targetResource, boolean increase)\n           throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n         nodemanager.containermanager.container.ContainerState.RUNNING) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n           + \" RUNNING state\");\n     }\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     if (currentResource.equals(targetResource)) {\n       LOG.warn(\"Unable to change resource for container \"\n           + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is the same as the current resource\");\n       return;\n     }\n     if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n       throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (!increase \u0026\u0026\n         (!Resources.fitsIn(Resources.none(), targetResource)\n             || !Resources.fitsIn(targetResource, currentResource))) {\n       throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is not smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (increase) {\n       org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n           org.apache.hadoop.yarn.api.records.Container.newInstance(\n               containerId, null, null, targetResource, null, null);\n       if (context.getIncreasedContainers().putIfAbsent(containerId,\n           increasedContainer) !\u003d null){\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" resource is being increased.\");\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n         // Persist container resource change for recovery\n         this.context.getNMStateStore().storeContainerResourceChanged(\n-            containerId, targetResource);\n+            containerId, containerVersion, targetResource);\n         getContainersMonitor().handle(\n             new ChangeMonitoringContainerResourceEvent(\n                 containerId, targetResource));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void changeContainerResourceInternal(ContainerId containerId,\n      int containerVersion, Resource targetResource, boolean increase)\n          throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n        nodemanager.containermanager.container.ContainerState.RUNNING) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING state\");\n    }\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    if (currentResource.equals(targetResource)) {\n      LOG.warn(\"Unable to change resource for container \"\n          + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is the same as the current resource\");\n      return;\n    }\n    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (!increase \u0026\u0026\n        (!Resources.fitsIn(Resources.none(), targetResource)\n            || !Resources.fitsIn(targetResource, currentResource))) {\n      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is not smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (increase) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n          org.apache.hadoop.yarn.api.records.Container.newInstance(\n              containerId, null, null, targetResource, null, null);\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Persist container resource change for recovery\n        this.context.getNMStateStore().storeContainerResourceChanged(\n            containerId, containerVersion, targetResource);\n        getContainersMonitor().handle(\n            new ChangeMonitoringContainerResourceEvent(\n                containerId, targetResource));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "c57eac5dfe277845ab4522a1188023a73ee41539": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3868. Recovery support for container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c57eac5dfe277845ab4522a1188023a73ee41539",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,81 @@\n   private void changeContainerResourceInternal(\n       ContainerId containerId, Resource targetResource, boolean increase)\n           throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n         nodemanager.containermanager.container.ContainerState.RUNNING) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n           + \" RUNNING state\");\n     }\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     if (currentResource.equals(targetResource)) {\n       LOG.warn(\"Unable to change resource for container \"\n           + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is the same as the current resource\");\n       return;\n     }\n     if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n       throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (!increase \u0026\u0026\n         (!Resources.fitsIn(Resources.none(), targetResource)\n             || !Resources.fitsIn(targetResource, currentResource))) {\n       throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is not smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (increase) {\n       org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n           org.apache.hadoop.yarn.api.records.Container.newInstance(\n               containerId, null, null, targetResource, null, null);\n       if (context.getIncreasedContainers().putIfAbsent(containerId,\n           increasedContainer) !\u003d null){\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" resource is being increased.\");\n       }\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n+        // Persist container resource change for recovery\n+        this.context.getNMStateStore().storeContainerResourceChanged(\n+            containerId, targetResource);\n         getContainersMonitor().handle(\n             new ChangeMonitoringContainerResourceEvent(\n                 containerId, targetResource));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void changeContainerResourceInternal(\n      ContainerId containerId, Resource targetResource, boolean increase)\n          throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n        nodemanager.containermanager.container.ContainerState.RUNNING) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING state\");\n    }\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    if (currentResource.equals(targetResource)) {\n      LOG.warn(\"Unable to change resource for container \"\n          + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is the same as the current resource\");\n      return;\n    }\n    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (!increase \u0026\u0026\n        (!Resources.fitsIn(Resources.none(), targetResource)\n            || !Resources.fitsIn(targetResource, currentResource))) {\n      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is not smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (increase) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n          org.apache.hadoop.yarn.api.records.Container.newInstance(\n              containerId, null, null, targetResource, null, null);\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        // Persist container resource change for recovery\n        this.context.getNMStateStore().storeContainerResourceChanged(\n            containerId, targetResource);\n        getContainersMonitor().handle(\n            new ChangeMonitoringContainerResourceEvent(\n                containerId, targetResource));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1644. RM-NM protocol changes and NodeStatusUpdater implementation to support container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "5f5a968d65c44a831176764439e00db9203999ed",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,78 @@\n   private void changeContainerResourceInternal(\n       ContainerId containerId, Resource targetResource, boolean increase)\n           throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n         nodemanager.containermanager.container.ContainerState.RUNNING) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n           + \" RUNNING state\");\n     }\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     if (currentResource.equals(targetResource)) {\n       LOG.warn(\"Unable to change resource for container \"\n           + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is the same as the current resource\");\n       return;\n     }\n     if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n       throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (!increase \u0026\u0026\n         (!Resources.fitsIn(Resources.none(), targetResource)\n             || !Resources.fitsIn(targetResource, currentResource))) {\n       throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is not smaller than the current resource \"\n           + currentResource.toString());\n     }\n+    if (increase) {\n+      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n+          org.apache.hadoop.yarn.api.records.Container.newInstance(\n+              containerId, null, null, targetResource, null, null);\n+      if (context.getIncreasedContainers().putIfAbsent(containerId,\n+          increasedContainer) !\u003d null){\n+        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+            + \" resource is being increased.\");\n+      }\n+    }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n         getContainersMonitor().handle(\n             new ChangeMonitoringContainerResourceEvent(\n                 containerId, targetResource));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void changeContainerResourceInternal(\n      ContainerId containerId, Resource targetResource, boolean increase)\n          throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n        nodemanager.containermanager.container.ContainerState.RUNNING) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING state\");\n    }\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    if (currentResource.equals(targetResource)) {\n      LOG.warn(\"Unable to change resource for container \"\n          + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is the same as the current resource\");\n      return;\n    }\n    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (!increase \u0026\u0026\n        (!Resources.fitsIn(Resources.none(), targetResource)\n            || !Resources.fitsIn(targetResource, currentResource))) {\n      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is not smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (increase) {\n      org.apache.hadoop.yarn.api.records.Container increasedContainer \u003d\n          org.apache.hadoop.yarn.api.records.Container.newInstance(\n              containerId, null, null, targetResource, null, null);\n      if (context.getIncreasedContainers().putIfAbsent(containerId,\n          increasedContainer) !\u003d null){\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" resource is being increased.\");\n      }\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        getContainersMonitor().handle(\n            new ChangeMonitoringContainerResourceEvent(\n                containerId, targetResource));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "5f5a968d65c44a831176764439e00db9203999ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3867. ContainerImpl changes to support container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "5f5a968d65c44a831176764439e00db9203999ed",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,68 @@\n   private void changeContainerResourceInternal(\n       ContainerId containerId, Resource targetResource, boolean increase)\n           throws YarnException, IOException {\n     Container container \u003d context.getContainers().get(containerId);\n     // Check container existence\n     if (container \u003d\u003d null) {\n       if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" was recently stopped on node manager.\");\n       } else {\n         throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n             + \" is not handled by this NodeManager\");\n       }\n     }\n     // Check container state\n     org.apache.hadoop.yarn.server.nodemanager.\n         containermanager.container.ContainerState currentState \u003d\n         container.getContainerState();\n     if (currentState !\u003d org.apache.hadoop.yarn.server.\n         nodemanager.containermanager.container.ContainerState.RUNNING) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is in \" + currentState.name() + \" state.\"\n           + \" Resource can only be changed when a container is in\"\n           + \" RUNNING state\");\n     }\n     // Check validity of the target resource.\n     Resource currentResource \u003d container.getResource();\n     if (currentResource.equals(targetResource)) {\n       LOG.warn(\"Unable to change resource for container \"\n           + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is the same as the current resource\");\n       return;\n     }\n     if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n       throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is smaller than the current resource \"\n           + currentResource.toString());\n     }\n     if (!increase \u0026\u0026\n         (!Resources.fitsIn(Resources.none(), targetResource)\n             || !Resources.fitsIn(targetResource, currentResource))) {\n       throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n           + \"container \" + containerId.toString()\n           + \". The target resource \"\n           + targetResource.toString()\n           + \" is not smaller than the current resource \"\n           + currentResource.toString());\n     }\n     this.readLock.lock();\n     try {\n       if (!serviceStopped) {\n-        dispatcher.getEventHandler().handle(new ChangeContainerResourceEvent(\n-            containerId, targetResource));\n+        getContainersMonitor().handle(\n+            new ChangeMonitoringContainerResourceEvent(\n+                containerId, targetResource));\n       } else {\n         throw new YarnException(\n             \"Unable to change container resource as the NodeManager is \"\n                 + \"in the process of shutting down\");\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void changeContainerResourceInternal(\n      ContainerId containerId, Resource targetResource, boolean increase)\n          throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n        nodemanager.containermanager.container.ContainerState.RUNNING) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING state\");\n    }\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    if (currentResource.equals(targetResource)) {\n      LOG.warn(\"Unable to change resource for container \"\n          + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is the same as the current resource\");\n      return;\n    }\n    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (!increase \u0026\u0026\n        (!Resources.fitsIn(Resources.none(), targetResource)\n            || !Resources.fitsIn(targetResource, currentResource))) {\n      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is not smaller than the current resource \"\n          + currentResource.toString());\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        getContainersMonitor().handle(\n            new ChangeMonitoringContainerResourceEvent(\n                containerId, targetResource));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,67 @@\n+  private void changeContainerResourceInternal(\n+      ContainerId containerId, Resource targetResource, boolean increase)\n+          throws YarnException, IOException {\n+    Container container \u003d context.getContainers().get(containerId);\n+    // Check container existence\n+    if (container \u003d\u003d null) {\n+      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n+        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+            + \" was recently stopped on node manager.\");\n+      } else {\n+        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+            + \" is not handled by this NodeManager\");\n+      }\n+    }\n+    // Check container state\n+    org.apache.hadoop.yarn.server.nodemanager.\n+        containermanager.container.ContainerState currentState \u003d\n+        container.getContainerState();\n+    if (currentState !\u003d org.apache.hadoop.yarn.server.\n+        nodemanager.containermanager.container.ContainerState.RUNNING) {\n+      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+          + \" is in \" + currentState.name() + \" state.\"\n+          + \" Resource can only be changed when a container is in\"\n+          + \" RUNNING state\");\n+    }\n+    // Check validity of the target resource.\n+    Resource currentResource \u003d container.getResource();\n+    if (currentResource.equals(targetResource)) {\n+      LOG.warn(\"Unable to change resource for container \"\n+          + containerId.toString()\n+          + \". The target resource \"\n+          + targetResource.toString()\n+          + \" is the same as the current resource\");\n+      return;\n+    }\n+    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n+      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n+          + \"container \" + containerId.toString()\n+          + \". The target resource \"\n+          + targetResource.toString()\n+          + \" is smaller than the current resource \"\n+          + currentResource.toString());\n+    }\n+    if (!increase \u0026\u0026\n+        (!Resources.fitsIn(Resources.none(), targetResource)\n+            || !Resources.fitsIn(targetResource, currentResource))) {\n+      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n+          + \"container \" + containerId.toString()\n+          + \". The target resource \"\n+          + targetResource.toString()\n+          + \" is not smaller than the current resource \"\n+          + currentResource.toString());\n+    }\n+    this.readLock.lock();\n+    try {\n+      if (!serviceStopped) {\n+        dispatcher.getEventHandler().handle(new ChangeContainerResourceEvent(\n+            containerId, targetResource));\n+      } else {\n+        throw new YarnException(\n+            \"Unable to change container resource as the NodeManager is \"\n+                + \"in the process of shutting down\");\n+      }\n+    } finally {\n+      this.readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void changeContainerResourceInternal(\n      ContainerId containerId, Resource targetResource, boolean increase)\n          throws YarnException, IOException {\n    Container container \u003d context.getContainers().get(containerId);\n    // Check container existence\n    if (container \u003d\u003d null) {\n      if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" was recently stopped on node manager.\");\n      } else {\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n            + \" is not handled by this NodeManager\");\n      }\n    }\n    // Check container state\n    org.apache.hadoop.yarn.server.nodemanager.\n        containermanager.container.ContainerState currentState \u003d\n        container.getContainerState();\n    if (currentState !\u003d org.apache.hadoop.yarn.server.\n        nodemanager.containermanager.container.ContainerState.RUNNING) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is in \" + currentState.name() + \" state.\"\n          + \" Resource can only be changed when a container is in\"\n          + \" RUNNING state\");\n    }\n    // Check validity of the target resource.\n    Resource currentResource \u003d container.getResource();\n    if (currentResource.equals(targetResource)) {\n      LOG.warn(\"Unable to change resource for container \"\n          + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is the same as the current resource\");\n      return;\n    }\n    if (increase \u0026\u0026 !Resources.fitsIn(currentResource, targetResource)) {\n      throw RPCUtil.getRemoteException(\"Unable to increase resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is smaller than the current resource \"\n          + currentResource.toString());\n    }\n    if (!increase \u0026\u0026\n        (!Resources.fitsIn(Resources.none(), targetResource)\n            || !Resources.fitsIn(targetResource, currentResource))) {\n      throw RPCUtil.getRemoteException(\"Unable to decrease resource for \"\n          + \"container \" + containerId.toString()\n          + \". The target resource \"\n          + targetResource.toString()\n          + \" is not smaller than the current resource \"\n          + currentResource.toString());\n    }\n    this.readLock.lock();\n    try {\n      if (!serviceStopped) {\n        dispatcher.getEventHandler().handle(new ChangeContainerResourceEvent(\n            containerId, targetResource));\n      } else {\n        throw new YarnException(\n            \"Unable to change container resource as the NodeManager is \"\n                + \"in the process of shutting down\");\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}