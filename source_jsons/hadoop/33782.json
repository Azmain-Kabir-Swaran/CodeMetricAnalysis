{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "runDockerVolumeCommand",
  "functionId": "runDockerVolumeCommand___dockerVolumeCommand-DockerVolumeCommand__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 434,
  "functionEndLine": 459,
  "numCommitsSeen": 91,
  "timeTaken": 3998,
  "changeHistory": [
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5"
  ],
  "changeHistoryShort": {
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ybodychange",
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063": "Ymultichange(Yreturntypechange,Ybodychange)",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
      "commitDate": "02/05/18 11:33 AM",
      "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/04/18 4:12 PM",
      "commitNameOld": "a966ec6e23b3ac8e233b2cf9b9ddaa6628a8c996",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n       Container container) throws ContainerExecutionException {\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(\n-          dockerVolumeCommand, container, nmContext);\n+          dockerVolumeCommand, container.getContainerId(), nmContext);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n           + \", docker volume output for \" + dockerVolumeCommand + \": \"\n           + output);\n       return output;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file, command\u003d\"\n               + dockerVolumeCommand,\n           e);\n       throw e;\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command, command\u003d\"\n           + dockerVolumeCommand, e);\n       throw new ContainerExecutionException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n      Container container) throws ContainerExecutionException {\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(\n          dockerVolumeCommand, container.getContainerId(), nmContext);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n          + \", docker volume output for \" + dockerVolumeCommand + \": \"\n          + output);\n      return output;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file, command\u003d\"\n              + dockerVolumeCommand,\n          e);\n      throw e;\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command, command\u003d\"\n          + dockerVolumeCommand, e);\n      throw new ContainerExecutionException(e);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/04/18 11:24 AM",
      "commitNameOld": "933477e9e0526e2ed81ea454f8806de31981822a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n       Container container) throws ContainerExecutionException {\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(\n-          dockerVolumeCommand, container.getContainerId().toString());\n+          dockerVolumeCommand, container, nmContext);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n           + \", docker volume output for \" + dockerVolumeCommand + \": \"\n           + output);\n       return output;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file, command\u003d\"\n               + dockerVolumeCommand,\n           e);\n       throw e;\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command, command\u003d\"\n           + dockerVolumeCommand, e);\n       throw new ContainerExecutionException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n      Container container) throws ContainerExecutionException {\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(\n          dockerVolumeCommand, container, nmContext);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n          + \", docker volume output for \" + dockerVolumeCommand + \": \"\n          + output);\n      return output;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file, command\u003d\"\n              + dockerVolumeCommand,\n          e);\n      throw e;\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command, command\u003d\"\n          + dockerVolumeCommand, e);\n      throw new ContainerExecutionException(e);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7487. Ensure volume to include GPU base libraries after created by plugin. Contributed by Wangda Tan.\n",
      "commitDate": "01/12/17 12:06 AM",
      "commitName": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7487. Ensure volume to include GPU base libraries after created by plugin. Contributed by Wangda Tan.\n",
          "commitDate": "01/12/17 12:06 AM",
          "commitName": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
          "commitAuthor": "Sunil G",
          "commitDateOld": "22/11/17 10:05 AM",
          "commitNameOld": "d42a336cfab106d052aa30d80d9d30904123cb55",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 8.58,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  private void runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n+  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n       Container container) throws ContainerExecutionException {\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(\n           dockerVolumeCommand, container.getContainerId().toString());\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n           + \", docker volume output for \" + dockerVolumeCommand + \": \"\n           + output);\n+      return output;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file, command\u003d\"\n               + dockerVolumeCommand,\n           e);\n       throw e;\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command, command\u003d\"\n           + dockerVolumeCommand, e);\n       throw new ContainerExecutionException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n      Container container) throws ContainerExecutionException {\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(\n          dockerVolumeCommand, container.getContainerId().toString());\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n          + \", docker volume output for \" + dockerVolumeCommand + \": \"\n          + output);\n      return output;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file, command\u003d\"\n              + dockerVolumeCommand,\n          e);\n      throw e;\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command, command\u003d\"\n          + dockerVolumeCommand, e);\n      throw new ContainerExecutionException(e);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7487. Ensure volume to include GPU base libraries after created by plugin. Contributed by Wangda Tan.\n",
          "commitDate": "01/12/17 12:06 AM",
          "commitName": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
          "commitAuthor": "Sunil G",
          "commitDateOld": "22/11/17 10:05 AM",
          "commitNameOld": "d42a336cfab106d052aa30d80d9d30904123cb55",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 8.58,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  private void runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n+  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n       Container container) throws ContainerExecutionException {\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(\n           dockerVolumeCommand, container.getContainerId().toString());\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n           + \", docker volume output for \" + dockerVolumeCommand + \": \"\n           + output);\n+      return output;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file, command\u003d\"\n               + dockerVolumeCommand,\n           e);\n       throw e;\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command, command\u003d\"\n           + dockerVolumeCommand, e);\n       throw new ContainerExecutionException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n      Container container) throws ContainerExecutionException {\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(\n          dockerVolumeCommand, container.getContainerId().toString());\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n          + \", docker volume output for \" + dockerVolumeCommand + \": \"\n          + output);\n      return output;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file, command\u003d\"\n              + dockerVolumeCommand,\n          e);\n      throw e;\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command, command\u003d\"\n          + dockerVolumeCommand, e);\n      throw new ContainerExecutionException(e);\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,26 @@\n+  private void runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n+      Container container) throws ContainerExecutionException {\n+    try {\n+      String commandFile \u003d dockerClient.writeCommandToTempFile(\n+          dockerVolumeCommand, container.getContainerId().toString());\n+      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n+      privOp.appendArgs(commandFile);\n+      String output \u003d privilegedOperationExecutor\n+          .executePrivilegedOperation(null, privOp, null,\n+              null, true, false);\n+      LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n+          + \", docker volume output for \" + dockerVolumeCommand + \": \"\n+          + output);\n+    } catch (ContainerExecutionException e) {\n+      LOG.error(\"Error when writing command to temp file, command\u003d\"\n+              + dockerVolumeCommand,\n+          e);\n+      throw e;\n+    } catch (PrivilegedOperationException e) {\n+      LOG.error(\"Error when executing command, command\u003d\"\n+          + dockerVolumeCommand, e);\n+      throw new ContainerExecutionException(e);\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,\n      Container container) throws ContainerExecutionException {\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(\n          dockerVolumeCommand, container.getContainerId().toString());\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"ContainerId\u003d\" + container.getContainerId()\n          + \", docker volume output for \" + dockerVolumeCommand + \": \"\n          + output);\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file, command\u003d\"\n              + dockerVolumeCommand,\n          e);\n      throw e;\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command, command\u003d\"\n          + dockerVolumeCommand, e);\n      throw new ContainerExecutionException(e);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}