{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftTestUtils.java",
  "functionName": "compareByteArrays",
  "functionId": "compareByteArrays___src-byte[]__dest-byte[]__len-int",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/util/SwiftTestUtils.java",
  "functionStartLine": 193,
  "functionEndLine": 235,
  "numCommitsSeen": 7,
  "timeTaken": 822,
  "changeHistory": [
    "2e98ad34ce64a9e5184c53447004de20a637f927",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "2e98ad34ce64a9e5184c53447004de20a637f927": "Ybodychange",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e98ad34ce64a9e5184c53447004de20a637f927": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11381. Fix findbugs warnings in hadoop-distcp, hadoop-aws, hadoop-azure, and hadoop-openstack. Contributed by Li Lu.\n",
      "commitDate": "09/12/14 8:45 PM",
      "commitName": "2e98ad34ce64a9e5184c53447004de20a637f927",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/09/13 4:32 AM",
      "commitNameOld": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 438.72,
      "commitsBetweenForRepo": 3371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public static void compareByteArrays(byte[] src,\n                                        byte[] dest,\n                                        int len) {\n     assertEquals(\"Number of bytes read !\u003d number written\",\n                         len, dest.length);\n     int errors \u003d 0;\n     int first_error_byte \u003d -1;\n     for (int i \u003d 0; i \u003c len; i++) {\n       if (src[i] !\u003d dest[i]) {\n         if (errors \u003d\u003d 0) {\n           first_error_byte \u003d i;\n         }\n         errors++;\n       }\n     }\n \n     if (errors \u003e 0) {\n       String message \u003d String.format(\" %d errors in file of length %d\",\n                                      errors, len);\n       LOG.warn(message);\n       // the range either side of the first error to print\n       // this is a purely arbitrary number, to aid user debugging\n       final int overlap \u003d 10;\n       for (int i \u003d Math.max(0, first_error_byte - overlap);\n            i \u003c Math.min(first_error_byte + overlap, len);\n            i++) {\n         byte actual \u003d dest[i];\n         byte expected \u003d src[i];\n         String letter \u003d toChar(actual);\n-        String line \u003d String.format(\"[%04d] %2x %s\\n\", i, actual, letter);\n+        String line \u003d String.format(\"[%04d] %2x %s%n\", i, actual, letter);\n         if (expected !\u003d actual) {\n-          line \u003d String.format(\"[%04d] %2x %s -expected %2x %s\\n\",\n+          line \u003d String.format(\"[%04d] %2x %s -expected %2x %s%n\",\n                                i,\n                                actual,\n                                letter,\n                                expected,\n                                toChar(expected));\n         }\n         LOG.warn(line);\n       }\n       fail(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void compareByteArrays(byte[] src,\n                                       byte[] dest,\n                                       int len) {\n    assertEquals(\"Number of bytes read !\u003d number written\",\n                        len, dest.length);\n    int errors \u003d 0;\n    int first_error_byte \u003d -1;\n    for (int i \u003d 0; i \u003c len; i++) {\n      if (src[i] !\u003d dest[i]) {\n        if (errors \u003d\u003d 0) {\n          first_error_byte \u003d i;\n        }\n        errors++;\n      }\n    }\n\n    if (errors \u003e 0) {\n      String message \u003d String.format(\" %d errors in file of length %d\",\n                                     errors, len);\n      LOG.warn(message);\n      // the range either side of the first error to print\n      // this is a purely arbitrary number, to aid user debugging\n      final int overlap \u003d 10;\n      for (int i \u003d Math.max(0, first_error_byte - overlap);\n           i \u003c Math.min(first_error_byte + overlap, len);\n           i++) {\n        byte actual \u003d dest[i];\n        byte expected \u003d src[i];\n        String letter \u003d toChar(actual);\n        String line \u003d String.format(\"[%04d] %2x %s%n\", i, actual, letter);\n        if (expected !\u003d actual) {\n          line \u003d String.format(\"[%04d] %2x %s -expected %2x %s%n\",\n                               i,\n                               actual,\n                               letter,\n                               expected,\n                               toChar(expected));\n        }\n        LOG.warn(line);\n      }\n      fail(message);\n    }\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/util/SwiftTestUtils.java",
      "extendedDetails": {}
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,43 @@\n+  public static void compareByteArrays(byte[] src,\n+                                       byte[] dest,\n+                                       int len) {\n+    assertEquals(\"Number of bytes read !\u003d number written\",\n+                        len, dest.length);\n+    int errors \u003d 0;\n+    int first_error_byte \u003d -1;\n+    for (int i \u003d 0; i \u003c len; i++) {\n+      if (src[i] !\u003d dest[i]) {\n+        if (errors \u003d\u003d 0) {\n+          first_error_byte \u003d i;\n+        }\n+        errors++;\n+      }\n+    }\n+\n+    if (errors \u003e 0) {\n+      String message \u003d String.format(\" %d errors in file of length %d\",\n+                                     errors, len);\n+      LOG.warn(message);\n+      // the range either side of the first error to print\n+      // this is a purely arbitrary number, to aid user debugging\n+      final int overlap \u003d 10;\n+      for (int i \u003d Math.max(0, first_error_byte - overlap);\n+           i \u003c Math.min(first_error_byte + overlap, len);\n+           i++) {\n+        byte actual \u003d dest[i];\n+        byte expected \u003d src[i];\n+        String letter \u003d toChar(actual);\n+        String line \u003d String.format(\"[%04d] %2x %s\\n\", i, actual, letter);\n+        if (expected !\u003d actual) {\n+          line \u003d String.format(\"[%04d] %2x %s -expected %2x %s\\n\",\n+                               i,\n+                               actual,\n+                               letter,\n+                               expected,\n+                               toChar(expected));\n+        }\n+        LOG.warn(line);\n+      }\n+      fail(message);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void compareByteArrays(byte[] src,\n                                       byte[] dest,\n                                       int len) {\n    assertEquals(\"Number of bytes read !\u003d number written\",\n                        len, dest.length);\n    int errors \u003d 0;\n    int first_error_byte \u003d -1;\n    for (int i \u003d 0; i \u003c len; i++) {\n      if (src[i] !\u003d dest[i]) {\n        if (errors \u003d\u003d 0) {\n          first_error_byte \u003d i;\n        }\n        errors++;\n      }\n    }\n\n    if (errors \u003e 0) {\n      String message \u003d String.format(\" %d errors in file of length %d\",\n                                     errors, len);\n      LOG.warn(message);\n      // the range either side of the first error to print\n      // this is a purely arbitrary number, to aid user debugging\n      final int overlap \u003d 10;\n      for (int i \u003d Math.max(0, first_error_byte - overlap);\n           i \u003c Math.min(first_error_byte + overlap, len);\n           i++) {\n        byte actual \u003d dest[i];\n        byte expected \u003d src[i];\n        String letter \u003d toChar(actual);\n        String line \u003d String.format(\"[%04d] %2x %s\\n\", i, actual, letter);\n        if (expected !\u003d actual) {\n          line \u003d String.format(\"[%04d] %2x %s -expected %2x %s\\n\",\n                               i,\n                               actual,\n                               letter,\n                               expected,\n                               toChar(expected));\n        }\n        LOG.warn(line);\n      }\n      fail(message);\n    }\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/util/SwiftTestUtils.java"
    }
  }
}