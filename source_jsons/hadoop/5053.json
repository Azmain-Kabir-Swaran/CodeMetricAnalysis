{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryWithSnapshotFeature.java",
  "functionName": "destroyDstSubtree",
  "functionId": "destroyDstSubtree___reclaimContext-INode.ReclaimContext__inode-INode__snapshot-int(modifiers-final)__prior-int(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
  "functionStartLine": 389,
  "functionEndLine": 433,
  "numCommitsSeen": 147,
  "timeTaken": 6907,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "4536399d47f6c061e149e2504600804a0f1e093d",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "f2ad787a276902359f964e4b89d8aca8ebb60de8",
    "d46e1608626c64400d2b6c7693a4c035783c55b4",
    "0aab1ef9962314eb7a44140f35eb04c5f847765b",
    "72d783374c1e302492d7ce537222b563241038bb"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ymultichange(Yexceptionschange,Ybodychange)",
    "4536399d47f6c061e149e2504600804a0f1e093d": "Ymultichange(Yparameterchange,Ybodychange)",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Ybodychange)",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ymultichange(Yfilerename,Ybodychange)",
    "f2ad787a276902359f964e4b89d8aca8ebb60de8": "Ybodychange",
    "d46e1608626c64400d2b6c7693a4c035783c55b4": "Ybodychange",
    "0aab1ef9962314eb7a44140f35eb04c5f847765b": "Ybodychange",
    "72d783374c1e302492d7ce537222b563241038bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/03/18 1:35 PM",
      "commitNameOld": "346caa209571dedf1331b2658d5702b45dd40bfe",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.09,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public static void destroyDstSubtree(INode.ReclaimContext reclaimContext,\n       INode inode, final int snapshot, final int prior) {\n     Preconditions.checkArgument(prior !\u003d NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(reclaimContext, snapshot, prior);\n       } else {\n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(reclaimContext,\n             inode.asReference().getReferredINode(), snapshot, prior);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(reclaimContext, snapshot, prior);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n-          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n+          List\u003cINode\u003e dList \u003d priorDiff.diff.getDeletedUnmodifiable();\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(reclaimContext,\n               snapshot, prior, dir);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(reclaimContext, child, snapshot, prior);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void destroyDstSubtree(INode.ReclaimContext reclaimContext,\n      INode inode, final int snapshot, final int prior) {\n    Preconditions.checkArgument(prior !\u003d NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(reclaimContext, snapshot, prior);\n      } else {\n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(reclaimContext,\n            inode.asReference().getReferredINode(), snapshot, prior);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(reclaimContext, snapshot, prior);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getDeletedUnmodifiable();\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(reclaimContext,\n              snapshot, prior, dir);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,45 @@\n-  public static void destroyDstSubtree(\n-      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,\n-      final int prior) throws QuotaExceededException {\n-    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n+  public static void destroyDstSubtree(INode.ReclaimContext reclaimContext,\n+      INode inode, final int snapshot, final int prior) {\n+    Preconditions.checkArgument(prior !\u003d NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(reclaimContext,\n-            snapshot, prior);\n-      } else { \n+        inode.cleanSubtree(reclaimContext, snapshot, prior);\n+      } else {\n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(reclaimContext,\n-                          inode.asReference().getReferredINode(), snapshot,\n-                          prior);\n+            inode.asReference().getReferredINode(), snapshot, prior);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(reclaimContext, snapshot, prior);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(reclaimContext,\n               snapshot, prior, dir);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(reclaimContext, child, snapshot, prior);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(INode.ReclaimContext reclaimContext,\n      INode inode, final int snapshot, final int prior) {\n    Preconditions.checkArgument(prior !\u003d NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(reclaimContext, snapshot, prior);\n      } else {\n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(reclaimContext,\n            inode.asReference().getReferredINode(), snapshot, prior);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(reclaimContext, snapshot, prior);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(reclaimContext,\n              snapshot, prior, dir);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,45 @@\n-  public static void destroyDstSubtree(\n-      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,\n-      final int prior) throws QuotaExceededException {\n-    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n+  public static void destroyDstSubtree(INode.ReclaimContext reclaimContext,\n+      INode inode, final int snapshot, final int prior) {\n+    Preconditions.checkArgument(prior !\u003d NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(reclaimContext,\n-            snapshot, prior);\n-      } else { \n+        inode.cleanSubtree(reclaimContext, snapshot, prior);\n+      } else {\n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(reclaimContext,\n-                          inode.asReference().getReferredINode(), snapshot,\n-                          prior);\n+            inode.asReference().getReferredINode(), snapshot, prior);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(reclaimContext, snapshot, prior);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(reclaimContext,\n               snapshot, prior, dir);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(reclaimContext, child, snapshot, prior);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(INode.ReclaimContext reclaimContext,\n      INode inode, final int snapshot, final int prior) {\n    Preconditions.checkArgument(prior !\u003d NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(reclaimContext, snapshot, prior);\n      } else {\n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(reclaimContext,\n            inode.asReference().getReferredINode(), snapshot, prior);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(reclaimContext, snapshot, prior);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(reclaimContext,\n              snapshot, prior, dir);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "4536399d47f6c061e149e2504600804a0f1e093d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
      "commitDate": "09/05/15 10:51 PM",
      "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,48 @@\n   public static void destroyDstSubtree(\n-      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n-      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) throws QuotaExceededException {\n+      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,\n+      final int prior) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n-                           removedUCFiles);\n+        inode.cleanSubtree(reclaimContext,\n+            snapshot, prior);\n       } else { \n         // for DstReference node, continue this process to its subtree\n-        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n-            prior, collectedBlocks, removedINodes, removedUCFiles);\n+        destroyDstSubtree(reclaimContext,\n+                          inode.asReference().getReferredINode(), snapshot,\n+                          prior);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n-                         removedUCFiles);\n+      inode.cleanSubtree(reclaimContext, snapshot, prior);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n-          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n-              removedINodes);\n+          diffList.deleteSnapshotDiff(reclaimContext,\n+              snapshot, prior, dir);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n-          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n-              removedINodes, removedUCFiles);\n+          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n-        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n-            removedINodes, removedUCFiles);\n+        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(\n      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,\n      final int prior) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(reclaimContext,\n            snapshot, prior);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(reclaimContext,\n                          inode.asReference().getReferredINode(), snapshot,\n                          prior);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(reclaimContext, snapshot, prior);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(reclaimContext,\n              snapshot, prior, dir);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e]",
            "newValue": "[reclaimContext-INode.ReclaimContext, inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,48 @@\n   public static void destroyDstSubtree(\n-      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n-      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) throws QuotaExceededException {\n+      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,\n+      final int prior) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n-                           removedUCFiles);\n+        inode.cleanSubtree(reclaimContext,\n+            snapshot, prior);\n       } else { \n         // for DstReference node, continue this process to its subtree\n-        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n-            prior, collectedBlocks, removedINodes, removedUCFiles);\n+        destroyDstSubtree(reclaimContext,\n+                          inode.asReference().getReferredINode(), snapshot,\n+                          prior);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n-                         removedUCFiles);\n+      inode.cleanSubtree(reclaimContext, snapshot, prior);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n-          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n-              removedINodes);\n+          diffList.deleteSnapshotDiff(reclaimContext,\n+              snapshot, prior, dir);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n-          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n-              removedINodes, removedUCFiles);\n+          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n-        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n-            removedINodes, removedUCFiles);\n+        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(\n      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,\n      final int prior) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(reclaimContext,\n            snapshot, prior);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(reclaimContext,\n                          inode.asReference().getReferredINode(), snapshot,\n                          prior);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(reclaimContext, snapshot, prior);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(reclaimContext,\n              snapshot, prior, dir);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(reclaimContext, dir);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(reclaimContext, child, snapshot, prior);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
      "commitDate": "08/05/15 11:04 PM",
      "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/04/15 9:20 PM",
          "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 36.07,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,51 @@\n   public static void destroyDstSubtree(\n       final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n       final int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n+        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n+                           removedUCFiles);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n-            prior, collectedBlocks, removedINodes);\n+            prior, collectedBlocks, removedINodes, removedUCFiles);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n+      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n+                         removedUCFiles);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n               removedINodes);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n-              removedINodes);\n+              removedINodes, removedUCFiles);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n-            removedINodes);\n+            removedINodes, removedUCFiles);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(\n      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n                           removedUCFiles);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes, removedUCFiles);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n                         removedUCFiles);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n              removedINodes);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n              removedINodes, removedUCFiles);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n            removedINodes, removedUCFiles);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/04/15 9:20 PM",
          "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 36.07,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,51 @@\n   public static void destroyDstSubtree(\n       final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n       final int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n+        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n+                           removedUCFiles);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n-            prior, collectedBlocks, removedINodes);\n+            prior, collectedBlocks, removedINodes, removedUCFiles);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n+      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n+                         removedUCFiles);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n               removedINodes);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n-              removedINodes);\n+              removedINodes, removedUCFiles);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n-            removedINodes);\n+            removedINodes, removedUCFiles);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(\n      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n                           removedUCFiles);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes, removedUCFiles);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,\n                         removedUCFiles);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n              removedINodes);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n              removedINodes, removedUCFiles);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n            removedINodes, removedUCFiles);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,49 @@\n-  public static void destroyDstSubtree(INode inode, final int snapshot,\n+  public static void destroyDstSubtree(\n+      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n       final int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n       } else { \n         // for DstReference node, continue this process to its subtree\n-        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n+        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n-          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n+          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n               removedINodes);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n-          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n+          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n-        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n+        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(\n      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n              removedINodes);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,49 @@\n-  public static void destroyDstSubtree(INode inode, final int snapshot,\n+  public static void destroyDstSubtree(\n+      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n       final int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n       } else { \n         // for DstReference node, continue this process to its subtree\n-        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n+        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n-          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n+          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n               removedINodes);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n-          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n+          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n-        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n+        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(\n      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,\n              removedINodes);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/12/14 11:05 PM",
      "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 41.73,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   public static void destroyDstSubtree(INode inode, final int snapshot,\n       final int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName\n           \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n-            true);\n+        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n-      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n+      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n-              removedINodes, true);\n+              removedINodes);\n         }\n         priorDiff \u003d diffList.getDiffById(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void destroyDstSubtree(INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n              removedINodes);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,49 @@\n-  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n-      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+  public static void destroyDstSubtree(INode inode, final int snapshot,\n+      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n-    Preconditions.checkArgument(prior !\u003d null);\n+    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n-      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n+      if (inode instanceof INodeReference.WithName\n+          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n             true);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n-        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n-        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n+        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n-        if (snapshot !\u003d null) {\n+        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n               removedINodes, true);\n         }\n-        priorDiff \u003d diffList.getDiff(prior);\n-        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+        priorDiff \u003d diffList.getDiffById(prior);\n+        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n            true);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n              removedINodes, true);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, snapshot-Snapshot(modifiers-final), prior-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[inode-INode, snapshot-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,49 @@\n-  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n-      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+  public static void destroyDstSubtree(INode inode, final int snapshot,\n+      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n-    Preconditions.checkArgument(prior !\u003d null);\n+    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n     if (inode.isReference()) {\n-      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n+      if (inode instanceof INodeReference.WithName\n+          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n             true);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       INodeDirectory dir \u003d inode.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         DirectoryDiffList diffList \u003d sf.getDiffs();\n-        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n-        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n+        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n-        if (snapshot !\u003d null) {\n+        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n           diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n               removedINodes, true);\n         }\n-        priorDiff \u003d diffList.getDiff(prior);\n-        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+        priorDiff \u003d diffList.getDiffById(prior);\n+        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n           priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(INode inode, final int snapshot,\n      final int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName\n          \u0026\u0026 snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n            true);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d Snapshot.CURRENT_STATE_ID) {\n          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n              removedINodes, true);\n        }\n        priorDiff \u003d diffList.getDiffById(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n       final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d null);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n             true);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n-      if (inode instanceof INodeDirectoryWithSnapshot) {\n-        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n-        \n-        DirectoryDiffList diffList \u003d sdir.getDiffs();\n+      INodeDirectory dir \u003d inode.asDirectory();\n+      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n+      if (sf !\u003d null) {\n+        DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d null) {\n-          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n+          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n               removedINodes, true);\n         }\n         priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n-          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n+          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d null);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n            true);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d null) {\n          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n              removedINodes, true);\n        }\n        priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n       final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d null);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n             true);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile()) {\n       inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n-      if (inode instanceof INodeDirectoryWithSnapshot) {\n-        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n-        \n-        DirectoryDiffList diffList \u003d sdir.getDiffs();\n+      INodeDirectory dir \u003d inode.asDirectory();\n+      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n+      if (sf !\u003d null) {\n+        DirectoryDiffList diffList \u003d sf.getDiffs();\n         DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n           List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n           excludedNodes \u003d cloneDiffList(dList);\n         }\n         \n         if (snapshot !\u003d null) {\n-          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n+          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n               removedINodes, true);\n         }\n         priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n-          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n+          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d null);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n            true);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      INodeDirectory dir \u003d inode.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        DirectoryDiffList diffList \u003d sf.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d null) {\n          diffList.deleteSnapshotDiff(snapshot, prior, dir, collectedBlocks,\n              removedINodes, true);\n        }\n        priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          priorDiff.diff.destroyCreatedList(dir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2ad787a276902359f964e4b89d8aca8ebb60de8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5476. Snapshot: clean the blocks/files/directories under a renamed file/directory while deletion. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540142 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/13 10:18 AM",
      "commitName": "f2ad787a276902359f964e4b89d8aca8ebb60de8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "19/06/13 10:10 PM",
      "commitNameOld": "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 141.55,
      "commitsBetweenForRepo": 836,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n       final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d null);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n             true);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n-    } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n+    } else if (inode.isFile()) {\n       inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n     } else if (inode.isDirectory()) {\n       Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       if (inode instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n+        \n         DirectoryDiffList diffList \u003d sdir.getDiffs();\n+        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n+        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n+          excludedNodes \u003d cloneDiffList(dList);\n+        }\n+        \n         if (snapshot !\u003d null) {\n           diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n               removedINodes, true);\n         }\n-        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n+        priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n           priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n               removedINodes);\n-          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n-          excludedNodes \u003d new HashMap\u003cINode, INode\u003e(dList.size());\n-          for (INode dNode : dList) {\n-            excludedNodes.put(dNode, dNode);\n-          }\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n           continue;\n         }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d null);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n            true);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile()) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      if (inode instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n        \n        DirectoryDiffList diffList \u003d sdir.getDiffs();\n        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d cloneDiffList(dList);\n        }\n        \n        if (snapshot !\u003d null) {\n          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n              removedINodes, true);\n        }\n        priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "d46e1608626c64400d2b6c7693a4c035783c55b4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 1:15 PM",
      "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/05/13 5:23 PM",
      "commitNameOld": "59801391400f3fa0ed1f029b7af75627d3288f22",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 28.83,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,46 @@\n   public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n       final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d null);\n     if (inode.isReference()) {\n       if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n-        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n+            true);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n-      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n     } else if (inode.isDirectory()) {\n+      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n       if (inode instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n         DirectoryDiffList diffList \u003d sdir.getDiffs();\n         if (snapshot !\u003d null) {\n           diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n-              removedINodes);\n+              removedINodes, true);\n         }\n         DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n           priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n               removedINodes);\n+          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n+          excludedNodes \u003d new HashMap\u003cINode, INode\u003e(dList.size());\n+          for (INode dNode : dList) {\n+            excludedNodes.put(dNode, dNode);\n+          }\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n+        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n+          continue;\n+        }\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d null);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes,\n            true);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes, true);\n    } else if (inode.isDirectory()) {\n      Map\u003cINode, INode\u003e excludedNodes \u003d null;\n      if (inode instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n        DirectoryDiffList diffList \u003d sdir.getDiffs();\n        if (snapshot !\u003d null) {\n          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n              removedINodes, true);\n        }\n        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n              removedINodes);\n          List\u003cINode\u003e dList \u003d priorDiff.diff.getList(ListType.DELETED);\n          excludedNodes \u003d new HashMap\u003cINode, INode\u003e(dList.size());\n          for (INode dNode : dList) {\n            excludedNodes.put(dNode, dNode);\n          }\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        if (excludedNodes !\u003d null \u0026\u0026 excludedNodes.containsKey(child)) {\n          continue;\n        }\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "0aab1ef9962314eb7a44140f35eb04c5f847765b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4800. Fix INodeDirectoryWithSnapshot#cleanDeletedINode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/13 3:45 PM",
      "commitName": "0aab1ef9962314eb7a44140f35eb04c5f847765b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/05/13 11:48 AM",
      "commitNameOld": "424b270c94297b00a850e7a821163b9802edc7ae",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n       final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Preconditions.checkArgument(prior !\u003d null);\n     if (inode.isReference()) {\n-      if (inode instanceof INodeReference.WithName) {\n+      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n         // this inode has been renamed before the deletion of the DstReference\n         // subtree\n         inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n       } else { \n         // for DstReference node, continue this process to its subtree\n         destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n             prior, collectedBlocks, removedINodes);\n       }\n     } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n       inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n     } else if (inode.isDirectory()) {\n       if (inode instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n         DirectoryDiffList diffList \u003d sdir.getDiffs();\n         if (snapshot !\u003d null) {\n           diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n               removedINodes);\n         }\n         DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n         if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n           priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n               removedINodes);\n         }\n       }\n       for (INode child : inode.asDirectory().getChildrenList(prior)) {\n         destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n             removedINodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d null);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName \u0026\u0026 snapshot !\u003d null) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n    } else if (inode.isDirectory()) {\n      if (inode instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n        DirectoryDiffList diffList \u003d sdir.getDiffs();\n        if (snapshot !\u003d null) {\n          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n              removedINodes);\n        }\n        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "72d783374c1e302492d7ce537222b563241038bb": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 3:10 PM",
      "commitName": "72d783374c1e302492d7ce537222b563241038bb",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,36 @@\n+  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n+      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+    Preconditions.checkArgument(prior !\u003d null);\n+    if (inode.isReference()) {\n+      if (inode instanceof INodeReference.WithName) {\n+        // this inode has been renamed before the deletion of the DstReference\n+        // subtree\n+        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+      } else { \n+        // for DstReference node, continue this process to its subtree\n+        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n+            prior, collectedBlocks, removedINodes);\n+      }\n+    } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n+      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n+    } else if (inode.isDirectory()) {\n+      if (inode instanceof INodeDirectoryWithSnapshot) {\n+        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n+        DirectoryDiffList diffList \u003d sdir.getDiffs();\n+        if (snapshot !\u003d null) {\n+          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n+              removedINodes);\n+        }\n+        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n+        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n+              removedINodes);\n+        }\n+      }\n+      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n+        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n+            removedINodes);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void destroyDstSubtree(INode inode, final Snapshot snapshot,\n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Preconditions.checkArgument(prior !\u003d null);\n    if (inode.isReference()) {\n      if (inode instanceof INodeReference.WithName) {\n        // this inode has been renamed before the deletion of the DstReference\n        // subtree\n        inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n      } else { \n        // for DstReference node, continue this process to its subtree\n        destroyDstSubtree(inode.asReference().getReferredINode(), snapshot,\n            prior, collectedBlocks, removedINodes);\n      }\n    } else if (inode.isFile() \u0026\u0026 snapshot !\u003d null) {\n      inode.cleanSubtree(snapshot, prior, collectedBlocks, removedINodes);\n    } else if (inode.isDirectory()) {\n      if (inode instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) inode;\n        DirectoryDiffList diffList \u003d sdir.getDiffs();\n        if (snapshot !\u003d null) {\n          diffList.deleteSnapshotDiff(snapshot, prior, sdir, collectedBlocks,\n              removedINodes);\n        }\n        DirectoryDiff priorDiff \u003d diffList.getDiff(prior);\n        if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n          priorDiff.diff.destroyCreatedList(sdir, collectedBlocks,\n              removedINodes);\n        }\n      }\n      for (INode child : inode.asDirectory().getChildrenList(prior)) {\n        destroyDstSubtree(child, snapshot, prior, collectedBlocks,\n            removedINodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}