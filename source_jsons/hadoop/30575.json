{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyValueBasedTimelineStore.java",
  "functionName": "getDomains",
  "functionId": "getDomains___owner-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
  "functionStartLine": 283,
  "functionEndLine": 323,
  "numCommitsSeen": 12,
  "timeTaken": 2205,
  "changeHistory": [
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
    "e4b4901d36875faa98ec8628e22e75499e0741ab",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": "Ymultichange(Ymovefromfile,Ybodychange)",
    "e4b4901d36875faa98ec8628e22e75499e0741ab": "Ybodychange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
      "commitDate": "28/01/16 2:24 PM",
      "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,41 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n+    if (getServiceStopped()) {\n+      LOG.info(\"Service stopped, return null for the storage\");\n+      return null;\n+    }\n     List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n     Set\u003cTimelineDomain\u003e domainsOfOneOwner \u003d domainsByOwner.get(owner);\n     if (domainsOfOneOwner \u003d\u003d null) {\n       return new TimelineDomains();\n     }\n     for (TimelineDomain domain : domainsByOwner.get(owner)) {\n-      TimelineDomain domainToReturn \u003d createTimelineDomain(\n-          domain.getId(),\n-          domain.getDescription(),\n-          domain.getOwner(),\n-          domain.getReaders(),\n-          domain.getWriters(),\n-          domain.getCreatedTime(),\n-          domain.getModifiedTime());\n+      TimelineDomain domainToReturn \u003d KeyValueBasedTimelineStoreUtils\n+          .createTimelineDomain(\n+              domain.getId(),\n+              domain.getDescription(),\n+              domain.getOwner(),\n+              domain.getReaders(),\n+              domain.getWriters(),\n+              domain.getCreatedTime(),\n+              domain.getModifiedTime());\n       domains.add(domainToReturn);\n     }\n     Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n       @Override\n       public int compare(\n           TimelineDomain domain1, TimelineDomain domain2) {\n          int result \u003d domain2.getCreatedTime().compareTo(\n              domain1.getCreatedTime());\n          if (result \u003d\u003d 0) {\n            return domain2.getModifiedTime().compareTo(\n                domain1.getModifiedTime());\n          } else {\n            return result;\n          }\n       }\n     });\n     TimelineDomains domainsToReturn \u003d new TimelineDomains();\n     domainsToReturn.addDomains(domains);\n     return domainsToReturn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n    Set\u003cTimelineDomain\u003e domainsOfOneOwner \u003d domainsByOwner.get(owner);\n    if (domainsOfOneOwner \u003d\u003d null) {\n      return new TimelineDomains();\n    }\n    for (TimelineDomain domain : domainsByOwner.get(owner)) {\n      TimelineDomain domainToReturn \u003d KeyValueBasedTimelineStoreUtils\n          .createTimelineDomain(\n              domain.getId(),\n              domain.getDescription(),\n              domain.getOwner(),\n              domain.getReaders(),\n              domain.getWriters(),\n              domain.getCreatedTime(),\n              domain.getModifiedTime());\n      domains.add(domainToReturn);\n    }\n    Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n      @Override\n      public int compare(\n          TimelineDomain domain1, TimelineDomain domain2) {\n         int result \u003d domain2.getCreatedTime().compareTo(\n             domain1.getCreatedTime());\n         if (result \u003d\u003d 0) {\n           return domain2.getModifiedTime().compareTo(\n               domain1.getModifiedTime());\n         } else {\n           return result;\n         }\n      }\n    });\n    TimelineDomains domainsToReturn \u003d new TimelineDomains();\n    domainsToReturn.addDomains(domains);\n    return domainsToReturn;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
            "oldMethodName": "getDomains",
            "newMethodName": "getDomains"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,41 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n+    if (getServiceStopped()) {\n+      LOG.info(\"Service stopped, return null for the storage\");\n+      return null;\n+    }\n     List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n     Set\u003cTimelineDomain\u003e domainsOfOneOwner \u003d domainsByOwner.get(owner);\n     if (domainsOfOneOwner \u003d\u003d null) {\n       return new TimelineDomains();\n     }\n     for (TimelineDomain domain : domainsByOwner.get(owner)) {\n-      TimelineDomain domainToReturn \u003d createTimelineDomain(\n-          domain.getId(),\n-          domain.getDescription(),\n-          domain.getOwner(),\n-          domain.getReaders(),\n-          domain.getWriters(),\n-          domain.getCreatedTime(),\n-          domain.getModifiedTime());\n+      TimelineDomain domainToReturn \u003d KeyValueBasedTimelineStoreUtils\n+          .createTimelineDomain(\n+              domain.getId(),\n+              domain.getDescription(),\n+              domain.getOwner(),\n+              domain.getReaders(),\n+              domain.getWriters(),\n+              domain.getCreatedTime(),\n+              domain.getModifiedTime());\n       domains.add(domainToReturn);\n     }\n     Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n       @Override\n       public int compare(\n           TimelineDomain domain1, TimelineDomain domain2) {\n          int result \u003d domain2.getCreatedTime().compareTo(\n              domain1.getCreatedTime());\n          if (result \u003d\u003d 0) {\n            return domain2.getModifiedTime().compareTo(\n                domain1.getModifiedTime());\n          } else {\n            return result;\n          }\n       }\n     });\n     TimelineDomains domainsToReturn \u003d new TimelineDomains();\n     domainsToReturn.addDomains(domains);\n     return domainsToReturn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n    Set\u003cTimelineDomain\u003e domainsOfOneOwner \u003d domainsByOwner.get(owner);\n    if (domainsOfOneOwner \u003d\u003d null) {\n      return new TimelineDomains();\n    }\n    for (TimelineDomain domain : domainsByOwner.get(owner)) {\n      TimelineDomain domainToReturn \u003d KeyValueBasedTimelineStoreUtils\n          .createTimelineDomain(\n              domain.getId(),\n              domain.getDescription(),\n              domain.getOwner(),\n              domain.getReaders(),\n              domain.getWriters(),\n              domain.getCreatedTime(),\n              domain.getModifiedTime());\n      domains.add(domainToReturn);\n    }\n    Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n      @Override\n      public int compare(\n          TimelineDomain domain1, TimelineDomain domain2) {\n         int result \u003d domain2.getCreatedTime().compareTo(\n             domain1.getCreatedTime());\n         if (result \u003d\u003d 0) {\n           return domain2.getModifiedTime().compareTo(\n               domain1.getModifiedTime());\n         } else {\n           return result;\n         }\n      }\n    });\n    TimelineDomains domainsToReturn \u003d new TimelineDomains();\n    domainsToReturn.addDomains(domains);\n    return domainsToReturn;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "e4b4901d36875faa98ec8628e22e75499e0741ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2813. Fixed NPE from MemoryTimelineStore.getDomains. Contributed by Zhijie Shen\n",
      "commitDate": "05/11/14 6:24 PM",
      "commitName": "e4b4901d36875faa98ec8628e22e75499e0741ab",
      "commitAuthor": "Xuan",
      "commitDateOld": "01/10/14 5:52 PM",
      "commitNameOld": "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   public TimelineDomains getDomains(String owner)\n       throws IOException {\n     List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n+    Set\u003cTimelineDomain\u003e domainsOfOneOwner \u003d domainsByOwner.get(owner);\n+    if (domainsOfOneOwner \u003d\u003d null) {\n+      return new TimelineDomains();\n+    }\n     for (TimelineDomain domain : domainsByOwner.get(owner)) {\n       TimelineDomain domainToReturn \u003d createTimelineDomain(\n           domain.getId(),\n           domain.getDescription(),\n           domain.getOwner(),\n           domain.getReaders(),\n           domain.getWriters(),\n           domain.getCreatedTime(),\n           domain.getModifiedTime());\n       domains.add(domainToReturn);\n     }\n     Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n       @Override\n       public int compare(\n           TimelineDomain domain1, TimelineDomain domain2) {\n          int result \u003d domain2.getCreatedTime().compareTo(\n              domain1.getCreatedTime());\n          if (result \u003d\u003d 0) {\n            return domain2.getModifiedTime().compareTo(\n                domain1.getModifiedTime());\n          } else {\n            return result;\n          }\n       }\n     });\n     TimelineDomains domainsToReturn \u003d new TimelineDomains();\n     domainsToReturn.addDomains(domains);\n     return domainsToReturn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n    Set\u003cTimelineDomain\u003e domainsOfOneOwner \u003d domainsByOwner.get(owner);\n    if (domainsOfOneOwner \u003d\u003d null) {\n      return new TimelineDomains();\n    }\n    for (TimelineDomain domain : domainsByOwner.get(owner)) {\n      TimelineDomain domainToReturn \u003d createTimelineDomain(\n          domain.getId(),\n          domain.getDescription(),\n          domain.getOwner(),\n          domain.getReaders(),\n          domain.getWriters(),\n          domain.getCreatedTime(),\n          domain.getModifiedTime());\n      domains.add(domainToReturn);\n    }\n    Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n      @Override\n      public int compare(\n          TimelineDomain domain1, TimelineDomain domain2) {\n         int result \u003d domain2.getCreatedTime().compareTo(\n             domain1.getCreatedTime());\n         if (result \u003d\u003d 0) {\n           return domain2.getModifiedTime().compareTo(\n               domain1.getModifiedTime());\n         } else {\n           return result;\n         }\n      }\n    });\n    TimelineDomains domainsToReturn \u003d new TimelineDomains();\n    domainsToReturn.addDomains(domains);\n    return domainsToReturn;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
      "extendedDetails": {}
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,32 @@\n+  public TimelineDomains getDomains(String owner)\n+      throws IOException {\n+    List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n+    for (TimelineDomain domain : domainsByOwner.get(owner)) {\n+      TimelineDomain domainToReturn \u003d createTimelineDomain(\n+          domain.getId(),\n+          domain.getDescription(),\n+          domain.getOwner(),\n+          domain.getReaders(),\n+          domain.getWriters(),\n+          domain.getCreatedTime(),\n+          domain.getModifiedTime());\n+      domains.add(domainToReturn);\n+    }\n+    Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n+      @Override\n+      public int compare(\n+          TimelineDomain domain1, TimelineDomain domain2) {\n+         int result \u003d domain2.getCreatedTime().compareTo(\n+             domain1.getCreatedTime());\n+         if (result \u003d\u003d 0) {\n+           return domain2.getModifiedTime().compareTo(\n+               domain1.getModifiedTime());\n+         } else {\n+           return result;\n+         }\n+      }\n+    });\n+    TimelineDomains domainsToReturn \u003d new TimelineDomains();\n+    domainsToReturn.addDomains(domains);\n+    return domainsToReturn;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner)\n      throws IOException {\n    List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n    for (TimelineDomain domain : domainsByOwner.get(owner)) {\n      TimelineDomain domainToReturn \u003d createTimelineDomain(\n          domain.getId(),\n          domain.getDescription(),\n          domain.getOwner(),\n          domain.getReaders(),\n          domain.getWriters(),\n          domain.getCreatedTime(),\n          domain.getModifiedTime());\n      domains.add(domainToReturn);\n    }\n    Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n      @Override\n      public int compare(\n          TimelineDomain domain1, TimelineDomain domain2) {\n         int result \u003d domain2.getCreatedTime().compareTo(\n             domain1.getCreatedTime());\n         if (result \u003d\u003d 0) {\n           return domain2.getModifiedTime().compareTo(\n               domain1.getModifiedTime());\n         } else {\n           return result;\n         }\n      }\n    });\n    TimelineDomains domainsToReturn \u003d new TimelineDomains();\n    domainsToReturn.addDomains(domains);\n    return domainsToReturn;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java"
    }
  }
}