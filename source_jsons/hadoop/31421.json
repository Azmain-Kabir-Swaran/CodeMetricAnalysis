{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HBaseTimelineWriterImpl.java",
  "functionName": "write",
  "functionId": "write___context-TimelineCollectorContext__data-TimelineEntities__callerUgi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
  "functionStartLine": 168,
  "functionEndLine": 247,
  "numCommitsSeen": 43,
  "timeTaken": 6870,
  "changeHistory": [
    "b220ec6f613dca4542e256008b1be2689c67bb03",
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "9f6540535d9148abbea836d54a9e94d25319c5d5",
    "71847ed44dc5a1ef702eaf234150a2ff69c15341",
    "05ff04439e2edeef0460bc9e21034535b8b6eb9e",
    "e72e6260da19ccc44d53280e27575cc94bf11300",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "831a3ffd6ef49214b08cb30329494418703be0f9",
    "d56dde490bea7dca4fcd589afd9b41a21dd9b4b1",
    "b51d0fef56a59b15489f5b932025718b4e9613d2",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60",
    "00e85e7a2b9446dc37265feba07473b156d66367",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65",
    "92d90c3a243134177f192d1d473dd606c79a91fc",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875"
  ],
  "changeHistoryShort": {
    "b220ec6f613dca4542e256008b1be2689c67bb03": "Ybodychange",
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc": "Ybodychange",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "9f6540535d9148abbea836d54a9e94d25319c5d5": "Ymultichange(Yparameterchange,Ybodychange)",
    "71847ed44dc5a1ef702eaf234150a2ff69c15341": "Ybodychange",
    "05ff04439e2edeef0460bc9e21034535b8b6eb9e": "Ybodychange",
    "e72e6260da19ccc44d53280e27575cc94bf11300": "Ybodychange",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "831a3ffd6ef49214b08cb30329494418703be0f9": "Ybodychange",
    "d56dde490bea7dca4fcd589afd9b41a21dd9b4b1": "Ybodychange",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Ybodychange",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": "Ybodychange",
    "00e85e7a2b9446dc37265feba07473b156d66367": "Ybodychange",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": "Ybodychange",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Ybodychange",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b220ec6f613dca4542e256008b1be2689c67bb03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9374.  Improve Timeline service resilience when HBase is unavailable.\n            Contributed by Prabhu Joseph and Szilard Nemeth\n",
      "commitDate": "24/06/19 9:19 AM",
      "commitName": "b220ec6f613dca4542e256008b1be2689c67bb03",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/05/18 1:00 PM",
      "commitNameOld": "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 403.85,
      "commitsBetweenForRepo": 3022,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public TimelineWriteResponse write(TimelineCollectorContext context,\n       TimelineEntities data, UserGroupInformation callerUgi)\n       throws IOException {\n-\n+    storageMonitor.checkStorageIsUp();\n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n \n     String clusterId \u003d context.getClusterId();\n     String userId \u003d context.getUserId();\n     String flowName \u003d context.getFlowName();\n     String flowVersion \u003d context.getFlowVersion();\n     long flowRunId \u003d context.getFlowRunId();\n     String appId \u003d context.getAppId();\n     String subApplicationUser \u003d callerUgi.getShortUserName();\n \n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n         store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                 te.getType(), te.getIdPrefix(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n         store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n       }\n \n       if (!isApplication \u0026\u0026 SubApplicationEntity.isSubApplicationEntity(te)) {\n         SubApplicationRowKey subApplicationRowKey \u003d\n             new SubApplicationRowKey(subApplicationUser, clusterId,\n                 te.getType(), te.getIdPrefix(), te.getId(), userId);\n         rowKey \u003d subApplicationRowKey.getRowKey();\n         store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n       }\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n             ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n           onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineEntities data, UserGroupInformation callerUgi)\n      throws IOException {\n    storageMonitor.checkStorageIsUp();\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String userId \u003d context.getUserId();\n    String flowName \u003d context.getFlowName();\n    String flowVersion \u003d context.getFlowVersion();\n    long flowRunId \u003d context.getFlowRunId();\n    String appId \u003d context.getAppId();\n    String subApplicationUser \u003d callerUgi.getShortUserName();\n\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n      }\n\n      if (!isApplication \u0026\u0026 SubApplicationEntity.isSubApplicationEntity(te)) {\n        SubApplicationRowKey subApplicationRowKey \u003d\n            new SubApplicationRowKey(subApplicationUser, clusterId,\n                te.getType(), te.getIdPrefix(), te.getId(), userId);\n        rowKey \u003d subApplicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n      }\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "05/04/18 10:23 AM",
      "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/02/18 7:00 AM",
      "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 47.1,
      "commitsBetweenForRepo": 432,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public TimelineWriteResponse write(TimelineCollectorContext context,\n       TimelineEntities data, UserGroupInformation callerUgi)\n       throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n \n     String clusterId \u003d context.getClusterId();\n     String userId \u003d context.getUserId();\n     String flowName \u003d context.getFlowName();\n     String flowVersion \u003d context.getFlowVersion();\n     long flowRunId \u003d context.getFlowRunId();\n     String appId \u003d context.getAppId();\n     String subApplicationUser \u003d callerUgi.getShortUserName();\n \n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n         store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                 te.getType(), te.getIdPrefix(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n         store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n       }\n \n-      if (!isApplication \u0026\u0026 !userId.equals(subApplicationUser)) {\n+      if (!isApplication \u0026\u0026 SubApplicationEntity.isSubApplicationEntity(te)) {\n         SubApplicationRowKey subApplicationRowKey \u003d\n             new SubApplicationRowKey(subApplicationUser, clusterId,\n                 te.getType(), te.getIdPrefix(), te.getId(), userId);\n         rowKey \u003d subApplicationRowKey.getRowKey();\n         store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n       }\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n             ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n           onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineEntities data, UserGroupInformation callerUgi)\n      throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String userId \u003d context.getUserId();\n    String flowName \u003d context.getFlowName();\n    String flowVersion \u003d context.getFlowVersion();\n    long flowRunId \u003d context.getFlowRunId();\n    String appId \u003d context.getAppId();\n    String subApplicationUser \u003d callerUgi.getShortUserName();\n\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n      }\n\n      if (!isApplication \u0026\u0026 SubApplicationEntity.isSubApplicationEntity(te)) {\n        SubApplicationRowKey subApplicationRowKey \u003d\n            new SubApplicationRowKey(subApplicationUser, clusterId,\n                te.getType(), te.getIdPrefix(), te.getId(), userId);\n        rowKey \u003d subApplicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n      }\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineEntities data, UserGroupInformation callerUgi)\n      throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String userId \u003d context.getUserId();\n    String flowName \u003d context.getFlowName();\n    String flowVersion \u003d context.getFlowVersion();\n    long flowRunId \u003d context.getFlowRunId();\n    String appId \u003d context.getAppId();\n    String subApplicationUser \u003d callerUgi.getShortUserName();\n\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n      }\n\n      if (!isApplication \u0026\u0026 !userId.equals(subApplicationUser)) {\n        SubApplicationRowKey subApplicationRowKey \u003d\n            new SubApplicationRowKey(subApplicationUser, clusterId,\n                te.getType(), te.getIdPrefix(), te.getId(), userId);\n        rowKey \u003d subApplicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n      }\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
      }
    },
    "9f6540535d9148abbea836d54a9e94d25319c5d5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,80 @@\n-  public TimelineWriteResponse write(String clusterId, String userId,\n-      String flowName, String flowVersion, long flowRunId, String appId,\n-      TimelineEntities data) throws IOException {\n+  public TimelineWriteResponse write(TimelineCollectorContext context,\n+      TimelineEntities data, UserGroupInformation callerUgi)\n+      throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n+\n+    String clusterId \u003d context.getClusterId();\n+    String userId \u003d context.getUserId();\n+    String flowName \u003d context.getFlowName();\n+    String flowVersion \u003d context.getFlowVersion();\n+    long flowRunId \u003d context.getFlowRunId();\n+    String appId \u003d context.getAppId();\n+    String subApplicationUser \u003d callerUgi.getShortUserName();\n+\n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n+        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                 te.getType(), te.getIdPrefix(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n+        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n       }\n \n-      storeInfo(rowKey, te, flowVersion, isApplication);\n-      storeEvents(rowKey, te.getEvents(), isApplication);\n-      storeConfig(rowKey, te.getConfigs(), isApplication);\n-      storeMetrics(rowKey, te.getMetrics(), isApplication);\n-      storeRelations(rowKey, te, isApplication);\n+      if (!isApplication \u0026\u0026 !userId.equals(subApplicationUser)) {\n+        SubApplicationRowKey subApplicationRowKey \u003d\n+            new SubApplicationRowKey(subApplicationUser, clusterId,\n+                te.getType(), te.getIdPrefix(), te.getId(), userId);\n+        rowKey \u003d subApplicationRowKey.getRowKey();\n+        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n+      }\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n             ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n           onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineEntities data, UserGroupInformation callerUgi)\n      throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String userId \u003d context.getUserId();\n    String flowName \u003d context.getFlowName();\n    String flowVersion \u003d context.getFlowVersion();\n    long flowRunId \u003d context.getFlowRunId();\n    String appId \u003d context.getAppId();\n    String subApplicationUser \u003d callerUgi.getShortUserName();\n\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n      }\n\n      if (!isApplication \u0026\u0026 !userId.equals(subApplicationUser)) {\n        SubApplicationRowKey subApplicationRowKey \u003d\n            new SubApplicationRowKey(subApplicationUser, clusterId,\n                te.getType(), te.getIdPrefix(), te.getId(), userId);\n        rowKey \u003d subApplicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n      }\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[clusterId-String, userId-String, flowName-String, flowVersion-String, flowRunId-long, appId-String, data-TimelineEntities]",
            "newValue": "[context-TimelineCollectorContext, data-TimelineEntities, callerUgi-UserGroupInformation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,80 @@\n-  public TimelineWriteResponse write(String clusterId, String userId,\n-      String flowName, String flowVersion, long flowRunId, String appId,\n-      TimelineEntities data) throws IOException {\n+  public TimelineWriteResponse write(TimelineCollectorContext context,\n+      TimelineEntities data, UserGroupInformation callerUgi)\n+      throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n+\n+    String clusterId \u003d context.getClusterId();\n+    String userId \u003d context.getUserId();\n+    String flowName \u003d context.getFlowName();\n+    String flowVersion \u003d context.getFlowVersion();\n+    long flowRunId \u003d context.getFlowRunId();\n+    String appId \u003d context.getAppId();\n+    String subApplicationUser \u003d callerUgi.getShortUserName();\n+\n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n+        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                 te.getType(), te.getIdPrefix(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n+        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n       }\n \n-      storeInfo(rowKey, te, flowVersion, isApplication);\n-      storeEvents(rowKey, te.getEvents(), isApplication);\n-      storeConfig(rowKey, te.getConfigs(), isApplication);\n-      storeMetrics(rowKey, te.getMetrics(), isApplication);\n-      storeRelations(rowKey, te, isApplication);\n+      if (!isApplication \u0026\u0026 !userId.equals(subApplicationUser)) {\n+        SubApplicationRowKey subApplicationRowKey \u003d\n+            new SubApplicationRowKey(subApplicationUser, clusterId,\n+                te.getType(), te.getIdPrefix(), te.getId(), userId);\n+        rowKey \u003d subApplicationRowKey.getRowKey();\n+        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n+      }\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n             ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n           onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineEntities data, UserGroupInformation callerUgi)\n      throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String userId \u003d context.getUserId();\n    String flowName \u003d context.getFlowName();\n    String flowVersion \u003d context.getFlowVersion();\n    long flowRunId \u003d context.getFlowRunId();\n    String appId \u003d context.getAppId();\n    String subApplicationUser \u003d callerUgi.getShortUserName();\n\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.APPLICATION_TABLE);\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.ENTITY_TABLE);\n      }\n\n      if (!isApplication \u0026\u0026 !userId.equals(subApplicationUser)) {\n        SubApplicationRowKey subApplicationRowKey \u003d\n            new SubApplicationRowKey(subApplicationUser, clusterId,\n                te.getType(), te.getIdPrefix(), te.getId(), userId);\n        rowKey \u003d subApplicationRowKey.getRowKey();\n        store(rowKey, te, flowVersion, Tables.SUBAPPLICATION_TABLE);\n      }\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "71847ed44dc5a1ef702eaf234150a2ff69c15341": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5378. Accommodate app-id-\u003ecluster mapping (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "2556c012e385947cfdcd23f597b174dc78efde46",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,67 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                 te.getType(), te.getIdPrefix(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n       }\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n             ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n-          AppToFlowRowKey appToFlowRowKey \u003d\n-              new AppToFlowRowKey(clusterId, appId);\n-          onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n+          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n      }\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          onApplicationCreated(flowRunRowKey, clusterId, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "05ff04439e2edeef0460bc9e21034535b8b6eb9e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5715. Introduce entity prefix for return and sort order. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "05ff04439e2edeef0460bc9e21034535b8b6eb9e",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "e72e6260da19ccc44d53280e27575cc94bf11300",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n-                te.getType(), te.getId());\n+                te.getType(), te.getIdPrefix(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n       }\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n             ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n           AppToFlowRowKey appToFlowRowKey \u003d\n               new AppToFlowRowKey(clusterId, appId);\n           onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getIdPrefix(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n      }\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          AppToFlowRowKey appToFlowRowKey \u003d\n              new AppToFlowRowKey(clusterId, appId);\n          onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "e72e6260da19ccc44d53280e27575cc94bf11300": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5229. Refactor #isApplicationEntity and #getApplicationEvent from HBaseTimelineWriterImpl. (Vrushali C via gtcarrera9)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "e72e6260da19ccc44d53280e27575cc94bf11300",
      "commitAuthor": "Li Lu",
      "commitDateOld": "09/08/17 7:58 AM",
      "commitNameOld": "63cfcb90ac6fbb79ba9ed6b3044cd999fc74e58c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 20.63,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n-      boolean isApplication \u003d isApplicationEntity(te);\n+      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n       byte[] rowKey;\n       if (isApplication) {\n         ApplicationRowKey applicationRowKey \u003d\n             new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                 appId);\n         rowKey \u003d applicationRowKey.getRowKey();\n       } else {\n         EntityRowKey entityRowKey \u003d\n             new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                 te.getType(), te.getId());\n         rowKey \u003d entityRowKey.getRowKey();\n       }\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n         TimelineEvent event \u003d\n-            getApplicationEvent(te,\n+            ApplicationEntity.getApplicationEvent(te,\n                 ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         FlowRunRowKey flowRunRowKey \u003d\n             new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n           AppToFlowRowKey appToFlowRowKey \u003d\n               new AppToFlowRowKey(clusterId, appId);\n           onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n               flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n-        event \u003d getApplicationEvent(te,\n+        event \u003d ApplicationEntity.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n               event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d ApplicationEntity.isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n      }\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            ApplicationEntity.getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          AppToFlowRowKey appToFlowRowKey \u003d\n              new AppToFlowRowKey(clusterId, appId);\n          onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d ApplicationEntity.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n      }\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          AppToFlowRowKey appToFlowRowKey \u003d\n              new AppToFlowRowKey(clusterId, appId);\n          onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,69 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     // defensive coding to avoid NPE during row key construction\n     if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n         || (userId \u003d\u003d null)) {\n       LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n           + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n           + \" . Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n-      boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n-      byte[] rowKey \u003d isApplication ?\n-          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n-              appId) :\n-          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n-              te.getType(), te.getId());\n+      boolean isApplication \u003d isApplicationEntity(te);\n+      byte[] rowKey;\n+      if (isApplication) {\n+        ApplicationRowKey applicationRowKey \u003d\n+            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n+                appId);\n+        rowKey \u003d applicationRowKey.getRowKey();\n+      } else {\n+        EntityRowKey entityRowKey \u003d\n+            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n+                te.getType(), te.getId());\n+        rowKey \u003d entityRowKey.getRowKey();\n+      }\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n-        TimelineEvent event \u003d TimelineStorageUtils.getApplicationEvent(te,\n-            ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n+        TimelineEvent event \u003d\n+            getApplicationEvent(te,\n+                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n+        FlowRunRowKey flowRunRowKey \u003d\n+            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n         if (event !\u003d null) {\n-          onApplicationCreated(clusterId, userId, flowName, flowVersion,\n-              flowRunId, appId, te, event.getTimestamp());\n+          AppToFlowRowKey appToFlowRowKey \u003d\n+              new AppToFlowRowKey(clusterId, appId);\n+          onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n+              flowVersion, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n-        storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n-            appId, te);\n+        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n-        event \u003d TimelineStorageUtils.getApplicationEvent(te,\n+        event \u003d getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n-          onApplicationFinished(clusterId, userId, flowName, flowVersion,\n-              flowRunId, appId, te, event.getTimestamp());\n+          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n+              event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d isApplicationEntity(te);\n      byte[] rowKey;\n      if (isApplication) {\n        ApplicationRowKey applicationRowKey \u003d\n            new ApplicationRowKey(clusterId, userId, flowName, flowRunId,\n                appId);\n        rowKey \u003d applicationRowKey.getRowKey();\n      } else {\n        EntityRowKey entityRowKey \u003d\n            new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,\n                te.getType(), te.getId());\n        rowKey \u003d entityRowKey.getRowKey();\n      }\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d\n            getApplicationEvent(te,\n                ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        FlowRunRowKey flowRunRowKey \u003d\n            new FlowRunRowKey(clusterId, userId, flowName, flowRunId);\n        if (event !\u003d null) {\n          AppToFlowRowKey appToFlowRowKey \u003d\n              new AppToFlowRowKey(clusterId, appId);\n          onApplicationCreated(flowRunRowKey, appToFlowRowKey, appId, userId,\n              flowVersion, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(flowRunRowKey, appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(flowRunRowKey, flowVersion, appId, te,\n              event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "831a3ffd6ef49214b08cb30329494418703be0f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5097. NPE in Separator.joinEncoded() (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "831a3ffd6ef49214b08cb30329494418703be0f9",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,58 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n+    // defensive coding to avoid NPE during row key construction\n+    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n+        || (userId \u003d\u003d null)) {\n+      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n+          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n+          + \" . Not proceeding with writing to hbase\");\n+      return putStatus;\n+    }\n+\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n       byte[] rowKey \u003d isApplication ?\n           ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n               appId) :\n           EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n               te.getType(), te.getId());\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n         TimelineEvent event \u003d TimelineStorageUtils.getApplicationEvent(te,\n             ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationCreated(clusterId, userId, flowName, flowVersion,\n               flowRunId, appId, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n             appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values of all metrics\n         event \u003d TimelineStorageUtils.getApplicationEvent(te,\n             ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n         if (event !\u003d null) {\n           onApplicationFinished(clusterId, userId, flowName, flowVersion,\n               flowRunId, appId, te, event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    // defensive coding to avoid NPE during row key construction\n    if ((flowName \u003d\u003d null) || (appId \u003d\u003d null) || (clusterId \u003d\u003d null)\n        || (userId \u003d\u003d null)) {\n      LOG.warn(\"Found null for one of: flowName\u003d\" + flowName + \" appId\u003d\" + appId\n          + \" userId\u003d\" + userId + \" clusterId\u003d\" + clusterId\n          + \" . Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n      byte[] rowKey \u003d isApplication ?\n          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n              appId) :\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te.getType(), te.getId());\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d TimelineStorageUtils.getApplicationEvent(te,\n            ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationCreated(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n            appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d TimelineStorageUtils.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te, event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "d56dde490bea7dca4fcd589afd9b41a21dd9b4b1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4700. ATS storage has one extra record each time the RM got restarted. (Naganarasimha G R via Varun Saxena)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d56dde490bea7dca4fcd589afd9b41a21dd9b4b1",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,49 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n       boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n       byte[] rowKey \u003d isApplication ?\n           ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n               appId) :\n           EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n               te.getType(), te.getId());\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n-        if (TimelineStorageUtils.isApplicationCreated(te)) {\n+        TimelineEvent event \u003d TimelineStorageUtils.getApplicationEvent(te,\n+            ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n+        if (event !\u003d null) {\n           onApplicationCreated(clusterId, userId, flowName, flowVersion,\n-              flowRunId, appId, te);\n+              flowRunId, appId, te, event.getTimestamp());\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n             appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n-        // values\n-        // of all metrics\n-        if (TimelineStorageUtils.isApplicationFinished(te)) {\n+        // values of all metrics\n+        event \u003d TimelineStorageUtils.getApplicationEvent(te,\n+            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n+        if (event !\u003d null) {\n           onApplicationFinished(clusterId, userId, flowName, flowVersion,\n-              flowRunId, appId, te);\n+              flowRunId, appId, te, event.getTimestamp());\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n      byte[] rowKey \u003d isApplication ?\n          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n              appId) :\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te.getType(), te.getId());\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        TimelineEvent event \u003d TimelineStorageUtils.getApplicationEvent(te,\n            ApplicationMetricsConstants.CREATED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationCreated(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te, event.getTimestamp());\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n            appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values of all metrics\n        event \u003d TimelineStorageUtils.getApplicationEvent(te,\n            ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n        if (event !\u003d null) {\n          onApplicationFinished(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te, event.getTimestamp());\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n-      boolean isApplication \u003d TimelineWriterUtils.isApplicationEntity(te);\n+      boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n       byte[] rowKey \u003d isApplication ?\n           ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n               appId) :\n           EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n               te.getType(), te.getId());\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n       if (isApplication) {\n-        if (TimelineWriterUtils.isApplicationCreated(te)) {\n+        if (TimelineStorageUtils.isApplicationCreated(te)) {\n           onApplicationCreated(clusterId, userId, flowName, flowVersion,\n               flowRunId, appId, te);\n         }\n         // if it\u0027s an application entity, store metrics\n         storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n             appId, te);\n         // if application has finished, store it\u0027s finish time and write final\n         // values\n         // of all metrics\n-        if (TimelineWriterUtils.isApplicationFinished(te)) {\n+        if (TimelineStorageUtils.isApplicationFinished(te)) {\n           onApplicationFinished(clusterId, userId, flowName, flowVersion,\n               flowRunId, appId, te);\n         }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d TimelineStorageUtils.isApplicationEntity(te);\n      byte[] rowKey \u003d isApplication ?\n          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n              appId) :\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te.getType(), te.getId());\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        if (TimelineStorageUtils.isApplicationCreated(te)) {\n          onApplicationCreated(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te);\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n            appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values\n        // of all metrics\n        if (TimelineStorageUtils.isApplicationFinished(te)) {\n          onApplicationFinished(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te);\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3901. Populate flow run data in the flow_run \u0026 flow activity tables (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,46 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       // if the entity is the application, the destination is the application\n       // table\n-      boolean isApplication \u003d isApplicationEntity(te);\n+      boolean isApplication \u003d TimelineWriterUtils.isApplicationEntity(te);\n       byte[] rowKey \u003d isApplication ?\n           ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n               appId) :\n           EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n               te.getType(), te.getId());\n \n       storeInfo(rowKey, te, flowVersion, isApplication);\n       storeEvents(rowKey, te.getEvents(), isApplication);\n       storeConfig(rowKey, te.getConfigs(), isApplication);\n       storeMetrics(rowKey, te.getMetrics(), isApplication);\n       storeRelations(rowKey, te, isApplication);\n \n-      if (isApplicationCreated(te)) {\n-        onApplicationCreated(\n-            clusterId, userId, flowName, flowVersion, flowRunId, appId, te);\n+      if (isApplication) {\n+        if (TimelineWriterUtils.isApplicationCreated(te)) {\n+          onApplicationCreated(clusterId, userId, flowName, flowVersion,\n+              flowRunId, appId, te);\n+        }\n+        // if it\u0027s an application entity, store metrics\n+        storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n+            appId, te);\n+        // if application has finished, store it\u0027s finish time and write final\n+        // values\n+        // of all metrics\n+        if (TimelineWriterUtils.isApplicationFinished(te)) {\n+          onApplicationFinished(clusterId, userId, flowName, flowVersion,\n+              flowRunId, appId, te);\n+        }\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d TimelineWriterUtils.isApplicationEntity(te);\n      byte[] rowKey \u003d isApplication ?\n          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n              appId) :\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te.getType(), te.getId());\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplication) {\n        if (TimelineWriterUtils.isApplicationCreated(te)) {\n          onApplicationCreated(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te);\n        }\n        // if it\u0027s an application entity, store metrics\n        storeFlowMetricsAppRunning(clusterId, userId, flowName, flowRunId,\n            appId, te);\n        // if application has finished, store it\u0027s finish time and write final\n        // values\n        // of all metrics\n        if (TimelineWriterUtils.isApplicationFinished(te)) {\n          onApplicationFinished(clusterId, userId, flowName, flowVersion,\n              flowRunId, appId, te);\n        }\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "00e85e7a2b9446dc37265feba07473b156d66367": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n-      byte[] rowKey \u003d\n+      // if the entity is the application, the destination is the application\n+      // table\n+      boolean isApplication \u003d isApplicationEntity(te);\n+      byte[] rowKey \u003d isApplication ?\n+          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n+              appId) :\n           EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n               te.getType(), te.getId());\n \n-      storeInfo(rowKey, te, flowVersion);\n-      storeEvents(rowKey, te.getEvents());\n-      storeConfig(rowKey, te.getConfigs());\n-      storeMetrics(rowKey, te.getMetrics());\n-      storeRelations(rowKey, te.getIsRelatedToEntities(),\n-          EntityColumnPrefix.IS_RELATED_TO);\n-      storeRelations(rowKey, te.getRelatesToEntities(),\n-          EntityColumnPrefix.RELATES_TO);\n+      storeInfo(rowKey, te, flowVersion, isApplication);\n+      storeEvents(rowKey, te.getEvents(), isApplication);\n+      storeConfig(rowKey, te.getConfigs(), isApplication);\n+      storeMetrics(rowKey, te.getMetrics(), isApplication);\n+      storeRelations(rowKey, te, isApplication);\n \n       if (isApplicationCreated(te)) {\n         onApplicationCreated(\n             clusterId, userId, flowName, flowVersion, flowRunId, appId, te);\n       }\n     }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      // if the entity is the application, the destination is the application\n      // table\n      boolean isApplication \u003d isApplicationEntity(te);\n      byte[] rowKey \u003d isApplication ?\n          ApplicationRowKey.getRowKey(clusterId, userId, flowName, flowRunId,\n              appId) :\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te.getType(), te.getId());\n\n      storeInfo(rowKey, te, flowVersion, isApplication);\n      storeEvents(rowKey, te.getEvents(), isApplication);\n      storeConfig(rowKey, te.getConfigs(), isApplication);\n      storeMetrics(rowKey, te.getMetrics(), isApplication);\n      storeRelations(rowKey, te, isApplication);\n\n      if (isApplicationCreated(te)) {\n        onApplicationCreated(\n            clusterId, userId, flowName, flowVersion, flowRunId, appId, te);\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3049. [Storage Implementation] Implement storage reader interface to fetch raw data from HBase backend (Zhijie Shen via sjlee)\n\n(cherry picked from commit 07433c2ad52df9e844dbd90020c277d3df844dcd)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9422d9b50d90a99062880cf648dd86a764bf97ec",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n \n       byte[] rowKey \u003d\n           EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n-              te);\n+              te.getType(), te.getId());\n \n       storeInfo(rowKey, te, flowVersion);\n       storeEvents(rowKey, te.getEvents());\n       storeConfig(rowKey, te.getConfigs());\n       storeMetrics(rowKey, te.getMetrics());\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           EntityColumnPrefix.IS_RELATED_TO);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           EntityColumnPrefix.RELATES_TO);\n-    }\n \n+      if (isApplicationCreated(te)) {\n+        onApplicationCreated(\n+            clusterId, userId, flowName, flowVersion, flowRunId, appId, te);\n+      }\n+    }\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      byte[] rowKey \u003d\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te.getType(), te.getId());\n\n      storeInfo(rowKey, te, flowVersion);\n      storeEvents(rowKey, te.getEvents());\n      storeConfig(rowKey, te.getConfigs());\n      storeMetrics(rowKey, te.getMetrics());\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO);\n\n      if (isApplicationCreated(te)) {\n        onApplicationCreated(\n            clusterId, userId, flowName, flowVersion, flowRunId, appId, te);\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   public TimelineWriteResponse write(String clusterId, String userId,\n       String flowName, String flowVersion, long flowRunId, String appId,\n       TimelineEntities data) throws IOException {\n \n-    byte[] rowKeyPrefix \u003d TimelineWriterUtils.getRowKeyPrefix(clusterId,\n-        userId, flowName, flowRunId, appId);\n-\n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n     for (TimelineEntity te : data.getEntities()) {\n \n       // a set can have at most 1 null\n       if (te \u003d\u003d null) {\n         continue;\n       }\n-      // get row key\n-      byte[] row \u003d TimelineWriterUtils.join(\n-          TimelineEntitySchemaConstants.ROW_KEY_SEPARATOR_BYTES, rowKeyPrefix,\n-          Bytes.toBytes(te.getType()), Bytes.toBytes(te.getId()));\n \n-      storeInfo(row, te, flowVersion);\n-      storeEvents(row, te.getEvents());\n-      storeConfig(row, te.getConfigs());\n-      storeMetrics(row, te.getMetrics());\n-      storeRelations(row, te.getIsRelatedToEntities(),\n-          EntityColumnDetails.PREFIX_IS_RELATED_TO);\n-      storeRelations(row, te.getRelatesToEntities(),\n-          EntityColumnDetails.PREFIX_RELATES_TO);\n+      byte[] rowKey \u003d\n+          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n+              te);\n+\n+      storeInfo(rowKey, te, flowVersion);\n+      storeEvents(rowKey, te.getEvents());\n+      storeConfig(rowKey, te.getConfigs());\n+      storeMetrics(rowKey, te.getMetrics());\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          EntityColumnPrefix.IS_RELATED_TO);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          EntityColumnPrefix.RELATES_TO);\n     }\n \n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n\n      byte[] rowKey \u003d\n          EntityRowKey.getRowKey(clusterId, userId, flowName, flowRunId, appId,\n              te);\n\n      storeInfo(rowKey, te, flowVersion);\n      storeEvents(rowKey, te.getEvents());\n      storeConfig(rowKey, te.getConfigs());\n      storeMetrics(rowKey, te.getMetrics());\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO);\n    }\n\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3411. [Storage implementation] explore the native HBase write schema for storage (Vrushali C via sjlee)\n\n(cherry picked from commit 7a3068854d27eadae1c57545988f5b2029bf119a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,31 @@\n+  public TimelineWriteResponse write(String clusterId, String userId,\n+      String flowName, String flowVersion, long flowRunId, String appId,\n+      TimelineEntities data) throws IOException {\n+\n+    byte[] rowKeyPrefix \u003d TimelineWriterUtils.getRowKeyPrefix(clusterId,\n+        userId, flowName, flowRunId, appId);\n+\n+    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n+    for (TimelineEntity te : data.getEntities()) {\n+\n+      // a set can have at most 1 null\n+      if (te \u003d\u003d null) {\n+        continue;\n+      }\n+      // get row key\n+      byte[] row \u003d TimelineWriterUtils.join(\n+          TimelineEntitySchemaConstants.ROW_KEY_SEPARATOR_BYTES, rowKeyPrefix,\n+          Bytes.toBytes(te.getType()), Bytes.toBytes(te.getId()));\n+\n+      storeInfo(row, te, flowVersion);\n+      storeEvents(row, te.getEvents());\n+      storeConfig(row, te.getConfigs());\n+      storeMetrics(row, te.getMetrics());\n+      storeRelations(row, te.getIsRelatedToEntities(),\n+          EntityColumnDetails.PREFIX_IS_RELATED_TO);\n+      storeRelations(row, te.getRelatesToEntities(),\n+          EntityColumnDetails.PREFIX_RELATES_TO);\n+    }\n+\n+    return putStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(String clusterId, String userId,\n      String flowName, String flowVersion, long flowRunId, String appId,\n      TimelineEntities data) throws IOException {\n\n    byte[] rowKeyPrefix \u003d TimelineWriterUtils.getRowKeyPrefix(clusterId,\n        userId, flowName, flowRunId, appId);\n\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    for (TimelineEntity te : data.getEntities()) {\n\n      // a set can have at most 1 null\n      if (te \u003d\u003d null) {\n        continue;\n      }\n      // get row key\n      byte[] row \u003d TimelineWriterUtils.join(\n          TimelineEntitySchemaConstants.ROW_KEY_SEPARATOR_BYTES, rowKeyPrefix,\n          Bytes.toBytes(te.getType()), Bytes.toBytes(te.getId()));\n\n      storeInfo(row, te, flowVersion);\n      storeEvents(row, te.getEvents());\n      storeConfig(row, te.getConfigs());\n      storeMetrics(row, te.getMetrics());\n      storeRelations(row, te.getIsRelatedToEntities(),\n          EntityColumnDetails.PREFIX_IS_RELATED_TO);\n      storeRelations(row, te.getRelatesToEntities(),\n          EntityColumnDetails.PREFIX_RELATES_TO);\n    }\n\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
    }
  }
}