{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockTokenSecretManager.java",
  "functionName": "checkAccess",
  "functionId": "checkAccess___token-Token__BlockTokenIdentifier____userId-String__block-ExtendedBlock__mode-BlockTokenIdentifier.AccessMode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager.java",
  "functionStartLine": 417,
  "functionEndLine": 434,
  "numCommitsSeen": 27,
  "timeTaken": 815,
  "changeHistory": [
    "97bd49fc36fae66a7289fd94630a000d09f49f1d"
  ],
  "changeHistoryShort": {
    "97bd49fc36fae66a7289fd94630a000d09f49f1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "97bd49fc36fae66a7289fd94630a000d09f49f1d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14026. Overload BlockPoolTokenSecretManager.checkAccess to make storageId and storageType optional. Contributed by Arpit Agarwal.\n",
      "commitDate": "24/10/18 9:55 PM",
      "commitName": "97bd49fc36fae66a7289fd94630a000d09f49f1d",
      "commitAuthor": "Ajay Kumar",
      "diff": "@@ -0,0 +1,18 @@\n+  public void checkAccess(Token\u003cBlockTokenIdentifier\u003e token, String userId,\n+      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode)\n+      throws InvalidToken {\n+    BlockTokenIdentifier id \u003d new BlockTokenIdentifier();\n+    try {\n+      id.readFields(new DataInputStream(new ByteArrayInputStream(token\n+          .getIdentifier())));\n+    } catch (IOException e) {\n+      throw new InvalidToken(\n+          \"Unable to de-serialize block token identifier for user\u003d\" + userId\n+              + \", block\u003d\" + block + \", access mode\u003d\" + mode);\n+    }\n+    checkAccess(id, userId, block, mode);\n+    if (!Arrays.equals(retrievePassword(id), token.getPassword())) {\n+      throw new InvalidToken(\"Block token with \" + id\n+          + \" doesn\u0027t have the correct token password\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void checkAccess(Token\u003cBlockTokenIdentifier\u003e token, String userId,\n      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode)\n      throws InvalidToken {\n    BlockTokenIdentifier id \u003d new BlockTokenIdentifier();\n    try {\n      id.readFields(new DataInputStream(new ByteArrayInputStream(token\n          .getIdentifier())));\n    } catch (IOException e) {\n      throw new InvalidToken(\n          \"Unable to de-serialize block token identifier for user\u003d\" + userId\n              + \", block\u003d\" + block + \", access mode\u003d\" + mode);\n    }\n    checkAccess(id, userId, block, mode);\n    if (!Arrays.equals(retrievePassword(id), token.getPassword())) {\n      throw new InvalidToken(\"Block token with \" + id\n          + \" doesn\u0027t have the correct token password\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager.java"
    }
  }
}