{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocator.java",
  "functionName": "partitionAskList",
  "functionId": "partitionAskList___askList-List__ResourceRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
  "functionStartLine": 469,
  "functionEndLine": 482,
  "numCommitsSeen": 24,
  "timeTaken": 3386,
  "changeHistory": [
    "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "dc26601d8fe27a4223a50601bf7522cc42e8e2f3",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "283fa33febe043bd7b4fa87546be26c9c5a8f8b5": "Ymodifierchange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymovefromfile",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Yfilerename",
    "dc26601d8fe27a4223a50601bf7522cc42e8e2f3": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "283fa33febe043bd7b4fa87546be26c9c5a8f8b5": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-5823. Update NMTokens in case of requests with only opportunistic containers. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "09/11/16 12:11 AM",
      "commitName": "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/10/16 2:03 AM",
      "commitNameOld": "aa3cab1eb29c56368d15882d7260a994e615e8d8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 10.96,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n-  private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n-      askList) {\n+  public PartitionedResourceRequests partitionAskList(\n+      List\u003cResourceRequest\u003e askList) {\n     PartitionedResourceRequests partitionedRequests \u003d\n         new PartitionedResourceRequests();\n     for (ResourceRequest rr : askList) {\n       if (rr.getExecutionTypeRequest().getExecutionType() \u003d\u003d\n           ExecutionType.OPPORTUNISTIC) {\n         partitionedRequests.getOpportunistic().add(rr);\n       } else {\n         partitionedRequests.getGuaranteed().add(rr);\n       }\n     }\n     return partitionedRequests;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PartitionedResourceRequests partitionAskList(\n      List\u003cResourceRequest\u003e askList) {\n    PartitionedResourceRequests partitionedRequests \u003d\n        new PartitionedResourceRequests();\n    for (ResourceRequest rr : askList) {\n      if (rr.getExecutionTypeRequest().getExecutionType() \u003d\u003d\n          ExecutionType.OPPORTUNISTIC) {\n        partitionedRequests.getOpportunistic().add(rr);\n      } else {\n        partitionedRequests.getGuaranteed().add(rr);\n      }\n    }\n    return partitionedRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[public]"
      }
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "08/08/16 5:54 PM",
      "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n      askList) {\n    PartitionedResourceRequests partitionedRequests \u003d\n        new PartitionedResourceRequests();\n    for (ResourceRequest rr : askList) {\n      if (rr.getExecutionTypeRequest().getExecutionType() \u003d\u003d\n          ExecutionType.OPPORTUNISTIC) {\n        partitionedRequests.getOpportunistic().add(rr);\n      } else {\n        partitionedRequests.getGuaranteed().add(rr);\n      }\n    }\n    return partitionedRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
        "oldMethodName": "partitionAskList",
        "newMethodName": "partitionAskList"
      }
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "30/07/16 7:29 PM",
      "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n      askList) {\n    PartitionedResourceRequests partitionedRequests \u003d\n        new PartitionedResourceRequests();\n    for (ResourceRequest rr : askList) {\n      if (rr.getExecutionTypeRequest().getExecutionType() \u003d\u003d\n          ExecutionType.OPPORTUNISTIC) {\n        partitionedRequests.getOpportunistic().add(rr);\n      } else {\n        partitionedRequests.getGuaranteed().add(rr);\n      }\n    }\n    return partitionedRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java"
      }
    },
    "dc26601d8fe27a4223a50601bf7522cc42e8e2f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5180. Allow ResourceRequest to specify an enforceExecutionType flag. (asuresh)\n",
      "commitDate": "02/06/16 9:01 AM",
      "commitName": "dc26601d8fe27a4223a50601bf7522cc42e8e2f3",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "18/05/16 6:46 PM",
      "commitNameOld": "1597630681c784a3d59f5605b87e96197b8139d7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 14.59,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,14 @@\n   private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n       askList) {\n     PartitionedResourceRequests partitionedRequests \u003d\n         new PartitionedResourceRequests();\n     for (ResourceRequest rr : askList) {\n-      if (rr.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+      if (rr.getExecutionTypeRequest().getExecutionType() \u003d\u003d\n+          ExecutionType.OPPORTUNISTIC) {\n         partitionedRequests.getOpportunistic().add(rr);\n       } else {\n         partitionedRequests.getGuaranteed().add(rr);\n       }\n     }\n     return partitionedRequests;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n      askList) {\n    PartitionedResourceRequests partitionedRequests \u003d\n        new PartitionedResourceRequests();\n    for (ResourceRequest rr : askList) {\n      if (rr.getExecutionTypeRequest().getExecutionType() \u003d\u003d\n          ExecutionType.OPPORTUNISTIC) {\n        partitionedRequests.getOpportunistic().add(rr);\n      } else {\n        partitionedRequests.getGuaranteed().add(rr);\n      }\n    }\n    return partitionedRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,13 @@\n+  private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n+      askList) {\n+    PartitionedResourceRequests partitionedRequests \u003d\n+        new PartitionedResourceRequests();\n+    for (ResourceRequest rr : askList) {\n+      if (rr.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+        partitionedRequests.getOpportunistic().add(rr);\n+      } else {\n+        partitionedRequests.getGuaranteed().add(rr);\n+      }\n+    }\n+    return partitionedRequests;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PartitionedResourceRequests partitionAskList(List\u003cResourceRequest\u003e\n      askList) {\n    PartitionedResourceRequests partitionedRequests \u003d\n        new PartitionedResourceRequests();\n    for (ResourceRequest rr : askList) {\n      if (rr.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n        partitionedRequests.getOpportunistic().add(rr);\n      } else {\n        partitionedRequests.getGuaranteed().add(rr);\n      }\n    }\n    return partitionedRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java"
    }
  }
}