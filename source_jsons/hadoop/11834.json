{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsVolumeImpl.java",
  "functionName": "deleteBPDirectories",
  "functionId": "deleteBPDirectories___bpid-String__force-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
  "functionStartLine": 1081,
  "functionEndLine": 1131,
  "numCommitsSeen": 104,
  "timeTaken": 9250,
  "changeHistory": [
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
    "df983b524ab68ea0c70cee9033bfff2d28052cbf",
    "dcedb72af468128458e597f08d22f5c34b744ae5",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
    "4603e4481f0486afcce6b106d4a92a6e90e5b6d9",
    "eb448e14399e17f11b9e523e4050de245b9b0408",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": "Ybodychange",
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": "Ybodychange",
    "dcedb72af468128458e597f08d22f5c34b744ae5": "Ybodychange",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": "Ybodychange",
    "4603e4481f0486afcce6b106d4a92a6e90e5b6d9": "Ybodychange",
    "eb448e14399e17f11b9e523e4050de245b9b0408": "Ybodychange",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": "Ybodychange",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
      "commitDate": "14/12/16 11:18 AM",
      "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "12/12/16 6:11 PM",
      "commitNameOld": "2d4731c067ff64cd88f496eac8faaf302faa2ccc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 1.71,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,51 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n     File lazypersistDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_LAZY_PERSIST);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n-      DataStorage.fullyDelete(bpDir);\n+      fileIoProvider.fullyDelete(this, bpDir);\n     } else {\n-      if (!rbwDir.delete()) {\n+      if (!fileIoProvider.delete(this, rbwDir)) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n-      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n-          !FileUtil.fullyDelete(finalizedDir)) {\n+      if (!DatanodeUtil.dirNoFilesRecursive(\n+              this, finalizedDir, fileIoProvider) ||\n+          !fileIoProvider.fullyDelete(\n+              this, finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n       if (lazypersistDir.exists() \u0026\u0026\n-        ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n-          !FileUtil.fullyDelete(lazypersistDir)))) {\n+          ((!DatanodeUtil.dirNoFilesRecursive(\n+              this, lazypersistDir, fileIoProvider) ||\n+              !fileIoProvider.fullyDelete(this, lazypersistDir)))) {\n         throw new IOException(\"Failed to delete \" + lazypersistDir);\n       }\n-      DataStorage.fullyDelete(tmpDir);\n-      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n-        if (!f.delete()) {\n+      fileIoProvider.fullyDelete(this, tmpDir);\n+      for (File f : fileIoProvider.listFiles(this, bpCurrentDir)) {\n+        if (!fileIoProvider.delete(this, f)) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n-      if (!bpCurrentDir.delete()) {\n+      if (!fileIoProvider.delete(this, bpCurrentDir)) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n-      for (File f : FileUtil.listFiles(bpDir)) {\n-        if (!f.delete()) {\n+      for (File f : fileIoProvider.listFiles(this, bpDir)) {\n+        if (!fileIoProvider.delete(this, f)) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n-      if (!bpDir.delete()) {\n+      if (!fileIoProvider.delete(this, bpDir)) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File lazypersistDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      fileIoProvider.fullyDelete(this, bpDir);\n    } else {\n      if (!fileIoProvider.delete(this, rbwDir)) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(\n              this, finalizedDir, fileIoProvider) ||\n          !fileIoProvider.fullyDelete(\n              this, finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      if (lazypersistDir.exists() \u0026\u0026\n          ((!DatanodeUtil.dirNoFilesRecursive(\n              this, lazypersistDir, fileIoProvider) ||\n              !fileIoProvider.fullyDelete(this, lazypersistDir)))) {\n        throw new IOException(\"Failed to delete \" + lazypersistDir);\n      }\n      fileIoProvider.fullyDelete(this, tmpDir);\n      for (File f : fileIoProvider.listFiles(this, bpCurrentDir)) {\n        if (!fileIoProvider.delete(this, f)) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!fileIoProvider.delete(this, bpCurrentDir)) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : fileIoProvider.listFiles(this, bpDir)) {\n        if (!fileIoProvider.delete(this, f)) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!fileIoProvider.delete(this, bpDir)) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "06/12/16 11:05 AM",
      "commitName": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "05/12/16 12:44 PM",
      "commitNameOld": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n     File lazypersistDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_LAZY_PERSIST);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n-      FileUtil.fullyDelete(bpDir);\n+      DataStorage.fullyDelete(bpDir);\n     } else {\n       if (!rbwDir.delete()) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n       if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n           !FileUtil.fullyDelete(finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n       if (lazypersistDir.exists() \u0026\u0026\n         ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n           !FileUtil.fullyDelete(lazypersistDir)))) {\n         throw new IOException(\"Failed to delete \" + lazypersistDir);\n       }\n-      FileUtil.fullyDelete(tmpDir);\n+      DataStorage.fullyDelete(tmpDir);\n       for (File f : FileUtil.listFiles(bpCurrentDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpCurrentDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n       for (File f : FileUtil.listFiles(bpDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File lazypersistDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      DataStorage.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n          !FileUtil.fullyDelete(finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      if (lazypersistDir.exists() \u0026\u0026\n        ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n          !FileUtil.fullyDelete(lazypersistDir)))) {\n        throw new IOException(\"Failed to delete \" + lazypersistDir);\n      }\n      DataStorage.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "dcedb72af468128458e597f08d22f5c34b744ae5": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.\n",
      "commitDate": "05/12/16 12:44 PM",
      "commitName": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "05/12/16 10:54 AM",
      "commitNameOld": "1b5cceaffbdde50a87ede81552dc380832db8e79",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n     File lazypersistDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_LAZY_PERSIST);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n-      DataStorage.fullyDelete(bpDir);\n+      FileUtil.fullyDelete(bpDir);\n     } else {\n       if (!rbwDir.delete()) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n       if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n           !FileUtil.fullyDelete(finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n       if (lazypersistDir.exists() \u0026\u0026\n         ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n           !FileUtil.fullyDelete(lazypersistDir)))) {\n         throw new IOException(\"Failed to delete \" + lazypersistDir);\n       }\n-      DataStorage.fullyDelete(tmpDir);\n+      FileUtil.fullyDelete(tmpDir);\n       for (File f : FileUtil.listFiles(bpCurrentDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpCurrentDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n       for (File f : FileUtil.listFiles(bpDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File lazypersistDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      FileUtil.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n          !FileUtil.fullyDelete(finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      if (lazypersistDir.exists() \u0026\u0026\n        ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n          !FileUtil.fullyDelete(lazypersistDir)))) {\n        throw new IOException(\"Failed to delete \" + lazypersistDir);\n      }\n      FileUtil.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "29/11/16 8:52 PM",
      "commitName": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "29/11/16 8:31 PM",
      "commitNameOld": "eaaa32950cbae42a74e28e3db3f0cdb1ff158119",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n     File lazypersistDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_LAZY_PERSIST);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n-      FileUtil.fullyDelete(bpDir);\n+      DataStorage.fullyDelete(bpDir);\n     } else {\n       if (!rbwDir.delete()) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n       if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n           !FileUtil.fullyDelete(finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n       if (lazypersistDir.exists() \u0026\u0026\n         ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n           !FileUtil.fullyDelete(lazypersistDir)))) {\n         throw new IOException(\"Failed to delete \" + lazypersistDir);\n       }\n-      FileUtil.fullyDelete(tmpDir);\n+      DataStorage.fullyDelete(tmpDir);\n       for (File f : FileUtil.listFiles(bpCurrentDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpCurrentDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n       for (File f : FileUtil.listFiles(bpDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File lazypersistDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      DataStorage.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n          !FileUtil.fullyDelete(finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      if (lazypersistDir.exists() \u0026\u0026\n        ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n          !FileUtil.fullyDelete(lazypersistDir)))) {\n        throw new IOException(\"Failed to delete \" + lazypersistDir);\n      }\n      DataStorage.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "4603e4481f0486afcce6b106d4a92a6e90e5b6d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7064. Fix unit test failures in HDFS-6581 branch. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "16/09/14 3:45 PM",
      "commitName": "4603e4481f0486afcce6b106d4a92a6e90e5b6d9",
      "commitAuthor": "arp",
      "commitDateOld": "07/09/14 2:46 PM",
      "commitNameOld": "eb8284d50e1aa9f196556ed20b4b5e3f330e65fe",
      "commitAuthorOld": "",
      "daysBetweenCommits": 9.04,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n     File lazypersistDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_LAZY_PERSIST);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n       FileUtil.fullyDelete(bpDir);\n     } else {\n       if (!rbwDir.delete()) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n       if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n           !FileUtil.fullyDelete(finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n-      if (!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n-          !FileUtil.fullyDelete(lazypersistDir)) {\n+      if (lazypersistDir.exists() \u0026\u0026\n+        ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n+          !FileUtil.fullyDelete(lazypersistDir)))) {\n         throw new IOException(\"Failed to delete \" + lazypersistDir);\n       }\n       FileUtil.fullyDelete(tmpDir);\n       for (File f : FileUtil.listFiles(bpCurrentDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpCurrentDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n       for (File f : FileUtil.listFiles(bpDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File lazypersistDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      FileUtil.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n          !FileUtil.fullyDelete(finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      if (lazypersistDir.exists() \u0026\u0026\n        ((!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n          !FileUtil.fullyDelete(lazypersistDir)))) {\n        throw new IOException(\"Failed to delete \" + lazypersistDir);\n      }\n      FileUtil.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "eb448e14399e17f11b9e523e4050de245b9b0408": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6926. DN support for saving replicas to persistent storage and evicting in-memory replicas. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "eb448e14399e17f11b9e523e4050de245b9b0408",
      "commitAuthor": "arp",
      "commitDateOld": "27/08/14 9:47 PM",
      "commitNameOld": "a317bd7b02c37bd57743bfad59593ec12f53f4ed",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n+    File lazypersistDir \u003d new File(bpCurrentDir,\n+        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n       FileUtil.fullyDelete(bpDir);\n     } else {\n       if (!rbwDir.delete()) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n       if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n           !FileUtil.fullyDelete(finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n+      if (!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n+          !FileUtil.fullyDelete(lazypersistDir)) {\n+        throw new IOException(\"Failed to delete \" + lazypersistDir);\n+      }\n       FileUtil.fullyDelete(tmpDir);\n       for (File f : FileUtil.listFiles(bpCurrentDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpCurrentDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n       for (File f : FileUtil.listFiles(bpDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File lazypersistDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_LAZY_PERSIST);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      FileUtil.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n          !FileUtil.fullyDelete(finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(lazypersistDir) ||\n          !FileUtil.fullyDelete(lazypersistDir)) {\n        throw new IOException(\"Failed to delete \" + lazypersistDir);\n      }\n      FileUtil.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 1:41 PM",
      "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/01/14 10:29 AM",
      "commitNameOld": "b80343a55f0c34459d4aca4b800869b93c4d2e2c",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 210.09,
      "commitsBetweenForRepo": 1472,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   void deleteBPDirectories(String bpid, boolean force) throws IOException {\n     File volumeCurrentDir \u003d this.getCurrentDir();\n     File bpDir \u003d new File(volumeCurrentDir, bpid);\n     if (!bpDir.isDirectory()) {\n       // nothing to be deleted\n       return;\n     }\n     File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n     File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n     File finalizedDir \u003d new File(bpCurrentDir,\n         DataStorage.STORAGE_DIR_FINALIZED);\n     File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n     if (force) {\n       FileUtil.fullyDelete(bpDir);\n     } else {\n       if (!rbwDir.delete()) {\n         throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n-      if (!finalizedDir.delete()) {\n+      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n+          !FileUtil.fullyDelete(finalizedDir)) {\n         throw new IOException(\"Failed to delete \" + finalizedDir);\n       }\n       FileUtil.fullyDelete(tmpDir);\n       for (File f : FileUtil.listFiles(bpCurrentDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpCurrentDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpCurrentDir);\n       }\n       for (File f : FileUtil.listFiles(bpDir)) {\n         if (!f.delete()) {\n           throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n       if (!bpDir.delete()) {\n         throw new IOException(\"Failed to delete \" + bpDir);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      FileUtil.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!DatanodeUtil.dirNoFilesRecursive(finalizedDir) ||\n          !FileUtil.fullyDelete(finalizedDir)) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      FileUtil.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
      "extendedDetails": {}
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,40 @@\n-    private void deleteBPDirectories(String bpid, boolean force)\n-        throws IOException {\n-      File volumeCurrentDir \u003d this.getCurrentDir();\n-      File bpDir \u003d new File(volumeCurrentDir, bpid);\n-      if (!bpDir.isDirectory()) {\n-        // nothing to be deleted\n-        return;\n+  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n+    File volumeCurrentDir \u003d this.getCurrentDir();\n+    File bpDir \u003d new File(volumeCurrentDir, bpid);\n+    if (!bpDir.isDirectory()) {\n+      // nothing to be deleted\n+      return;\n+    }\n+    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n+    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n+    File finalizedDir \u003d new File(bpCurrentDir,\n+        DataStorage.STORAGE_DIR_FINALIZED);\n+    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n+    if (force) {\n+      FileUtil.fullyDelete(bpDir);\n+    } else {\n+      if (!rbwDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n-      File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP);\n-      File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n-      File finalizedDir \u003d new File(bpCurrentDir,\n-          DataStorage.STORAGE_DIR_FINALIZED);\n-      File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n-      if (force) {\n-        FileUtil.fullyDelete(bpDir);\n-      } else {\n-        if (!rbwDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + rbwDir);\n-        }\n-        if (!finalizedDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + finalizedDir);\n-        }\n-        FileUtil.fullyDelete(tmpDir);\n-        for (File f : FileUtil.listFiles(bpCurrentDir)) {\n-          if (!f.delete()) {\n-            throw new IOException(\"Failed to delete \" + f);\n-          }\n-        }\n-        if (!bpCurrentDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + bpCurrentDir);\n-        }\n-        for (File f : FileUtil.listFiles(bpDir)) {\n-          if (!f.delete()) {\n-            throw new IOException(\"Failed to delete \" + f);\n-          }\n-        }\n-        if (!bpDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + bpDir);\n+      if (!finalizedDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + finalizedDir);\n+      }\n+      FileUtil.fullyDelete(tmpDir);\n+      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n+        if (!f.delete()) {\n+          throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n-    }\n\\ No newline at end of file\n+      if (!bpCurrentDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n+      }\n+      for (File f : FileUtil.listFiles(bpDir)) {\n+        if (!f.delete()) {\n+          throw new IOException(\"Failed to delete \" + f);\n+        }\n+      }\n+      if (!bpDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + bpDir);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      FileUtil.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!finalizedDir.delete()) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      FileUtil.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
            "oldMethodName": "deleteBPDirectories",
            "newMethodName": "deleteBPDirectories"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,40 @@\n-    private void deleteBPDirectories(String bpid, boolean force)\n-        throws IOException {\n-      File volumeCurrentDir \u003d this.getCurrentDir();\n-      File bpDir \u003d new File(volumeCurrentDir, bpid);\n-      if (!bpDir.isDirectory()) {\n-        // nothing to be deleted\n-        return;\n+  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n+    File volumeCurrentDir \u003d this.getCurrentDir();\n+    File bpDir \u003d new File(volumeCurrentDir, bpid);\n+    if (!bpDir.isDirectory()) {\n+      // nothing to be deleted\n+      return;\n+    }\n+    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n+    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n+    File finalizedDir \u003d new File(bpCurrentDir,\n+        DataStorage.STORAGE_DIR_FINALIZED);\n+    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n+    if (force) {\n+      FileUtil.fullyDelete(bpDir);\n+    } else {\n+      if (!rbwDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + rbwDir);\n       }\n-      File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP);\n-      File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n-      File finalizedDir \u003d new File(bpCurrentDir,\n-          DataStorage.STORAGE_DIR_FINALIZED);\n-      File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n-      if (force) {\n-        FileUtil.fullyDelete(bpDir);\n-      } else {\n-        if (!rbwDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + rbwDir);\n-        }\n-        if (!finalizedDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + finalizedDir);\n-        }\n-        FileUtil.fullyDelete(tmpDir);\n-        for (File f : FileUtil.listFiles(bpCurrentDir)) {\n-          if (!f.delete()) {\n-            throw new IOException(\"Failed to delete \" + f);\n-          }\n-        }\n-        if (!bpCurrentDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + bpCurrentDir);\n-        }\n-        for (File f : FileUtil.listFiles(bpDir)) {\n-          if (!f.delete()) {\n-            throw new IOException(\"Failed to delete \" + f);\n-          }\n-        }\n-        if (!bpDir.delete()) {\n-          throw new IOException(\"Failed to delete \" + bpDir);\n+      if (!finalizedDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + finalizedDir);\n+      }\n+      FileUtil.fullyDelete(tmpDir);\n+      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n+        if (!f.delete()) {\n+          throw new IOException(\"Failed to delete \" + f);\n         }\n       }\n-    }\n\\ No newline at end of file\n+      if (!bpCurrentDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n+      }\n+      for (File f : FileUtil.listFiles(bpDir)) {\n+        if (!f.delete()) {\n+          throw new IOException(\"Failed to delete \" + f);\n+        }\n+      }\n+      if (!bpDir.delete()) {\n+        throw new IOException(\"Failed to delete \" + bpDir);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void deleteBPDirectories(String bpid, boolean force) throws IOException {\n    File volumeCurrentDir \u003d this.getCurrentDir();\n    File bpDir \u003d new File(volumeCurrentDir, bpid);\n    if (!bpDir.isDirectory()) {\n      // nothing to be deleted\n      return;\n    }\n    File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP); \n    File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n    File finalizedDir \u003d new File(bpCurrentDir,\n        DataStorage.STORAGE_DIR_FINALIZED);\n    File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n    if (force) {\n      FileUtil.fullyDelete(bpDir);\n    } else {\n      if (!rbwDir.delete()) {\n        throw new IOException(\"Failed to delete \" + rbwDir);\n      }\n      if (!finalizedDir.delete()) {\n        throw new IOException(\"Failed to delete \" + finalizedDir);\n      }\n      FileUtil.fullyDelete(tmpDir);\n      for (File f : FileUtil.listFiles(bpCurrentDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpCurrentDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpCurrentDir);\n      }\n      for (File f : FileUtil.listFiles(bpDir)) {\n        if (!f.delete()) {\n          throw new IOException(\"Failed to delete \" + f);\n        }\n      }\n      if (!bpDir.delete()) {\n        throw new IOException(\"Failed to delete \" + bpDir);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void deleteBPDirectories(String bpid, boolean force)\n        throws IOException {\n      File volumeCurrentDir \u003d this.getCurrentDir();\n      File bpDir \u003d new File(volumeCurrentDir, bpid);\n      if (!bpDir.isDirectory()) {\n        // nothing to be deleted\n        return;\n      }\n      File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP);\n      File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n      File finalizedDir \u003d new File(bpCurrentDir,\n          DataStorage.STORAGE_DIR_FINALIZED);\n      File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n      if (force) {\n        FileUtil.fullyDelete(bpDir);\n      } else {\n        if (!rbwDir.delete()) {\n          throw new IOException(\"Failed to delete \" + rbwDir);\n        }\n        if (!finalizedDir.delete()) {\n          throw new IOException(\"Failed to delete \" + finalizedDir);\n        }\n        FileUtil.fullyDelete(tmpDir);\n        for (File f : FileUtil.listFiles(bpCurrentDir)) {\n          if (!f.delete()) {\n            throw new IOException(\"Failed to delete \" + f);\n          }\n        }\n        if (!bpCurrentDir.delete()) {\n          throw new IOException(\"Failed to delete \" + bpCurrentDir);\n        }\n        for (File f : FileUtil.listFiles(bpDir)) {\n          if (!f.delete()) {\n            throw new IOException(\"Failed to delete \" + f);\n          }\n        }\n        if (!bpDir.delete()) {\n          throw new IOException(\"Failed to delete \" + bpDir);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void deleteBPDirectories(String bpid, boolean force)\n        throws IOException {\n      File volumeCurrentDir \u003d this.getCurrentDir();\n      File bpDir \u003d new File(volumeCurrentDir, bpid);\n      if (!bpDir.isDirectory()) {\n        // nothing to be deleted\n        return;\n      }\n      File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP);\n      File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n      File finalizedDir \u003d new File(bpCurrentDir,\n          DataStorage.STORAGE_DIR_FINALIZED);\n      File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n      if (force) {\n        FileUtil.fullyDelete(bpDir);\n      } else {\n        if (!rbwDir.delete()) {\n          throw new IOException(\"Failed to delete \" + rbwDir);\n        }\n        if (!finalizedDir.delete()) {\n          throw new IOException(\"Failed to delete \" + finalizedDir);\n        }\n        FileUtil.fullyDelete(tmpDir);\n        for (File f : FileUtil.listFiles(bpCurrentDir)) {\n          if (!f.delete()) {\n            throw new IOException(\"Failed to delete \" + f);\n          }\n        }\n        if (!bpCurrentDir.delete()) {\n          throw new IOException(\"Failed to delete \" + bpCurrentDir);\n        }\n        for (File f : FileUtil.listFiles(bpDir)) {\n          if (!f.delete()) {\n            throw new IOException(\"Failed to delete \" + f);\n          }\n        }\n        if (!bpDir.delete()) {\n          throw new IOException(\"Failed to delete \" + bpDir);\n        }\n      }\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+    private void deleteBPDirectories(String bpid, boolean force)\n+        throws IOException {\n+      File volumeCurrentDir \u003d this.getCurrentDir();\n+      File bpDir \u003d new File(volumeCurrentDir, bpid);\n+      if (!bpDir.isDirectory()) {\n+        // nothing to be deleted\n+        return;\n+      }\n+      File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP);\n+      File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n+      File finalizedDir \u003d new File(bpCurrentDir,\n+          DataStorage.STORAGE_DIR_FINALIZED);\n+      File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n+      if (force) {\n+        FileUtil.fullyDelete(bpDir);\n+      } else {\n+        if (!rbwDir.delete()) {\n+          throw new IOException(\"Failed to delete \" + rbwDir);\n+        }\n+        if (!finalizedDir.delete()) {\n+          throw new IOException(\"Failed to delete \" + finalizedDir);\n+        }\n+        FileUtil.fullyDelete(tmpDir);\n+        for (File f : FileUtil.listFiles(bpCurrentDir)) {\n+          if (!f.delete()) {\n+            throw new IOException(\"Failed to delete \" + f);\n+          }\n+        }\n+        if (!bpCurrentDir.delete()) {\n+          throw new IOException(\"Failed to delete \" + bpCurrentDir);\n+        }\n+        for (File f : FileUtil.listFiles(bpDir)) {\n+          if (!f.delete()) {\n+            throw new IOException(\"Failed to delete \" + f);\n+          }\n+        }\n+        if (!bpDir.delete()) {\n+          throw new IOException(\"Failed to delete \" + bpDir);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void deleteBPDirectories(String bpid, boolean force)\n        throws IOException {\n      File volumeCurrentDir \u003d this.getCurrentDir();\n      File bpDir \u003d new File(volumeCurrentDir, bpid);\n      if (!bpDir.isDirectory()) {\n        // nothing to be deleted\n        return;\n      }\n      File tmpDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_TMP);\n      File bpCurrentDir \u003d new File(bpDir, DataStorage.STORAGE_DIR_CURRENT);\n      File finalizedDir \u003d new File(bpCurrentDir,\n          DataStorage.STORAGE_DIR_FINALIZED);\n      File rbwDir \u003d new File(bpCurrentDir, DataStorage.STORAGE_DIR_RBW);\n      if (force) {\n        FileUtil.fullyDelete(bpDir);\n      } else {\n        if (!rbwDir.delete()) {\n          throw new IOException(\"Failed to delete \" + rbwDir);\n        }\n        if (!finalizedDir.delete()) {\n          throw new IOException(\"Failed to delete \" + finalizedDir);\n        }\n        FileUtil.fullyDelete(tmpDir);\n        for (File f : FileUtil.listFiles(bpCurrentDir)) {\n          if (!f.delete()) {\n            throw new IOException(\"Failed to delete \" + f);\n          }\n        }\n        if (!bpCurrentDir.delete()) {\n          throw new IOException(\"Failed to delete \" + bpCurrentDir);\n        }\n        for (File f : FileUtil.listFiles(bpDir)) {\n          if (!f.delete()) {\n            throw new IOException(\"Failed to delete \" + f);\n          }\n        }\n        if (!bpDir.delete()) {\n          throw new IOException(\"Failed to delete \" + bpDir);\n        }\n      }\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}