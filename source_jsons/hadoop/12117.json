{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataNode.java",
  "functionName": "getDomainPeerServer",
  "functionId": "getDomainPeerServer___conf-Configuration__port-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
  "functionStartLine": 1196,
  "functionEndLine": 1227,
  "numCommitsSeen": 358,
  "timeTaken": 2027,
  "changeHistory": [
    "dfcb331ba3516264398121c9f23af3a79c0509cc"
  ],
  "changeHistoryShort": {
    "dfcb331ba3516264398121c9f23af3a79c0509cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dfcb331ba3516264398121c9f23af3a79c0509cc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13076: [SPS]: Addendum. Resolve conflicts after rebasing branch to trunk. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "dfcb331ba3516264398121c9f23af3a79c0509cc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,32 @@\n+  private static DomainPeerServer getDomainPeerServer(Configuration conf,\n+      int port) throws IOException {\n+    String domainSocketPath \u003d\n+        conf.getTrimmed(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,\n+            DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_DEFAULT);\n+    if (domainSocketPath.isEmpty()) {\n+      if (conf.getBoolean(HdfsClientConfigKeys.Read.ShortCircuit.KEY,\n+            HdfsClientConfigKeys.Read.ShortCircuit.DEFAULT) \u0026\u0026\n+         (!conf.getBoolean(HdfsClientConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,\n+          HdfsClientConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT))) {\n+        LOG.warn(\"Although short-circuit local reads are configured, \" +\n+            \"they are disabled because you didn\u0027t configure {}\",\n+            DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY);\n+      }\n+      return null;\n+    }\n+    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n+      throw new RuntimeException(\"Although a UNIX domain socket \" +\n+          \"path is configured as \" + domainSocketPath + \", we cannot \" +\n+          \"start a localDataXceiverServer because \" +\n+          DomainSocket.getLoadingFailureReason());\n+    }\n+    DomainPeerServer domainPeerServer \u003d\n+      new DomainPeerServer(domainSocketPath, port);\n+    int recvBufferSize \u003d conf.getInt(\n+        DFSConfigKeys.DFS_DATANODE_TRANSFER_SOCKET_RECV_BUFFER_SIZE_KEY,\n+        DFSConfigKeys.DFS_DATANODE_TRANSFER_SOCKET_RECV_BUFFER_SIZE_DEFAULT);\n+    if (recvBufferSize \u003e 0) {\n+      domainPeerServer.setReceiveBufferSize(recvBufferSize);\n+    }\n+    return domainPeerServer;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static DomainPeerServer getDomainPeerServer(Configuration conf,\n      int port) throws IOException {\n    String domainSocketPath \u003d\n        conf.getTrimmed(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,\n            DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_DEFAULT);\n    if (domainSocketPath.isEmpty()) {\n      if (conf.getBoolean(HdfsClientConfigKeys.Read.ShortCircuit.KEY,\n            HdfsClientConfigKeys.Read.ShortCircuit.DEFAULT) \u0026\u0026\n         (!conf.getBoolean(HdfsClientConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,\n          HdfsClientConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT))) {\n        LOG.warn(\"Although short-circuit local reads are configured, \" +\n            \"they are disabled because you didn\u0027t configure {}\",\n            DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY);\n      }\n      return null;\n    }\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      throw new RuntimeException(\"Although a UNIX domain socket \" +\n          \"path is configured as \" + domainSocketPath + \", we cannot \" +\n          \"start a localDataXceiverServer because \" +\n          DomainSocket.getLoadingFailureReason());\n    }\n    DomainPeerServer domainPeerServer \u003d\n      new DomainPeerServer(domainSocketPath, port);\n    int recvBufferSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_TRANSFER_SOCKET_RECV_BUFFER_SIZE_KEY,\n        DFSConfigKeys.DFS_DATANODE_TRANSFER_SOCKET_RECV_BUFFER_SIZE_DEFAULT);\n    if (recvBufferSize \u003e 0) {\n      domainPeerServer.setReceiveBufferSize(recvBufferSize);\n    }\n    return domainPeerServer;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}