{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3xLoginHelper.java",
  "functionName": "checkPath",
  "functionId": "checkPath___conf-Configuration__fsUri-URI__path-Path__defaultPort-int",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java",
  "functionStartLine": 186,
  "functionEndLine": 226,
  "numCommitsSeen": 10,
  "timeTaken": 732,
  "changeHistory": [
    "4aefe119a0203c03cdc893dcb3330fd37f26f0ee"
  ],
  "changeHistoryShort": {
    "4aefe119a0203c03cdc893dcb3330fd37f26f0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4aefe119a0203c03cdc893dcb3330fd37f26f0ee": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-3733. \"s3x:\" URLs break when Secret Key contains a slash, even if encoded. Contributed by Steve Loughran.\n",
      "commitDate": "16/06/16 11:13 AM",
      "commitName": "4aefe119a0203c03cdc893dcb3330fd37f26f0ee",
      "commitAuthor": "Ravi Prakash",
      "diff": "@@ -0,0 +1,41 @@\n+  public static void checkPath(Configuration conf,\n+      URI fsUri,\n+      Path path,\n+      int defaultPort) {\n+    URI pathUri \u003d path.toUri();\n+    String thatScheme \u003d pathUri.getScheme();\n+    if (thatScheme \u003d\u003d null) {\n+      // fs is relative\n+      return;\n+    }\n+    URI thisUri \u003d canonicalizeUri(fsUri, defaultPort);\n+    String thisScheme \u003d thisUri.getScheme();\n+    //hostname and scheme are not case sensitive in these checks\n+    if (equalsIgnoreCase(thisScheme, thatScheme)) {// schemes match\n+      String thisHost \u003d thisUri.getHost();\n+      String thatHost \u003d pathUri.getHost();\n+      if (thatHost \u003d\u003d null \u0026\u0026                // path\u0027s host is null\n+          thisHost !\u003d null) {                // fs has a host\n+        URI defaultUri \u003d FileSystem.getDefaultUri(conf);\n+        if (equalsIgnoreCase(thisScheme, defaultUri.getScheme())) {\n+          pathUri \u003d defaultUri; // schemes match, so use this uri instead\n+        } else {\n+          pathUri \u003d null; // can\u0027t determine auth of the path\n+        }\n+      }\n+      if (pathUri !\u003d null) {\n+        // canonicalize uri before comparing with this fs\n+        pathUri \u003d canonicalizeUri(pathUri, defaultPort);\n+        thatHost \u003d pathUri.getHost();\n+        if (thisHost \u003d\u003d thatHost ||       // hosts match\n+            (thisHost !\u003d null \u0026\u0026\n+                 equalsIgnoreCase(thisHost, thatHost))) {\n+          return;\n+        }\n+      }\n+    }\n+    // make sure the exception strips out any auth details\n+    throw new IllegalArgumentException(\n+        \"Wrong FS \" + S3xLoginHelper.toString(pathUri)\n+            + \" -expected \" + fsUri);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void checkPath(Configuration conf,\n      URI fsUri,\n      Path path,\n      int defaultPort) {\n    URI pathUri \u003d path.toUri();\n    String thatScheme \u003d pathUri.getScheme();\n    if (thatScheme \u003d\u003d null) {\n      // fs is relative\n      return;\n    }\n    URI thisUri \u003d canonicalizeUri(fsUri, defaultPort);\n    String thisScheme \u003d thisUri.getScheme();\n    //hostname and scheme are not case sensitive in these checks\n    if (equalsIgnoreCase(thisScheme, thatScheme)) {// schemes match\n      String thisHost \u003d thisUri.getHost();\n      String thatHost \u003d pathUri.getHost();\n      if (thatHost \u003d\u003d null \u0026\u0026                // path\u0027s host is null\n          thisHost !\u003d null) {                // fs has a host\n        URI defaultUri \u003d FileSystem.getDefaultUri(conf);\n        if (equalsIgnoreCase(thisScheme, defaultUri.getScheme())) {\n          pathUri \u003d defaultUri; // schemes match, so use this uri instead\n        } else {\n          pathUri \u003d null; // can\u0027t determine auth of the path\n        }\n      }\n      if (pathUri !\u003d null) {\n        // canonicalize uri before comparing with this fs\n        pathUri \u003d canonicalizeUri(pathUri, defaultPort);\n        thatHost \u003d pathUri.getHost();\n        if (thisHost \u003d\u003d thatHost ||       // hosts match\n            (thisHost !\u003d null \u0026\u0026\n                 equalsIgnoreCase(thisHost, thatHost))) {\n          return;\n        }\n      }\n    }\n    // make sure the exception strips out any auth details\n    throw new IllegalArgumentException(\n        \"Wrong FS \" + S3xLoginHelper.toString(pathUri)\n            + \" -expected \" + fsUri);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3native/S3xLoginHelper.java"
    }
  }
}