{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemBasedConfigurationProvider.java",
  "functionName": "getConfigurationInputStream",
  "functionId": "getConfigurationInputStream___bootstrapConf-Configuration__name-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
  "functionStartLine": 46,
  "functionEndLine": 69,
  "numCommitsSeen": 11,
  "timeTaken": 2090,
  "changeHistory": [
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "ca72e11158047f3d00db9e9e61c632e757383287"
  ],
  "changeHistoryShort": {
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Ybodychange",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ymultichange(Yparameterchange,Ybodychange)",
    "ca72e11158047f3d00db9e9e61c632e757383287": "Yintroduced"
  },
  "changeHistoryDetails": {
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 300.89,
      "commitsBetweenForRepo": 1748,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public synchronized InputStream getConfigurationInputStream(\n       Configuration bootstrapConf, String name) throws IOException,\n       YarnException {\n     if (name \u003d\u003d null || name.isEmpty()) {\n       throw new YarnException(\n           \"Illegal argument! The parameter should not be null or empty\");\n     }\n     Path filePath;\n-    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n+    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name) ||\n+        YarnConfiguration.NM_CONFIGURATION_FILES.contains(name)) {\n       filePath \u003d new Path(this.configDir, name);\n       if (!fs.exists(filePath)) {\n         LOG.info(filePath + \" not found\");\n         return null;\n       }\n     } else {\n       filePath \u003d new Path(name);\n       if (!fs.exists(filePath)) {\n         LOG.info(filePath + \" not found\");\n         return null;\n       }\n     }\n     return fs.open(filePath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized InputStream getConfigurationInputStream(\n      Configuration bootstrapConf, String name) throws IOException,\n      YarnException {\n    if (name \u003d\u003d null || name.isEmpty()) {\n      throw new YarnException(\n          \"Illegal argument! The parameter should not be null or empty\");\n    }\n    Path filePath;\n    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name) ||\n        YarnConfiguration.NM_CONFIGURATION_FILES.contains(name)) {\n      filePath \u003d new Path(this.configDir, name);\n      if (!fs.exists(filePath)) {\n        LOG.info(filePath + \" not found\");\n        return null;\n      }\n    } else {\n      filePath \u003d new Path(name);\n      if (!fs.exists(filePath)) {\n        LOG.info(filePath + \" not found\");\n        return null;\n      }\n    }\n    return fs.open(filePath);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
      "extendedDetails": {}
    },
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1758. Fixed ResourceManager to not mandate the presence of site specific configuration files and thus fix failures in downstream tests. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/14 11:41 AM",
      "commitName": "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 9:52 AM",
      "commitNameOld": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.08,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public synchronized InputStream getConfigurationInputStream(\n       Configuration bootstrapConf, String name) throws IOException,\n       YarnException {\n     if (name \u003d\u003d null || name.isEmpty()) {\n       throw new YarnException(\n           \"Illegal argument! The parameter should not be null or empty\");\n     }\n     Path filePath;\n     if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n       filePath \u003d new Path(this.configDir, name);\n       if (!fs.exists(filePath)) {\n-        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n-            + configDir);\n+        LOG.info(filePath + \" not found\");\n+        return null;\n       }\n     } else {\n       filePath \u003d new Path(name);\n       if (!fs.exists(filePath)) {\n-        throw new YarnException(\"Can not find file: \" + name);\n+        LOG.info(filePath + \" not found\");\n+        return null;\n       }\n     }\n     return fs.open(filePath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized InputStream getConfigurationInputStream(\n      Configuration bootstrapConf, String name) throws IOException,\n      YarnException {\n    if (name \u003d\u003d null || name.isEmpty()) {\n      throw new YarnException(\n          \"Illegal argument! The parameter should not be null or empty\");\n    }\n    Path filePath;\n    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n      filePath \u003d new Path(this.configDir, name);\n      if (!fs.exists(filePath)) {\n        LOG.info(filePath + \" not found\");\n        return null;\n      }\n    } else {\n      filePath \u003d new Path(name);\n      if (!fs.exists(filePath)) {\n        LOG.info(filePath + \" not found\");\n        return null;\n      }\n    }\n    return fs.open(filePath);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 9:52 AM",
          "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/02/14 2:50 PM",
          "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 8.79,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,22 @@\n-  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n-      String name) throws IOException, YarnException {\n-    Path configPath \u003d new Path(this.configDir, name);\n-    if (!fs.exists(configPath)) {\n-      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n-          + configDir);\n+  public synchronized InputStream getConfigurationInputStream(\n+      Configuration bootstrapConf, String name) throws IOException,\n+      YarnException {\n+    if (name \u003d\u003d null || name.isEmpty()) {\n+      throw new YarnException(\n+          \"Illegal argument! The parameter should not be null or empty\");\n     }\n-    bootstrapConf.addResource(fs.open(configPath));\n-    return bootstrapConf;\n+    Path filePath;\n+    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n+      filePath \u003d new Path(this.configDir, name);\n+      if (!fs.exists(filePath)) {\n+        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n+            + configDir);\n+      }\n+    } else {\n+      filePath \u003d new Path(name);\n+      if (!fs.exists(filePath)) {\n+        throw new YarnException(\"Can not find file: \" + name);\n+      }\n+    }\n+    return fs.open(filePath);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized InputStream getConfigurationInputStream(\n      Configuration bootstrapConf, String name) throws IOException,\n      YarnException {\n    if (name \u003d\u003d null || name.isEmpty()) {\n      throw new YarnException(\n          \"Illegal argument! The parameter should not be null or empty\");\n    }\n    Path filePath;\n    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n      filePath \u003d new Path(this.configDir, name);\n      if (!fs.exists(filePath)) {\n        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n            + configDir);\n      }\n    } else {\n      filePath \u003d new Path(name);\n      if (!fs.exists(filePath)) {\n        throw new YarnException(\"Can not find file: \" + name);\n      }\n    }\n    return fs.open(filePath);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
          "extendedDetails": {
            "oldValue": "getConfiguration",
            "newValue": "getConfigurationInputStream"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 9:52 AM",
          "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/02/14 2:50 PM",
          "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 8.79,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,22 @@\n-  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n-      String name) throws IOException, YarnException {\n-    Path configPath \u003d new Path(this.configDir, name);\n-    if (!fs.exists(configPath)) {\n-      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n-          + configDir);\n+  public synchronized InputStream getConfigurationInputStream(\n+      Configuration bootstrapConf, String name) throws IOException,\n+      YarnException {\n+    if (name \u003d\u003d null || name.isEmpty()) {\n+      throw new YarnException(\n+          \"Illegal argument! The parameter should not be null or empty\");\n     }\n-    bootstrapConf.addResource(fs.open(configPath));\n-    return bootstrapConf;\n+    Path filePath;\n+    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n+      filePath \u003d new Path(this.configDir, name);\n+      if (!fs.exists(filePath)) {\n+        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n+            + configDir);\n+      }\n+    } else {\n+      filePath \u003d new Path(name);\n+      if (!fs.exists(filePath)) {\n+        throw new YarnException(\"Can not find file: \" + name);\n+      }\n+    }\n+    return fs.open(filePath);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized InputStream getConfigurationInputStream(\n      Configuration bootstrapConf, String name) throws IOException,\n      YarnException {\n    if (name \u003d\u003d null || name.isEmpty()) {\n      throw new YarnException(\n          \"Illegal argument! The parameter should not be null or empty\");\n    }\n    Path filePath;\n    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n      filePath \u003d new Path(this.configDir, name);\n      if (!fs.exists(filePath)) {\n        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n            + configDir);\n      }\n    } else {\n      filePath \u003d new Path(name);\n      if (!fs.exists(filePath)) {\n        throw new YarnException(\"Can not find file: \" + name);\n      }\n    }\n    return fs.open(filePath);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
          "extendedDetails": {
            "oldValue": "Configuration",
            "newValue": "InputStream"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 9:52 AM",
          "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/02/14 2:50 PM",
          "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 8.79,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,22 @@\n-  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n-      String name) throws IOException, YarnException {\n-    Path configPath \u003d new Path(this.configDir, name);\n-    if (!fs.exists(configPath)) {\n-      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n-          + configDir);\n+  public synchronized InputStream getConfigurationInputStream(\n+      Configuration bootstrapConf, String name) throws IOException,\n+      YarnException {\n+    if (name \u003d\u003d null || name.isEmpty()) {\n+      throw new YarnException(\n+          \"Illegal argument! The parameter should not be null or empty\");\n     }\n-    bootstrapConf.addResource(fs.open(configPath));\n-    return bootstrapConf;\n+    Path filePath;\n+    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n+      filePath \u003d new Path(this.configDir, name);\n+      if (!fs.exists(filePath)) {\n+        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n+            + configDir);\n+      }\n+    } else {\n+      filePath \u003d new Path(name);\n+      if (!fs.exists(filePath)) {\n+        throw new YarnException(\"Can not find file: \" + name);\n+      }\n+    }\n+    return fs.open(filePath);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized InputStream getConfigurationInputStream(\n      Configuration bootstrapConf, String name) throws IOException,\n      YarnException {\n    if (name \u003d\u003d null || name.isEmpty()) {\n      throw new YarnException(\n          \"Illegal argument! The parameter should not be null or empty\");\n    }\n    Path filePath;\n    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name)) {\n      filePath \u003d new Path(this.configDir, name);\n      if (!fs.exists(filePath)) {\n        throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n            + configDir);\n      }\n    } else {\n      filePath \u003d new Path(name);\n      if (!fs.exists(filePath)) {\n        throw new YarnException(\"Can not find file: \" + name);\n      }\n    }\n    return fs.open(filePath);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/02/14 2:50 PM",
          "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/02/14 11:07 AM",
          "commitNameOld": "ca72e11158047f3d00db9e9e61c632e757383287",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,10 @@\n-  public synchronized Configuration getConfiguration(String name)\n-      throws IOException, YarnException {\n+  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n+      String name) throws IOException, YarnException {\n     Path configPath \u003d new Path(this.configDir, name);\n     if (!fs.exists(configPath)) {\n       throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n           + configDir);\n     }\n-    Configuration conf \u003d new Configuration(false);\n-    conf.addResource(fs.open(configPath));\n-    return conf;\n+    bootstrapConf.addResource(fs.open(configPath));\n+    return bootstrapConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n      String name) throws IOException, YarnException {\n    Path configPath \u003d new Path(this.configDir, name);\n    if (!fs.exists(configPath)) {\n      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n          + configDir);\n    }\n    bootstrapConf.addResource(fs.open(configPath));\n    return bootstrapConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
          "extendedDetails": {
            "oldValue": "[name-String]",
            "newValue": "[bootstrapConf-Configuration, name-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/02/14 2:50 PM",
          "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/02/14 11:07 AM",
          "commitNameOld": "ca72e11158047f3d00db9e9e61c632e757383287",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,10 @@\n-  public synchronized Configuration getConfiguration(String name)\n-      throws IOException, YarnException {\n+  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n+      String name) throws IOException, YarnException {\n     Path configPath \u003d new Path(this.configDir, name);\n     if (!fs.exists(configPath)) {\n       throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n           + configDir);\n     }\n-    Configuration conf \u003d new Configuration(false);\n-    conf.addResource(fs.open(configPath));\n-    return conf;\n+    bootstrapConf.addResource(fs.open(configPath));\n+    return bootstrapConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Configuration getConfiguration(Configuration bootstrapConf,\n      String name) throws IOException, YarnException {\n    Path configPath \u003d new Path(this.configDir, name);\n    if (!fs.exists(configPath)) {\n      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n          + configDir);\n    }\n    bootstrapConf.addResource(fs.open(configPath));\n    return bootstrapConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca72e11158047f3d00db9e9e61c632e757383287": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1611. Introduced the concept of a configuration provider which can be used by ResourceManager to read configuration locally or from remote systems so as to help RM failover. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/14 11:07 AM",
      "commitName": "ca72e11158047f3d00db9e9e61c632e757383287",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,11 @@\n+  public synchronized Configuration getConfiguration(String name)\n+      throws IOException, YarnException {\n+    Path configPath \u003d new Path(this.configDir, name);\n+    if (!fs.exists(configPath)) {\n+      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n+          + configDir);\n+    }\n+    Configuration conf \u003d new Configuration(false);\n+    conf.addResource(fs.open(configPath));\n+    return conf;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Configuration getConfiguration(String name)\n      throws IOException, YarnException {\n    Path configPath \u003d new Path(this.configDir, name);\n    if (!fs.exists(configPath)) {\n      throw new YarnException(\"Can not find Configuration: \" + name + \" in \"\n          + configDir);\n    }\n    Configuration conf \u003d new Configuration(false);\n    conf.addResource(fs.open(configPath));\n    return conf;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/FileSystemBasedConfigurationProvider.java"
    }
  }
}