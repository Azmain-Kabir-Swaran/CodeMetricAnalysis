{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystemStore.java",
  "functionName": "multipartCopy",
  "functionId": "multipartCopy___srcKey-String__contentLength-long__dstKey-String",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
  "functionStartLine": 340,
  "functionEndLine": 392,
  "numCommitsSeen": 23,
  "timeTaken": 2643,
  "changeHistory": [
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "4d84c814fcaf074022593c057d8f8dec4cd461fa",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9": "Ybodychange",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "4d84c814fcaf074022593c057d8f8dec4cd461fa": "Ybodychange",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15917. AliyunOSS: fix incorrect ReadOps and WriteOps in statistics. Contributed by Jinhu Wu.\n",
      "commitDate": "13/11/18 8:58 PM",
      "commitName": "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "25/09/18 4:48 AM",
      "commitNameOld": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 49.72,
      "commitsBetweenForRepo": 442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   private boolean multipartCopy(String srcKey, long contentLength,\n       String dstKey) {\n     long realPartSize \u003d\n         AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n     int partNum \u003d (int) (contentLength / realPartSize);\n     if (contentLength % realPartSize !\u003d 0) {\n       partNum++;\n     }\n     InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n         new InitiateMultipartUploadRequest(bucketName, dstKey);\n     ObjectMetadata meta \u003d new ObjectMetadata();\n     if (StringUtils.isNotEmpty(serverSideEncryptionAlgorithm)) {\n       meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     initiateMultipartUploadRequest.setObjectMetadata(meta);\n     InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n         ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n     String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n     List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n     try {\n       for (int i \u003d 0; i \u003c partNum; i++) {\n         long skipBytes \u003d realPartSize * i;\n         long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n             realPartSize : contentLength - skipBytes;\n         UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n         partCopyRequest.setSourceBucketName(bucketName);\n         partCopyRequest.setSourceKey(srcKey);\n         partCopyRequest.setBucketName(bucketName);\n         partCopyRequest.setKey(dstKey);\n         partCopyRequest.setUploadId(uploadId);\n         partCopyRequest.setPartSize(size);\n         partCopyRequest.setBeginIndex(skipBytes);\n         partCopyRequest.setPartNumber(i + 1);\n         UploadPartCopyResult partCopyResult \u003d\n             ossClient.uploadPartCopy(partCopyRequest);\n         statistics.incrementWriteOps(1);\n+        statistics.incrementBytesWritten(size);\n         partETags.add(partCopyResult.getPartETag());\n       }\n       CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n           new CompleteMultipartUploadRequest(bucketName, dstKey,\n               uploadId, partETags);\n       CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n           ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n       LOG.debug(completeMultipartUploadResult.getETag());\n       return true;\n     } catch (OSSException | ClientException e) {\n       AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n           new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n       ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean multipartCopy(String srcKey, long contentLength,\n      String dstKey) {\n    long realPartSize \u003d\n        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n    int partNum \u003d (int) (contentLength / realPartSize);\n    if (contentLength % realPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (StringUtils.isNotEmpty(serverSideEncryptionAlgorithm)) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d realPartSize * i;\n        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n            realPartSize : contentLength - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        statistics.incrementBytesWritten(size);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n              uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (OSSException | ClientException e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
      "commitDate": "20/09/16 12:12 AM",
      "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "19/09/16 8:39 PM",
      "commitNameOld": "9cd47602576cd01a905e27642b685905a88eee72",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private boolean multipartCopy(String srcKey, long contentLength,\n       String dstKey) {\n     long realPartSize \u003d\n         AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n     int partNum \u003d (int) (contentLength / realPartSize);\n     if (contentLength % realPartSize !\u003d 0) {\n       partNum++;\n     }\n     InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n         new InitiateMultipartUploadRequest(bucketName, dstKey);\n     ObjectMetadata meta \u003d new ObjectMetadata();\n-    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n+    if (StringUtils.isNotEmpty(serverSideEncryptionAlgorithm)) {\n       meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     initiateMultipartUploadRequest.setObjectMetadata(meta);\n     InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n         ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n     String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n     List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n     try {\n       for (int i \u003d 0; i \u003c partNum; i++) {\n         long skipBytes \u003d realPartSize * i;\n         long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n             realPartSize : contentLength - skipBytes;\n         UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n         partCopyRequest.setSourceBucketName(bucketName);\n         partCopyRequest.setSourceKey(srcKey);\n         partCopyRequest.setBucketName(bucketName);\n         partCopyRequest.setKey(dstKey);\n         partCopyRequest.setUploadId(uploadId);\n         partCopyRequest.setPartSize(size);\n         partCopyRequest.setBeginIndex(skipBytes);\n         partCopyRequest.setPartNumber(i + 1);\n         UploadPartCopyResult partCopyResult \u003d\n             ossClient.uploadPartCopy(partCopyRequest);\n         statistics.incrementWriteOps(1);\n         partETags.add(partCopyResult.getPartETag());\n       }\n       CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n           new CompleteMultipartUploadRequest(bucketName, dstKey,\n               uploadId, partETags);\n       CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n           ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n       LOG.debug(completeMultipartUploadResult.getETag());\n       return true;\n     } catch (OSSException | ClientException e) {\n       AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n           new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n       ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean multipartCopy(String srcKey, long contentLength,\n      String dstKey) {\n    long realPartSize \u003d\n        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n    int partNum \u003d (int) (contentLength / realPartSize);\n    if (contentLength % realPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (StringUtils.isNotEmpty(serverSideEncryptionAlgorithm)) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d realPartSize * i;\n        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n            realPartSize : contentLength - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n              uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (OSSException | ClientException e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
          "commitDate": "06/09/16 8:15 PM",
          "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
          "commitAuthor": "Mingfei",
          "commitDateOld": "06/09/16 8:15 PM",
          "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
          "commitAuthorOld": "Mingfei",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,52 @@\n-  private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n-    int partNum \u003d (int)(dataLen / uploadPartSize);\n-    if (dataLen % uploadPartSize !\u003d 0) {\n+  private boolean multipartCopy(String srcKey, long contentLength,\n+      String dstKey) {\n+    long realPartSize \u003d\n+        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n+    int partNum \u003d (int) (contentLength / realPartSize);\n+    if (contentLength % realPartSize !\u003d 0) {\n       partNum++;\n     }\n     InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n         new InitiateMultipartUploadRequest(bucketName, dstKey);\n     ObjectMetadata meta \u003d new ObjectMetadata();\n     if (!serverSideEncryptionAlgorithm.isEmpty()) {\n       meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     initiateMultipartUploadRequest.setObjectMetadata(meta);\n     InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n         ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n     String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n     List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n     try {\n       for (int i \u003d 0; i \u003c partNum; i++) {\n-        long skipBytes \u003d uploadPartSize * i;\n-        long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n-            uploadPartSize : dataLen - skipBytes;\n+        long skipBytes \u003d realPartSize * i;\n+        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n+            realPartSize : contentLength - skipBytes;\n         UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n         partCopyRequest.setSourceBucketName(bucketName);\n         partCopyRequest.setSourceKey(srcKey);\n         partCopyRequest.setBucketName(bucketName);\n         partCopyRequest.setKey(dstKey);\n         partCopyRequest.setUploadId(uploadId);\n         partCopyRequest.setPartSize(size);\n         partCopyRequest.setBeginIndex(skipBytes);\n         partCopyRequest.setPartNumber(i + 1);\n         UploadPartCopyResult partCopyResult \u003d\n             ossClient.uploadPartCopy(partCopyRequest);\n         statistics.incrementWriteOps(1);\n         partETags.add(partCopyResult.getPartETag());\n       }\n       CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n           new CompleteMultipartUploadRequest(bucketName, dstKey,\n-          uploadId, partETags);\n+              uploadId, partETags);\n       CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n           ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n       LOG.debug(completeMultipartUploadResult.getETag());\n       return true;\n     } catch (OSSException | ClientException e) {\n       AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n           new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n       ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean multipartCopy(String srcKey, long contentLength,\n      String dstKey) {\n    long realPartSize \u003d\n        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n    int partNum \u003d (int) (contentLength / realPartSize);\n    if (contentLength % realPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d realPartSize * i;\n        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n            realPartSize : contentLength - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n              uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (OSSException | ClientException e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
            "newPath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
            "oldMethodName": "multipartCopy",
            "newMethodName": "multipartCopy"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
          "commitDate": "06/09/16 8:15 PM",
          "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
          "commitAuthor": "Mingfei",
          "commitDateOld": "06/09/16 8:15 PM",
          "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
          "commitAuthorOld": "Mingfei",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,52 @@\n-  private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n-    int partNum \u003d (int)(dataLen / uploadPartSize);\n-    if (dataLen % uploadPartSize !\u003d 0) {\n+  private boolean multipartCopy(String srcKey, long contentLength,\n+      String dstKey) {\n+    long realPartSize \u003d\n+        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n+    int partNum \u003d (int) (contentLength / realPartSize);\n+    if (contentLength % realPartSize !\u003d 0) {\n       partNum++;\n     }\n     InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n         new InitiateMultipartUploadRequest(bucketName, dstKey);\n     ObjectMetadata meta \u003d new ObjectMetadata();\n     if (!serverSideEncryptionAlgorithm.isEmpty()) {\n       meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     initiateMultipartUploadRequest.setObjectMetadata(meta);\n     InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n         ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n     String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n     List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n     try {\n       for (int i \u003d 0; i \u003c partNum; i++) {\n-        long skipBytes \u003d uploadPartSize * i;\n-        long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n-            uploadPartSize : dataLen - skipBytes;\n+        long skipBytes \u003d realPartSize * i;\n+        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n+            realPartSize : contentLength - skipBytes;\n         UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n         partCopyRequest.setSourceBucketName(bucketName);\n         partCopyRequest.setSourceKey(srcKey);\n         partCopyRequest.setBucketName(bucketName);\n         partCopyRequest.setKey(dstKey);\n         partCopyRequest.setUploadId(uploadId);\n         partCopyRequest.setPartSize(size);\n         partCopyRequest.setBeginIndex(skipBytes);\n         partCopyRequest.setPartNumber(i + 1);\n         UploadPartCopyResult partCopyResult \u003d\n             ossClient.uploadPartCopy(partCopyRequest);\n         statistics.incrementWriteOps(1);\n         partETags.add(partCopyResult.getPartETag());\n       }\n       CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n           new CompleteMultipartUploadRequest(bucketName, dstKey,\n-          uploadId, partETags);\n+              uploadId, partETags);\n       CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n           ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n       LOG.debug(completeMultipartUploadResult.getETag());\n       return true;\n     } catch (OSSException | ClientException e) {\n       AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n           new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n       ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean multipartCopy(String srcKey, long contentLength,\n      String dstKey) {\n    long realPartSize \u003d\n        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n    int partNum \u003d (int) (contentLength / realPartSize);\n    if (contentLength % realPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d realPartSize * i;\n        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n            realPartSize : contentLength - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n              uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (OSSException | ClientException e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
          "commitDate": "06/09/16 8:15 PM",
          "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
          "commitAuthor": "Mingfei",
          "commitDateOld": "06/09/16 8:15 PM",
          "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
          "commitAuthorOld": "Mingfei",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,52 @@\n-  private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n-    int partNum \u003d (int)(dataLen / uploadPartSize);\n-    if (dataLen % uploadPartSize !\u003d 0) {\n+  private boolean multipartCopy(String srcKey, long contentLength,\n+      String dstKey) {\n+    long realPartSize \u003d\n+        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n+    int partNum \u003d (int) (contentLength / realPartSize);\n+    if (contentLength % realPartSize !\u003d 0) {\n       partNum++;\n     }\n     InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n         new InitiateMultipartUploadRequest(bucketName, dstKey);\n     ObjectMetadata meta \u003d new ObjectMetadata();\n     if (!serverSideEncryptionAlgorithm.isEmpty()) {\n       meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     initiateMultipartUploadRequest.setObjectMetadata(meta);\n     InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n         ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n     String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n     List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n     try {\n       for (int i \u003d 0; i \u003c partNum; i++) {\n-        long skipBytes \u003d uploadPartSize * i;\n-        long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n-            uploadPartSize : dataLen - skipBytes;\n+        long skipBytes \u003d realPartSize * i;\n+        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n+            realPartSize : contentLength - skipBytes;\n         UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n         partCopyRequest.setSourceBucketName(bucketName);\n         partCopyRequest.setSourceKey(srcKey);\n         partCopyRequest.setBucketName(bucketName);\n         partCopyRequest.setKey(dstKey);\n         partCopyRequest.setUploadId(uploadId);\n         partCopyRequest.setPartSize(size);\n         partCopyRequest.setBeginIndex(skipBytes);\n         partCopyRequest.setPartNumber(i + 1);\n         UploadPartCopyResult partCopyResult \u003d\n             ossClient.uploadPartCopy(partCopyRequest);\n         statistics.incrementWriteOps(1);\n         partETags.add(partCopyResult.getPartETag());\n       }\n       CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n           new CompleteMultipartUploadRequest(bucketName, dstKey,\n-          uploadId, partETags);\n+              uploadId, partETags);\n       CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n           ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n       LOG.debug(completeMultipartUploadResult.getETag());\n       return true;\n     } catch (OSSException | ClientException e) {\n       AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n           new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n       ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean multipartCopy(String srcKey, long contentLength,\n      String dstKey) {\n    long realPartSize \u003d\n        AliyunOSSUtils.calculatePartSize(contentLength, uploadPartSize);\n    int partNum \u003d (int) (contentLength / realPartSize);\n    if (contentLength % realPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d realPartSize * i;\n        long size \u003d (realPartSize \u003c contentLength - skipBytes) ?\n            realPartSize : contentLength - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n              uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (OSSException | ClientException e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[srcKey-String, dataLen-long, dstKey-String]",
            "newValue": "[srcKey-String, contentLength-long, dstKey-String]"
          }
        }
      ]
    },
    "4d84c814fcaf074022593c057d8f8dec4cd461fa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13491. Fix several warnings from findbugs. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "4d84c814fcaf074022593c057d8f8dec4cd461fa",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n     int partNum \u003d (int)(dataLen / uploadPartSize);\n     if (dataLen % uploadPartSize !\u003d 0) {\n       partNum++;\n     }\n     InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n         new InitiateMultipartUploadRequest(bucketName, dstKey);\n     ObjectMetadata meta \u003d new ObjectMetadata();\n     if (!serverSideEncryptionAlgorithm.isEmpty()) {\n       meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     initiateMultipartUploadRequest.setObjectMetadata(meta);\n     InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n         ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n     String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n     List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n     try {\n       for (int i \u003d 0; i \u003c partNum; i++) {\n         long skipBytes \u003d uploadPartSize * i;\n         long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n             uploadPartSize : dataLen - skipBytes;\n         UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n         partCopyRequest.setSourceBucketName(bucketName);\n         partCopyRequest.setSourceKey(srcKey);\n         partCopyRequest.setBucketName(bucketName);\n         partCopyRequest.setKey(dstKey);\n         partCopyRequest.setUploadId(uploadId);\n         partCopyRequest.setPartSize(size);\n         partCopyRequest.setBeginIndex(skipBytes);\n         partCopyRequest.setPartNumber(i + 1);\n         UploadPartCopyResult partCopyResult \u003d\n             ossClient.uploadPartCopy(partCopyRequest);\n         statistics.incrementWriteOps(1);\n         partETags.add(partCopyResult.getPartETag());\n       }\n       CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n           new CompleteMultipartUploadRequest(bucketName, dstKey,\n           uploadId, partETags);\n       CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n           ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n       LOG.debug(completeMultipartUploadResult.getETag());\n       return true;\n-    } catch (Exception e) {\n+    } catch (OSSException | ClientException e) {\n       AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n           new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n       ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n    int partNum \u003d (int)(dataLen / uploadPartSize);\n    if (dataLen % uploadPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d uploadPartSize * i;\n        long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n            uploadPartSize : dataLen - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n          uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (OSSException | ClientException e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,49 @@\n+  private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n+    int partNum \u003d (int)(dataLen / uploadPartSize);\n+    if (dataLen % uploadPartSize !\u003d 0) {\n+      partNum++;\n+    }\n+    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n+        new InitiateMultipartUploadRequest(bucketName, dstKey);\n+    ObjectMetadata meta \u003d new ObjectMetadata();\n+    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n+      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n+    }\n+    initiateMultipartUploadRequest.setObjectMetadata(meta);\n+    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n+        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n+    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n+    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n+    try {\n+      for (int i \u003d 0; i \u003c partNum; i++) {\n+        long skipBytes \u003d uploadPartSize * i;\n+        long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n+            uploadPartSize : dataLen - skipBytes;\n+        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n+        partCopyRequest.setSourceBucketName(bucketName);\n+        partCopyRequest.setSourceKey(srcKey);\n+        partCopyRequest.setBucketName(bucketName);\n+        partCopyRequest.setKey(dstKey);\n+        partCopyRequest.setUploadId(uploadId);\n+        partCopyRequest.setPartSize(size);\n+        partCopyRequest.setBeginIndex(skipBytes);\n+        partCopyRequest.setPartNumber(i + 1);\n+        UploadPartCopyResult partCopyResult \u003d\n+            ossClient.uploadPartCopy(partCopyRequest);\n+        statistics.incrementWriteOps(1);\n+        partETags.add(partCopyResult.getPartETag());\n+      }\n+      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n+          new CompleteMultipartUploadRequest(bucketName, dstKey,\n+          uploadId, partETags);\n+      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n+          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n+      LOG.debug(completeMultipartUploadResult.getETag());\n+      return true;\n+    } catch (Exception e) {\n+      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n+          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n+      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n+      return false;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean multipartCopy(String srcKey, long dataLen, String dstKey) {\n    int partNum \u003d (int)(dataLen / uploadPartSize);\n    if (dataLen % uploadPartSize !\u003d 0) {\n      partNum++;\n    }\n    InitiateMultipartUploadRequest initiateMultipartUploadRequest \u003d\n        new InitiateMultipartUploadRequest(bucketName, dstKey);\n    ObjectMetadata meta \u003d new ObjectMetadata();\n    if (!serverSideEncryptionAlgorithm.isEmpty()) {\n      meta.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    initiateMultipartUploadRequest.setObjectMetadata(meta);\n    InitiateMultipartUploadResult initiateMultipartUploadResult \u003d\n        ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);\n    String uploadId \u003d initiateMultipartUploadResult.getUploadId();\n    List\u003cPartETag\u003e partETags \u003d new ArrayList\u003cPartETag\u003e();\n    try {\n      for (int i \u003d 0; i \u003c partNum; i++) {\n        long skipBytes \u003d uploadPartSize * i;\n        long size \u003d (uploadPartSize \u003c dataLen - skipBytes) ?\n            uploadPartSize : dataLen - skipBytes;\n        UploadPartCopyRequest partCopyRequest \u003d new UploadPartCopyRequest();\n        partCopyRequest.setSourceBucketName(bucketName);\n        partCopyRequest.setSourceKey(srcKey);\n        partCopyRequest.setBucketName(bucketName);\n        partCopyRequest.setKey(dstKey);\n        partCopyRequest.setUploadId(uploadId);\n        partCopyRequest.setPartSize(size);\n        partCopyRequest.setBeginIndex(skipBytes);\n        partCopyRequest.setPartNumber(i + 1);\n        UploadPartCopyResult partCopyResult \u003d\n            ossClient.uploadPartCopy(partCopyRequest);\n        statistics.incrementWriteOps(1);\n        partETags.add(partCopyResult.getPartETag());\n      }\n      CompleteMultipartUploadRequest completeMultipartUploadRequest \u003d\n          new CompleteMultipartUploadRequest(bucketName, dstKey,\n          uploadId, partETags);\n      CompleteMultipartUploadResult completeMultipartUploadResult \u003d\n          ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n      LOG.debug(completeMultipartUploadResult.getETag());\n      return true;\n    } catch (Exception e) {\n      AbortMultipartUploadRequest abortMultipartUploadRequest \u003d\n          new AbortMultipartUploadRequest(bucketName, dstKey, uploadId);\n      ossClient.abortMultipartUpload(abortMultipartUploadRequest);\n      return false;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}