{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "reserve",
  "functionId": "reserve___perAllocationResource-Resource__node-FSSchedulerNode__reservedContainer-Container__type-NodeType__schedulerKey-SchedulerRequestKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 700,
  "functionEndLine": 730,
  "numCommitsSeen": 188,
  "timeTaken": 7720,
  "changeHistory": [
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "c3375175d616e0380560f89d491b6b9753a8f3e1",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "5279af7cd4afb090da742a96b5786d9dee6224bc",
    "e88422df45550f788ae8dd73aec84bde28012aeb",
    "7e2837f830382835838c82398db6fc9823d612a7",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "c3375175d616e0380560f89d491b6b9753a8f3e1": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ymultichange(Yparameterchange,Ybodychange)",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "5279af7cd4afb090da742a96b5786d9dee6224bc": "Ymultichange(Yparameterchange,Ybodychange)",
    "e88422df45550f788ae8dd73aec84bde28012aeb": "Ymultichange(Yreturntypechange,Ybodychange)",
    "7e2837f830382835838c82398db6fc9823d612a7": "Ymultichange(Yparameterchange,Ybodychange)",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "25/05/17 2:22 PM",
      "commitNameOld": "87590090c887829e874a7132be9cf8de061437d6",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 24.78,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n       Container reservedContainer, NodeType type,\n       SchedulerRequestKey schedulerKey) {\n \n     RMContainer nodeReservedContainer \u003d node.getReservedContainer();\n     boolean reservableForThisApp \u003d nodeReservedContainer \u003d\u003d null ||\n         nodeReservedContainer.getApplicationAttemptId()\n             .equals(getApplicationAttemptId());\n     if (reservableForThisApp \u0026\u0026!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (reservedContainer \u003d\u003d null) {\n         reservedContainer \u003d\n             createContainer(node, perAllocationResource,\n               schedulerKey);\n-        getMetrics().reserveResource(getUser(),\n+        getMetrics().reserveResource(node.getPartition(), getUser(),\n             reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n                 super.reserve(node, schedulerKey, null, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n         super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n      Container reservedContainer, NodeType type,\n      SchedulerRequestKey schedulerKey) {\n\n    RMContainer nodeReservedContainer \u003d node.getReservedContainer();\n    boolean reservableForThisApp \u003d nodeReservedContainer \u003d\u003d null ||\n        nodeReservedContainer.getApplicationAttemptId()\n            .equals(getApplicationAttemptId());\n    if (reservableForThisApp \u0026\u0026!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, perAllocationResource,\n              schedulerKey);\n        getMetrics().reserveResource(node.getPartition(), getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, schedulerKey, null, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "c3375175d616e0380560f89d491b6b9753a8f3e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
      "commitDate": "12/04/17 2:21 PM",
      "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "05/04/17 4:07 PM",
      "commitNameOld": "a2c57bb70d719f72d59413f33ae67781b583b9f8",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 6.93,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n       Container reservedContainer, NodeType type,\n       SchedulerRequestKey schedulerKey) {\n \n-    if (!reservationExceedsThreshold(node, type)) {\n+    RMContainer nodeReservedContainer \u003d node.getReservedContainer();\n+    boolean reservableForThisApp \u003d nodeReservedContainer \u003d\u003d null ||\n+        nodeReservedContainer.getApplicationAttemptId()\n+            .equals(getApplicationAttemptId());\n+    if (reservableForThisApp \u0026\u0026!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (reservedContainer \u003d\u003d null) {\n         reservedContainer \u003d\n             createContainer(node, perAllocationResource,\n               schedulerKey);\n         getMetrics().reserveResource(getUser(),\n             reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n                 super.reserve(node, schedulerKey, null, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n         super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n      Container reservedContainer, NodeType type,\n      SchedulerRequestKey schedulerKey) {\n\n    RMContainer nodeReservedContainer \u003d node.getReservedContainer();\n    boolean reservableForThisApp \u003d nodeReservedContainer \u003d\u003d null ||\n        nodeReservedContainer.getApplicationAttemptId()\n            .equals(getApplicationAttemptId());\n    if (reservableForThisApp \u0026\u0026!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, perAllocationResource,\n              schedulerKey);\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, schedulerKey, null, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n+  private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n       Container reservedContainer, NodeType type,\n       SchedulerRequestKey schedulerKey) {\n \n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (reservedContainer \u003d\u003d null) {\n         reservedContainer \u003d\n-            createContainer(node, request.getCapability(),\n+            createContainer(node, perAllocationResource,\n               schedulerKey);\n         getMetrics().reserveResource(getUser(),\n             reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n                 super.reserve(node, schedulerKey, null, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n         super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n      Container reservedContainer, NodeType type,\n      SchedulerRequestKey schedulerKey) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, perAllocationResource,\n              schedulerKey);\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, schedulerKey, null, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[request-ResourceRequest, node-FSSchedulerNode, reservedContainer-Container, type-NodeType, schedulerKey-SchedulerRequestKey]",
            "newValue": "[perAllocationResource-Resource, node-FSSchedulerNode, reservedContainer-Container, type-NodeType, schedulerKey-SchedulerRequestKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n+  private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n       Container reservedContainer, NodeType type,\n       SchedulerRequestKey schedulerKey) {\n \n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (reservedContainer \u003d\u003d null) {\n         reservedContainer \u003d\n-            createContainer(node, request.getCapability(),\n+            createContainer(node, perAllocationResource,\n               schedulerKey);\n         getMetrics().reserveResource(getUser(),\n             reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n                 super.reserve(node, schedulerKey, null, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n         super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n         node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n      Container reservedContainer, NodeType type,\n      SchedulerRequestKey schedulerKey) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, perAllocationResource,\n              schedulerKey);\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, schedulerKey, null, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n-      Container reservedContainer, NodeType type) {\n+      Container reservedContainer, NodeType type,\n+      SchedulerRequestKey schedulerKey) {\n \n-    Priority priority \u003d request.getPriority();\n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (reservedContainer \u003d\u003d null) {\n         reservedContainer \u003d\n             createContainer(node, request.getCapability(),\n-              request.getPriority());\n+              schedulerKey);\n         getMetrics().reserveResource(getUser(),\n             reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n-                super.reserve(node, priority, null, reservedContainer);\n-        node.reserveResource(this, priority, rmContainer);\n+                super.reserve(node, schedulerKey, null, reservedContainer);\n+        node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n-        super.reserve(node, priority, rmContainer, reservedContainer);\n-        node.reserveResource(this, priority, rmContainer);\n+        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n+        node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n      Container reservedContainer, NodeType type,\n      SchedulerRequestKey schedulerKey) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, request.getCapability(),\n              schedulerKey);\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, schedulerKey, null, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[request-ResourceRequest, node-FSSchedulerNode, reservedContainer-Container, type-NodeType]",
            "newValue": "[request-ResourceRequest, node-FSSchedulerNode, reservedContainer-Container, type-NodeType, schedulerKey-SchedulerRequestKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n-      Container reservedContainer, NodeType type) {\n+      Container reservedContainer, NodeType type,\n+      SchedulerRequestKey schedulerKey) {\n \n-    Priority priority \u003d request.getPriority();\n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (reservedContainer \u003d\u003d null) {\n         reservedContainer \u003d\n             createContainer(node, request.getCapability(),\n-              request.getPriority());\n+              schedulerKey);\n         getMetrics().reserveResource(getUser(),\n             reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n-                super.reserve(node, priority, null, reservedContainer);\n-        node.reserveResource(this, priority, rmContainer);\n+                super.reserve(node, schedulerKey, null, reservedContainer);\n+        node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n-        super.reserve(node, priority, rmContainer, reservedContainer);\n-        node.reserveResource(this, priority, rmContainer);\n+        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n+        node.reserveResource(this, schedulerKey, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n      Container reservedContainer, NodeType type,\n      SchedulerRequestKey schedulerKey) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, request.getCapability(),\n              schedulerKey);\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, schedulerKey, null, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, schedulerKey, rmContainer, reservedContainer);\n        node.reserveResource(this, schedulerKey, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "5279af7cd4afb090da742a96b5786d9dee6224bc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5082. Limit ContainerId increase in fair scheduler if the num of node app reserved reached the limit (sandflee via asuresh)\n",
      "commitDate": "10/06/16 10:33 PM",
      "commitName": "5279af7cd4afb090da742a96b5786d9dee6224bc",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5082. Limit ContainerId increase in fair scheduler if the num of node app reserved reached the limit (sandflee via asuresh)\n",
          "commitDate": "10/06/16 10:33 PM",
          "commitName": "5279af7cd4afb090da742a96b5786d9dee6224bc",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/05/16 8:54 AM",
          "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 12.57,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,27 @@\n-  private boolean reserve(Priority priority, FSSchedulerNode node,\n-      Container container, NodeType type, boolean alreadyReserved) {\n+  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n+      Container reservedContainer, NodeType type) {\n \n+    Priority priority \u003d request.getPriority();\n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n-      if (!alreadyReserved) {\n-        getMetrics().reserveResource(getUser(), container.getResource());\n+      if (reservedContainer \u003d\u003d null) {\n+        reservedContainer \u003d\n+            createContainer(node, request.getCapability(),\n+              request.getPriority());\n+        getMetrics().reserveResource(getUser(),\n+            reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n-                super.reserve(node, priority, null, container);\n+                super.reserve(node, priority, null, reservedContainer);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n-        super.reserve(node, priority, rmContainer, container);\n+        super.reserve(node, priority, rmContainer, reservedContainer);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n      Container reservedContainer, NodeType type) {\n\n    Priority priority \u003d request.getPriority();\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, request.getCapability(),\n              request.getPriority());\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, priority, null, reservedContainer);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, priority, rmContainer, reservedContainer);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, node-FSSchedulerNode, container-Container, type-NodeType, alreadyReserved-boolean]",
            "newValue": "[request-ResourceRequest, node-FSSchedulerNode, reservedContainer-Container, type-NodeType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5082. Limit ContainerId increase in fair scheduler if the num of node app reserved reached the limit (sandflee via asuresh)\n",
          "commitDate": "10/06/16 10:33 PM",
          "commitName": "5279af7cd4afb090da742a96b5786d9dee6224bc",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/05/16 8:54 AM",
          "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 12.57,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,27 @@\n-  private boolean reserve(Priority priority, FSSchedulerNode node,\n-      Container container, NodeType type, boolean alreadyReserved) {\n+  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n+      Container reservedContainer, NodeType type) {\n \n+    Priority priority \u003d request.getPriority();\n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n-      if (!alreadyReserved) {\n-        getMetrics().reserveResource(getUser(), container.getResource());\n+      if (reservedContainer \u003d\u003d null) {\n+        reservedContainer \u003d\n+            createContainer(node, request.getCapability(),\n+              request.getPriority());\n+        getMetrics().reserveResource(getUser(),\n+            reservedContainer.getResource());\n         RMContainer rmContainer \u003d\n-                super.reserve(node, priority, null, container);\n+                super.reserve(node, priority, null, reservedContainer);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n-        super.reserve(node, priority, rmContainer, container);\n+        super.reserve(node, priority, rmContainer, reservedContainer);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       }\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(ResourceRequest request, FSSchedulerNode node,\n      Container reservedContainer, NodeType type) {\n\n    Priority priority \u003d request.getPriority();\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (reservedContainer \u003d\u003d null) {\n        reservedContainer \u003d\n            createContainer(node, request.getCapability(),\n              request.getPriority());\n        getMetrics().reserveResource(getUser(),\n            reservedContainer.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, priority, null, reservedContainer);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, priority, rmContainer, reservedContainer);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "e88422df45550f788ae8dd73aec84bde28012aeb": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-4477. FairScheduler: Handle condition which can result in an infinite loop in attemptScheduling. (Tao Jie via asuresh)\n",
      "commitDate": "21/12/15 10:41 PM",
      "commitName": "e88422df45550f788ae8dd73aec84bde28012aeb",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4477. FairScheduler: Handle condition which can result in an infinite loop in attemptScheduling. (Tao Jie via asuresh)\n",
          "commitDate": "21/12/15 10:41 PM",
          "commitName": "e88422df45550f788ae8dd73aec84bde28012aeb",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/12/15 12:17 AM",
          "commitNameOld": "2aaed1032719e978660d1f14a8ed299e83b5f65e",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 6.93,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  private void reserve(Priority priority, FSSchedulerNode node,\n+  private boolean reserve(Priority priority, FSSchedulerNode node,\n       Container container, NodeType type, boolean alreadyReserved) {\n \n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (!alreadyReserved) {\n         getMetrics().reserveResource(getUser(), container.getResource());\n         RMContainer rmContainer \u003d\n                 super.reserve(node, priority, null, container);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n         super.reserve(node, priority, rmContainer, container);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       }\n+      return true;\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(Priority priority, FSSchedulerNode node,\n      Container container, NodeType type, boolean alreadyReserved) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (!alreadyReserved) {\n        getMetrics().reserveResource(getUser(), container.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, priority, null, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, priority, rmContainer, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4477. FairScheduler: Handle condition which can result in an infinite loop in attemptScheduling. (Tao Jie via asuresh)\n",
          "commitDate": "21/12/15 10:41 PM",
          "commitName": "e88422df45550f788ae8dd73aec84bde28012aeb",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/12/15 12:17 AM",
          "commitNameOld": "2aaed1032719e978660d1f14a8ed299e83b5f65e",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 6.93,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  private void reserve(Priority priority, FSSchedulerNode node,\n+  private boolean reserve(Priority priority, FSSchedulerNode node,\n       Container container, NodeType type, boolean alreadyReserved) {\n \n     if (!reservationExceedsThreshold(node, type)) {\n       LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n               \" app_id\u003d\" + getApplicationId());\n       if (!alreadyReserved) {\n         getMetrics().reserveResource(getUser(), container.getResource());\n         RMContainer rmContainer \u003d\n                 super.reserve(node, priority, null, container);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       } else {\n         RMContainer rmContainer \u003d node.getReservedContainer();\n         super.reserve(node, priority, rmContainer, container);\n         node.reserveResource(this, priority, rmContainer);\n         setReservation(node);\n       }\n+      return true;\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reserve(Priority priority, FSSchedulerNode node,\n      Container container, NodeType type, boolean alreadyReserved) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (!alreadyReserved) {\n        getMetrics().reserveResource(getUser(), container.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, priority, null, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, priority, rmContainer, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      }\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "7e2837f830382835838c82398db6fc9823d612a7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
      "commitDate": "19/10/15 8:00 PM",
      "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
          "commitDate": "19/10/15 8:00 PM",
          "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "18/09/15 2:02 PM",
          "commitNameOld": "94dec5a9164cd9bc573fbf74e76bcff9e7c5c637",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 31.25,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n   private void reserve(Priority priority, FSSchedulerNode node,\n-      Container container, boolean alreadyReserved) {\n-    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n-        \" app_id\u003d\" + getApplicationId());\n+      Container container, NodeType type, boolean alreadyReserved) {\n \n-    if (!alreadyReserved) {\n-      getMetrics().reserveResource(getUser(), container.getResource());\n-      RMContainer rmContainer \u003d\n-          super.reserve(node, priority, null, container);\n-      node.reserveResource(this, priority, rmContainer);\n-    } else {\n-      RMContainer rmContainer \u003d node.getReservedContainer();\n-      super.reserve(node, priority, rmContainer, container);\n-      node.reserveResource(this, priority, rmContainer);\n+    if (!reservationExceedsThreshold(node, type)) {\n+      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n+              \" app_id\u003d\" + getApplicationId());\n+      if (!alreadyReserved) {\n+        getMetrics().reserveResource(getUser(), container.getResource());\n+        RMContainer rmContainer \u003d\n+                super.reserve(node, priority, null, container);\n+        node.reserveResource(this, priority, rmContainer);\n+        setReservation(node);\n+      } else {\n+        RMContainer rmContainer \u003d node.getReservedContainer();\n+        super.reserve(node, priority, rmContainer, container);\n+        node.reserveResource(this, priority, rmContainer);\n+        setReservation(node);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void reserve(Priority priority, FSSchedulerNode node,\n      Container container, NodeType type, boolean alreadyReserved) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (!alreadyReserved) {\n        getMetrics().reserveResource(getUser(), container.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, priority, null, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, priority, rmContainer, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, node-FSSchedulerNode, container-Container, alreadyReserved-boolean]",
            "newValue": "[priority-Priority, node-FSSchedulerNode, container-Container, type-NodeType, alreadyReserved-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
          "commitDate": "19/10/15 8:00 PM",
          "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "18/09/15 2:02 PM",
          "commitNameOld": "94dec5a9164cd9bc573fbf74e76bcff9e7c5c637",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 31.25,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n   private void reserve(Priority priority, FSSchedulerNode node,\n-      Container container, boolean alreadyReserved) {\n-    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n-        \" app_id\u003d\" + getApplicationId());\n+      Container container, NodeType type, boolean alreadyReserved) {\n \n-    if (!alreadyReserved) {\n-      getMetrics().reserveResource(getUser(), container.getResource());\n-      RMContainer rmContainer \u003d\n-          super.reserve(node, priority, null, container);\n-      node.reserveResource(this, priority, rmContainer);\n-    } else {\n-      RMContainer rmContainer \u003d node.getReservedContainer();\n-      super.reserve(node, priority, rmContainer, container);\n-      node.reserveResource(this, priority, rmContainer);\n+    if (!reservationExceedsThreshold(node, type)) {\n+      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n+              \" app_id\u003d\" + getApplicationId());\n+      if (!alreadyReserved) {\n+        getMetrics().reserveResource(getUser(), container.getResource());\n+        RMContainer rmContainer \u003d\n+                super.reserve(node, priority, null, container);\n+        node.reserveResource(this, priority, rmContainer);\n+        setReservation(node);\n+      } else {\n+        RMContainer rmContainer \u003d node.getReservedContainer();\n+        super.reserve(node, priority, rmContainer, container);\n+        node.reserveResource(this, priority, rmContainer);\n+        setReservation(node);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void reserve(Priority priority, FSSchedulerNode node,\n      Container container, NodeType type, boolean alreadyReserved) {\n\n    if (!reservationExceedsThreshold(node, type)) {\n      LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n              \" app_id\u003d\" + getApplicationId());\n      if (!alreadyReserved) {\n        getMetrics().reserveResource(getUser(), container.getResource());\n        RMContainer rmContainer \u003d\n                super.reserve(node, priority, null, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      } else {\n        RMContainer rmContainer \u003d node.getReservedContainer();\n        super.reserve(node, priority, rmContainer, container);\n        node.reserveResource(this, priority, rmContainer);\n        setReservation(node);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,16 @@\n+  private void reserve(Priority priority, FSSchedulerNode node,\n+      Container container, boolean alreadyReserved) {\n+    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n+        \" app_id\u003d\" + getApplicationId());\n+\n+    if (!alreadyReserved) {\n+      getMetrics().reserveResource(getUser(), container.getResource());\n+      RMContainer rmContainer \u003d\n+          super.reserve(node, priority, null, container);\n+      node.reserveResource(this, priority, rmContainer);\n+    } else {\n+      RMContainer rmContainer \u003d node.getReservedContainer();\n+      super.reserve(node, priority, rmContainer, container);\n+      node.reserveResource(this, priority, rmContainer);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void reserve(Priority priority, FSSchedulerNode node,\n      Container container, boolean alreadyReserved) {\n    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n        \" app_id\u003d\" + getApplicationId());\n\n    if (!alreadyReserved) {\n      getMetrics().reserveResource(getUser(), container.getResource());\n      RMContainer rmContainer \u003d\n          super.reserve(node, priority, null, container);\n      node.reserveResource(this, priority, rmContainer);\n    } else {\n      RMContainer rmContainer \u003d node.getReservedContainer();\n      super.reserve(node, priority, rmContainer, container);\n      node.reserveResource(this, priority, rmContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}