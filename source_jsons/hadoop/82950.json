{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetricsSinkAdapter.java",
  "functionName": "consume",
  "functionId": "consume___buffer-MetricsBuffer",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
  "functionStartLine": 173,
  "functionEndLine": 200,
  "numCommitsSeen": 12,
  "timeTaken": 922,
  "changeHistory": [
    "e5d54ac89a0cdc9698235832021d8bc54f656407",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de"
  ],
  "changeHistoryShort": {
    "e5d54ac89a0cdc9698235832021d8bc54f656407": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e5d54ac89a0cdc9698235832021d8bc54f656407": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9090. Support on-demand publish of metrics. Contributed by Mostafa Elhemali.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1416538 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/12 6:23 AM",
      "commitName": "e5d54ac89a0cdc9698235832021d8bc54f656407",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/07/12 3:38 PM",
      "commitNameOld": "2799d9659db54aae82a719366df953710b050aa9",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 139.66,
      "commitsBetweenForRepo": 783,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   public void consume(MetricsBuffer buffer) {\n     long ts \u003d 0;\n     for (MetricsBuffer.Entry entry : buffer) {\n       if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n         for (MetricsRecordImpl record : entry.records()) {\n           if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n               (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                         \".\"+ record.name() +\" to \"+ name);\n             }\n             sink.putMetrics(metricFilter \u003d\u003d null\n                 ? record\n                 : new MetricsRecordFiltered(record, metricFilter));\n             if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n           }\n         }\n       }\n     }\n     if (ts \u003e 0) {\n       sink.flush();\n       latency.add(Time.now() - ts);\n     }\n+    if (buffer instanceof WaitableMetricsBuffer) {\n+      ((WaitableMetricsBuffer)buffer).notifyAnyWaiters();\n+    }\n     LOG.debug(\"Done\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void consume(MetricsBuffer buffer) {\n    long ts \u003d 0;\n    for (MetricsBuffer.Entry entry : buffer) {\n      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n        for (MetricsRecordImpl record : entry.records()) {\n          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                        \".\"+ record.name() +\" to \"+ name);\n            }\n            sink.putMetrics(metricFilter \u003d\u003d null\n                ? record\n                : new MetricsRecordFiltered(record, metricFilter));\n            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n          }\n        }\n      }\n    }\n    if (ts \u003e 0) {\n      sink.flush();\n      latency.add(Time.now() - ts);\n    }\n    if (buffer instanceof WaitableMetricsBuffer) {\n      ((WaitableMetricsBuffer)buffer).notifyAnyWaiters();\n    }\n    LOG.debug(\"Done\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 322.78,
      "commitsBetweenForRepo": 2187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void consume(MetricsBuffer buffer) {\n     long ts \u003d 0;\n     for (MetricsBuffer.Entry entry : buffer) {\n       if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n         for (MetricsRecordImpl record : entry.records()) {\n           if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n               (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                         \".\"+ record.name() +\" to \"+ name);\n             }\n             sink.putMetrics(metricFilter \u003d\u003d null\n                 ? record\n                 : new MetricsRecordFiltered(record, metricFilter));\n             if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n           }\n         }\n       }\n     }\n     if (ts \u003e 0) {\n       sink.flush();\n-      latency.add(System.currentTimeMillis() - ts);\n+      latency.add(Time.now() - ts);\n     }\n     LOG.debug(\"Done\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void consume(MetricsBuffer buffer) {\n    long ts \u003d 0;\n    for (MetricsBuffer.Entry entry : buffer) {\n      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n        for (MetricsRecordImpl record : entry.records()) {\n          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                        \".\"+ record.name() +\" to \"+ name);\n            }\n            sink.putMetrics(metricFilter \u003d\u003d null\n                ? record\n                : new MetricsRecordFiltered(record, metricFilter));\n            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n          }\n        }\n      }\n    }\n    if (ts \u003e 0) {\n      sink.flush();\n      latency.add(Time.now() - ts);\n    }\n    LOG.debug(\"Done\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void consume(MetricsBuffer buffer) {\n    long ts \u003d 0;\n    for (MetricsBuffer.Entry entry : buffer) {\n      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n        for (MetricsRecordImpl record : entry.records()) {\n          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                        \".\"+ record.name() +\" to \"+ name);\n            }\n            sink.putMetrics(metricFilter \u003d\u003d null\n                ? record\n                : new MetricsRecordFiltered(record, metricFilter));\n            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n          }\n        }\n      }\n    }\n    if (ts \u003e 0) {\n      sink.flush();\n      latency.add(System.currentTimeMillis() - ts);\n    }\n    LOG.debug(\"Done\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void consume(MetricsBuffer buffer) {\n    long ts \u003d 0;\n    for (MetricsBuffer.Entry entry : buffer) {\n      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n        for (MetricsRecordImpl record : entry.records()) {\n          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                        \".\"+ record.name() +\" to \"+ name);\n            }\n            sink.putMetrics(metricFilter \u003d\u003d null\n                ? record\n                : new MetricsRecordFiltered(record, metricFilter));\n            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n          }\n        }\n      }\n    }\n    if (ts \u003e 0) {\n      sink.flush();\n      latency.add(System.currentTimeMillis() - ts);\n    }\n    LOG.debug(\"Done\");\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void consume(MetricsBuffer buffer) {\n    long ts \u003d 0;\n    for (MetricsBuffer.Entry entry : buffer) {\n      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n        for (MetricsRecordImpl record : entry.records()) {\n          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                        \".\"+ record.name() +\" to \"+ name);\n            }\n            sink.putMetrics(metricFilter \u003d\u003d null\n                ? record\n                : new MetricsRecordFiltered(record, metricFilter));\n            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n          }\n        }\n      }\n    }\n    if (ts \u003e 0) {\n      sink.flush();\n      latency.add(System.currentTimeMillis() - ts);\n    }\n    LOG.debug(\"Done\");\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java"
      }
    },
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6919. New metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 12:28 AM",
      "commitName": "827401a9b1d85fe1f443d21ebe9d917ba23153de",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,25 @@\n+  public void consume(MetricsBuffer buffer) {\n+    long ts \u003d 0;\n+    for (MetricsBuffer.Entry entry : buffer) {\n+      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n+        for (MetricsRecordImpl record : entry.records()) {\n+          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n+              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n+                        \".\"+ record.name() +\" to \"+ name);\n+            }\n+            sink.putMetrics(metricFilter \u003d\u003d null\n+                ? record\n+                : new MetricsRecordFiltered(record, metricFilter));\n+            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n+          }\n+        }\n+      }\n+    }\n+    if (ts \u003e 0) {\n+      sink.flush();\n+      latency.add(System.currentTimeMillis() - ts);\n+    }\n+    LOG.debug(\"Done\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void consume(MetricsBuffer buffer) {\n    long ts \u003d 0;\n    for (MetricsBuffer.Entry entry : buffer) {\n      if (sourceFilter \u003d\u003d null || sourceFilter.accepts(entry.name())) {\n        for (MetricsRecordImpl record : entry.records()) {\n          if ((context \u003d\u003d null || context.equals(record.context())) \u0026\u0026\n              (recordFilter \u003d\u003d null || recordFilter.accepts(record))) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Pushing record \"+ entry.name() +\".\"+ record.context() +\n                        \".\"+ record.name() +\" to \"+ name);\n            }\n            sink.putMetrics(metricFilter \u003d\u003d null\n                ? record\n                : new MetricsRecordFiltered(record, metricFilter));\n            if (ts \u003d\u003d 0) ts \u003d record.timestamp();\n          }\n        }\n      }\n    }\n    if (ts \u003e 0) {\n      sink.flush();\n      latency.add(System.currentTimeMillis() - ts);\n    }\n    LOG.debug(\"Done\");\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/impl/MetricsSinkAdapter.java"
    }
  }
}