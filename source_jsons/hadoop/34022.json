{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NumaResourceAllocator.java",
  "functionName": "init",
  "functionId": "init___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/numa/NumaResourceAllocator.java",
  "functionStartLine": 88,
  "functionEndLine": 143,
  "numCommitsSeen": 3,
  "timeTaken": 807,
  "changeHistory": [
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd"
  ],
  "changeHistoryShort": {
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5764. NUMA awareness support for launching containers. Contributed by Devaraj K.\n",
      "commitDate": "13/03/18 12:36 PM",
      "commitName": "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
      "commitAuthor": "Miklos Szegedi",
      "diff": "@@ -0,0 +1,56 @@\n+  public void init(Configuration conf) throws YarnException {\n+    if (conf.getBoolean(YarnConfiguration.NM_NUMA_AWARENESS_READ_TOPOLOGY,\n+        YarnConfiguration.DEFAULT_NM_NUMA_AWARENESS_READ_TOPOLOGY)) {\n+      LOG.info(\"Reading NUMA topology using \u0027numactl --hardware\u0027 command.\");\n+      String cmdOutput \u003d executeNGetCmdOutput(conf);\n+      String[] outputLines \u003d cmdOutput.split(\"\\\\n\");\n+      Pattern pattern \u003d Pattern.compile(NUMA_NODEIDS_REGEX);\n+      String nodeIdsStr \u003d null;\n+      for (String line : outputLines) {\n+        Matcher matcher \u003d pattern.matcher(line);\n+        if (matcher.find()) {\n+          nodeIdsStr \u003d matcher.group(1);\n+          break;\n+        }\n+      }\n+      if (nodeIdsStr \u003d\u003d null) {\n+        throw new YarnException(\"Failed to get numa nodes from\"\n+            + \" \u0027numactl --hardware\u0027 output and output is:\\n\" + cmdOutput);\n+      }\n+      String[] nodeIdCommaSplits \u003d nodeIdsStr.split(\"[,\\\\s]\");\n+      for (String nodeIdOrRange : nodeIdCommaSplits) {\n+        if (nodeIdOrRange.contains(\"-\")) {\n+          String[] beginNEnd \u003d nodeIdOrRange.split(\"-\");\n+          int endNode \u003d Integer.parseInt(beginNEnd[1]);\n+          for (int nodeId \u003d Integer\n+              .parseInt(beginNEnd[0]); nodeId \u003c\u003d endNode; nodeId++) {\n+            long memory \u003d parseMemory(outputLines, String.valueOf(nodeId));\n+            int cpus \u003d parseCpus(outputLines, String.valueOf(nodeId));\n+            addToCollection(String.valueOf(nodeId), memory, cpus);\n+          }\n+        } else {\n+          long memory \u003d parseMemory(outputLines, nodeIdOrRange);\n+          int cpus \u003d parseCpus(outputLines, nodeIdOrRange);\n+          addToCollection(nodeIdOrRange, memory, cpus);\n+        }\n+      }\n+    } else {\n+      LOG.info(\"Reading NUMA topology using configurations.\");\n+      Collection\u003cString\u003e nodeIds \u003d conf\n+          .getStringCollection(YarnConfiguration.NM_NUMA_AWARENESS_NODE_IDS);\n+      for (String nodeId : nodeIds) {\n+        long mem \u003d conf.getLong(\n+            \"yarn.nodemanager.numa-awareness.\" + nodeId + \".memory\",\n+            DEFAULT_NUMA_NODE_MEMORY);\n+        int cpus \u003d conf.getInt(\n+            \"yarn.nodemanager.numa-awareness.\" + nodeId + \".cpus\",\n+            DEFAULT_NUMA_NODE_CPUS);\n+        addToCollection(nodeId, mem, cpus);\n+      }\n+    }\n+    if (numaNodesList.isEmpty()) {\n+      throw new YarnException(\"There are no available NUMA nodes\"\n+          + \" for making containers NUMA aware.\");\n+    }\n+    LOG.info(\"Available numa nodes with capacities : \" + numaNodesList.size());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) throws YarnException {\n    if (conf.getBoolean(YarnConfiguration.NM_NUMA_AWARENESS_READ_TOPOLOGY,\n        YarnConfiguration.DEFAULT_NM_NUMA_AWARENESS_READ_TOPOLOGY)) {\n      LOG.info(\"Reading NUMA topology using \u0027numactl --hardware\u0027 command.\");\n      String cmdOutput \u003d executeNGetCmdOutput(conf);\n      String[] outputLines \u003d cmdOutput.split(\"\\\\n\");\n      Pattern pattern \u003d Pattern.compile(NUMA_NODEIDS_REGEX);\n      String nodeIdsStr \u003d null;\n      for (String line : outputLines) {\n        Matcher matcher \u003d pattern.matcher(line);\n        if (matcher.find()) {\n          nodeIdsStr \u003d matcher.group(1);\n          break;\n        }\n      }\n      if (nodeIdsStr \u003d\u003d null) {\n        throw new YarnException(\"Failed to get numa nodes from\"\n            + \" \u0027numactl --hardware\u0027 output and output is:\\n\" + cmdOutput);\n      }\n      String[] nodeIdCommaSplits \u003d nodeIdsStr.split(\"[,\\\\s]\");\n      for (String nodeIdOrRange : nodeIdCommaSplits) {\n        if (nodeIdOrRange.contains(\"-\")) {\n          String[] beginNEnd \u003d nodeIdOrRange.split(\"-\");\n          int endNode \u003d Integer.parseInt(beginNEnd[1]);\n          for (int nodeId \u003d Integer\n              .parseInt(beginNEnd[0]); nodeId \u003c\u003d endNode; nodeId++) {\n            long memory \u003d parseMemory(outputLines, String.valueOf(nodeId));\n            int cpus \u003d parseCpus(outputLines, String.valueOf(nodeId));\n            addToCollection(String.valueOf(nodeId), memory, cpus);\n          }\n        } else {\n          long memory \u003d parseMemory(outputLines, nodeIdOrRange);\n          int cpus \u003d parseCpus(outputLines, nodeIdOrRange);\n          addToCollection(nodeIdOrRange, memory, cpus);\n        }\n      }\n    } else {\n      LOG.info(\"Reading NUMA topology using configurations.\");\n      Collection\u003cString\u003e nodeIds \u003d conf\n          .getStringCollection(YarnConfiguration.NM_NUMA_AWARENESS_NODE_IDS);\n      for (String nodeId : nodeIds) {\n        long mem \u003d conf.getLong(\n            \"yarn.nodemanager.numa-awareness.\" + nodeId + \".memory\",\n            DEFAULT_NUMA_NODE_MEMORY);\n        int cpus \u003d conf.getInt(\n            \"yarn.nodemanager.numa-awareness.\" + nodeId + \".cpus\",\n            DEFAULT_NUMA_NODE_CPUS);\n        addToCollection(nodeId, mem, cpus);\n      }\n    }\n    if (numaNodesList.isEmpty()) {\n      throw new YarnException(\"There are no available NUMA nodes\"\n          + \" for making containers NUMA aware.\");\n    }\n    LOG.info(\"Available numa nodes with capacities : \" + numaNodesList.size());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/numa/NumaResourceAllocator.java"
    }
  }
}