{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnmanagedAMPoolManager.java",
  "functionName": "launchUAM",
  "functionId": "launchUAM___uamId-String__conf-Configuration__appId-ApplicationId__queueName-String__submitter-String__appNameSuffix-String__keepContainersAcrossApplicationAttempts-boolean__rmName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java",
  "functionStartLine": 214,
  "functionEndLine": 242,
  "numCommitsSeen": 11,
  "timeTaken": 3352,
  "changeHistory": [
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32"
  ],
  "changeHistoryShort": {
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": "Ymultichange(Yparameterchange,Ybodychange)",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Yintroduced"
  },
  "changeHistoryDetails": {
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
      "commitDate": "12/09/18 11:46 AM",
      "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
          "commitDate": "12/09/18 11:46 AM",
          "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "09/07/18 12:27 PM",
          "commitNameOld": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 64.97,
          "commitsBetweenForRepo": 511,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public Token\u003cAMRMTokenIdentifier\u003e launchUAM(String uamId, Configuration conf,\n       ApplicationId appId, String queueName, String submitter,\n-      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts)\n-      throws YarnException, IOException {\n+      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts,\n+      String rmName) throws YarnException, IOException {\n \n     if (this.unmanagedAppMasterMap.containsKey(uamId)) {\n       throw new YarnException(\"UAM \" + uamId + \" already exists\");\n     }\n     UnmanagedApplicationManager uam \u003d createUAM(conf, appId, queueName,\n-        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts);\n+        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts,\n+        rmName);\n     // Put the UAM into map first before initializing it to avoid additional UAM\n     // for the same uamId being created concurrently\n     this.unmanagedAppMasterMap.put(uamId, uam);\n \n     Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n     try {\n       LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\n       amrmToken \u003d uam.launchUAM();\n     } catch (Exception e) {\n       // Add the map earlier and remove here if register failed because we want\n       // to make sure there is only one uam instance per uamId at any given time\n       this.unmanagedAppMasterMap.remove(uamId);\n       throw e;\n     }\n \n     this.appIdMap.put(uamId, uam.getAppId());\n     return amrmToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003cAMRMTokenIdentifier\u003e launchUAM(String uamId, Configuration conf,\n      ApplicationId appId, String queueName, String submitter,\n      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts,\n      String rmName) throws YarnException, IOException {\n\n    if (this.unmanagedAppMasterMap.containsKey(uamId)) {\n      throw new YarnException(\"UAM \" + uamId + \" already exists\");\n    }\n    UnmanagedApplicationManager uam \u003d createUAM(conf, appId, queueName,\n        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts,\n        rmName);\n    // Put the UAM into map first before initializing it to avoid additional UAM\n    // for the same uamId being created concurrently\n    this.unmanagedAppMasterMap.put(uamId, uam);\n\n    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n    try {\n      LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\n      amrmToken \u003d uam.launchUAM();\n    } catch (Exception e) {\n      // Add the map earlier and remove here if register failed because we want\n      // to make sure there is only one uam instance per uamId at any given time\n      this.unmanagedAppMasterMap.remove(uamId);\n      throw e;\n    }\n\n    this.appIdMap.put(uamId, uam.getAppId());\n    return amrmToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java",
          "extendedDetails": {
            "oldValue": "[uamId-String, conf-Configuration, appId-ApplicationId, queueName-String, submitter-String, appNameSuffix-String, keepContainersAcrossApplicationAttempts-boolean]",
            "newValue": "[uamId-String, conf-Configuration, appId-ApplicationId, queueName-String, submitter-String, appNameSuffix-String, keepContainersAcrossApplicationAttempts-boolean, rmName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
          "commitDate": "12/09/18 11:46 AM",
          "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "09/07/18 12:27 PM",
          "commitNameOld": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 64.97,
          "commitsBetweenForRepo": 511,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public Token\u003cAMRMTokenIdentifier\u003e launchUAM(String uamId, Configuration conf,\n       ApplicationId appId, String queueName, String submitter,\n-      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts)\n-      throws YarnException, IOException {\n+      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts,\n+      String rmName) throws YarnException, IOException {\n \n     if (this.unmanagedAppMasterMap.containsKey(uamId)) {\n       throw new YarnException(\"UAM \" + uamId + \" already exists\");\n     }\n     UnmanagedApplicationManager uam \u003d createUAM(conf, appId, queueName,\n-        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts);\n+        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts,\n+        rmName);\n     // Put the UAM into map first before initializing it to avoid additional UAM\n     // for the same uamId being created concurrently\n     this.unmanagedAppMasterMap.put(uamId, uam);\n \n     Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n     try {\n       LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\n       amrmToken \u003d uam.launchUAM();\n     } catch (Exception e) {\n       // Add the map earlier and remove here if register failed because we want\n       // to make sure there is only one uam instance per uamId at any given time\n       this.unmanagedAppMasterMap.remove(uamId);\n       throw e;\n     }\n \n     this.appIdMap.put(uamId, uam.getAppId());\n     return amrmToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003cAMRMTokenIdentifier\u003e launchUAM(String uamId, Configuration conf,\n      ApplicationId appId, String queueName, String submitter,\n      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts,\n      String rmName) throws YarnException, IOException {\n\n    if (this.unmanagedAppMasterMap.containsKey(uamId)) {\n      throw new YarnException(\"UAM \" + uamId + \" already exists\");\n    }\n    UnmanagedApplicationManager uam \u003d createUAM(conf, appId, queueName,\n        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts,\n        rmName);\n    // Put the UAM into map first before initializing it to avoid additional UAM\n    // for the same uamId being created concurrently\n    this.unmanagedAppMasterMap.put(uamId, uam);\n\n    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n    try {\n      LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\n      amrmToken \u003d uam.launchUAM();\n    } catch (Exception e) {\n      // Add the map earlier and remove here if register failed because we want\n      // to make sure there is only one uam instance per uamId at any given time\n      this.unmanagedAppMasterMap.remove(uamId);\n      throw e;\n    }\n\n    this.appIdMap.put(uamId, uam.getAppId());\n    return amrmToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,28 @@\n+  public Token\u003cAMRMTokenIdentifier\u003e launchUAM(String uamId, Configuration conf,\n+      ApplicationId appId, String queueName, String submitter,\n+      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts)\n+      throws YarnException, IOException {\n+\n+    if (this.unmanagedAppMasterMap.containsKey(uamId)) {\n+      throw new YarnException(\"UAM \" + uamId + \" already exists\");\n+    }\n+    UnmanagedApplicationManager uam \u003d createUAM(conf, appId, queueName,\n+        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts);\n+    // Put the UAM into map first before initializing it to avoid additional UAM\n+    // for the same uamId being created concurrently\n+    this.unmanagedAppMasterMap.put(uamId, uam);\n+\n+    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n+    try {\n+      LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\n+      amrmToken \u003d uam.launchUAM();\n+    } catch (Exception e) {\n+      // Add the map earlier and remove here if register failed because we want\n+      // to make sure there is only one uam instance per uamId at any given time\n+      this.unmanagedAppMasterMap.remove(uamId);\n+      throw e;\n+    }\n+\n+    this.appIdMap.put(uamId, uam.getAppId());\n+    return amrmToken;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cAMRMTokenIdentifier\u003e launchUAM(String uamId, Configuration conf,\n      ApplicationId appId, String queueName, String submitter,\n      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts)\n      throws YarnException, IOException {\n\n    if (this.unmanagedAppMasterMap.containsKey(uamId)) {\n      throw new YarnException(\"UAM \" + uamId + \" already exists\");\n    }\n    UnmanagedApplicationManager uam \u003d createUAM(conf, appId, queueName,\n        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts);\n    // Put the UAM into map first before initializing it to avoid additional UAM\n    // for the same uamId being created concurrently\n    this.unmanagedAppMasterMap.put(uamId, uam);\n\n    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n    try {\n      LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\n      amrmToken \u003d uam.launchUAM();\n    } catch (Exception e) {\n      // Add the map earlier and remove here if register failed because we want\n      // to make sure there is only one uam instance per uamId at any given time\n      this.unmanagedAppMasterMap.remove(uamId);\n      throw e;\n    }\n\n    this.appIdMap.put(uamId, uam.getAppId());\n    return amrmToken;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java"
    }
  }
}