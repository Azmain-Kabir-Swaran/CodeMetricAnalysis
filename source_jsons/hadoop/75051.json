{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalJavaKeyStoreProvider.java",
  "functionName": "stashOriginalFilePermissions",
  "functionId": "stashOriginalFilePermissions",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
  "functionStartLine": 99,
  "functionEndLine": 120,
  "numCommitsSeen": 6,
  "timeTaken": 592,
  "changeHistory": [
    "860b8373c3a851386b8cd2d4265dd35e5aabc941"
  ],
  "changeHistoryShort": {
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": "Yintroduced"
  },
  "changeHistoryDetails": {
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
      "commitDate": "28/05/15 3:01 PM",
      "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,22 @@\n+  protected void stashOriginalFilePermissions() throws IOException {\n+    // save off permissions in case we need to\n+    // rewrite the keystore in flush()\n+    if (!Shell.WINDOWS) {\n+      Path path \u003d Paths.get(file.getCanonicalPath());\n+      permissions \u003d Files.getPosixFilePermissions(path);\n+    } else {\n+      // On Windows, the JDK does not support the POSIX file permission APIs.\n+      // Instead, we can do a winutils call and translate.\n+      String[] cmd \u003d Shell.getGetPermissionCommand();\n+      String[] args \u003d new String[cmd.length + 1];\n+      System.arraycopy(cmd, 0, args, 0, cmd.length);\n+      args[cmd.length] \u003d file.getCanonicalPath();\n+      String out \u003d Shell.execCommand(args);\n+      StringTokenizer t \u003d new StringTokenizer(out, Shell.TOKEN_SEPARATOR_REGEX);\n+      // The winutils output consists of 10 characters because of the leading\n+      // directory indicator, i.e. \"drwx------\".  The JDK parsing method expects\n+      // a 9-character string, so remove the leading character.\n+      String permString \u003d t.nextToken().substring(1);\n+      permissions \u003d PosixFilePermissions.fromString(permString);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void stashOriginalFilePermissions() throws IOException {\n    // save off permissions in case we need to\n    // rewrite the keystore in flush()\n    if (!Shell.WINDOWS) {\n      Path path \u003d Paths.get(file.getCanonicalPath());\n      permissions \u003d Files.getPosixFilePermissions(path);\n    } else {\n      // On Windows, the JDK does not support the POSIX file permission APIs.\n      // Instead, we can do a winutils call and translate.\n      String[] cmd \u003d Shell.getGetPermissionCommand();\n      String[] args \u003d new String[cmd.length + 1];\n      System.arraycopy(cmd, 0, args, 0, cmd.length);\n      args[cmd.length] \u003d file.getCanonicalPath();\n      String out \u003d Shell.execCommand(args);\n      StringTokenizer t \u003d new StringTokenizer(out, Shell.TOKEN_SEPARATOR_REGEX);\n      // The winutils output consists of 10 characters because of the leading\n      // directory indicator, i.e. \"drwx------\".  The JDK parsing method expects\n      // a 9-character string, so remove the leading character.\n      String permString \u003d t.nextToken().substring(1);\n      permissions \u003d PosixFilePermissions.fromString(permString);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java"
    }
  }
}