{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractClientProvider.java",
  "functionName": "validateConfigFiles",
  "functionId": "validateConfigFiles___configFiles-List__ConfigFile____compName-String__fs-FileSystem",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
  "functionStartLine": 82,
  "functionEndLine": 149,
  "numCommitsSeen": 28,
  "timeTaken": 4225,
  "changeHistory": [
    "8d3c068e59fdddd18e3f8260713fee83c458aa1d",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1",
    "37f4696a9cc9284b242215f56a10990e1028d40c",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "a0574e7f4f5a6e53677ada4381db5504f263d70f",
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99"
  ],
  "changeHistoryShort": {
    "8d3c068e59fdddd18e3f8260713fee83c458aa1d": "Ymultichange(Yparameterchange,Ybodychange)",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": "Ybodychange",
    "37f4696a9cc9284b242215f56a10990e1028d40c": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yfilerename",
    "a0574e7f4f5a6e53677ada4381db5504f263d70f": "Ymultichange(Yparameterchange,Ybodychange)",
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8d3c068e59fdddd18e3f8260713fee83c458aa1d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8429. Improve diagnostic message when artifact is not set properly.\n           Contributed by Gour Saha\n",
      "commitDate": "26/07/18 5:02 PM",
      "commitName": "8d3c068e59fdddd18e3f8260713fee83c458aa1d",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8429. Improve diagnostic message when artifact is not set properly.\n           Contributed by Gour Saha\n",
          "commitDate": "26/07/18 5:02 PM",
          "commitName": "8d3c068e59fdddd18e3f8260713fee83c458aa1d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 44.35,
          "commitsBetweenForRepo": 274,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,68 @@\n-  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n+  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, String compName,\n       FileSystem fs) throws IOException {\n     Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n \n     for (ConfigFile file : configFiles) {\n       if (file.getType() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"File type is empty\");\n       }\n       ConfigFile.TypeEnum fileType \u003d file.getType();\n \n       if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\n         if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n             !file.getProperties().containsKey(CONTENT)) {\n           throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                   \"format, either src_file must be specified in ConfigFile,\" +\n                   \" or the \\\"{1}\\\" key must be specified in \" +\n                   \"the \u0027properties\u0027 field of ConfigFile. \",\n               ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n         }\n       } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(\n           ConfigFile.TypeEnum.ARCHIVE)) {\n         if (!file.getProperties().isEmpty()) {\n           throw new IllegalArgumentException(String\n               .format(\"For %s format, should not specify any \u0027properties.\u0027\",\n                   fileType));\n         }\n \n         String srcFile \u003d file.getSrcFile();\n         if (srcFile \u003d\u003d null || srcFile.isEmpty()) {\n           throw new IllegalArgumentException(String.format(\n               \"For %s format, should make sure that srcFile is specified\",\n               fileType));\n         }\n         FileStatus fileStatus \u003d fs.getFileStatus(new Path(srcFile));\n         if (fileStatus !\u003d null \u0026\u0026 fileStatus.isDirectory()) {\n           throw new IllegalArgumentException(\"srcFile\u003d\" + srcFile +\n               \" is a directory, which is not supported.\");\n         }\n       }\n       if (!StringUtils.isEmpty(file.getSrcFile())) {\n         Path p \u003d new Path(file.getSrcFile());\n         if (!fs.exists(p)) {\n           throw new IllegalArgumentException(\n               \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                   + file.getSrcFile());\n         }\n       }\n \n       if (StringUtils.isEmpty(file.getDestFile())) {\n-        throw new IllegalArgumentException(\"Dest_file is empty.\");\n+        throw new IllegalArgumentException(\"dest_file is empty.\");\n       }\n \n       if (destFileSet.contains(file.getDestFile())) {\n         throw new IllegalArgumentException(\n             \"Duplicated ConfigFile exists: \" + file.getDestFile());\n       }\n       destFileSet.add(file.getDestFile());\n \n       java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n       if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n         throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n             \"than one path element\");\n       }\n \n       // provider-specific validation\n-      validateConfigFile(file, fs);\n+      validateConfigFile(file, compName, fs);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, String compName,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n      ConfigFile.TypeEnum fileType \u003d file.getType();\n\n      if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\n        if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n            !file.getProperties().containsKey(CONTENT)) {\n          throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                  \"format, either src_file must be specified in ConfigFile,\" +\n                  \" or the \\\"{1}\\\" key must be specified in \" +\n                  \"the \u0027properties\u0027 field of ConfigFile. \",\n              ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n        }\n      } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(\n          ConfigFile.TypeEnum.ARCHIVE)) {\n        if (!file.getProperties().isEmpty()) {\n          throw new IllegalArgumentException(String\n              .format(\"For %s format, should not specify any \u0027properties.\u0027\",\n                  fileType));\n        }\n\n        String srcFile \u003d file.getSrcFile();\n        if (srcFile \u003d\u003d null || srcFile.isEmpty()) {\n          throw new IllegalArgumentException(String.format(\n              \"For %s format, should make sure that srcFile is specified\",\n              fileType));\n        }\n        FileStatus fileStatus \u003d fs.getFileStatus(new Path(srcFile));\n        if (fileStatus !\u003d null \u0026\u0026 fileStatus.isDirectory()) {\n          throw new IllegalArgumentException(\"srcFile\u003d\" + srcFile +\n              \" is a directory, which is not supported.\");\n        }\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                  + file.getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, compName, fs);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
          "extendedDetails": {
            "oldValue": "[configFiles-List\u003cConfigFile\u003e, fs-FileSystem]",
            "newValue": "[configFiles-List\u003cConfigFile\u003e, compName-String, fs-FileSystem]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8429. Improve diagnostic message when artifact is not set properly.\n           Contributed by Gour Saha\n",
          "commitDate": "26/07/18 5:02 PM",
          "commitName": "8d3c068e59fdddd18e3f8260713fee83c458aa1d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 44.35,
          "commitsBetweenForRepo": 274,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,68 @@\n-  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n+  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, String compName,\n       FileSystem fs) throws IOException {\n     Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n \n     for (ConfigFile file : configFiles) {\n       if (file.getType() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"File type is empty\");\n       }\n       ConfigFile.TypeEnum fileType \u003d file.getType();\n \n       if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\n         if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n             !file.getProperties().containsKey(CONTENT)) {\n           throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                   \"format, either src_file must be specified in ConfigFile,\" +\n                   \" or the \\\"{1}\\\" key must be specified in \" +\n                   \"the \u0027properties\u0027 field of ConfigFile. \",\n               ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n         }\n       } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(\n           ConfigFile.TypeEnum.ARCHIVE)) {\n         if (!file.getProperties().isEmpty()) {\n           throw new IllegalArgumentException(String\n               .format(\"For %s format, should not specify any \u0027properties.\u0027\",\n                   fileType));\n         }\n \n         String srcFile \u003d file.getSrcFile();\n         if (srcFile \u003d\u003d null || srcFile.isEmpty()) {\n           throw new IllegalArgumentException(String.format(\n               \"For %s format, should make sure that srcFile is specified\",\n               fileType));\n         }\n         FileStatus fileStatus \u003d fs.getFileStatus(new Path(srcFile));\n         if (fileStatus !\u003d null \u0026\u0026 fileStatus.isDirectory()) {\n           throw new IllegalArgumentException(\"srcFile\u003d\" + srcFile +\n               \" is a directory, which is not supported.\");\n         }\n       }\n       if (!StringUtils.isEmpty(file.getSrcFile())) {\n         Path p \u003d new Path(file.getSrcFile());\n         if (!fs.exists(p)) {\n           throw new IllegalArgumentException(\n               \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                   + file.getSrcFile());\n         }\n       }\n \n       if (StringUtils.isEmpty(file.getDestFile())) {\n-        throw new IllegalArgumentException(\"Dest_file is empty.\");\n+        throw new IllegalArgumentException(\"dest_file is empty.\");\n       }\n \n       if (destFileSet.contains(file.getDestFile())) {\n         throw new IllegalArgumentException(\n             \"Duplicated ConfigFile exists: \" + file.getDestFile());\n       }\n       destFileSet.add(file.getDestFile());\n \n       java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n       if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n         throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n             \"than one path element\");\n       }\n \n       // provider-specific validation\n-      validateConfigFile(file, fs);\n+      validateConfigFile(file, compName, fs);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, String compName,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n      ConfigFile.TypeEnum fileType \u003d file.getType();\n\n      if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\n        if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n            !file.getProperties().containsKey(CONTENT)) {\n          throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                  \"format, either src_file must be specified in ConfigFile,\" +\n                  \" or the \\\"{1}\\\" key must be specified in \" +\n                  \"the \u0027properties\u0027 field of ConfigFile. \",\n              ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n        }\n      } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(\n          ConfigFile.TypeEnum.ARCHIVE)) {\n        if (!file.getProperties().isEmpty()) {\n          throw new IllegalArgumentException(String\n              .format(\"For %s format, should not specify any \u0027properties.\u0027\",\n                  fileType));\n        }\n\n        String srcFile \u003d file.getSrcFile();\n        if (srcFile \u003d\u003d null || srcFile.isEmpty()) {\n          throw new IllegalArgumentException(String.format(\n              \"For %s format, should make sure that srcFile is specified\",\n              fileType));\n        }\n        FileStatus fileStatus \u003d fs.getFileStatus(new Path(srcFile));\n        if (fileStatus !\u003d null \u0026\u0026 fileStatus.isDirectory()) {\n          throw new IllegalArgumentException(\"srcFile\u003d\" + srcFile +\n              \" is a directory, which is not supported.\");\n        }\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                  + file.getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, compName, fs);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8079. Support static and archive unmodified local resources in service AM. Contributed by Suma Shivaprasad\n",
      "commitDate": "04/05/18 9:27 AM",
      "commitName": "6795f8072ffbe6138857e77d51af173f33e4e5c1",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "18/01/18 12:11 PM",
      "commitNameOld": "37f4696a9cc9284b242215f56a10990e1028d40c",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 105.84,
      "commitsBetweenForRepo": 1338,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,68 @@\n   public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n       FileSystem fs) throws IOException {\n     Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n \n     for (ConfigFile file : configFiles) {\n       if (file.getType() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"File type is empty\");\n       }\n+      ConfigFile.TypeEnum fileType \u003d file.getType();\n \n-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE)) {\n+      if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\n         if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n             !file.getProperties().containsKey(CONTENT)) {\n           throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                   \"format, either src_file must be specified in ConfigFile,\" +\n                   \" or the \\\"{1}\\\" key must be specified in \" +\n                   \"the \u0027properties\u0027 field of ConfigFile. \",\n               ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n         }\n+      } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(\n+          ConfigFile.TypeEnum.ARCHIVE)) {\n+        if (!file.getProperties().isEmpty()) {\n+          throw new IllegalArgumentException(String\n+              .format(\"For %s format, should not specify any \u0027properties.\u0027\",\n+                  fileType));\n+        }\n+\n+        String srcFile \u003d file.getSrcFile();\n+        if (srcFile \u003d\u003d null || srcFile.isEmpty()) {\n+          throw new IllegalArgumentException(String.format(\n+              \"For %s format, should make sure that srcFile is specified\",\n+              fileType));\n+        }\n+        FileStatus fileStatus \u003d fs.getFileStatus(new Path(srcFile));\n+        if (fileStatus !\u003d null \u0026\u0026 fileStatus.isDirectory()) {\n+          throw new IllegalArgumentException(\"srcFile\u003d\" + srcFile +\n+              \" is a directory, which is not supported.\");\n+        }\n       }\n       if (!StringUtils.isEmpty(file.getSrcFile())) {\n         Path p \u003d new Path(file.getSrcFile());\n         if (!fs.exists(p)) {\n           throw new IllegalArgumentException(\n               \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                   + file.getSrcFile());\n         }\n       }\n \n       if (StringUtils.isEmpty(file.getDestFile())) {\n         throw new IllegalArgumentException(\"Dest_file is empty.\");\n       }\n \n       if (destFileSet.contains(file.getDestFile())) {\n         throw new IllegalArgumentException(\n             \"Duplicated ConfigFile exists: \" + file.getDestFile());\n       }\n       destFileSet.add(file.getDestFile());\n \n       java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n       if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n         throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n             \"than one path element\");\n       }\n \n       // provider-specific validation\n       validateConfigFile(file, fs);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n      ConfigFile.TypeEnum fileType \u003d file.getType();\n\n      if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\n        if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n            !file.getProperties().containsKey(CONTENT)) {\n          throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                  \"format, either src_file must be specified in ConfigFile,\" +\n                  \" or the \\\"{1}\\\" key must be specified in \" +\n                  \"the \u0027properties\u0027 field of ConfigFile. \",\n              ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n        }\n      } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(\n          ConfigFile.TypeEnum.ARCHIVE)) {\n        if (!file.getProperties().isEmpty()) {\n          throw new IllegalArgumentException(String\n              .format(\"For %s format, should not specify any \u0027properties.\u0027\",\n                  fileType));\n        }\n\n        String srcFile \u003d file.getSrcFile();\n        if (srcFile \u003d\u003d null || srcFile.isEmpty()) {\n          throw new IllegalArgumentException(String.format(\n              \"For %s format, should make sure that srcFile is specified\",\n              fileType));\n        }\n        FileStatus fileStatus \u003d fs.getFileStatus(new Path(srcFile));\n        if (fileStatus !\u003d null \u0026\u0026 fileStatus.isDirectory()) {\n          throw new IllegalArgumentException(\"srcFile\u003d\" + srcFile +\n              \" is a directory, which is not supported.\");\n        }\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                  + file.getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
      "extendedDetails": {}
    },
    "37f4696a9cc9284b242215f56a10990e1028d40c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7740. Fix logging for destroy yarn service cli when app does not exist and some minor bugs. Contributed by Jian He\n",
      "commitDate": "18/01/18 12:11 PM",
      "commitName": "37f4696a9cc9284b242215f56a10990e1028d40c",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 72.95,
      "commitsBetweenForRepo": 390,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n       FileSystem fs) throws IOException {\n     Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n \n     for (ConfigFile file : configFiles) {\n       if (file.getType() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"File type is empty\");\n       }\n \n       if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE)) {\n         if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n             !file.getProperties().containsKey(CONTENT)) {\n           throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                   \"format, either src_file must be specified in ConfigFile,\" +\n                   \" or the \\\"{1}\\\" key must be specified in \" +\n                   \"the \u0027properties\u0027 field of ConfigFile. \",\n               ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n         }\n       }\n       if (!StringUtils.isEmpty(file.getSrcFile())) {\n         Path p \u003d new Path(file.getSrcFile());\n         if (!fs.exists(p)) {\n           throw new IllegalArgumentException(\n-              \"Src_file does not exist for config file: \" + file\n-                  .getSrcFile());\n+              \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n+                  + file.getSrcFile());\n         }\n       }\n \n       if (StringUtils.isEmpty(file.getDestFile())) {\n         throw new IllegalArgumentException(\"Dest_file is empty.\");\n       }\n \n       if (destFileSet.contains(file.getDestFile())) {\n         throw new IllegalArgumentException(\n             \"Duplicated ConfigFile exists: \" + file.getDestFile());\n       }\n       destFileSet.add(file.getDestFile());\n \n       java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n       if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n         throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n             \"than one path element\");\n       }\n \n       // provider-specific validation\n       validateConfigFile(file, fs);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE)) {\n        if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n            !file.getProperties().containsKey(CONTENT)) {\n          throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                  \"format, either src_file must be specified in ConfigFile,\" +\n                  \" or the \\\"{1}\\\" key must be specified in \" +\n                  \"the \u0027properties\u0027 field of ConfigFile. \",\n              ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n        }\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Specified src_file does not exist on \" + fs.getScheme() + \": \"\n                  + file.getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n       FileSystem fs) throws IOException {\n     Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n \n     for (ConfigFile file : configFiles) {\n       if (file.getType() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"File type is empty\");\n       }\n \n-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n-          .isEmpty(file.getSrcFile())) {\n-        throw new IllegalArgumentException(\n-            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n-\n+      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE)) {\n+        if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n+            !file.getProperties().containsKey(CONTENT)) {\n+          throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n+                  \"format, either src_file must be specified in ConfigFile,\" +\n+                  \" or the \\\"{1}\\\" key must be specified in \" +\n+                  \"the \u0027properties\u0027 field of ConfigFile. \",\n+              ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n+        }\n       }\n       if (!StringUtils.isEmpty(file.getSrcFile())) {\n         Path p \u003d new Path(file.getSrcFile());\n         if (!fs.exists(p)) {\n           throw new IllegalArgumentException(\n               \"Src_file does not exist for config file: \" + file\n                   .getSrcFile());\n         }\n       }\n \n       if (StringUtils.isEmpty(file.getDestFile())) {\n         throw new IllegalArgumentException(\"Dest_file is empty.\");\n       }\n \n       if (destFileSet.contains(file.getDestFile())) {\n         throw new IllegalArgumentException(\n             \"Duplicated ConfigFile exists: \" + file.getDestFile());\n       }\n       destFileSet.add(file.getDestFile());\n \n       java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n       if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n         throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n             \"than one path element\");\n       }\n \n       // provider-specific validation\n       validateConfigFile(file, fs);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE)) {\n        if (StringUtils.isEmpty(file.getSrcFile()) \u0026\u0026\n            !file.getProperties().containsKey(CONTENT)) {\n          throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" +\n                  \"format, either src_file must be specified in ConfigFile,\" +\n                  \" or the \\\"{1}\\\" key must be specified in \" +\n                  \"the \u0027properties\u0027 field of ConfigFile. \",\n              ConfigFile.TypeEnum.TEMPLATE, CONTENT));\n        }\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Src_file does not exist for config file: \" + file\n                  .getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n          .isEmpty(file.getSrcFile())) {\n        throw new IllegalArgumentException(\n            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Src_file does not exist for config file: \" + file\n                  .getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yfilerename",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n          .isEmpty(file.getSrcFile())) {\n        throw new IllegalArgumentException(\n            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Src_file does not exist for config file: \" + file\n                  .getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/AbstractClientProvider.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractClientProvider.java"
      }
    },
    "a0574e7f4f5a6e53677ada4381db5504f263d70f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,44 @@\n-  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, FileSystem\n-      fileSystem) throws IOException {\n-    for (ConfigFile configFile : configFiles) {\n-      validateConfigFile(configFile, fileSystem);\n+  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n+      FileSystem fs) throws IOException {\n+    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+\n+    for (ConfigFile file : configFiles) {\n+      if (file.getType() \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"File type is empty\");\n+      }\n+\n+      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n+          .isEmpty(file.getSrcFile())) {\n+        throw new IllegalArgumentException(\n+            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n+\n+      }\n+      if (!StringUtils.isEmpty(file.getSrcFile())) {\n+        Path p \u003d new Path(file.getSrcFile());\n+        if (!fs.exists(p)) {\n+          throw new IllegalArgumentException(\n+              \"Src_file does not exist for config file: \" + file\n+                  .getSrcFile());\n+        }\n+      }\n+\n+      if (StringUtils.isEmpty(file.getDestFile())) {\n+        throw new IllegalArgumentException(\"Dest_file is empty.\");\n+      }\n+\n+      if (destFileSet.contains(file.getDestFile())) {\n+        throw new IllegalArgumentException(\n+            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n+      }\n+      destFileSet.add(file.getDestFile());\n+\n+      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n+      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n+        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n+            \"than one path element\");\n+      }\n+\n+      // provider-specific validation\n+      validateConfigFile(file, fs);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n          .isEmpty(file.getSrcFile())) {\n        throw new IllegalArgumentException(\n            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Src_file does not exist for config file: \" + file\n                  .getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/AbstractClientProvider.java",
          "extendedDetails": {
            "oldValue": "[configFiles-List\u003cConfigFile\u003e, fileSystem-FileSystem]",
            "newValue": "[configFiles-List\u003cConfigFile\u003e, fs-FileSystem]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,44 @@\n-  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, FileSystem\n-      fileSystem) throws IOException {\n-    for (ConfigFile configFile : configFiles) {\n-      validateConfigFile(configFile, fileSystem);\n+  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n+      FileSystem fs) throws IOException {\n+    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+\n+    for (ConfigFile file : configFiles) {\n+      if (file.getType() \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"File type is empty\");\n+      }\n+\n+      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n+          .isEmpty(file.getSrcFile())) {\n+        throw new IllegalArgumentException(\n+            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n+\n+      }\n+      if (!StringUtils.isEmpty(file.getSrcFile())) {\n+        Path p \u003d new Path(file.getSrcFile());\n+        if (!fs.exists(p)) {\n+          throw new IllegalArgumentException(\n+              \"Src_file does not exist for config file: \" + file\n+                  .getSrcFile());\n+        }\n+      }\n+\n+      if (StringUtils.isEmpty(file.getDestFile())) {\n+        throw new IllegalArgumentException(\"Dest_file is empty.\");\n+      }\n+\n+      if (destFileSet.contains(file.getDestFile())) {\n+        throw new IllegalArgumentException(\n+            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n+      }\n+      destFileSet.add(file.getDestFile());\n+\n+      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n+      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n+        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n+            \"than one path element\");\n+      }\n+\n+      // provider-specific validation\n+      validateConfigFile(file, fs);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles,\n      FileSystem fs) throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : configFiles) {\n      if (file.getType() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"File type is empty\");\n      }\n\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n          .isEmpty(file.getSrcFile())) {\n        throw new IllegalArgumentException(\n            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Src_file does not exist for config file: \" + file\n                  .getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n\n      java.nio.file.Path destPath \u003d Paths.get(file.getDestFile());\n      if (!destPath.isAbsolute() \u0026\u0026 destPath.getNameCount() \u003e 1) {\n        throw new IllegalArgumentException(\"Non-absolute dest_file has more \" +\n            \"than one path element\");\n      }\n\n      // provider-specific validation\n      validateConfigFile(file, fs);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/AbstractClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,6 @@\n+  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, FileSystem\n+      fileSystem) throws IOException {\n+    for (ConfigFile configFile : configFiles) {\n+      validateConfigFile(configFile, fileSystem);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void validateConfigFiles(List\u003cConfigFile\u003e configFiles, FileSystem\n      fileSystem) throws IOException {\n    for (ConfigFile configFile : configFiles) {\n      validateConfigFile(configFile, fileSystem);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/AbstractClientProvider.java"
    }
  }
}