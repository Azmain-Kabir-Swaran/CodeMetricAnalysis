{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSParentQueue.java",
  "functionName": "updateDemand",
  "functionId": "updateDemand",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
  "functionStartLine": 135,
  "functionEndLine": 160,
  "numCommitsSeen": 43,
  "timeTaken": 2970,
  "changeHistory": [
    "99292adcefdc6b8f280b8e100605fb39f755c38a",
    "86ac1ad9fd65c7dd12278372b369de38dc4616db",
    "82857037b6e960dccdaf9e6b1b238411498a0dfe",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57",
    "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21"
  ],
  "changeHistoryShort": {
    "99292adcefdc6b8f280b8e100605fb39f755c38a": "Ybodychange",
    "86ac1ad9fd65c7dd12278372b369de38dc4616db": "Ybodychange",
    "82857037b6e960dccdaf9e6b1b238411498a0dfe": "Ybodychange",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": "Ybodychange",
    "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689": "Ybodychange",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": "Ybodychange",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": "Ybodychange",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Yintroduced"
  },
  "changeHistoryDetails": {
    "99292adcefdc6b8f280b8e100605fb39f755c38a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage. (Yufei Gu)\n",
      "commitDate": "05/10/17 11:51 PM",
      "commitName": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "31/05/17 3:48 PM",
      "commitNameOld": "d5b71e4175c13679d451710be150fc461a661263",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 127.34,
      "commitsBetweenForRepo": 908,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     writeLock.lock();\n     try {\n       demand \u003d Resources.createResource(0);\n       for (FSQueue childQueue : childQueues) {\n         childQueue.updateDemand();\n         Resource toAdd \u003d childQueue.getDemand();\n         demand \u003d Resources.add(demand, toAdd);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n               toAdd + \"; Total resource demand for \" + getName() +\n               \" now \" + demand);\n         }\n       }\n       // Cap demand to maxShare to limit allocation to maxShare\n-      demand \u003d Resources.componentwiseMin(demand, maxShare);\n+      demand \u003d Resources.componentwiseMin(demand, getMaxShare());\n     } finally {\n       writeLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n-          \"; the max is \" + maxShare);\n+          \"; the max is \" + getMaxShare());\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    writeLock.lock();\n    try {\n      demand \u003d Resources.createResource(0);\n      for (FSQueue childQueue : childQueues) {\n        childQueue.updateDemand();\n        Resource toAdd \u003d childQueue.getDemand();\n        demand \u003d Resources.add(demand, toAdd);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n              toAdd + \"; Total resource demand for \" + getName() +\n              \" now \" + demand);\n        }\n      }\n      // Cap demand to maxShare to limit allocation to maxShare\n      demand \u003d Resources.componentwiseMin(demand, getMaxShare());\n    } finally {\n      writeLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + getMaxShare());\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "86ac1ad9fd65c7dd12278372b369de38dc4616db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5453. FairScheduler#update may skip update demand resource of child queue/app if current demand reached maxResource. (sandflee via kasha)\n",
      "commitDate": "09/11/16 11:44 PM",
      "commitName": "86ac1ad9fd65c7dd12278372b369de38dc4616db",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/10/16 10:09 PM",
      "commitNameOld": "82857037b6e960dccdaf9e6b1b238411498a0dfe",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 38.11,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     writeLock.lock();\n     try {\n       demand \u003d Resources.createResource(0);\n       for (FSQueue childQueue : childQueues) {\n         childQueue.updateDemand();\n         Resource toAdd \u003d childQueue.getDemand();\n         demand \u003d Resources.add(demand, toAdd);\n-        demand \u003d Resources.componentwiseMin(demand, maxShare);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n               toAdd + \"; Total resource demand for \" + getName() +\n               \" now \" + demand);\n         }\n-        if (Resources.equals(demand, maxShare)) {\n-          break;\n-        }\n       }\n+      // Cap demand to maxShare to limit allocation to maxShare\n+      demand \u003d Resources.componentwiseMin(demand, maxShare);\n     } finally {\n       writeLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n           \"; the max is \" + maxShare);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    writeLock.lock();\n    try {\n      demand \u003d Resources.createResource(0);\n      for (FSQueue childQueue : childQueues) {\n        childQueue.updateDemand();\n        Resource toAdd \u003d childQueue.getDemand();\n        demand \u003d Resources.add(demand, toAdd);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n              toAdd + \"; Total resource demand for \" + getName() +\n              \" now \" + demand);\n        }\n      }\n      // Cap demand to maxShare to limit allocation to maxShare\n      demand \u003d Resources.componentwiseMin(demand, maxShare);\n    } finally {\n      writeLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxShare);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "82857037b6e960dccdaf9e6b1b238411498a0dfe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5678. Log demand as demand in FSLeafQueue and FSParentQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/10/16 10:09 PM",
      "commitName": "82857037b6e960dccdaf9e6b1b238411498a0dfe",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/09/16 2:56 PM",
      "commitNameOld": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 30.3,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     writeLock.lock();\n     try {\n       demand \u003d Resources.createResource(0);\n       for (FSQueue childQueue : childQueues) {\n         childQueue.updateDemand();\n         Resource toAdd \u003d childQueue.getDemand();\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n-              toAdd + \"; Total resource consumption for \" + getName() +\n-              \" now \" + demand);\n-        }\n         demand \u003d Resources.add(demand, toAdd);\n         demand \u003d Resources.componentwiseMin(demand, maxShare);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n+              toAdd + \"; Total resource demand for \" + getName() +\n+              \" now \" + demand);\n+        }\n         if (Resources.equals(demand, maxShare)) {\n           break;\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n           \"; the max is \" + maxShare);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    writeLock.lock();\n    try {\n      demand \u003d Resources.createResource(0);\n      for (FSQueue childQueue : childQueues) {\n        childQueue.updateDemand();\n        Resource toAdd \u003d childQueue.getDemand();\n        demand \u003d Resources.add(demand, toAdd);\n        demand \u003d Resources.componentwiseMin(demand, maxShare);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n              toAdd + \"; Total resource demand for \" + getName() +\n              \" now \" + demand);\n        }\n        if (Resources.equals(demand, maxShare)) {\n          break;\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxShare);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/09/16 2:56 PM",
      "commitName": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 96.25,
      "commitsBetweenForRepo": 769,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n-        .getMaxResources(getName());\n     writeLock.lock();\n     try {\n       demand \u003d Resources.createResource(0);\n       for (FSQueue childQueue : childQueues) {\n         childQueue.updateDemand();\n         Resource toAdd \u003d childQueue.getDemand();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n               toAdd + \"; Total resource consumption for \" + getName() +\n               \" now \" + demand);\n         }\n         demand \u003d Resources.add(demand, toAdd);\n-        demand \u003d Resources.componentwiseMin(demand, maxRes);\n-        if (Resources.equals(demand, maxRes)) {\n+        demand \u003d Resources.componentwiseMin(demand, maxShare);\n+        if (Resources.equals(demand, maxShare)) {\n           break;\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n-          \"; the max is \" + maxRes);\n+          \"; the max is \" + maxShare);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    writeLock.lock();\n    try {\n      demand \u003d Resources.createResource(0);\n      for (FSQueue childQueue : childQueues) {\n        childQueue.updateDemand();\n        Resource toAdd \u003d childQueue.getDemand();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n              toAdd + \"; Total resource consumption for \" + getName() +\n              \" now \" + demand);\n        }\n        demand \u003d Resources.add(demand, toAdd);\n        demand \u003d Resources.componentwiseMin(demand, maxShare);\n        if (Resources.equals(demand, maxShare)) {\n          break;\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxShare);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3762. FairScheduler: CME on FSParentQueue#getQueueUserAclInfo. (kasha)\n",
      "commitDate": "03/06/15 1:47 PM",
      "commitName": "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/09/14 10:27 AM",
      "commitNameOld": "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 273.14,
      "commitsBetweenForRepo": 2415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d scheduler.getAllocationConfiguration()\n         .getMaxResources(getName());\n-    demand \u003d Resources.createResource(0);\n-    for (FSQueue childQueue : childQueues) {\n-      childQueue.updateDemand();\n-      Resource toAdd \u003d childQueue.getDemand();\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n-            toAdd + \"; Total resource consumption for \" + getName() +\n-            \" now \" + demand);\n+    writeLock.lock();\n+    try {\n+      demand \u003d Resources.createResource(0);\n+      for (FSQueue childQueue : childQueues) {\n+        childQueue.updateDemand();\n+        Resource toAdd \u003d childQueue.getDemand();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n+              toAdd + \"; Total resource consumption for \" + getName() +\n+              \" now \" + demand);\n+        }\n+        demand \u003d Resources.add(demand, toAdd);\n+        demand \u003d Resources.componentwiseMin(demand, maxRes);\n+        if (Resources.equals(demand, maxRes)) {\n+          break;\n+        }\n       }\n-      demand \u003d Resources.add(demand, toAdd);\n-      demand \u003d Resources.componentwiseMin(demand, maxRes);\n-      if (Resources.equals(demand, maxRes)) {\n-        break;\n-      }\n+    } finally {\n+      writeLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n           \"; the max is \" + maxRes);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n        .getMaxResources(getName());\n    writeLock.lock();\n    try {\n      demand \u003d Resources.createResource(0);\n      for (FSQueue childQueue : childQueues) {\n        childQueue.updateDemand();\n        Resource toAdd \u003d childQueue.getDemand();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" +\n              toAdd + \"; Total resource consumption for \" + getName() +\n              \" now \" + demand);\n        }\n        demand \u003d Resources.add(demand, toAdd);\n        demand \u003d Resources.componentwiseMin(demand, maxRes);\n        if (Resources.equals(demand, maxRes)) {\n          break;\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxRes);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 7:26 PM",
      "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "29/11/13 11:02 AM",
      "commitNameOld": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n+    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n+        .getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n     for (FSQueue childQueue : childQueues) {\n       childQueue.updateDemand();\n       Resource toAdd \u003d childQueue.getDemand();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n             toAdd + \"; Total resource consumption for \" + getName() +\n             \" now \" + demand);\n       }\n       demand \u003d Resources.add(demand, toAdd);\n       demand \u003d Resources.componentwiseMin(demand, maxRes);\n       if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n           \"; the max is \" + maxRes);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n        .getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (FSQueue childQueue : childQueues) {\n      childQueue.updateDemand();\n      Resource toAdd \u003d childQueue.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n            toAdd + \"; Total resource consumption for \" + getName() +\n            \" now \" + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      demand \u003d Resources.componentwiseMin(demand, maxRes);\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxRes);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-595. Refactor fair scheduler to use common Resources. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475670 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 1:33 AM",
      "commitName": "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/04/13 11:11 AM",
      "commitNameOld": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.6,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d queueMgr.getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n     for (FSQueue childQueue : childQueues) {\n       childQueue.updateDemand();\n       Resource toAdd \u003d childQueue.getDemand();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n             toAdd + \"; Total resource consumption for \" + getName() +\n             \" now \" + demand);\n       }\n       demand \u003d Resources.add(demand, toAdd);\n-      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n-        demand \u003d maxRes;\n+      demand \u003d Resources.componentwiseMin(demand, maxRes);\n+      if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n           \"; the max is \" + maxRes);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (FSQueue childQueue : childQueues) {\n      childQueue.updateDemand();\n      Resource toAdd \u003d childQueue.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n            toAdd + \"; Total resource consumption for \" + getName() +\n            \" now \" + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      demand \u003d Resources.componentwiseMin(demand, maxRes);\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxRes);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Yintroduced",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "diff": "@@ -0,0 +1,24 @@\n+  public void updateDemand() {\n+    // Compute demand by iterating through apps in the queue\n+    // Limit demand to maxResources\n+    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n+    demand \u003d Resources.createResource(0);\n+    for (FSQueue childQueue : childQueues) {\n+      childQueue.updateDemand();\n+      Resource toAdd \u003d childQueue.getDemand();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n+            toAdd + \"; Total resource consumption for \" + getName() +\n+            \" now \" + demand);\n+      }\n+      demand \u003d Resources.add(demand, toAdd);\n+      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n+        demand \u003d maxRes;\n+        break;\n+      }\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n+          \"; the max is \" + maxRes);\n+    }    \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (FSQueue childQueue : childQueues) {\n      childQueue.updateDemand();\n      Resource toAdd \u003d childQueue.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + childQueue.getName() + \" \" + \n            toAdd + \"; Total resource consumption for \" + getName() +\n            \" now \" + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n        demand \u003d maxRes;\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand +\n          \"; the max is \" + maxRes);\n    }    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java"
    }
  }
}