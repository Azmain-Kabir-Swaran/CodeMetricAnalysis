{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStreamer.java",
  "functionName": "checkRestartingNodeDeadline",
  "functionId": "checkRestartingNodeDeadline___nodes-DatanodeInfo[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
  "functionStartLine": 436,
  "functionEndLine": 465,
  "numCommitsSeen": 53,
  "timeTaken": 2208,
  "changeHistory": [
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "8f378733423a5244461df79a92c00239514b8b93"
  ],
  "changeHistoryShort": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "8f378733423a5244461df79a92c00239514b8b93": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    synchronized void checkRestartingNodeDeadline(DatanodeInfo[] nodes) {\n      if (restartingNodeIndex \u003e\u003d 0) {\n        if (!error) {\n          throw new IllegalStateException(\"error\u003dfalse while checking\" +\n              \" restarting node deadline\");\n        }\n\n        // check badNodeIndex\n        if (badNodeIndex \u003d\u003d restartingNodeIndex) {\n          // ignore, if came from the restarting node\n          badNodeIndex \u003d -1;\n        }\n        // not within the deadline\n        if (Time.monotonicNow() \u003e\u003d restartingNodeDeadline) {\n          // expired. declare the restarting node dead\n          restartingNodeDeadline \u003d 0;\n          final int i \u003d restartingNodeIndex;\n          restartingNodeIndex \u003d -1;\n          LOG.warn(\"Datanode \" + i + \" did not restart within \"\n              + datanodeRestartTimeout + \"ms: \" + nodes[i]);\n          // Mark the restarting node as failed. If there is any other failed\n          // node during the last pipeline construction attempt, it will not be\n          // overwritten/dropped. In this case, the restarting node will get\n          // excluded in the following attempt, if it still does not come up.\n          if (badNodeIndex \u003d\u003d -1) {\n            badNodeIndex \u003d i;\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java"
      }
    },
    "8f378733423a5244461df79a92c00239514b8b93": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8397. Refactor the error handling code in DataStreamer. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "15/05/15 4:14 PM",
      "commitName": "8f378733423a5244461df79a92c00239514b8b93",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,30 @@\n+    synchronized void checkRestartingNodeDeadline(DatanodeInfo[] nodes) {\n+      if (restartingNodeIndex \u003e\u003d 0) {\n+        if (!error) {\n+          throw new IllegalStateException(\"error\u003dfalse while checking\" +\n+              \" restarting node deadline\");\n+        }\n+\n+        // check badNodeIndex\n+        if (badNodeIndex \u003d\u003d restartingNodeIndex) {\n+          // ignore, if came from the restarting node\n+          badNodeIndex \u003d -1;\n+        }\n+        // not within the deadline\n+        if (Time.monotonicNow() \u003e\u003d restartingNodeDeadline) {\n+          // expired. declare the restarting node dead\n+          restartingNodeDeadline \u003d 0;\n+          final int i \u003d restartingNodeIndex;\n+          restartingNodeIndex \u003d -1;\n+          LOG.warn(\"Datanode \" + i + \" did not restart within \"\n+              + datanodeRestartTimeout + \"ms: \" + nodes[i]);\n+          // Mark the restarting node as failed. If there is any other failed\n+          // node during the last pipeline construction attempt, it will not be\n+          // overwritten/dropped. In this case, the restarting node will get\n+          // excluded in the following attempt, if it still does not come up.\n+          if (badNodeIndex \u003d\u003d -1) {\n+            badNodeIndex \u003d i;\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void checkRestartingNodeDeadline(DatanodeInfo[] nodes) {\n      if (restartingNodeIndex \u003e\u003d 0) {\n        if (!error) {\n          throw new IllegalStateException(\"error\u003dfalse while checking\" +\n              \" restarting node deadline\");\n        }\n\n        // check badNodeIndex\n        if (badNodeIndex \u003d\u003d restartingNodeIndex) {\n          // ignore, if came from the restarting node\n          badNodeIndex \u003d -1;\n        }\n        // not within the deadline\n        if (Time.monotonicNow() \u003e\u003d restartingNodeDeadline) {\n          // expired. declare the restarting node dead\n          restartingNodeDeadline \u003d 0;\n          final int i \u003d restartingNodeIndex;\n          restartingNodeIndex \u003d -1;\n          LOG.warn(\"Datanode \" + i + \" did not restart within \"\n              + datanodeRestartTimeout + \"ms: \" + nodes[i]);\n          // Mark the restarting node as failed. If there is any other failed\n          // node during the last pipeline construction attempt, it will not be\n          // overwritten/dropped. In this case, the restarting node will get\n          // excluded in the following attempt, if it still does not come up.\n          if (badNodeIndex \u003d\u003d -1) {\n            badNodeIndex \u003d i;\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java"
    }
  }
}