{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueManager.java",
  "functionName": "buildNewQueueList",
  "functionId": "buildNewQueueList___name-String__newQueueNames-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
  "functionStartLine": 292,
  "functionEndLine": 326,
  "numCommitsSeen": 52,
  "timeTaken": 1508,
  "changeHistory": [
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b"
  ],
  "changeHistoryShort": {
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
      "commitDate": "17/08/16 5:40 PM",
      "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,35 @@\n+  private FSParentQueue buildNewQueueList(String name,\n+      List\u003cString\u003e newQueueNames) {\n+    newQueueNames.add(name);\n+    int sepIndex \u003d name.length();\n+    FSParentQueue parent \u003d null;\n+\n+    // Move up the queue tree until we reach one that exists.\n+    while (sepIndex !\u003d -1) {\n+      int prevSepIndex \u003d sepIndex;\n+      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+      String node \u003d name.substring(sepIndex+1, prevSepIndex);\n+      if (!isQueueNameValid(node)) {\n+        throw new InvalidQueueNameException(\"Illegal node name at offset \" +\n+            (sepIndex+1) + \" for queue name \" + name);\n+      }\n+\n+      String curName \u003d name.substring(0, sepIndex);\n+      FSQueue queue \u003d queues.get(curName);\n+\n+      if (queue \u003d\u003d null) {\n+        newQueueNames.add(0, curName);\n+      } else {\n+        if (queue instanceof FSParentQueue) {\n+          parent \u003d (FSParentQueue)queue;\n+        }\n+\n+        // If the queue isn\u0027t a parent queue, parent will still be null when\n+        // we break\n+\n+        break;\n+      }\n+    }\n+\n+    return parent;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSParentQueue buildNewQueueList(String name,\n      List\u003cString\u003e newQueueNames) {\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      int prevSepIndex \u003d sepIndex;\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      String node \u003d name.substring(sepIndex+1, prevSepIndex);\n      if (!isQueueNameValid(node)) {\n        throw new InvalidQueueNameException(\"Illegal node name at offset \" +\n            (sepIndex+1) + \" for queue name \" + name);\n      }\n\n      String curName \u003d name.substring(0, sepIndex);\n      FSQueue queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(0, curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n        }\n\n        // If the queue isn\u0027t a parent queue, parent will still be null when\n        // we break\n\n        break;\n      }\n    }\n\n    return parent;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java"
    }
  }
}