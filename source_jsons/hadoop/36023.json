{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdminService.java",
  "functionName": "refreshNodesResources",
  "functionId": "refreshNodesResources___request-RefreshNodesResourcesRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
  "functionStartLine": 694,
  "functionEndLine": 739,
  "numCommitsSeen": 78,
  "timeTaken": 3542,
  "changeHistory": [
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
    "c63afdbe14df7359841aa4b213252a8a275e8c4b",
    "524bc3c33aff301c1a8d60ed8e6a3b240e305045",
    "565af873d5e9bc4178f1221805765a417f065192",
    "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc"
  ],
  "changeHistoryShort": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Ybodychange",
    "c63afdbe14df7359841aa4b213252a8a275e8c4b": "Ybodychange",
    "524bc3c33aff301c1a8d60ed8e6a3b240e305045": "Ybodychange",
    "565af873d5e9bc4178f1221805765a417f065192": "Ybodychange",
    "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/05/17 2:44 PM",
      "commitNameOld": "166be0ee95d5ef976f074342656b289b41a11ccd",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 75.35,
      "commitsBetweenForRepo": 358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public RefreshNodesResourcesResponse refreshNodesResources(\n       RefreshNodesResourcesRequest request)\n       throws YarnException, StandbyException {\n     final String operation \u003d \"refreshNodesResources\";\n     UserGroupInformation user \u003d checkAcls(operation);\n     final String msg \u003d \"refresh nodes.\";\n \n     checkRMStatus(user.getShortUserName(), operation, msg);\n \n     RefreshNodesResourcesResponse response \u003d\n         recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n \n     try {\n       Configuration conf \u003d getConfig();\n       Configuration configuration \u003d new Configuration(conf);\n       DynamicResourceConfiguration newConf;\n \n       InputStream drInputStream \u003d\n-          this.rmContext.getConfigurationProvider().getConfigurationInputStream(\n+          this.rm.getRMContext().getConfigurationProvider()\n+              .getConfigurationInputStream(\n               configuration, YarnConfiguration.DR_CONFIGURATION_FILE);\n \n       if (drInputStream !\u003d null) {\n         newConf \u003d new DynamicResourceConfiguration(configuration,\n             drInputStream);\n       } else {\n         newConf \u003d new DynamicResourceConfiguration(configuration);\n       }\n \n       if (newConf.getNodes() !\u003d null \u0026\u0026 newConf.getNodes().length !\u003d 0) {\n         Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n             newConf.getNodeResourceMap();\n         UpdateNodeResourceRequest updateRequest \u003d\n             UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n         updateNodeResource(updateRequest);\n       }\n       // refresh dynamic resource in ResourceTrackerService\n-      this.rmContext.getResourceTrackerService().\n+      this.rm.getRMContext().getResourceTrackerService().\n           updateDynamicResourceConfiguration(newConf);\n       RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n               \"AdminService\");\n       return response;\n     } catch (IOException ioe) {\n       throw logAndWrapException(ioe, user.getShortUserName(), operation, msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RefreshNodesResourcesResponse refreshNodesResources(\n      RefreshNodesResourcesRequest request)\n      throws YarnException, StandbyException {\n    final String operation \u003d \"refreshNodesResources\";\n    UserGroupInformation user \u003d checkAcls(operation);\n    final String msg \u003d \"refresh nodes.\";\n\n    checkRMStatus(user.getShortUserName(), operation, msg);\n\n    RefreshNodesResourcesResponse response \u003d\n        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n\n    try {\n      Configuration conf \u003d getConfig();\n      Configuration configuration \u003d new Configuration(conf);\n      DynamicResourceConfiguration newConf;\n\n      InputStream drInputStream \u003d\n          this.rm.getRMContext().getConfigurationProvider()\n              .getConfigurationInputStream(\n              configuration, YarnConfiguration.DR_CONFIGURATION_FILE);\n\n      if (drInputStream !\u003d null) {\n        newConf \u003d new DynamicResourceConfiguration(configuration,\n            drInputStream);\n      } else {\n        newConf \u003d new DynamicResourceConfiguration(configuration);\n      }\n\n      if (newConf.getNodes() !\u003d null \u0026\u0026 newConf.getNodes().length !\u003d 0) {\n        Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n            newConf.getNodeResourceMap();\n        UpdateNodeResourceRequest updateRequest \u003d\n            UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n        updateNodeResource(updateRequest);\n      }\n      // refresh dynamic resource in ResourceTrackerService\n      this.rm.getRMContext().getResourceTrackerService().\n          updateDynamicResourceConfiguration(newConf);\n      RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n              \"AdminService\");\n      return response;\n    } catch (IOException ioe) {\n      throw logAndWrapException(ioe, user.getShortUserName(), operation, msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "c63afdbe14df7359841aa4b213252a8a275e8c4b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4883. Make consistent operation name in AdminService. Contributed by Kai Sasaki.\n",
      "commitDate": "20/07/16 4:51 PM",
      "commitName": "c63afdbe14df7359841aa4b213252a8a275e8c4b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/04/16 10:31 AM",
      "commitNameOld": "ff95fd547b3030529983fa4e701ac728c54ab63a",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 102.26,
      "commitsBetweenForRepo": 794,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public RefreshNodesResourcesResponse refreshNodesResources(\n       RefreshNodesResourcesRequest request)\n       throws YarnException, StandbyException {\n-    String argName \u003d \"refreshNodesResources\";\n-    UserGroupInformation user \u003d checkAcls(argName);\n+    final String operation \u003d \"refreshNodesResources\";\n+    UserGroupInformation user \u003d checkAcls(operation);\n     final String msg \u003d \"refresh nodes.\";\n \n-    checkRMStatus(user.getShortUserName(), argName, msg);\n+    checkRMStatus(user.getShortUserName(), operation, msg);\n \n     RefreshNodesResourcesResponse response \u003d\n         recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n \n     try {\n       Configuration conf \u003d getConfig();\n       Configuration configuration \u003d new Configuration(conf);\n       DynamicResourceConfiguration newConf;\n \n       InputStream drInputStream \u003d\n           this.rmContext.getConfigurationProvider().getConfigurationInputStream(\n               configuration, YarnConfiguration.DR_CONFIGURATION_FILE);\n \n       if (drInputStream !\u003d null) {\n         newConf \u003d new DynamicResourceConfiguration(configuration,\n             drInputStream);\n       } else {\n         newConf \u003d new DynamicResourceConfiguration(configuration);\n       }\n \n       if (newConf.getNodes() !\u003d null \u0026\u0026 newConf.getNodes().length !\u003d 0) {\n         Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n             newConf.getNodeResourceMap();\n         UpdateNodeResourceRequest updateRequest \u003d\n             UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n         updateNodeResource(updateRequest);\n       }\n       // refresh dynamic resource in ResourceTrackerService\n       this.rmContext.getResourceTrackerService().\n           updateDynamicResourceConfiguration(newConf);\n-      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n+      RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n               \"AdminService\");\n       return response;\n     } catch (IOException ioe) {\n-      throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n+      throw logAndWrapException(ioe, user.getShortUserName(), operation, msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RefreshNodesResourcesResponse refreshNodesResources(\n      RefreshNodesResourcesRequest request)\n      throws YarnException, StandbyException {\n    final String operation \u003d \"refreshNodesResources\";\n    UserGroupInformation user \u003d checkAcls(operation);\n    final String msg \u003d \"refresh nodes.\";\n\n    checkRMStatus(user.getShortUserName(), operation, msg);\n\n    RefreshNodesResourcesResponse response \u003d\n        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n\n    try {\n      Configuration conf \u003d getConfig();\n      Configuration configuration \u003d new Configuration(conf);\n      DynamicResourceConfiguration newConf;\n\n      InputStream drInputStream \u003d\n          this.rmContext.getConfigurationProvider().getConfigurationInputStream(\n              configuration, YarnConfiguration.DR_CONFIGURATION_FILE);\n\n      if (drInputStream !\u003d null) {\n        newConf \u003d new DynamicResourceConfiguration(configuration,\n            drInputStream);\n      } else {\n        newConf \u003d new DynamicResourceConfiguration(configuration);\n      }\n\n      if (newConf.getNodes() !\u003d null \u0026\u0026 newConf.getNodes().length !\u003d 0) {\n        Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n            newConf.getNodeResourceMap();\n        UpdateNodeResourceRequest updateRequest \u003d\n            UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n        updateNodeResource(updateRequest);\n      }\n      // refresh dynamic resource in ResourceTrackerService\n      this.rmContext.getResourceTrackerService().\n          updateDynamicResourceConfiguration(newConf);\n      RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n              \"AdminService\");\n      return response;\n    } catch (IOException ioe) {\n      throw logAndWrapException(ioe, user.getShortUserName(), operation, msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "524bc3c33aff301c1a8d60ed8e6a3b240e305045": {
      "type": "Ybodychange",
      "commitMessage": "YARN-998. Keep NM resource updated through dynamic resource config for RM/NM restart. Contributed by Junping Du\n",
      "commitDate": "28/03/16 11:12 AM",
      "commitName": "524bc3c33aff301c1a8d60ed8e6a3b240e305045",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/02/16 1:31 AM",
      "commitNameOld": "565af873d5e9bc4178f1221805765a417f065192",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 49.36,
      "commitsBetweenForRepo": 305,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n   public RefreshNodesResourcesResponse refreshNodesResources(\n       RefreshNodesResourcesRequest request)\n       throws YarnException, StandbyException {\n     String argName \u003d \"refreshNodesResources\";\n     UserGroupInformation user \u003d checkAcls(argName);\n     final String msg \u003d \"refresh nodes.\";\n \n     checkRMStatus(user.getShortUserName(), argName, msg);\n \n     RefreshNodesResourcesResponse response \u003d\n         recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n \n     try {\n       Configuration conf \u003d getConfig();\n       Configuration configuration \u003d new Configuration(conf);\n-      DynamicResourceConfiguration newconf;\n+      DynamicResourceConfiguration newConf;\n \n-      InputStream DRInputStream \u003d\n-        this.rmContext.getConfigurationProvider()\n-        .getConfigurationInputStream(configuration,\n-          YarnConfiguration.DR_CONFIGURATION_FILE);\n-      if (DRInputStream !\u003d null) {\n-        configuration.addResource(DRInputStream);\n-        newconf \u003d new DynamicResourceConfiguration(configuration, false);\n+      InputStream drInputStream \u003d\n+          this.rmContext.getConfigurationProvider().getConfigurationInputStream(\n+              configuration, YarnConfiguration.DR_CONFIGURATION_FILE);\n+\n+      if (drInputStream !\u003d null) {\n+        newConf \u003d new DynamicResourceConfiguration(configuration,\n+            drInputStream);\n       } else {\n-        newconf \u003d new DynamicResourceConfiguration(configuration, true);\n+        newConf \u003d new DynamicResourceConfiguration(configuration);\n       }\n \n-      if (newconf.getNodes() \u003d\u003d null || newconf.getNodes().length \u003d\u003d 0) {\n-        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n-            \"AdminService\");\n-        return response;\n-      } else {\n+      if (newConf.getNodes() !\u003d null \u0026\u0026 newConf.getNodes().length !\u003d 0) {\n         Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n-          newconf.getNodeResourceMap();\n-\n+            newConf.getNodeResourceMap();\n         UpdateNodeResourceRequest updateRequest \u003d\n-          UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n+            UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n         updateNodeResource(updateRequest);\n-        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n-          \"AdminService\");\n-        return response;\n       }\n+      // refresh dynamic resource in ResourceTrackerService\n+      this.rmContext.getResourceTrackerService().\n+          updateDynamicResourceConfiguration(newConf);\n+      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n+              \"AdminService\");\n+      return response;\n     } catch (IOException ioe) {\n       throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RefreshNodesResourcesResponse refreshNodesResources(\n      RefreshNodesResourcesRequest request)\n      throws YarnException, StandbyException {\n    String argName \u003d \"refreshNodesResources\";\n    UserGroupInformation user \u003d checkAcls(argName);\n    final String msg \u003d \"refresh nodes.\";\n\n    checkRMStatus(user.getShortUserName(), argName, msg);\n\n    RefreshNodesResourcesResponse response \u003d\n        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n\n    try {\n      Configuration conf \u003d getConfig();\n      Configuration configuration \u003d new Configuration(conf);\n      DynamicResourceConfiguration newConf;\n\n      InputStream drInputStream \u003d\n          this.rmContext.getConfigurationProvider().getConfigurationInputStream(\n              configuration, YarnConfiguration.DR_CONFIGURATION_FILE);\n\n      if (drInputStream !\u003d null) {\n        newConf \u003d new DynamicResourceConfiguration(configuration,\n            drInputStream);\n      } else {\n        newConf \u003d new DynamicResourceConfiguration(configuration);\n      }\n\n      if (newConf.getNodes() !\u003d null \u0026\u0026 newConf.getNodes().length !\u003d 0) {\n        Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n            newConf.getNodeResourceMap();\n        UpdateNodeResourceRequest updateRequest \u003d\n            UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n        updateNodeResource(updateRequest);\n      }\n      // refresh dynamic resource in ResourceTrackerService\n      this.rmContext.getResourceTrackerService().\n          updateDynamicResourceConfiguration(newConf);\n      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n              \"AdminService\");\n      return response;\n    } catch (IOException ioe) {\n      throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "565af873d5e9bc4178f1221805765a417f065192": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4667. RM Admin CLI for refreshNodesResources throws NPE when nothing\nis configured. Contributed by Naganarasimha G R.\n",
      "commitDate": "08/02/16 1:31 AM",
      "commitName": "565af873d5e9bc4178f1221805765a417f065192",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "07/01/16 2:33 PM",
      "commitNameOld": "89022f8d4bac0e9d0b848fd91e9c4d700fe1cdbe",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 31.46,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public RefreshNodesResourcesResponse refreshNodesResources(\n       RefreshNodesResourcesRequest request)\n       throws YarnException, StandbyException {\n     String argName \u003d \"refreshNodesResources\";\n     UserGroupInformation user \u003d checkAcls(argName);\n     final String msg \u003d \"refresh nodes.\";\n \n     checkRMStatus(user.getShortUserName(), argName, msg);\n \n     RefreshNodesResourcesResponse response \u003d\n         recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n \n     try {\n       Configuration conf \u003d getConfig();\n       Configuration configuration \u003d new Configuration(conf);\n       DynamicResourceConfiguration newconf;\n \n       InputStream DRInputStream \u003d\n         this.rmContext.getConfigurationProvider()\n         .getConfigurationInputStream(configuration,\n           YarnConfiguration.DR_CONFIGURATION_FILE);\n       if (DRInputStream !\u003d null) {\n         configuration.addResource(DRInputStream);\n         newconf \u003d new DynamicResourceConfiguration(configuration, false);\n       } else {\n         newconf \u003d new DynamicResourceConfiguration(configuration, true);\n       }\n \n-      if (newconf.getNodes().length \u003d\u003d 0) {\n+      if (newconf.getNodes() \u003d\u003d null || newconf.getNodes().length \u003d\u003d 0) {\n         RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n             \"AdminService\");\n         return response;\n       } else {\n         Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n           newconf.getNodeResourceMap();\n \n         UpdateNodeResourceRequest updateRequest \u003d\n           UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n         updateNodeResource(updateRequest);\n         RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n           \"AdminService\");\n         return response;\n       }\n     } catch (IOException ioe) {\n       throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RefreshNodesResourcesResponse refreshNodesResources(\n      RefreshNodesResourcesRequest request)\n      throws YarnException, StandbyException {\n    String argName \u003d \"refreshNodesResources\";\n    UserGroupInformation user \u003d checkAcls(argName);\n    final String msg \u003d \"refresh nodes.\";\n\n    checkRMStatus(user.getShortUserName(), argName, msg);\n\n    RefreshNodesResourcesResponse response \u003d\n        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n\n    try {\n      Configuration conf \u003d getConfig();\n      Configuration configuration \u003d new Configuration(conf);\n      DynamicResourceConfiguration newconf;\n\n      InputStream DRInputStream \u003d\n        this.rmContext.getConfigurationProvider()\n        .getConfigurationInputStream(configuration,\n          YarnConfiguration.DR_CONFIGURATION_FILE);\n      if (DRInputStream !\u003d null) {\n        configuration.addResource(DRInputStream);\n        newconf \u003d new DynamicResourceConfiguration(configuration, false);\n      } else {\n        newconf \u003d new DynamicResourceConfiguration(configuration, true);\n      }\n\n      if (newconf.getNodes() \u003d\u003d null || newconf.getNodes().length \u003d\u003d 0) {\n        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n            \"AdminService\");\n        return response;\n      } else {\n        Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n          newconf.getNodeResourceMap();\n\n        UpdateNodeResourceRequest updateRequest \u003d\n          UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n        updateNodeResource(updateRequest);\n        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n          \"AdminService\");\n        return response;\n      }\n    } catch (IOException ioe) {\n      throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-313. Add Admin API for supporting node resource configuration in command line. (Contributed by Inigo Goiri, Kenji Kikushima and Junping Du)\n",
      "commitDate": "15/09/15 7:56 AM",
      "commitName": "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,47 @@\n+  public RefreshNodesResourcesResponse refreshNodesResources(\n+      RefreshNodesResourcesRequest request)\n+      throws YarnException, StandbyException {\n+    String argName \u003d \"refreshNodesResources\";\n+    UserGroupInformation user \u003d checkAcls(argName);\n+    final String msg \u003d \"refresh nodes.\";\n+\n+    checkRMStatus(user.getShortUserName(), argName, msg);\n+\n+    RefreshNodesResourcesResponse response \u003d\n+        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n+\n+    try {\n+      Configuration conf \u003d getConfig();\n+      Configuration configuration \u003d new Configuration(conf);\n+      DynamicResourceConfiguration newconf;\n+\n+      InputStream DRInputStream \u003d\n+        this.rmContext.getConfigurationProvider()\n+        .getConfigurationInputStream(configuration,\n+          YarnConfiguration.DR_CONFIGURATION_FILE);\n+      if (DRInputStream !\u003d null) {\n+        configuration.addResource(DRInputStream);\n+        newconf \u003d new DynamicResourceConfiguration(configuration, false);\n+      } else {\n+        newconf \u003d new DynamicResourceConfiguration(configuration, true);\n+      }\n+\n+      if (newconf.getNodes().length \u003d\u003d 0) {\n+        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n+            \"AdminService\");\n+        return response;\n+      } else {\n+        Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n+          newconf.getNodeResourceMap();\n+\n+        UpdateNodeResourceRequest updateRequest \u003d\n+          UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n+        updateNodeResource(updateRequest);\n+        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n+          \"AdminService\");\n+        return response;\n+      }\n+    } catch (IOException ioe) {\n+      throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RefreshNodesResourcesResponse refreshNodesResources(\n      RefreshNodesResourcesRequest request)\n      throws YarnException, StandbyException {\n    String argName \u003d \"refreshNodesResources\";\n    UserGroupInformation user \u003d checkAcls(argName);\n    final String msg \u003d \"refresh nodes.\";\n\n    checkRMStatus(user.getShortUserName(), argName, msg);\n\n    RefreshNodesResourcesResponse response \u003d\n        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);\n\n    try {\n      Configuration conf \u003d getConfig();\n      Configuration configuration \u003d new Configuration(conf);\n      DynamicResourceConfiguration newconf;\n\n      InputStream DRInputStream \u003d\n        this.rmContext.getConfigurationProvider()\n        .getConfigurationInputStream(configuration,\n          YarnConfiguration.DR_CONFIGURATION_FILE);\n      if (DRInputStream !\u003d null) {\n        configuration.addResource(DRInputStream);\n        newconf \u003d new DynamicResourceConfiguration(configuration, false);\n      } else {\n        newconf \u003d new DynamicResourceConfiguration(configuration, true);\n      }\n\n      if (newconf.getNodes().length \u003d\u003d 0) {\n        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n            \"AdminService\");\n        return response;\n      } else {\n        Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d\n          newconf.getNodeResourceMap();\n\n        UpdateNodeResourceRequest updateRequest \u003d\n          UpdateNodeResourceRequest.newInstance(nodeResourceMap);\n        updateNodeResource(updateRequest);\n        RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n          \"AdminService\");\n        return response;\n      }\n    } catch (IOException ioe) {\n      throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java"
    }
  }
}