{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DBCountPageView.java",
  "functionName": "populateAccess",
  "functionId": "populateAccess",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/DBCountPageView.java",
  "functionStartLine": 193,
  "functionEndLine": 252,
  "numCommitsSeen": 13,
  "timeTaken": 4527,
  "changeHistory": [
    "2610acf0fb0af873a95d493ff941132c9f403c87",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "2610acf0fb0af873a95d493ff941132c9f403c87": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2610acf0fb0af873a95d493ff941132c9f403c87": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4685. DBCount should not use ACCESS. Contributed by Viji. (harsh)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390372 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 3:21 AM",
      "commitName": "2610acf0fb0af873a95d493ff941132c9f403c87",
      "commitAuthor": "Harsh J",
      "commitDateOld": "06/08/12 11:14 AM",
      "commitNameOld": "117145f1adca05e2242ee851066479dba3981653",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 50.67,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private void populateAccess() throws SQLException {\n \n     PreparedStatement statement \u003d null ;\n     try {\n       statement \u003d connection.prepareStatement(\n-          \"INSERT INTO Access(url, referrer, time)\" +\n+          \"INSERT INTO HAccess(url, referrer, time)\" +\n           \" VALUES (?, ?, ?)\");\n \n       Random random \u003d new Random();\n \n       int time \u003d random.nextInt(50) + 50;\n \n       final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n       final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n \n \n       //Pages in the site :\n       String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n                         \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n       //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n       int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n         {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n \n       //a mini model of user browsing a la pagerank\n       int currentPage \u003d random.nextInt(pages.length); \n       String referrer \u003d null;\n \n       for(int i\u003d0; i\u003ctime; i++) {\n \n         statement.setString(1, pages[currentPage]);\n         statement.setString(2, referrer);\n         statement.setLong(3, i);\n         statement.execute();\n \n         int action \u003d random.nextInt(PROBABILITY_PRECISION);\n \n         // go to a new page with probability \n         // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n         if(action \u003c NEW_PAGE_PROBABILITY) { \n           currentPage \u003d random.nextInt(pages.length); // a random page\n           referrer \u003d null;\n         }\n         else {\n           referrer \u003d pages[currentPage];\n           action \u003d random.nextInt(linkMatrix[currentPage].length);\n           currentPage \u003d linkMatrix[currentPage][action];\n         }\n       }\n       \n       connection.commit();\n       \n     }catch (SQLException ex) {\n       connection.rollback();\n       throw ex;\n     } finally {\n       if(statement !\u003d null) {\n         statement.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void populateAccess() throws SQLException {\n\n    PreparedStatement statement \u003d null ;\n    try {\n      statement \u003d connection.prepareStatement(\n          \"INSERT INTO HAccess(url, referrer, time)\" +\n          \" VALUES (?, ?, ?)\");\n\n      Random random \u003d new Random();\n\n      int time \u003d random.nextInt(50) + 50;\n\n      final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n      final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n\n\n      //Pages in the site :\n      String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n                        \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n      //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n      int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n        {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n\n      //a mini model of user browsing a la pagerank\n      int currentPage \u003d random.nextInt(pages.length); \n      String referrer \u003d null;\n\n      for(int i\u003d0; i\u003ctime; i++) {\n\n        statement.setString(1, pages[currentPage]);\n        statement.setString(2, referrer);\n        statement.setLong(3, i);\n        statement.execute();\n\n        int action \u003d random.nextInt(PROBABILITY_PRECISION);\n\n        // go to a new page with probability \n        // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n        if(action \u003c NEW_PAGE_PROBABILITY) { \n          currentPage \u003d random.nextInt(pages.length); // a random page\n          referrer \u003d null;\n        }\n        else {\n          referrer \u003d pages[currentPage];\n          action \u003d random.nextInt(linkMatrix[currentPage].length);\n          currentPage \u003d linkMatrix[currentPage][action];\n        }\n      }\n      \n      connection.commit();\n      \n    }catch (SQLException ex) {\n      connection.rollback();\n      throw ex;\n    } finally {\n      if(statement !\u003d null) {\n        statement.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/DBCountPageView.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void populateAccess() throws SQLException {\n\n    PreparedStatement statement \u003d null ;\n    try {\n      statement \u003d connection.prepareStatement(\n          \"INSERT INTO Access(url, referrer, time)\" +\n          \" VALUES (?, ?, ?)\");\n\n      Random random \u003d new Random();\n\n      int time \u003d random.nextInt(50) + 50;\n\n      final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n      final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n\n\n      //Pages in the site :\n      String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n                        \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n      //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n      int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n        {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n\n      //a mini model of user browsing a la pagerank\n      int currentPage \u003d random.nextInt(pages.length); \n      String referrer \u003d null;\n\n      for(int i\u003d0; i\u003ctime; i++) {\n\n        statement.setString(1, pages[currentPage]);\n        statement.setString(2, referrer);\n        statement.setLong(3, i);\n        statement.execute();\n\n        int action \u003d random.nextInt(PROBABILITY_PRECISION);\n\n        // go to a new page with probability \n        // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n        if(action \u003c NEW_PAGE_PROBABILITY) { \n          currentPage \u003d random.nextInt(pages.length); // a random page\n          referrer \u003d null;\n        }\n        else {\n          referrer \u003d pages[currentPage];\n          action \u003d random.nextInt(linkMatrix[currentPage].length);\n          currentPage \u003d linkMatrix[currentPage][action];\n        }\n      }\n      \n      connection.commit();\n      \n    }catch (SQLException ex) {\n      connection.rollback();\n      throw ex;\n    } finally {\n      if(statement !\u003d null) {\n        statement.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/DBCountPageView.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/DBCountPageView.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/DBCountPageView.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void populateAccess() throws SQLException {\n\n    PreparedStatement statement \u003d null ;\n    try {\n      statement \u003d connection.prepareStatement(\n          \"INSERT INTO Access(url, referrer, time)\" +\n          \" VALUES (?, ?, ?)\");\n\n      Random random \u003d new Random();\n\n      int time \u003d random.nextInt(50) + 50;\n\n      final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n      final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n\n\n      //Pages in the site :\n      String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n                        \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n      //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n      int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n        {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n\n      //a mini model of user browsing a la pagerank\n      int currentPage \u003d random.nextInt(pages.length); \n      String referrer \u003d null;\n\n      for(int i\u003d0; i\u003ctime; i++) {\n\n        statement.setString(1, pages[currentPage]);\n        statement.setString(2, referrer);\n        statement.setLong(3, i);\n        statement.execute();\n\n        int action \u003d random.nextInt(PROBABILITY_PRECISION);\n\n        // go to a new page with probability \n        // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n        if(action \u003c NEW_PAGE_PROBABILITY) { \n          currentPage \u003d random.nextInt(pages.length); // a random page\n          referrer \u003d null;\n        }\n        else {\n          referrer \u003d pages[currentPage];\n          action \u003d random.nextInt(linkMatrix[currentPage].length);\n          currentPage \u003d linkMatrix[currentPage][action];\n        }\n      }\n      \n      connection.commit();\n      \n    }catch (SQLException ex) {\n      connection.rollback();\n      throw ex;\n    } finally {\n      if(statement !\u003d null) {\n        statement.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/DBCountPageView.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/DBCountPageView.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void populateAccess() throws SQLException {\n\n    PreparedStatement statement \u003d null ;\n    try {\n      statement \u003d connection.prepareStatement(\n          \"INSERT INTO Access(url, referrer, time)\" +\n          \" VALUES (?, ?, ?)\");\n\n      Random random \u003d new Random();\n\n      int time \u003d random.nextInt(50) + 50;\n\n      final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n      final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n\n\n      //Pages in the site :\n      String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n                        \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n      //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n      int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n        {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n\n      //a mini model of user browsing a la pagerank\n      int currentPage \u003d random.nextInt(pages.length); \n      String referrer \u003d null;\n\n      for(int i\u003d0; i\u003ctime; i++) {\n\n        statement.setString(1, pages[currentPage]);\n        statement.setString(2, referrer);\n        statement.setLong(3, i);\n        statement.execute();\n\n        int action \u003d random.nextInt(PROBABILITY_PRECISION);\n\n        // go to a new page with probability \n        // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n        if(action \u003c NEW_PAGE_PROBABILITY) { \n          currentPage \u003d random.nextInt(pages.length); // a random page\n          referrer \u003d null;\n        }\n        else {\n          referrer \u003d pages[currentPage];\n          action \u003d random.nextInt(linkMatrix[currentPage].length);\n          currentPage \u003d linkMatrix[currentPage][action];\n        }\n      }\n      \n      connection.commit();\n      \n    }catch (SQLException ex) {\n      connection.rollback();\n      throw ex;\n    } finally {\n      if(statement !\u003d null) {\n        statement.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,60 @@\n+  private void populateAccess() throws SQLException {\n+\n+    PreparedStatement statement \u003d null ;\n+    try {\n+      statement \u003d connection.prepareStatement(\n+          \"INSERT INTO Access(url, referrer, time)\" +\n+          \" VALUES (?, ?, ?)\");\n+\n+      Random random \u003d new Random();\n+\n+      int time \u003d random.nextInt(50) + 50;\n+\n+      final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n+      final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n+\n+\n+      //Pages in the site :\n+      String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n+                        \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n+      //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n+      int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n+        {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n+\n+      //a mini model of user browsing a la pagerank\n+      int currentPage \u003d random.nextInt(pages.length); \n+      String referrer \u003d null;\n+\n+      for(int i\u003d0; i\u003ctime; i++) {\n+\n+        statement.setString(1, pages[currentPage]);\n+        statement.setString(2, referrer);\n+        statement.setLong(3, i);\n+        statement.execute();\n+\n+        int action \u003d random.nextInt(PROBABILITY_PRECISION);\n+\n+        // go to a new page with probability \n+        // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n+        if(action \u003c NEW_PAGE_PROBABILITY) { \n+          currentPage \u003d random.nextInt(pages.length); // a random page\n+          referrer \u003d null;\n+        }\n+        else {\n+          referrer \u003d pages[currentPage];\n+          action \u003d random.nextInt(linkMatrix[currentPage].length);\n+          currentPage \u003d linkMatrix[currentPage][action];\n+        }\n+      }\n+      \n+      connection.commit();\n+      \n+    }catch (SQLException ex) {\n+      connection.rollback();\n+      throw ex;\n+    } finally {\n+      if(statement !\u003d null) {\n+        statement.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void populateAccess() throws SQLException {\n\n    PreparedStatement statement \u003d null ;\n    try {\n      statement \u003d connection.prepareStatement(\n          \"INSERT INTO Access(url, referrer, time)\" +\n          \" VALUES (?, ?, ?)\");\n\n      Random random \u003d new Random();\n\n      int time \u003d random.nextInt(50) + 50;\n\n      final int PROBABILITY_PRECISION \u003d 100; //  1 / 100 \n      final int NEW_PAGE_PROBABILITY  \u003d 15;  //  15 / 100\n\n\n      //Pages in the site :\n      String[] pages \u003d {\"/a\", \"/b\", \"/c\", \"/d\", \"/e\", \n                        \"/f\", \"/g\", \"/h\", \"/i\", \"/j\"};\n      //linkMatrix[i] is the array of pages(indexes) that page_i links to.  \n      int[][] linkMatrix \u003d {{1,5,7}, {0,7,4,6,}, {0,1,7,8}, \n        {0,2,4,6,7,9}, {0,1}, {0,3,5,9}, {0}, {0,1,3}, {0,2,6}, {0,2,6}};\n\n      //a mini model of user browsing a la pagerank\n      int currentPage \u003d random.nextInt(pages.length); \n      String referrer \u003d null;\n\n      for(int i\u003d0; i\u003ctime; i++) {\n\n        statement.setString(1, pages[currentPage]);\n        statement.setString(2, referrer);\n        statement.setLong(3, i);\n        statement.execute();\n\n        int action \u003d random.nextInt(PROBABILITY_PRECISION);\n\n        // go to a new page with probability \n        // NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION\n        if(action \u003c NEW_PAGE_PROBABILITY) { \n          currentPage \u003d random.nextInt(pages.length); // a random page\n          referrer \u003d null;\n        }\n        else {\n          referrer \u003d pages[currentPage];\n          action \u003d random.nextInt(linkMatrix[currentPage].length);\n          currentPage \u003d linkMatrix[currentPage][action];\n        }\n      }\n      \n      connection.commit();\n      \n    }catch (SQLException ex) {\n      connection.rollback();\n      throw ex;\n    } finally {\n      if(statement !\u003d null) {\n        statement.close();\n      }\n    }\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java"
    }
  }
}