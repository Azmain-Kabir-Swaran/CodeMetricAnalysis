{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FrameworkUploader.java",
  "functionName": "buildPackage",
  "functionId": "buildPackage",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
  "functionStartLine": 328,
  "functionEndLine": 354,
  "numCommitsSeen": 12,
  "timeTaken": 2121,
  "changeHistory": [
    "9886c27c71147a2bcef87b42ff21c2bbe98c8ab4",
    "d716084f4503bf826ef10424d7025ea1ff4ee104",
    "2316f526902e827b6c1b92a5bddef72d211bc742",
    "3b78607a02f3a81ad730975ecdfa35967413271d"
  ],
  "changeHistoryShort": {
    "9886c27c71147a2bcef87b42ff21c2bbe98c8ab4": "Ybodychange",
    "d716084f4503bf826ef10424d7025ea1ff4ee104": "Ymultichange(Yexceptionschange,Ybodychange)",
    "2316f526902e827b6c1b92a5bddef72d211bc742": "Ybodychange",
    "3b78607a02f3a81ad730975ecdfa35967413271d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9886c27c71147a2bcef87b42ff21c2bbe98c8ab4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7159. FrameworkUploader: ensure proper permissions of generated framework tar.gz if restrictive umask is used. Contributed by Peter Bacsko\n",
      "commitDate": "06/12/18 12:48 PM",
      "commitName": "9886c27c71147a2bcef87b42ff21c2bbe98c8ab4",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/06/18 1:05 PM",
      "commitNameOld": "ae055622edeb3cbf82baa6ed952fc2abc84c021e",
      "commitAuthorOld": "Miklos Szegedi",
      "daysBetweenCommits": 167.03,
      "commitsBetweenForRepo": 1357,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   void buildPackage()\n       throws IOException, UploaderException, InterruptedException {\n     beginUpload();\n     LOG.info(\"Compressing tarball\");\n     try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n         targetStream)) {\n       for (String fullPath : filteredInputFiles) {\n         LOG.info(\"Adding \" + fullPath);\n         File file \u003d new File(fullPath);\n         try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n           ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n           out.putArchiveEntry(entry);\n           IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n           out.closeArchiveEntry();\n         }\n       }\n+\n+      // Necessary to see proper replication counts in endUpload()\n+      fsDataStream.hflush();\n+\n       endUpload();\n     } finally {\n       if (targetStream !\u003d null) {\n         targetStream.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void buildPackage()\n      throws IOException, UploaderException, InterruptedException {\n    beginUpload();\n    LOG.info(\"Compressing tarball\");\n    try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n        targetStream)) {\n      for (String fullPath : filteredInputFiles) {\n        LOG.info(\"Adding \" + fullPath);\n        File file \u003d new File(fullPath);\n        try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n          ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n          out.putArchiveEntry(entry);\n          IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n          out.closeArchiveEntry();\n        }\n      }\n\n      // Necessary to see proper replication counts in endUpload()\n      fsDataStream.hflush();\n\n      endUpload();\n    } finally {\n      if (targetStream !\u003d null) {\n        targetStream.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "d716084f4503bf826ef10424d7025ea1ff4ee104": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7032. Add the ability to specify a delayed replication count (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "16/01/18 10:45 AM",
      "commitName": "d716084f4503bf826ef10424d7025ea1ff4ee104",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-7032. Add the ability to specify a delayed replication count (miklos.szegedi@cloudera.com via rkanter)\n",
          "commitDate": "16/01/18 10:45 AM",
          "commitName": "d716084f4503bf826ef10424d7025ea1ff4ee104",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "12/01/18 2:18 PM",
          "commitNameOld": "e404650f489727d2df9a8813fddc4e0d682fbbee",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 3.85,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  void buildPackage() throws IOException, UploaderException {\n+  void buildPackage()\n+      throws IOException, UploaderException, InterruptedException {\n     beginUpload();\n     LOG.info(\"Compressing tarball\");\n     try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n         targetStream)) {\n       for (String fullPath : filteredInputFiles) {\n         LOG.info(\"Adding \" + fullPath);\n         File file \u003d new File(fullPath);\n         try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n           ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n           out.putArchiveEntry(entry);\n           IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n           out.closeArchiveEntry();\n         }\n       }\n+      endUpload();\n     } finally {\n       if (targetStream !\u003d null) {\n         targetStream.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void buildPackage()\n      throws IOException, UploaderException, InterruptedException {\n    beginUpload();\n    LOG.info(\"Compressing tarball\");\n    try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n        targetStream)) {\n      for (String fullPath : filteredInputFiles) {\n        LOG.info(\"Adding \" + fullPath);\n        File file \u003d new File(fullPath);\n        try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n          ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n          out.putArchiveEntry(entry);\n          IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n          out.closeArchiveEntry();\n        }\n      }\n      endUpload();\n    } finally {\n      if (targetStream !\u003d null) {\n        targetStream.close();\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
          "extendedDetails": {
            "oldValue": "[IOException, UploaderException]",
            "newValue": "[IOException, UploaderException, InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7032. Add the ability to specify a delayed replication count (miklos.szegedi@cloudera.com via rkanter)\n",
          "commitDate": "16/01/18 10:45 AM",
          "commitName": "d716084f4503bf826ef10424d7025ea1ff4ee104",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "12/01/18 2:18 PM",
          "commitNameOld": "e404650f489727d2df9a8813fddc4e0d682fbbee",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 3.85,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  void buildPackage() throws IOException, UploaderException {\n+  void buildPackage()\n+      throws IOException, UploaderException, InterruptedException {\n     beginUpload();\n     LOG.info(\"Compressing tarball\");\n     try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n         targetStream)) {\n       for (String fullPath : filteredInputFiles) {\n         LOG.info(\"Adding \" + fullPath);\n         File file \u003d new File(fullPath);\n         try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n           ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n           out.putArchiveEntry(entry);\n           IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n           out.closeArchiveEntry();\n         }\n       }\n+      endUpload();\n     } finally {\n       if (targetStream !\u003d null) {\n         targetStream.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void buildPackage()\n      throws IOException, UploaderException, InterruptedException {\n    beginUpload();\n    LOG.info(\"Compressing tarball\");\n    try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n        targetStream)) {\n      for (String fullPath : filteredInputFiles) {\n        LOG.info(\"Adding \" + fullPath);\n        File file \u003d new File(fullPath);\n        try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n          ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n          out.putArchiveEntry(entry);\n          IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n          out.closeArchiveEntry();\n        }\n      }\n      endUpload();\n    } finally {\n      if (targetStream !\u003d null) {\n        targetStream.close();\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "2316f526902e827b6c1b92a5bddef72d211bc742": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7018. Apply erasure coding properly to framework tarball and support plain tar (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "11/12/17 2:00 PM",
      "commitName": "2316f526902e827b6c1b92a5bddef72d211bc742",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/12/17 12:12 PM",
      "commitNameOld": "3b78607a02f3a81ad730975ecdfa35967413271d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 10.08,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,21 @@\n   void buildPackage() throws IOException, UploaderException {\n     beginUpload();\n     LOG.info(\"Compressing tarball\");\n     try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n-        new GZIPOutputStream(targetStream))) {\n+        targetStream)) {\n       for (String fullPath : filteredInputFiles) {\n         LOG.info(\"Adding \" + fullPath);\n         File file \u003d new File(fullPath);\n         try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n           ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n           out.putArchiveEntry(entry);\n           IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n           out.closeArchiveEntry();\n         }\n       }\n     } finally {\n       if (targetStream !\u003d null) {\n         targetStream.close();\n       }\n     }\n-\n-    if (targetPath \u003d\u003d null) {\n-      return;\n-    }\n-\n-    // Set file attributes\n-    FileSystem fileSystem \u003d targetPath.getFileSystem(new Configuration());\n-    if (fileSystem instanceof DistributedFileSystem) {\n-      LOG.info(\"Disabling Erasure Coding for path: \" + targetPath);\n-      DistributedFileSystem dfs \u003d (DistributedFileSystem) fileSystem;\n-      dfs.setErasureCodingPolicy(targetPath,\n-          SystemErasureCodingPolicies.getReplicationPolicy().getName());\n-    }\n-\n-    if (replication \u003e 0) {\n-      LOG.info(\"Set replication to \" +\n-          replication + \" for path: \" + targetPath);\n-      fileSystem.setReplication(targetPath, replication);\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void buildPackage() throws IOException, UploaderException {\n    beginUpload();\n    LOG.info(\"Compressing tarball\");\n    try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n        targetStream)) {\n      for (String fullPath : filteredInputFiles) {\n        LOG.info(\"Adding \" + fullPath);\n        File file \u003d new File(fullPath);\n        try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n          ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n          out.putArchiveEntry(entry);\n          IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n          out.closeArchiveEntry();\n        }\n      }\n    } finally {\n      if (targetStream !\u003d null) {\n        targetStream.close();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "3b78607a02f3a81ad730975ecdfa35967413271d": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6994. Uploader tool for Distributed Cache Deploy code changes  (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "01/12/17 12:12 PM",
      "commitName": "3b78607a02f3a81ad730975ecdfa35967413271d",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,40 @@\n+  void buildPackage() throws IOException, UploaderException {\n+    beginUpload();\n+    LOG.info(\"Compressing tarball\");\n+    try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n+        new GZIPOutputStream(targetStream))) {\n+      for (String fullPath : filteredInputFiles) {\n+        LOG.info(\"Adding \" + fullPath);\n+        File file \u003d new File(fullPath);\n+        try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n+          ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n+          out.putArchiveEntry(entry);\n+          IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n+          out.closeArchiveEntry();\n+        }\n+      }\n+    } finally {\n+      if (targetStream !\u003d null) {\n+        targetStream.close();\n+      }\n+    }\n+\n+    if (targetPath \u003d\u003d null) {\n+      return;\n+    }\n+\n+    // Set file attributes\n+    FileSystem fileSystem \u003d targetPath.getFileSystem(new Configuration());\n+    if (fileSystem instanceof DistributedFileSystem) {\n+      LOG.info(\"Disabling Erasure Coding for path: \" + targetPath);\n+      DistributedFileSystem dfs \u003d (DistributedFileSystem) fileSystem;\n+      dfs.setErasureCodingPolicy(targetPath,\n+          SystemErasureCodingPolicies.getReplicationPolicy().getName());\n+    }\n+\n+    if (replication \u003e 0) {\n+      LOG.info(\"Set replication to \" +\n+          replication + \" for path: \" + targetPath);\n+      fileSystem.setReplication(targetPath, replication);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void buildPackage() throws IOException, UploaderException {\n    beginUpload();\n    LOG.info(\"Compressing tarball\");\n    try (TarArchiveOutputStream out \u003d new TarArchiveOutputStream(\n        new GZIPOutputStream(targetStream))) {\n      for (String fullPath : filteredInputFiles) {\n        LOG.info(\"Adding \" + fullPath);\n        File file \u003d new File(fullPath);\n        try (FileInputStream inputStream \u003d new FileInputStream(file)) {\n          ArchiveEntry entry \u003d out.createArchiveEntry(file, file.getName());\n          out.putArchiveEntry(entry);\n          IOUtils.copyBytes(inputStream, out, 1024 * 1024);\n          out.closeArchiveEntry();\n        }\n      }\n    } finally {\n      if (targetStream !\u003d null) {\n        targetStream.close();\n      }\n    }\n\n    if (targetPath \u003d\u003d null) {\n      return;\n    }\n\n    // Set file attributes\n    FileSystem fileSystem \u003d targetPath.getFileSystem(new Configuration());\n    if (fileSystem instanceof DistributedFileSystem) {\n      LOG.info(\"Disabling Erasure Coding for path: \" + targetPath);\n      DistributedFileSystem dfs \u003d (DistributedFileSystem) fileSystem;\n      dfs.setErasureCodingPolicy(targetPath,\n          SystemErasureCodingPolicies.getReplicationPolicy().getName());\n    }\n\n    if (replication \u003e 0) {\n      LOG.info(\"Set replication to \" +\n          replication + \" for path: \" + targetPath);\n      fileSystem.setReplication(targetPath, replication);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java"
    }
  }
}