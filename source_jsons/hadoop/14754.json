{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheAdmin.java",
  "functionName": "run",
  "functionId": "run___conf-Configuration__args-List__String__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
  "functionStartLine": 822,
  "functionEndLine": 844,
  "numCommitsSeen": 41,
  "timeTaken": 3193,
  "changeHistory": [
    "5f6b4157a40e974ccc6a56c39dbd35c54f393fbd",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
    "05a9a80bd42f2f0ee2205e11bc4d74208de2a9b1",
    "77afc605fd30accef9ac6059e26879d971f013b0",
    "dc2ee20aec7b3fe1d13c846926ba1b0f02c5adef",
    "eb2175db1a99348c80457e3ffda172cc461de8bc",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be"
  ],
  "changeHistoryShort": {
    "5f6b4157a40e974ccc6a56c39dbd35c54f393fbd": "Ybodychange",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": "Ybodychange",
    "05a9a80bd42f2f0ee2205e11bc4d74208de2a9b1": "Ybodychange",
    "77afc605fd30accef9ac6059e26879d971f013b0": "Ybodychange",
    "dc2ee20aec7b3fe1d13c846926ba1b0f02c5adef": "Ybodychange",
    "eb2175db1a99348c80457e3ffda172cc461de8bc": "Ymultichange(Yparameterchange,Ybodychange)",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6b4157a40e974ccc6a56c39dbd35c54f393fbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10328. Add per-cache-pool default replication num configuration (xupeng via cmccabe)\n",
      "commitDate": "20/06/16 10:42 AM",
      "commitName": "5f6b4157a40e974ccc6a56c39dbd35c54f393fbd",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "17/05/16 11:10 AM",
      "commitNameOld": "7cd5ae62f639a857f24f5463f2aefc099c631a14",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 33.98,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,87 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       String name \u003d StringUtils.popFirstNonOption(args);\n       final boolean printStats \u003d StringUtils.popOption(\"-stats\", args);\n       if (!args.isEmpty()) {\n         System.err.print(\"Can\u0027t understand arguments: \" +\n           Joiner.on(\" \").join(args) + \"\\n\");\n         System.err.println(\"Usage is \" + getShortUsage());\n         return 1;\n       }\n       DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n       TableListing.Builder builder \u003d new TableListing.Builder().\n           addField(\"NAME\", Justification.LEFT).\n           addField(\"OWNER\", Justification.LEFT).\n           addField(\"GROUP\", Justification.LEFT).\n           addField(\"MODE\", Justification.LEFT).\n           addField(\"LIMIT\", Justification.RIGHT).\n-          addField(\"MAXTTL\", Justification.RIGHT);\n+          addField(\"MAXTTL\", Justification.RIGHT).\n+          addField(\"DEFAULT_REPLICATION\", Justification.RIGHT);\n       if (printStats) {\n         builder.\n             addField(\"BYTES_NEEDED\", Justification.RIGHT).\n             addField(\"BYTES_CACHED\", Justification.RIGHT).\n             addField(\"BYTES_OVERLIMIT\", Justification.RIGHT).\n             addField(\"FILES_NEEDED\", Justification.RIGHT).\n             addField(\"FILES_CACHED\", Justification.RIGHT);\n       }\n       TableListing listing \u003d builder.build();\n       int numResults \u003d 0;\n       try {\n         RemoteIterator\u003cCachePoolEntry\u003e iter \u003d dfs.listCachePools();\n         while (iter.hasNext()) {\n           CachePoolEntry entry \u003d iter.next();\n           CachePoolInfo info \u003d entry.getInfo();\n           LinkedList\u003cString\u003e row \u003d new LinkedList\u003cString\u003e();\n           if (name \u003d\u003d null || info.getPoolName().equals(name)) {\n             row.add(info.getPoolName());\n             row.add(info.getOwnerName());\n             row.add(info.getGroupName());\n             row.add(info.getMode() !\u003d null ? info.getMode().toString() : null);\n             Long limit \u003d info.getLimit();\n             String limitString;\n             if (limit !\u003d null \u0026\u0026 limit.equals(CachePoolInfo.LIMIT_UNLIMITED)) {\n               limitString \u003d \"unlimited\";\n             } else {\n               limitString \u003d \"\" + limit;\n             }\n             row.add(limitString);\n             Long maxTtl \u003d info.getMaxRelativeExpiryMs();\n             String maxTtlString \u003d null;\n \n             if (maxTtl !\u003d null) {\n               if (maxTtl \u003d\u003d CachePoolInfo.RELATIVE_EXPIRY_NEVER) {\n                 maxTtlString  \u003d \"never\";\n               } else {\n                 maxTtlString \u003d DFSUtil.durationToString(maxTtl);\n               }\n             }\n             row.add(maxTtlString);\n+            row.add(\"\" + info.getDefaultReplication());\n+\n             if (printStats) {\n               CachePoolStats stats \u003d entry.getStats();\n               row.add(Long.toString(stats.getBytesNeeded()));\n               row.add(Long.toString(stats.getBytesCached()));\n               row.add(Long.toString(stats.getBytesOverlimit()));\n               row.add(Long.toString(stats.getFilesNeeded()));\n               row.add(Long.toString(stats.getFilesCached()));\n             }\n             listing.addRow(row.toArray(new String[row.size()]));\n             ++numResults;\n             if (name !\u003d null) {\n               break;\n             }\n           }\n         }\n       } catch (IOException e) {\n         System.err.println(AdminHelper.prettifyException(e));\n         return 2;\n       }\n       System.out.print(String.format(\"Found %d result%s.%n\", numResults,\n           (numResults \u003d\u003d 1 ? \"\" : \"s\")));\n       if (numResults \u003e 0) { \n         System.out.print(listing);\n       }\n       // If list pools succeed, we return 0 (success exit code)\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      String name \u003d StringUtils.popFirstNonOption(args);\n      final boolean printStats \u003d StringUtils.popOption(\"-stats\", args);\n      if (!args.isEmpty()) {\n        System.err.print(\"Can\u0027t understand arguments: \" +\n          Joiner.on(\" \").join(args) + \"\\n\");\n        System.err.println(\"Usage is \" + getShortUsage());\n        return 1;\n      }\n      DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n      TableListing.Builder builder \u003d new TableListing.Builder().\n          addField(\"NAME\", Justification.LEFT).\n          addField(\"OWNER\", Justification.LEFT).\n          addField(\"GROUP\", Justification.LEFT).\n          addField(\"MODE\", Justification.LEFT).\n          addField(\"LIMIT\", Justification.RIGHT).\n          addField(\"MAXTTL\", Justification.RIGHT).\n          addField(\"DEFAULT_REPLICATION\", Justification.RIGHT);\n      if (printStats) {\n        builder.\n            addField(\"BYTES_NEEDED\", Justification.RIGHT).\n            addField(\"BYTES_CACHED\", Justification.RIGHT).\n            addField(\"BYTES_OVERLIMIT\", Justification.RIGHT).\n            addField(\"FILES_NEEDED\", Justification.RIGHT).\n            addField(\"FILES_CACHED\", Justification.RIGHT);\n      }\n      TableListing listing \u003d builder.build();\n      int numResults \u003d 0;\n      try {\n        RemoteIterator\u003cCachePoolEntry\u003e iter \u003d dfs.listCachePools();\n        while (iter.hasNext()) {\n          CachePoolEntry entry \u003d iter.next();\n          CachePoolInfo info \u003d entry.getInfo();\n          LinkedList\u003cString\u003e row \u003d new LinkedList\u003cString\u003e();\n          if (name \u003d\u003d null || info.getPoolName().equals(name)) {\n            row.add(info.getPoolName());\n            row.add(info.getOwnerName());\n            row.add(info.getGroupName());\n            row.add(info.getMode() !\u003d null ? info.getMode().toString() : null);\n            Long limit \u003d info.getLimit();\n            String limitString;\n            if (limit !\u003d null \u0026\u0026 limit.equals(CachePoolInfo.LIMIT_UNLIMITED)) {\n              limitString \u003d \"unlimited\";\n            } else {\n              limitString \u003d \"\" + limit;\n            }\n            row.add(limitString);\n            Long maxTtl \u003d info.getMaxRelativeExpiryMs();\n            String maxTtlString \u003d null;\n\n            if (maxTtl !\u003d null) {\n              if (maxTtl \u003d\u003d CachePoolInfo.RELATIVE_EXPIRY_NEVER) {\n                maxTtlString  \u003d \"never\";\n              } else {\n                maxTtlString \u003d DFSUtil.durationToString(maxTtl);\n              }\n            }\n            row.add(maxTtlString);\n            row.add(\"\" + info.getDefaultReplication());\n\n            if (printStats) {\n              CachePoolStats stats \u003d entry.getStats();\n              row.add(Long.toString(stats.getBytesNeeded()));\n              row.add(Long.toString(stats.getBytesCached()));\n              row.add(Long.toString(stats.getBytesOverlimit()));\n              row.add(Long.toString(stats.getFilesNeeded()));\n              row.add(Long.toString(stats.getFilesCached()));\n            }\n            listing.addRow(row.toArray(new String[row.size()]));\n            ++numResults;\n            if (name !\u003d null) {\n              break;\n            }\n          }\n        }\n      } catch (IOException e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      System.out.print(String.format(\"Found %d result%s.%n\", numResults,\n          (numResults \u003d\u003d 1 ? \"\" : \"s\")));\n      if (numResults \u003e 0) { \n        System.out.print(listing);\n      }\n      // If list pools succeed, we return 0 (success exit code)\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7600. Refine hdfs admin classes to reuse common code. Contributed by Jing Zhao.\n",
      "commitDate": "12/01/15 5:32 PM",
      "commitName": "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/06/14 11:39 PM",
      "commitNameOld": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 213.79,
      "commitsBetweenForRepo": 1787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,84 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n-      if (args.size() \u003d\u003d 0) {\n-        for (Command command : COMMANDS) {\n-          System.err.println(command.getLongUsage());\n-        }\n-        return 0;\n-      }\n-      if (args.size() !\u003d 1) {\n-        System.out.println(\"You must give exactly one argument to -help.\");\n-        return 0;\n-      }\n-      String commandName \u003d args.get(0);\n-      // prepend a dash to match against the command names\n-      Command command \u003d determineCommand(\"-\"+commandName);\n-      if (command \u003d\u003d null) {\n-        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n-          commandName + \"\u0027.\\n\");\n-        System.err.print(\"Valid help command names are:\\n\");\n-        String separator \u003d \"\";\n-        for (Command c : COMMANDS) {\n-          System.err.print(separator + c.getName().substring(1));\n-          separator \u003d \", \";\n-        }\n-        System.err.print(\"\\n\");\n+      String name \u003d StringUtils.popFirstNonOption(args);\n+      final boolean printStats \u003d StringUtils.popOption(\"-stats\", args);\n+      if (!args.isEmpty()) {\n+        System.err.print(\"Can\u0027t understand arguments: \" +\n+          Joiner.on(\" \").join(args) + \"\\n\");\n+        System.err.println(\"Usage is \" + getShortUsage());\n         return 1;\n       }\n-      System.err.print(command.getLongUsage());\n+      DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n+      TableListing.Builder builder \u003d new TableListing.Builder().\n+          addField(\"NAME\", Justification.LEFT).\n+          addField(\"OWNER\", Justification.LEFT).\n+          addField(\"GROUP\", Justification.LEFT).\n+          addField(\"MODE\", Justification.LEFT).\n+          addField(\"LIMIT\", Justification.RIGHT).\n+          addField(\"MAXTTL\", Justification.RIGHT);\n+      if (printStats) {\n+        builder.\n+            addField(\"BYTES_NEEDED\", Justification.RIGHT).\n+            addField(\"BYTES_CACHED\", Justification.RIGHT).\n+            addField(\"BYTES_OVERLIMIT\", Justification.RIGHT).\n+            addField(\"FILES_NEEDED\", Justification.RIGHT).\n+            addField(\"FILES_CACHED\", Justification.RIGHT);\n+      }\n+      TableListing listing \u003d builder.build();\n+      int numResults \u003d 0;\n+      try {\n+        RemoteIterator\u003cCachePoolEntry\u003e iter \u003d dfs.listCachePools();\n+        while (iter.hasNext()) {\n+          CachePoolEntry entry \u003d iter.next();\n+          CachePoolInfo info \u003d entry.getInfo();\n+          LinkedList\u003cString\u003e row \u003d new LinkedList\u003cString\u003e();\n+          if (name \u003d\u003d null || info.getPoolName().equals(name)) {\n+            row.add(info.getPoolName());\n+            row.add(info.getOwnerName());\n+            row.add(info.getGroupName());\n+            row.add(info.getMode() !\u003d null ? info.getMode().toString() : null);\n+            Long limit \u003d info.getLimit();\n+            String limitString;\n+            if (limit !\u003d null \u0026\u0026 limit.equals(CachePoolInfo.LIMIT_UNLIMITED)) {\n+              limitString \u003d \"unlimited\";\n+            } else {\n+              limitString \u003d \"\" + limit;\n+            }\n+            row.add(limitString);\n+            Long maxTtl \u003d info.getMaxRelativeExpiryMs();\n+            String maxTtlString \u003d null;\n+\n+            if (maxTtl !\u003d null) {\n+              if (maxTtl \u003d\u003d CachePoolInfo.RELATIVE_EXPIRY_NEVER) {\n+                maxTtlString  \u003d \"never\";\n+              } else {\n+                maxTtlString \u003d DFSUtil.durationToString(maxTtl);\n+              }\n+            }\n+            row.add(maxTtlString);\n+            if (printStats) {\n+              CachePoolStats stats \u003d entry.getStats();\n+              row.add(Long.toString(stats.getBytesNeeded()));\n+              row.add(Long.toString(stats.getBytesCached()));\n+              row.add(Long.toString(stats.getBytesOverlimit()));\n+              row.add(Long.toString(stats.getFilesNeeded()));\n+              row.add(Long.toString(stats.getFilesCached()));\n+            }\n+            listing.addRow(row.toArray(new String[row.size()]));\n+            ++numResults;\n+            if (name !\u003d null) {\n+              break;\n+            }\n+          }\n+        }\n+      } catch (IOException e) {\n+        System.err.println(AdminHelper.prettifyException(e));\n+        return 2;\n+      }\n+      System.out.print(String.format(\"Found %d result%s.%n\", numResults,\n+          (numResults \u003d\u003d 1 ? \"\" : \"s\")));\n+      if (numResults \u003e 0) { \n+        System.out.print(listing);\n+      }\n+      // If list pools succeed, we return 0 (success exit code)\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      String name \u003d StringUtils.popFirstNonOption(args);\n      final boolean printStats \u003d StringUtils.popOption(\"-stats\", args);\n      if (!args.isEmpty()) {\n        System.err.print(\"Can\u0027t understand arguments: \" +\n          Joiner.on(\" \").join(args) + \"\\n\");\n        System.err.println(\"Usage is \" + getShortUsage());\n        return 1;\n      }\n      DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n      TableListing.Builder builder \u003d new TableListing.Builder().\n          addField(\"NAME\", Justification.LEFT).\n          addField(\"OWNER\", Justification.LEFT).\n          addField(\"GROUP\", Justification.LEFT).\n          addField(\"MODE\", Justification.LEFT).\n          addField(\"LIMIT\", Justification.RIGHT).\n          addField(\"MAXTTL\", Justification.RIGHT);\n      if (printStats) {\n        builder.\n            addField(\"BYTES_NEEDED\", Justification.RIGHT).\n            addField(\"BYTES_CACHED\", Justification.RIGHT).\n            addField(\"BYTES_OVERLIMIT\", Justification.RIGHT).\n            addField(\"FILES_NEEDED\", Justification.RIGHT).\n            addField(\"FILES_CACHED\", Justification.RIGHT);\n      }\n      TableListing listing \u003d builder.build();\n      int numResults \u003d 0;\n      try {\n        RemoteIterator\u003cCachePoolEntry\u003e iter \u003d dfs.listCachePools();\n        while (iter.hasNext()) {\n          CachePoolEntry entry \u003d iter.next();\n          CachePoolInfo info \u003d entry.getInfo();\n          LinkedList\u003cString\u003e row \u003d new LinkedList\u003cString\u003e();\n          if (name \u003d\u003d null || info.getPoolName().equals(name)) {\n            row.add(info.getPoolName());\n            row.add(info.getOwnerName());\n            row.add(info.getGroupName());\n            row.add(info.getMode() !\u003d null ? info.getMode().toString() : null);\n            Long limit \u003d info.getLimit();\n            String limitString;\n            if (limit !\u003d null \u0026\u0026 limit.equals(CachePoolInfo.LIMIT_UNLIMITED)) {\n              limitString \u003d \"unlimited\";\n            } else {\n              limitString \u003d \"\" + limit;\n            }\n            row.add(limitString);\n            Long maxTtl \u003d info.getMaxRelativeExpiryMs();\n            String maxTtlString \u003d null;\n\n            if (maxTtl !\u003d null) {\n              if (maxTtl \u003d\u003d CachePoolInfo.RELATIVE_EXPIRY_NEVER) {\n                maxTtlString  \u003d \"never\";\n              } else {\n                maxTtlString \u003d DFSUtil.durationToString(maxTtl);\n              }\n            }\n            row.add(maxTtlString);\n            if (printStats) {\n              CachePoolStats stats \u003d entry.getStats();\n              row.add(Long.toString(stats.getBytesNeeded()));\n              row.add(Long.toString(stats.getBytesCached()));\n              row.add(Long.toString(stats.getBytesOverlimit()));\n              row.add(Long.toString(stats.getFilesNeeded()));\n              row.add(Long.toString(stats.getFilesCached()));\n            }\n            listing.addRow(row.toArray(new String[row.size()]));\n            ++numResults;\n            if (name !\u003d null) {\n              break;\n            }\n          }\n        }\n      } catch (IOException e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      System.out.print(String.format(\"Found %d result%s.%n\", numResults,\n          (numResults \u003d\u003d 1 ? \"\" : \"s\")));\n      if (numResults \u003e 0) { \n        System.out.print(listing);\n      }\n      // If list pools succeed, we return 0 (success exit code)\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "05a9a80bd42f2f0ee2205e11bc4d74208de2a9b1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5565. CacheAdmin help should match against non-dashed commands (wang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/13 1:38 PM",
      "commitName": "05a9a80bd42f2f0ee2205e11bc4d74208de2a9b1",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "21/11/13 9:12 AM",
      "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 5.18,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       if (args.size() \u003d\u003d 0) {\n         for (Command command : COMMANDS) {\n           System.err.println(command.getLongUsage());\n         }\n         return 0;\n       }\n       if (args.size() !\u003d 1) {\n         System.out.println(\"You must give exactly one argument to -help.\");\n         return 0;\n       }\n       String commandName \u003d args.get(0);\n-      Command command \u003d determineCommand(commandName);\n+      // prepend a dash to match against the command names\n+      Command command \u003d determineCommand(\"-\"+commandName);\n       if (command \u003d\u003d null) {\n         System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n           commandName + \"\u0027.\\n\");\n-        System.err.print(\"Valid command names are:\\n\");\n+        System.err.print(\"Valid help command names are:\\n\");\n         String separator \u003d \"\";\n         for (Command c : COMMANDS) {\n-          System.err.print(separator + c.getName());\n+          System.err.print(separator + c.getName().substring(1));\n           separator \u003d \", \";\n         }\n         System.err.print(\"\\n\");\n         return 1;\n       }\n       System.err.print(command.getLongUsage());\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      // prepend a dash to match against the command names\n      Command command \u003d determineCommand(\"-\"+commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid help command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName().substring(1));\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "77afc605fd30accef9ac6059e26879d971f013b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5468. CacheAdmin help command does not recognize commands  (Stephen Chu via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539786 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 11:58 AM",
      "commitName": "77afc605fd30accef9ac6059e26879d971f013b0",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "24/10/13 6:56 PM",
      "commitNameOld": "dc2ee20aec7b3fe1d13c846926ba1b0f02c5adef",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 13.75,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       if (args.size() \u003d\u003d 0) {\n         for (Command command : COMMANDS) {\n           System.err.println(command.getLongUsage());\n         }\n         return 0;\n       }\n       if (args.size() !\u003d 1) {\n         System.out.println(\"You must give exactly one argument to -help.\");\n         return 0;\n       }\n       String commandName \u003d args.get(0);\n-      commandName \u003d commandName.replaceAll(\"^[-]*\", \"\");\n       Command command \u003d determineCommand(commandName);\n       if (command \u003d\u003d null) {\n         System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n           commandName + \"\u0027.\\n\");\n         System.err.print(\"Valid command names are:\\n\");\n         String separator \u003d \"\";\n         for (Command c : COMMANDS) {\n           System.err.print(separator + c.getName());\n           separator \u003d \", \";\n         }\n         System.err.print(\"\\n\");\n         return 1;\n       }\n       System.err.print(command.getLongUsage());\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      Command command \u003d determineCommand(commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName());\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "dc2ee20aec7b3fe1d13c846926ba1b0f02c5adef": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5419. Fixup test-patch.sh warnings on HDFS-4949 branch. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1535607 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 6:56 PM",
      "commitName": "dc2ee20aec7b3fe1d13c846926ba1b0f02c5adef",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "18/10/13 3:15 PM",
      "commitNameOld": "d61af9781086073152113d97106f708ea1cf6e8c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 6.15,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       if (args.size() \u003d\u003d 0) {\n         for (Command command : COMMANDS) {\n           System.err.println(command.getLongUsage());\n         }\n         return 0;\n       }\n       if (args.size() !\u003d 1) {\n         System.out.println(\"You must give exactly one argument to -help.\");\n         return 0;\n       }\n       String commandName \u003d args.get(0);\n-      commandName.replaceAll(\"^[-]*\", \"\");\n+      commandName \u003d commandName.replaceAll(\"^[-]*\", \"\");\n       Command command \u003d determineCommand(commandName);\n       if (command \u003d\u003d null) {\n         System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n           commandName + \"\u0027.\\n\");\n         System.err.print(\"Valid command names are:\\n\");\n         String separator \u003d \"\";\n         for (Command c : COMMANDS) {\n           System.err.print(separator + c.getName());\n           separator \u003d \", \";\n         }\n         System.err.print(\"\\n\");\n         return 1;\n       }\n       System.err.print(command.getLongUsage());\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      commandName \u003d commandName.replaceAll(\"^[-]*\", \"\");\n      Command command \u003d determineCommand(commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName());\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "eb2175db1a99348c80457e3ffda172cc461de8bc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 3:28 PM",
      "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/10/13 3:28 PM",
          "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "20/09/13 5:20 PM",
          "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 13.92,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n-    public int run(List\u003cString\u003e args) throws IOException {\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       if (args.size() \u003d\u003d 0) {\n         for (Command command : COMMANDS) {\n           System.err.println(command.getLongUsage());\n         }\n         return 0;\n       }\n       if (args.size() !\u003d 1) {\n         System.out.println(\"You must give exactly one argument to -help.\");\n         return 0;\n       }\n       String commandName \u003d args.get(0);\n       commandName.replaceAll(\"^[-]*\", \"\");\n       Command command \u003d determineCommand(commandName);\n       if (command \u003d\u003d null) {\n         System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n           commandName + \"\u0027.\\n\");\n         System.err.print(\"Valid command names are:\\n\");\n         String separator \u003d \"\";\n         for (Command c : COMMANDS) {\n           System.err.print(separator + c.getName());\n           separator \u003d \", \";\n         }\n+        System.err.print(\"\\n\");\n         return 1;\n       }\n       System.err.print(command.getLongUsage());\n       return 0;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      commandName.replaceAll(\"^[-]*\", \"\");\n      Command command \u003d determineCommand(commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName());\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
          "extendedDetails": {
            "oldValue": "[args-List\u003cString\u003e]",
            "newValue": "[conf-Configuration, args-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/10/13 3:28 PM",
          "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "20/09/13 5:20 PM",
          "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 13.92,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n-    public int run(List\u003cString\u003e args) throws IOException {\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       if (args.size() \u003d\u003d 0) {\n         for (Command command : COMMANDS) {\n           System.err.println(command.getLongUsage());\n         }\n         return 0;\n       }\n       if (args.size() !\u003d 1) {\n         System.out.println(\"You must give exactly one argument to -help.\");\n         return 0;\n       }\n       String commandName \u003d args.get(0);\n       commandName.replaceAll(\"^[-]*\", \"\");\n       Command command \u003d determineCommand(commandName);\n       if (command \u003d\u003d null) {\n         System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n           commandName + \"\u0027.\\n\");\n         System.err.print(\"Valid command names are:\\n\");\n         String separator \u003d \"\";\n         for (Command c : COMMANDS) {\n           System.err.print(separator + c.getName());\n           separator \u003d \", \";\n         }\n+        System.err.print(\"\\n\");\n         return 1;\n       }\n       System.err.print(command.getLongUsage());\n       return 0;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      commandName.replaceAll(\"^[-]*\", \"\");\n      Command command \u003d determineCommand(commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName());\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
          "extendedDetails": {}
        }
      ]
    },
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 8:55 PM",
      "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,28 @@\n+    public int run(List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n+        }\n+        return 0;\n+      }\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      String commandName \u003d args.get(0);\n+      commandName.replaceAll(\"^[-]*\", \"\");\n+      Command command \u003d determineCommand(commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n+          commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName());\n+          separator \u003d \", \";\n+        }\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      commandName.replaceAll(\"^[-]*\", \"\");\n      Command command \u003d determineCommand(commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName());\n          separator \u003d \", \";\n        }\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java"
    }
  }
}