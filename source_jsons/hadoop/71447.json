{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistrySecurity.java",
  "functionName": "buildSecurityDiagnostics",
  "functionId": "buildSecurityDiagnostics",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
  "functionStartLine": 992,
  "functionEndLine": 1025,
  "numCommitsSeen": 22,
  "timeTaken": 2174,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "1ff27f9d12e8124c1b9a722708264c5b07fd0fde",
    "6f43491c0343cfef36e9be5dfd06447cf2fee377",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "1ff27f9d12e8124c1b9a722708264c5b07fd0fde": "Ybodychange",
    "6f43491c0343cfef36e9be5dfd06447cf2fee377": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String buildSecurityDiagnostics() {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(secureRegistry ? \"secure registry; \"\n                          : \"insecure registry; \");\n    builder.append(\"Curator service access policy: \").append(access);\n\n    builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n    builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n    builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n    builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n    String sasl \u003d\n        System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n            DEFAULT_ZK_ENABLE_SASL_CLIENT);\n    boolean saslEnabled \u003d Boolean.parseBoolean(sasl);\n    builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n        DEFAULT_ZK_ENABLE_SASL_CLIENT));\n    if (saslEnabled) {\n      builder.append(\"; JAAS Client Identity\")\n             .append(\"\u003d\")\n             .append(jaasClientIdentity)\n             .append(\"; \");\n      builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n             .append(\"\u003d\")\n             .append(jaasClientEntry)\n             .append(\"; \");\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n    }\n    builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n        \"(undefined but defaults to true)\"));\n    builder.append(describeProperty(\n        PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n    return builder.toString();\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java"
      }
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/17 9:59 PM",
      "commitNameOld": "6d95866dcf278dd7789604787691fe8ee8d9cc9f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 263.63,
      "commitsBetweenForRepo": 1792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public String buildSecurityDiagnostics() {\n     StringBuilder builder \u003d new StringBuilder();\n     builder.append(secureRegistry ? \"secure registry; \"\n                           : \"insecure registry; \");\n     builder.append(\"Curator service access policy: \").append(access);\n \n     builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n     builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n     builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n     builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n     String sasl \u003d\n         System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n             DEFAULT_ZK_ENABLE_SASL_CLIENT);\n     boolean saslEnabled \u003d Boolean.parseBoolean(sasl);\n     builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n         DEFAULT_ZK_ENABLE_SASL_CLIENT));\n     if (saslEnabled) {\n       builder.append(\"; JAAS Client Identity\")\n              .append(\"\u003d\")\n              .append(jaasClientIdentity)\n              .append(\"; \");\n       builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n              .append(\"\u003d\")\n-             .append(jaasClientContext)\n+             .append(jaasClientEntry)\n              .append(\"; \");\n       builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n       builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n     }\n     builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n         \"(undefined but defaults to true)\"));\n     builder.append(describeProperty(\n         PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n     return builder.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String buildSecurityDiagnostics() {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(secureRegistry ? \"secure registry; \"\n                          : \"insecure registry; \");\n    builder.append(\"Curator service access policy: \").append(access);\n\n    builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n    builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n    builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n    builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n    String sasl \u003d\n        System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n            DEFAULT_ZK_ENABLE_SASL_CLIENT);\n    boolean saslEnabled \u003d Boolean.parseBoolean(sasl);\n    builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n        DEFAULT_ZK_ENABLE_SASL_CLIENT));\n    if (saslEnabled) {\n      builder.append(\"; JAAS Client Identity\")\n             .append(\"\u003d\")\n             .append(jaasClientIdentity)\n             .append(\"; \");\n      builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n             .append(\"\u003d\")\n             .append(jaasClientEntry)\n             .append(\"; \");\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n    }\n    builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n        \"(undefined but defaults to true)\"));\n    builder.append(describeProperty(\n        PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n    return builder.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "1ff27f9d12e8124c1b9a722708264c5b07fd0fde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4630. Remove useless boxing/unboxing code. Contributed by Kousuke Saruta.\n",
      "commitDate": "10/04/16 10:55 PM",
      "commitName": "1ff27f9d12e8124c1b9a722708264c5b07fd0fde",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "15/01/15 4:27 AM",
      "commitNameOld": "533e551eb42af188535aeb0ab35f8ebf150a0da1",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 451.73,
      "commitsBetweenForRepo": 3532,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public String buildSecurityDiagnostics() {\n     StringBuilder builder \u003d new StringBuilder();\n     builder.append(secureRegistry ? \"secure registry; \"\n                           : \"insecure registry; \");\n     builder.append(\"Curator service access policy: \").append(access);\n \n     builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n     builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n     builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n     builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n     String sasl \u003d\n         System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n             DEFAULT_ZK_ENABLE_SASL_CLIENT);\n-    boolean saslEnabled \u003d Boolean.valueOf(sasl);\n+    boolean saslEnabled \u003d Boolean.parseBoolean(sasl);\n     builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n         DEFAULT_ZK_ENABLE_SASL_CLIENT));\n     if (saslEnabled) {\n       builder.append(\"; JAAS Client Identity\")\n              .append(\"\u003d\")\n              .append(jaasClientIdentity)\n              .append(\"; \");\n       builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n              .append(\"\u003d\")\n              .append(jaasClientContext)\n              .append(\"; \");\n       builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n       builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n     }\n     builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n         \"(undefined but defaults to true)\"));\n     builder.append(describeProperty(\n         PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n     return builder.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String buildSecurityDiagnostics() {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(secureRegistry ? \"secure registry; \"\n                          : \"insecure registry; \");\n    builder.append(\"Curator service access policy: \").append(access);\n\n    builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n    builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n    builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n    builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n    String sasl \u003d\n        System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n            DEFAULT_ZK_ENABLE_SASL_CLIENT);\n    boolean saslEnabled \u003d Boolean.parseBoolean(sasl);\n    builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n        DEFAULT_ZK_ENABLE_SASL_CLIENT));\n    if (saslEnabled) {\n      builder.append(\"; JAAS Client Identity\")\n             .append(\"\u003d\")\n             .append(jaasClientIdentity)\n             .append(\"; \");\n      builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n             .append(\"\u003d\")\n             .append(jaasClientContext)\n             .append(\"; \");\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n    }\n    builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n        \"(undefined but defaults to true)\"));\n    builder.append(describeProperty(\n        PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n    return builder.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "6f43491c0343cfef36e9be5dfd06447cf2fee377": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2689 TestSecureRMRegistryOperations failing on windows: secure ZK won\u0027t start\n",
      "commitDate": "16/10/14 2:22 PM",
      "commitName": "6f43491c0343cfef36e9be5dfd06447cf2fee377",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/10/14 6:34 PM",
      "commitNameOld": "ac64ff77cfd87b5dd6b017468acd6698dbff43ae",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 4.82,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public String buildSecurityDiagnostics() {\n     StringBuilder builder \u003d new StringBuilder();\n     builder.append(secureRegistry ? \"secure registry; \"\n                           : \"insecure registry; \");\n-    builder.append(\"Access policy: \").append(access);\n+    builder.append(\"Curator service access policy: \").append(access);\n \n-    builder.append(\", System ACLs: \").append(aclsToString(systemACLs));\n-    builder.append(UgiInfo.fromCurrentUser());\n-    builder.append(\" Kerberos Realm: \").append(kerberosRealm).append(\" ; \");\n+    builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n+    builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n+    builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n     builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n     String sasl \u003d\n         System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n             DEFAULT_ZK_ENABLE_SASL_CLIENT);\n     boolean saslEnabled \u003d Boolean.valueOf(sasl);\n     builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n         DEFAULT_ZK_ENABLE_SASL_CLIENT));\n     if (saslEnabled) {\n-      builder.append(\"JAAS Client Identity\")\n+      builder.append(\"; JAAS Client Identity\")\n              .append(\"\u003d\")\n              .append(jaasClientIdentity)\n              .append(\"; \");\n       builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n              .append(\"\u003d\")\n              .append(jaasClientContext)\n              .append(\"; \");\n       builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n       builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n     }\n     builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n         \"(undefined but defaults to true)\"));\n     builder.append(describeProperty(\n         PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n     return builder.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String buildSecurityDiagnostics() {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(secureRegistry ? \"secure registry; \"\n                          : \"insecure registry; \");\n    builder.append(\"Curator service access policy: \").append(access);\n\n    builder.append(\"; System ACLs: \").append(aclsToString(systemACLs));\n    builder.append(\"User: \").append(UgiInfo.fromCurrentUser());\n    builder.append(\"; Kerberos Realm: \").append(kerberosRealm);\n    builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n    String sasl \u003d\n        System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n            DEFAULT_ZK_ENABLE_SASL_CLIENT);\n    boolean saslEnabled \u003d Boolean.valueOf(sasl);\n    builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n        DEFAULT_ZK_ENABLE_SASL_CLIENT));\n    if (saslEnabled) {\n      builder.append(\"; JAAS Client Identity\")\n             .append(\"\u003d\")\n             .append(jaasClientIdentity)\n             .append(\"; \");\n      builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n             .append(\"\u003d\")\n             .append(jaasClientContext)\n             .append(\"; \");\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n    }\n    builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n        \"(undefined but defaults to true)\"));\n    builder.append(describeProperty(\n        PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n    return builder.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,34 @@\n+  public String buildSecurityDiagnostics() {\n+    StringBuilder builder \u003d new StringBuilder();\n+    builder.append(secureRegistry ? \"secure registry; \"\n+                          : \"insecure registry; \");\n+    builder.append(\"Access policy: \").append(access);\n+\n+    builder.append(\", System ACLs: \").append(aclsToString(systemACLs));\n+    builder.append(UgiInfo.fromCurrentUser());\n+    builder.append(\" Kerberos Realm: \").append(kerberosRealm).append(\" ; \");\n+    builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n+    String sasl \u003d\n+        System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n+            DEFAULT_ZK_ENABLE_SASL_CLIENT);\n+    boolean saslEnabled \u003d Boolean.valueOf(sasl);\n+    builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n+        DEFAULT_ZK_ENABLE_SASL_CLIENT));\n+    if (saslEnabled) {\n+      builder.append(\"JAAS Client Identity\")\n+             .append(\"\u003d\")\n+             .append(jaasClientIdentity)\n+             .append(\"; \");\n+      builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n+             .append(\"\u003d\")\n+             .append(jaasClientContext)\n+             .append(\"; \");\n+      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n+      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n+    }\n+    builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n+        \"(undefined but defaults to true)\"));\n+    builder.append(describeProperty(\n+        PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n+    return builder.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String buildSecurityDiagnostics() {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(secureRegistry ? \"secure registry; \"\n                          : \"insecure registry; \");\n    builder.append(\"Access policy: \").append(access);\n\n    builder.append(\", System ACLs: \").append(aclsToString(systemACLs));\n    builder.append(UgiInfo.fromCurrentUser());\n    builder.append(\" Kerberos Realm: \").append(kerberosRealm).append(\" ; \");\n    builder.append(describeProperty(Environment.JAAS_CONF_KEY));\n    String sasl \u003d\n        System.getProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n            DEFAULT_ZK_ENABLE_SASL_CLIENT);\n    boolean saslEnabled \u003d Boolean.valueOf(sasl);\n    builder.append(describeProperty(PROP_ZK_ENABLE_SASL_CLIENT,\n        DEFAULT_ZK_ENABLE_SASL_CLIENT));\n    if (saslEnabled) {\n      builder.append(\"JAAS Client Identity\")\n             .append(\"\u003d\")\n             .append(jaasClientIdentity)\n             .append(\"; \");\n      builder.append(KEY_REGISTRY_CLIENT_JAAS_CONTEXT)\n             .append(\"\u003d\")\n             .append(jaasClientContext)\n             .append(\"; \");\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_USERNAME));\n      builder.append(describeProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\n    }\n    builder.append(describeProperty(PROP_ZK_ALLOW_FAILED_SASL_CLIENTS,\n        \"(undefined but defaults to true)\"));\n    builder.append(describeProperty(\n        PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE));\n    return builder.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java"
    }
  }
}