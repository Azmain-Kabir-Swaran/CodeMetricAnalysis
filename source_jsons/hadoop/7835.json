{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalSet.java",
  "functionName": "getEditLogManifest",
  "functionId": "getEditLogManifest___fromTxId-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
  "functionStartLine": 635,
  "functionEndLine": 691,
  "numCommitsSeen": 71,
  "timeTaken": 3041,
  "changeHistory": [
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
    "8172215e5601c3bb03fb5c0a0d88768142ea5087",
    "8c62c46046656c01b327c378e89d57b4bf37e16e",
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6"
  ],
  "changeHistoryShort": {
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": "Ybodychange",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "8172215e5601c3bb03fb5c0a0d88768142ea5087": "Ybodychange",
    "8c62c46046656c01b327c378e89d57b4bf37e16e": "Ymultichange(Yparameterchange,Ybodychange)",
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
      "commitDate": "27/07/16 5:55 PM",
      "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/09/14 2:02 PM",
      "commitNameOld": "faa4455be512e070fa420084be8d1be5c72f3b08",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 694.16,
      "commitsBetweenForRepo": 5487,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n     // Collect RemoteEditLogs available from each FileJournalManager\n     List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n     for (JournalAndStream j : journals) {\n       if (j.getManager() instanceof FileJournalManager) {\n         FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n         try {\n           allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false));\n         } catch (Throwable t) {\n           LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n         }\n       }\n     }\n     \n     // Group logs by their starting txid\n     ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n       Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n     long curStartTxId \u003d fromTxId;\n \n     List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n     while (true) {\n       ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n       if (logGroup.isEmpty()) {\n         // we have a gap in logs - for example because we recovered some old\n         // storage directory with ancient logs. Clear out any logs we\u0027ve\n         // accumulated so far, and then skip to the next segment of logs\n         // after the gap.\n         SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n         startTxIds \u003d startTxIds.tailSet(curStartTxId);\n         if (startTxIds.isEmpty()) {\n           break;\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                 \"not returning previous logs in manifest.\");\n           }\n           logs.clear();\n           curStartTxId \u003d startTxIds.first();\n           continue;\n         }\n       }\n \n       // Find the one that extends the farthest forward\n       RemoteEditLog bestLog \u003d Collections.max(logGroup);\n       logs.add(bestLog);\n       // And then start looking from after that point\n       curStartTxId \u003d bestLog.getEndTxId() + 1;\n     }\n-    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n+    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs,\n+        curStartTxId - 1);\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n           + ret);      \n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs,\n        curStartTxId - 1);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/13 5:32 PM",
      "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/13 5:32 PM",
          "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "15/08/13 10:19 AM",
          "commitNameOld": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 117.34,
          "commitsBetweenForRepo": 711,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,56 @@\n-  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n-      boolean forReading) {\n+  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n     // Collect RemoteEditLogs available from each FileJournalManager\n     List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n     for (JournalAndStream j : journals) {\n       if (j.getManager() instanceof FileJournalManager) {\n         FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n         try {\n-          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading, false));\n+          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false));\n         } catch (Throwable t) {\n           LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n         }\n       }\n     }\n     \n     // Group logs by their starting txid\n     ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n       Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n     long curStartTxId \u003d fromTxId;\n \n     List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n     while (true) {\n       ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n       if (logGroup.isEmpty()) {\n         // we have a gap in logs - for example because we recovered some old\n         // storage directory with ancient logs. Clear out any logs we\u0027ve\n         // accumulated so far, and then skip to the next segment of logs\n         // after the gap.\n         SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n         startTxIds \u003d startTxIds.tailSet(curStartTxId);\n         if (startTxIds.isEmpty()) {\n           break;\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                 \"not returning previous logs in manifest.\");\n           }\n           logs.clear();\n           curStartTxId \u003d startTxIds.first();\n           continue;\n         }\n       }\n \n       // Find the one that extends the farthest forward\n       RemoteEditLog bestLog \u003d Collections.max(logGroup);\n       logs.add(bestLog);\n       // And then start looking from after that point\n       curStartTxId \u003d bestLog.getEndTxId() + 1;\n     }\n     RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n           + ret);      \n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldValue": "[fromTxId-long, forReading-boolean]",
            "newValue": "[fromTxId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/13 5:32 PM",
          "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "15/08/13 10:19 AM",
          "commitNameOld": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 117.34,
          "commitsBetweenForRepo": 711,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,56 @@\n-  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n-      boolean forReading) {\n+  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n     // Collect RemoteEditLogs available from each FileJournalManager\n     List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n     for (JournalAndStream j : journals) {\n       if (j.getManager() instanceof FileJournalManager) {\n         FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n         try {\n-          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading, false));\n+          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false));\n         } catch (Throwable t) {\n           LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n         }\n       }\n     }\n     \n     // Group logs by their starting txid\n     ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n       Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n     long curStartTxId \u003d fromTxId;\n \n     List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n     while (true) {\n       ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n       if (logGroup.isEmpty()) {\n         // we have a gap in logs - for example because we recovered some old\n         // storage directory with ancient logs. Clear out any logs we\u0027ve\n         // accumulated so far, and then skip to the next segment of logs\n         // after the gap.\n         SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n         startTxIds \u003d startTxIds.tailSet(curStartTxId);\n         if (startTxIds.isEmpty()) {\n           break;\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                 \"not returning previous logs in manifest.\");\n           }\n           logs.clear();\n           curStartTxId \u003d startTxIds.first();\n           continue;\n         }\n       }\n \n       // Find the one that extends the farthest forward\n       RemoteEditLog bestLog \u003d Collections.max(logGroup);\n       logs.add(bestLog);\n       // And then start looking from after that point\n       curStartTxId \u003d bestLog.getEndTxId() + 1;\n     }\n     RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n           + ret);      \n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "8172215e5601c3bb03fb5c0a0d88768142ea5087": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5080. BootstrapStandby not working with QJM when the existing NN is active. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514386 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/13 10:19 AM",
      "commitName": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/05/13 12:37 PM",
      "commitNameOld": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 84.9,
      "commitsBetweenForRepo": 539,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n       boolean forReading) {\n     // Collect RemoteEditLogs available from each FileJournalManager\n     List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n     for (JournalAndStream j : journals) {\n       if (j.getManager() instanceof FileJournalManager) {\n         FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n         try {\n-          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading));\n+          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading, false));\n         } catch (Throwable t) {\n           LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n         }\n       }\n     }\n     \n     // Group logs by their starting txid\n     ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n       Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n     long curStartTxId \u003d fromTxId;\n \n     List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n     while (true) {\n       ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n       if (logGroup.isEmpty()) {\n         // we have a gap in logs - for example because we recovered some old\n         // storage directory with ancient logs. Clear out any logs we\u0027ve\n         // accumulated so far, and then skip to the next segment of logs\n         // after the gap.\n         SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n         startTxIds \u003d startTxIds.tailSet(curStartTxId);\n         if (startTxIds.isEmpty()) {\n           break;\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                 \"not returning previous logs in manifest.\");\n           }\n           logs.clear();\n           curStartTxId \u003d startTxIds.first();\n           continue;\n         }\n       }\n \n       // Find the one that extends the farthest forward\n       RemoteEditLog bestLog \u003d Collections.max(logGroup);\n       logs.add(bestLog);\n       // And then start looking from after that point\n       curStartTxId \u003d bestLog.getEndTxId() + 1;\n     }\n     RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n           + ret);      \n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n      boolean forReading) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading, false));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "8c62c46046656c01b327c378e89d57b4bf37e16e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/13 12:37 PM",
      "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/05/13 12:37 PM",
          "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "10/09/12 11:51 AM",
          "commitNameOld": "ca4582222e89114e4c61d38fbf973a66d2867abf",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 254.03,
          "commitsBetweenForRepo": 1408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,57 @@\n-  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n+  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n+      boolean forReading) {\n     // Collect RemoteEditLogs available from each FileJournalManager\n     List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n     for (JournalAndStream j : journals) {\n       if (j.getManager() instanceof FileJournalManager) {\n         FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n         try {\n-          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId));\n+          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading));\n         } catch (Throwable t) {\n           LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n         }\n       }\n     }\n     \n     // Group logs by their starting txid\n     ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n       Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n     long curStartTxId \u003d fromTxId;\n \n     List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n     while (true) {\n       ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n       if (logGroup.isEmpty()) {\n         // we have a gap in logs - for example because we recovered some old\n         // storage directory with ancient logs. Clear out any logs we\u0027ve\n         // accumulated so far, and then skip to the next segment of logs\n         // after the gap.\n         SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n         startTxIds \u003d startTxIds.tailSet(curStartTxId);\n         if (startTxIds.isEmpty()) {\n           break;\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                 \"not returning previous logs in manifest.\");\n           }\n           logs.clear();\n           curStartTxId \u003d startTxIds.first();\n           continue;\n         }\n       }\n \n       // Find the one that extends the farthest forward\n       RemoteEditLog bestLog \u003d Collections.max(logGroup);\n       logs.add(bestLog);\n       // And then start looking from after that point\n       curStartTxId \u003d bestLog.getEndTxId() + 1;\n     }\n     RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n           + ret);      \n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n      boolean forReading) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldValue": "[fromTxId-long]",
            "newValue": "[fromTxId-long, forReading-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/05/13 12:37 PM",
          "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "10/09/12 11:51 AM",
          "commitNameOld": "ca4582222e89114e4c61d38fbf973a66d2867abf",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 254.03,
          "commitsBetweenForRepo": 1408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,57 @@\n-  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n+  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n+      boolean forReading) {\n     // Collect RemoteEditLogs available from each FileJournalManager\n     List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n     for (JournalAndStream j : journals) {\n       if (j.getManager() instanceof FileJournalManager) {\n         FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n         try {\n-          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId));\n+          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading));\n         } catch (Throwable t) {\n           LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n         }\n       }\n     }\n     \n     // Group logs by their starting txid\n     ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n       Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n     long curStartTxId \u003d fromTxId;\n \n     List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n     while (true) {\n       ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n       if (logGroup.isEmpty()) {\n         // we have a gap in logs - for example because we recovered some old\n         // storage directory with ancient logs. Clear out any logs we\u0027ve\n         // accumulated so far, and then skip to the next segment of logs\n         // after the gap.\n         SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n         startTxIds \u003d startTxIds.tailSet(curStartTxId);\n         if (startTxIds.isEmpty()) {\n           break;\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                 \"not returning previous logs in manifest.\");\n           }\n           logs.clear();\n           curStartTxId \u003d startTxIds.first();\n           continue;\n         }\n       }\n \n       // Find the one that extends the farthest forward\n       RemoteEditLog bestLog \u003d Collections.max(logGroup);\n       logs.add(bestLog);\n       // And then start looking from after that point\n       curStartTxId \u003d bestLog.getEndTxId() + 1;\n     }\n     RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n           + ret);      \n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId,\n      boolean forReading) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, forReading));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2158. Add JournalSet to manage the set of journals.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/11 6:14 PM",
      "commitName": "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,56 @@\n+  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n+    // Collect RemoteEditLogs available from each FileJournalManager\n+    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n+    for (JournalAndStream j : journals) {\n+      if (j.getManager() instanceof FileJournalManager) {\n+        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n+        try {\n+          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId));\n+        } catch (Throwable t) {\n+          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n+        }\n+      }\n+    }\n+    \n+    // Group logs by their starting txid\n+    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n+      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n+    long curStartTxId \u003d fromTxId;\n+\n+    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n+    while (true) {\n+      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n+      if (logGroup.isEmpty()) {\n+        // we have a gap in logs - for example because we recovered some old\n+        // storage directory with ancient logs. Clear out any logs we\u0027ve\n+        // accumulated so far, and then skip to the next segment of logs\n+        // after the gap.\n+        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n+        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n+        if (startTxIds.isEmpty()) {\n+          break;\n+        } else {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n+                \"not returning previous logs in manifest.\");\n+          }\n+          logs.clear();\n+          curStartTxId \u003d startTxIds.first();\n+          continue;\n+        }\n+      }\n+\n+      // Find the one that extends the farthest forward\n+      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n+      logs.add(bestLog);\n+      // And then start looking from after that point\n+      curStartTxId \u003d bestLog.getEndTxId() + 1;\n+    }\n+    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n+    \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n+          + ret);      \n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) {\n    // Collect RemoteEditLogs available from each FileJournalManager\n    List\u003cRemoteEditLog\u003e allLogs \u003d Lists.newArrayList();\n    for (JournalAndStream j : journals) {\n      if (j.getManager() instanceof FileJournalManager) {\n        FileJournalManager fjm \u003d (FileJournalManager)j.getManager();\n        try {\n          allLogs.addAll(fjm.getRemoteEditLogs(fromTxId));\n        } catch (Throwable t) {\n          LOG.warn(\"Cannot list edit logs in \" + fjm, t);\n        }\n      }\n    }\n    \n    // Group logs by their starting txid\n    ImmutableListMultimap\u003cLong, RemoteEditLog\u003e logsByStartTxId \u003d\n      Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID);\n    long curStartTxId \u003d fromTxId;\n\n    List\u003cRemoteEditLog\u003e logs \u003d Lists.newArrayList();\n    while (true) {\n      ImmutableList\u003cRemoteEditLog\u003e logGroup \u003d logsByStartTxId.get(curStartTxId);\n      if (logGroup.isEmpty()) {\n        // we have a gap in logs - for example because we recovered some old\n        // storage directory with ancient logs. Clear out any logs we\u0027ve\n        // accumulated so far, and then skip to the next segment of logs\n        // after the gap.\n        SortedSet\u003cLong\u003e startTxIds \u003d Sets.newTreeSet(logsByStartTxId.keySet());\n        startTxIds \u003d startTxIds.tailSet(curStartTxId);\n        if (startTxIds.isEmpty()) {\n          break;\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found gap in logs at \" + curStartTxId + \": \" +\n                \"not returning previous logs in manifest.\");\n          }\n          logs.clear();\n          curStartTxId \u003d startTxIds.first();\n          continue;\n        }\n      }\n\n      // Find the one that extends the farthest forward\n      RemoteEditLog bestLog \u003d Collections.max(logGroup);\n      logs.add(bestLog);\n      // And then start looking from after that point\n      curStartTxId \u003d bestLog.getEndTxId() + 1;\n    }\n    RemoteEditLogManifest ret \u003d new RemoteEditLogManifest(logs);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Generated manifest for logs since \" + fromTxId + \":\"\n          + ret);      \n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java"
    }
  }
}