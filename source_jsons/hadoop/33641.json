{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerCommandExecutor.java",
  "functionName": "executeDockerCommand",
  "functionId": "executeDockerCommand___dockerCommand-DockerCommand__containerId-String__env-Map__String,String____privilegedOperationExecutor-PrivilegedOperationExecutor__disableFailureLogging-boolean__nmContext-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
  "functionStartLine": 75,
  "functionEndLine": 100,
  "numCommitsSeen": 22,
  "timeTaken": 4850,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "d3b1c6319546706c41a2011ead6c3fe208883200",
    "fd5cb2c9468070abdea3305974ecfc3aa4b0be12"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ymultichange(Yparameterchange,Ybodychange)",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ymultichange(Yparameterchange,Ybodychange)",
    "d3b1c6319546706c41a2011ead6c3fe208883200": "Ybodychange",
    "fd5cb2c9468070abdea3305974ecfc3aa4b0be12": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/09/18 5:18 PM",
      "commitNameOld": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 188.96,
      "commitsBetweenForRepo": 1544,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n       String containerId, Map\u003cString, String\u003e env,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       boolean disableFailureLogging, Context nmContext)\n       throws ContainerExecutionException {\n     PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n         dockerCommand, containerId, env, nmContext);\n \n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Running docker command: \" + dockerCommand);\n-    }\n+    LOG.debug(\"Running docker command: {}\", dockerCommand);\n+\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging, Context nmContext)\n      throws ContainerExecutionException {\n    PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n        dockerCommand, containerId, env, nmContext);\n\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    LOG.debug(\"Running docker command: {}\", dockerCommand);\n\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
      "extendedDetails": {}
    },
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
          "commitDate": "02/08/18 8:43 AM",
          "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "02/05/18 11:33 AM",
          "commitNameOld": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 91.88,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n-      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n+      String containerId, Map\u003cString, String\u003e env,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       boolean disableFailureLogging, Context nmContext)\n       throws ContainerExecutionException {\n     PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n-        dockerCommand, containerId, env, conf, nmContext);\n+        dockerCommand, containerId, env, nmContext);\n \n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Running docker command: \" + dockerCommand);\n     }\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging, Context nmContext)\n      throws ContainerExecutionException {\n    PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n        dockerCommand, containerId, env, nmContext);\n\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \" + dockerCommand);\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {
            "oldValue": "[dockerCommand-DockerCommand, containerId-String, env-Map\u003cString,String\u003e, conf-Configuration, privilegedOperationExecutor-PrivilegedOperationExecutor, disableFailureLogging-boolean, nmContext-Context]",
            "newValue": "[dockerCommand-DockerCommand, containerId-String, env-Map\u003cString,String\u003e, privilegedOperationExecutor-PrivilegedOperationExecutor, disableFailureLogging-boolean, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
          "commitDate": "02/08/18 8:43 AM",
          "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "02/05/18 11:33 AM",
          "commitNameOld": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 91.88,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n-      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n+      String containerId, Map\u003cString, String\u003e env,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       boolean disableFailureLogging, Context nmContext)\n       throws ContainerExecutionException {\n     PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n-        dockerCommand, containerId, env, conf, nmContext);\n+        dockerCommand, containerId, env, nmContext);\n \n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Running docker command: \" + dockerCommand);\n     }\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging, Context nmContext)\n      throws ContainerExecutionException {\n    PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n        dockerCommand, containerId, env, nmContext);\n\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \" + dockerCommand);\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
      "commitDate": "02/05/18 11:33 AM",
      "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "20/04/18 10:49 AM",
      "commitNameOld": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.03,
      "commitsBetweenForRepo": 584,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,27 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n       String containerId, Map\u003cString, String\u003e env, Configuration conf,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       boolean disableFailureLogging, Context nmContext)\n       throws ContainerExecutionException {\n-    DockerClient dockerClient \u003d new DockerClient(conf);\n-    String commandFile \u003d\n-        dockerClient.writeCommandToTempFile(dockerCommand,\n-        nmContext.getContainers().get(ContainerId.fromString(containerId)),\n-        nmContext);\n-    PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n-        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n-    dockerOp.appendArgs(commandFile);\n+    PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n+        dockerCommand, containerId, env, conf, nmContext);\n+\n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Running docker command: \" + dockerCommand);\n     }\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging, Context nmContext)\n      throws ContainerExecutionException {\n    PrivilegedOperation dockerOp \u003d dockerCommand.preparePrivilegedOperation(\n        dockerCommand, containerId, env, conf, nmContext);\n\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \" + dockerCommand);\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
          "commitDate": "20/04/18 10:49 AM",
          "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "10/04/18 4:25 PM",
          "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n       String containerId, Map\u003cString, String\u003e env, Configuration conf,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n-      boolean disableFailureLogging)\n+      boolean disableFailureLogging, Context nmContext)\n       throws ContainerExecutionException {\n     DockerClient dockerClient \u003d new DockerClient(conf);\n     String commandFile \u003d\n-        dockerClient.writeCommandToTempFile(dockerCommand, containerId);\n+        dockerClient.writeCommandToTempFile(dockerCommand,\n+        nmContext.getContainers().get(ContainerId.fromString(containerId)),\n+        nmContext);\n     PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n     dockerOp.appendArgs(commandFile);\n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Running docker command: \" + dockerCommand);\n     }\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging, Context nmContext)\n      throws ContainerExecutionException {\n    DockerClient dockerClient \u003d new DockerClient(conf);\n    String commandFile \u003d\n        dockerClient.writeCommandToTempFile(dockerCommand,\n        nmContext.getContainers().get(ContainerId.fromString(containerId)),\n        nmContext);\n    PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n    dockerOp.appendArgs(commandFile);\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \" + dockerCommand);\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {
            "oldValue": "[dockerCommand-DockerCommand, containerId-String, env-Map\u003cString,String\u003e, conf-Configuration, privilegedOperationExecutor-PrivilegedOperationExecutor, disableFailureLogging-boolean]",
            "newValue": "[dockerCommand-DockerCommand, containerId-String, env-Map\u003cString,String\u003e, conf-Configuration, privilegedOperationExecutor-PrivilegedOperationExecutor, disableFailureLogging-boolean, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
          "commitDate": "20/04/18 10:49 AM",
          "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "10/04/18 4:25 PM",
          "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n       String containerId, Map\u003cString, String\u003e env, Configuration conf,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n-      boolean disableFailureLogging)\n+      boolean disableFailureLogging, Context nmContext)\n       throws ContainerExecutionException {\n     DockerClient dockerClient \u003d new DockerClient(conf);\n     String commandFile \u003d\n-        dockerClient.writeCommandToTempFile(dockerCommand, containerId);\n+        dockerClient.writeCommandToTempFile(dockerCommand,\n+        nmContext.getContainers().get(ContainerId.fromString(containerId)),\n+        nmContext);\n     PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n     dockerOp.appendArgs(commandFile);\n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Running docker command: \" + dockerCommand);\n     }\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging, Context nmContext)\n      throws ContainerExecutionException {\n    DockerClient dockerClient \u003d new DockerClient(conf);\n    String commandFile \u003d\n        dockerClient.writeCommandToTempFile(dockerCommand,\n        nmContext.getContainers().get(ContainerId.fromString(containerId)),\n        nmContext);\n    PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n    dockerOp.appendArgs(commandFile);\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \" + dockerCommand);\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "d3b1c6319546706c41a2011ead6c3fe208883200": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6623. Add support to turn off launching privileged containers in the container-executor. (Varun Vasudev via wangda)\n\nChange-Id: I76aec68cbfb42d239279d7245a03290d691e87a4\n",
      "commitDate": "28/09/17 4:41 PM",
      "commitName": "d3b1c6319546706c41a2011ead6c3fe208883200",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 37.64,
      "commitsBetweenForRepo": 383,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   public static String executeDockerCommand(DockerCommand dockerCommand,\n       String containerId, Map\u003cString, String\u003e env, Configuration conf,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       boolean disableFailureLogging)\n       throws ContainerExecutionException {\n     DockerClient dockerClient \u003d new DockerClient(conf);\n     String commandFile \u003d\n         dockerClient.writeCommandToTempFile(dockerCommand, containerId);\n     PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n     dockerOp.appendArgs(commandFile);\n     if (disableFailureLogging) {\n       dockerOp.disableFailureLogging();\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Running docker command: \"\n-          + dockerCommand.getCommandWithArguments());\n+      LOG.debug(\"Running docker command: \" + dockerCommand);\n     }\n     try {\n       String result \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, dockerOp, null,\n               env, true, false);\n       if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n         result \u003d result.trim();\n       }\n       return result;\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\"Docker operation failed\",\n           e.getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging)\n      throws ContainerExecutionException {\n    DockerClient dockerClient \u003d new DockerClient(conf);\n    String commandFile \u003d\n        dockerClient.writeCommandToTempFile(dockerCommand, containerId);\n    PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n    dockerOp.appendArgs(commandFile);\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \" + dockerCommand);\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
      "extendedDetails": {}
    },
    "fd5cb2c9468070abdea3305974ecfc3aa4b0be12": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6374. Improve test coverage and add utility classes for common Docker operations. Contributed by Shane Kumpf\n",
      "commitDate": "03/05/17 2:49 PM",
      "commitName": "fd5cb2c9468070abdea3305974ecfc3aa4b0be12",
      "commitAuthor": "Sidharta S",
      "diff": "@@ -0,0 +1,31 @@\n+  public static String executeDockerCommand(DockerCommand dockerCommand,\n+      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n+      PrivilegedOperationExecutor privilegedOperationExecutor,\n+      boolean disableFailureLogging)\n+      throws ContainerExecutionException {\n+    DockerClient dockerClient \u003d new DockerClient(conf);\n+    String commandFile \u003d\n+        dockerClient.writeCommandToTempFile(dockerCommand, containerId);\n+    PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n+    dockerOp.appendArgs(commandFile);\n+    if (disableFailureLogging) {\n+      dockerOp.disableFailureLogging();\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Running docker command: \"\n+          + dockerCommand.getCommandWithArguments());\n+    }\n+    try {\n+      String result \u003d privilegedOperationExecutor\n+          .executePrivilegedOperation(null, dockerOp, null,\n+              env, true, false);\n+      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n+        result \u003d result.trim();\n+      }\n+      return result;\n+    } catch (PrivilegedOperationException e) {\n+      throw new ContainerExecutionException(\"Docker operation failed\",\n+          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String executeDockerCommand(DockerCommand dockerCommand,\n      String containerId, Map\u003cString, String\u003e env, Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      boolean disableFailureLogging)\n      throws ContainerExecutionException {\n    DockerClient dockerClient \u003d new DockerClient(conf);\n    String commandFile \u003d\n        dockerClient.writeCommandToTempFile(dockerCommand, containerId);\n    PrivilegedOperation dockerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n    dockerOp.appendArgs(commandFile);\n    if (disableFailureLogging) {\n      dockerOp.disableFailureLogging();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Running docker command: \"\n          + dockerCommand.getCommandWithArguments());\n    }\n    try {\n      String result \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, dockerOp, null,\n              env, true, false);\n      if (result !\u003d null \u0026\u0026 !result.isEmpty()) {\n        result \u003d result.trim();\n      }\n      return result;\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\"Docker operation failed\",\n          e.getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java"
    }
  }
}