{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceProfilesManagerImpl.java",
  "functionName": "parseResource",
  "functionId": "parseResource___profileInfo-Map",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
  "functionStartLine": 158,
  "functionEndLine": 186,
  "numCommitsSeen": 17,
  "timeTaken": 2301,
  "changeHistory": [
    "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "a9b4426302e3ac1f20db44a03648597900a92330"
  ],
  "changeHistoryShort": {
    "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da": "Ymultichange(Yparameterchange,Ybodychange)",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ybodychange",
    "a9b4426302e3ac1f20db44a03648597900a92330": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6935. [YARN-3926] ResourceProfilesManagerImpl.parseResource() has no need of the key parameter\n(Contributed by Manikandan R via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6935. [YARN-3926] ResourceProfilesManagerImpl.parseResource() has no need of the key parameter\n(Contributed by Manikandan R via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  private Resource parseResource(String key, Map value) throws IOException {\n+  private Resource parseResource(Map profileInfo) throws IOException {\n     Resource resource \u003d Resource.newInstance(0, 0);\n-    Iterator iterator \u003d value.entrySet().iterator();\n+    Iterator iterator \u003d profileInfo.entrySet().iterator();\n     Map\u003cString, ResourceInformation\u003e resourceTypes \u003d ResourceUtils\n         .getResourceTypes();\n     while (iterator.hasNext()) {\n       Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n       String resourceName \u003d resourceEntry.getKey().toString();\n       ResourceInformation resourceValue \u003d fromString(resourceName,\n           resourceEntry.getValue().toString());\n       if (resourceName.equals(MEMORY)) {\n         resource.setMemorySize(resourceValue.getValue());\n         continue;\n       }\n       if (resourceName.equals(VCORES)) {\n         resource\n             .setVirtualCores(Long.valueOf(resourceValue.getValue()).intValue());\n         continue;\n       }\n       if (resourceTypes.containsKey(resourceName)) {\n         resource.setResourceInformation(resourceName, resourceValue);\n       } else {\n         throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n             + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n             + \"\u0027\");\n       }\n     }\n     return resource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Resource parseResource(Map profileInfo) throws IOException {\n    Resource resource \u003d Resource.newInstance(0, 0);\n    Iterator iterator \u003d profileInfo.entrySet().iterator();\n    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d ResourceUtils\n        .getResourceTypes();\n    while (iterator.hasNext()) {\n      Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n      String resourceName \u003d resourceEntry.getKey().toString();\n      ResourceInformation resourceValue \u003d fromString(resourceName,\n          resourceEntry.getValue().toString());\n      if (resourceName.equals(MEMORY)) {\n        resource.setMemorySize(resourceValue.getValue());\n        continue;\n      }\n      if (resourceName.equals(VCORES)) {\n        resource\n            .setVirtualCores(Long.valueOf(resourceValue.getValue()).intValue());\n        continue;\n      }\n      if (resourceTypes.containsKey(resourceName)) {\n        resource.setResourceInformation(resourceName, resourceValue);\n      } else {\n        throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n            + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n            + \"\u0027\");\n      }\n    }\n    return resource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[key-String, value-Map]",
            "newValue": "[profileInfo-Map]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6935. [YARN-3926] ResourceProfilesManagerImpl.parseResource() has no need of the key parameter\n(Contributed by Manikandan R via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  private Resource parseResource(String key, Map value) throws IOException {\n+  private Resource parseResource(Map profileInfo) throws IOException {\n     Resource resource \u003d Resource.newInstance(0, 0);\n-    Iterator iterator \u003d value.entrySet().iterator();\n+    Iterator iterator \u003d profileInfo.entrySet().iterator();\n     Map\u003cString, ResourceInformation\u003e resourceTypes \u003d ResourceUtils\n         .getResourceTypes();\n     while (iterator.hasNext()) {\n       Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n       String resourceName \u003d resourceEntry.getKey().toString();\n       ResourceInformation resourceValue \u003d fromString(resourceName,\n           resourceEntry.getValue().toString());\n       if (resourceName.equals(MEMORY)) {\n         resource.setMemorySize(resourceValue.getValue());\n         continue;\n       }\n       if (resourceName.equals(VCORES)) {\n         resource\n             .setVirtualCores(Long.valueOf(resourceValue.getValue()).intValue());\n         continue;\n       }\n       if (resourceTypes.containsKey(resourceName)) {\n         resource.setResourceInformation(resourceName, resourceValue);\n       } else {\n         throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n             + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n             + \"\u0027\");\n       }\n     }\n     return resource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Resource parseResource(Map profileInfo) throws IOException {\n    Resource resource \u003d Resource.newInstance(0, 0);\n    Iterator iterator \u003d profileInfo.entrySet().iterator();\n    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d ResourceUtils\n        .getResourceTypes();\n    while (iterator.hasNext()) {\n      Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n      String resourceName \u003d resourceEntry.getKey().toString();\n      ResourceInformation resourceValue \u003d fromString(resourceName,\n          resourceEntry.getValue().toString());\n      if (resourceName.equals(MEMORY)) {\n        resource.setMemorySize(resourceValue.getValue());\n        continue;\n      }\n      if (resourceName.equals(VCORES)) {\n        resource\n            .setVirtualCores(Long.valueOf(resourceValue.getValue()).intValue());\n        continue;\n      }\n      if (resourceTypes.containsKey(resourceName)) {\n        resource.setResourceInformation(resourceName, resourceValue);\n      } else {\n        throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n            + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n            + \"\u0027\");\n      }\n    }\n    return resource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "7805deed4896e470ebd2f6bbd1ba9962947c63cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   private Resource parseResource(String key, Map value) throws IOException {\n     Resource resource \u003d Resource.newInstance(0, 0);\n     Iterator iterator \u003d value.entrySet().iterator();\n     Map\u003cString, ResourceInformation\u003e resourceTypes \u003d\n         ResourceUtils.getResourceTypes();\n     while (iterator.hasNext()) {\n       Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n       String resourceName \u003d resourceEntry.getKey().toString();\n       ResourceInformation resourceValue \u003d\n           fromString(resourceName, resourceEntry.getValue().toString());\n       if (resourceName.equals(MEMORY)) {\n         resource.setMemorySize(resourceValue.getValue());\n         continue;\n       }\n       if (resourceName.equals(VCORES)) {\n-        resource.setVirtualCores(resourceValue.getValue().intValue());\n+        resource\n+            .setVirtualCores(Long.valueOf(resourceValue.getValue()).intValue());\n         continue;\n       }\n       if (resourceTypes.containsKey(resourceName)) {\n         resource.setResourceInformation(resourceName, resourceValue);\n       } else {\n         throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n             + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n             + \"\u0027\");\n       }\n     }\n     return resource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource parseResource(String key, Map value) throws IOException {\n    Resource resource \u003d Resource.newInstance(0, 0);\n    Iterator iterator \u003d value.entrySet().iterator();\n    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d\n        ResourceUtils.getResourceTypes();\n    while (iterator.hasNext()) {\n      Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n      String resourceName \u003d resourceEntry.getKey().toString();\n      ResourceInformation resourceValue \u003d\n          fromString(resourceName, resourceEntry.getValue().toString());\n      if (resourceName.equals(MEMORY)) {\n        resource.setMemorySize(resourceValue.getValue());\n        continue;\n      }\n      if (resourceName.equals(VCORES)) {\n        resource\n            .setVirtualCores(Long.valueOf(resourceValue.getValue()).intValue());\n        continue;\n      }\n      if (resourceTypes.containsKey(resourceName)) {\n        resource.setResourceInformation(resourceName, resourceValue);\n      } else {\n        throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n            + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n            + \"\u0027\");\n      }\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
      "extendedDetails": {}
    },
    "a9b4426302e3ac1f20db44a03648597900a92330": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5707. Add manager class for resource profiles. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "a9b4426302e3ac1f20db44a03648597900a92330",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,28 @@\n+  private Resource parseResource(String key, Map value) throws IOException {\n+    Resource resource \u003d Resource.newInstance(0, 0);\n+    Iterator iterator \u003d value.entrySet().iterator();\n+    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d\n+        ResourceUtils.getResourceTypes();\n+    while (iterator.hasNext()) {\n+      Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n+      String resourceName \u003d resourceEntry.getKey().toString();\n+      ResourceInformation resourceValue \u003d\n+          fromString(resourceName, resourceEntry.getValue().toString());\n+      if (resourceName.equals(MEMORY)) {\n+        resource.setMemorySize(resourceValue.getValue());\n+        continue;\n+      }\n+      if (resourceName.equals(VCORES)) {\n+        resource.setVirtualCores(resourceValue.getValue().intValue());\n+        continue;\n+      }\n+      if (resourceTypes.containsKey(resourceName)) {\n+        resource.setResourceInformation(resourceName, resourceValue);\n+      } else {\n+        throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n+            + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n+            + \"\u0027\");\n+      }\n+    }\n+    return resource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource parseResource(String key, Map value) throws IOException {\n    Resource resource \u003d Resource.newInstance(0, 0);\n    Iterator iterator \u003d value.entrySet().iterator();\n    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d\n        ResourceUtils.getResourceTypes();\n    while (iterator.hasNext()) {\n      Map.Entry resourceEntry \u003d (Map.Entry) iterator.next();\n      String resourceName \u003d resourceEntry.getKey().toString();\n      ResourceInformation resourceValue \u003d\n          fromString(resourceName, resourceEntry.getValue().toString());\n      if (resourceName.equals(MEMORY)) {\n        resource.setMemorySize(resourceValue.getValue());\n        continue;\n      }\n      if (resourceName.equals(VCORES)) {\n        resource.setVirtualCores(resourceValue.getValue().intValue());\n        continue;\n      }\n      if (resourceTypes.containsKey(resourceName)) {\n        resource.setResourceInformation(resourceName, resourceValue);\n      } else {\n        throw new IOException(\"Unrecognized resource type \u0027\" + resourceName\n            + \"\u0027. Recognized resource types are \u0027\" + resourceTypes.keySet()\n            + \"\u0027\");\n      }\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java"
    }
  }
}