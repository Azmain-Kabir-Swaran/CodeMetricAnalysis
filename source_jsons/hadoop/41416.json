{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairSchedulerConfiguration.java",
  "functionName": "parseNewStyleResource",
  "functionId": "parseNewStyleResource___value-String__missing-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
  "functionStartLine": 523,
  "functionEndLine": 564,
  "numCommitsSeen": 48,
  "timeTaken": 2056,
  "changeHistory": [
    "7ab88dbfa6fceaf8fea80eff1b23ed1ac486b393",
    "64411a6ff74ef87756aae12224ff9c25f7e2a143",
    "9edc74f64a31450af3c55c0dadf352862e4b359d"
  ],
  "changeHistoryShort": {
    "7ab88dbfa6fceaf8fea80eff1b23ed1ac486b393": "Ybodychange",
    "64411a6ff74ef87756aae12224ff9c25f7e2a143": "Ybodychange",
    "9edc74f64a31450af3c55c0dadf352862e4b359d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7ab88dbfa6fceaf8fea80eff1b23ed1ac486b393": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7291. Better input parsing for resource in allocation file. Contributed by Zoltan Siegl\n",
      "commitDate": "21/08/19 8:01 AM",
      "commitName": "7ab88dbfa6fceaf8fea80eff1b23ed1ac486b393",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 169.41,
      "commitsBetweenForRepo": 1280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private static ConfigurableResource parseNewStyleResource(String value,\n           long missing) throws AllocationConfigurationException {\n \n     final ConfigurableResource configurableResource;\n     boolean asPercent \u003d value.contains(\"%\");\n     if (asPercent) {\n       configurableResource \u003d new ConfigurableResource();\n     } else {\n       configurableResource \u003d new ConfigurableResource(missing);\n     }\n \n     String[] resources \u003d value.split(\",\");\n     for (String resource : resources) {\n       String[] parts \u003d resource.split(\"\u003d\");\n \n       if (parts.length !\u003d 2) {\n         throw createConfigException(value,\n                         \"Every resource must be of the form: name\u003dvalue.\");\n       }\n \n       String resourceName \u003d parts[0].trim();\n       String resourceValue \u003d parts[1].trim();\n       try {\n         if (asPercent) {\n           double percentage \u003d parseNewStyleResourceAsPercentage(value,\n-              resourceValue);\n+              resourceName, resourceValue);\n           configurableResource.setPercentage(resourceName, percentage);\n         } else {\n           long parsedValue \u003d parseNewStyleResourceAsAbsoluteValue(value,\n               resourceValue, resourceName);\n           configurableResource.setValue(resourceName, parsedValue);\n         }\n       } catch (ResourceNotFoundException ex) {\n         throw createConfigException(value, \"The \"\n             + \"resource name, \\\"\" + resourceName + \"\\\" was not \"\n             + \"recognized. Please check the value of \"\n             + YarnConfiguration.RESOURCE_TYPES + \" in the Resource \"\n             + \"Manager\u0027s configuration files.\", ex);\n       }\n     }\n     return configurableResource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ConfigurableResource parseNewStyleResource(String value,\n          long missing) throws AllocationConfigurationException {\n\n    final ConfigurableResource configurableResource;\n    boolean asPercent \u003d value.contains(\"%\");\n    if (asPercent) {\n      configurableResource \u003d new ConfigurableResource();\n    } else {\n      configurableResource \u003d new ConfigurableResource(missing);\n    }\n\n    String[] resources \u003d value.split(\",\");\n    for (String resource : resources) {\n      String[] parts \u003d resource.split(\"\u003d\");\n\n      if (parts.length !\u003d 2) {\n        throw createConfigException(value,\n                        \"Every resource must be of the form: name\u003dvalue.\");\n      }\n\n      String resourceName \u003d parts[0].trim();\n      String resourceValue \u003d parts[1].trim();\n      try {\n        if (asPercent) {\n          double percentage \u003d parseNewStyleResourceAsPercentage(value,\n              resourceName, resourceValue);\n          configurableResource.setPercentage(resourceName, percentage);\n        } else {\n          long parsedValue \u003d parseNewStyleResourceAsAbsoluteValue(value,\n              resourceValue, resourceName);\n          configurableResource.setValue(resourceName, parsedValue);\n        }\n      } catch (ResourceNotFoundException ex) {\n        throw createConfigException(value, \"The \"\n            + \"resource name, \\\"\" + resourceName + \"\\\" was not \"\n            + \"recognized. Please check the value of \"\n            + YarnConfiguration.RESOURCE_TYPES + \" in the Resource \"\n            + \"Manager\u0027s configuration files.\", ex);\n      }\n    }\n    return configurableResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "64411a6ff74ef87756aae12224ff9c25f7e2a143": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8738. FairScheduler should not parse negative maxResources or minResources values as positive. (Contributed by Szilard Nemeth)\n",
      "commitDate": "10/12/18 11:06 AM",
      "commitName": "64411a6ff74ef87756aae12224ff9c25f7e2a143",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "06/07/18 11:03 AM",
      "commitNameOld": "9edc74f64a31450af3c55c0dadf352862e4b359d",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 157.04,
      "commitsBetweenForRepo": 1295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,42 @@\n   private static ConfigurableResource parseNewStyleResource(String value,\n           long missing) throws AllocationConfigurationException {\n \n     final ConfigurableResource configurableResource;\n     boolean asPercent \u003d value.contains(\"%\");\n     if (asPercent) {\n       configurableResource \u003d new ConfigurableResource();\n     } else {\n       configurableResource \u003d new ConfigurableResource(missing);\n     }\n \n     String[] resources \u003d value.split(\",\");\n     for (String resource : resources) {\n       String[] parts \u003d resource.split(\"\u003d\");\n \n       if (parts.length !\u003d 2) {\n         throw createConfigException(value,\n                         \"Every resource must be of the form: name\u003dvalue.\");\n       }\n \n       String resourceName \u003d parts[0].trim();\n       String resourceValue \u003d parts[1].trim();\n       try {\n         if (asPercent) {\n-          configurableResource.setPercentage(resourceName,\n-              findPercentage(resourceValue, \"\"));\n+          double percentage \u003d parseNewStyleResourceAsPercentage(value,\n+              resourceValue);\n+          configurableResource.setPercentage(resourceName, percentage);\n         } else {\n-          configurableResource.setValue(resourceName,\n-              Long.parseLong(resourceValue));\n+          long parsedValue \u003d parseNewStyleResourceAsAbsoluteValue(value,\n+              resourceValue, resourceName);\n+          configurableResource.setValue(resourceName, parsedValue);\n         }\n       } catch (ResourceNotFoundException ex) {\n         throw createConfigException(value, \"The \"\n             + \"resource name, \\\"\" + resourceName + \"\\\" was not \"\n             + \"recognized. Please check the value of \"\n             + YarnConfiguration.RESOURCE_TYPES + \" in the Resource \"\n             + \"Manager\u0027s configuration files.\", ex);\n-      } catch (NumberFormatException ex) {\n-        // This only comes from Long.parseLong()\n-        throw createConfigException(value, \"The \"\n-            + \"resource values must all be integers. \\\"\" + resourceValue\n-            + \"\\\" is not an integer.\", ex);\n-      } catch (AllocationConfigurationException ex) {\n-        // This only comes from findPercentage()\n-        throw createConfigException(value, \"The \"\n-            + \"resource values must all be percentages. \\\"\"\n-            + resourceValue + \"\\\" is either not a number or does not \"\n-            + \"include the \u0027%\u0027 symbol.\", ex);\n       }\n     }\n     return configurableResource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ConfigurableResource parseNewStyleResource(String value,\n          long missing) throws AllocationConfigurationException {\n\n    final ConfigurableResource configurableResource;\n    boolean asPercent \u003d value.contains(\"%\");\n    if (asPercent) {\n      configurableResource \u003d new ConfigurableResource();\n    } else {\n      configurableResource \u003d new ConfigurableResource(missing);\n    }\n\n    String[] resources \u003d value.split(\",\");\n    for (String resource : resources) {\n      String[] parts \u003d resource.split(\"\u003d\");\n\n      if (parts.length !\u003d 2) {\n        throw createConfigException(value,\n                        \"Every resource must be of the form: name\u003dvalue.\");\n      }\n\n      String resourceName \u003d parts[0].trim();\n      String resourceValue \u003d parts[1].trim();\n      try {\n        if (asPercent) {\n          double percentage \u003d parseNewStyleResourceAsPercentage(value,\n              resourceValue);\n          configurableResource.setPercentage(resourceName, percentage);\n        } else {\n          long parsedValue \u003d parseNewStyleResourceAsAbsoluteValue(value,\n              resourceValue, resourceName);\n          configurableResource.setValue(resourceName, parsedValue);\n        }\n      } catch (ResourceNotFoundException ex) {\n        throw createConfigException(value, \"The \"\n            + \"resource name, \\\"\" + resourceName + \"\\\" was not \"\n            + \"recognized. Please check the value of \"\n            + YarnConfiguration.RESOURCE_TYPES + \" in the Resource \"\n            + \"Manager\u0027s configuration files.\", ex);\n      }\n    }\n    return configurableResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "9edc74f64a31450af3c55c0dadf352862e4b359d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7556. Fair scheduler configuration should allow resource types in the minResources and maxResources properties. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "06/07/18 11:03 AM",
      "commitName": "9edc74f64a31450af3c55c0dadf352862e4b359d",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,51 @@\n+  private static ConfigurableResource parseNewStyleResource(String value,\n+          long missing) throws AllocationConfigurationException {\n+\n+    final ConfigurableResource configurableResource;\n+    boolean asPercent \u003d value.contains(\"%\");\n+    if (asPercent) {\n+      configurableResource \u003d new ConfigurableResource();\n+    } else {\n+      configurableResource \u003d new ConfigurableResource(missing);\n+    }\n+\n+    String[] resources \u003d value.split(\",\");\n+    for (String resource : resources) {\n+      String[] parts \u003d resource.split(\"\u003d\");\n+\n+      if (parts.length !\u003d 2) {\n+        throw createConfigException(value,\n+                        \"Every resource must be of the form: name\u003dvalue.\");\n+      }\n+\n+      String resourceName \u003d parts[0].trim();\n+      String resourceValue \u003d parts[1].trim();\n+      try {\n+        if (asPercent) {\n+          configurableResource.setPercentage(resourceName,\n+              findPercentage(resourceValue, \"\"));\n+        } else {\n+          configurableResource.setValue(resourceName,\n+              Long.parseLong(resourceValue));\n+        }\n+      } catch (ResourceNotFoundException ex) {\n+        throw createConfigException(value, \"The \"\n+            + \"resource name, \\\"\" + resourceName + \"\\\" was not \"\n+            + \"recognized. Please check the value of \"\n+            + YarnConfiguration.RESOURCE_TYPES + \" in the Resource \"\n+            + \"Manager\u0027s configuration files.\", ex);\n+      } catch (NumberFormatException ex) {\n+        // This only comes from Long.parseLong()\n+        throw createConfigException(value, \"The \"\n+            + \"resource values must all be integers. \\\"\" + resourceValue\n+            + \"\\\" is not an integer.\", ex);\n+      } catch (AllocationConfigurationException ex) {\n+        // This only comes from findPercentage()\n+        throw createConfigException(value, \"The \"\n+            + \"resource values must all be percentages. \\\"\"\n+            + resourceValue + \"\\\" is either not a number or does not \"\n+            + \"include the \u0027%\u0027 symbol.\", ex);\n+      }\n+    }\n+    return configurableResource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ConfigurableResource parseNewStyleResource(String value,\n          long missing) throws AllocationConfigurationException {\n\n    final ConfigurableResource configurableResource;\n    boolean asPercent \u003d value.contains(\"%\");\n    if (asPercent) {\n      configurableResource \u003d new ConfigurableResource();\n    } else {\n      configurableResource \u003d new ConfigurableResource(missing);\n    }\n\n    String[] resources \u003d value.split(\",\");\n    for (String resource : resources) {\n      String[] parts \u003d resource.split(\"\u003d\");\n\n      if (parts.length !\u003d 2) {\n        throw createConfigException(value,\n                        \"Every resource must be of the form: name\u003dvalue.\");\n      }\n\n      String resourceName \u003d parts[0].trim();\n      String resourceValue \u003d parts[1].trim();\n      try {\n        if (asPercent) {\n          configurableResource.setPercentage(resourceName,\n              findPercentage(resourceValue, \"\"));\n        } else {\n          configurableResource.setValue(resourceName,\n              Long.parseLong(resourceValue));\n        }\n      } catch (ResourceNotFoundException ex) {\n        throw createConfigException(value, \"The \"\n            + \"resource name, \\\"\" + resourceName + \"\\\" was not \"\n            + \"recognized. Please check the value of \"\n            + YarnConfiguration.RESOURCE_TYPES + \" in the Resource \"\n            + \"Manager\u0027s configuration files.\", ex);\n      } catch (NumberFormatException ex) {\n        // This only comes from Long.parseLong()\n        throw createConfigException(value, \"The \"\n            + \"resource values must all be integers. \\\"\" + resourceValue\n            + \"\\\" is not an integer.\", ex);\n      } catch (AllocationConfigurationException ex) {\n        // This only comes from findPercentage()\n        throw createConfigException(value, \"The \"\n            + \"resource values must all be percentages. \\\"\"\n            + resourceValue + \"\\\" is either not a number or does not \"\n            + \"include the \u0027%\u0027 symbol.\", ex);\n      }\n    }\n    return configurableResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java"
    }
  }
}