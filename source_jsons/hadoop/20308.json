{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Task.java",
  "functionName": "setConf",
  "functionId": "setConf___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
  "functionStartLine": 1516,
  "functionEndLine": 1539,
  "numCommitsSeen": 47,
  "timeTaken": 10184,
  "changeHistory": [
    "87e2570a1419d3616de2de3b553108ad1a8af425",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "ded6f225a55517deedc2bd502f2b68f1ca2ddee8",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "87e2570a1419d3616de2de3b553108ad1a8af425": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange)",
    "ded6f225a55517deedc2bd502f2b68f1ca2ddee8": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "87e2570a1419d3616de2de3b553108ad1a8af425": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7048. Uber AM can crash due to unknown task in statusUpdate. Contributed by Peter Bacsko\n",
      "commitDate": "12/02/18 11:21 AM",
      "commitName": "87e2570a1419d3616de2de3b553108ad1a8af425",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/01/18 1:31 PM",
      "commitNameOld": "6eef3d7f1a1e5e3f27fb3bf7596663640d786181",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 16.91,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   public void setConf(Configuration conf) {\n     if (conf instanceof JobConf) {\n       this.conf \u003d (JobConf) conf;\n     } else {\n       this.conf \u003d new JobConf(conf);\n     }\n     this.mapOutputFile \u003d ReflectionUtils.newInstance(\n         conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n           MROutputFiles.class, MapOutputFile.class), conf);\n     this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n     // add the static resolutions (this is required for the junit to\n     // work on testcases that simulate multiple nodes on a single physical\n     // node.\n     String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n     if (hostToResolved !\u003d null) {\n       for (String str : hostToResolved) {\n         String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n         String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n         NetUtils.addStaticResolution(name, resolvedName);\n       }\n     }\n+\n+    uberized \u003d conf.getBoolean(\"mapreduce.task.uberized\", false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    if (conf instanceof JobConf) {\n      this.conf \u003d (JobConf) conf;\n    } else {\n      this.conf \u003d new JobConf(conf);\n    }\n    this.mapOutputFile \u003d ReflectionUtils.newInstance(\n        conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n          MROutputFiles.class, MapOutputFile.class), conf);\n    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    // add the static resolutions (this is required for the junit to\n    // work on testcases that simulate multiple nodes on a single physical\n    // node.\n    String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n    if (hostToResolved !\u003d null) {\n      for (String str : hostToResolved) {\n        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n        NetUtils.addStaticResolution(name, resolvedName);\n      }\n    }\n\n    uberized \u003d conf.getBoolean(\"mapreduce.task.uberized\", false);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void setConf(Configuration conf) {\n    if (conf instanceof JobConf) {\n      this.conf \u003d (JobConf) conf;\n    } else {\n      this.conf \u003d new JobConf(conf);\n    }\n    this.mapOutputFile \u003d ReflectionUtils.newInstance(\n        conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n          MROutputFiles.class, MapOutputFile.class), conf);\n    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    // add the static resolutions (this is required for the junit to\n    // work on testcases that simulate multiple nodes on a single physical\n    // node.\n    String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n    if (hostToResolved !\u003d null) {\n      for (String str : hostToResolved) {\n        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n        NetUtils.addStaticResolution(name, resolvedName);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n   public void setConf(Configuration conf) {\n     if (conf instanceof JobConf) {\n       this.conf \u003d (JobConf) conf;\n     } else {\n       this.conf \u003d new JobConf(conf);\n     }\n     this.mapOutputFile \u003d ReflectionUtils.newInstance(\n         conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n           MROutputFiles.class, MapOutputFile.class), conf);\n     this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n     // add the static resolutions (this is required for the junit to\n     // work on testcases that simulate multiple nodes on a single physical\n     // node.\n-    String hostToResolved[] \u003d conf.getStrings(TTConfig.TT_STATIC_RESOLUTIONS);\n+    String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n     if (hostToResolved !\u003d null) {\n       for (String str : hostToResolved) {\n         String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n         String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n         NetUtils.addStaticResolution(name, resolvedName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setConf(Configuration conf) {\n    if (conf instanceof JobConf) {\n      this.conf \u003d (JobConf) conf;\n    } else {\n      this.conf \u003d new JobConf(conf);\n    }\n    this.mapOutputFile \u003d ReflectionUtils.newInstance(\n        conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n          MROutputFiles.class, MapOutputFile.class), conf);\n    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    // add the static resolutions (this is required for the junit to\n    // work on testcases that simulate multiple nodes on a single physical\n    // node.\n    String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n    if (hostToResolved !\u003d null) {\n      for (String str : hostToResolved) {\n        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n        NetUtils.addStaticResolution(name, resolvedName);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
            "oldMethodName": "setConf",
            "newMethodName": "setConf"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n   public void setConf(Configuration conf) {\n     if (conf instanceof JobConf) {\n       this.conf \u003d (JobConf) conf;\n     } else {\n       this.conf \u003d new JobConf(conf);\n     }\n     this.mapOutputFile \u003d ReflectionUtils.newInstance(\n         conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n           MROutputFiles.class, MapOutputFile.class), conf);\n     this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n     // add the static resolutions (this is required for the junit to\n     // work on testcases that simulate multiple nodes on a single physical\n     // node.\n-    String hostToResolved[] \u003d conf.getStrings(TTConfig.TT_STATIC_RESOLUTIONS);\n+    String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n     if (hostToResolved !\u003d null) {\n       for (String str : hostToResolved) {\n         String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n         String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n         NetUtils.addStaticResolution(name, resolvedName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setConf(Configuration conf) {\n    if (conf instanceof JobConf) {\n      this.conf \u003d (JobConf) conf;\n    } else {\n      this.conf \u003d new JobConf(conf);\n    }\n    this.mapOutputFile \u003d ReflectionUtils.newInstance(\n        conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n          MROutputFiles.class, MapOutputFile.class), conf);\n    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    // add the static resolutions (this is required for the junit to\n    // work on testcases that simulate multiple nodes on a single physical\n    // node.\n    String hostToResolved[] \u003d conf.getStrings(MRConfig.STATIC_RESOLUTIONS);\n    if (hostToResolved !\u003d null) {\n      for (String str : hostToResolved) {\n        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n        NetUtils.addStaticResolution(name, resolvedName);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
          "extendedDetails": {}
        }
      ]
    },
    "ded6f225a55517deedc2bd502f2b68f1ca2ddee8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2837. Ported bug fixes from y-merge to prepare for MAPREDUCE-279 merge. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1157249 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/11 2:00 PM",
      "commitName": "ded6f225a55517deedc2bd502f2b68f1ca2ddee8",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.92,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   public void setConf(Configuration conf) {\n     if (conf instanceof JobConf) {\n       this.conf \u003d (JobConf) conf;\n     } else {\n       this.conf \u003d new JobConf(conf);\n     }\n-    this.mapOutputFile.setConf(this.conf);\n+    this.mapOutputFile \u003d ReflectionUtils.newInstance(\n+        conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n+          MROutputFiles.class, MapOutputFile.class), conf);\n     this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n     // add the static resolutions (this is required for the junit to\n     // work on testcases that simulate multiple nodes on a single physical\n     // node.\n     String hostToResolved[] \u003d conf.getStrings(TTConfig.TT_STATIC_RESOLUTIONS);\n     if (hostToResolved !\u003d null) {\n       for (String str : hostToResolved) {\n         String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n         String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n         NetUtils.addStaticResolution(name, resolvedName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    if (conf instanceof JobConf) {\n      this.conf \u003d (JobConf) conf;\n    } else {\n      this.conf \u003d new JobConf(conf);\n    }\n    this.mapOutputFile \u003d ReflectionUtils.newInstance(\n        conf.getClass(MRConfig.TASK_LOCAL_OUTPUT_CLASS,\n          MROutputFiles.class, MapOutputFile.class), conf);\n    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    // add the static resolutions (this is required for the junit to\n    // work on testcases that simulate multiple nodes on a single physical\n    // node.\n    String hostToResolved[] \u003d conf.getStrings(TTConfig.TT_STATIC_RESOLUTIONS);\n    if (hostToResolved !\u003d null) {\n      for (String str : hostToResolved) {\n        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n        NetUtils.addStaticResolution(name, resolvedName);\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  public void setConf(Configuration conf) {\n+    if (conf instanceof JobConf) {\n+      this.conf \u003d (JobConf) conf;\n+    } else {\n+      this.conf \u003d new JobConf(conf);\n+    }\n+    this.mapOutputFile.setConf(this.conf);\n+    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n+    // add the static resolutions (this is required for the junit to\n+    // work on testcases that simulate multiple nodes on a single physical\n+    // node.\n+    String hostToResolved[] \u003d conf.getStrings(TTConfig.TT_STATIC_RESOLUTIONS);\n+    if (hostToResolved !\u003d null) {\n+      for (String str : hostToResolved) {\n+        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n+        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n+        NetUtils.addStaticResolution(name, resolvedName);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    if (conf instanceof JobConf) {\n      this.conf \u003d (JobConf) conf;\n    } else {\n      this.conf \u003d new JobConf(conf);\n    }\n    this.mapOutputFile.setConf(this.conf);\n    this.lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    // add the static resolutions (this is required for the junit to\n    // work on testcases that simulate multiple nodes on a single physical\n    // node.\n    String hostToResolved[] \u003d conf.getStrings(TTConfig.TT_STATIC_RESOLUTIONS);\n    if (hostToResolved !\u003d null) {\n      for (String str : hostToResolved) {\n        String name \u003d str.substring(0, str.indexOf(\u0027\u003d\u0027));\n        String resolvedName \u003d str.substring(str.indexOf(\u0027\u003d\u0027) + 1);\n        NetUtils.addStaticResolution(name, resolvedName);\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java"
    }
  }
}