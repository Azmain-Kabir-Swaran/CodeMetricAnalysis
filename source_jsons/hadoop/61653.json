{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Log4jWarningErrorMetricsAppender.java",
  "functionName": "append",
  "functionId": "append___event-LoggingEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java",
  "functionStartLine": 150,
  "functionEndLine": 178,
  "numCommitsSeen": 2,
  "timeTaken": 1004,
  "changeHistory": [
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "bad070fe15a642cc6f3a165612fbd272187e03cb"
  ],
  "changeHistoryShort": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "bad070fe15a642cc6f3a165612fbd272187e03cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/04/15 5:23 PM",
      "commitNameOld": "bad070fe15a642cc6f3a165612fbd272187e03cb",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1166.63,
      "commitsBetweenForRepo": 8813,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   protected void append(LoggingEvent event) {\n     String message \u003d event.getRenderedMessage();\n     String[] throwableStr \u003d event.getThrowableStrRep();\n     if (throwableStr !\u003d null) {\n       message \u003d message + \"\\n\" + StringUtils.join(\"\\n\", throwableStr);\n       message \u003d\n-          org.apache.commons.lang.StringUtils.left(message, MAX_MESSAGE_SIZE);\n+          org.apache.commons.lang3.StringUtils.left(message, MAX_MESSAGE_SIZE);\n     }\n     int level \u003d event.getLevel().toInt();\n \n     if (level \u003d\u003d Level.WARN_INT || level \u003d\u003d Level.ERROR_INT) {\n       // store second level information\n       Long eventTimeSeconds \u003d event.getTimeStamp() / 1000;\n       Map\u003cString, SortedMap\u003cLong, Integer\u003e\u003e map;\n       SortedMap\u003cLong, Integer\u003e timestampsCount;\n       SortedSet\u003cPurgeElement\u003e purgeInformation;\n       if (level \u003d\u003d Level.WARN_INT) {\n         map \u003d warnings;\n         timestampsCount \u003d warningsTimestampCount;\n         purgeInformation \u003d warningsPurgeInformation;\n       } else {\n         map \u003d errors;\n         timestampsCount \u003d errorsTimestampCount;\n         purgeInformation \u003d errorsPurgeInformation;\n       }\n       updateMessageDetails(message, eventTimeSeconds, map, timestampsCount,\n         purgeInformation);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void append(LoggingEvent event) {\n    String message \u003d event.getRenderedMessage();\n    String[] throwableStr \u003d event.getThrowableStrRep();\n    if (throwableStr !\u003d null) {\n      message \u003d message + \"\\n\" + StringUtils.join(\"\\n\", throwableStr);\n      message \u003d\n          org.apache.commons.lang3.StringUtils.left(message, MAX_MESSAGE_SIZE);\n    }\n    int level \u003d event.getLevel().toInt();\n\n    if (level \u003d\u003d Level.WARN_INT || level \u003d\u003d Level.ERROR_INT) {\n      // store second level information\n      Long eventTimeSeconds \u003d event.getTimeStamp() / 1000;\n      Map\u003cString, SortedMap\u003cLong, Integer\u003e\u003e map;\n      SortedMap\u003cLong, Integer\u003e timestampsCount;\n      SortedSet\u003cPurgeElement\u003e purgeInformation;\n      if (level \u003d\u003d Level.WARN_INT) {\n        map \u003d warnings;\n        timestampsCount \u003d warningsTimestampCount;\n        purgeInformation \u003d warningsPurgeInformation;\n      } else {\n        map \u003d errors;\n        timestampsCount \u003d errorsTimestampCount;\n        purgeInformation \u003d errorsPurgeInformation;\n      }\n      updateMessageDetails(message, eventTimeSeconds, map, timestampsCount,\n        purgeInformation);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java",
      "extendedDetails": {}
    },
    "bad070fe15a642cc6f3a165612fbd272187e03cb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2901. Add errors and warning metrics page to RM, NM web UI. (Varun Vasudev via wangda)\n",
      "commitDate": "02/04/15 5:23 PM",
      "commitName": "bad070fe15a642cc6f3a165612fbd272187e03cb",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,29 @@\n+  protected void append(LoggingEvent event) {\n+    String message \u003d event.getRenderedMessage();\n+    String[] throwableStr \u003d event.getThrowableStrRep();\n+    if (throwableStr !\u003d null) {\n+      message \u003d message + \"\\n\" + StringUtils.join(\"\\n\", throwableStr);\n+      message \u003d\n+          org.apache.commons.lang.StringUtils.left(message, MAX_MESSAGE_SIZE);\n+    }\n+    int level \u003d event.getLevel().toInt();\n+\n+    if (level \u003d\u003d Level.WARN_INT || level \u003d\u003d Level.ERROR_INT) {\n+      // store second level information\n+      Long eventTimeSeconds \u003d event.getTimeStamp() / 1000;\n+      Map\u003cString, SortedMap\u003cLong, Integer\u003e\u003e map;\n+      SortedMap\u003cLong, Integer\u003e timestampsCount;\n+      SortedSet\u003cPurgeElement\u003e purgeInformation;\n+      if (level \u003d\u003d Level.WARN_INT) {\n+        map \u003d warnings;\n+        timestampsCount \u003d warningsTimestampCount;\n+        purgeInformation \u003d warningsPurgeInformation;\n+      } else {\n+        map \u003d errors;\n+        timestampsCount \u003d errorsTimestampCount;\n+        purgeInformation \u003d errorsPurgeInformation;\n+      }\n+      updateMessageDetails(message, eventTimeSeconds, map, timestampsCount,\n+        purgeInformation);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void append(LoggingEvent event) {\n    String message \u003d event.getRenderedMessage();\n    String[] throwableStr \u003d event.getThrowableStrRep();\n    if (throwableStr !\u003d null) {\n      message \u003d message + \"\\n\" + StringUtils.join(\"\\n\", throwableStr);\n      message \u003d\n          org.apache.commons.lang.StringUtils.left(message, MAX_MESSAGE_SIZE);\n    }\n    int level \u003d event.getLevel().toInt();\n\n    if (level \u003d\u003d Level.WARN_INT || level \u003d\u003d Level.ERROR_INT) {\n      // store second level information\n      Long eventTimeSeconds \u003d event.getTimeStamp() / 1000;\n      Map\u003cString, SortedMap\u003cLong, Integer\u003e\u003e map;\n      SortedMap\u003cLong, Integer\u003e timestampsCount;\n      SortedSet\u003cPurgeElement\u003e purgeInformation;\n      if (level \u003d\u003d Level.WARN_INT) {\n        map \u003d warnings;\n        timestampsCount \u003d warningsTimestampCount;\n        purgeInformation \u003d warningsPurgeInformation;\n      } else {\n        map \u003d errors;\n        timestampsCount \u003d errorsTimestampCount;\n        purgeInformation \u003d errorsPurgeInformation;\n      }\n      updateMessageDetails(message, eventTimeSeconds, map, timestampsCount,\n        purgeInformation);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java"
    }
  }
}