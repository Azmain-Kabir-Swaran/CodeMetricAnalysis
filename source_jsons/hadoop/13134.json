{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheReplicationMonitor.java",
  "functionName": "chooseRandomDatanodeByRemainingCapacity",
  "functionId": "chooseRandomDatanodeByRemainingCapacity___targets-List__DatanodeDescriptor__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
  "functionStartLine": 799,
  "functionEndLine": 823,
  "numCommitsSeen": 28,
  "timeTaken": 1037,
  "changeHistory": [
    "8deb7a60575ad33b78a5167673276275ba7bece5"
  ],
  "changeHistoryShort": {
    "8deb7a60575ad33b78a5167673276275ba7bece5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8deb7a60575ad33b78a5167673276275ba7bece5": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5589. Namenode loops caching and uncaching when data should be uncached. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1555996 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 11:45 AM",
      "commitName": "8deb7a60575ad33b78a5167673276275ba7bece5",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,25 @@\n+  private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(\n+      final List\u003cDatanodeDescriptor\u003e targets) {\n+    // Use a weighted probability to choose the target datanode\n+    float total \u003d 0;\n+    for (DatanodeDescriptor d : targets) {\n+      total +\u003d d.getCacheRemainingPercent();\n+    }\n+    // Give each datanode a portion of keyspace equal to its relative weight\n+    // [0, w1) selects d1, [w1, w2) selects d2, etc.\n+    TreeMap\u003cInteger, DatanodeDescriptor\u003e lottery \u003d\n+        new TreeMap\u003cInteger, DatanodeDescriptor\u003e();\n+    int offset \u003d 0;\n+    for (DatanodeDescriptor d : targets) {\n+      // Since we\u0027re using floats, be paranoid about negative values\n+      int weight \u003d\n+          Math.max(1, (int)((d.getCacheRemainingPercent() / total) * 1000000));\n+      offset +\u003d weight;\n+      lottery.put(offset, d);\n+    }\n+    // Choose a number from [0, offset), which is the total amount of weight,\n+    // to select the winner\n+    DatanodeDescriptor winner \u003d\n+        lottery.higherEntry(random.nextInt(offset)).getValue();\n+    return winner;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(\n      final List\u003cDatanodeDescriptor\u003e targets) {\n    // Use a weighted probability to choose the target datanode\n    float total \u003d 0;\n    for (DatanodeDescriptor d : targets) {\n      total +\u003d d.getCacheRemainingPercent();\n    }\n    // Give each datanode a portion of keyspace equal to its relative weight\n    // [0, w1) selects d1, [w1, w2) selects d2, etc.\n    TreeMap\u003cInteger, DatanodeDescriptor\u003e lottery \u003d\n        new TreeMap\u003cInteger, DatanodeDescriptor\u003e();\n    int offset \u003d 0;\n    for (DatanodeDescriptor d : targets) {\n      // Since we\u0027re using floats, be paranoid about negative values\n      int weight \u003d\n          Math.max(1, (int)((d.getCacheRemainingPercent() / total) * 1000000));\n      offset +\u003d weight;\n      lottery.put(offset, d);\n    }\n    // Choose a number from [0, offset), which is the total amount of weight,\n    // to select the winner\n    DatanodeDescriptor winner \u003d\n        lottery.higherEntry(random.nextInt(offset)).getValue();\n    return winner;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java"
    }
  }
}