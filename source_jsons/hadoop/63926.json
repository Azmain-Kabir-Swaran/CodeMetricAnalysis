{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "getRequestedResourcesFromConfig",
  "functionId": "getRequestedResourcesFromConfig___configuration-Configuration__prefix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 696,
  "functionEndLine": 724,
  "numCommitsSeen": 36,
  "timeTaken": 1640,
  "changeHistory": [
    "52e9ee39a12ce91b3a545603dcf1103518ad2920",
    "9a7e81083801a57d6bb96584988415cbef67460d"
  ],
  "changeHistoryShort": {
    "52e9ee39a12ce91b3a545603dcf1103518ad2920": "Ybodychange",
    "9a7e81083801a57d6bb96584988415cbef67460d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "52e9ee39a12ce91b3a545603dcf1103518ad2920": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9444. YARN API ResourceUtils\u0027s getRequestedResourcesFromConfig doesn\u0027t recognize yarn.io/gpu as a valid resource. Contributed by Gergely Pollak\n",
      "commitDate": "26/11/19 7:42 AM",
      "commitName": "52e9ee39a12ce91b3a545603dcf1103518ad2920",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "02/08/19 4:04 AM",
      "commitNameOld": "cbcada804d119b837ad99de71d7f44cb4629026e",
      "commitAuthorOld": "Adam Antal",
      "daysBetweenCommits": 116.19,
      "commitsBetweenForRepo": 813,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public static List\u003cResourceInformation\u003e getRequestedResourcesFromConfig(\n       Configuration configuration, String prefix) {\n     List\u003cResourceInformation\u003e result \u003d new ArrayList\u003c\u003e();\n     Map\u003cString, String\u003e customResourcesMap \u003d configuration\n-        .getValByRegex(\"^\" + Pattern.quote(prefix) + \"[^.]+$\");\n+        .getValByRegex(\"^\" + Pattern.quote(prefix) + YARN_IO_OPTIONAL + \"[^.]+$\");\n     for (Entry\u003cString, String\u003e resource : customResourcesMap.entrySet()) {\n       String resourceName \u003d resource.getKey().substring(prefix.length());\n       Matcher matcher \u003d\n           RESOURCE_REQUEST_VALUE_PATTERN.matcher(resource.getValue());\n       if (!matcher.matches()) {\n         String errorMsg \u003d \"Invalid resource request specified for property \"\n             + resource.getKey() + \": \\\"\" + resource.getValue()\n             + \"\\\", expected format is: value[ ][units]\";\n         LOG.error(errorMsg);\n         throw new IllegalArgumentException(errorMsg);\n       }\n       long value \u003d Long.parseLong(matcher.group(1));\n       String unit \u003d matcher.group(2);\n       if (unit.isEmpty()) {\n         unit \u003d ResourceUtils.getDefaultUnit(resourceName);\n       }\n       ResourceInformation resourceInformation \u003d new ResourceInformation();\n       resourceInformation.setName(resourceName);\n       resourceInformation.setValue(value);\n       resourceInformation.setUnits(unit);\n       result.add(resourceInformation);\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cResourceInformation\u003e getRequestedResourcesFromConfig(\n      Configuration configuration, String prefix) {\n    List\u003cResourceInformation\u003e result \u003d new ArrayList\u003c\u003e();\n    Map\u003cString, String\u003e customResourcesMap \u003d configuration\n        .getValByRegex(\"^\" + Pattern.quote(prefix) + YARN_IO_OPTIONAL + \"[^.]+$\");\n    for (Entry\u003cString, String\u003e resource : customResourcesMap.entrySet()) {\n      String resourceName \u003d resource.getKey().substring(prefix.length());\n      Matcher matcher \u003d\n          RESOURCE_REQUEST_VALUE_PATTERN.matcher(resource.getValue());\n      if (!matcher.matches()) {\n        String errorMsg \u003d \"Invalid resource request specified for property \"\n            + resource.getKey() + \": \\\"\" + resource.getValue()\n            + \"\\\", expected format is: value[ ][units]\";\n        LOG.error(errorMsg);\n        throw new IllegalArgumentException(errorMsg);\n      }\n      long value \u003d Long.parseLong(matcher.group(1));\n      String unit \u003d matcher.group(2);\n      if (unit.isEmpty()) {\n        unit \u003d ResourceUtils.getDefaultUnit(resourceName);\n      }\n      ResourceInformation resourceInformation \u003d new ResourceInformation();\n      resourceInformation.setName(resourceName);\n      resourceInformation.setValue(value);\n      resourceInformation.setUnits(unit);\n      result.add(resourceInformation);\n    }\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "9a7e81083801a57d6bb96584988415cbef67460d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6927. Add support for individual resource types requests in MapReduce\n(Contributed by Gergo Repas via Daniel Templeton)\n",
      "commitDate": "30/10/17 11:04 AM",
      "commitName": "9a7e81083801a57d6bb96584988415cbef67460d",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,29 @@\n+  public static List\u003cResourceInformation\u003e getRequestedResourcesFromConfig(\n+      Configuration configuration, String prefix) {\n+    List\u003cResourceInformation\u003e result \u003d new ArrayList\u003c\u003e();\n+    Map\u003cString, String\u003e customResourcesMap \u003d configuration\n+        .getValByRegex(\"^\" + Pattern.quote(prefix) + \"[^.]+$\");\n+    for (Entry\u003cString, String\u003e resource : customResourcesMap.entrySet()) {\n+      String resourceName \u003d resource.getKey().substring(prefix.length());\n+      Matcher matcher \u003d\n+          RESOURCE_REQUEST_VALUE_PATTERN.matcher(resource.getValue());\n+      if (!matcher.matches()) {\n+        String errorMsg \u003d \"Invalid resource request specified for property \"\n+            + resource.getKey() + \": \\\"\" + resource.getValue()\n+            + \"\\\", expected format is: value[ ][units]\";\n+        LOG.error(errorMsg);\n+        throw new IllegalArgumentException(errorMsg);\n+      }\n+      long value \u003d Long.parseLong(matcher.group(1));\n+      String unit \u003d matcher.group(2);\n+      if (unit.isEmpty()) {\n+        unit \u003d ResourceUtils.getDefaultUnit(resourceName);\n+      }\n+      ResourceInformation resourceInformation \u003d new ResourceInformation();\n+      resourceInformation.setName(resourceName);\n+      resourceInformation.setValue(value);\n+      resourceInformation.setUnits(unit);\n+      result.add(resourceInformation);\n+    }\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cResourceInformation\u003e getRequestedResourcesFromConfig(\n      Configuration configuration, String prefix) {\n    List\u003cResourceInformation\u003e result \u003d new ArrayList\u003c\u003e();\n    Map\u003cString, String\u003e customResourcesMap \u003d configuration\n        .getValByRegex(\"^\" + Pattern.quote(prefix) + \"[^.]+$\");\n    for (Entry\u003cString, String\u003e resource : customResourcesMap.entrySet()) {\n      String resourceName \u003d resource.getKey().substring(prefix.length());\n      Matcher matcher \u003d\n          RESOURCE_REQUEST_VALUE_PATTERN.matcher(resource.getValue());\n      if (!matcher.matches()) {\n        String errorMsg \u003d \"Invalid resource request specified for property \"\n            + resource.getKey() + \": \\\"\" + resource.getValue()\n            + \"\\\", expected format is: value[ ][units]\";\n        LOG.error(errorMsg);\n        throw new IllegalArgumentException(errorMsg);\n      }\n      long value \u003d Long.parseLong(matcher.group(1));\n      String unit \u003d matcher.group(2);\n      if (unit.isEmpty()) {\n        unit \u003d ResourceUtils.getDefaultUnit(resourceName);\n      }\n      ResourceInformation resourceInformation \u003d new ResourceInformation();\n      resourceInformation.setName(resourceName);\n      resourceInformation.setValue(value);\n      resourceInformation.setUnits(unit);\n      result.add(resourceInformation);\n    }\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}