{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSExceptionsProvider.java",
  "functionName": "toResponse",
  "functionId": "toResponse___exception-Exception",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java",
  "functionStartLine": 69,
  "functionEndLine": 108,
  "numCommitsSeen": 8,
  "timeTaken": 1472,
  "changeHistory": [
    "c4b5c32669423b9a792f33f9f8333d95528f2515",
    "70c756d35e6ed5608ce82d1a6fbfb02e19af5ecf",
    "e4ddb6da15420d5c13ec7ec99fed1e44b32290b0",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
    "bda9c584c828fdd18e9c066747d58dbf751a585d",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "c4b5c32669423b9a792f33f9f8333d95528f2515": "Ybodychange",
    "70c756d35e6ed5608ce82d1a6fbfb02e19af5ecf": "Ybodychange",
    "e4ddb6da15420d5c13ec7ec99fed1e44b32290b0": "Ybodychange",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": "Ybodychange",
    "bda9c584c828fdd18e9c066747d58dbf751a585d": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c4b5c32669423b9a792f33f9f8333d95528f2515": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13854. KMS should log error details in KMSExceptionsProvider.\n",
      "commitDate": "08/06/17 10:35 PM",
      "commitName": "c4b5c32669423b9a792f33f9f8333d95528f2515",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "11/02/16 4:52 PM",
      "commitNameOld": "70c756d35e6ed5608ce82d1a6fbfb02e19af5ecf",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 483.2,
      "commitsBetweenForRepo": 3129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public Response toResponse(Exception exception) {\n     Response.Status status;\n     boolean doAudit \u003d true;\n     Throwable throwable \u003d exception;\n     if (exception instanceof ContainerException) {\n       throwable \u003d exception.getCause();\n     }\n     if (throwable instanceof SecurityException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (throwable instanceof AuthenticationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AuthorizationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AccessControlException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (exception instanceof IOException) {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n       log(status, throwable);\n     } else if (exception instanceof UnsupportedOperationException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else if (exception instanceof IllegalArgumentException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n       log(status, throwable);\n     }\n     if (doAudit) {\n       KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n           KMSMDCFilter.getMethod(),\n           KMSMDCFilter.getURL(), getOneLineMessage(exception));\n     }\n+    EXCEPTION_LOG.warn(\"User {} request {} {} caused exception.\",\n+        KMSMDCFilter.getUgi(), KMSMDCFilter.getMethod(),\n+        KMSMDCFilter.getURL(), exception);\n     return createResponse(status, throwable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception exception) {\n    Response.Status status;\n    boolean doAudit \u003d true;\n    Throwable throwable \u003d exception;\n    if (exception instanceof ContainerException) {\n      throwable \u003d exception.getCause();\n    }\n    if (throwable instanceof SecurityException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (throwable instanceof AuthenticationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AuthorizationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AccessControlException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (exception instanceof IOException) {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n      log(status, throwable);\n    } else if (exception instanceof UnsupportedOperationException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else if (exception instanceof IllegalArgumentException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n      log(status, throwable);\n    }\n    if (doAudit) {\n      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n          KMSMDCFilter.getMethod(),\n          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n    }\n    EXCEPTION_LOG.warn(\"User {} request {} {} caused exception.\",\n        KMSMDCFilter.getUgi(), KMSMDCFilter.getMethod(),\n        KMSMDCFilter.getURL(), exception);\n    return createResponse(status, throwable);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java",
      "extendedDetails": {}
    },
    "70c756d35e6ed5608ce82d1a6fbfb02e19af5ecf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12795. KMS does not log detailed stack trace for unexpected errors. Contributed by Chris Nauroth.\n",
      "commitDate": "11/02/16 4:52 PM",
      "commitName": "70c756d35e6ed5608ce82d1a6fbfb02e19af5ecf",
      "commitAuthor": "cnauroth",
      "commitDateOld": "17/09/14 11:07 AM",
      "commitNameOld": "e4ddb6da15420d5c13ec7ec99fed1e44b32290b0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 512.28,
      "commitsBetweenForRepo": 4130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   public Response toResponse(Exception exception) {\n     Response.Status status;\n     boolean doAudit \u003d true;\n     Throwable throwable \u003d exception;\n     if (exception instanceof ContainerException) {\n       throwable \u003d exception.getCause();\n     }\n     if (throwable instanceof SecurityException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (throwable instanceof AuthenticationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AuthorizationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AccessControlException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (exception instanceof IOException) {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n+      log(status, throwable);\n     } else if (exception instanceof UnsupportedOperationException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else if (exception instanceof IllegalArgumentException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n+      log(status, throwable);\n     }\n     if (doAudit) {\n       KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n           KMSMDCFilter.getMethod(),\n           KMSMDCFilter.getURL(), getOneLineMessage(exception));\n     }\n     return createResponse(status, throwable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception exception) {\n    Response.Status status;\n    boolean doAudit \u003d true;\n    Throwable throwable \u003d exception;\n    if (exception instanceof ContainerException) {\n      throwable \u003d exception.getCause();\n    }\n    if (throwable instanceof SecurityException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (throwable instanceof AuthenticationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AuthorizationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AccessControlException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (exception instanceof IOException) {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n      log(status, throwable);\n    } else if (exception instanceof UnsupportedOperationException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else if (exception instanceof IllegalArgumentException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n      log(status, throwable);\n    }\n    if (doAudit) {\n      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n          KMSMDCFilter.getMethod(),\n          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n    }\n    return createResponse(status, throwable);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java",
      "extendedDetails": {}
    },
    "e4ddb6da15420d5c13ec7ec99fed1e44b32290b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11099. KMS return HTTP UNAUTHORIZED 401 on ACL failure. (tucu)\n",
      "commitDate": "17/09/14 11:07 AM",
      "commitName": "e4ddb6da15420d5c13ec7ec99fed1e44b32290b0",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "04/09/14 9:11 AM",
      "commitNameOld": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.08,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public Response toResponse(Exception exception) {\n     Response.Status status;\n     boolean doAudit \u003d true;\n     Throwable throwable \u003d exception;\n     if (exception instanceof ContainerException) {\n       throwable \u003d exception.getCause();\n     }\n     if (throwable instanceof SecurityException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (throwable instanceof AuthenticationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AuthorizationException) {\n-      status \u003d Response.Status.UNAUTHORIZED;\n+      status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AccessControlException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (exception instanceof IOException) {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     } else if (exception instanceof UnsupportedOperationException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else if (exception instanceof IllegalArgumentException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n     if (doAudit) {\n       KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n           KMSMDCFilter.getMethod(),\n           KMSMDCFilter.getURL(), getOneLineMessage(exception));\n     }\n     return createResponse(status, throwable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception exception) {\n    Response.Status status;\n    boolean doAudit \u003d true;\n    Throwable throwable \u003d exception;\n    if (exception instanceof ContainerException) {\n      throwable \u003d exception.getCause();\n    }\n    if (throwable instanceof SecurityException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (throwable instanceof AuthenticationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AuthorizationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AccessControlException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (exception instanceof IOException) {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    } else if (exception instanceof UnsupportedOperationException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else if (exception instanceof IllegalArgumentException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n    if (doAudit) {\n      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n          KMSMDCFilter.getMethod(),\n          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n    }\n    return createResponse(status, throwable);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java",
      "extendedDetails": {}
    },
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 10:03 PM",
      "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "30/07/14 10:54 AM",
      "commitNameOld": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 15.47,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public Response toResponse(Exception exception) {\n     Response.Status status;\n     boolean doAudit \u003d true;\n     Throwable throwable \u003d exception;\n     if (exception instanceof ContainerException) {\n       throwable \u003d exception.getCause();\n     }\n     if (throwable instanceof SecurityException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (throwable instanceof AuthenticationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AuthorizationException) {\n       status \u003d Response.Status.UNAUTHORIZED;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n     } else if (throwable instanceof AccessControlException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (exception instanceof IOException) {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     } else if (exception instanceof UnsupportedOperationException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else if (exception instanceof IllegalArgumentException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n     if (doAudit) {\n-      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getPrincipal(),\n+      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n           KMSMDCFilter.getMethod(),\n           KMSMDCFilter.getURL(), getOneLineMessage(exception));\n     }\n     return createResponse(status, throwable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception exception) {\n    Response.Status status;\n    boolean doAudit \u003d true;\n    Throwable throwable \u003d exception;\n    if (exception instanceof ContainerException) {\n      throwable \u003d exception.getCause();\n    }\n    if (throwable instanceof SecurityException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (throwable instanceof AuthenticationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AuthorizationException) {\n      status \u003d Response.Status.UNAUTHORIZED;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AccessControlException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (exception instanceof IOException) {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    } else if (exception instanceof UnsupportedOperationException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else if (exception instanceof IllegalArgumentException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n    if (doAudit) {\n      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(),\n          KMSMDCFilter.getMethod(),\n          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n    }\n    return createResponse(status, throwable);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java",
      "extendedDetails": {}
    },
    "bda9c584c828fdd18e9c066747d58dbf751a585d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 10:54 AM",
      "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "05/05/14 2:43 PM",
      "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 85.84,
      "commitsBetweenForRepo": 553,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   public Response toResponse(Exception exception) {\n     Response.Status status;\n     boolean doAudit \u003d true;\n     Throwable throwable \u003d exception;\n     if (exception instanceof ContainerException) {\n       throwable \u003d exception.getCause();\n     }\n     if (throwable instanceof SecurityException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (throwable instanceof AuthenticationException) {\n       status \u003d Response.Status.FORBIDDEN;\n       // we don\u0027t audit here because we did it already when checking access\n       doAudit \u003d false;\n+    } else if (throwable instanceof AuthorizationException) {\n+      status \u003d Response.Status.UNAUTHORIZED;\n+      // we don\u0027t audit here because we did it already when checking access\n+      doAudit \u003d false;\n     } else if (throwable instanceof AccessControlException) {\n       status \u003d Response.Status.FORBIDDEN;\n     } else if (exception instanceof IOException) {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     } else if (exception instanceof UnsupportedOperationException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else if (exception instanceof IllegalArgumentException) {\n       status \u003d Response.Status.BAD_REQUEST;\n     } else {\n       status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n     if (doAudit) {\n-      KMSAudit.error(KMSMDCFilter.getPrincipal(), KMSMDCFilter.getMethod(),\n+      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getPrincipal(),\n+          KMSMDCFilter.getMethod(),\n           KMSMDCFilter.getURL(), getOneLineMessage(exception));\n     }\n     return createResponse(status, throwable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception exception) {\n    Response.Status status;\n    boolean doAudit \u003d true;\n    Throwable throwable \u003d exception;\n    if (exception instanceof ContainerException) {\n      throwable \u003d exception.getCause();\n    }\n    if (throwable instanceof SecurityException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (throwable instanceof AuthenticationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AuthorizationException) {\n      status \u003d Response.Status.UNAUTHORIZED;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AccessControlException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (exception instanceof IOException) {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    } else if (exception instanceof UnsupportedOperationException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else if (exception instanceof IllegalArgumentException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n    if (doAudit) {\n      KMSWebApp.getKMSAudit().error(KMSMDCFilter.getPrincipal(),\n          KMSMDCFilter.getMethod(),\n          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n    }\n    return createResponse(status, throwable);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,30 @@\n+  public Response toResponse(Exception exception) {\n+    Response.Status status;\n+    boolean doAudit \u003d true;\n+    Throwable throwable \u003d exception;\n+    if (exception instanceof ContainerException) {\n+      throwable \u003d exception.getCause();\n+    }\n+    if (throwable instanceof SecurityException) {\n+      status \u003d Response.Status.FORBIDDEN;\n+    } else if (throwable instanceof AuthenticationException) {\n+      status \u003d Response.Status.FORBIDDEN;\n+      // we don\u0027t audit here because we did it already when checking access\n+      doAudit \u003d false;\n+    } else if (throwable instanceof AccessControlException) {\n+      status \u003d Response.Status.FORBIDDEN;\n+    } else if (exception instanceof IOException) {\n+      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n+    } else if (exception instanceof UnsupportedOperationException) {\n+      status \u003d Response.Status.BAD_REQUEST;\n+    } else if (exception instanceof IllegalArgumentException) {\n+      status \u003d Response.Status.BAD_REQUEST;\n+    } else {\n+      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n+    }\n+    if (doAudit) {\n+      KMSAudit.error(KMSMDCFilter.getPrincipal(), KMSMDCFilter.getMethod(),\n+          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n+    }\n+    return createResponse(status, throwable);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception exception) {\n    Response.Status status;\n    boolean doAudit \u003d true;\n    Throwable throwable \u003d exception;\n    if (exception instanceof ContainerException) {\n      throwable \u003d exception.getCause();\n    }\n    if (throwable instanceof SecurityException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (throwable instanceof AuthenticationException) {\n      status \u003d Response.Status.FORBIDDEN;\n      // we don\u0027t audit here because we did it already when checking access\n      doAudit \u003d false;\n    } else if (throwable instanceof AccessControlException) {\n      status \u003d Response.Status.FORBIDDEN;\n    } else if (exception instanceof IOException) {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    } else if (exception instanceof UnsupportedOperationException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else if (exception instanceof IllegalArgumentException) {\n      status \u003d Response.Status.BAD_REQUEST;\n    } else {\n      status \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n    if (doAudit) {\n      KMSAudit.error(KMSMDCFilter.getPrincipal(), KMSMDCFilter.getMethod(),\n          KMSMDCFilter.getURL(), getOneLineMessage(exception));\n    }\n    return createResponse(status, throwable);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSExceptionsProvider.java"
    }
  }
}