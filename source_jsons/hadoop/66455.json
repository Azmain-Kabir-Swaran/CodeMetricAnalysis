{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StreamAMSimulator.java",
  "functionName": "processResponseQueue",
  "functionId": "processResponseQueue",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/StreamAMSimulator.java",
  "functionStartLine": 126,
  "functionEndLine": 179,
  "numCommitsSeen": 3,
  "timeTaken": 768,
  "changeHistory": [
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf"
  ],
  "changeHistoryShort": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
      "commitDate": "20/02/18 5:00 PM",
      "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,54 @@\n+  protected void processResponseQueue() throws Exception {\n+    while (!responseQueue.isEmpty()) {\n+      AllocateResponse response \u003d responseQueue.take();\n+\n+      // check completed containers\n+      if (!response.getCompletedContainersStatuses().isEmpty()) {\n+        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n+          ContainerId containerId \u003d cs.getContainerId();\n+          if(assignedStreams.containsKey(containerId)){\n+            // One of our containers completed. Regardless of reason,\n+            // we want to maintain our streaming process\n+            LOG.debug(\"Application {} has one streamer finished ({}).\", appId,\n+                containerId);\n+            pendingStreams.add(assignedStreams.remove(containerId));\n+          } else if (amContainer.getId().equals(containerId)){\n+            // Our am container completed\n+            if(cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS){\n+              // am container released event (am container completed on success)\n+              isAMContainerRunning \u003d false;\n+              isFinished \u003d true;\n+              LOG.info(\"Application {} goes to finish.\", appId);\n+            } else {\n+              // am container killed - wait for re allocation\n+              LOG.info(\"Application {}\u0027s AM is \"\n+                  + \"going to be killed. Waiting for rescheduling...\", appId);\n+              isAMContainerRunning \u003d false;\n+            }\n+          }\n+        }\n+      }\n+\n+      // check finished\n+      if (isAMContainerRunning \u0026\u0026\n+          (System.currentTimeMillis() - simulateStartTimeMS \u003e\u003d duration)) {\n+        LOG.debug(\"Application {} sends out event to clean up\"\n+                + \" its AM container.\", appId);\n+        isAMContainerRunning \u003d false;\n+        isFinished \u003d true;\n+        break;\n+      }\n+\n+      // check allocated containers\n+      for (Container container : response.getAllocatedContainers()) {\n+        if (!scheduledStreams.isEmpty()) {\n+          ContainerSimulator cs \u003d scheduledStreams.remove();\n+          LOG.debug(\"Application {} starts to launch a stream ({}).\", appId,\n+              container.getId());\n+          assignedStreams.put(container.getId(), cs);\n+          se.getNmMap().get(container.getNodeId()).addNewContainer(container,\n+              cs.getLifeTime());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processResponseQueue() throws Exception {\n    while (!responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (!response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if(assignedStreams.containsKey(containerId)){\n            // One of our containers completed. Regardless of reason,\n            // we want to maintain our streaming process\n            LOG.debug(\"Application {} has one streamer finished ({}).\", appId,\n                containerId);\n            pendingStreams.add(assignedStreams.remove(containerId));\n          } else if (amContainer.getId().equals(containerId)){\n            // Our am container completed\n            if(cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS){\n              // am container released event (am container completed on success)\n              isAMContainerRunning \u003d false;\n              isFinished \u003d true;\n              LOG.info(\"Application {} goes to finish.\", appId);\n            } else {\n              // am container killed - wait for re allocation\n              LOG.info(\"Application {}\u0027s AM is \"\n                  + \"going to be killed. Waiting for rescheduling...\", appId);\n              isAMContainerRunning \u003d false;\n            }\n          }\n        }\n      }\n\n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n          (System.currentTimeMillis() - simulateStartTimeMS \u003e\u003d duration)) {\n        LOG.debug(\"Application {} sends out event to clean up\"\n                + \" its AM container.\", appId);\n        isAMContainerRunning \u003d false;\n        isFinished \u003d true;\n        break;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (!scheduledStreams.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledStreams.remove();\n          LOG.debug(\"Application {} starts to launch a stream ({}).\", appId,\n              container.getId());\n          assignedStreams.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId()).addNewContainer(container,\n              cs.getLifeTime());\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/StreamAMSimulator.java"
    }
  }
}