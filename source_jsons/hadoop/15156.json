{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageLoader.java",
  "functionName": "getXAttrs",
  "functionId": "getXAttrs___path-String__names-List__String____encoder-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
  "functionStartLine": 431,
  "functionEndLine": 463,
  "numCommitsSeen": 22,
  "timeTaken": 1125,
  "changeHistory": [
    "bc433908d35758ff0a7225cd6f5662959ef4d294"
  ],
  "changeHistoryShort": {
    "bc433908d35758ff0a7225cd6f5662959ef4d294": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc433908d35758ff0a7225cd6f5662959ef4d294": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8462. Implement GETXATTRS and LISTXATTRS operations for WebImageViewer. Contributed by Jagadesh Kiran N.\n",
      "commitDate": "25/06/15 8:20 AM",
      "commitName": "bc433908d35758ff0a7225cd6f5662959ef4d294",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,33 @@\n+  String getXAttrs(String path, List\u003cString\u003e names, String encoder)\n+      throws IOException {\n+\n+    List\u003cXAttr\u003e xAttrs \u003d getXAttrList(path);\n+    List\u003cXAttr\u003e filtered;\n+    if (names \u003d\u003d null || names.size() \u003d\u003d 0) {\n+      filtered \u003d xAttrs;\n+    } else {\n+      filtered \u003d Lists.newArrayListWithCapacity(names.size());\n+      for (String name : names) {\n+        XAttr search \u003d XAttrHelper.buildXAttr(name);\n+\n+        boolean found \u003d false;\n+        for (XAttr aXAttr : xAttrs) {\n+          if (aXAttr.getNameSpace() \u003d\u003d search.getNameSpace()\n+              \u0026\u0026 aXAttr.getName().equals(search.getName())) {\n+\n+            filtered.add(aXAttr);\n+            found \u003d true;\n+            break;\n+          }\n+        }\n+\n+        if (!found) {\n+          throw new IOException(\n+              \"At least one of the attributes provided was not found.\");\n+        }\n+      }\n+\n+    }\n+    return JsonUtil.toJsonString(filtered,\n+        new XAttrEncodingParam(encoder).getEncoding());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  String getXAttrs(String path, List\u003cString\u003e names, String encoder)\n      throws IOException {\n\n    List\u003cXAttr\u003e xAttrs \u003d getXAttrList(path);\n    List\u003cXAttr\u003e filtered;\n    if (names \u003d\u003d null || names.size() \u003d\u003d 0) {\n      filtered \u003d xAttrs;\n    } else {\n      filtered \u003d Lists.newArrayListWithCapacity(names.size());\n      for (String name : names) {\n        XAttr search \u003d XAttrHelper.buildXAttr(name);\n\n        boolean found \u003d false;\n        for (XAttr aXAttr : xAttrs) {\n          if (aXAttr.getNameSpace() \u003d\u003d search.getNameSpace()\n              \u0026\u0026 aXAttr.getName().equals(search.getName())) {\n\n            filtered.add(aXAttr);\n            found \u003d true;\n            break;\n          }\n        }\n\n        if (!found) {\n          throw new IOException(\n              \"At least one of the attributes provided was not found.\");\n        }\n      }\n\n    }\n    return JsonUtil.toJsonString(filtered,\n        new XAttrEncodingParam(encoder).getEncoding());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java"
    }
  }
}