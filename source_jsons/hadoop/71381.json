{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CuratorService.java",
  "functionName": "operationFailure",
  "functionId": "operationFailure___path-String__operation-String__exception-Exception__acls-List__ACL__",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
  "functionStartLine": 404,
  "functionEndLine": 447,
  "numCommitsSeen": 10,
  "timeTaken": 1491,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "6f43491c0343cfef36e9be5dfd06447cf2fee377",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "6f43491c0343cfef36e9be5dfd06447cf2fee377": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected IOException operationFailure(String path,\n      String operation,\n      Exception exception,\n      List\u003cACL\u003e acls) {\n    IOException ioe;\n    String aclList \u003d \"[\" + RegistrySecurity.aclsToString(acls) + \"]\";\n    if (exception instanceof KeeperException.NoNodeException) {\n      ioe \u003d new PathNotFoundException(path);\n    } else if (exception instanceof KeeperException.NodeExistsException) {\n      ioe \u003d new FileAlreadyExistsException(path);\n    } else if (exception instanceof KeeperException.NoAuthException) {\n      ioe \u003d new NoPathPermissionsException(path,\n          \"Not authorized to access path; ACLs: \" + aclList);\n    } else if (exception instanceof KeeperException.NotEmptyException) {\n      ioe \u003d new PathIsNotEmptyDirectoryException(path);\n    } else if (exception instanceof KeeperException.AuthFailedException) {\n      ioe \u003d new AuthenticationFailedException(path,\n          \"Authentication Failed: \" + exception\n              + \"; \" + securityConnectionDiagnostics,\n          exception);\n    } else if (exception instanceof\n        KeeperException.NoChildrenForEphemeralsException) {\n      ioe \u003d new NoChildrenForEphemeralsException(path,\n          \"Cannot create a path under an ephemeral node: \" + exception,\n          exception);\n    } else if (exception instanceof KeeperException.InvalidACLException) {\n      // this is a security exception of a kind\n      // include the ACLs to help the diagnostics\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Path access failure \").append(aclList);\n      builder.append(\" \");\n      builder.append(securityConnectionDiagnostics);\n      ioe \u003d new NoPathPermissionsException(path, builder.toString());\n    } else {\n      ioe \u003d new RegistryIOException(path,\n          \"Failure of \" + operation + \" on \" + path + \": \" +\n              exception.toString(),\n          exception);\n    }\n    if (ioe.getCause() \u003d\u003d null) {\n      ioe.initCause(exception);\n    }\n    return ioe;\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java"
      }
    },
    "6f43491c0343cfef36e9be5dfd06447cf2fee377": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2689 TestSecureRMRegistryOperations failing on windows: secure ZK won\u0027t start\n",
      "commitDate": "16/10/14 2:22 PM",
      "commitName": "6f43491c0343cfef36e9be5dfd06447cf2fee377",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/10/14 1:02 PM",
      "commitNameOld": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   protected IOException operationFailure(String path,\n       String operation,\n       Exception exception,\n       List\u003cACL\u003e acls) {\n     IOException ioe;\n     String aclList \u003d \"[\" + RegistrySecurity.aclsToString(acls) + \"]\";\n     if (exception instanceof KeeperException.NoNodeException) {\n       ioe \u003d new PathNotFoundException(path);\n     } else if (exception instanceof KeeperException.NodeExistsException) {\n       ioe \u003d new FileAlreadyExistsException(path);\n     } else if (exception instanceof KeeperException.NoAuthException) {\n       ioe \u003d new NoPathPermissionsException(path,\n           \"Not authorized to access path; ACLs: \" + aclList);\n     } else if (exception instanceof KeeperException.NotEmptyException) {\n       ioe \u003d new PathIsNotEmptyDirectoryException(path);\n     } else if (exception instanceof KeeperException.AuthFailedException) {\n       ioe \u003d new AuthenticationFailedException(path,\n-          \"Authentication Failed: \" + exception, exception);\n+          \"Authentication Failed: \" + exception\n+          + \"; \" + securityConnectionDiagnostics,\n+          exception);\n     } else if (exception instanceof KeeperException.NoChildrenForEphemeralsException) {\n       ioe \u003d new NoChildrenForEphemeralsException(path,\n           \"Cannot create a path under an ephemeral node: \" + exception,\n           exception);\n     } else if (exception instanceof KeeperException.InvalidACLException) {\n       // this is a security exception of a kind\n       // include the ACLs to help the diagnostics\n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(\"Path access failure \").append(aclList);\n       builder.append(\" \");\n       builder.append(securityConnectionDiagnostics);\n       ioe \u003d new NoPathPermissionsException(path, builder.toString());\n     } else {\n       ioe \u003d new RegistryIOException(path,\n           \"Failure of \" + operation + \" on \" + path + \": \" +\n           exception.toString(),\n           exception);\n     }\n     if (ioe.getCause() \u003d\u003d null) {\n       ioe.initCause(exception);\n     }\n     return ioe;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected IOException operationFailure(String path,\n      String operation,\n      Exception exception,\n      List\u003cACL\u003e acls) {\n    IOException ioe;\n    String aclList \u003d \"[\" + RegistrySecurity.aclsToString(acls) + \"]\";\n    if (exception instanceof KeeperException.NoNodeException) {\n      ioe \u003d new PathNotFoundException(path);\n    } else if (exception instanceof KeeperException.NodeExistsException) {\n      ioe \u003d new FileAlreadyExistsException(path);\n    } else if (exception instanceof KeeperException.NoAuthException) {\n      ioe \u003d new NoPathPermissionsException(path,\n          \"Not authorized to access path; ACLs: \" + aclList);\n    } else if (exception instanceof KeeperException.NotEmptyException) {\n      ioe \u003d new PathIsNotEmptyDirectoryException(path);\n    } else if (exception instanceof KeeperException.AuthFailedException) {\n      ioe \u003d new AuthenticationFailedException(path,\n          \"Authentication Failed: \" + exception\n          + \"; \" + securityConnectionDiagnostics,\n          exception);\n    } else if (exception instanceof KeeperException.NoChildrenForEphemeralsException) {\n      ioe \u003d new NoChildrenForEphemeralsException(path,\n          \"Cannot create a path under an ephemeral node: \" + exception,\n          exception);\n    } else if (exception instanceof KeeperException.InvalidACLException) {\n      // this is a security exception of a kind\n      // include the ACLs to help the diagnostics\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Path access failure \").append(aclList);\n      builder.append(\" \");\n      builder.append(securityConnectionDiagnostics);\n      ioe \u003d new NoPathPermissionsException(path, builder.toString());\n    } else {\n      ioe \u003d new RegistryIOException(path,\n          \"Failure of \" + operation + \" on \" + path + \": \" +\n          exception.toString(),\n          exception);\n    }\n    if (ioe.getCause() \u003d\u003d null) {\n      ioe.initCause(exception);\n    }\n    return ioe;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,41 @@\n+  protected IOException operationFailure(String path,\n+      String operation,\n+      Exception exception,\n+      List\u003cACL\u003e acls) {\n+    IOException ioe;\n+    String aclList \u003d \"[\" + RegistrySecurity.aclsToString(acls) + \"]\";\n+    if (exception instanceof KeeperException.NoNodeException) {\n+      ioe \u003d new PathNotFoundException(path);\n+    } else if (exception instanceof KeeperException.NodeExistsException) {\n+      ioe \u003d new FileAlreadyExistsException(path);\n+    } else if (exception instanceof KeeperException.NoAuthException) {\n+      ioe \u003d new NoPathPermissionsException(path,\n+          \"Not authorized to access path; ACLs: \" + aclList);\n+    } else if (exception instanceof KeeperException.NotEmptyException) {\n+      ioe \u003d new PathIsNotEmptyDirectoryException(path);\n+    } else if (exception instanceof KeeperException.AuthFailedException) {\n+      ioe \u003d new AuthenticationFailedException(path,\n+          \"Authentication Failed: \" + exception, exception);\n+    } else if (exception instanceof KeeperException.NoChildrenForEphemeralsException) {\n+      ioe \u003d new NoChildrenForEphemeralsException(path,\n+          \"Cannot create a path under an ephemeral node: \" + exception,\n+          exception);\n+    } else if (exception instanceof KeeperException.InvalidACLException) {\n+      // this is a security exception of a kind\n+      // include the ACLs to help the diagnostics\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(\"Path access failure \").append(aclList);\n+      builder.append(\" \");\n+      builder.append(securityConnectionDiagnostics);\n+      ioe \u003d new NoPathPermissionsException(path, builder.toString());\n+    } else {\n+      ioe \u003d new RegistryIOException(path,\n+          \"Failure of \" + operation + \" on \" + path + \": \" +\n+          exception.toString(),\n+          exception);\n+    }\n+    if (ioe.getCause() \u003d\u003d null) {\n+      ioe.initCause(exception);\n+    }\n+    return ioe;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected IOException operationFailure(String path,\n      String operation,\n      Exception exception,\n      List\u003cACL\u003e acls) {\n    IOException ioe;\n    String aclList \u003d \"[\" + RegistrySecurity.aclsToString(acls) + \"]\";\n    if (exception instanceof KeeperException.NoNodeException) {\n      ioe \u003d new PathNotFoundException(path);\n    } else if (exception instanceof KeeperException.NodeExistsException) {\n      ioe \u003d new FileAlreadyExistsException(path);\n    } else if (exception instanceof KeeperException.NoAuthException) {\n      ioe \u003d new NoPathPermissionsException(path,\n          \"Not authorized to access path; ACLs: \" + aclList);\n    } else if (exception instanceof KeeperException.NotEmptyException) {\n      ioe \u003d new PathIsNotEmptyDirectoryException(path);\n    } else if (exception instanceof KeeperException.AuthFailedException) {\n      ioe \u003d new AuthenticationFailedException(path,\n          \"Authentication Failed: \" + exception, exception);\n    } else if (exception instanceof KeeperException.NoChildrenForEphemeralsException) {\n      ioe \u003d new NoChildrenForEphemeralsException(path,\n          \"Cannot create a path under an ephemeral node: \" + exception,\n          exception);\n    } else if (exception instanceof KeeperException.InvalidACLException) {\n      // this is a security exception of a kind\n      // include the ACLs to help the diagnostics\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Path access failure \").append(aclList);\n      builder.append(\" \");\n      builder.append(securityConnectionDiagnostics);\n      ioe \u003d new NoPathPermissionsException(path, builder.toString());\n    } else {\n      ioe \u003d new RegistryIOException(path,\n          \"Failure of \" + operation + \" on \" + path + \": \" +\n          exception.toString(),\n          exception);\n    }\n    if (ioe.getCause() \u003d\u003d null) {\n      ioe.initCause(exception);\n    }\n    return ioe;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java"
    }
  }
}