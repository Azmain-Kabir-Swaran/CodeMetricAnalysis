{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocatorAMService.java",
  "functionName": "allocateForDistributedScheduling",
  "functionId": "allocateForDistributedScheduling___request-DistributedSchedulingAllocateRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
  "functionStartLine": 346,
  "functionEndLine": 357,
  "numCommitsSeen": 35,
  "timeTaken": 5457,
  "changeHistory": [
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "99e5dd68d0f44109c169d74824fa45a7396a5990",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830",
    "341888a0aa23f24458b4e6e34868794b9735c06a",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Yfilerename",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
    "99e5dd68d0f44109c169d74824fa45a7396a5990": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Ybodychange",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.6,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,12 @@\n   public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n       DistributedSchedulingAllocateRequest request)\n       throws YarnException, IOException {\n     List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n-    for (Container container : distAllocContainers) {\n-      // Create RMContainer\n-      SchedulerApplicationAttempt appAttempt \u003d\n-          ((AbstractYarnScheduler) rmContext.getScheduler())\n-              .getCurrentAttemptForContainer(container.getId());\n-      RMContainer rmContainer \u003d new RMContainerImpl(container,\n-          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n-          appAttempt.getUser(), rmContext, true);\n-      appAttempt.addRMContainer(container.getId(), rmContainer);\n-      rmContainer.handle(\n-          new RMContainerEvent(container.getId(),\n-              RMContainerEventType.LAUNCHED));\n-    }\n+    handleNewContainers(distAllocContainers, true);\n     AllocateResponse response \u003d allocate(request.getAllocateRequest());\n     DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n         .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n-    dsResp.setNodesForScheduling(\n-        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n+    dsResp.setNodesForScheduling(getLeastLoadedNodes());\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n      DistributedSchedulingAllocateRequest request)\n      throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    handleNewContainers(distAllocContainers, true);\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(getLeastLoadedNodes());\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "08/08/16 5:54 PM",
      "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n      DistributedSchedulingAllocateRequest request)\n      throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java"
      }
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public DistSchedAllocateResponse allocateForDistributedScheduling(\n-      DistSchedAllocateRequest request) throws YarnException, IOException {\n+  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n+      DistributedSchedulingAllocateRequest request)\n+      throws YarnException, IOException {\n     List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n     for (Container container : distAllocContainers) {\n       // Create RMContainer\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler) rmContext.getScheduler())\n               .getCurrentAttemptForContainer(container.getId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, true);\n       appAttempt.addRMContainer(container.getId(), rmContainer);\n       rmContainer.handle(\n           new RMContainerEvent(container.getId(),\n               RMContainerEventType.LAUNCHED));\n     }\n     AllocateResponse response \u003d allocate(request.getAllocateRequest());\n-    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n-        (DistSchedAllocateResponse.class);\n+    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n+        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n      DistributedSchedulingAllocateRequest request)\n      throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public DistSchedAllocateResponse allocateForDistributedScheduling(\n-      DistSchedAllocateRequest request) throws YarnException, IOException {\n+  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n+      DistributedSchedulingAllocateRequest request)\n+      throws YarnException, IOException {\n     List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n     for (Container container : distAllocContainers) {\n       // Create RMContainer\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler) rmContext.getScheduler())\n               .getCurrentAttemptForContainer(container.getId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, true);\n       appAttempt.addRMContainer(container.getId(), rmContainer);\n       rmContainer.handle(\n           new RMContainerEvent(container.getId(),\n               RMContainerEventType.LAUNCHED));\n     }\n     AllocateResponse response \u003d allocate(request.getAllocateRequest());\n-    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n-        (DistSchedAllocateResponse.class);\n+    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n+        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n      DistributedSchedulingAllocateRequest request)\n      throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {
            "oldValue": "DistSchedAllocateResponse",
            "newValue": "DistributedSchedulingAllocateResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public DistSchedAllocateResponse allocateForDistributedScheduling(\n-      DistSchedAllocateRequest request) throws YarnException, IOException {\n+  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n+      DistributedSchedulingAllocateRequest request)\n+      throws YarnException, IOException {\n     List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n     for (Container container : distAllocContainers) {\n       // Create RMContainer\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler) rmContext.getScheduler())\n               .getCurrentAttemptForContainer(container.getId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, true);\n       appAttempt.addRMContainer(container.getId(), rmContainer);\n       rmContainer.handle(\n           new RMContainerEvent(container.getId(),\n               RMContainerEventType.LAUNCHED));\n     }\n     AllocateResponse response \u003d allocate(request.getAllocateRequest());\n-    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n-        (DistSchedAllocateResponse.class);\n+    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n+        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n      DistributedSchedulingAllocateRequest request)\n      throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public DistSchedAllocateResponse allocateForDistributedScheduling(\n-      DistSchedAllocateRequest request) throws YarnException, IOException {\n+  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n+      DistributedSchedulingAllocateRequest request)\n+      throws YarnException, IOException {\n     List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n     for (Container container : distAllocContainers) {\n       // Create RMContainer\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler) rmContext.getScheduler())\n               .getCurrentAttemptForContainer(container.getId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, true);\n       appAttempt.addRMContainer(container.getId(), rmContainer);\n       rmContainer.handle(\n           new RMContainerEvent(container.getId(),\n               RMContainerEventType.LAUNCHED));\n     }\n     AllocateResponse response \u003d allocate(request.getAllocateRequest());\n-    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n-        (DistSchedAllocateResponse.class);\n+    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n+        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(\n      DistributedSchedulingAllocateRequest request)\n      throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistributedSchedulingAllocateResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistributedSchedulingAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {
            "oldValue": "[request-DistSchedAllocateRequest]",
            "newValue": "[request-DistributedSchedulingAllocateRequest]"
          }
        }
      ]
    },
    "99e5dd68d0f44109c169d74824fa45a7396a5990": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5171. Extend DistributedSchedulerProtocol to notify RM of containers allocated by the Node. (Inigo Goiri via asuresh)\n",
      "commitDate": "22/06/16 7:04 PM",
      "commitName": "99e5dd68d0f44109c169d74824fa45a7396a5990",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5171. Extend DistributedSchedulerProtocol to notify RM of containers allocated by the Node. (Inigo Goiri via asuresh)\n",
          "commitDate": "22/06/16 7:04 PM",
          "commitName": "99e5dd68d0f44109c169d74824fa45a7396a5990",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "13/05/16 1:38 PM",
          "commitNameOld": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 40.23,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,24 @@\n-  public DistSchedAllocateResponse allocateForDistributedScheduling\n-      (AllocateRequest request) throws YarnException, IOException {\n-    AllocateResponse response \u003d allocate(request);\n+  public DistSchedAllocateResponse allocateForDistributedScheduling(\n+      DistSchedAllocateRequest request) throws YarnException, IOException {\n+    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n+    for (Container container : distAllocContainers) {\n+      // Create RMContainer\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler) rmContext.getScheduler())\n+              .getCurrentAttemptForContainer(container.getId());\n+      RMContainer rmContainer \u003d new RMContainerImpl(container,\n+          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n+          appAttempt.getUser(), rmContext, true);\n+      appAttempt.addRMContainer(container.getId(), rmContainer);\n+      rmContainer.handle(\n+          new RMContainerEvent(container.getId(),\n+              RMContainerEventType.LAUNCHED));\n+    }\n+    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n     DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n         (DistSchedAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DistSchedAllocateResponse allocateForDistributedScheduling(\n      DistSchedAllocateRequest request) throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n        (DistSchedAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
          "extendedDetails": {
            "oldValue": "[request-AllocateRequest]",
            "newValue": "[request-DistSchedAllocateRequest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5171. Extend DistributedSchedulerProtocol to notify RM of containers allocated by the Node. (Inigo Goiri via asuresh)\n",
          "commitDate": "22/06/16 7:04 PM",
          "commitName": "99e5dd68d0f44109c169d74824fa45a7396a5990",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "13/05/16 1:38 PM",
          "commitNameOld": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 40.23,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,24 @@\n-  public DistSchedAllocateResponse allocateForDistributedScheduling\n-      (AllocateRequest request) throws YarnException, IOException {\n-    AllocateResponse response \u003d allocate(request);\n+  public DistSchedAllocateResponse allocateForDistributedScheduling(\n+      DistSchedAllocateRequest request) throws YarnException, IOException {\n+    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n+    for (Container container : distAllocContainers) {\n+      // Create RMContainer\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler) rmContext.getScheduler())\n+              .getCurrentAttemptForContainer(container.getId());\n+      RMContainer rmContainer \u003d new RMContainerImpl(container,\n+          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n+          appAttempt.getUser(), rmContext, true);\n+      appAttempt.addRMContainer(container.getId(), rmContainer);\n+      rmContainer.handle(\n+          new RMContainerEvent(container.getId(),\n+              RMContainerEventType.LAUNCHED));\n+    }\n+    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n     DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n         (DistSchedAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DistSchedAllocateResponse allocateForDistributedScheduling(\n      DistSchedAllocateRequest request) throws YarnException, IOException {\n    List\u003cContainer\u003e distAllocContainers \u003d request.getAllocatedContainers();\n    for (Container container : distAllocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, true);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n    AllocateResponse response \u003d allocate(request.getAllocateRequest());\n    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n        (DistSchedAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/04/16 8:12 PM",
      "commitNameOld": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 16.73,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public DistSchedAllocateResponse allocateForDistributedScheduling\n       (AllocateRequest request) throws YarnException, IOException {\n     AllocateResponse response \u003d allocate(request);\n     DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n         (DistSchedAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n-        new ArrayList\u003c\u003e(this.clusterMonitor.selectNodes()));\n+        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DistSchedAllocateResponse allocateForDistributedScheduling\n      (AllocateRequest request) throws YarnException, IOException {\n    AllocateResponse response \u003d allocate(request);\n    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n        (DistSchedAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
      "extendedDetails": {}
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public DistSchedAllocateResponse allocateForDistributedScheduling\n       (AllocateRequest request) throws YarnException, IOException {\n     AllocateResponse response \u003d allocate(request);\n     DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n         (DistSchedAllocateResponse.class);\n     dsResp.setAllocateResponse(response);\n     dsResp.setNodesForScheduling(\n-        new ArrayList\u003c\u003e(this.rmContext.getRMNodes().keySet()));\n+        new ArrayList\u003c\u003e(this.clusterMonitor.selectNodes()));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DistSchedAllocateResponse allocateForDistributedScheduling\n      (AllocateRequest request) throws YarnException, IOException {\n    AllocateResponse response \u003d allocate(request);\n    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n        (DistSchedAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        new ArrayList\u003c\u003e(this.clusterMonitor.selectNodes()));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,10 @@\n+  public DistSchedAllocateResponse allocateForDistributedScheduling\n+      (AllocateRequest request) throws YarnException, IOException {\n+    AllocateResponse response \u003d allocate(request);\n+    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n+        (DistSchedAllocateResponse.class);\n+    dsResp.setAllocateResponse(response);\n+    dsResp.setNodesForScheduling(\n+        new ArrayList\u003c\u003e(this.rmContext.getRMNodes().keySet()));\n+    return dsResp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DistSchedAllocateResponse allocateForDistributedScheduling\n      (AllocateRequest request) throws YarnException, IOException {\n    AllocateResponse response \u003d allocate(request);\n    DistSchedAllocateResponse dsResp \u003d recordFactory.newRecordInstance\n        (DistSchedAllocateResponse.class);\n    dsResp.setAllocateResponse(response);\n    dsResp.setNodesForScheduling(\n        new ArrayList\u003c\u003e(this.rmContext.getRMNodes().keySet()));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java"
    }
  }
}