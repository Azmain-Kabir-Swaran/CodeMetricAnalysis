{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SampleQuantiles.java",
  "functionName": "insertBatch",
  "functionId": "insertBatch",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java",
  "functionStartLine": 129,
  "functionEndLine": 169,
  "numCommitsSeen": 4,
  "timeTaken": 556,
  "changeHistory": [
    "b5b0ac64a18ccefe1626ce985adf576549172911"
  ],
  "changeHistoryShort": {
    "b5b0ac64a18ccefe1626ce985adf576549172911": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b5b0ac64a18ccefe1626ce985adf576549172911": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8541. Better high-percentile latency metrics. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 6:31 PM",
      "commitName": "b5b0ac64a18ccefe1626ce985adf576549172911",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,41 @@\n+  private void insertBatch() {\n+    if (bufferCount \u003d\u003d 0) {\n+      return;\n+    }\n+\n+    Arrays.sort(buffer, 0, bufferCount);\n+\n+    // Base case: no samples\n+    int start \u003d 0;\n+    if (samples.size() \u003d\u003d 0) {\n+      SampleItem newItem \u003d new SampleItem(buffer[0], 1, 0);\n+      samples.add(newItem);\n+      start++;\n+    }\n+\n+    ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n+    SampleItem item \u003d it.next();\n+    for (int i \u003d start; i \u003c bufferCount; i++) {\n+      long v \u003d buffer[i];\n+      while (it.nextIndex() \u003c samples.size() \u0026\u0026 item.value \u003c v) {\n+        item \u003d it.next();\n+      }\n+      // If we found that bigger item, back up so we insert ourselves before it\n+      if (item.value \u003e v) {\n+        it.previous();\n+      }\n+      // We use different indexes for the edge comparisons, because of the above\n+      // if statement that adjusts the iterator\n+      int delta;\n+      if (it.previousIndex() \u003d\u003d 0 || it.nextIndex() \u003d\u003d samples.size()) {\n+        delta \u003d 0;\n+      } else {\n+        delta \u003d ((int) Math.floor(allowableError(it.nextIndex()))) - 1;\n+      }\n+      SampleItem newItem \u003d new SampleItem(v, 1, delta);\n+      it.add(newItem);\n+      item \u003d newItem;\n+    }\n+\n+    bufferCount \u003d 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void insertBatch() {\n    if (bufferCount \u003d\u003d 0) {\n      return;\n    }\n\n    Arrays.sort(buffer, 0, bufferCount);\n\n    // Base case: no samples\n    int start \u003d 0;\n    if (samples.size() \u003d\u003d 0) {\n      SampleItem newItem \u003d new SampleItem(buffer[0], 1, 0);\n      samples.add(newItem);\n      start++;\n    }\n\n    ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n    SampleItem item \u003d it.next();\n    for (int i \u003d start; i \u003c bufferCount; i++) {\n      long v \u003d buffer[i];\n      while (it.nextIndex() \u003c samples.size() \u0026\u0026 item.value \u003c v) {\n        item \u003d it.next();\n      }\n      // If we found that bigger item, back up so we insert ourselves before it\n      if (item.value \u003e v) {\n        it.previous();\n      }\n      // We use different indexes for the edge comparisons, because of the above\n      // if statement that adjusts the iterator\n      int delta;\n      if (it.previousIndex() \u003d\u003d 0 || it.nextIndex() \u003d\u003d samples.size()) {\n        delta \u003d 0;\n      } else {\n        delta \u003d ((int) Math.floor(allowableError(it.nextIndex()))) - 1;\n      }\n      SampleItem newItem \u003d new SampleItem(v, 1, delta);\n      it.add(newItem);\n      item \u003d newItem;\n    }\n\n    bufferCount \u003d 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java"
    }
  }
}