{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnClientImpl.java",
  "functionName": "submitApplication",
  "functionId": "submitApplication___appContext-ApplicationSubmissionContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
  "functionStartLine": 300,
  "functionEndLine": 374,
  "numCommitsSeen": 81,
  "timeTaken": 3603,
  "changeHistory": [
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "e4e72db5f9f305b493138ab36f073fe5d1750ad8",
    "03cc22945e5d4e953c06a313b8158389554a6aa7",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
    "0edda2537346207e522120adeb8db1e9d058c884",
    "8497b870af52dce6af3b716707fc6de7973ce955",
    "3f79e4962483b371a139607aee7525c64a14876e",
    "ca125153b319a8f5d75585d25cb0f37ae717be01",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
    "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f",
    "87c5d243db050ac9ce0c53e0905930573132221e",
    "10e704c50ba1fa601329d0fee099993e8c3725a6"
  ],
  "changeHistoryShort": {
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "e4e72db5f9f305b493138ab36f073fe5d1750ad8": "Ybodychange",
    "03cc22945e5d4e953c06a313b8158389554a6aa7": "Ybodychange",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": "Ybodychange",
    "0edda2537346207e522120adeb8db1e9d058c884": "Ybodychange",
    "8497b870af52dce6af3b716707fc6de7973ce955": "Ybodychange",
    "3f79e4962483b371a139607aee7525c64a14876e": "Ybodychange",
    "ca125153b319a8f5d75585d25cb0f37ae717be01": "Ybodychange",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": "Ybodychange",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": "Yfilerename",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43": "Yexceptionschange",
    "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f": "Ybodychange",
    "87c5d243db050ac9ce0c53e0905930573132221e": "Yfilerename",
    "10e704c50ba1fa601329d0fee099993e8c3725a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "08/02/17 12:59 PM",
      "commitNameOld": "37b4acf7cee1f05599a84bbb1ebf07979a71f82f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     if (applicationId \u003d\u003d null) {\n       throw new ApplicationIdNotProvidedException(\n           \"ApplicationId is not provided in ApplicationSubmissionContext\");\n     }\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n \n     // Automatically add the timeline DT into the CLC\n     // Only when the security and the timeline service are both enabled\n-    if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n+    if (isSecurityEnabled() \u0026\u0026 timelineV1ServiceEnabled) {\n       addTimelineDelegationToken(appContext.getAMContainerSpec());\n     }\n \n     //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     long startTime \u003d System.currentTimeMillis();\n     EnumSet\u003cYarnApplicationState\u003e waitingStates \u003d \n                                  EnumSet.of(YarnApplicationState.NEW,\n                                  YarnApplicationState.NEW_SAVING,\n                                  YarnApplicationState.SUBMITTED);\n     EnumSet\u003cYarnApplicationState\u003e failToSubmitStates \u003d \n                                   EnumSet.of(YarnApplicationState.FAILED,\n                                   YarnApplicationState.KILLED);\t\t\n     while (true) {\n       try {\n         ApplicationReport appReport \u003d getApplicationReport(applicationId);\n         YarnApplicationState state \u003d appReport.getYarnApplicationState();\n         if (!waitingStates.contains(state)) {\n           if(failToSubmitStates.contains(state)) {\n             throw new YarnException(\"Failed to submit \" + applicationId + \n                 \" to YARN : \" + appReport.getDiagnostics());\n           }\n           LOG.info(\"Submitted application \" + applicationId);\n           break;\n         }\n \n         long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n         if (enforceAsyncAPITimeout() \u0026\u0026\n             elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n           throw new YarnException(\"Timed out while waiting for application \" +\n               applicationId + \" to be submitted successfully\");\n         }\n \n         // Notify the client through the log every 10 poll, in case the client\n         // is blocked here too long.\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Application submission is not finished, \" +\n               \"submitted application \" + applicationId +\n               \" is still in \" + state);\n         }\n         try {\n           Thread.sleep(submitPollIntervalMillis);\n         } catch (InterruptedException ie) {\n           String msg \u003d \"Interrupted while waiting for application \"\n               + applicationId + \" to be successfully submitted.\";\n           LOG.error(msg);\n           throw new YarnException(msg, ie);\n         }\n       } catch (ApplicationNotFoundException ex) {\n         // FailOver or RM restart happens before RMStateStore saves\n         // ApplicationState\n         LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n             \"same ApplicationSubmissionContext\");\n         rmClient.submitApplication(request);\n       }\n     }\n \n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationIdNotProvidedException(\n          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n    }\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n\n    // Automatically add the timeline DT into the CLC\n    // Only when the security and the timeline service are both enabled\n    if (isSecurityEnabled() \u0026\u0026 timelineV1ServiceEnabled) {\n      addTimelineDelegationToken(appContext.getAMContainerSpec());\n    }\n\n    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n    EnumSet\u003cYarnApplicationState\u003e waitingStates \u003d \n                                 EnumSet.of(YarnApplicationState.NEW,\n                                 YarnApplicationState.NEW_SAVING,\n                                 YarnApplicationState.SUBMITTED);\n    EnumSet\u003cYarnApplicationState\u003e failToSubmitStates \u003d \n                                  EnumSet.of(YarnApplicationState.FAILED,\n                                  YarnApplicationState.KILLED);\t\t\n    while (true) {\n      try {\n        ApplicationReport appReport \u003d getApplicationReport(applicationId);\n        YarnApplicationState state \u003d appReport.getYarnApplicationState();\n        if (!waitingStates.contains(state)) {\n          if(failToSubmitStates.contains(state)) {\n            throw new YarnException(\"Failed to submit \" + applicationId + \n                \" to YARN : \" + appReport.getDiagnostics());\n          }\n          LOG.info(\"Submitted application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout() \u0026\u0026\n            elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \" +\n              applicationId + \" to be submitted successfully\");\n        }\n\n        // Notify the client through the log every 10 poll, in case the client\n        // is blocked here too long.\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Application submission is not finished, \" +\n              \"submitted application \" + applicationId +\n              \" is still in \" + state);\n        }\n        try {\n          Thread.sleep(submitPollIntervalMillis);\n        } catch (InterruptedException ie) {\n          String msg \u003d \"Interrupted while waiting for application \"\n              + applicationId + \" to be successfully submitted.\";\n          LOG.error(msg);\n          throw new YarnException(msg, ie);\n        }\n      } catch (ApplicationNotFoundException ex) {\n        // FailOver or RM restart happens before RMStateStore saves\n        // ApplicationState\n        LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n            \"same ApplicationSubmissionContext\");\n        rmClient.submitApplication(request);\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "e4e72db5f9f305b493138ab36f073fe5d1750ad8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3877. YarnClientImpl.submitApplication swallows exceptions. Contributed by Varun Saxena\n",
      "commitDate": "25/09/16 5:06 AM",
      "commitName": "e4e72db5f9f305b493138ab36f073fe5d1750ad8",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "22/09/16 6:00 PM",
      "commitNameOld": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 2.46,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     if (applicationId \u003d\u003d null) {\n       throw new ApplicationIdNotProvidedException(\n           \"ApplicationId is not provided in ApplicationSubmissionContext\");\n     }\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n \n     // Automatically add the timeline DT into the CLC\n     // Only when the security and the timeline service are both enabled\n     if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n       addTimelineDelegationToken(appContext.getAMContainerSpec());\n     }\n \n     //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     long startTime \u003d System.currentTimeMillis();\n     EnumSet\u003cYarnApplicationState\u003e waitingStates \u003d \n                                  EnumSet.of(YarnApplicationState.NEW,\n                                  YarnApplicationState.NEW_SAVING,\n                                  YarnApplicationState.SUBMITTED);\n     EnumSet\u003cYarnApplicationState\u003e failToSubmitStates \u003d \n                                   EnumSet.of(YarnApplicationState.FAILED,\n                                   YarnApplicationState.KILLED);\t\t\n     while (true) {\n       try {\n         ApplicationReport appReport \u003d getApplicationReport(applicationId);\n         YarnApplicationState state \u003d appReport.getYarnApplicationState();\n         if (!waitingStates.contains(state)) {\n           if(failToSubmitStates.contains(state)) {\n             throw new YarnException(\"Failed to submit \" + applicationId + \n                 \" to YARN : \" + appReport.getDiagnostics());\n           }\n           LOG.info(\"Submitted application \" + applicationId);\n           break;\n         }\n \n         long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n         if (enforceAsyncAPITimeout() \u0026\u0026\n             elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n           throw new YarnException(\"Timed out while waiting for application \" +\n               applicationId + \" to be submitted successfully\");\n         }\n \n         // Notify the client through the log every 10 poll, in case the client\n         // is blocked here too long.\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Application submission is not finished, \" +\n               \"submitted application \" + applicationId +\n               \" is still in \" + state);\n         }\n         try {\n           Thread.sleep(submitPollIntervalMillis);\n         } catch (InterruptedException ie) {\n-          LOG.error(\"Interrupted while waiting for application \"\n-              + applicationId\n-              + \" to be successfully submitted.\");\n+          String msg \u003d \"Interrupted while waiting for application \"\n+              + applicationId + \" to be successfully submitted.\";\n+          LOG.error(msg);\n+          throw new YarnException(msg, ie);\n         }\n       } catch (ApplicationNotFoundException ex) {\n         // FailOver or RM restart happens before RMStateStore saves\n         // ApplicationState\n         LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n             \"same ApplicationSubmissionContext\");\n         rmClient.submitApplication(request);\n       }\n     }\n \n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationIdNotProvidedException(\n          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n    }\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n\n    // Automatically add the timeline DT into the CLC\n    // Only when the security and the timeline service are both enabled\n    if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n      addTimelineDelegationToken(appContext.getAMContainerSpec());\n    }\n\n    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n    EnumSet\u003cYarnApplicationState\u003e waitingStates \u003d \n                                 EnumSet.of(YarnApplicationState.NEW,\n                                 YarnApplicationState.NEW_SAVING,\n                                 YarnApplicationState.SUBMITTED);\n    EnumSet\u003cYarnApplicationState\u003e failToSubmitStates \u003d \n                                  EnumSet.of(YarnApplicationState.FAILED,\n                                  YarnApplicationState.KILLED);\t\t\n    while (true) {\n      try {\n        ApplicationReport appReport \u003d getApplicationReport(applicationId);\n        YarnApplicationState state \u003d appReport.getYarnApplicationState();\n        if (!waitingStates.contains(state)) {\n          if(failToSubmitStates.contains(state)) {\n            throw new YarnException(\"Failed to submit \" + applicationId + \n                \" to YARN : \" + appReport.getDiagnostics());\n          }\n          LOG.info(\"Submitted application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout() \u0026\u0026\n            elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \" +\n              applicationId + \" to be submitted successfully\");\n        }\n\n        // Notify the client through the log every 10 poll, in case the client\n        // is blocked here too long.\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Application submission is not finished, \" +\n              \"submitted application \" + applicationId +\n              \" is still in \" + state);\n        }\n        try {\n          Thread.sleep(submitPollIntervalMillis);\n        } catch (InterruptedException ie) {\n          String msg \u003d \"Interrupted while waiting for application \"\n              + applicationId + \" to be successfully submitted.\";\n          LOG.error(msg);\n          throw new YarnException(msg, ie);\n        }\n      } catch (ApplicationNotFoundException ex) {\n        // FailOver or RM restart happens before RMStateStore saves\n        // ApplicationState\n        LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n            \"same ApplicationSubmissionContext\");\n        rmClient.submitApplication(request);\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "03cc22945e5d4e953c06a313b8158389554a6aa7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3131. YarnClientImpl should check FAILED and KILLED state in submitApplication. Contributed by Chang Li\n",
      "commitDate": "04/03/15 10:04 AM",
      "commitName": "03cc22945e5d4e953c06a313b8158389554a6aa7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "19/02/15 11:00 AM",
      "commitNameOld": "d49ae725d5fa3eecf879ac42c42a368dd811f854",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 12.96,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,74 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     if (applicationId \u003d\u003d null) {\n       throw new ApplicationIdNotProvidedException(\n           \"ApplicationId is not provided in ApplicationSubmissionContext\");\n     }\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n \n     // Automatically add the timeline DT into the CLC\n     // Only when the security and the timeline service are both enabled\n     if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n       addTimelineDelegationToken(appContext.getAMContainerSpec());\n     }\n \n     //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     long startTime \u003d System.currentTimeMillis();\n-\n+    EnumSet\u003cYarnApplicationState\u003e waitingStates \u003d \n+                                 EnumSet.of(YarnApplicationState.NEW,\n+                                 YarnApplicationState.NEW_SAVING,\n+                                 YarnApplicationState.SUBMITTED);\n+    EnumSet\u003cYarnApplicationState\u003e failToSubmitStates \u003d \n+                                  EnumSet.of(YarnApplicationState.FAILED,\n+                                  YarnApplicationState.KILLED);\t\t\n     while (true) {\n       try {\n-        YarnApplicationState state \u003d\n-            getApplicationReport(applicationId).getYarnApplicationState();\n-        if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n-            !state.equals(YarnApplicationState.NEW_SAVING)) {\n+        ApplicationReport appReport \u003d getApplicationReport(applicationId);\n+        YarnApplicationState state \u003d appReport.getYarnApplicationState();\n+        if (!waitingStates.contains(state)) {\n+          if(failToSubmitStates.contains(state)) {\n+            throw new YarnException(\"Failed to submit \" + applicationId + \n+                \" to YARN : \" + appReport.getDiagnostics());\n+          }\n           LOG.info(\"Submitted application \" + applicationId);\n           break;\n         }\n \n         long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n         if (enforceAsyncAPITimeout() \u0026\u0026\n             elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n           throw new YarnException(\"Timed out while waiting for application \" +\n               applicationId + \" to be submitted successfully\");\n         }\n \n         // Notify the client through the log every 10 poll, in case the client\n         // is blocked here too long.\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Application submission is not finished, \" +\n               \"submitted application \" + applicationId +\n               \" is still in \" + state);\n         }\n         try {\n           Thread.sleep(submitPollIntervalMillis);\n         } catch (InterruptedException ie) {\n           LOG.error(\"Interrupted while waiting for application \"\n               + applicationId\n               + \" to be successfully submitted.\");\n         }\n       } catch (ApplicationNotFoundException ex) {\n         // FailOver or RM restart happens before RMStateStore saves\n         // ApplicationState\n         LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n             \"same ApplicationSubmissionContext\");\n         rmClient.submitApplication(request);\n       }\n     }\n \n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationIdNotProvidedException(\n          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n    }\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n\n    // Automatically add the timeline DT into the CLC\n    // Only when the security and the timeline service are both enabled\n    if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n      addTimelineDelegationToken(appContext.getAMContainerSpec());\n    }\n\n    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n    EnumSet\u003cYarnApplicationState\u003e waitingStates \u003d \n                                 EnumSet.of(YarnApplicationState.NEW,\n                                 YarnApplicationState.NEW_SAVING,\n                                 YarnApplicationState.SUBMITTED);\n    EnumSet\u003cYarnApplicationState\u003e failToSubmitStates \u003d \n                                  EnumSet.of(YarnApplicationState.FAILED,\n                                  YarnApplicationState.KILLED);\t\t\n    while (true) {\n      try {\n        ApplicationReport appReport \u003d getApplicationReport(applicationId);\n        YarnApplicationState state \u003d appReport.getYarnApplicationState();\n        if (!waitingStates.contains(state)) {\n          if(failToSubmitStates.contains(state)) {\n            throw new YarnException(\"Failed to submit \" + applicationId + \n                \" to YARN : \" + appReport.getDiagnostics());\n          }\n          LOG.info(\"Submitted application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout() \u0026\u0026\n            elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \" +\n              applicationId + \" to be submitted successfully\");\n        }\n\n        // Notify the client through the log every 10 poll, in case the client\n        // is blocked here too long.\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Application submission is not finished, \" +\n              \"submitted application \" + applicationId +\n              \" is still in \" + state);\n        }\n        try {\n          Thread.sleep(submitPollIntervalMillis);\n        } catch (InterruptedException ie) {\n          LOG.error(\"Interrupted while waiting for application \"\n              + applicationId\n              + \" to be successfully submitted.\");\n        }\n      } catch (ApplicationNotFoundException ex) {\n        // FailOver or RM restart happens before RMStateStore saves\n        // ApplicationState\n        LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n            \"same ApplicationSubmissionContext\");\n        rmClient.submitApplication(request);\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1936. Added security support for the Timeline Client. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 11:47 AM",
      "commitName": "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/03/14 12:42 AM",
      "commitNameOld": "6af044bb75fe3ddf184841483cce5e222ad1853a",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 71.46,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,65 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     if (applicationId \u003d\u003d null) {\n       throw new ApplicationIdNotProvidedException(\n           \"ApplicationId is not provided in ApplicationSubmissionContext\");\n     }\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n \n+    // Automatically add the timeline DT into the CLC\n+    // Only when the security and the timeline service are both enabled\n+    if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n+      addTimelineDelegationToken(appContext.getAMContainerSpec());\n+    }\n+\n     //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     long startTime \u003d System.currentTimeMillis();\n \n     while (true) {\n       try {\n         YarnApplicationState state \u003d\n             getApplicationReport(applicationId).getYarnApplicationState();\n         if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n             !state.equals(YarnApplicationState.NEW_SAVING)) {\n           LOG.info(\"Submitted application \" + applicationId);\n           break;\n         }\n \n         long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n         if (enforceAsyncAPITimeout() \u0026\u0026\n             elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n           throw new YarnException(\"Timed out while waiting for application \" +\n               applicationId + \" to be submitted successfully\");\n         }\n \n         // Notify the client through the log every 10 poll, in case the client\n         // is blocked here too long.\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Application submission is not finished, \" +\n               \"submitted application \" + applicationId +\n               \" is still in \" + state);\n         }\n         try {\n           Thread.sleep(submitPollIntervalMillis);\n         } catch (InterruptedException ie) {\n           LOG.error(\"Interrupted while waiting for application \"\n               + applicationId\n               + \" to be successfully submitted.\");\n         }\n       } catch (ApplicationNotFoundException ex) {\n         // FailOver or RM restart happens before RMStateStore saves\n         // ApplicationState\n         LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n             \"same ApplicationSubmissionContext\");\n         rmClient.submitApplication(request);\n       }\n     }\n \n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationIdNotProvidedException(\n          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n    }\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n\n    // Automatically add the timeline DT into the CLC\n    // Only when the security and the timeline service are both enabled\n    if (isSecurityEnabled() \u0026\u0026 timelineServiceEnabled) {\n      addTimelineDelegationToken(appContext.getAMContainerSpec());\n    }\n\n    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n\n    while (true) {\n      try {\n        YarnApplicationState state \u003d\n            getApplicationReport(applicationId).getYarnApplicationState();\n        if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n            !state.equals(YarnApplicationState.NEW_SAVING)) {\n          LOG.info(\"Submitted application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout() \u0026\u0026\n            elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \" +\n              applicationId + \" to be submitted successfully\");\n        }\n\n        // Notify the client through the log every 10 poll, in case the client\n        // is blocked here too long.\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Application submission is not finished, \" +\n              \"submitted application \" + applicationId +\n              \" is still in \" + state);\n        }\n        try {\n          Thread.sleep(submitPollIntervalMillis);\n        } catch (InterruptedException ie) {\n          LOG.error(\"Interrupted while waiting for application \"\n              + applicationId\n              + \" to be successfully submitted.\");\n        }\n      } catch (ApplicationNotFoundException ex) {\n        // FailOver or RM restart happens before RMStateStore saves\n        // ApplicationState\n        LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n            \"same ApplicationSubmissionContext\");\n        rmClient.submitApplication(request);\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "0edda2537346207e522120adeb8db1e9d058c884": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1764. Modified YarnClient to correctly handle failover of ResourceManager after the submitApplication call goes through. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/03/14 5:52 PM",
      "commitName": "0edda2537346207e522120adeb8db1e9d058c884",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/03/14 8:43 PM",
      "commitNameOld": "8497b870af52dce6af3b716707fc6de7973ce955",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.84,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,59 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     if (applicationId \u003d\u003d null) {\n       throw new ApplicationIdNotProvidedException(\n           \"ApplicationId is not provided in ApplicationSubmissionContext\");\n     }\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n \n     //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     long startTime \u003d System.currentTimeMillis();\n \n-    //TODO: YARN-1764:Handle RM fail overs after the submitApplication call.\n     while (true) {\n-      YarnApplicationState state \u003d\n-          getApplicationReport(applicationId).getYarnApplicationState();\n-      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n-          !state.equals(YarnApplicationState.NEW_SAVING)) {\n-        LOG.info(\"Submitted application \" + applicationId);\n-        break;\n-      }\n-\n-      long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n-      if (enforceAsyncAPITimeout() \u0026\u0026\n-          elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n-        throw new YarnException(\"Timed out while waiting for application \" +\n-          applicationId + \" to be submitted successfully\");\n-      }\n-\n-      // Notify the client through the log every 10 poll, in case the client\n-      // is blocked here too long.\n-      if (++pollCount % 10 \u003d\u003d 0) {\n-        LOG.info(\"Application submission is not finished, \" +\n-            \"submitted application \" + applicationId +\n-            \" is still in \" + state);\n-      }\n       try {\n-        Thread.sleep(submitPollIntervalMillis);\n-      } catch (InterruptedException ie) {\n-        LOG.error(\"Interrupted while waiting for application \" + applicationId\n-            + \" to be successfully submitted.\");\n+        YarnApplicationState state \u003d\n+            getApplicationReport(applicationId).getYarnApplicationState();\n+        if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n+            !state.equals(YarnApplicationState.NEW_SAVING)) {\n+          LOG.info(\"Submitted application \" + applicationId);\n+          break;\n+        }\n+\n+        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n+        if (enforceAsyncAPITimeout() \u0026\u0026\n+            elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n+          throw new YarnException(\"Timed out while waiting for application \" +\n+              applicationId + \" to be submitted successfully\");\n+        }\n+\n+        // Notify the client through the log every 10 poll, in case the client\n+        // is blocked here too long.\n+        if (++pollCount % 10 \u003d\u003d 0) {\n+          LOG.info(\"Application submission is not finished, \" +\n+              \"submitted application \" + applicationId +\n+              \" is still in \" + state);\n+        }\n+        try {\n+          Thread.sleep(submitPollIntervalMillis);\n+        } catch (InterruptedException ie) {\n+          LOG.error(\"Interrupted while waiting for application \"\n+              + applicationId\n+              + \" to be successfully submitted.\");\n+        }\n+      } catch (ApplicationNotFoundException ex) {\n+        // FailOver or RM restart happens before RMStateStore saves\n+        // ApplicationState\n+        LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n+            \"same ApplicationSubmissionContext\");\n+        rmClient.submitApplication(request);\n       }\n     }\n \n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationIdNotProvidedException(\n          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n    }\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n\n    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n\n    while (true) {\n      try {\n        YarnApplicationState state \u003d\n            getApplicationReport(applicationId).getYarnApplicationState();\n        if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n            !state.equals(YarnApplicationState.NEW_SAVING)) {\n          LOG.info(\"Submitted application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout() \u0026\u0026\n            elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \" +\n              applicationId + \" to be submitted successfully\");\n        }\n\n        // Notify the client through the log every 10 poll, in case the client\n        // is blocked here too long.\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Application submission is not finished, \" +\n              \"submitted application \" + applicationId +\n              \" is still in \" + state);\n        }\n        try {\n          Thread.sleep(submitPollIntervalMillis);\n        } catch (InterruptedException ie) {\n          LOG.error(\"Interrupted while waiting for application \"\n              + applicationId\n              + \" to be successfully submitted.\");\n        }\n      } catch (ApplicationNotFoundException ex) {\n        // FailOver or RM restart happens before RMStateStore saves\n        // ApplicationState\n        LOG.info(\"Re-submit application \" + applicationId + \"with the \" +\n            \"same ApplicationSubmissionContext\");\n        rmClient.submitApplication(request);\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "8497b870af52dce6af3b716707fc6de7973ce955": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1410. Added tests to validate that clients can fail-over to a new RM\nafter getting an application-ID but before submission and can still submit\nto the newly active RM with no issues. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575478 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 8:43 PM",
      "commitName": "8497b870af52dce6af3b716707fc6de7973ce955",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/03/14 12:39 PM",
      "commitNameOld": "88245b6a41171f939b22186c533ea2bc7994f9b3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.34,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,51 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n-    appContext.setApplicationId(applicationId);\n+    if (applicationId \u003d\u003d null) {\n+      throw new ApplicationIdNotProvidedException(\n+          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n+    }\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n+\n+    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     long startTime \u003d System.currentTimeMillis();\n \n+    //TODO: YARN-1764:Handle RM fail overs after the submitApplication call.\n     while (true) {\n       YarnApplicationState state \u003d\n           getApplicationReport(applicationId).getYarnApplicationState();\n       if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n           !state.equals(YarnApplicationState.NEW_SAVING)) {\n         LOG.info(\"Submitted application \" + applicationId);\n         break;\n       }\n \n       long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n       if (enforceAsyncAPITimeout() \u0026\u0026\n           elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n         throw new YarnException(\"Timed out while waiting for application \" +\n           applicationId + \" to be submitted successfully\");\n       }\n \n       // Notify the client through the log every 10 poll, in case the client\n       // is blocked here too long.\n       if (++pollCount % 10 \u003d\u003d 0) {\n         LOG.info(\"Application submission is not finished, \" +\n             \"submitted application \" + applicationId +\n             \" is still in \" + state);\n       }\n       try {\n         Thread.sleep(submitPollIntervalMillis);\n       } catch (InterruptedException ie) {\n         LOG.error(\"Interrupted while waiting for application \" + applicationId\n             + \" to be successfully submitted.\");\n       }\n     }\n \n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationIdNotProvidedException(\n          \"ApplicationId is not provided in ApplicationSubmissionContext\");\n    }\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n\n    //TODO: YARN-1763:Handle RM failovers during the submitApplication call.\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n\n    //TODO: YARN-1764:Handle RM fail overs after the submitApplication call.\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        LOG.info(\"Submitted application \" + applicationId);\n        break;\n      }\n\n      long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n      if (enforceAsyncAPITimeout() \u0026\u0026\n          elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n        throw new YarnException(\"Timed out while waiting for application \" +\n          applicationId + \" to be submitted successfully\");\n      }\n\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(submitPollIntervalMillis);\n      } catch (InterruptedException ie) {\n        LOG.error(\"Interrupted while waiting for application \" + applicationId\n            + \" to be successfully submitted.\");\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "3f79e4962483b371a139607aee7525c64a14876e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1630. Introduce timeout for async polling operations in YarnClientImpl (Aditya Acharya via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/01/14 2:27 PM",
      "commitName": "3f79e4962483b371a139607aee7525c64a14876e",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.73,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,45 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     appContext.setApplicationId(applicationId);\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n+    long startTime \u003d System.currentTimeMillis();\n+\n     while (true) {\n       YarnApplicationState state \u003d\n           getApplicationReport(applicationId).getYarnApplicationState();\n       if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n           !state.equals(YarnApplicationState.NEW_SAVING)) {\n+        LOG.info(\"Submitted application \" + applicationId);\n         break;\n       }\n+\n+      long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n+      if (enforceAsyncAPITimeout() \u0026\u0026\n+          elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n+        throw new YarnException(\"Timed out while waiting for application \" +\n+          applicationId + \" to be submitted successfully\");\n+      }\n+\n       // Notify the client through the log every 10 poll, in case the client\n       // is blocked here too long.\n       if (++pollCount % 10 \u003d\u003d 0) {\n         LOG.info(\"Application submission is not finished, \" +\n             \"submitted application \" + applicationId +\n             \" is still in \" + state);\n       }\n       try {\n         Thread.sleep(submitPollIntervalMillis);\n       } catch (InterruptedException ie) {\n+        LOG.error(\"Interrupted while waiting for application \" + applicationId\n+            + \" to be successfully submitted.\");\n       }\n     }\n \n-    LOG.info(\"Submitted application \" + applicationId);\n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    long startTime \u003d System.currentTimeMillis();\n\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        LOG.info(\"Submitted application \" + applicationId);\n        break;\n      }\n\n      long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n      if (enforceAsyncAPITimeout() \u0026\u0026\n          elapsedMillis \u003e\u003d asyncApiPollTimeoutMillis) {\n        throw new YarnException(\"Timed out while waiting for application \" +\n          applicationId + \" to be submitted successfully\");\n      }\n\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(submitPollIntervalMillis);\n      } catch (InterruptedException ie) {\n        LOG.error(\"Interrupted while waiting for application \" + applicationId\n            + \" to be successfully submitted.\");\n      }\n    }\n\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "ca125153b319a8f5d75585d25cb0f37ae717be01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 2:32 PM",
      "commitName": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/12/13 6:16 PM",
      "commitNameOld": "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     appContext.setApplicationId(applicationId);\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     while (true) {\n       YarnApplicationState state \u003d\n           getApplicationReport(applicationId).getYarnApplicationState();\n       if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n           !state.equals(YarnApplicationState.NEW_SAVING)) {\n         break;\n       }\n       // Notify the client through the log every 10 poll, in case the client\n       // is blocked here too long.\n       if (++pollCount % 10 \u003d\u003d 0) {\n         LOG.info(\"Application submission is not finished, \" +\n             \"submitted application \" + applicationId +\n             \" is still in \" + state);\n       }\n       try {\n         Thread.sleep(submitPollIntervalMillis);\n       } catch (InterruptedException ie) {\n       }\n     }\n \n-\n-    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n-        + \" at \" + rmAddress);\n+    LOG.info(\"Submitted application \" + applicationId);\n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        break;\n      }\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(submitPollIntervalMillis);\n      } catch (InterruptedException ie) {\n      }\n    }\n\n    LOG.info(\"Submitted application \" + applicationId);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1446. Changed client API to retry killing application till RM acknowledges so as to account for RM crashes/failover. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/13 6:16 PM",
      "commitName": "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/13 2:16 PM",
      "commitNameOld": "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 114.21,
      "commitsBetweenForRepo": 737,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     appContext.setApplicationId(applicationId);\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     while (true) {\n       YarnApplicationState state \u003d\n           getApplicationReport(applicationId).getYarnApplicationState();\n       if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n           !state.equals(YarnApplicationState.NEW_SAVING)) {\n         break;\n       }\n       // Notify the client through the log every 10 poll, in case the client\n       // is blocked here too long.\n       if (++pollCount % 10 \u003d\u003d 0) {\n         LOG.info(\"Application submission is not finished, \" +\n             \"submitted application \" + applicationId +\n             \" is still in \" + state);\n       }\n       try {\n-        Thread.sleep(statePollIntervalMillis);\n+        Thread.sleep(submitPollIntervalMillis);\n       } catch (InterruptedException ie) {\n       }\n     }\n \n \n     LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n         + \" at \" + rmAddress);\n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        break;\n      }\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(submitPollIntervalMillis);\n      } catch (InterruptedException ie) {\n      }\n    }\n\n\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": {
      "type": "Yfilerename",
      "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 9:02 PM",
      "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 8:10 PM",
      "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        break;\n      }\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(statePollIntervalMillis);\n      } catch (InterruptedException ie) {\n      }\n    }\n\n\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java"
      }
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/06/13 2:43 PM",
      "commitNameOld": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.27,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n-          throws YarnRemoteException, IOException {\n+          throws YarnException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     appContext.setApplicationId(applicationId);\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     while (true) {\n       YarnApplicationState state \u003d\n           getApplicationReport(applicationId).getYarnApplicationState();\n       if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n           !state.equals(YarnApplicationState.NEW_SAVING)) {\n         break;\n       }\n       // Notify the client through the log every 10 poll, in case the client\n       // is blocked here too long.\n       if (++pollCount % 10 \u003d\u003d 0) {\n         LOG.info(\"Application submission is not finished, \" +\n             \"submitted application \" + applicationId +\n             \" is still in \" + state);\n       }\n       try {\n         Thread.sleep(statePollIntervalMillis);\n       } catch (InterruptedException ie) {\n       }\n     }\n \n \n     LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n         + \" at \" + rmAddress);\n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        break;\n      }\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(statePollIntervalMillis);\n      } catch (InterruptedException ie) {\n      }\n    }\n\n\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException, IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-631. Changed ClientRMProtocol api to throw IOException and YarnRemoteException. Contributed by Xuan Gong.\nMAPREDUCE-5212. Handling YarnRemoteException separately from IOException in MR App after YARN-631. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480494 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/13 3:53 PM",
      "commitName": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/04/13 8:06 PM",
      "commitNameOld": "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 15.82,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n-          throws YarnRemoteException {\n+          throws YarnRemoteException, IOException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     appContext.setApplicationId(applicationId);\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n     rmClient.submitApplication(request);\n \n     int pollCount \u003d 0;\n     while (true) {\n       YarnApplicationState state \u003d\n           getApplicationReport(applicationId).getYarnApplicationState();\n       if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n           !state.equals(YarnApplicationState.NEW_SAVING)) {\n         break;\n       }\n       // Notify the client through the log every 10 poll, in case the client\n       // is blocked here too long.\n       if (++pollCount % 10 \u003d\u003d 0) {\n         LOG.info(\"Application submission is not finished, \" +\n             \"submitted application \" + applicationId +\n             \" is still in \" + state);\n       }\n       try {\n         Thread.sleep(statePollIntervalMillis);\n       } catch (InterruptedException ie) {\n       }\n     }\n \n \n     LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n         + \" at \" + rmAddress);\n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnRemoteException, IOException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        break;\n      }\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(statePollIntervalMillis);\n      } catch (InterruptedException ie) {\n      }\n    }\n\n\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnRemoteException, IOException]"
      }
    },
    "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-549. YarnClient.submitApplication should wait for application to be accepted by the RM (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1470797 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 8:06 PM",
      "commitName": "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "06/02/13 11:03 AM",
      "commitNameOld": "ab16a375720f1b5fa8400498d6a727007275e1d8",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 75.34,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,35 @@\n       submitApplication(ApplicationSubmissionContext appContext)\n           throws YarnRemoteException {\n     ApplicationId applicationId \u003d appContext.getApplicationId();\n     appContext.setApplicationId(applicationId);\n     SubmitApplicationRequest request \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     request.setApplicationSubmissionContext(appContext);\n     rmClient.submitApplication(request);\n+\n+    int pollCount \u003d 0;\n+    while (true) {\n+      YarnApplicationState state \u003d\n+          getApplicationReport(applicationId).getYarnApplicationState();\n+      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n+          !state.equals(YarnApplicationState.NEW_SAVING)) {\n+        break;\n+      }\n+      // Notify the client through the log every 10 poll, in case the client\n+      // is blocked here too long.\n+      if (++pollCount % 10 \u003d\u003d 0) {\n+        LOG.info(\"Application submission is not finished, \" +\n+            \"submitted application \" + applicationId +\n+            \" is still in \" + state);\n+      }\n+      try {\n+        Thread.sleep(statePollIntervalMillis);\n+      } catch (InterruptedException ie) {\n+      }\n+    }\n+\n+\n     LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n         + \" at \" + rmAddress);\n     return applicationId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnRemoteException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n\n    int pollCount \u003d 0;\n    while (true) {\n      YarnApplicationState state \u003d\n          getApplicationReport(applicationId).getYarnApplicationState();\n      if (!state.equals(YarnApplicationState.NEW) \u0026\u0026\n          !state.equals(YarnApplicationState.NEW_SAVING)) {\n        break;\n      }\n      // Notify the client through the log every 10 poll, in case the client\n      // is blocked here too long.\n      if (++pollCount % 10 \u003d\u003d 0) {\n        LOG.info(\"Application submission is not finished, \" +\n            \"submitted application \" + applicationId +\n            \" is still in \" + state);\n      }\n      try {\n        Thread.sleep(statePollIntervalMillis);\n      } catch (InterruptedException ie) {\n      }\n    }\n\n\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "87c5d243db050ac9ce0c53e0905930573132221e": {
      "type": "Yfilerename",
      "commitMessage": "YARN-83. Change package of YarnClient to org.apache.hadoop. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381273 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 10:54 AM",
      "commitName": "87c5d243db050ac9ce0c53e0905930573132221e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/09/12 9:53 PM",
      "commitNameOld": "31142aa8927568b7901eb48d80ba04d3e0080f60",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnRemoteException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/hadoop/yarn/client/YarnClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java"
      }
    },
    "10e704c50ba1fa601329d0fee099993e8c3725a6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-29. Add a yarn-client module. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/08/12 11:27 AM",
      "commitName": "10e704c50ba1fa601329d0fee099993e8c3725a6",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,12 @@\n+      submitApplication(ApplicationSubmissionContext appContext)\n+          throws YarnRemoteException {\n+    ApplicationId applicationId \u003d appContext.getApplicationId();\n+    appContext.setApplicationId(applicationId);\n+    SubmitApplicationRequest request \u003d\n+        Records.newRecord(SubmitApplicationRequest.class);\n+    request.setApplicationSubmissionContext(appContext);\n+    rmClient.submitApplication(request);\n+    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n+        + \" at \" + rmAddress);\n+    return applicationId;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      submitApplication(ApplicationSubmissionContext appContext)\n          throws YarnRemoteException {\n    ApplicationId applicationId \u003d appContext.getApplicationId();\n    appContext.setApplicationId(applicationId);\n    SubmitApplicationRequest request \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    request.setApplicationSubmissionContext(appContext);\n    rmClient.submitApplication(request);\n    LOG.info(\"Submitted application \" + applicationId + \" to ResourceManager\"\n        + \" at \" + rmAddress);\n    return applicationId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/hadoop/yarn/client/YarnClientImpl.java"
    }
  }
}