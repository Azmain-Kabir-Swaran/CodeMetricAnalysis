{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceLauncher.java",
  "functionName": "loadConfigurationClasses",
  "functionId": "loadConfigurationClasses",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java",
  "functionStartLine": 423,
  "functionEndLine": 449,
  "numCommitsSeen": 3,
  "timeTaken": 712,
  "changeHistory": [
    "373bb4931fb392e3ca6bfd78992887e5a405e186"
  ],
  "changeHistoryShort": {
    "373bb4931fb392e3ca6bfd78992887e5a405e186": "Yintroduced"
  },
  "changeHistoryDetails": {
    "373bb4931fb392e3ca6bfd78992887e5a405e186": {
      "type": "Yintroduced",
      "commitMessage": "YARN-679. Add an entry point that can start any Yarn service. Contributed by Steve Loughran.\n",
      "commitDate": "28/04/17 10:45 AM",
      "commitName": "373bb4931fb392e3ca6bfd78992887e5a405e186",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,27 @@\n+  public int loadConfigurationClasses() {\n+    List\u003cString\u003e toCreate \u003d getConfigurationsToCreate();\n+    int loaded \u003d 0;\n+    for (String classname : toCreate) {\n+      try {\n+        Class\u003c?\u003e loadClass \u003d getClassLoader().loadClass(classname);\n+        Object instance \u003d loadClass.getConstructor().newInstance();\n+        if (!(instance instanceof Configuration)) {\n+          throw new ExitUtil.ExitException(EXIT_SERVICE_CREATION_FAILURE,\n+              \"Could not create \" + classname\n+              + \" because it is not a Configuration class/subclass\");\n+        }\n+        loaded++;\n+      } catch (ClassNotFoundException e) {\n+        // class could not be found -implies it is not on the current classpath\n+        LOG.debug(\"Failed to load {} because it is not on the classpath\",\n+            classname);\n+      } catch (ExitUtil.ExitException e) {\n+        // rethrow\n+        throw e;\n+      } catch (Exception e) {\n+        // any other exception\n+        LOG.info(\"Failed to create {}\", classname, e);\n+      }\n+    }\n+    return loaded;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int loadConfigurationClasses() {\n    List\u003cString\u003e toCreate \u003d getConfigurationsToCreate();\n    int loaded \u003d 0;\n    for (String classname : toCreate) {\n      try {\n        Class\u003c?\u003e loadClass \u003d getClassLoader().loadClass(classname);\n        Object instance \u003d loadClass.getConstructor().newInstance();\n        if (!(instance instanceof Configuration)) {\n          throw new ExitUtil.ExitException(EXIT_SERVICE_CREATION_FAILURE,\n              \"Could not create \" + classname\n              + \" because it is not a Configuration class/subclass\");\n        }\n        loaded++;\n      } catch (ClassNotFoundException e) {\n        // class could not be found -implies it is not on the current classpath\n        LOG.debug(\"Failed to load {} because it is not on the classpath\",\n            classname);\n      } catch (ExitUtil.ExitException e) {\n        // rethrow\n        throw e;\n      } catch (Exception e) {\n        // any other exception\n        LOG.info(\"Failed to create {}\", classname, e);\n      }\n    }\n    return loaded;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java"
    }
  }
}