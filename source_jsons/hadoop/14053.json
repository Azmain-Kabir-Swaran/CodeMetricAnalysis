{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenSecretManager.java",
  "functionName": "saveSecretManagerState",
  "functionId": "saveSecretManagerState",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/delegation/DelegationTokenSecretManager.java",
  "functionStartLine": 229,
  "functionEndLine": 263,
  "numCommitsSeen": 23,
  "timeTaken": 1663,
  "changeHistory": [
    "a2edb11b68ae01a44092cb14ac2717a6aad93305"
  ],
  "changeHistoryShort": {
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5698. Use protobuf to serialize / deserialize FSImage. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 11:18 AM",
      "commitName": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,35 @@\n+  public synchronized SecretManagerState saveSecretManagerState() {\n+    SecretManagerSection s \u003d SecretManagerSection.newBuilder()\n+        .setCurrentId(currentId)\n+        .setTokenSequenceNumber(delegationTokenSequenceNumber)\n+        .setNumKeys(allKeys.size()).setNumTokens(currentTokens.size()).build();\n+    ArrayList\u003cSecretManagerSection.DelegationKey\u003e keys \u003d Lists\n+        .newArrayListWithCapacity(allKeys.size());\n+    ArrayList\u003cSecretManagerSection.PersistToken\u003e tokens \u003d Lists\n+        .newArrayListWithCapacity(currentTokens.size());\n+\n+    for (DelegationKey v : allKeys.values()) {\n+      SecretManagerSection.DelegationKey.Builder b \u003d SecretManagerSection.DelegationKey\n+          .newBuilder().setId(v.getKeyId()).setExpiryDate(v.getExpiryDate());\n+      if (v.getEncodedKey() !\u003d null) {\n+        b.setKey(ByteString.copyFrom(v.getEncodedKey()));\n+      }\n+      keys.add(b.build());\n+    }\n+\n+    for (Entry\u003cDelegationTokenIdentifier, DelegationTokenInformation\u003e e : currentTokens\n+        .entrySet()) {\n+      DelegationTokenIdentifier id \u003d e.getKey();\n+      SecretManagerSection.PersistToken.Builder b \u003d SecretManagerSection.PersistToken\n+          .newBuilder().setOwner(id.getOwner().toString())\n+          .setRenewer(id.getRenewer().toString())\n+          .setRealUser(id.getRealUser().toString())\n+          .setIssueDate(id.getIssueDate()).setMaxDate(id.getMaxDate())\n+          .setSequenceNumber(id.getSequenceNumber())\n+          .setMasterKeyId(id.getMasterKeyId())\n+          .setExpiryDate(e.getValue().getRenewDate());\n+      tokens.add(b.build());\n+    }\n+\n+    return new SecretManagerState(s, keys, tokens);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized SecretManagerState saveSecretManagerState() {\n    SecretManagerSection s \u003d SecretManagerSection.newBuilder()\n        .setCurrentId(currentId)\n        .setTokenSequenceNumber(delegationTokenSequenceNumber)\n        .setNumKeys(allKeys.size()).setNumTokens(currentTokens.size()).build();\n    ArrayList\u003cSecretManagerSection.DelegationKey\u003e keys \u003d Lists\n        .newArrayListWithCapacity(allKeys.size());\n    ArrayList\u003cSecretManagerSection.PersistToken\u003e tokens \u003d Lists\n        .newArrayListWithCapacity(currentTokens.size());\n\n    for (DelegationKey v : allKeys.values()) {\n      SecretManagerSection.DelegationKey.Builder b \u003d SecretManagerSection.DelegationKey\n          .newBuilder().setId(v.getKeyId()).setExpiryDate(v.getExpiryDate());\n      if (v.getEncodedKey() !\u003d null) {\n        b.setKey(ByteString.copyFrom(v.getEncodedKey()));\n      }\n      keys.add(b.build());\n    }\n\n    for (Entry\u003cDelegationTokenIdentifier, DelegationTokenInformation\u003e e : currentTokens\n        .entrySet()) {\n      DelegationTokenIdentifier id \u003d e.getKey();\n      SecretManagerSection.PersistToken.Builder b \u003d SecretManagerSection.PersistToken\n          .newBuilder().setOwner(id.getOwner().toString())\n          .setRenewer(id.getRenewer().toString())\n          .setRealUser(id.getRealUser().toString())\n          .setIssueDate(id.getIssueDate()).setMaxDate(id.getMaxDate())\n          .setSequenceNumber(id.getSequenceNumber())\n          .setMasterKeyId(id.getMasterKeyId())\n          .setExpiryDate(e.getValue().getRenewDate());\n      tokens.add(b.build());\n    }\n\n    return new SecretManagerState(s, keys, tokens);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/delegation/DelegationTokenSecretManager.java"
    }
  }
}