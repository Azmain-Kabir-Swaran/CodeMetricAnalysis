{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MembershipStoreImpl.java",
  "functionName": "loadCache",
  "functionId": "loadCache___force-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java",
  "functionStartLine": 187,
  "functionEndLine": 239,
  "numCommitsSeen": 3,
  "timeTaken": 1427,
  "changeHistory": [
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81"
  ],
  "changeHistoryShort": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean loadCache(boolean force) throws IOException {\n    super.loadCache(force);\n\n    // Update local cache atomically\n    cacheWriteLock.lock();\n    try {\n      this.activeRegistrations.clear();\n      this.expiredRegistrations.clear();\n      this.activeNamespaces.clear();\n\n      // Build list of NN registrations: nnId -\u003e registration list\n      Map\u003cString, List\u003cMembershipState\u003e\u003e nnRegistrations \u003d new HashMap\u003c\u003e();\n      List\u003cMembershipState\u003e cachedRecords \u003d getCachedRecords();\n      for (MembershipState membership : cachedRecords) {\n        String nnId \u003d membership.getNamenodeKey();\n        if (membership.getState() \u003d\u003d FederationNamenodeServiceState.EXPIRED) {\n          // Expired, RPC service does not use these\n          String key \u003d membership.getPrimaryKey();\n          this.expiredRegistrations.put(key, membership);\n        } else {\n          // This is a valid NN registration, build a list of all registrations\n          // using the NN id to use for the quorum calculation.\n          List\u003cMembershipState\u003e nnRegistration \u003d\n              nnRegistrations.get(nnId);\n          if (nnRegistration \u003d\u003d null) {\n            nnRegistration \u003d new LinkedList\u003c\u003e();\n            nnRegistrations.put(nnId, nnRegistration);\n          }\n          nnRegistration.add(membership);\n          String bpId \u003d membership.getBlockPoolId();\n          String cId \u003d membership.getClusterId();\n          String nsId \u003d membership.getNameserviceId();\n          FederationNamespaceInfo nsInfo \u003d\n              new FederationNamespaceInfo(bpId, cId, nsId);\n          this.activeNamespaces.add(nsInfo);\n        }\n      }\n\n      // Calculate most representative entry for each active NN id\n      for (List\u003cMembershipState\u003e nnRegistration : nnRegistrations.values()) {\n        // Run quorum based on NN state\n        MembershipState representativeRecord \u003d\n            getRepresentativeQuorum(nnRegistration);\n        String nnKey \u003d representativeRecord.getNamenodeKey();\n        this.activeRegistrations.put(nnKey, representativeRecord);\n      }\n      LOG.debug(\"Refreshed {} NN registrations from State Store\",\n          cachedRecords.size());\n    } finally {\n      cacheWriteLock.unlock();\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java"
      }
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,53 @@\n+  public boolean loadCache(boolean force) throws IOException {\n+    super.loadCache(force);\n+\n+    // Update local cache atomically\n+    cacheWriteLock.lock();\n+    try {\n+      this.activeRegistrations.clear();\n+      this.expiredRegistrations.clear();\n+      this.activeNamespaces.clear();\n+\n+      // Build list of NN registrations: nnId -\u003e registration list\n+      Map\u003cString, List\u003cMembershipState\u003e\u003e nnRegistrations \u003d new HashMap\u003c\u003e();\n+      List\u003cMembershipState\u003e cachedRecords \u003d getCachedRecords();\n+      for (MembershipState membership : cachedRecords) {\n+        String nnId \u003d membership.getNamenodeKey();\n+        if (membership.getState() \u003d\u003d FederationNamenodeServiceState.EXPIRED) {\n+          // Expired, RPC service does not use these\n+          String key \u003d membership.getPrimaryKey();\n+          this.expiredRegistrations.put(key, membership);\n+        } else {\n+          // This is a valid NN registration, build a list of all registrations\n+          // using the NN id to use for the quorum calculation.\n+          List\u003cMembershipState\u003e nnRegistration \u003d\n+              nnRegistrations.get(nnId);\n+          if (nnRegistration \u003d\u003d null) {\n+            nnRegistration \u003d new LinkedList\u003c\u003e();\n+            nnRegistrations.put(nnId, nnRegistration);\n+          }\n+          nnRegistration.add(membership);\n+          String bpId \u003d membership.getBlockPoolId();\n+          String cId \u003d membership.getClusterId();\n+          String nsId \u003d membership.getNameserviceId();\n+          FederationNamespaceInfo nsInfo \u003d\n+              new FederationNamespaceInfo(bpId, cId, nsId);\n+          this.activeNamespaces.add(nsInfo);\n+        }\n+      }\n+\n+      // Calculate most representative entry for each active NN id\n+      for (List\u003cMembershipState\u003e nnRegistration : nnRegistrations.values()) {\n+        // Run quorum based on NN state\n+        MembershipState representativeRecord \u003d\n+            getRepresentativeQuorum(nnRegistration);\n+        String nnKey \u003d representativeRecord.getNamenodeKey();\n+        this.activeRegistrations.put(nnKey, representativeRecord);\n+      }\n+      LOG.debug(\"Refreshed {} NN registrations from State Store\",\n+          cachedRecords.size());\n+    } finally {\n+      cacheWriteLock.unlock();\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean loadCache(boolean force) throws IOException {\n    super.loadCache(force);\n\n    // Update local cache atomically\n    cacheWriteLock.lock();\n    try {\n      this.activeRegistrations.clear();\n      this.expiredRegistrations.clear();\n      this.activeNamespaces.clear();\n\n      // Build list of NN registrations: nnId -\u003e registration list\n      Map\u003cString, List\u003cMembershipState\u003e\u003e nnRegistrations \u003d new HashMap\u003c\u003e();\n      List\u003cMembershipState\u003e cachedRecords \u003d getCachedRecords();\n      for (MembershipState membership : cachedRecords) {\n        String nnId \u003d membership.getNamenodeKey();\n        if (membership.getState() \u003d\u003d FederationNamenodeServiceState.EXPIRED) {\n          // Expired, RPC service does not use these\n          String key \u003d membership.getPrimaryKey();\n          this.expiredRegistrations.put(key, membership);\n        } else {\n          // This is a valid NN registration, build a list of all registrations\n          // using the NN id to use for the quorum calculation.\n          List\u003cMembershipState\u003e nnRegistration \u003d\n              nnRegistrations.get(nnId);\n          if (nnRegistration \u003d\u003d null) {\n            nnRegistration \u003d new LinkedList\u003c\u003e();\n            nnRegistrations.put(nnId, nnRegistration);\n          }\n          nnRegistration.add(membership);\n          String bpId \u003d membership.getBlockPoolId();\n          String cId \u003d membership.getClusterId();\n          String nsId \u003d membership.getNameserviceId();\n          FederationNamespaceInfo nsInfo \u003d\n              new FederationNamespaceInfo(bpId, cId, nsId);\n          this.activeNamespaces.add(nsInfo);\n        }\n      }\n\n      // Calculate most representative entry for each active NN id\n      for (List\u003cMembershipState\u003e nnRegistration : nnRegistrations.values()) {\n        // Run quorum based on NN state\n        MembershipState representativeRecord \u003d\n            getRepresentativeQuorum(nnRegistration);\n        String nnKey \u003d representativeRecord.getNamenodeKey();\n        this.activeRegistrations.put(nnKey, representativeRecord);\n      }\n      LOG.debug(\"Refreshed {} NN registrations from State Store\",\n          cachedRecords.size());\n    } finally {\n      cacheWriteLock.unlock();\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java"
    }
  }
}