{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "recoverLocalizedResources",
  "functionId": "recoverLocalizedResources___state-RecoveredLocalizationState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 300,
  "functionEndLine": 339,
  "numCommitsSeen": 88,
  "timeTaken": 4796,
  "changeHistory": [
    "250b50018e8c94d8ca83ff981b01f26bb68c0842",
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "66598697a6e777615334ebde5ba7738135da83ae"
  ],
  "changeHistoryShort": {
    "250b50018e8c94d8ca83ff981b01f26bb68c0842": "Ybodychange",
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ymultichange(Yexceptionschange,Ybodychange)",
    "aea42930bbb9566ea6988f684dbd72a72a2bdadf": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "250b50018e8c94d8ca83ff981b01f26bb68c0842": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati\n",
      "commitDate": "13/09/18 11:28 AM",
      "commitName": "250b50018e8c94d8ca83ff981b01f26bb68c0842",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/08/18 7:29 AM",
      "commitNameOld": "585ebd873a55bedd2a364d256837f08ada8ba032",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 21.17,
      "commitsBetweenForRepo": 172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,40 @@\n   public void recoverLocalizedResources(RecoveredLocalizationState state)\n       throws URISyntaxException, IOException {\n     LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n     recoverTrackerResources(publicRsrc, trackerState);\n \n     try (RecoveryIterator\u003cMap.Entry\u003cString, RecoveredUserResources\u003e\u003e it\n              \u003d state.getIterator()) {\n       while (it.hasNext()) {\n         Map.Entry\u003cString, RecoveredUserResources\u003e userEntry \u003d it.next();\n         String user \u003d userEntry.getKey();\n         RecoveredUserResources userResources \u003d userEntry.getValue();\n         trackerState \u003d userResources.getPrivateTrackerState();\n-        if (!trackerState.isEmpty()) {\n-          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-              null, dispatcher, true, super.getConfig(), stateStore,\n-              dirsHandler);\n-          LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n-              tracker);\n-          if (oldTracker !\u003d null) {\n-            tracker \u003d oldTracker;\n-          }\n-          recoverTrackerResources(tracker, trackerState);\n+        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n+            null, dispatcher, true, super.getConfig(), stateStore,\n+            dirsHandler);\n+        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n+            tracker);\n+        if (oldTracker !\u003d null) {\n+          tracker \u003d oldTracker;\n         }\n+        recoverTrackerResources(tracker, trackerState);\n \n         for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n             userResources.getAppTrackerStates().entrySet()) {\n           trackerState \u003d appEntry.getValue();\n-          if (!trackerState.isEmpty()) {\n-            ApplicationId appId \u003d appEntry.getKey();\n-            String appIdStr \u003d appId.toString();\n-            LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-                appId, dispatcher, false, super.getConfig(), stateStore,\n-                dirsHandler);\n-            LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n-                tracker);\n-            if (oldTracker !\u003d null) {\n-              tracker \u003d oldTracker;\n-            }\n-            recoverTrackerResources(tracker, trackerState);\n+          ApplicationId appId \u003d appEntry.getKey();\n+          String appIdStr \u003d appId.toString();\n+          LocalResourcesTracker tracker1 \u003d new LocalResourcesTrackerImpl(user,\n+              appId, dispatcher, false, super.getConfig(), stateStore,\n+              dirsHandler);\n+          LocalResourcesTracker oldTracker1 \u003d appRsrc.putIfAbsent(appIdStr,\n+              tracker1);\n+          if (oldTracker1 !\u003d null) {\n+            tracker1 \u003d oldTracker1;\n           }\n+          recoverTrackerResources(tracker1, trackerState);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverLocalizedResources(RecoveredLocalizationState state)\n      throws URISyntaxException, IOException {\n    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n    recoverTrackerResources(publicRsrc, trackerState);\n\n    try (RecoveryIterator\u003cMap.Entry\u003cString, RecoveredUserResources\u003e\u003e it\n             \u003d state.getIterator()) {\n      while (it.hasNext()) {\n        Map.Entry\u003cString, RecoveredUserResources\u003e userEntry \u003d it.next();\n        String user \u003d userEntry.getKey();\n        RecoveredUserResources userResources \u003d userEntry.getValue();\n        trackerState \u003d userResources.getPrivateTrackerState();\n        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n            null, dispatcher, true, super.getConfig(), stateStore,\n            dirsHandler);\n        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n            tracker);\n        if (oldTracker !\u003d null) {\n          tracker \u003d oldTracker;\n        }\n        recoverTrackerResources(tracker, trackerState);\n\n        for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n            userResources.getAppTrackerStates().entrySet()) {\n          trackerState \u003d appEntry.getValue();\n          ApplicationId appId \u003d appEntry.getKey();\n          String appIdStr \u003d appId.toString();\n          LocalResourcesTracker tracker1 \u003d new LocalResourcesTrackerImpl(user,\n              appId, dispatcher, false, super.getConfig(), stateStore,\n              dirsHandler);\n          LocalResourcesTracker oldTracker1 \u003d appRsrc.putIfAbsent(appIdStr,\n              tracker1);\n          if (oldTracker1 !\u003d null) {\n            tracker1 \u003d oldTracker1;\n          }\n          recoverTrackerResources(tracker1, trackerState);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
          "commitDate": "20/08/18 8:14 AM",
          "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "01/08/18 8:51 AM",
          "commitNameOld": "67c65da261464a0dccb63dc27668109a52e05714",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 18.97,
          "commitsBetweenForRepo": 183,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,44 @@\n   public void recoverLocalizedResources(RecoveredLocalizationState state)\n-      throws URISyntaxException {\n+      throws URISyntaxException, IOException {\n     LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n     recoverTrackerResources(publicRsrc, trackerState);\n \n-    for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n-         state.getUserResources().entrySet()) {\n-      String user \u003d userEntry.getKey();\n-      RecoveredUserResources userResources \u003d userEntry.getValue();\n-      trackerState \u003d userResources.getPrivateTrackerState();\n-      if (!trackerState.isEmpty()) {\n-        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-            null, dispatcher, true, super.getConfig(), stateStore, dirsHandler);\n-        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n-            tracker);\n-        if (oldTracker !\u003d null) {\n-          tracker \u003d oldTracker;\n-        }\n-        recoverTrackerResources(tracker, trackerState);\n-      }\n-\n-      for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n-           userResources.getAppTrackerStates().entrySet()) {\n-        trackerState \u003d appEntry.getValue();\n+    try (RecoveryIterator\u003cMap.Entry\u003cString, RecoveredUserResources\u003e\u003e it\n+             \u003d state.getIterator()) {\n+      while (it.hasNext()) {\n+        Map.Entry\u003cString, RecoveredUserResources\u003e userEntry \u003d it.next();\n+        String user \u003d userEntry.getKey();\n+        RecoveredUserResources userResources \u003d userEntry.getValue();\n+        trackerState \u003d userResources.getPrivateTrackerState();\n         if (!trackerState.isEmpty()) {\n-          ApplicationId appId \u003d appEntry.getKey();\n-          String appIdStr \u003d appId.toString();\n           LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-              appId, dispatcher, false, super.getConfig(), stateStore,\n+              null, dispatcher, true, super.getConfig(), stateStore,\n               dirsHandler);\n-          LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n+          LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n               tracker);\n           if (oldTracker !\u003d null) {\n             tracker \u003d oldTracker;\n           }\n           recoverTrackerResources(tracker, trackerState);\n         }\n+\n+        for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n+            userResources.getAppTrackerStates().entrySet()) {\n+          trackerState \u003d appEntry.getValue();\n+          if (!trackerState.isEmpty()) {\n+            ApplicationId appId \u003d appEntry.getKey();\n+            String appIdStr \u003d appId.toString();\n+            LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n+                appId, dispatcher, false, super.getConfig(), stateStore,\n+                dirsHandler);\n+            LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n+                tracker);\n+            if (oldTracker !\u003d null) {\n+              tracker \u003d oldTracker;\n+            }\n+            recoverTrackerResources(tracker, trackerState);\n+          }\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverLocalizedResources(RecoveredLocalizationState state)\n      throws URISyntaxException, IOException {\n    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n    recoverTrackerResources(publicRsrc, trackerState);\n\n    try (RecoveryIterator\u003cMap.Entry\u003cString, RecoveredUserResources\u003e\u003e it\n             \u003d state.getIterator()) {\n      while (it.hasNext()) {\n        Map.Entry\u003cString, RecoveredUserResources\u003e userEntry \u003d it.next();\n        String user \u003d userEntry.getKey();\n        RecoveredUserResources userResources \u003d userEntry.getValue();\n        trackerState \u003d userResources.getPrivateTrackerState();\n        if (!trackerState.isEmpty()) {\n          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n              null, dispatcher, true, super.getConfig(), stateStore,\n              dirsHandler);\n          LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n              tracker);\n          if (oldTracker !\u003d null) {\n            tracker \u003d oldTracker;\n          }\n          recoverTrackerResources(tracker, trackerState);\n        }\n\n        for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n            userResources.getAppTrackerStates().entrySet()) {\n          trackerState \u003d appEntry.getValue();\n          if (!trackerState.isEmpty()) {\n            ApplicationId appId \u003d appEntry.getKey();\n            String appIdStr \u003d appId.toString();\n            LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n                appId, dispatcher, false, super.getConfig(), stateStore,\n                dirsHandler);\n            LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n                tracker);\n            if (oldTracker !\u003d null) {\n              tracker \u003d oldTracker;\n            }\n            recoverTrackerResources(tracker, trackerState);\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {
            "oldValue": "[URISyntaxException]",
            "newValue": "[URISyntaxException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
          "commitDate": "20/08/18 8:14 AM",
          "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "01/08/18 8:51 AM",
          "commitNameOld": "67c65da261464a0dccb63dc27668109a52e05714",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 18.97,
          "commitsBetweenForRepo": 183,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,44 @@\n   public void recoverLocalizedResources(RecoveredLocalizationState state)\n-      throws URISyntaxException {\n+      throws URISyntaxException, IOException {\n     LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n     recoverTrackerResources(publicRsrc, trackerState);\n \n-    for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n-         state.getUserResources().entrySet()) {\n-      String user \u003d userEntry.getKey();\n-      RecoveredUserResources userResources \u003d userEntry.getValue();\n-      trackerState \u003d userResources.getPrivateTrackerState();\n-      if (!trackerState.isEmpty()) {\n-        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-            null, dispatcher, true, super.getConfig(), stateStore, dirsHandler);\n-        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n-            tracker);\n-        if (oldTracker !\u003d null) {\n-          tracker \u003d oldTracker;\n-        }\n-        recoverTrackerResources(tracker, trackerState);\n-      }\n-\n-      for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n-           userResources.getAppTrackerStates().entrySet()) {\n-        trackerState \u003d appEntry.getValue();\n+    try (RecoveryIterator\u003cMap.Entry\u003cString, RecoveredUserResources\u003e\u003e it\n+             \u003d state.getIterator()) {\n+      while (it.hasNext()) {\n+        Map.Entry\u003cString, RecoveredUserResources\u003e userEntry \u003d it.next();\n+        String user \u003d userEntry.getKey();\n+        RecoveredUserResources userResources \u003d userEntry.getValue();\n+        trackerState \u003d userResources.getPrivateTrackerState();\n         if (!trackerState.isEmpty()) {\n-          ApplicationId appId \u003d appEntry.getKey();\n-          String appIdStr \u003d appId.toString();\n           LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-              appId, dispatcher, false, super.getConfig(), stateStore,\n+              null, dispatcher, true, super.getConfig(), stateStore,\n               dirsHandler);\n-          LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n+          LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n               tracker);\n           if (oldTracker !\u003d null) {\n             tracker \u003d oldTracker;\n           }\n           recoverTrackerResources(tracker, trackerState);\n         }\n+\n+        for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n+            userResources.getAppTrackerStates().entrySet()) {\n+          trackerState \u003d appEntry.getValue();\n+          if (!trackerState.isEmpty()) {\n+            ApplicationId appId \u003d appEntry.getKey();\n+            String appIdStr \u003d appId.toString();\n+            LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n+                appId, dispatcher, false, super.getConfig(), stateStore,\n+                dirsHandler);\n+            LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n+                tracker);\n+            if (oldTracker !\u003d null) {\n+              tracker \u003d oldTracker;\n+            }\n+            recoverTrackerResources(tracker, trackerState);\n+          }\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverLocalizedResources(RecoveredLocalizationState state)\n      throws URISyntaxException, IOException {\n    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n    recoverTrackerResources(publicRsrc, trackerState);\n\n    try (RecoveryIterator\u003cMap.Entry\u003cString, RecoveredUserResources\u003e\u003e it\n             \u003d state.getIterator()) {\n      while (it.hasNext()) {\n        Map.Entry\u003cString, RecoveredUserResources\u003e userEntry \u003d it.next();\n        String user \u003d userEntry.getKey();\n        RecoveredUserResources userResources \u003d userEntry.getValue();\n        trackerState \u003d userResources.getPrivateTrackerState();\n        if (!trackerState.isEmpty()) {\n          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n              null, dispatcher, true, super.getConfig(), stateStore,\n              dirsHandler);\n          LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n              tracker);\n          if (oldTracker !\u003d null) {\n            tracker \u003d oldTracker;\n          }\n          recoverTrackerResources(tracker, trackerState);\n        }\n\n        for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n            userResources.getAppTrackerStates().entrySet()) {\n          trackerState \u003d appEntry.getValue();\n          if (!trackerState.isEmpty()) {\n            ApplicationId appId \u003d appEntry.getKey();\n            String appIdStr \u003d appId.toString();\n            LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n                appId, dispatcher, false, super.getConfig(), stateStore,\n                dirsHandler);\n            LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n                tracker);\n            if (oldTracker !\u003d null) {\n              tracker \u003d oldTracker;\n            }\n            recoverTrackerResources(tracker, trackerState);\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "aea42930bbb9566ea6988f684dbd72a72a2bdadf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6641. Non-public resource localization on a bad disk causes subsequent containers failure. Contributed by Kuhu Shukla\n",
      "commitDate": "26/05/17 7:37 AM",
      "commitName": "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/04/17 2:56 PM",
      "commitNameOld": "e9ac61cc0e55d1a0b132c795047e959c761dc3be",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 45.7,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public void recoverLocalizedResources(RecoveredLocalizationState state)\n       throws URISyntaxException {\n     LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n     recoverTrackerResources(publicRsrc, trackerState);\n \n     for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n          state.getUserResources().entrySet()) {\n       String user \u003d userEntry.getKey();\n       RecoveredUserResources userResources \u003d userEntry.getValue();\n       trackerState \u003d userResources.getPrivateTrackerState();\n       if (!trackerState.isEmpty()) {\n         LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-            null, dispatcher, true, super.getConfig(), stateStore);\n+            null, dispatcher, true, super.getConfig(), stateStore, dirsHandler);\n         LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n             tracker);\n         if (oldTracker !\u003d null) {\n           tracker \u003d oldTracker;\n         }\n         recoverTrackerResources(tracker, trackerState);\n       }\n \n       for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n            userResources.getAppTrackerStates().entrySet()) {\n         trackerState \u003d appEntry.getValue();\n         if (!trackerState.isEmpty()) {\n           ApplicationId appId \u003d appEntry.getKey();\n           String appIdStr \u003d appId.toString();\n           LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n-              appId, dispatcher, false, super.getConfig(), stateStore);\n+              appId, dispatcher, false, super.getConfig(), stateStore,\n+              dirsHandler);\n           LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n               tracker);\n           if (oldTracker !\u003d null) {\n             tracker \u003d oldTracker;\n           }\n           recoverTrackerResources(tracker, trackerState);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverLocalizedResources(RecoveredLocalizationState state)\n      throws URISyntaxException {\n    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n    recoverTrackerResources(publicRsrc, trackerState);\n\n    for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n         state.getUserResources().entrySet()) {\n      String user \u003d userEntry.getKey();\n      RecoveredUserResources userResources \u003d userEntry.getValue();\n      trackerState \u003d userResources.getPrivateTrackerState();\n      if (!trackerState.isEmpty()) {\n        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n            null, dispatcher, true, super.getConfig(), stateStore, dirsHandler);\n        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n            tracker);\n        if (oldTracker !\u003d null) {\n          tracker \u003d oldTracker;\n        }\n        recoverTrackerResources(tracker, trackerState);\n      }\n\n      for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n           userResources.getAppTrackerStates().entrySet()) {\n        trackerState \u003d appEntry.getValue();\n        if (!trackerState.isEmpty()) {\n          ApplicationId appId \u003d appEntry.getKey();\n          String appIdStr \u003d appId.toString();\n          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n              appId, dispatcher, false, super.getConfig(), stateStore,\n              dirsHandler);\n          LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n              tracker);\n          if (oldTracker !\u003d null) {\n            tracker \u003d oldTracker;\n          }\n          recoverTrackerResources(tracker, trackerState);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/02/16 10:36 PM",
      "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 124.65,
      "commitsBetweenForRepo": 784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void recoverLocalizedResources(RecoveredLocalizationState state)\n       throws URISyntaxException {\n     LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n     recoverTrackerResources(publicRsrc, trackerState);\n \n     for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n          state.getUserResources().entrySet()) {\n       String user \u003d userEntry.getKey();\n       RecoveredUserResources userResources \u003d userEntry.getValue();\n       trackerState \u003d userResources.getPrivateTrackerState();\n       if (!trackerState.isEmpty()) {\n         LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n             null, dispatcher, true, super.getConfig(), stateStore);\n         LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n             tracker);\n         if (oldTracker !\u003d null) {\n           tracker \u003d oldTracker;\n         }\n         recoverTrackerResources(tracker, trackerState);\n       }\n \n       for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n            userResources.getAppTrackerStates().entrySet()) {\n         trackerState \u003d appEntry.getValue();\n         if (!trackerState.isEmpty()) {\n           ApplicationId appId \u003d appEntry.getKey();\n-          String appIdStr \u003d ConverterUtils.toString(appId);\n+          String appIdStr \u003d appId.toString();\n           LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n               appId, dispatcher, false, super.getConfig(), stateStore);\n           LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n               tracker);\n           if (oldTracker !\u003d null) {\n             tracker \u003d oldTracker;\n           }\n           recoverTrackerResources(tracker, trackerState);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverLocalizedResources(RecoveredLocalizationState state)\n      throws URISyntaxException {\n    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n    recoverTrackerResources(publicRsrc, trackerState);\n\n    for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n         state.getUserResources().entrySet()) {\n      String user \u003d userEntry.getKey();\n      RecoveredUserResources userResources \u003d userEntry.getValue();\n      trackerState \u003d userResources.getPrivateTrackerState();\n      if (!trackerState.isEmpty()) {\n        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n            null, dispatcher, true, super.getConfig(), stateStore);\n        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n            tracker);\n        if (oldTracker !\u003d null) {\n          tracker \u003d oldTracker;\n        }\n        recoverTrackerResources(tracker, trackerState);\n      }\n\n      for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n           userResources.getAppTrackerStates().entrySet()) {\n        trackerState \u003d appEntry.getValue();\n        if (!trackerState.isEmpty()) {\n          ApplicationId appId \u003d appEntry.getKey();\n          String appIdStr \u003d appId.toString();\n          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n              appId, dispatcher, false, super.getConfig(), stateStore);\n          LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n              tracker);\n          if (oldTracker !\u003d null) {\n            tracker \u003d oldTracker;\n          }\n          recoverTrackerResources(tracker, trackerState);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,39 @@\n+  public void recoverLocalizedResources(RecoveredLocalizationState state)\n+      throws URISyntaxException {\n+    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n+    recoverTrackerResources(publicRsrc, trackerState);\n+\n+    for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n+         state.getUserResources().entrySet()) {\n+      String user \u003d userEntry.getKey();\n+      RecoveredUserResources userResources \u003d userEntry.getValue();\n+      trackerState \u003d userResources.getPrivateTrackerState();\n+      if (!trackerState.isEmpty()) {\n+        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n+            null, dispatcher, true, super.getConfig(), stateStore);\n+        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n+            tracker);\n+        if (oldTracker !\u003d null) {\n+          tracker \u003d oldTracker;\n+        }\n+        recoverTrackerResources(tracker, trackerState);\n+      }\n+\n+      for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n+           userResources.getAppTrackerStates().entrySet()) {\n+        trackerState \u003d appEntry.getValue();\n+        if (!trackerState.isEmpty()) {\n+          ApplicationId appId \u003d appEntry.getKey();\n+          String appIdStr \u003d ConverterUtils.toString(appId);\n+          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n+              appId, dispatcher, false, super.getConfig(), stateStore);\n+          LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n+              tracker);\n+          if (oldTracker !\u003d null) {\n+            tracker \u003d oldTracker;\n+          }\n+          recoverTrackerResources(tracker, trackerState);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverLocalizedResources(RecoveredLocalizationState state)\n      throws URISyntaxException {\n    LocalResourceTrackerState trackerState \u003d state.getPublicTrackerState();\n    recoverTrackerResources(publicRsrc, trackerState);\n\n    for (Map.Entry\u003cString, RecoveredUserResources\u003e userEntry :\n         state.getUserResources().entrySet()) {\n      String user \u003d userEntry.getKey();\n      RecoveredUserResources userResources \u003d userEntry.getValue();\n      trackerState \u003d userResources.getPrivateTrackerState();\n      if (!trackerState.isEmpty()) {\n        LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n            null, dispatcher, true, super.getConfig(), stateStore);\n        LocalResourcesTracker oldTracker \u003d privateRsrc.putIfAbsent(user,\n            tracker);\n        if (oldTracker !\u003d null) {\n          tracker \u003d oldTracker;\n        }\n        recoverTrackerResources(tracker, trackerState);\n      }\n\n      for (Map.Entry\u003cApplicationId, LocalResourceTrackerState\u003e appEntry :\n           userResources.getAppTrackerStates().entrySet()) {\n        trackerState \u003d appEntry.getValue();\n        if (!trackerState.isEmpty()) {\n          ApplicationId appId \u003d appEntry.getKey();\n          String appIdStr \u003d ConverterUtils.toString(appId);\n          LocalResourcesTracker tracker \u003d new LocalResourcesTrackerImpl(user,\n              appId, dispatcher, false, super.getConfig(), stateStore);\n          LocalResourcesTracker oldTracker \u003d appRsrc.putIfAbsent(appIdStr,\n              tracker);\n          if (oldTracker !\u003d null) {\n            tracker \u003d oldTracker;\n          }\n          recoverTrackerResources(tracker, trackerState);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}