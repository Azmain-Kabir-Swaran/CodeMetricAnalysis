{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Component.java",
  "functionName": "updateMetrics",
  "functionId": "updateMetrics___status-ContainerStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
  "functionStartLine": 913,
  "functionEndLine": 946,
  "numCommitsSeen": 36,
  "timeTaken": 3641,
  "changeHistory": [
    "40fad32824d2f8f960c779d78357e62103453da0",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "40fad32824d2f8f960c779d78357e62103453da0": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40fad32824d2f8f960c779d78357e62103453da0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8545.  Return allocated resource to RM for failed container.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/07/18 3:22 PM",
      "commitName": "40fad32824d2f8f960c779d78357e62103453da0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/05/18 1:19 PM",
      "commitNameOld": "778a4a24be176382a5704f709c00bdfcfe6ddc8c",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 57.09,
      "commitsBetweenForRepo": 380,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,34 @@\n   private void updateMetrics(ContainerStatus status) {\n-    switch (status.getExitStatus()) {\n-    case SUCCESS:\n-      componentMetrics.containersSucceeded.incr();\n-      scheduler.getServiceMetrics().containersSucceeded.incr();\n-      return;\n-    case PREEMPTED:\n-      componentMetrics.containersPreempted.incr();\n-      scheduler.getServiceMetrics().containersPreempted.incr();\n-      break;\n-    case DISKS_FAILED:\n-      componentMetrics.containersDiskFailure.incr();\n-      scheduler.getServiceMetrics().containersDiskFailure.incr();\n-      break;\n-    default:\n-      break;\n+    //when a container preparation fails while building launch context, then\n+    //the container status may not exist.\n+    if (status !\u003d null) {\n+      switch (status.getExitStatus()) {\n+        case SUCCESS:\n+          componentMetrics.containersSucceeded.incr();\n+          scheduler.getServiceMetrics().containersSucceeded.incr();\n+          return;\n+        case PREEMPTED:\n+          componentMetrics.containersPreempted.incr();\n+          scheduler.getServiceMetrics().containersPreempted.incr();\n+          break;\n+        case DISKS_FAILED:\n+          componentMetrics.containersDiskFailure.incr();\n+          scheduler.getServiceMetrics().containersDiskFailure.incr();\n+          break;\n+        default:\n+          break;\n+      }\n     }\n \n     // containersFailed include preempted, disks_failed etc.\n     componentMetrics.containersFailed.incr();\n     scheduler.getServiceMetrics().containersFailed.incr();\n \n-    if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n+    if (status !\u003d null \u0026\u0026 Apps.shouldCountTowardsNodeBlacklisting(\n+        status.getExitStatus())) {\n       String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n           .getNodeId().getHost();\n       failureTracker.incNodeFailure(host);\n       currentContainerFailure.getAndIncrement();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateMetrics(ContainerStatus status) {\n    //when a container preparation fails while building launch context, then\n    //the container status may not exist.\n    if (status !\u003d null) {\n      switch (status.getExitStatus()) {\n        case SUCCESS:\n          componentMetrics.containersSucceeded.incr();\n          scheduler.getServiceMetrics().containersSucceeded.incr();\n          return;\n        case PREEMPTED:\n          componentMetrics.containersPreempted.incr();\n          scheduler.getServiceMetrics().containersPreempted.incr();\n          break;\n        case DISKS_FAILED:\n          componentMetrics.containersDiskFailure.incr();\n          scheduler.getServiceMetrics().containersDiskFailure.incr();\n          break;\n        default:\n          break;\n      }\n    }\n\n    // containersFailed include preempted, disks_failed etc.\n    componentMetrics.containersFailed.incr();\n    scheduler.getServiceMetrics().containersFailed.incr();\n\n    if (status !\u003d null \u0026\u0026 Apps.shouldCountTowardsNodeBlacklisting(\n        status.getExitStatus())) {\n      String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n          .getNodeId().getHost();\n      failureTracker.incNodeFailure(host);\n      currentContainerFailure.getAndIncrement();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,29 @@\n   private void updateMetrics(ContainerStatus status) {\n     switch (status.getExitStatus()) {\n     case SUCCESS:\n       componentMetrics.containersSucceeded.incr();\n       scheduler.getServiceMetrics().containersSucceeded.incr();\n       return;\n     case PREEMPTED:\n       componentMetrics.containersPreempted.incr();\n       scheduler.getServiceMetrics().containersPreempted.incr();\n       break;\n     case DISKS_FAILED:\n       componentMetrics.containersDiskFailure.incr();\n       scheduler.getServiceMetrics().containersDiskFailure.incr();\n       break;\n     default:\n       break;\n     }\n \n     // containersFailed include preempted, disks_failed etc.\n     componentMetrics.containersFailed.incr();\n     scheduler.getServiceMetrics().containersFailed.incr();\n \n-    // dec running container\n-    decRunningContainers();\n-\n     if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n       String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n           .getNodeId().getHost();\n       failureTracker.incNodeFailure(host);\n       currentContainerFailure.getAndIncrement() ;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateMetrics(ContainerStatus status) {\n    switch (status.getExitStatus()) {\n    case SUCCESS:\n      componentMetrics.containersSucceeded.incr();\n      scheduler.getServiceMetrics().containersSucceeded.incr();\n      return;\n    case PREEMPTED:\n      componentMetrics.containersPreempted.incr();\n      scheduler.getServiceMetrics().containersPreempted.incr();\n      break;\n    case DISKS_FAILED:\n      componentMetrics.containersDiskFailure.incr();\n      scheduler.getServiceMetrics().containersDiskFailure.incr();\n      break;\n    default:\n      break;\n    }\n\n    // containersFailed include preempted, disks_failed etc.\n    componentMetrics.containersFailed.incr();\n    scheduler.getServiceMetrics().containersFailed.incr();\n\n    if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n      String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n          .getNodeId().getHost();\n      failureTracker.incNodeFailure(host);\n      currentContainerFailure.getAndIncrement() ;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n   private void updateMetrics(ContainerStatus status) {\n     switch (status.getExitStatus()) {\n     case SUCCESS:\n       componentMetrics.containersSucceeded.incr();\n       scheduler.getServiceMetrics().containersSucceeded.incr();\n       return;\n     case PREEMPTED:\n       componentMetrics.containersPreempted.incr();\n       scheduler.getServiceMetrics().containersPreempted.incr();\n       break;\n     case DISKS_FAILED:\n       componentMetrics.containersDiskFailure.incr();\n       scheduler.getServiceMetrics().containersDiskFailure.incr();\n       break;\n     default:\n       break;\n     }\n \n     // containersFailed include preempted, disks_failed etc.\n     componentMetrics.containersFailed.incr();\n     scheduler.getServiceMetrics().containersFailed.incr();\n \n     // dec running container\n     decRunningContainers();\n \n     if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n       String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n           .getNodeId().getHost();\n       failureTracker.incNodeFailure(host);\n-      currentContainerFailure++ ;\n+      currentContainerFailure.getAndIncrement() ;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateMetrics(ContainerStatus status) {\n    switch (status.getExitStatus()) {\n    case SUCCESS:\n      componentMetrics.containersSucceeded.incr();\n      scheduler.getServiceMetrics().containersSucceeded.incr();\n      return;\n    case PREEMPTED:\n      componentMetrics.containersPreempted.incr();\n      scheduler.getServiceMetrics().containersPreempted.incr();\n      break;\n    case DISKS_FAILED:\n      componentMetrics.containersDiskFailure.incr();\n      scheduler.getServiceMetrics().containersDiskFailure.incr();\n      break;\n    default:\n      break;\n    }\n\n    // containersFailed include preempted, disks_failed etc.\n    componentMetrics.containersFailed.incr();\n    scheduler.getServiceMetrics().containersFailed.incr();\n\n    // dec running container\n    decRunningContainers();\n\n    if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n      String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n          .getNodeId().getHost();\n      failureTracker.incNodeFailure(host);\n      currentContainerFailure.getAndIncrement() ;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n   private void updateMetrics(ContainerStatus status) {\n     switch (status.getExitStatus()) {\n     case SUCCESS:\n       componentMetrics.containersSucceeded.incr();\n       scheduler.getServiceMetrics().containersSucceeded.incr();\n       return;\n     case PREEMPTED:\n       componentMetrics.containersPreempted.incr();\n       scheduler.getServiceMetrics().containersPreempted.incr();\n       break;\n     case DISKS_FAILED:\n       componentMetrics.containersDiskFailure.incr();\n       scheduler.getServiceMetrics().containersDiskFailure.incr();\n       break;\n     default:\n       break;\n     }\n \n     // containersFailed include preempted, disks_failed etc.\n     componentMetrics.containersFailed.incr();\n     scheduler.getServiceMetrics().containersFailed.incr();\n \n     // dec running container\n     decRunningContainers();\n \n     if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n       String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n           .getNodeId().getHost();\n       failureTracker.incNodeFailure(host);\n-      currentContainerFailure++ ;\n+      currentContainerFailure.getAndIncrement() ;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateMetrics(ContainerStatus status) {\n    switch (status.getExitStatus()) {\n    case SUCCESS:\n      componentMetrics.containersSucceeded.incr();\n      scheduler.getServiceMetrics().containersSucceeded.incr();\n      return;\n    case PREEMPTED:\n      componentMetrics.containersPreempted.incr();\n      scheduler.getServiceMetrics().containersPreempted.incr();\n      break;\n    case DISKS_FAILED:\n      componentMetrics.containersDiskFailure.incr();\n      scheduler.getServiceMetrics().containersDiskFailure.incr();\n      break;\n    default:\n      break;\n    }\n\n    // containersFailed include preempted, disks_failed etc.\n    componentMetrics.containersFailed.incr();\n    scheduler.getServiceMetrics().containersFailed.incr();\n\n    // dec running container\n    decRunningContainers();\n\n    if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n      String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n          .getNodeId().getHost();\n      failureTracker.incNodeFailure(host);\n      currentContainerFailure.getAndIncrement() ;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
          "extendedDetails": {}
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,32 @@\n+  private void updateMetrics(ContainerStatus status) {\n+    switch (status.getExitStatus()) {\n+    case SUCCESS:\n+      componentMetrics.containersSucceeded.incr();\n+      scheduler.getServiceMetrics().containersSucceeded.incr();\n+      return;\n+    case PREEMPTED:\n+      componentMetrics.containersPreempted.incr();\n+      scheduler.getServiceMetrics().containersPreempted.incr();\n+      break;\n+    case DISKS_FAILED:\n+      componentMetrics.containersDiskFailure.incr();\n+      scheduler.getServiceMetrics().containersDiskFailure.incr();\n+      break;\n+    default:\n+      break;\n+    }\n+\n+    // containersFailed include preempted, disks_failed etc.\n+    componentMetrics.containersFailed.incr();\n+    scheduler.getServiceMetrics().containersFailed.incr();\n+\n+    // dec running container\n+    decRunningContainers();\n+\n+    if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n+      String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n+          .getNodeId().getHost();\n+      failureTracker.incNodeFailure(host);\n+      currentContainerFailure++ ;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateMetrics(ContainerStatus status) {\n    switch (status.getExitStatus()) {\n    case SUCCESS:\n      componentMetrics.containersSucceeded.incr();\n      scheduler.getServiceMetrics().containersSucceeded.incr();\n      return;\n    case PREEMPTED:\n      componentMetrics.containersPreempted.incr();\n      scheduler.getServiceMetrics().containersPreempted.incr();\n      break;\n    case DISKS_FAILED:\n      componentMetrics.containersDiskFailure.incr();\n      scheduler.getServiceMetrics().containersDiskFailure.incr();\n      break;\n    default:\n      break;\n    }\n\n    // containersFailed include preempted, disks_failed etc.\n    componentMetrics.containersFailed.incr();\n    scheduler.getServiceMetrics().containersFailed.incr();\n\n    // dec running container\n    decRunningContainers();\n\n    if (Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\n      String host \u003d scheduler.getLiveInstances().get(status.getContainerId())\n          .getNodeId().getHost();\n      failureTracker.incNodeFailure(host);\n      currentContainerFailure++ ;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
    }
  }
}