{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopArchiveLogs.java",
  "functionName": "handleOpts",
  "functionId": "handleOpts___args-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
  "functionStartLine": 216,
  "functionEndLine": 300,
  "numCommitsSeen": 11,
  "timeTaken": 1421,
  "changeHistory": [
    "6d84cc16b3e0685fef01d0e3526b0f7556ceff51",
    "0c4af0f99811a7138954391df3761aef9ff09155",
    "5db371f52f5c6e894a7e6a5d523084f4b316a7ab",
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
    "119cc75e7ebd723790f6326498383304aba384a2"
  ],
  "changeHistoryShort": {
    "6d84cc16b3e0685fef01d0e3526b0f7556ceff51": "Ybodychange",
    "0c4af0f99811a7138954391df3761aef9ff09155": "Ybodychange",
    "5db371f52f5c6e894a7e6a5d523084f4b316a7ab": "Ybodychange",
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": "Ybodychange",
    "119cc75e7ebd723790f6326498383304aba384a2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d84cc16b3e0685fef01d0e3526b0f7556ceff51": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6550. archive-logs tool changes log ownership to the Yarn user when using DefaultContainerExecutor (rkanter)\n",
      "commitDate": "25/11/15 5:12 PM",
      "commitName": "6d84cc16b3e0685fef01d0e3526b0f7556ceff51",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "20/10/15 5:34 PM",
      "commitNameOld": "0c4af0f99811a7138954391df3761aef9ff09155",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 36.03,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,85 @@\n   private void handleOpts(String[] args) throws ParseException {\n     Options opts \u003d new Options();\n     Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n     Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n         \"The maximum number of eligible apps to process (default: \"\n             + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n     maxEligibleOpt.setArgName(\"n\");\n     Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n         \"The minimum number of log files required to be eligible (default: \"\n             + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n     minNumLogFilesOpt.setArgName(\"n\");\n     Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n         \"The maximum total logs size (in megabytes) required to be eligible\" +\n             \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n     maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n     Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n         \"The amount of memory (in megabytes) for each container (default: \"\n             + DEFAULT_MEMORY + \")\");\n     memoryOpt.setArgName(\"megabytes\");\n     Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n         \"Print more details.\");\n     Option forceOpt \u003d new Option(FORCE_OPTION, false,\n         \"Force recreating the working directory if an existing one is found. \" +\n             \"This should only be used if you know that another instance is \" +\n             \"not currently running\");\n+    Option noProxyOpt \u003d new Option(NO_PROXY_OPTION, false,\n+        \"When specified, all processing will be done as the user running this\" +\n+            \" command (or the Yarn user if DefaultContainerExecutor is in \" +\n+            \"use). When not specified, all processing will be done as the \" +\n+            \"user who owns that application; if the user running this command\" +\n+            \" is not allowed to impersonate that user, it will fail\");\n     opts.addOption(helpOpt);\n     opts.addOption(maxEligibleOpt);\n     opts.addOption(minNumLogFilesOpt);\n     opts.addOption(maxTotalLogsSizeOpt);\n     opts.addOption(memoryOpt);\n     opts.addOption(verboseOpt);\n     opts.addOption(forceOpt);\n+    opts.addOption(noProxyOpt);\n \n     try {\n       CommandLineParser parser \u003d new GnuParser();\n       CommandLine commandLine \u003d parser.parse(opts, args);\n       if (commandLine.hasOption(HELP_OPTION)) {\n         HelpFormatter formatter \u003d new HelpFormatter();\n         formatter.printHelp(\"mapred archive-logs\", opts);\n         System.exit(0);\n       }\n       if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n         maxEligible \u003d Integer.parseInt(\n             commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n         if (maxEligible \u003d\u003d 0) {\n           LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n               + \"nothing. Please either set it to a negative value \"\n               + \"(default, all) or a more reasonable value.\");\n           System.exit(0);\n         }\n       }\n       if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n         minNumLogFiles \u003d Integer.parseInt(\n             commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n       }\n       if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n         maxTotalLogsSize \u003d Long.parseLong(\n             commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n         maxTotalLogsSize *\u003d 1024L * 1024L;\n       }\n       if (commandLine.hasOption(MEMORY_OPTION)) {\n         memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n       }\n       if (commandLine.hasOption(VERBOSE_OPTION)) {\n         verbose \u003d true;\n       }\n       if (commandLine.hasOption(FORCE_OPTION)) {\n         force \u003d true;\n       }\n+      if (commandLine.hasOption(NO_PROXY_OPTION)) {\n+        proxy \u003d false;\n+      }\n     } catch (ParseException pe) {\n       HelpFormatter formatter \u003d new HelpFormatter();\n       formatter.printHelp(\"mapred archive-logs\", opts);\n       throw pe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleOpts(String[] args) throws ParseException {\n    Options opts \u003d new Options();\n    Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n    Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n        \"The maximum number of eligible apps to process (default: \"\n            + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n    maxEligibleOpt.setArgName(\"n\");\n    Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n        \"The minimum number of log files required to be eligible (default: \"\n            + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n    minNumLogFilesOpt.setArgName(\"n\");\n    Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n        \"The maximum total logs size (in megabytes) required to be eligible\" +\n            \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n    maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n    Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n        \"The amount of memory (in megabytes) for each container (default: \"\n            + DEFAULT_MEMORY + \")\");\n    memoryOpt.setArgName(\"megabytes\");\n    Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n        \"Print more details.\");\n    Option forceOpt \u003d new Option(FORCE_OPTION, false,\n        \"Force recreating the working directory if an existing one is found. \" +\n            \"This should only be used if you know that another instance is \" +\n            \"not currently running\");\n    Option noProxyOpt \u003d new Option(NO_PROXY_OPTION, false,\n        \"When specified, all processing will be done as the user running this\" +\n            \" command (or the Yarn user if DefaultContainerExecutor is in \" +\n            \"use). When not specified, all processing will be done as the \" +\n            \"user who owns that application; if the user running this command\" +\n            \" is not allowed to impersonate that user, it will fail\");\n    opts.addOption(helpOpt);\n    opts.addOption(maxEligibleOpt);\n    opts.addOption(minNumLogFilesOpt);\n    opts.addOption(maxTotalLogsSizeOpt);\n    opts.addOption(memoryOpt);\n    opts.addOption(verboseOpt);\n    opts.addOption(forceOpt);\n    opts.addOption(noProxyOpt);\n\n    try {\n      CommandLineParser parser \u003d new GnuParser();\n      CommandLine commandLine \u003d parser.parse(opts, args);\n      if (commandLine.hasOption(HELP_OPTION)) {\n        HelpFormatter formatter \u003d new HelpFormatter();\n        formatter.printHelp(\"mapred archive-logs\", opts);\n        System.exit(0);\n      }\n      if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n        maxEligible \u003d Integer.parseInt(\n            commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n        if (maxEligible \u003d\u003d 0) {\n          LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n              + \"nothing. Please either set it to a negative value \"\n              + \"(default, all) or a more reasonable value.\");\n          System.exit(0);\n        }\n      }\n      if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n        minNumLogFiles \u003d Integer.parseInt(\n            commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n      }\n      if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n        maxTotalLogsSize \u003d Long.parseLong(\n            commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n        maxTotalLogsSize *\u003d 1024L * 1024L;\n      }\n      if (commandLine.hasOption(MEMORY_OPTION)) {\n        memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n      }\n      if (commandLine.hasOption(VERBOSE_OPTION)) {\n        verbose \u003d true;\n      }\n      if (commandLine.hasOption(FORCE_OPTION)) {\n        force \u003d true;\n      }\n      if (commandLine.hasOption(NO_PROXY_OPTION)) {\n        proxy \u003d false;\n      }\n    } catch (ParseException pe) {\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(\"mapred archive-logs\", opts);\n      throw pe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "0c4af0f99811a7138954391df3761aef9ff09155": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6495. Docs for archive-logs tool (rkanter)\n",
      "commitDate": "20/10/15 5:34 PM",
      "commitName": "0c4af0f99811a7138954391df3761aef9ff09155",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "06/10/15 4:49 PM",
      "commitNameOld": "1bca1bb5175b5976a5a0e45b6e1c4486bdf87a0e",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n   private void handleOpts(String[] args) throws ParseException {\n     Options opts \u003d new Options();\n     Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n     Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n         \"The maximum number of eligible apps to process (default: \"\n             + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n     maxEligibleOpt.setArgName(\"n\");\n     Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n         \"The minimum number of log files required to be eligible (default: \"\n             + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n     minNumLogFilesOpt.setArgName(\"n\");\n     Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n         \"The maximum total logs size (in megabytes) required to be eligible\" +\n             \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n     maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n     Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n         \"The amount of memory (in megabytes) for each container (default: \"\n             + DEFAULT_MEMORY + \")\");\n     memoryOpt.setArgName(\"megabytes\");\n     Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n         \"Print more details.\");\n     Option forceOpt \u003d new Option(FORCE_OPTION, false,\n         \"Force recreating the working directory if an existing one is found. \" +\n             \"This should only be used if you know that another instance is \" +\n             \"not currently running\");\n     opts.addOption(helpOpt);\n     opts.addOption(maxEligibleOpt);\n     opts.addOption(minNumLogFilesOpt);\n     opts.addOption(maxTotalLogsSizeOpt);\n     opts.addOption(memoryOpt);\n     opts.addOption(verboseOpt);\n     opts.addOption(forceOpt);\n \n     try {\n       CommandLineParser parser \u003d new GnuParser();\n       CommandLine commandLine \u003d parser.parse(opts, args);\n       if (commandLine.hasOption(HELP_OPTION)) {\n         HelpFormatter formatter \u003d new HelpFormatter();\n-        formatter.printHelp(\"yarn archive-logs\", opts);\n+        formatter.printHelp(\"mapred archive-logs\", opts);\n         System.exit(0);\n       }\n       if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n         maxEligible \u003d Integer.parseInt(\n             commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n         if (maxEligible \u003d\u003d 0) {\n           LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n               + \"nothing. Please either set it to a negative value \"\n               + \"(default, all) or a more reasonable value.\");\n           System.exit(0);\n         }\n       }\n       if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n         minNumLogFiles \u003d Integer.parseInt(\n             commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n       }\n       if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n         maxTotalLogsSize \u003d Long.parseLong(\n             commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n         maxTotalLogsSize *\u003d 1024L * 1024L;\n       }\n       if (commandLine.hasOption(MEMORY_OPTION)) {\n         memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n       }\n       if (commandLine.hasOption(VERBOSE_OPTION)) {\n         verbose \u003d true;\n       }\n       if (commandLine.hasOption(FORCE_OPTION)) {\n         force \u003d true;\n       }\n     } catch (ParseException pe) {\n       HelpFormatter formatter \u003d new HelpFormatter();\n-      formatter.printHelp(\"yarn archive-logs\", opts);\n+      formatter.printHelp(\"mapred archive-logs\", opts);\n       throw pe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleOpts(String[] args) throws ParseException {\n    Options opts \u003d new Options();\n    Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n    Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n        \"The maximum number of eligible apps to process (default: \"\n            + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n    maxEligibleOpt.setArgName(\"n\");\n    Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n        \"The minimum number of log files required to be eligible (default: \"\n            + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n    minNumLogFilesOpt.setArgName(\"n\");\n    Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n        \"The maximum total logs size (in megabytes) required to be eligible\" +\n            \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n    maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n    Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n        \"The amount of memory (in megabytes) for each container (default: \"\n            + DEFAULT_MEMORY + \")\");\n    memoryOpt.setArgName(\"megabytes\");\n    Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n        \"Print more details.\");\n    Option forceOpt \u003d new Option(FORCE_OPTION, false,\n        \"Force recreating the working directory if an existing one is found. \" +\n            \"This should only be used if you know that another instance is \" +\n            \"not currently running\");\n    opts.addOption(helpOpt);\n    opts.addOption(maxEligibleOpt);\n    opts.addOption(minNumLogFilesOpt);\n    opts.addOption(maxTotalLogsSizeOpt);\n    opts.addOption(memoryOpt);\n    opts.addOption(verboseOpt);\n    opts.addOption(forceOpt);\n\n    try {\n      CommandLineParser parser \u003d new GnuParser();\n      CommandLine commandLine \u003d parser.parse(opts, args);\n      if (commandLine.hasOption(HELP_OPTION)) {\n        HelpFormatter formatter \u003d new HelpFormatter();\n        formatter.printHelp(\"mapred archive-logs\", opts);\n        System.exit(0);\n      }\n      if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n        maxEligible \u003d Integer.parseInt(\n            commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n        if (maxEligible \u003d\u003d 0) {\n          LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n              + \"nothing. Please either set it to a negative value \"\n              + \"(default, all) or a more reasonable value.\");\n          System.exit(0);\n        }\n      }\n      if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n        minNumLogFiles \u003d Integer.parseInt(\n            commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n      }\n      if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n        maxTotalLogsSize \u003d Long.parseLong(\n            commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n        maxTotalLogsSize *\u003d 1024L * 1024L;\n      }\n      if (commandLine.hasOption(MEMORY_OPTION)) {\n        memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n      }\n      if (commandLine.hasOption(VERBOSE_OPTION)) {\n        verbose \u003d true;\n      }\n      if (commandLine.hasOption(FORCE_OPTION)) {\n        force \u003d true;\n      }\n    } catch (ParseException pe) {\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(\"mapred archive-logs\", opts);\n      throw pe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "5db371f52f5c6e894a7e6a5d523084f4b316a7ab": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6494. Permission issue when running archive-logs tool as different users (rkanter)\n",
      "commitDate": "30/09/15 5:33 PM",
      "commitName": "5db371f52f5c6e894a7e6a5d523084f4b316a7ab",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "25/09/15 3:02 PM",
      "commitNameOld": "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,75 @@\n   private void handleOpts(String[] args) throws ParseException {\n     Options opts \u003d new Options();\n     Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n     Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n         \"The maximum number of eligible apps to process (default: \"\n             + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n     maxEligibleOpt.setArgName(\"n\");\n     Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n         \"The minimum number of log files required to be eligible (default: \"\n             + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n     minNumLogFilesOpt.setArgName(\"n\");\n     Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n         \"The maximum total logs size (in megabytes) required to be eligible\" +\n             \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n     maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n     Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n         \"The amount of memory (in megabytes) for each container (default: \"\n             + DEFAULT_MEMORY + \")\");\n     memoryOpt.setArgName(\"megabytes\");\n     Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n         \"Print more details.\");\n+    Option forceOpt \u003d new Option(FORCE_OPTION, false,\n+        \"Force recreating the working directory if an existing one is found. \" +\n+            \"This should only be used if you know that another instance is \" +\n+            \"not currently running\");\n     opts.addOption(helpOpt);\n     opts.addOption(maxEligibleOpt);\n     opts.addOption(minNumLogFilesOpt);\n     opts.addOption(maxTotalLogsSizeOpt);\n     opts.addOption(memoryOpt);\n     opts.addOption(verboseOpt);\n+    opts.addOption(forceOpt);\n \n     try {\n       CommandLineParser parser \u003d new GnuParser();\n       CommandLine commandLine \u003d parser.parse(opts, args);\n       if (commandLine.hasOption(HELP_OPTION)) {\n         HelpFormatter formatter \u003d new HelpFormatter();\n         formatter.printHelp(\"yarn archive-logs\", opts);\n         System.exit(0);\n       }\n       if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n         maxEligible \u003d Integer.parseInt(\n             commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n         if (maxEligible \u003d\u003d 0) {\n           LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n               + \"nothing. Please either set it to a negative value \"\n               + \"(default, all) or a more reasonable value.\");\n           System.exit(0);\n         }\n       }\n       if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n         minNumLogFiles \u003d Integer.parseInt(\n             commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n       }\n       if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n         maxTotalLogsSize \u003d Long.parseLong(\n             commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n         maxTotalLogsSize *\u003d 1024L * 1024L;\n       }\n       if (commandLine.hasOption(MEMORY_OPTION)) {\n         memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n       }\n       if (commandLine.hasOption(VERBOSE_OPTION)) {\n         verbose \u003d true;\n       }\n+      if (commandLine.hasOption(FORCE_OPTION)) {\n+        force \u003d true;\n+      }\n     } catch (ParseException pe) {\n       HelpFormatter formatter \u003d new HelpFormatter();\n       formatter.printHelp(\"yarn archive-logs\", opts);\n       throw pe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleOpts(String[] args) throws ParseException {\n    Options opts \u003d new Options();\n    Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n    Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n        \"The maximum number of eligible apps to process (default: \"\n            + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n    maxEligibleOpt.setArgName(\"n\");\n    Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n        \"The minimum number of log files required to be eligible (default: \"\n            + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n    minNumLogFilesOpt.setArgName(\"n\");\n    Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n        \"The maximum total logs size (in megabytes) required to be eligible\" +\n            \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n    maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n    Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n        \"The amount of memory (in megabytes) for each container (default: \"\n            + DEFAULT_MEMORY + \")\");\n    memoryOpt.setArgName(\"megabytes\");\n    Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n        \"Print more details.\");\n    Option forceOpt \u003d new Option(FORCE_OPTION, false,\n        \"Force recreating the working directory if an existing one is found. \" +\n            \"This should only be used if you know that another instance is \" +\n            \"not currently running\");\n    opts.addOption(helpOpt);\n    opts.addOption(maxEligibleOpt);\n    opts.addOption(minNumLogFilesOpt);\n    opts.addOption(maxTotalLogsSizeOpt);\n    opts.addOption(memoryOpt);\n    opts.addOption(verboseOpt);\n    opts.addOption(forceOpt);\n\n    try {\n      CommandLineParser parser \u003d new GnuParser();\n      CommandLine commandLine \u003d parser.parse(opts, args);\n      if (commandLine.hasOption(HELP_OPTION)) {\n        HelpFormatter formatter \u003d new HelpFormatter();\n        formatter.printHelp(\"yarn archive-logs\", opts);\n        System.exit(0);\n      }\n      if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n        maxEligible \u003d Integer.parseInt(\n            commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n        if (maxEligible \u003d\u003d 0) {\n          LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n              + \"nothing. Please either set it to a negative value \"\n              + \"(default, all) or a more reasonable value.\");\n          System.exit(0);\n        }\n      }\n      if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n        minNumLogFiles \u003d Integer.parseInt(\n            commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n      }\n      if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n        maxTotalLogsSize \u003d Long.parseLong(\n            commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n        maxTotalLogsSize *\u003d 1024L * 1024L;\n      }\n      if (commandLine.hasOption(MEMORY_OPTION)) {\n        memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n      }\n      if (commandLine.hasOption(VERBOSE_OPTION)) {\n        verbose \u003d true;\n      }\n      if (commandLine.hasOption(FORCE_OPTION)) {\n        force \u003d true;\n      }\n    } catch (ParseException pe) {\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(\"yarn archive-logs\", opts);\n      throw pe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6480. archive-logs tool may miss applications (rkanter)\n",
      "commitDate": "25/09/15 3:02 PM",
      "commitName": "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/09/15 5:45 PM",
      "commitNameOld": "119cc75e7ebd723790f6326498383304aba384a2",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.89,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,67 @@\n   private void handleOpts(String[] args) throws ParseException {\n     Options opts \u003d new Options();\n     Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n     Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n         \"The maximum number of eligible apps to process (default: \"\n             + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n     maxEligibleOpt.setArgName(\"n\");\n     Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n         \"The minimum number of log files required to be eligible (default: \"\n             + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n     minNumLogFilesOpt.setArgName(\"n\");\n     Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n         \"The maximum total logs size (in megabytes) required to be eligible\" +\n             \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n     maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n     Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n         \"The amount of memory (in megabytes) for each container (default: \"\n             + DEFAULT_MEMORY + \")\");\n     memoryOpt.setArgName(\"megabytes\");\n+    Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n+        \"Print more details.\");\n     opts.addOption(helpOpt);\n     opts.addOption(maxEligibleOpt);\n     opts.addOption(minNumLogFilesOpt);\n     opts.addOption(maxTotalLogsSizeOpt);\n     opts.addOption(memoryOpt);\n+    opts.addOption(verboseOpt);\n \n     try {\n       CommandLineParser parser \u003d new GnuParser();\n       CommandLine commandLine \u003d parser.parse(opts, args);\n       if (commandLine.hasOption(HELP_OPTION)) {\n         HelpFormatter formatter \u003d new HelpFormatter();\n         formatter.printHelp(\"yarn archive-logs\", opts);\n         System.exit(0);\n       }\n       if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n         maxEligible \u003d Integer.parseInt(\n             commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n         if (maxEligible \u003d\u003d 0) {\n           LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n               + \"nothing. Please either set it to a negative value \"\n               + \"(default, all) or a more reasonable value.\");\n           System.exit(0);\n         }\n       }\n       if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n         minNumLogFiles \u003d Integer.parseInt(\n             commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n       }\n       if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n         maxTotalLogsSize \u003d Long.parseLong(\n             commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n         maxTotalLogsSize *\u003d 1024L * 1024L;\n       }\n       if (commandLine.hasOption(MEMORY_OPTION)) {\n         memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n       }\n+      if (commandLine.hasOption(VERBOSE_OPTION)) {\n+        verbose \u003d true;\n+      }\n     } catch (ParseException pe) {\n       HelpFormatter formatter \u003d new HelpFormatter();\n       formatter.printHelp(\"yarn archive-logs\", opts);\n       throw pe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleOpts(String[] args) throws ParseException {\n    Options opts \u003d new Options();\n    Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n    Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n        \"The maximum number of eligible apps to process (default: \"\n            + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n    maxEligibleOpt.setArgName(\"n\");\n    Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n        \"The minimum number of log files required to be eligible (default: \"\n            + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n    minNumLogFilesOpt.setArgName(\"n\");\n    Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n        \"The maximum total logs size (in megabytes) required to be eligible\" +\n            \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n    maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n    Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n        \"The amount of memory (in megabytes) for each container (default: \"\n            + DEFAULT_MEMORY + \")\");\n    memoryOpt.setArgName(\"megabytes\");\n    Option verboseOpt \u003d new Option(VERBOSE_OPTION, false,\n        \"Print more details.\");\n    opts.addOption(helpOpt);\n    opts.addOption(maxEligibleOpt);\n    opts.addOption(minNumLogFilesOpt);\n    opts.addOption(maxTotalLogsSizeOpt);\n    opts.addOption(memoryOpt);\n    opts.addOption(verboseOpt);\n\n    try {\n      CommandLineParser parser \u003d new GnuParser();\n      CommandLine commandLine \u003d parser.parse(opts, args);\n      if (commandLine.hasOption(HELP_OPTION)) {\n        HelpFormatter formatter \u003d new HelpFormatter();\n        formatter.printHelp(\"yarn archive-logs\", opts);\n        System.exit(0);\n      }\n      if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n        maxEligible \u003d Integer.parseInt(\n            commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n        if (maxEligible \u003d\u003d 0) {\n          LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n              + \"nothing. Please either set it to a negative value \"\n              + \"(default, all) or a more reasonable value.\");\n          System.exit(0);\n        }\n      }\n      if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n        minNumLogFiles \u003d Integer.parseInt(\n            commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n      }\n      if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n        maxTotalLogsSize \u003d Long.parseLong(\n            commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n        maxTotalLogsSize *\u003d 1024L * 1024L;\n      }\n      if (commandLine.hasOption(MEMORY_OPTION)) {\n        memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n      }\n      if (commandLine.hasOption(VERBOSE_OPTION)) {\n        verbose \u003d true;\n      }\n    } catch (ParseException pe) {\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(\"yarn archive-logs\", opts);\n      throw pe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "119cc75e7ebd723790f6326498383304aba384a2": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6415. Create a tool to combine aggregated logs into HAR files. (Robert Kanter via kasha)\n",
      "commitDate": "09/09/15 5:45 PM",
      "commitName": "119cc75e7ebd723790f6326498383304aba384a2",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,61 @@\n+  private void handleOpts(String[] args) throws ParseException {\n+    Options opts \u003d new Options();\n+    Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n+    Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n+        \"The maximum number of eligible apps to process (default: \"\n+            + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n+    maxEligibleOpt.setArgName(\"n\");\n+    Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n+        \"The minimum number of log files required to be eligible (default: \"\n+            + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n+    minNumLogFilesOpt.setArgName(\"n\");\n+    Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n+        \"The maximum total logs size (in megabytes) required to be eligible\" +\n+            \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n+    maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n+    Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n+        \"The amount of memory (in megabytes) for each container (default: \"\n+            + DEFAULT_MEMORY + \")\");\n+    memoryOpt.setArgName(\"megabytes\");\n+    opts.addOption(helpOpt);\n+    opts.addOption(maxEligibleOpt);\n+    opts.addOption(minNumLogFilesOpt);\n+    opts.addOption(maxTotalLogsSizeOpt);\n+    opts.addOption(memoryOpt);\n+\n+    try {\n+      CommandLineParser parser \u003d new GnuParser();\n+      CommandLine commandLine \u003d parser.parse(opts, args);\n+      if (commandLine.hasOption(HELP_OPTION)) {\n+        HelpFormatter formatter \u003d new HelpFormatter();\n+        formatter.printHelp(\"yarn archive-logs\", opts);\n+        System.exit(0);\n+      }\n+      if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n+        maxEligible \u003d Integer.parseInt(\n+            commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n+        if (maxEligible \u003d\u003d 0) {\n+          LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n+              + \"nothing. Please either set it to a negative value \"\n+              + \"(default, all) or a more reasonable value.\");\n+          System.exit(0);\n+        }\n+      }\n+      if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n+        minNumLogFiles \u003d Integer.parseInt(\n+            commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n+      }\n+      if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n+        maxTotalLogsSize \u003d Long.parseLong(\n+            commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n+        maxTotalLogsSize *\u003d 1024L * 1024L;\n+      }\n+      if (commandLine.hasOption(MEMORY_OPTION)) {\n+        memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n+      }\n+    } catch (ParseException pe) {\n+      HelpFormatter formatter \u003d new HelpFormatter();\n+      formatter.printHelp(\"yarn archive-logs\", opts);\n+      throw pe;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleOpts(String[] args) throws ParseException {\n    Options opts \u003d new Options();\n    Option helpOpt \u003d new Option(HELP_OPTION, false, \"Prints this message\");\n    Option maxEligibleOpt \u003d new Option(MAX_ELIGIBLE_APPS_OPTION, true,\n        \"The maximum number of eligible apps to process (default: \"\n            + DEFAULT_MAX_ELIGIBLE + \" (all))\");\n    maxEligibleOpt.setArgName(\"n\");\n    Option minNumLogFilesOpt \u003d new Option(MIN_NUM_LOG_FILES_OPTION, true,\n        \"The minimum number of log files required to be eligible (default: \"\n            + DEFAULT_MIN_NUM_LOG_FILES + \")\");\n    minNumLogFilesOpt.setArgName(\"n\");\n    Option maxTotalLogsSizeOpt \u003d new Option(MAX_TOTAL_LOGS_SIZE_OPTION, true,\n        \"The maximum total logs size (in megabytes) required to be eligible\" +\n            \" (default: \" + DEFAULT_MAX_TOTAL_LOGS_SIZE + \")\");\n    maxTotalLogsSizeOpt.setArgName(\"megabytes\");\n    Option memoryOpt \u003d new Option(MEMORY_OPTION, true,\n        \"The amount of memory (in megabytes) for each container (default: \"\n            + DEFAULT_MEMORY + \")\");\n    memoryOpt.setArgName(\"megabytes\");\n    opts.addOption(helpOpt);\n    opts.addOption(maxEligibleOpt);\n    opts.addOption(minNumLogFilesOpt);\n    opts.addOption(maxTotalLogsSizeOpt);\n    opts.addOption(memoryOpt);\n\n    try {\n      CommandLineParser parser \u003d new GnuParser();\n      CommandLine commandLine \u003d parser.parse(opts, args);\n      if (commandLine.hasOption(HELP_OPTION)) {\n        HelpFormatter formatter \u003d new HelpFormatter();\n        formatter.printHelp(\"yarn archive-logs\", opts);\n        System.exit(0);\n      }\n      if (commandLine.hasOption(MAX_ELIGIBLE_APPS_OPTION)) {\n        maxEligible \u003d Integer.parseInt(\n            commandLine.getOptionValue(MAX_ELIGIBLE_APPS_OPTION));\n        if (maxEligible \u003d\u003d 0) {\n          LOG.info(\"Setting \" + MAX_ELIGIBLE_APPS_OPTION + \" to 0 accomplishes \"\n              + \"nothing. Please either set it to a negative value \"\n              + \"(default, all) or a more reasonable value.\");\n          System.exit(0);\n        }\n      }\n      if (commandLine.hasOption(MIN_NUM_LOG_FILES_OPTION)) {\n        minNumLogFiles \u003d Integer.parseInt(\n            commandLine.getOptionValue(MIN_NUM_LOG_FILES_OPTION));\n      }\n      if (commandLine.hasOption(MAX_TOTAL_LOGS_SIZE_OPTION)) {\n        maxTotalLogsSize \u003d Long.parseLong(\n            commandLine.getOptionValue(MAX_TOTAL_LOGS_SIZE_OPTION));\n        maxTotalLogsSize *\u003d 1024L * 1024L;\n      }\n      if (commandLine.hasOption(MEMORY_OPTION)) {\n        memory \u003d Long.parseLong(commandLine.getOptionValue(MEMORY_OPTION));\n      }\n    } catch (ParseException pe) {\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(\"yarn archive-logs\", opts);\n      throw pe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java"
    }
  }
}