{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "getResourceInformationMapFromConfig",
  "functionId": "getResourceInformationMapFromConfig___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 251,
  "functionEndLine": 303,
  "numCommitsSeen": 36,
  "timeTaken": 2105,
  "changeHistory": [
    "cbcada804d119b837ad99de71d7f44cb4629026e",
    "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0",
    "06cceba1cb07340c412c4467439c16ea6812e685"
  ],
  "changeHistoryShort": {
    "cbcada804d119b837ad99de71d7f44cb4629026e": "Ybodychange",
    "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0": "Ybodychange",
    "06cceba1cb07340c412c4467439c16ea6812e685": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbcada804d119b837ad99de71d7f44cb4629026e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9124. Resolve contradiction in ResourceUtils: addMandatoryResources / checkMandatoryResources work differently (#1121)\n\n",
      "commitDate": "02/08/19 4:04 AM",
      "commitName": "cbcada804d119b837ad99de71d7f44cb4629026e",
      "commitAuthor": "Adam Antal",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 139.49,
      "commitsBetweenForRepo": 976,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private static Map\u003cString, ResourceInformation\u003e getResourceInformationMapFromConfig(\n       Configuration conf) {\n     Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         String[] resourceTags \u003d conf.getTrimmedStrings(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TAGS);\n         Set\u003cString\u003e resourceTagSet \u003d new HashSet\u003c\u003e();\n         Collections.addAll(resourceTagSet, resourceTags);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation, resourceTagSet, null));\n       }\n     }\n \n     // Validate names of resource information map.\n     for (String name : resourceInformationMap.keySet()) {\n       validateNameOfResourceNameAndThrowException(name);\n     }\n \n-    checkMandatoryResources(resourceInformationMap);\n+    checkSpecialResources(resourceInformationMap);\n     addMandatoryResources(resourceInformationMap);\n \n     setAllocationForMandatoryResources(resourceInformationMap, conf);\n \n     return resourceInformationMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, ResourceInformation\u003e getResourceInformationMapFromConfig(\n      Configuration conf) {\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        String[] resourceTags \u003d conf.getTrimmedStrings(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TAGS);\n        Set\u003cString\u003e resourceTagSet \u003d new HashSet\u003c\u003e();\n        Collections.addAll(resourceTagSet, resourceTags);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation, resourceTagSet, null));\n      }\n    }\n\n    // Validate names of resource information map.\n    for (String name : resourceInformationMap.keySet()) {\n      validateNameOfResourceNameAndThrowException(name);\n    }\n\n    checkSpecialResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n\n    setAllocationForMandatoryResources(resourceInformationMap, conf);\n\n    return resourceInformationMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8836. Add tags and attributes in resource definition. Contributed by Weiwei Yang.\n",
      "commitDate": "15/10/18 3:08 AM",
      "commitName": "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "02/08/18 9:59 AM",
      "commitNameOld": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 73.71,
      "commitsBetweenForRepo": 686,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,53 @@\n   private static Map\u003cString, ResourceInformation\u003e getResourceInformationMapFromConfig(\n       Configuration conf) {\n     Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n+        String[] resourceTags \u003d conf.getTrimmedStrings(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TAGS);\n+        Set\u003cString\u003e resourceTagSet \u003d new HashSet\u003c\u003e();\n+        Collections.addAll(resourceTagSet, resourceTags);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n-                minimumAllocation, maximumAllocation));\n+                minimumAllocation, maximumAllocation, resourceTagSet, null));\n       }\n     }\n \n     // Validate names of resource information map.\n     for (String name : resourceInformationMap.keySet()) {\n       validateNameOfResourceNameAndThrowException(name);\n     }\n \n     checkMandatoryResources(resourceInformationMap);\n     addMandatoryResources(resourceInformationMap);\n \n     setAllocationForMandatoryResources(resourceInformationMap, conf);\n \n     return resourceInformationMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, ResourceInformation\u003e getResourceInformationMapFromConfig(\n      Configuration conf) {\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        String[] resourceTags \u003d conf.getTrimmedStrings(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TAGS);\n        Set\u003cString\u003e resourceTagSet \u003d new HashSet\u003c\u003e();\n        Collections.addAll(resourceTagSet, resourceTags);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation, resourceTagSet, null));\n      }\n    }\n\n    // Validate names of resource information map.\n    for (String name : resourceInformationMap.keySet()) {\n      validateNameOfResourceNameAndThrowException(name);\n    }\n\n    checkMandatoryResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n\n    setAllocationForMandatoryResources(resourceInformationMap, conf);\n\n    return resourceInformationMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "06cceba1cb07340c412c4467439c16ea6812e685": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7738. CapacityScheduler: Support refresh maximum allocation for multiple resource types. Contributed by Wangda Tan.\n",
      "commitDate": "18/01/18 5:35 AM",
      "commitName": "06cceba1cb07340c412c4467439c16ea6812e685",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,49 @@\n+  private static Map\u003cString, ResourceInformation\u003e getResourceInformationMapFromConfig(\n+      Configuration conf) {\n+    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n+    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n+\n+    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n+      for (String resourceName : resourceNames) {\n+        String resourceUnits \u003d conf.get(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n+        String resourceTypeName \u003d conf.get(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n+            ResourceTypes.COUNTABLE.toString());\n+        Long minimumAllocation \u003d conf.getLong(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n+                + MINIMUM_ALLOCATION, 0L);\n+        Long maximumAllocation \u003d conf.getLong(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n+                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n+        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n+            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n+          throw new YarnRuntimeException(\n+              \"Incomplete configuration for resource type \u0027\" + resourceName\n+                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n+        }\n+        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n+        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n+            + resourceUnits + \", type \u003d \" + resourceTypeName);\n+        if (resourceInformationMap.containsKey(resourceName)) {\n+          throw new YarnRuntimeException(\n+              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n+        }\n+        resourceInformationMap.put(resourceName, ResourceInformation\n+            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n+                minimumAllocation, maximumAllocation));\n+      }\n+    }\n+\n+    // Validate names of resource information map.\n+    for (String name : resourceInformationMap.keySet()) {\n+      validateNameOfResourceNameAndThrowException(name);\n+    }\n+\n+    checkMandatoryResources(resourceInformationMap);\n+    addMandatoryResources(resourceInformationMap);\n+\n+    setAllocationForMandatoryResources(resourceInformationMap, conf);\n+\n+    return resourceInformationMap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, ResourceInformation\u003e getResourceInformationMapFromConfig(\n      Configuration conf) {\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n\n    // Validate names of resource information map.\n    for (String name : resourceInformationMap.keySet()) {\n      validateNameOfResourceNameAndThrowException(name);\n    }\n\n    checkMandatoryResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n\n    setAllocationForMandatoryResources(resourceInformationMap, conf);\n\n    return resourceInformationMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}