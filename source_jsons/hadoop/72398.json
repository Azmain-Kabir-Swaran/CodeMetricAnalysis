{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NfsExports.java",
  "functionName": "getMatch",
  "functionId": "getMatch___line-String",
  "sourceFilePath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
  "functionStartLine": 358,
  "functionEndLine": 409,
  "numCommitsSeen": 12,
  "timeTaken": 1807,
  "changeHistory": [
    "36af4a913c97113bd0486c48e1cb864c5cba46fd",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "fb1f5bc618f4e006971bdb982cfa8adad71a4e32",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "cbca1668317f3f2d295eea53d7bd020bda4a810f",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597"
  ],
  "changeHistoryShort": {
    "36af4a913c97113bd0486c48e1cb864c5cba46fd": "Ybodychange",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "fb1f5bc618f4e006971bdb982cfa8adad71a4e32": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Yfilerename",
    "cbca1668317f3f2d295eea53d7bd020bda4a810f": "Yfilerename",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Yintroduced"
  },
  "changeHistoryDetails": {
    "36af4a913c97113bd0486c48e1cb864c5cba46fd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7942. NFS: support regexp grouping in nfs.exports.allowed.hosts. Contributed by Brandon Li\n",
      "commitDate": "23/03/15 10:06 AM",
      "commitName": "36af4a913c97113bd0486c48e1cb864c5cba46fd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 20.49,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static Match getMatch(String line) {\n     String[] parts \u003d line.split(\"\\\\s+\");\n     final String host;\n     AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n     switch (parts.length) {\n     case 1:\n       host \u003d StringUtils.toLowerCase(parts[0]).trim();\n       break;\n     case 2:\n       host \u003d StringUtils.toLowerCase(parts[0]).trim();\n       String option \u003d parts[1].trim();\n       if (\"rw\".equalsIgnoreCase(option)) {\n         privilege \u003d AccessPrivilege.READ_WRITE;\n       }\n       break;\n     default:\n       throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n           + \"\u0027\");\n     }\n     if (host.equals(\"*\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new AnonymousMatch(privilege);\n     } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n     } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       String[] pair \u003d host.split(\"/\");\n       return new CIDRMatch(privilege,\n           new SubnetUtils(pair[0], pair[1]).getInfo());\n     } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n-        || host.contains(\"]\")) {\n+        || host.contains(\"]\") || host.contains(\"(\") || host.contains(\")\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new RegexMatch(privilege, host);\n     } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new ExactMatch(privilege, host);\n     } else {\n       throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n           + \"\u0027\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d StringUtils.toLowerCase(parts[0]).trim();\n      break;\n    case 2:\n      host \u003d StringUtils.toLowerCase(parts[0]).trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\") || host.contains(\"(\") || host.contains(\")\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new ExactMatch(privilege, host);\n    } else {\n      throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n          + \"\u0027\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
      "extendedDetails": {}
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static Match getMatch(String line) {\n     String[] parts \u003d line.split(\"\\\\s+\");\n     final String host;\n     AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n     switch (parts.length) {\n     case 1:\n-      host \u003d parts[0].toLowerCase().trim();\n+      host \u003d StringUtils.toLowerCase(parts[0]).trim();\n       break;\n     case 2:\n-      host \u003d parts[0].toLowerCase().trim();\n+      host \u003d StringUtils.toLowerCase(parts[0]).trim();\n       String option \u003d parts[1].trim();\n       if (\"rw\".equalsIgnoreCase(option)) {\n         privilege \u003d AccessPrivilege.READ_WRITE;\n       }\n       break;\n     default:\n       throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n           + \"\u0027\");\n     }\n     if (host.equals(\"*\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new AnonymousMatch(privilege);\n     } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n     } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       String[] pair \u003d host.split(\"/\");\n       return new CIDRMatch(privilege,\n           new SubnetUtils(pair[0], pair[1]).getInfo());\n     } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n         || host.contains(\"]\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new RegexMatch(privilege, host);\n     } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new ExactMatch(privilege, host);\n     } else {\n       throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n           + \"\u0027\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d StringUtils.toLowerCase(parts[0]).trim();\n      break;\n    case 2:\n      host \u003d StringUtils.toLowerCase(parts[0]).trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new ExactMatch(privilege, host);\n    } else {\n      throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n          + \"\u0027\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static Match getMatch(String line) {\n     String[] parts \u003d line.split(\"\\\\s+\");\n     final String host;\n     AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n     switch (parts.length) {\n     case 1:\n-      host \u003d parts[0].toLowerCase(Locale.ENGLISH).trim();\n+      host \u003d parts[0].toLowerCase().trim();\n       break;\n     case 2:\n-      host \u003d parts[0].toLowerCase(Locale.ENGLISH).trim();\n+      host \u003d parts[0].toLowerCase().trim();\n       String option \u003d parts[1].trim();\n       if (\"rw\".equalsIgnoreCase(option)) {\n         privilege \u003d AccessPrivilege.READ_WRITE;\n       }\n       break;\n     default:\n       throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n           + \"\u0027\");\n     }\n     if (host.equals(\"*\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new AnonymousMatch(privilege);\n     } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n     } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       String[] pair \u003d host.split(\"/\");\n       return new CIDRMatch(privilege,\n           new SubnetUtils(pair[0], pair[1]).getInfo());\n     } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n         || host.contains(\"]\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new RegexMatch(privilege, host);\n     } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new ExactMatch(privilege, host);\n     } else {\n       throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n           + \"\u0027\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d parts[0].toLowerCase().trim();\n      break;\n    case 2:\n      host \u003d parts[0].toLowerCase().trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new ExactMatch(privilege, host);\n    } else {\n      throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n          + \"\u0027\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 210.28,
      "commitsBetweenForRepo": 1821,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static Match getMatch(String line) {\n     String[] parts \u003d line.split(\"\\\\s+\");\n     final String host;\n     AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n     switch (parts.length) {\n     case 1:\n-      host \u003d parts[0].toLowerCase().trim();\n+      host \u003d parts[0].toLowerCase(Locale.ENGLISH).trim();\n       break;\n     case 2:\n-      host \u003d parts[0].toLowerCase().trim();\n+      host \u003d parts[0].toLowerCase(Locale.ENGLISH).trim();\n       String option \u003d parts[1].trim();\n       if (\"rw\".equalsIgnoreCase(option)) {\n         privilege \u003d AccessPrivilege.READ_WRITE;\n       }\n       break;\n     default:\n       throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n           + \"\u0027\");\n     }\n     if (host.equals(\"*\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new AnonymousMatch(privilege);\n     } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n     } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       String[] pair \u003d host.split(\"/\");\n       return new CIDRMatch(privilege,\n           new SubnetUtils(pair[0], pair[1]).getInfo());\n     } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n         || host.contains(\"]\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new RegexMatch(privilege, host);\n     } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new ExactMatch(privilege, host);\n     } else {\n       throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n           + \"\u0027\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d parts[0].toLowerCase(Locale.ENGLISH).trim();\n      break;\n    case 2:\n      host \u003d parts[0].toLowerCase(Locale.ENGLISH).trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new ExactMatch(privilege, host);\n    } else {\n      throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n          + \"\u0027\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
      "extendedDetails": {}
    },
    "fb1f5bc618f4e006971bdb982cfa8adad71a4e32": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6456. NFS should throw error for invalid entry in dfs.nfs.exports.allowed.hosts. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610840 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/14 1:35 PM",
      "commitName": "fb1f5bc618f4e006971bdb982cfa8adad71a4e32",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/05/14 4:53 PM",
      "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 45.86,
      "commitsBetweenForRepo": 279,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   private static Match getMatch(String line) {\n     String[] parts \u003d line.split(\"\\\\s+\");\n     final String host;\n     AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n     switch (parts.length) {\n     case 1:\n       host \u003d parts[0].toLowerCase().trim();\n       break;\n     case 2:\n       host \u003d parts[0].toLowerCase().trim();\n       String option \u003d parts[1].trim();\n       if (\"rw\".equalsIgnoreCase(option)) {\n         privilege \u003d AccessPrivilege.READ_WRITE;\n       }\n       break;\n     default:\n       throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n           + \"\u0027\");\n     }\n     if (host.equals(\"*\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new AnonymousMatch(privilege);\n     } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n     } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       String[] pair \u003d host.split(\"/\");\n       return new CIDRMatch(privilege,\n           new SubnetUtils(pair[0], pair[1]).getInfo());\n     } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n         || host.contains(\"]\")) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n       }\n       return new RegexMatch(privilege, host);\n+    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n+      }\n+      return new ExactMatch(privilege, host);\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n+          + \"\u0027\");\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n-    }\n-    return new ExactMatch(privilege, host);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d parts[0].toLowerCase().trim();\n      break;\n    case 2:\n      host \u003d parts[0].toLowerCase().trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new ExactMatch(privilege, host);\n    } else {\n      throw new IllegalArgumentException(\"Invalid hostname provided \u0027\" + host\n          + \"\u0027\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/09/13 11:31 AM",
      "commitNameOld": "75c31df9dd1d9435aec4cc245e1e58ca326e6159",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d parts[0].toLowerCase().trim();\n      break;\n    case 2:\n      host \u003d parts[0].toLowerCase().trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n    }\n    return new ExactMatch(privilege, host);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/security/NfsExports.java",
        "newPath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java"
      }
    },
    "cbca1668317f3f2d295eea53d7bd020bda4a810f": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-5136 MNT EXPORT should give the full group list which can mount the exports. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/13 2:12 PM",
      "commitName": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "31/08/13 12:55 PM",
      "commitNameOld": "76cb07ee2077da61e0c07131bcbe7d0ddc73080e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d parts[0].toLowerCase().trim();\n      break;\n    case 2:\n      host \u003d parts[0].toLowerCase().trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n    }\n    return new ExactMatch(privilege, host);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/security/NfsExports.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/security/NfsExports.java",
        "newPath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/security/NfsExports.java"
      }
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,48 @@\n+  private static Match getMatch(String line) {\n+    String[] parts \u003d line.split(\"\\\\s+\");\n+    final String host;\n+    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n+    switch (parts.length) {\n+    case 1:\n+      host \u003d parts[0].toLowerCase().trim();\n+      break;\n+    case 2:\n+      host \u003d parts[0].toLowerCase().trim();\n+      String option \u003d parts[1].trim();\n+      if (\"rw\".equalsIgnoreCase(option)) {\n+        privilege \u003d AccessPrivilege.READ_WRITE;\n+      }\n+      break;\n+    default:\n+      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n+          + \"\u0027\");\n+    }\n+    if (host.equals(\"*\")) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n+      }\n+      return new AnonymousMatch(privilege);\n+    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n+      }\n+      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n+    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n+      }\n+      String[] pair \u003d host.split(\"/\");\n+      return new CIDRMatch(privilege,\n+          new SubnetUtils(pair[0], pair[1]).getInfo());\n+    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n+        || host.contains(\"]\")) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n+      }\n+      return new RegexMatch(privilege, host);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n+    }\n+    return new ExactMatch(privilege, host);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Match getMatch(String line) {\n    String[] parts \u003d line.split(\"\\\\s+\");\n    final String host;\n    AccessPrivilege privilege \u003d AccessPrivilege.READ_ONLY;\n    switch (parts.length) {\n    case 1:\n      host \u003d parts[0].toLowerCase().trim();\n      break;\n    case 2:\n      host \u003d parts[0].toLowerCase().trim();\n      String option \u003d parts[1].trim();\n      if (\"rw\".equalsIgnoreCase(option)) {\n        privilege \u003d AccessPrivilege.READ_WRITE;\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Incorrectly formatted line \u0027\" + line\n          + \"\u0027\");\n    }\n    if (host.equals(\"*\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using match all for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new AnonymousMatch(privilege);\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using CIDR match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      String[] pair \u003d host.split(\"/\");\n      return new CIDRMatch(privilege,\n          new SubnetUtils(pair[0], pair[1]).getInfo());\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\")\n        || host.contains(\"]\")) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using Regex match for \u0027\" + host + \"\u0027 and \" + privilege);\n      }\n      return new RegexMatch(privilege, host);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using exact match for \u0027\" + host + \"\u0027 and \" + privilege);\n    }\n    return new ExactMatch(privilege, host);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/security/NfsExports.java"
    }
  }
}