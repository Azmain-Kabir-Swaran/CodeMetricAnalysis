{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceResourceHandlerImpl.java",
  "functionName": "preStart",
  "functionId": "preStart___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
  "functionStartLine": 133,
  "functionEndLine": 170,
  "numCommitsSeen": 6,
  "timeTaken": 2159,
  "changeHistory": [
    "29465bf169a7e348a4f32265083450faf66d5631",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
    "579ef4be063745c5211127eca83a393ceddc8b79"
  ],
  "changeHistoryShort": {
    "29465bf169a7e348a4f32265083450faf66d5631": "Ybodychange",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Ybodychange",
    "579ef4be063745c5211127eca83a393ceddc8b79": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29465bf169a7e348a4f32265083450faf66d5631": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
      "commitDate": "28/06/19 2:18 PM",
      "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 102.14,
      "commitsBetweenForRepo": 733,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n     String containerIdStr \u003d container.getContainerId().toString();\n     DeviceMappingManager.DeviceAllocation allocation \u003d\n         deviceMappingManager.assignDevices(resourceName, container);\n     LOG.debug(\"Allocated to {}: {}\", containerIdStr, allocation);\n     DeviceRuntimeSpec spec;\n     try {\n       spec \u003d devicePlugin.onDevicesAllocated(\n           allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n     } catch (Exception e) {\n       throw new ResourceHandlerException(\"Exception thrown from\"\n           + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n     }\n \n     // cgroups operation based on allocation\n     if (spec !\u003d null) {\n       LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\n     }\n     // Create device cgroups for the container\n     cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES,\n         containerIdStr);\n     // non-Docker, use cgroups to do isolation\n-    if (!DockerLinuxContainerRuntime.isDockerContainerRequested(\n+    if (!OCIContainerRuntime.isOCICompliantContainerRequested(\n         nmContext.getConf(),\n         container.getLaunchContext().getEnvironment())) {\n       tryIsolateDevices(allocation, containerIdStr);\n       List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n       ret.add(new PrivilegedOperation(\n           PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n           PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n               .getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES,\n                   containerIdStr)));\n \n       return ret;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String containerIdStr \u003d container.getContainerId().toString();\n    DeviceMappingManager.DeviceAllocation allocation \u003d\n        deviceMappingManager.assignDevices(resourceName, container);\n    LOG.debug(\"Allocated to {}: {}\", containerIdStr, allocation);\n    DeviceRuntimeSpec spec;\n    try {\n      spec \u003d devicePlugin.onDevicesAllocated(\n          allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n    } catch (Exception e) {\n      throw new ResourceHandlerException(\"Exception thrown from\"\n          + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n    }\n\n    // cgroups operation based on allocation\n    if (spec !\u003d null) {\n      LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\n    }\n    // Create device cgroups for the container\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES,\n        containerIdStr);\n    // non-Docker, use cgroups to do isolation\n    if (!OCIContainerRuntime.isOCICompliantContainerRequested(\n        nmContext.getConf(),\n        container.getLaunchContext().getEnvironment())) {\n      tryIsolateDevices(allocation, containerIdStr);\n      List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n      ret.add(new PrivilegedOperation(\n          PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n          PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n              .getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES,\n                  containerIdStr)));\n\n      return ret;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/02/19 6:05 PM",
      "commitNameOld": "c6ea28c480940d1f95cabe3af452dce197c6669d",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 20.66,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n     String containerIdStr \u003d container.getContainerId().toString();\n     DeviceMappingManager.DeviceAllocation allocation \u003d\n         deviceMappingManager.assignDevices(resourceName, container);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Allocated to \"\n-          + containerIdStr + \": \" + allocation);\n-    }\n+    LOG.debug(\"Allocated to {}: {}\", containerIdStr, allocation);\n     DeviceRuntimeSpec spec;\n     try {\n       spec \u003d devicePlugin.onDevicesAllocated(\n           allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n     } catch (Exception e) {\n       throw new ResourceHandlerException(\"Exception thrown from\"\n           + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n     }\n \n     // cgroups operation based on allocation\n     if (spec !\u003d null) {\n       LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\n     }\n     // Create device cgroups for the container\n     cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES,\n         containerIdStr);\n     // non-Docker, use cgroups to do isolation\n     if (!DockerLinuxContainerRuntime.isDockerContainerRequested(\n         nmContext.getConf(),\n         container.getLaunchContext().getEnvironment())) {\n       tryIsolateDevices(allocation, containerIdStr);\n       List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n       ret.add(new PrivilegedOperation(\n           PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n           PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n               .getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES,\n                   containerIdStr)));\n \n       return ret;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String containerIdStr \u003d container.getContainerId().toString();\n    DeviceMappingManager.DeviceAllocation allocation \u003d\n        deviceMappingManager.assignDevices(resourceName, container);\n    LOG.debug(\"Allocated to {}: {}\", containerIdStr, allocation);\n    DeviceRuntimeSpec spec;\n    try {\n      spec \u003d devicePlugin.onDevicesAllocated(\n          allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n    } catch (Exception e) {\n      throw new ResourceHandlerException(\"Exception thrown from\"\n          + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n    }\n\n    // cgroups operation based on allocation\n    if (spec !\u003d null) {\n      LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\n    }\n    // Create device cgroups for the container\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES,\n        containerIdStr);\n    // non-Docker, use cgroups to do isolation\n    if (!DockerLinuxContainerRuntime.isDockerContainerRequested(\n        nmContext.getConf(),\n        container.getLaunchContext().getEnvironment())) {\n      tryIsolateDevices(allocation, containerIdStr);\n      List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n      ret.add(new PrivilegedOperation(\n          PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n          PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n              .getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES,\n                  containerIdStr)));\n\n      return ret;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "10/12/18 11:12 AM",
      "commitNameOld": "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 69.64,
      "commitsBetweenForRepo": 472,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,41 @@\n   public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n     String containerIdStr \u003d container.getContainerId().toString();\n     DeviceMappingManager.DeviceAllocation allocation \u003d\n         deviceMappingManager.assignDevices(resourceName, container);\n-    LOG.debug(\"Allocated to \"\n-        + containerIdStr + \": \" + allocation);\n-\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Allocated to \"\n+          + containerIdStr + \": \" + allocation);\n+    }\n+    DeviceRuntimeSpec spec;\n     try {\n-      devicePlugin.onDevicesAllocated(\n+      spec \u003d devicePlugin.onDevicesAllocated(\n           allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n     } catch (Exception e) {\n       throw new ResourceHandlerException(\"Exception thrown from\"\n           + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n     }\n \n     // cgroups operation based on allocation\n-    /**\n-     * TODO: implement a general container-executor device module\n-     * */\n+    if (spec !\u003d null) {\n+      LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\n+    }\n+    // Create device cgroups for the container\n+    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES,\n+        containerIdStr);\n+    // non-Docker, use cgroups to do isolation\n+    if (!DockerLinuxContainerRuntime.isDockerContainerRequested(\n+        nmContext.getConf(),\n+        container.getLaunchContext().getEnvironment())) {\n+      tryIsolateDevices(allocation, containerIdStr);\n+      List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n+      ret.add(new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n+          PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n+              .getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES,\n+                  containerIdStr)));\n \n+      return ret;\n+    }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String containerIdStr \u003d container.getContainerId().toString();\n    DeviceMappingManager.DeviceAllocation allocation \u003d\n        deviceMappingManager.assignDevices(resourceName, container);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Allocated to \"\n          + containerIdStr + \": \" + allocation);\n    }\n    DeviceRuntimeSpec spec;\n    try {\n      spec \u003d devicePlugin.onDevicesAllocated(\n          allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n    } catch (Exception e) {\n      throw new ResourceHandlerException(\"Exception thrown from\"\n          + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n    }\n\n    // cgroups operation based on allocation\n    if (spec !\u003d null) {\n      LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\n    }\n    // Create device cgroups for the container\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES,\n        containerIdStr);\n    // non-Docker, use cgroups to do isolation\n    if (!DockerLinuxContainerRuntime.isDockerContainerRequested(\n        nmContext.getConf(),\n        container.getLaunchContext().getEnvironment())) {\n      tryIsolateDevices(allocation, containerIdStr);\n      List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n      ret.add(new PrivilegedOperation(\n          PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n          PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n              .getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES,\n                  containerIdStr)));\n\n      return ret;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "579ef4be063745c5211127eca83a393ceddc8b79": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8882. [YARN-8851] Add a shared device mapping manager (scheduler) for device plugins. (Zhankun Tang via wangda)\n\nChange-Id: I9435136642c3d556971a357bf687f69df90bb45e\n",
      "commitDate": "28/11/18 2:09 PM",
      "commitName": "579ef4be063745c5211127eca83a393ceddc8b79",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,23 @@\n+  public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n+      throws ResourceHandlerException {\n+    String containerIdStr \u003d container.getContainerId().toString();\n+    DeviceMappingManager.DeviceAllocation allocation \u003d\n+        deviceMappingManager.assignDevices(resourceName, container);\n+    LOG.debug(\"Allocated to \"\n+        + containerIdStr + \": \" + allocation);\n+\n+    try {\n+      devicePlugin.onDevicesAllocated(\n+          allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n+    } catch (Exception e) {\n+      throw new ResourceHandlerException(\"Exception thrown from\"\n+          + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n+    }\n+\n+    // cgroups operation based on allocation\n+    /**\n+     * TODO: implement a general container-executor device module\n+     * */\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String containerIdStr \u003d container.getContainerId().toString();\n    DeviceMappingManager.DeviceAllocation allocation \u003d\n        deviceMappingManager.assignDevices(resourceName, container);\n    LOG.debug(\"Allocated to \"\n        + containerIdStr + \": \" + allocation);\n\n    try {\n      devicePlugin.onDevicesAllocated(\n          allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\n    } catch (Exception e) {\n      throw new ResourceHandlerException(\"Exception thrown from\"\n          + \" plugin\u0027s \\\"onDeviceAllocated\\\"\" + e.getMessage());\n    }\n\n    // cgroups operation based on allocation\n    /**\n     * TODO: implement a general container-executor device module\n     * */\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java"
    }
  }
}