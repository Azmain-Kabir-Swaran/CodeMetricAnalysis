{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDownload.java",
  "functionName": "changePermissions",
  "functionId": "changePermissions___fs-FileSystem__path-Path(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
  "functionStartLine": 451,
  "functionEndLine": 491,
  "numCommitsSeen": 30,
  "timeTaken": 2405,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
    "b31b4bf029acdceaf6723e40ee29224bb5d38895",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
    "5f9e67e226c572018b274f17e85e4aab6ebab44b"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1": "Ybodychange",
    "b31b4bf029acdceaf6723e40ee29224bb5d38895": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": "Yfilerename",
    "5f9e67e226c572018b274f17e85e4aab6ebab44b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   private void changePermissions(FileSystem fs, final Path path)\n       throws IOException, InterruptedException {\n     File f \u003d new File(path.toUri());\n     if (FileUtils.isSymlink(f)) {\n       // avoid following symlinks when changing permissions\n       return;\n     }\n     boolean isDir \u003d f.isDirectory();\n     FsPermission perm \u003d cachePerms;\n     // set public perms as 755 or 555 based on dir or file\n     if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n       perm \u003d isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n     }\n     // set private perms as 700 or 500\n     else {\n       // PRIVATE:\n       // APPLICATION:\n       perm \u003d isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Changing permissions for path \" + path + \" to perm \" + perm);\n-    }\n+    LOG.debug(\"Changing permissions for path {} to perm {}\", path, perm);\n \n     final FsPermission fPerm \u003d perm;\n     if (null \u003d\u003d userUgi) {\n       files.setPermission(path, perm);\n     }\n     else {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         public Void run() throws Exception {\n           files.setPermission(path, fPerm);\n           return null;\n         }\n       });\n     }\n     if (isDir) {\n       FileStatus[] statuses \u003d fs.listStatus(path);\n       for (FileStatus status : statuses) {\n         changePermissions(fs, status.getPath());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void changePermissions(FileSystem fs, final Path path)\n      throws IOException, InterruptedException {\n    File f \u003d new File(path.toUri());\n    if (FileUtils.isSymlink(f)) {\n      // avoid following symlinks when changing permissions\n      return;\n    }\n    boolean isDir \u003d f.isDirectory();\n    FsPermission perm \u003d cachePerms;\n    // set public perms as 755 or 555 based on dir or file\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      perm \u003d isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n    }\n    // set private perms as 700 or 500\n    else {\n      // PRIVATE:\n      // APPLICATION:\n      perm \u003d isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n    }\n\n    LOG.debug(\"Changing permissions for path {} to perm {}\", path, perm);\n\n    final FsPermission fPerm \u003d perm;\n    if (null \u003d\u003d userUgi) {\n      files.setPermission(path, perm);\n    }\n    else {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        public Void run() throws Exception {\n          files.setPermission(path, fPerm);\n          return null;\n        }\n      });\n    }\n    if (isDir) {\n      FileStatus[] statuses \u003d fs.listStatus(path);\n      for (FileStatus status : statuses) {\n        changePermissions(fs, status.getPath());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7261. Add debug message for better download latency monitoring. (Yufei Gu)\n",
      "commitDate": "20/10/17 10:00 AM",
      "commitName": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "07/12/16 3:07 PM",
      "commitNameOld": "72fe54684198b7df5c5fb2114616dff6d17a4402",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 316.75,
      "commitsBetweenForRepo": 1952,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   private void changePermissions(FileSystem fs, final Path path)\n       throws IOException, InterruptedException {\n     File f \u003d new File(path.toUri());\n     if (FileUtils.isSymlink(f)) {\n       // avoid following symlinks when changing permissions\n       return;\n     }\n     boolean isDir \u003d f.isDirectory();\n     FsPermission perm \u003d cachePerms;\n     // set public perms as 755 or 555 based on dir or file\n     if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n       perm \u003d isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n     }\n     // set private perms as 700 or 500\n     else {\n       // PRIVATE:\n       // APPLICATION:\n       perm \u003d isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n     }\n-    LOG.debug(\"Changing permissions for path \" + path\n-        + \" to perm \" + perm);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Changing permissions for path \" + path + \" to perm \" + perm);\n+    }\n+\n     final FsPermission fPerm \u003d perm;\n     if (null \u003d\u003d userUgi) {\n       files.setPermission(path, perm);\n     }\n     else {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         public Void run() throws Exception {\n           files.setPermission(path, fPerm);\n           return null;\n         }\n       });\n     }\n     if (isDir) {\n       FileStatus[] statuses \u003d fs.listStatus(path);\n       for (FileStatus status : statuses) {\n         changePermissions(fs, status.getPath());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void changePermissions(FileSystem fs, final Path path)\n      throws IOException, InterruptedException {\n    File f \u003d new File(path.toUri());\n    if (FileUtils.isSymlink(f)) {\n      // avoid following symlinks when changing permissions\n      return;\n    }\n    boolean isDir \u003d f.isDirectory();\n    FsPermission perm \u003d cachePerms;\n    // set public perms as 755 or 555 based on dir or file\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      perm \u003d isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n    }\n    // set private perms as 700 or 500\n    else {\n      // PRIVATE:\n      // APPLICATION:\n      perm \u003d isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Changing permissions for path \" + path + \" to perm \" + perm);\n    }\n\n    final FsPermission fPerm \u003d perm;\n    if (null \u003d\u003d userUgi) {\n      files.setPermission(path, perm);\n    }\n    else {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        public Void run() throws Exception {\n          files.setPermission(path, fPerm);\n          return null;\n        }\n      });\n    }\n    if (isDir) {\n      FileStatus[] statuses \u003d fs.listStatus(path);\n      for (FileStatus status : statuses) {\n        changePermissions(fs, status.getPath());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "b31b4bf029acdceaf6723e40ee29224bb5d38895": {
      "type": "Ybodychange",
      "commitMessage": "Fix broken download of directories\n\n(cherry picked from commit 745c9a01243b8eefc72d89d1164d7d010b80983b)\n",
      "commitDate": "09/11/14 7:03 PM",
      "commitName": "b31b4bf029acdceaf6723e40ee29224bb5d38895",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "31/10/14 3:53 PM",
      "commitNameOld": "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 9.17,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   private void changePermissions(FileSystem fs, final Path path)\n       throws IOException, InterruptedException {\n-    FileStatus fStatus \u003d fs.getFileStatus(path);\n+    File f \u003d new File(path.toUri());\n+    if (FileUtils.isSymlink(f)) {\n+      // avoid following symlinks when changing permissions\n+      return;\n+    }\n+    boolean isDir \u003d f.isDirectory();\n     FsPermission perm \u003d cachePerms;\n     // set public perms as 755 or 555 based on dir or file\n     if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n-      perm \u003d fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n+      perm \u003d isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n     }\n     // set private perms as 700 or 500\n     else {\n       // PRIVATE:\n       // APPLICATION:\n-      perm \u003d fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n+      perm \u003d isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n     }\n     LOG.debug(\"Changing permissions for path \" + path\n         + \" to perm \" + perm);\n     final FsPermission fPerm \u003d perm;\n     if (null \u003d\u003d userUgi) {\n       files.setPermission(path, perm);\n     }\n     else {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         public Void run() throws Exception {\n           files.setPermission(path, fPerm);\n           return null;\n         }\n       });\n     }\n-    if (fStatus.isDirectory()\n-        \u0026\u0026 !fStatus.isSymlink()) {\n+    if (isDir) {\n       FileStatus[] statuses \u003d fs.listStatus(path);\n       for (FileStatus status : statuses) {\n         changePermissions(fs, status.getPath());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void changePermissions(FileSystem fs, final Path path)\n      throws IOException, InterruptedException {\n    File f \u003d new File(path.toUri());\n    if (FileUtils.isSymlink(f)) {\n      // avoid following symlinks when changing permissions\n      return;\n    }\n    boolean isDir \u003d f.isDirectory();\n    FsPermission perm \u003d cachePerms;\n    // set public perms as 755 or 555 based on dir or file\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      perm \u003d isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n    }\n    // set private perms as 700 or 500\n    else {\n      // PRIVATE:\n      // APPLICATION:\n      perm \u003d isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n    }\n    LOG.debug(\"Changing permissions for path \" + path\n        + \" to perm \" + perm);\n    final FsPermission fPerm \u003d perm;\n    if (null \u003d\u003d userUgi) {\n      files.setPermission(path, perm);\n    }\n    else {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        public Void run() throws Exception {\n          files.setPermission(path, fPerm);\n          return null;\n        }\n      });\n    }\n    if (isDir) {\n      FileStatus[] statuses \u003d fs.listStatus(path);\n      for (FileStatus status : statuses) {\n        changePermissions(fs, status.getPath());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void changePermissions(FileSystem fs, final Path path)\n      throws IOException, InterruptedException {\n    FileStatus fStatus \u003d fs.getFileStatus(path);\n    FsPermission perm \u003d cachePerms;\n    // set public perms as 755 or 555 based on dir or file\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      perm \u003d fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n    }\n    // set private perms as 700 or 500\n    else {\n      // PRIVATE:\n      // APPLICATION:\n      perm \u003d fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n    }\n    LOG.debug(\"Changing permissions for path \" + path\n        + \" to perm \" + perm);\n    final FsPermission fPerm \u003d perm;\n    if (null \u003d\u003d userUgi) {\n      files.setPermission(path, perm);\n    }\n    else {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        public Void run() throws Exception {\n          files.setPermission(path, fPerm);\n          return null;\n        }\n      });\n    }\n    if (fStatus.isDirectory()\n        \u0026\u0026 !fStatus.isSymlink()) {\n      FileStatus[] statuses \u003d fs.listStatus(path);\n      for (FileStatus status : statuses) {\n        changePermissions(fs, status.getPath());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
      }
    },
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3237. Move LocalJobRunner to hadoop-mapreduce-client-core. Contributed by Tom White.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 8:16 PM",
      "commitName": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/10/11 7:09 PM",
      "commitNameOld": "e5badc0c1a817ca8f7e4255ec4dcfdf858abb596",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void changePermissions(FileSystem fs, final Path path)\n      throws IOException, InterruptedException {\n    FileStatus fStatus \u003d fs.getFileStatus(path);\n    FsPermission perm \u003d cachePerms;\n    // set public perms as 755 or 555 based on dir or file\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      perm \u003d fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n    }\n    // set private perms as 700 or 500\n    else {\n      // PRIVATE:\n      // APPLICATION:\n      perm \u003d fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n    }\n    LOG.debug(\"Changing permissions for path \" + path\n        + \" to perm \" + perm);\n    final FsPermission fPerm \u003d perm;\n    if (null \u003d\u003d userUgi) {\n      files.setPermission(path, perm);\n    }\n    else {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        public Void run() throws Exception {\n          files.setPermission(path, fPerm);\n          return null;\n        }\n      });\n    }\n    if (fStatus.isDirectory()\n        \u0026\u0026 !fStatus.isSymlink()) {\n      FileStatus[] statuses \u003d fs.listStatus(path);\n      for (FileStatus status : statuses) {\n        changePermissions(fs, status.getPath());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
      }
    },
    "5f9e67e226c572018b274f17e85e4aab6ebab44b": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2766. Fixed NM to set secure permissions for files and directories in distributed-cache. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/11 10:51 PM",
      "commitName": "5f9e67e226c572018b274f17e85e4aab6ebab44b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,36 @@\n+  private void changePermissions(FileSystem fs, final Path path)\n+      throws IOException, InterruptedException {\n+    FileStatus fStatus \u003d fs.getFileStatus(path);\n+    FsPermission perm \u003d cachePerms;\n+    // set public perms as 755 or 555 based on dir or file\n+    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n+      perm \u003d fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n+    }\n+    // set private perms as 700 or 500\n+    else {\n+      // PRIVATE:\n+      // APPLICATION:\n+      perm \u003d fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n+    }\n+    LOG.debug(\"Changing permissions for path \" + path\n+        + \" to perm \" + perm);\n+    final FsPermission fPerm \u003d perm;\n+    if (null \u003d\u003d userUgi) {\n+      files.setPermission(path, perm);\n+    }\n+    else {\n+      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+        public Void run() throws Exception {\n+          files.setPermission(path, fPerm);\n+          return null;\n+        }\n+      });\n+    }\n+    if (fStatus.isDirectory()\n+        \u0026\u0026 !fStatus.isSymlink()) {\n+      FileStatus[] statuses \u003d fs.listStatus(path);\n+      for (FileStatus status : statuses) {\n+        changePermissions(fs, status.getPath());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void changePermissions(FileSystem fs, final Path path)\n      throws IOException, InterruptedException {\n    FileStatus fStatus \u003d fs.getFileStatus(path);\n    FsPermission perm \u003d cachePerms;\n    // set public perms as 755 or 555 based on dir or file\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      perm \u003d fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\n    }\n    // set private perms as 700 or 500\n    else {\n      // PRIVATE:\n      // APPLICATION:\n      perm \u003d fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\n    }\n    LOG.debug(\"Changing permissions for path \" + path\n        + \" to perm \" + perm);\n    final FsPermission fPerm \u003d perm;\n    if (null \u003d\u003d userUgi) {\n      files.setPermission(path, perm);\n    }\n    else {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        public Void run() throws Exception {\n          files.setPermission(path, fPerm);\n          return null;\n        }\n      });\n    }\n    if (fStatus.isDirectory()\n        \u0026\u0026 !fStatus.isSymlink()) {\n      FileStatus[] statuses \u003d fs.listStatus(path);\n      for (FileStatus status : statuses) {\n        changePermissions(fs, status.getPath());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java"
    }
  }
}