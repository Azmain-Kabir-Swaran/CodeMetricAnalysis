{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LightWeightHashSet.java",
  "functionName": "resize",
  "functionId": "resize___cap-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightHashSet.java",
  "functionStartLine": 460,
  "functionEndLine": 481,
  "numCommitsSeen": 9,
  "timeTaken": 1186,
  "changeHistory": [
    "9a3f147fdd5421460889b266ead3a2300323cda2"
  ],
  "changeHistoryShort": {
    "9a3f147fdd5421460889b266ead3a2300323cda2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a3f147fdd5421460889b266ead3a2300323cda2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2476. More CPU efficient data structure for under-replicated, over-replicated, and invalidated blocks. Contributed by Tomasz Nykiel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1201991 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/11 5:13 PM",
      "commitName": "9a3f147fdd5421460889b266ead3a2300323cda2",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  private void resize(int cap) {\n+    int newCapacity \u003d computeCapacity(cap);\n+    if (newCapacity \u003d\u003d this.capacity) {\n+      return;\n+    }\n+    this.capacity \u003d newCapacity;\n+    this.expandThreshold \u003d (int) (capacity * maxLoadFactor);\n+    this.shrinkThreshold \u003d (int) (capacity * minLoadFactor);\n+    this.hash_mask \u003d capacity - 1;\n+    LinkedElement\u003cT\u003e[] temp \u003d entries;\n+    entries \u003d new LinkedElement[capacity];\n+    for (int i \u003d 0; i \u003c temp.length; i++) {\n+      LinkedElement\u003cT\u003e curr \u003d temp[i];\n+      while (curr !\u003d null) {\n+        LinkedElement\u003cT\u003e next \u003d curr.next;\n+        int index \u003d getIndex(curr.hashCode);\n+        curr.next \u003d entries[index];\n+        entries[index] \u003d curr;\n+        curr \u003d next;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resize(int cap) {\n    int newCapacity \u003d computeCapacity(cap);\n    if (newCapacity \u003d\u003d this.capacity) {\n      return;\n    }\n    this.capacity \u003d newCapacity;\n    this.expandThreshold \u003d (int) (capacity * maxLoadFactor);\n    this.shrinkThreshold \u003d (int) (capacity * minLoadFactor);\n    this.hash_mask \u003d capacity - 1;\n    LinkedElement\u003cT\u003e[] temp \u003d entries;\n    entries \u003d new LinkedElement[capacity];\n    for (int i \u003d 0; i \u003c temp.length; i++) {\n      LinkedElement\u003cT\u003e curr \u003d temp[i];\n      while (curr !\u003d null) {\n        LinkedElement\u003cT\u003e next \u003d curr.next;\n        int index \u003d getIndex(curr.hashCode);\n        curr.next \u003d entries[index];\n        entries[index] \u003d curr;\n        curr \u003d next;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightHashSet.java"
    }
  }
}