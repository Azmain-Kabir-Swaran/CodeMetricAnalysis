{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SSLHostnameVerifier.java",
  "functionName": "check",
  "functionId": "check___host-String[]__ssl-SSLSocket",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/SSLHostnameVerifier.java",
  "functionStartLine": 293,
  "functionEndLine": 347,
  "numCommitsSeen": 10,
  "timeTaken": 733,
  "changeHistory": [
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925"
  ],
  "changeHistoryShort": {
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4417. add support for encrypted shuffle (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/12 6:23 AM",
      "commitName": "9d16c9354b0c05edb30d23003dcdec4cc44ed925",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,55 @@\n+        public void check(String host[], SSLSocket ssl)\n+            throws IOException {\n+            if (host \u003d\u003d null) {\n+                throw new NullPointerException(\"host to verify is null\");\n+            }\n+\n+            SSLSession session \u003d ssl.getSession();\n+            if (session \u003d\u003d null) {\n+                // In our experience this only happens under IBM 1.4.x when\n+                // spurious (unrelated) certificates show up in the server\u0027\n+                // chain.  Hopefully this will unearth the real problem:\n+                InputStream in \u003d ssl.getInputStream();\n+                in.available();\n+                /*\n+                  If you\u0027re looking at the 2 lines of code above because\n+                  you\u0027re running into a problem, you probably have two\n+                  options:\n+\n+                    #1.  Clean up the certificate chain that your server\n+                         is presenting (e.g. edit \"/etc/apache2/server.crt\"\n+                         or wherever it is your server\u0027s certificate chain\n+                         is defined).\n+\n+                                               OR\n+\n+                    #2.   Upgrade to an IBM 1.5.x or greater JVM, or switch\n+                          to a non-IBM JVM.\n+                */\n+\n+                // If ssl.getInputStream().available() didn\u0027t cause an\n+                // exception, maybe at least now the session is available?\n+                session \u003d ssl.getSession();\n+                if (session \u003d\u003d null) {\n+                    // If it\u0027s still null, probably a startHandshake() will\n+                    // unearth the real problem.\n+                    ssl.startHandshake();\n+\n+                    // Okay, if we still haven\u0027t managed to cause an exception,\n+                    // might as well go for the NPE.  Or maybe we\u0027re okay now?\n+                    session \u003d ssl.getSession();\n+                }\n+            }\n+            Certificate[] certs;\n+            try {\n+                certs \u003d session.getPeerCertificates();\n+            } catch (SSLPeerUnverifiedException spue) {\n+                InputStream in \u003d ssl.getInputStream();\n+                in.available();\n+                // Didn\u0027t trigger anything interesting?  Okay, just throw\n+                // original.\n+                throw spue;\n+            }\n+            X509Certificate x509 \u003d (X509Certificate) certs[0];\n+            check(host, x509);\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public void check(String host[], SSLSocket ssl)\n            throws IOException {\n            if (host \u003d\u003d null) {\n                throw new NullPointerException(\"host to verify is null\");\n            }\n\n            SSLSession session \u003d ssl.getSession();\n            if (session \u003d\u003d null) {\n                // In our experience this only happens under IBM 1.4.x when\n                // spurious (unrelated) certificates show up in the server\u0027\n                // chain.  Hopefully this will unearth the real problem:\n                InputStream in \u003d ssl.getInputStream();\n                in.available();\n                /*\n                  If you\u0027re looking at the 2 lines of code above because\n                  you\u0027re running into a problem, you probably have two\n                  options:\n\n                    #1.  Clean up the certificate chain that your server\n                         is presenting (e.g. edit \"/etc/apache2/server.crt\"\n                         or wherever it is your server\u0027s certificate chain\n                         is defined).\n\n                                               OR\n\n                    #2.   Upgrade to an IBM 1.5.x or greater JVM, or switch\n                          to a non-IBM JVM.\n                */\n\n                // If ssl.getInputStream().available() didn\u0027t cause an\n                // exception, maybe at least now the session is available?\n                session \u003d ssl.getSession();\n                if (session \u003d\u003d null) {\n                    // If it\u0027s still null, probably a startHandshake() will\n                    // unearth the real problem.\n                    ssl.startHandshake();\n\n                    // Okay, if we still haven\u0027t managed to cause an exception,\n                    // might as well go for the NPE.  Or maybe we\u0027re okay now?\n                    session \u003d ssl.getSession();\n                }\n            }\n            Certificate[] certs;\n            try {\n                certs \u003d session.getPeerCertificates();\n            } catch (SSLPeerUnverifiedException spue) {\n                InputStream in \u003d ssl.getInputStream();\n                in.available();\n                // Didn\u0027t trigger anything interesting?  Okay, just throw\n                // original.\n                throw spue;\n            }\n            X509Certificate x509 \u003d (X509Certificate) certs[0];\n            check(host, x509);\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/SSLHostnameVerifier.java"
    }
  }
}