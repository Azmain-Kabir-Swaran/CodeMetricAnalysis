{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "createLoginUser",
  "functionId": "createLoginUser___subject-Subject",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 710,
  "functionEndLine": 781,
  "numCommitsSeen": 104,
  "timeTaken": 2141,
  "changeHistory": [
    "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9",
    "0d61facd3777c26178a9974e646b6ff351fedcb5",
    "59cf7588779145ad5850ad63426743dfe03d8347"
  ],
  "changeHistoryShort": {
    "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9": "Ybodychange",
    "0d61facd3777c26178a9974e646b6ff351fedcb5": "Ybodychange",
    "59cf7588779145ad5850ad63426743dfe03d8347": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16691. Unify Logging in UserGroupInformation.\n\nUnify Logging in UserGroupInformation.",
      "commitDate": "14/11/19 10:28 AM",
      "commitName": "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9",
      "commitAuthor": "belugabehr",
      "commitDateOld": "28/02/19 10:34 AM",
      "commitNameOld": "0d61facd3777c26178a9974e646b6ff351fedcb5",
      "commitAuthorOld": "Ajay Kumar",
      "daysBetweenCommits": 259.0,
      "commitsBetweenForRepo": 1874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,72 @@\n   UserGroupInformation createLoginUser(Subject subject) throws IOException {\n     UserGroupInformation realUser \u003d doSubjectLogin(subject, null);\n     UserGroupInformation loginUser \u003d null;\n     try {\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n       // Load tokens from files\n       final Collection\u003cString\u003e tokenFileLocations \u003d new LinkedHashSet\u003c\u003e();\n       tokenFileLocations.addAll(getTrimmedStringCollection(\n           System.getProperty(HADOOP_TOKEN_FILES)));\n       tokenFileLocations.addAll(getTrimmedStringCollection(\n           conf.get(HADOOP_TOKEN_FILES)));\n       tokenFileLocations.addAll(getTrimmedStringCollection(\n           System.getenv(HADOOP_TOKEN_FILE_LOCATION)));\n       for (String tokenFileLocation : tokenFileLocations) {\n         if (tokenFileLocation !\u003d null \u0026\u0026 tokenFileLocation.length() \u003e 0) {\n           File tokenFile \u003d new File(tokenFileLocation);\n           LOG.debug(\"Reading credentials from location {}\",\n               tokenFile.getCanonicalPath());\n           if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n             Credentials cred \u003d Credentials.readTokenStorageFile(\n                 tokenFile, conf);\n             LOG.debug(\"Loaded {} tokens from {}\", cred.numberOfTokens(),\n                 tokenFile.getCanonicalPath());\n             loginUser.addCredentials(cred);\n           } else {\n             LOG.info(\"Token file {} does not exist\",\n                 tokenFile.getCanonicalPath());\n           }\n         }\n       }\n \n       // Load tokens from base64 encoding\n       final Collection\u003cString\u003e tokensBase64 \u003d new LinkedHashSet\u003c\u003e();\n       tokensBase64.addAll(getTrimmedStringCollection(\n           System.getProperty(HADOOP_TOKENS)));\n       tokensBase64.addAll(getTrimmedStringCollection(\n           conf.get(HADOOP_TOKENS)));\n       tokensBase64.addAll(getTrimmedStringCollection(\n           System.getenv(HADOOP_TOKEN)));\n       int numTokenBase64 \u003d 0;\n       for (String tokenBase64 : tokensBase64) {\n         if (tokenBase64 !\u003d null \u0026\u0026 tokenBase64.length() \u003e 0) {\n           try {\n             Token\u003cTokenIdentifier\u003e token \u003d new Token\u003c\u003e();\n             token.decodeFromUrlString(tokenBase64);\n             Credentials cred \u003d new Credentials();\n             cred.addToken(token.getService(), token);\n             loginUser.addCredentials(cred);\n             numTokenBase64++;\n           } catch (IOException ioe) {\n             LOG.error(\"Cannot add token {}: {}\",\n                 tokenBase64, ioe.getMessage());\n           }\n         }\n       }\n       if (numTokenBase64 \u003e 0) {\n         LOG.debug(\"Loaded {} base64 tokens\", numTokenBase64);\n       }\n     } catch (IOException ioe) {\n-      LOG.debug(\"failure to load login credentials\", ioe);\n+      LOG.debug(\"Failure to load login credentials\", ioe);\n       throw ioe;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"UGI loginUser:\"+loginUser);\n-    }\n+    LOG.debug(\"UGI loginUser: {}\", loginUser);\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  UserGroupInformation createLoginUser(Subject subject) throws IOException {\n    UserGroupInformation realUser \u003d doSubjectLogin(subject, null);\n    UserGroupInformation loginUser \u003d null;\n    try {\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      // Load tokens from files\n      final Collection\u003cString\u003e tokenFileLocations \u003d new LinkedHashSet\u003c\u003e();\n      tokenFileLocations.addAll(getTrimmedStringCollection(\n          System.getProperty(HADOOP_TOKEN_FILES)));\n      tokenFileLocations.addAll(getTrimmedStringCollection(\n          conf.get(HADOOP_TOKEN_FILES)));\n      tokenFileLocations.addAll(getTrimmedStringCollection(\n          System.getenv(HADOOP_TOKEN_FILE_LOCATION)));\n      for (String tokenFileLocation : tokenFileLocations) {\n        if (tokenFileLocation !\u003d null \u0026\u0026 tokenFileLocation.length() \u003e 0) {\n          File tokenFile \u003d new File(tokenFileLocation);\n          LOG.debug(\"Reading credentials from location {}\",\n              tokenFile.getCanonicalPath());\n          if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n            Credentials cred \u003d Credentials.readTokenStorageFile(\n                tokenFile, conf);\n            LOG.debug(\"Loaded {} tokens from {}\", cred.numberOfTokens(),\n                tokenFile.getCanonicalPath());\n            loginUser.addCredentials(cred);\n          } else {\n            LOG.info(\"Token file {} does not exist\",\n                tokenFile.getCanonicalPath());\n          }\n        }\n      }\n\n      // Load tokens from base64 encoding\n      final Collection\u003cString\u003e tokensBase64 \u003d new LinkedHashSet\u003c\u003e();\n      tokensBase64.addAll(getTrimmedStringCollection(\n          System.getProperty(HADOOP_TOKENS)));\n      tokensBase64.addAll(getTrimmedStringCollection(\n          conf.get(HADOOP_TOKENS)));\n      tokensBase64.addAll(getTrimmedStringCollection(\n          System.getenv(HADOOP_TOKEN)));\n      int numTokenBase64 \u003d 0;\n      for (String tokenBase64 : tokensBase64) {\n        if (tokenBase64 !\u003d null \u0026\u0026 tokenBase64.length() \u003e 0) {\n          try {\n            Token\u003cTokenIdentifier\u003e token \u003d new Token\u003c\u003e();\n            token.decodeFromUrlString(tokenBase64);\n            Credentials cred \u003d new Credentials();\n            cred.addToken(token.getService(), token);\n            loginUser.addCredentials(cred);\n            numTokenBase64++;\n          } catch (IOException ioe) {\n            LOG.error(\"Cannot add token {}: {}\",\n                tokenBase64, ioe.getMessage());\n          }\n        }\n      }\n      if (numTokenBase64 \u003e 0) {\n        LOG.debug(\"Loaded {} base64 tokens\", numTokenBase64);\n      }\n    } catch (IOException ioe) {\n      LOG.debug(\"Failure to load login credentials\", ioe);\n      throw ioe;\n    }\n    LOG.debug(\"UGI loginUser: {}\", loginUser);\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "0d61facd3777c26178a9974e646b6ff351fedcb5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15889. Add hadoop.token configuration parameter to load tokens. Contributed by Íñigo Goiri\n",
      "commitDate": "28/02/19 10:34 AM",
      "commitName": "0d61facd3777c26178a9974e646b6ff351fedcb5",
      "commitAuthor": "Ajay Kumar",
      "commitDateOld": "27/10/18 8:59 AM",
      "commitNameOld": "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2",
      "commitAuthorOld": "Hrishikesh Gadre",
      "daysBetweenCommits": 124.11,
      "commitsBetweenForRepo": 870,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,74 @@\n   UserGroupInformation createLoginUser(Subject subject) throws IOException {\n     UserGroupInformation realUser \u003d doSubjectLogin(subject, null);\n     UserGroupInformation loginUser \u003d null;\n     try {\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n-      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n-      if (tokenFileLocation \u003d\u003d null) {\n-        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n-      }\n-      if (tokenFileLocation !\u003d null) {\n-        for (String tokenFileName:\n-             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n-          if (tokenFileName.length() \u003e 0) {\n-            File tokenFile \u003d new File(tokenFileName);\n-            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n-              Credentials cred \u003d Credentials.readTokenStorageFile(\n-                  tokenFile, conf);\n-              loginUser.addCredentials(cred);\n-            } else {\n-              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n-            }\n+      // Load tokens from files\n+      final Collection\u003cString\u003e tokenFileLocations \u003d new LinkedHashSet\u003c\u003e();\n+      tokenFileLocations.addAll(getTrimmedStringCollection(\n+          System.getProperty(HADOOP_TOKEN_FILES)));\n+      tokenFileLocations.addAll(getTrimmedStringCollection(\n+          conf.get(HADOOP_TOKEN_FILES)));\n+      tokenFileLocations.addAll(getTrimmedStringCollection(\n+          System.getenv(HADOOP_TOKEN_FILE_LOCATION)));\n+      for (String tokenFileLocation : tokenFileLocations) {\n+        if (tokenFileLocation !\u003d null \u0026\u0026 tokenFileLocation.length() \u003e 0) {\n+          File tokenFile \u003d new File(tokenFileLocation);\n+          LOG.debug(\"Reading credentials from location {}\",\n+              tokenFile.getCanonicalPath());\n+          if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n+            Credentials cred \u003d Credentials.readTokenStorageFile(\n+                tokenFile, conf);\n+            LOG.debug(\"Loaded {} tokens from {}\", cred.numberOfTokens(),\n+                tokenFile.getCanonicalPath());\n+            loginUser.addCredentials(cred);\n+          } else {\n+            LOG.info(\"Token file {} does not exist\",\n+                tokenFile.getCanonicalPath());\n           }\n         }\n       }\n \n-      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n-      if (fileLocation !\u003d null) {\n-        // Load the token storage file and put all of the tokens into the\n-        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n-        // cycle (HADOOP-9212).\n-        File source \u003d new File(fileLocation);\n-        LOG.debug(\"Reading credentials from location set in {}: {}\",\n-            HADOOP_TOKEN_FILE_LOCATION,\n-            source.getCanonicalPath());\n-        if (!source.isFile()) {\n-          throw new FileNotFoundException(\"Source file \"\n-              + source.getCanonicalPath() + \" from \"\n-              + HADOOP_TOKEN_FILE_LOCATION\n-              + \" not found\");\n+      // Load tokens from base64 encoding\n+      final Collection\u003cString\u003e tokensBase64 \u003d new LinkedHashSet\u003c\u003e();\n+      tokensBase64.addAll(getTrimmedStringCollection(\n+          System.getProperty(HADOOP_TOKENS)));\n+      tokensBase64.addAll(getTrimmedStringCollection(\n+          conf.get(HADOOP_TOKENS)));\n+      tokensBase64.addAll(getTrimmedStringCollection(\n+          System.getenv(HADOOP_TOKEN)));\n+      int numTokenBase64 \u003d 0;\n+      for (String tokenBase64 : tokensBase64) {\n+        if (tokenBase64 !\u003d null \u0026\u0026 tokenBase64.length() \u003e 0) {\n+          try {\n+            Token\u003cTokenIdentifier\u003e token \u003d new Token\u003c\u003e();\n+            token.decodeFromUrlString(tokenBase64);\n+            Credentials cred \u003d new Credentials();\n+            cred.addToken(token.getService(), token);\n+            loginUser.addCredentials(cred);\n+            numTokenBase64++;\n+          } catch (IOException ioe) {\n+            LOG.error(\"Cannot add token {}: {}\",\n+                tokenBase64, ioe.getMessage());\n+          }\n         }\n-        Credentials cred \u003d Credentials.readTokenStorageFile(\n-            source, conf);\n-        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n-        loginUser.addCredentials(cred);\n+      }\n+      if (numTokenBase64 \u003e 0) {\n+        LOG.debug(\"Loaded {} base64 tokens\", numTokenBase64);\n       }\n     } catch (IOException ioe) {\n       LOG.debug(\"failure to load login credentials\", ioe);\n       throw ioe;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  UserGroupInformation createLoginUser(Subject subject) throws IOException {\n    UserGroupInformation realUser \u003d doSubjectLogin(subject, null);\n    UserGroupInformation loginUser \u003d null;\n    try {\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      // Load tokens from files\n      final Collection\u003cString\u003e tokenFileLocations \u003d new LinkedHashSet\u003c\u003e();\n      tokenFileLocations.addAll(getTrimmedStringCollection(\n          System.getProperty(HADOOP_TOKEN_FILES)));\n      tokenFileLocations.addAll(getTrimmedStringCollection(\n          conf.get(HADOOP_TOKEN_FILES)));\n      tokenFileLocations.addAll(getTrimmedStringCollection(\n          System.getenv(HADOOP_TOKEN_FILE_LOCATION)));\n      for (String tokenFileLocation : tokenFileLocations) {\n        if (tokenFileLocation !\u003d null \u0026\u0026 tokenFileLocation.length() \u003e 0) {\n          File tokenFile \u003d new File(tokenFileLocation);\n          LOG.debug(\"Reading credentials from location {}\",\n              tokenFile.getCanonicalPath());\n          if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n            Credentials cred \u003d Credentials.readTokenStorageFile(\n                tokenFile, conf);\n            LOG.debug(\"Loaded {} tokens from {}\", cred.numberOfTokens(),\n                tokenFile.getCanonicalPath());\n            loginUser.addCredentials(cred);\n          } else {\n            LOG.info(\"Token file {} does not exist\",\n                tokenFile.getCanonicalPath());\n          }\n        }\n      }\n\n      // Load tokens from base64 encoding\n      final Collection\u003cString\u003e tokensBase64 \u003d new LinkedHashSet\u003c\u003e();\n      tokensBase64.addAll(getTrimmedStringCollection(\n          System.getProperty(HADOOP_TOKENS)));\n      tokensBase64.addAll(getTrimmedStringCollection(\n          conf.get(HADOOP_TOKENS)));\n      tokensBase64.addAll(getTrimmedStringCollection(\n          System.getenv(HADOOP_TOKEN)));\n      int numTokenBase64 \u003d 0;\n      for (String tokenBase64 : tokensBase64) {\n        if (tokenBase64 !\u003d null \u0026\u0026 tokenBase64.length() \u003e 0) {\n          try {\n            Token\u003cTokenIdentifier\u003e token \u003d new Token\u003c\u003e();\n            token.decodeFromUrlString(tokenBase64);\n            Credentials cred \u003d new Credentials();\n            cred.addToken(token.getService(), token);\n            loginUser.addCredentials(cred);\n            numTokenBase64++;\n          } catch (IOException ioe) {\n            LOG.error(\"Cannot add token {}: {}\",\n                tokenBase64, ioe.getMessage());\n          }\n        }\n      }\n      if (numTokenBase64 \u003e 0) {\n        LOG.debug(\"Loaded {} base64 tokens\", numTokenBase64);\n      }\n    } catch (IOException ioe) {\n      LOG.debug(\"failure to load login credentials\", ioe);\n      throw ioe;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "59cf7588779145ad5850ad63426743dfe03d8347": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
      "commitDate": "23/02/18 11:10 AM",
      "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,61 @@\n+  UserGroupInformation createLoginUser(Subject subject) throws IOException {\n+    UserGroupInformation realUser \u003d doSubjectLogin(subject, null);\n+    UserGroupInformation loginUser \u003d null;\n+    try {\n+      // If the HADOOP_PROXY_USER environment variable or property\n+      // is specified, create a proxy user as the logged in user.\n+      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n+      if (proxyUser \u003d\u003d null) {\n+        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n+      }\n+      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n+\n+      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n+      if (tokenFileLocation \u003d\u003d null) {\n+        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n+      }\n+      if (tokenFileLocation !\u003d null) {\n+        for (String tokenFileName:\n+             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n+          if (tokenFileName.length() \u003e 0) {\n+            File tokenFile \u003d new File(tokenFileName);\n+            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n+              Credentials cred \u003d Credentials.readTokenStorageFile(\n+                  tokenFile, conf);\n+              loginUser.addCredentials(cred);\n+            } else {\n+              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n+            }\n+          }\n+        }\n+      }\n+\n+      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n+      if (fileLocation !\u003d null) {\n+        // Load the token storage file and put all of the tokens into the\n+        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n+        // cycle (HADOOP-9212).\n+        File source \u003d new File(fileLocation);\n+        LOG.debug(\"Reading credentials from location set in {}: {}\",\n+            HADOOP_TOKEN_FILE_LOCATION,\n+            source.getCanonicalPath());\n+        if (!source.isFile()) {\n+          throw new FileNotFoundException(\"Source file \"\n+              + source.getCanonicalPath() + \" from \"\n+              + HADOOP_TOKEN_FILE_LOCATION\n+              + \" not found\");\n+        }\n+        Credentials cred \u003d Credentials.readTokenStorageFile(\n+            source, conf);\n+        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n+        loginUser.addCredentials(cred);\n+      }\n+    } catch (IOException ioe) {\n+      LOG.debug(\"failure to load login credentials\", ioe);\n+      throw ioe;\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"UGI loginUser:\"+loginUser);\n+    }\n+    return loginUser;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  UserGroupInformation createLoginUser(Subject subject) throws IOException {\n    UserGroupInformation realUser \u003d doSubjectLogin(subject, null);\n    UserGroupInformation loginUser \u003d null;\n    try {\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        File source \u003d new File(fileLocation);\n        LOG.debug(\"Reading credentials from location set in {}: {}\",\n            HADOOP_TOKEN_FILE_LOCATION,\n            source.getCanonicalPath());\n        if (!source.isFile()) {\n          throw new FileNotFoundException(\"Source file \"\n              + source.getCanonicalPath() + \" from \"\n              + HADOOP_TOKEN_FILE_LOCATION\n              + \" not found\");\n        }\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            source, conf);\n        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n        loginUser.addCredentials(cred);\n      }\n    } catch (IOException ioe) {\n      LOG.debug(\"failure to load login credentials\", ioe);\n      throw ioe;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}