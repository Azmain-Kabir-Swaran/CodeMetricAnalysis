{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSConfigToCSConfigConverter.java",
  "functionName": "convert",
  "functionId": "convert___inputYarnSiteConfig-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
  "functionStartLine": 218,
  "functionEndLine": 266,
  "numCommitsSeen": 13,
  "timeTaken": 3504,
  "changeHistory": [
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a": "Ymultichange(Yparameterchange,Ybodychange)",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10099. FS-CS converter: handle allow-undeclared-pools and user-as-default-queue properly and fix misc issues. Contributed by Peter Bacsko\n",
      "commitDate": "30/01/20 7:03 AM",
      "commitName": "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10099. FS-CS converter: handle allow-undeclared-pools and user-as-default-queue properly and fix misc issues. Contributed by Peter Bacsko\n",
          "commitDate": "30/01/20 7:03 AM",
          "commitName": "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "28/01/20 6:22 AM",
          "commitNameOld": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,49 @@\n-  void convert(Configuration conf) throws Exception {\n+  void convert(Configuration inputYarnSiteConfig) throws Exception {\n     System.out.println(WARNING_TEXT);\n \n     // initialize Fair Scheduler\n     RMContext ctx \u003d new RMContextImpl();\n     PlacementManager placementManager \u003d new PlacementManager();\n     ctx.setQueuePlacementManager(placementManager);\n \n+    // Prepare a separate config for the FS instance\n+    // to force the use of ConfiguredYarnAuthorizer, otherwise\n+    // it might use that of Ranger\n+    Configuration fsConfig \u003d new Configuration(inputYarnSiteConfig);\n+    fsConfig.setBoolean(FairSchedulerConfiguration.MIGRATION_MODE, true);\n+    fsConfig.setBoolean(FairSchedulerConfiguration.NO_TERMINAL_RULE_CHECK,\n+        conversionOptions.isNoRuleTerminalCheck());\n+    fsConfig.setClass(YarnConfiguration.YARN_AUTHORIZATION_PROVIDER,\n+        ConfiguredYarnAuthorizer.class, YarnAuthorizationProvider.class);\n     FairScheduler fs \u003d new FairScheduler();\n     fs.setRMContext(ctx);\n-    fs.init(conf);\n+    fs.init(fsConfig);\n+    boolean havePlacementPolicies \u003d\n+        checkPlacementPoliciesPresent(fs, inputYarnSiteConfig);\n \n     drfUsed \u003d isDrfUsed(fs);\n \n     AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n     queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n     queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n \n-    yarnSiteConfig \u003d new Configuration(false);\n+    convertedYarnSiteConfig \u003d new Configuration(false);\n     capacitySchedulerConfig \u003d new Configuration(false);\n \n     checkUserMaxApps(allocConf);\n     checkUserMaxAppsDefault(allocConf);\n \n-    convertYarnSiteXml(conf);\n+    convertYarnSiteXml(inputYarnSiteConfig, havePlacementPolicies);\n     convertCapacitySchedulerXml(fs);\n \n     if (consoleMode) {\n       System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n     }\n     capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n \n     if (consoleMode) {\n       System.out.println();\n       System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n     }\n-    yarnSiteConfig.writeXml(yarnSiteOutputStream);\n+    convertedYarnSiteConfig.writeXml(yarnSiteOutputStream);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void convert(Configuration inputYarnSiteConfig) throws Exception {\n    System.out.println(WARNING_TEXT);\n\n    // initialize Fair Scheduler\n    RMContext ctx \u003d new RMContextImpl();\n    PlacementManager placementManager \u003d new PlacementManager();\n    ctx.setQueuePlacementManager(placementManager);\n\n    // Prepare a separate config for the FS instance\n    // to force the use of ConfiguredYarnAuthorizer, otherwise\n    // it might use that of Ranger\n    Configuration fsConfig \u003d new Configuration(inputYarnSiteConfig);\n    fsConfig.setBoolean(FairSchedulerConfiguration.MIGRATION_MODE, true);\n    fsConfig.setBoolean(FairSchedulerConfiguration.NO_TERMINAL_RULE_CHECK,\n        conversionOptions.isNoRuleTerminalCheck());\n    fsConfig.setClass(YarnConfiguration.YARN_AUTHORIZATION_PROVIDER,\n        ConfiguredYarnAuthorizer.class, YarnAuthorizationProvider.class);\n    FairScheduler fs \u003d new FairScheduler();\n    fs.setRMContext(ctx);\n    fs.init(fsConfig);\n    boolean havePlacementPolicies \u003d\n        checkPlacementPoliciesPresent(fs, inputYarnSiteConfig);\n\n    drfUsed \u003d isDrfUsed(fs);\n\n    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n    queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n    queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n\n    convertedYarnSiteConfig \u003d new Configuration(false);\n    capacitySchedulerConfig \u003d new Configuration(false);\n\n    checkUserMaxApps(allocConf);\n    checkUserMaxAppsDefault(allocConf);\n\n    convertYarnSiteXml(inputYarnSiteConfig, havePlacementPolicies);\n    convertCapacitySchedulerXml(fs);\n\n    if (consoleMode) {\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n\n    if (consoleMode) {\n      System.out.println();\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    convertedYarnSiteConfig.writeXml(yarnSiteOutputStream);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[inputYarnSiteConfig-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10099. FS-CS converter: handle allow-undeclared-pools and user-as-default-queue properly and fix misc issues. Contributed by Peter Bacsko\n",
          "commitDate": "30/01/20 7:03 AM",
          "commitName": "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "28/01/20 6:22 AM",
          "commitNameOld": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,49 @@\n-  void convert(Configuration conf) throws Exception {\n+  void convert(Configuration inputYarnSiteConfig) throws Exception {\n     System.out.println(WARNING_TEXT);\n \n     // initialize Fair Scheduler\n     RMContext ctx \u003d new RMContextImpl();\n     PlacementManager placementManager \u003d new PlacementManager();\n     ctx.setQueuePlacementManager(placementManager);\n \n+    // Prepare a separate config for the FS instance\n+    // to force the use of ConfiguredYarnAuthorizer, otherwise\n+    // it might use that of Ranger\n+    Configuration fsConfig \u003d new Configuration(inputYarnSiteConfig);\n+    fsConfig.setBoolean(FairSchedulerConfiguration.MIGRATION_MODE, true);\n+    fsConfig.setBoolean(FairSchedulerConfiguration.NO_TERMINAL_RULE_CHECK,\n+        conversionOptions.isNoRuleTerminalCheck());\n+    fsConfig.setClass(YarnConfiguration.YARN_AUTHORIZATION_PROVIDER,\n+        ConfiguredYarnAuthorizer.class, YarnAuthorizationProvider.class);\n     FairScheduler fs \u003d new FairScheduler();\n     fs.setRMContext(ctx);\n-    fs.init(conf);\n+    fs.init(fsConfig);\n+    boolean havePlacementPolicies \u003d\n+        checkPlacementPoliciesPresent(fs, inputYarnSiteConfig);\n \n     drfUsed \u003d isDrfUsed(fs);\n \n     AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n     queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n     queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n \n-    yarnSiteConfig \u003d new Configuration(false);\n+    convertedYarnSiteConfig \u003d new Configuration(false);\n     capacitySchedulerConfig \u003d new Configuration(false);\n \n     checkUserMaxApps(allocConf);\n     checkUserMaxAppsDefault(allocConf);\n \n-    convertYarnSiteXml(conf);\n+    convertYarnSiteXml(inputYarnSiteConfig, havePlacementPolicies);\n     convertCapacitySchedulerXml(fs);\n \n     if (consoleMode) {\n       System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n     }\n     capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n \n     if (consoleMode) {\n       System.out.println();\n       System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n     }\n-    yarnSiteConfig.writeXml(yarnSiteOutputStream);\n+    convertedYarnSiteConfig.writeXml(yarnSiteOutputStream);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void convert(Configuration inputYarnSiteConfig) throws Exception {\n    System.out.println(WARNING_TEXT);\n\n    // initialize Fair Scheduler\n    RMContext ctx \u003d new RMContextImpl();\n    PlacementManager placementManager \u003d new PlacementManager();\n    ctx.setQueuePlacementManager(placementManager);\n\n    // Prepare a separate config for the FS instance\n    // to force the use of ConfiguredYarnAuthorizer, otherwise\n    // it might use that of Ranger\n    Configuration fsConfig \u003d new Configuration(inputYarnSiteConfig);\n    fsConfig.setBoolean(FairSchedulerConfiguration.MIGRATION_MODE, true);\n    fsConfig.setBoolean(FairSchedulerConfiguration.NO_TERMINAL_RULE_CHECK,\n        conversionOptions.isNoRuleTerminalCheck());\n    fsConfig.setClass(YarnConfiguration.YARN_AUTHORIZATION_PROVIDER,\n        ConfiguredYarnAuthorizer.class, YarnAuthorizationProvider.class);\n    FairScheduler fs \u003d new FairScheduler();\n    fs.setRMContext(ctx);\n    fs.init(fsConfig);\n    boolean havePlacementPolicies \u003d\n        checkPlacementPoliciesPresent(fs, inputYarnSiteConfig);\n\n    drfUsed \u003d isDrfUsed(fs);\n\n    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n    queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n    queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n\n    convertedYarnSiteConfig \u003d new Configuration(false);\n    capacitySchedulerConfig \u003d new Configuration(false);\n\n    checkUserMaxApps(allocConf);\n    checkUserMaxAppsDefault(allocConf);\n\n    convertYarnSiteXml(inputYarnSiteConfig, havePlacementPolicies);\n    convertCapacitySchedulerXml(fs);\n\n    if (consoleMode) {\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n\n    if (consoleMode) {\n      System.out.println();\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    convertedYarnSiteConfig.writeXml(yarnSiteOutputStream);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
      "commitDate": "28/01/20 6:22 AM",
      "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/01/20 3:42 AM",
      "commitNameOld": "2aa065d98f36527d7769c9c58a923a706036391d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 13.11,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   void convert(Configuration conf) throws Exception {\n     System.out.println(WARNING_TEXT);\n-    \n+\n     // initialize Fair Scheduler\n     RMContext ctx \u003d new RMContextImpl();\n     PlacementManager placementManager \u003d new PlacementManager();\n     ctx.setQueuePlacementManager(placementManager);\n \n     FairScheduler fs \u003d new FairScheduler();\n     fs.setRMContext(ctx);\n     fs.init(conf);\n \n+    drfUsed \u003d isDrfUsed(fs);\n+\n     AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n     queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n     queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n \n     yarnSiteConfig \u003d new Configuration(false);\n     capacitySchedulerConfig \u003d new Configuration(false);\n \n     checkUserMaxApps(allocConf);\n     checkUserMaxAppsDefault(allocConf);\n \n     convertYarnSiteXml(conf);\n     convertCapacitySchedulerXml(fs);\n \n     if (consoleMode) {\n       System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n     }\n     capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n \n     if (consoleMode) {\n       System.out.println();\n       System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n     }\n     yarnSiteConfig.writeXml(yarnSiteOutputStream);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void convert(Configuration conf) throws Exception {\n    System.out.println(WARNING_TEXT);\n\n    // initialize Fair Scheduler\n    RMContext ctx \u003d new RMContextImpl();\n    PlacementManager placementManager \u003d new PlacementManager();\n    ctx.setQueuePlacementManager(placementManager);\n\n    FairScheduler fs \u003d new FairScheduler();\n    fs.setRMContext(ctx);\n    fs.init(conf);\n\n    drfUsed \u003d isDrfUsed(fs);\n\n    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n    queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n    queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n\n    yarnSiteConfig \u003d new Configuration(false);\n    capacitySchedulerConfig \u003d new Configuration(false);\n\n    checkUserMaxApps(allocConf);\n    checkUserMaxAppsDefault(allocConf);\n\n    convertYarnSiteXml(conf);\n    convertCapacitySchedulerXml(fs);\n\n    if (consoleMode) {\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n\n    if (consoleMode) {\n      System.out.println();\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    yarnSiteConfig.writeXml(yarnSiteOutputStream);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,36 @@\n+  void convert(Configuration conf) throws Exception {\n+    System.out.println(WARNING_TEXT);\n+    \n+    // initialize Fair Scheduler\n+    RMContext ctx \u003d new RMContextImpl();\n+    PlacementManager placementManager \u003d new PlacementManager();\n+    ctx.setQueuePlacementManager(placementManager);\n+\n+    FairScheduler fs \u003d new FairScheduler();\n+    fs.setRMContext(ctx);\n+    fs.init(conf);\n+\n+    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n+    queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n+    queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n+\n+    yarnSiteConfig \u003d new Configuration(false);\n+    capacitySchedulerConfig \u003d new Configuration(false);\n+\n+    checkUserMaxApps(allocConf);\n+    checkUserMaxAppsDefault(allocConf);\n+\n+    convertYarnSiteXml(conf);\n+    convertCapacitySchedulerXml(fs);\n+\n+    if (consoleMode) {\n+      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n+    }\n+    capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n+\n+    if (consoleMode) {\n+      System.out.println();\n+      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n+    }\n+    yarnSiteConfig.writeXml(yarnSiteOutputStream);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void convert(Configuration conf) throws Exception {\n    System.out.println(WARNING_TEXT);\n    \n    // initialize Fair Scheduler\n    RMContext ctx \u003d new RMContextImpl();\n    PlacementManager placementManager \u003d new PlacementManager();\n    ctx.setQueuePlacementManager(placementManager);\n\n    FairScheduler fs \u003d new FairScheduler();\n    fs.setRMContext(ctx);\n    fs.init(conf);\n\n    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n    queueMaxAppsDefault \u003d allocConf.getQueueMaxAppsDefault();\n    queueMaxAMShareDefault \u003d allocConf.getQueueMaxAMShareDefault();\n\n    yarnSiteConfig \u003d new Configuration(false);\n    capacitySchedulerConfig \u003d new Configuration(false);\n\n    checkUserMaxApps(allocConf);\n    checkUserMaxAppsDefault(allocConf);\n\n    convertYarnSiteXml(conf);\n    convertCapacitySchedulerXml(fs);\n\n    if (consoleMode) {\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + CAPACITY_SCHEDULER_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    capacitySchedulerConfig.writeXml(capacitySchedulerOutputStream);\n\n    if (consoleMode) {\n      System.out.println();\n      System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d \" + YARN_SITE_XML + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n    yarnSiteConfig.writeXml(yarnSiteOutputStream);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java"
    }
  }
}