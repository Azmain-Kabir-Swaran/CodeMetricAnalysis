{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SlidingWindowRetryPolicy.java",
  "functionName": "shouldRetry",
  "functionId": "shouldRetry___retryContext-RetryContext__errorCode-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
  "functionStartLine": 43,
  "functionEndLine": 56,
  "numCommitsSeen": 141,
  "timeTaken": 6112,
  "changeHistory": [
    "135941e00d762a417c3b4cc524cdc59b0d1810b1",
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
    "3552c2b99dff4f21489ff284f9dcba40e897a1e5",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f"
  ],
  "changeHistoryShort": {
    "135941e00d762a417c3b4cc524cdc59b0d1810b1": "Ybodychange",
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "3552c2b99dff4f21489ff284f9dcba40e897a1e5": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "135941e00d762a417c3b4cc524cdc59b0d1810b1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8362.  Bugfix logic in container retries in node manager.\n            Contributed by Chandni Singh\n",
      "commitDate": "29/05/18 1:56 PM",
      "commitName": "135941e00d762a417c3b4cc524cdc59b0d1810b1",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "13/03/18 5:55 PM",
      "commitNameOld": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 76.83,
      "commitsBetweenForRepo": 1179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,14 @@\n   public boolean shouldRetry(RetryContext retryContext,\n       int errorCode) {\n-    ContainerRetryContext containerRC \u003d retryContext\n-        .containerRetryContext;\n+    ContainerRetryContext containerRC \u003d retryContext.containerRetryContext;\n     Preconditions.checkNotNull(containerRC, \"container retry context null\");\n     ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n         \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n         \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n-      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n-        return true;\n-      }\n-      int pendingRetries \u003d calculatePendingRetries(retryContext);\n-      updateRetryContext(retryContext, pendingRetries);\n-      return pendingRetries \u003e 0;\n+      return containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER\n+          || calculateRemainingRetries(retryContext) \u003e 0;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean shouldRetry(RetryContext retryContext,\n      int errorCode) {\n    ContainerRetryContext containerRC \u003d retryContext.containerRetryContext;\n    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n      return containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER\n          || calculateRemainingRetries(retryContext) \u003e 0;\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
      "extendedDetails": {}
    },
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
      "commitDate": "13/03/18 5:55 PM",
      "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
          "commitDate": "13/03/18 5:55 PM",
          "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "13/03/18 4:39 PM",
          "commitNameOld": "9714fc1dd48edb1c40d96d69ae82ed3b0fab7748",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public static boolean shouldRetry(int errorCode,\n-      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n-    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n-      return false;\n-    }\n-\n-    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n+  public boolean shouldRetry(RetryContext retryContext,\n+      int errorCode) {\n+    ContainerRetryContext containerRC \u003d retryContext\n+        .containerRetryContext;\n+    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n+    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n-        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n-      return remainingRetryAttempts \u003e 0\n-          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n+        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n+        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n+      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n+        return true;\n+      }\n+      int pendingRetries \u003d calculatePendingRetries(retryContext);\n+      updateRetryContext(retryContext, pendingRetries);\n+      return pendingRetries \u003e 0;\n     }\n-\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean shouldRetry(RetryContext retryContext,\n      int errorCode) {\n    ContainerRetryContext containerRC \u003d retryContext\n        .containerRetryContext;\n    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n        return true;\n      }\n      int pendingRetries \u003d calculatePendingRetries(retryContext);\n      updateRetryContext(retryContext, pendingRetries);\n      return pendingRetries \u003e 0;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
            "oldMethodName": "shouldRetry",
            "newMethodName": "shouldRetry"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
          "commitDate": "13/03/18 5:55 PM",
          "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "13/03/18 4:39 PM",
          "commitNameOld": "9714fc1dd48edb1c40d96d69ae82ed3b0fab7748",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public static boolean shouldRetry(int errorCode,\n-      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n-    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n-      return false;\n-    }\n-\n-    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n+  public boolean shouldRetry(RetryContext retryContext,\n+      int errorCode) {\n+    ContainerRetryContext containerRC \u003d retryContext\n+        .containerRetryContext;\n+    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n+    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n-        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n-      return remainingRetryAttempts \u003e 0\n-          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n+        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n+        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n+      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n+        return true;\n+      }\n+      int pendingRetries \u003d calculatePendingRetries(retryContext);\n+      updateRetryContext(retryContext, pendingRetries);\n+      return pendingRetries \u003e 0;\n     }\n-\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean shouldRetry(RetryContext retryContext,\n      int errorCode) {\n    ContainerRetryContext containerRC \u003d retryContext\n        .containerRetryContext;\n    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n        return true;\n      }\n      int pendingRetries \u003d calculatePendingRetries(retryContext);\n      updateRetryContext(retryContext, pendingRetries);\n      return pendingRetries \u003e 0;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
          "commitDate": "13/03/18 5:55 PM",
          "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "13/03/18 4:39 PM",
          "commitNameOld": "9714fc1dd48edb1c40d96d69ae82ed3b0fab7748",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public static boolean shouldRetry(int errorCode,\n-      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n-    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n-      return false;\n-    }\n-\n-    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n+  public boolean shouldRetry(RetryContext retryContext,\n+      int errorCode) {\n+    ContainerRetryContext containerRC \u003d retryContext\n+        .containerRetryContext;\n+    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n+    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n-        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n-      return remainingRetryAttempts \u003e 0\n-          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n+        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n+        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n+      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n+        return true;\n+      }\n+      int pendingRetries \u003d calculatePendingRetries(retryContext);\n+      updateRetryContext(retryContext, pendingRetries);\n+      return pendingRetries \u003e 0;\n     }\n-\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean shouldRetry(RetryContext retryContext,\n      int errorCode) {\n    ContainerRetryContext containerRC \u003d retryContext\n        .containerRetryContext;\n    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n        return true;\n      }\n      int pendingRetries \u003d calculatePendingRetries(retryContext);\n      updateRetryContext(retryContext, pendingRetries);\n      return pendingRetries \u003e 0;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
          "commitDate": "13/03/18 5:55 PM",
          "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "13/03/18 4:39 PM",
          "commitNameOld": "9714fc1dd48edb1c40d96d69ae82ed3b0fab7748",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public static boolean shouldRetry(int errorCode,\n-      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n-    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n-        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n-      return false;\n-    }\n-\n-    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n+  public boolean shouldRetry(RetryContext retryContext,\n+      int errorCode) {\n+    ContainerRetryContext containerRC \u003d retryContext\n+        .containerRetryContext;\n+    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n+    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n-        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n-      return remainingRetryAttempts \u003e 0\n-          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n+        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n+        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n+      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n+        return true;\n+      }\n+      int pendingRetries \u003d calculatePendingRetries(retryContext);\n+      updateRetryContext(retryContext, pendingRetries);\n+      return pendingRetries \u003e 0;\n     }\n-\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean shouldRetry(RetryContext retryContext,\n      int errorCode) {\n    ContainerRetryContext containerRC \u003d retryContext\n        .containerRetryContext;\n    Preconditions.checkNotNull(containerRC, \"container retry context null\");\n    ContainerRetryPolicy retryPolicy \u003d containerRC.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 containerRC.getErrorCodes() !\u003d null\n        \u0026\u0026 containerRC.getErrorCodes().contains(errorCode))) {\n      if (containerRC.getMaxRetries() \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n        return true;\n      }\n      int pendingRetries \u003d calculatePendingRetries(retryContext);\n      updateRetryContext(retryContext, pendingRetries);\n      return pendingRetries \u003e 0;\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/SlidingWindowRetryPolicy.java",
          "extendedDetails": {
            "oldValue": "[errorCode-int, retryContext-ContainerRetryContext, remainingRetryAttempts-int]",
            "newValue": "[retryContext-RetryContext, errorCode-int]"
          }
        }
      ]
    },
    "3552c2b99dff4f21489ff284f9dcba40e897a1e5": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5637. Changes in NodeManager to support Container rollback and commit. (asuresh)\n",
      "commitDate": "18/09/16 10:55 AM",
      "commitName": "3552c2b99dff4f21489ff284f9dcba40e897a1e5",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5637. Changes in NodeManager to support Container rollback and commit. (asuresh)\n",
          "commitDate": "18/09/16 10:55 AM",
          "commitName": "3552c2b99dff4f21489ff284f9dcba40e897a1e5",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/09/16 7:15 AM",
          "commitNameOld": "40b5a59b726733df456330a26f03d5174cc0bc1c",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  public boolean shouldRetry(int errorCode) {\n+  public static boolean shouldRetry(int errorCode,\n+      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n     if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n         || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n         || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n       return false;\n     }\n \n-    ContainerRetryPolicy retryPolicy \u003d containerRetryContext.getRetryPolicy();\n+    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-            \u0026\u0026 containerRetryContext.getErrorCodes() !\u003d null\n-            \u0026\u0026 containerRetryContext.getErrorCodes().contains(errorCode))) {\n+        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n+        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n       return remainingRetryAttempts \u003e 0\n           || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n     }\n \n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean shouldRetry(int errorCode,\n      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      return false;\n    }\n\n    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n      return remainingRetryAttempts \u003e 0\n          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n    }\n\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java",
          "extendedDetails": {
            "oldValue": "[errorCode-int]",
            "newValue": "[errorCode-int, retryContext-ContainerRetryContext, remainingRetryAttempts-int]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5637. Changes in NodeManager to support Container rollback and commit. (asuresh)\n",
          "commitDate": "18/09/16 10:55 AM",
          "commitName": "3552c2b99dff4f21489ff284f9dcba40e897a1e5",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/09/16 7:15 AM",
          "commitNameOld": "40b5a59b726733df456330a26f03d5174cc0bc1c",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  public boolean shouldRetry(int errorCode) {\n+  public static boolean shouldRetry(int errorCode,\n+      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n     if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n         || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n         || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n       return false;\n     }\n \n-    ContainerRetryPolicy retryPolicy \u003d containerRetryContext.getRetryPolicy();\n+    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-            \u0026\u0026 containerRetryContext.getErrorCodes() !\u003d null\n-            \u0026\u0026 containerRetryContext.getErrorCodes().contains(errorCode))) {\n+        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n+        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n       return remainingRetryAttempts \u003e 0\n           || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n     }\n \n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean shouldRetry(int errorCode,\n      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      return false;\n    }\n\n    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n      return remainingRetryAttempts \u003e 0\n          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n    }\n\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5637. Changes in NodeManager to support Container rollback and commit. (asuresh)\n",
          "commitDate": "18/09/16 10:55 AM",
          "commitName": "3552c2b99dff4f21489ff284f9dcba40e897a1e5",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/09/16 7:15 AM",
          "commitNameOld": "40b5a59b726733df456330a26f03d5174cc0bc1c",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  public boolean shouldRetry(int errorCode) {\n+  public static boolean shouldRetry(int errorCode,\n+      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n     if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n         || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n         || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n       return false;\n     }\n \n-    ContainerRetryPolicy retryPolicy \u003d containerRetryContext.getRetryPolicy();\n+    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n     if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n         || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n-            \u0026\u0026 containerRetryContext.getErrorCodes() !\u003d null\n-            \u0026\u0026 containerRetryContext.getErrorCodes().contains(errorCode))) {\n+        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n+        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n       return remainingRetryAttempts \u003e 0\n           || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n     }\n \n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean shouldRetry(int errorCode,\n      ContainerRetryContext retryContext, int remainingRetryAttempts) {\n    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      return false;\n    }\n\n    ContainerRetryPolicy retryPolicy \u003d retryContext.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n        \u0026\u0026 retryContext.getErrorCodes() !\u003d null\n        \u0026\u0026 retryContext.getErrorCodes().contains(errorCode))) {\n      return remainingRetryAttempts \u003e 0\n          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n    }\n\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,18 @@\n+  public boolean shouldRetry(int errorCode) {\n+    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n+        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n+        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n+      return false;\n+    }\n+\n+    ContainerRetryPolicy retryPolicy \u003d containerRetryContext.getRetryPolicy();\n+    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n+        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n+            \u0026\u0026 containerRetryContext.getErrorCodes() !\u003d null\n+            \u0026\u0026 containerRetryContext.getErrorCodes().contains(errorCode))) {\n+      return remainingRetryAttempts \u003e 0\n+          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n+    }\n+\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean shouldRetry(int errorCode) {\n    if (errorCode \u003d\u003d ExitCode.SUCCESS.getExitCode()\n        || errorCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || errorCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      return false;\n    }\n\n    ContainerRetryPolicy retryPolicy \u003d containerRetryContext.getRetryPolicy();\n    if (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_ALL_ERRORS\n        || (retryPolicy \u003d\u003d ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES\n            \u0026\u0026 containerRetryContext.getErrorCodes() !\u003d null\n            \u0026\u0026 containerRetryContext.getErrorCodes().contains(errorCode))) {\n      return remainingRetryAttempts \u003e 0\n          || remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER;\n    }\n\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java"
    }
  }
}