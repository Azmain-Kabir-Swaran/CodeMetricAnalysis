{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "getReservationsAtTime",
  "functionId": "getReservationsAtTime___tick-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 517,
  "functionEndLine": 519,
  "numCommitsSeen": 19,
  "timeTaken": 1372,
  "changeHistory": [
    "9875325d5c63f343809907d06bf48a298035a611",
    "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "9875325d5c63f343809907d06bf48a298035a611": "Ybodychange",
    "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400": "Ybodychange",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9875325d5c63f343809907d06bf48a298035a611": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4340. Add list API to reservation system. (Sean Po via wangda)\n",
      "commitDate": "01/02/16 6:17 PM",
      "commitName": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/12/15 9:26 PM",
      "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 57.87,
      "commitsBetweenForRepo": 344,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,3 @@\n   public Set\u003cReservationAllocation\u003e getReservationsAtTime(long tick) {\n-    ReservationInterval searchInterval \u003d\n-        new ReservationInterval(tick, Long.MAX_VALUE);\n-    readLock.lock();\n-    try {\n-      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n-          currentReservations.headMap(searchInterval, true);\n-      if (!reservations.isEmpty()) {\n-        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n-            new HashSet\u003cReservationAllocation\u003e();\n-        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n-            .values()) {\n-          for (InMemoryReservationAllocation reservation : reservationEntries) {\n-            if (reservation.getEndTime() \u003e tick) {\n-              flattenedReservations.add(reservation);\n-            }\n-          }\n-        }\n-        return Collections.unmodifiableSet(flattenedReservations);\n-      } else {\n-        return Collections.emptySet();\n-      }\n-    } finally {\n-      readLock.unlock();\n-    }\n+    return getReservations(null, new ReservationInterval(tick, tick), \"\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cReservationAllocation\u003e getReservationsAtTime(long tick) {\n    return getReservations(null, new ReservationInterval(tick, tick), \"\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2611. Fixing jenkins findbugs warning and TestRMWebServicesCapacitySched for branch YARN-1051. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit c47464aba407d1dafe10be23fe454f0489cc4367)\n",
      "commitDate": "03/10/14 3:43 PM",
      "commitName": "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400",
      "commitAuthor": "subru",
      "commitDateOld": "03/10/14 3:43 PM",
      "commitNameOld": "5e10a13bb4759984494c6a870c7f08fb6693c9c0",
      "commitAuthorOld": "subru",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public Set\u003cReservationAllocation\u003e getReservationsAtTime(long tick) {\n-    readLock.lock();\n     ReservationInterval searchInterval \u003d\n         new ReservationInterval(tick, Long.MAX_VALUE);\n+    readLock.lock();\n     try {\n       SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n           currentReservations.headMap(searchInterval, true);\n       if (!reservations.isEmpty()) {\n         Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n             new HashSet\u003cReservationAllocation\u003e();\n         for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n             .values()) {\n           for (InMemoryReservationAllocation reservation : reservationEntries) {\n             if (reservation.getEndTime() \u003e tick) {\n               flattenedReservations.add(reservation);\n             }\n           }\n         }\n         return Collections.unmodifiableSet(flattenedReservations);\n       } else {\n         return Collections.emptySet();\n       }\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cReservationAllocation\u003e getReservationsAtTime(long tick) {\n    ReservationInterval searchInterval \u003d\n        new ReservationInterval(tick, Long.MAX_VALUE);\n    readLock.lock();\n    try {\n      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n          currentReservations.headMap(searchInterval, true);\n      if (!reservations.isEmpty()) {\n        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n            new HashSet\u003cReservationAllocation\u003e();\n        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n            .values()) {\n          for (InMemoryReservationAllocation reservation : reservationEntries) {\n            if (reservation.getEndTime() \u003e tick) {\n              flattenedReservations.add(reservation);\n            }\n          }\n        }\n        return Collections.unmodifiableSet(flattenedReservations);\n      } else {\n        return Collections.emptySet();\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,26 @@\n+  public Set\u003cReservationAllocation\u003e getReservationsAtTime(long tick) {\n+    readLock.lock();\n+    ReservationInterval searchInterval \u003d\n+        new ReservationInterval(tick, Long.MAX_VALUE);\n+    try {\n+      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n+          currentReservations.headMap(searchInterval, true);\n+      if (!reservations.isEmpty()) {\n+        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n+            new HashSet\u003cReservationAllocation\u003e();\n+        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n+            .values()) {\n+          for (InMemoryReservationAllocation reservation : reservationEntries) {\n+            if (reservation.getEndTime() \u003e tick) {\n+              flattenedReservations.add(reservation);\n+            }\n+          }\n+        }\n+        return Collections.unmodifiableSet(flattenedReservations);\n+      } else {\n+        return Collections.emptySet();\n+      }\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cReservationAllocation\u003e getReservationsAtTime(long tick) {\n    readLock.lock();\n    ReservationInterval searchInterval \u003d\n        new ReservationInterval(tick, Long.MAX_VALUE);\n    try {\n      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n          currentReservations.headMap(searchInterval, true);\n      if (!reservations.isEmpty()) {\n        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n            new HashSet\u003cReservationAllocation\u003e();\n        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n            .values()) {\n          for (InMemoryReservationAllocation reservation : reservationEntries) {\n            if (reservation.getEndTime() \u003e tick) {\n              flattenedReservations.add(reservation);\n            }\n          }\n        }\n        return Collections.unmodifiableSet(flattenedReservations);\n      } else {\n        return Collections.emptySet();\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}