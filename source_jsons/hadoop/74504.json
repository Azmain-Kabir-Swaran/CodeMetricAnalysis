{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslRpcServer.java",
  "functionName": "create",
  "functionId": "create___connection-Connection(modifiers-final)__saslProperties-Map__String,?__(modifiers-final)__secretManager-SecretManager__TokenIdentifier__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
  "functionStartLine": 124,
  "functionEndLine": 173,
  "numCommitsSeen": 33,
  "timeTaken": 2107,
  "changeHistory": [
    "f799618828b0ba09b694b07eaab0689d31f4954d",
    "fe458a1e3a172bf1745b2c4d555ad9a065fa47b2",
    "011a7b210d852a0a9c7f95116a0bf166fa624b3f",
    "52f0259502de42e433588c299339bf5cd4ba1f8e",
    "5f9b4c14a175873b4f82654513e289c657c694eb"
  ],
  "changeHistoryShort": {
    "f799618828b0ba09b694b07eaab0689d31f4954d": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "fe458a1e3a172bf1745b2c4d555ad9a065fa47b2": "Ybodychange",
    "011a7b210d852a0a9c7f95116a0bf166fa624b3f": "Ybodychange",
    "52f0259502de42e433588c299339bf5cd4ba1f8e": "Ybodychange",
    "5f9b4c14a175873b4f82654513e289c657c694eb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f799618828b0ba09b694b07eaab0689d31f4954d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-10221. Add a plugin to specify SaslProperties for RPC protocol based on connection properties. (Contributed by Benoy Antony and Daryn Sharp)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/14 1:16 PM",
      "commitName": "f799618828b0ba09b694b07eaab0689d31f4954d",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10221. Add a plugin to specify SaslProperties for RPC protocol based on connection properties. (Contributed by Benoy Antony and Daryn Sharp)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579382 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/03/14 1:16 PM",
          "commitName": "f799618828b0ba09b694b07eaab0689d31f4954d",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "05/03/14 2:30 PM",
          "commitNameOld": "097e8b205e9786a6c008225ad24838591d790663",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 13.91,
          "commitsBetweenForRepo": 113,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  public SaslServer create(Connection connection,\n+  public SaslServer create(final Connection connection,\n+                           final Map\u003cString,?\u003e saslProperties,\n                            SecretManager\u003cTokenIdentifier\u003e secretManager\n       ) throws IOException, InterruptedException {\n     UserGroupInformation ugi \u003d null;\n     final CallbackHandler callback;\n     switch (authMethod) {\n       case TOKEN: {\n         callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n         break;\n       }\n       case KERBEROS: {\n         ugi \u003d UserGroupInformation.getCurrentUser();\n         if (serverId.isEmpty()) {\n           throw new AccessControlException(\n               \"Kerberos principal name does NOT have the expected \"\n                   + \"hostname part: \" + ugi.getUserName());\n         }\n         callback \u003d new SaslGssCallbackHandler();\n         break;\n       }\n       default:\n         // we should never be able to get here\n         throw new AccessControlException(\n             \"Server does not support SASL \" + authMethod);\n     }\n     \n     final SaslServer saslServer;\n     if (ugi !\u003d null) {\n       saslServer \u003d ugi.doAs(\n         new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n           @Override\n           public SaslServer run() throws SaslException  {\n             return saslFactory.createSaslServer(mechanism, protocol, serverId,\n-                SaslRpcServer.SASL_PROPS, callback);\n+                saslProperties, callback);\n           }\n         });\n     } else {\n       saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n-          SaslRpcServer.SASL_PROPS, callback);\n+          saslProperties, callback);\n     }\n     if (saslServer \u003d\u003d null) {\n       throw new AccessControlException(\n           \"Unable to find SASL server implementation for \" + mechanism);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n     }\n     return saslServer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SaslServer create(final Connection connection,\n                           final Map\u003cString,?\u003e saslProperties,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d null;\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        ugi \u003d UserGroupInformation.getCurrentUser();\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    final SaslServer saslServer;\n    if (ugi !\u003d null) {\n      saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                saslProperties, callback);\n          }\n        });\n    } else {\n      saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n          saslProperties, callback);\n    }\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
          "extendedDetails": {
            "oldValue": "[connection-Connection, secretManager-SecretManager\u003cTokenIdentifier\u003e]",
            "newValue": "[connection-Connection(modifiers-final), saslProperties-Map\u003cString,?\u003e(modifiers-final), secretManager-SecretManager\u003cTokenIdentifier\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10221. Add a plugin to specify SaslProperties for RPC protocol based on connection properties. (Contributed by Benoy Antony and Daryn Sharp)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579382 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/03/14 1:16 PM",
          "commitName": "f799618828b0ba09b694b07eaab0689d31f4954d",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "05/03/14 2:30 PM",
          "commitNameOld": "097e8b205e9786a6c008225ad24838591d790663",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 13.91,
          "commitsBetweenForRepo": 113,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  public SaslServer create(Connection connection,\n+  public SaslServer create(final Connection connection,\n+                           final Map\u003cString,?\u003e saslProperties,\n                            SecretManager\u003cTokenIdentifier\u003e secretManager\n       ) throws IOException, InterruptedException {\n     UserGroupInformation ugi \u003d null;\n     final CallbackHandler callback;\n     switch (authMethod) {\n       case TOKEN: {\n         callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n         break;\n       }\n       case KERBEROS: {\n         ugi \u003d UserGroupInformation.getCurrentUser();\n         if (serverId.isEmpty()) {\n           throw new AccessControlException(\n               \"Kerberos principal name does NOT have the expected \"\n                   + \"hostname part: \" + ugi.getUserName());\n         }\n         callback \u003d new SaslGssCallbackHandler();\n         break;\n       }\n       default:\n         // we should never be able to get here\n         throw new AccessControlException(\n             \"Server does not support SASL \" + authMethod);\n     }\n     \n     final SaslServer saslServer;\n     if (ugi !\u003d null) {\n       saslServer \u003d ugi.doAs(\n         new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n           @Override\n           public SaslServer run() throws SaslException  {\n             return saslFactory.createSaslServer(mechanism, protocol, serverId,\n-                SaslRpcServer.SASL_PROPS, callback);\n+                saslProperties, callback);\n           }\n         });\n     } else {\n       saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n-          SaslRpcServer.SASL_PROPS, callback);\n+          saslProperties, callback);\n     }\n     if (saslServer \u003d\u003d null) {\n       throw new AccessControlException(\n           \"Unable to find SASL server implementation for \" + mechanism);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n     }\n     return saslServer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SaslServer create(final Connection connection,\n                           final Map\u003cString,?\u003e saslProperties,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d null;\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        ugi \u003d UserGroupInformation.getCurrentUser();\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    final SaslServer saslServer;\n    if (ugi !\u003d null) {\n      saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                saslProperties, callback);\n          }\n        });\n    } else {\n      saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n          saslProperties, callback);\n    }\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-10221. Add a plugin to specify SaslProperties for RPC protocol based on connection properties. (Contributed by Benoy Antony and Daryn Sharp)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579382 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/03/14 1:16 PM",
          "commitName": "f799618828b0ba09b694b07eaab0689d31f4954d",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "05/03/14 2:30 PM",
          "commitNameOld": "097e8b205e9786a6c008225ad24838591d790663",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 13.91,
          "commitsBetweenForRepo": 113,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  public SaslServer create(Connection connection,\n+  public SaslServer create(final Connection connection,\n+                           final Map\u003cString,?\u003e saslProperties,\n                            SecretManager\u003cTokenIdentifier\u003e secretManager\n       ) throws IOException, InterruptedException {\n     UserGroupInformation ugi \u003d null;\n     final CallbackHandler callback;\n     switch (authMethod) {\n       case TOKEN: {\n         callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n         break;\n       }\n       case KERBEROS: {\n         ugi \u003d UserGroupInformation.getCurrentUser();\n         if (serverId.isEmpty()) {\n           throw new AccessControlException(\n               \"Kerberos principal name does NOT have the expected \"\n                   + \"hostname part: \" + ugi.getUserName());\n         }\n         callback \u003d new SaslGssCallbackHandler();\n         break;\n       }\n       default:\n         // we should never be able to get here\n         throw new AccessControlException(\n             \"Server does not support SASL \" + authMethod);\n     }\n     \n     final SaslServer saslServer;\n     if (ugi !\u003d null) {\n       saslServer \u003d ugi.doAs(\n         new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n           @Override\n           public SaslServer run() throws SaslException  {\n             return saslFactory.createSaslServer(mechanism, protocol, serverId,\n-                SaslRpcServer.SASL_PROPS, callback);\n+                saslProperties, callback);\n           }\n         });\n     } else {\n       saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n-          SaslRpcServer.SASL_PROPS, callback);\n+          saslProperties, callback);\n     }\n     if (saslServer \u003d\u003d null) {\n       throw new AccessControlException(\n           \"Unable to find SASL server implementation for \" + mechanism);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n     }\n     return saslServer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SaslServer create(final Connection connection,\n                           final Map\u003cString,?\u003e saslProperties,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d null;\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        ugi \u003d UserGroupInformation.getCurrentUser();\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    final SaslServer saslServer;\n    if (ugi !\u003d null) {\n      saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                saslProperties, callback);\n          }\n        });\n    } else {\n      saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n          saslProperties, callback);\n    }\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
          "extendedDetails": {
            "oldValue": "[connection-Connection, secretManager-SecretManager\u003cTokenIdentifier\u003e]",
            "newValue": "[connection-Connection(modifiers-final), saslProperties-Map\u003cString,?\u003e(modifiers-final), secretManager-SecretManager\u003cTokenIdentifier\u003e]"
          }
        }
      ]
    },
    "fe458a1e3a172bf1745b2c4d555ad9a065fa47b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10173. Remove UGI from DIGEST-MD5 SASL server creation. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554815 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 6:58 AM",
      "commitName": "fe458a1e3a172bf1745b2c4d555ad9a065fa47b2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "19/12/13 10:21 AM",
      "commitNameOld": "011a7b210d852a0a9c7f95116a0bf166fa624b3f",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 13.86,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,49 @@\n   public SaslServer create(Connection connection,\n                            SecretManager\u003cTokenIdentifier\u003e secretManager\n       ) throws IOException, InterruptedException {\n-    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    UserGroupInformation ugi \u003d null;\n     final CallbackHandler callback;\n     switch (authMethod) {\n       case TOKEN: {\n         callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n         break;\n       }\n       case KERBEROS: {\n+        ugi \u003d UserGroupInformation.getCurrentUser();\n         if (serverId.isEmpty()) {\n           throw new AccessControlException(\n               \"Kerberos principal name does NOT have the expected \"\n                   + \"hostname part: \" + ugi.getUserName());\n         }\n         callback \u003d new SaslGssCallbackHandler();\n         break;\n       }\n       default:\n         // we should never be able to get here\n         throw new AccessControlException(\n             \"Server does not support SASL \" + authMethod);\n     }\n     \n-    SaslServer saslServer \u003d ugi.doAs(\n+    final SaslServer saslServer;\n+    if (ugi !\u003d null) {\n+      saslServer \u003d ugi.doAs(\n         new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n           @Override\n           public SaslServer run() throws SaslException  {\n             return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                 SaslRpcServer.SASL_PROPS, callback);\n           }\n         });\n+    } else {\n+      saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n+          SaslRpcServer.SASL_PROPS, callback);\n+    }\n     if (saslServer \u003d\u003d null) {\n       throw new AccessControlException(\n           \"Unable to find SASL server implementation for \" + mechanism);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n     }\n     return saslServer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SaslServer create(Connection connection,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d null;\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        ugi \u003d UserGroupInformation.getCurrentUser();\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    final SaslServer saslServer;\n    if (ugi !\u003d null) {\n      saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                SaslRpcServer.SASL_PROPS, callback);\n          }\n        });\n    } else {\n      saslServer \u003d saslFactory.createSaslServer(mechanism, protocol, serverId,\n          SaslRpcServer.SASL_PROPS, callback);\n    }\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
      "extendedDetails": {}
    },
    "011a7b210d852a0a9c7f95116a0bf166fa624b3f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10172. Cache SASL server factories (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/13 10:21 AM",
      "commitName": "011a7b210d852a0a9c7f95116a0bf166fa624b3f",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "11/10/13 2:49 PM",
      "commitNameOld": "f7eaacc103344f5fd81dd69584c93fb99d8b94c9",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 68.86,
      "commitsBetweenForRepo": 431,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public SaslServer create(Connection connection,\n                            SecretManager\u003cTokenIdentifier\u003e secretManager\n       ) throws IOException, InterruptedException {\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     final CallbackHandler callback;\n     switch (authMethod) {\n       case TOKEN: {\n         callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n         break;\n       }\n       case KERBEROS: {\n         if (serverId.isEmpty()) {\n           throw new AccessControlException(\n               \"Kerberos principal name does NOT have the expected \"\n                   + \"hostname part: \" + ugi.getUserName());\n         }\n         callback \u003d new SaslGssCallbackHandler();\n         break;\n       }\n       default:\n         // we should never be able to get here\n         throw new AccessControlException(\n             \"Server does not support SASL \" + authMethod);\n     }\n     \n     SaslServer saslServer \u003d ugi.doAs(\n         new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n           @Override\n           public SaslServer run() throws SaslException  {\n-            return Sasl.createSaslServer(mechanism, protocol, serverId,\n+            return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                 SaslRpcServer.SASL_PROPS, callback);\n           }\n         });\n     if (saslServer \u003d\u003d null) {\n       throw new AccessControlException(\n           \"Unable to find SASL server implementation for \" + mechanism);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n     }\n     return saslServer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SaslServer create(Connection connection,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    SaslServer saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return saslFactory.createSaslServer(mechanism, protocol, serverId,\n                SaslRpcServer.SASL_PROPS, callback);\n          }\n        });\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
      "extendedDetails": {}
    },
    "52f0259502de42e433588c299339bf5cd4ba1f8e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9880. SASL changes from HADOOP-9421 breaks Secure HA NN. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514913 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/08/13 3:35 PM",
      "commitName": "52f0259502de42e433588c299339bf5cd4ba1f8e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "15/08/13 12:22 PM",
      "commitNameOld": "0e47ebb32f62b9312b44ccbec97e302674cdee80",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   public SaslServer create(Connection connection,\n                            SecretManager\u003cTokenIdentifier\u003e secretManager\n       ) throws IOException, InterruptedException {\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     final CallbackHandler callback;\n     switch (authMethod) {\n       case TOKEN: {\n-        secretManager.checkAvailableForRead();\n         callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n         break;\n       }\n       case KERBEROS: {\n         if (serverId.isEmpty()) {\n           throw new AccessControlException(\n               \"Kerberos principal name does NOT have the expected \"\n                   + \"hostname part: \" + ugi.getUserName());\n         }\n         callback \u003d new SaslGssCallbackHandler();\n         break;\n       }\n       default:\n         // we should never be able to get here\n         throw new AccessControlException(\n             \"Server does not support SASL \" + authMethod);\n     }\n     \n     SaslServer saslServer \u003d ugi.doAs(\n         new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n           @Override\n           public SaslServer run() throws SaslException  {\n             return Sasl.createSaslServer(mechanism, protocol, serverId,\n                 SaslRpcServer.SASL_PROPS, callback);\n           }\n         });\n     if (saslServer \u003d\u003d null) {\n       throw new AccessControlException(\n           \"Unable to find SASL server implementation for \" + mechanism);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n     }\n     return saslServer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SaslServer create(Connection connection,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    SaslServer saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return Sasl.createSaslServer(mechanism, protocol, serverId,\n                SaslRpcServer.SASL_PROPS, callback);\n          }\n        });\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java",
      "extendedDetails": {}
    },
    "5f9b4c14a175873b4f82654513e289c657c694eb": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 1:09 PM",
      "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthor": "Daryn Sharp",
      "diff": "@@ -0,0 +1,43 @@\n+  public SaslServer create(Connection connection,\n+                           SecretManager\u003cTokenIdentifier\u003e secretManager\n+      ) throws IOException, InterruptedException {\n+    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    final CallbackHandler callback;\n+    switch (authMethod) {\n+      case TOKEN: {\n+        secretManager.checkAvailableForRead();\n+        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n+        break;\n+      }\n+      case KERBEROS: {\n+        if (serverId.isEmpty()) {\n+          throw new AccessControlException(\n+              \"Kerberos principal name does NOT have the expected \"\n+                  + \"hostname part: \" + ugi.getUserName());\n+        }\n+        callback \u003d new SaslGssCallbackHandler();\n+        break;\n+      }\n+      default:\n+        // we should never be able to get here\n+        throw new AccessControlException(\n+            \"Server does not support SASL \" + authMethod);\n+    }\n+    \n+    SaslServer saslServer \u003d ugi.doAs(\n+        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n+          @Override\n+          public SaslServer run() throws SaslException  {\n+            return Sasl.createSaslServer(mechanism, protocol, serverId,\n+                SaslRpcServer.SASL_PROPS, callback);\n+          }\n+        });\n+    if (saslServer \u003d\u003d null) {\n+      throw new AccessControlException(\n+          \"Unable to find SASL server implementation for \" + mechanism);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n+    }\n+    return saslServer;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SaslServer create(Connection connection,\n                           SecretManager\u003cTokenIdentifier\u003e secretManager\n      ) throws IOException, InterruptedException {\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    final CallbackHandler callback;\n    switch (authMethod) {\n      case TOKEN: {\n        secretManager.checkAvailableForRead();\n        callback \u003d new SaslDigestCallbackHandler(secretManager, connection);\n        break;\n      }\n      case KERBEROS: {\n        if (serverId.isEmpty()) {\n          throw new AccessControlException(\n              \"Kerberos principal name does NOT have the expected \"\n                  + \"hostname part: \" + ugi.getUserName());\n        }\n        callback \u003d new SaslGssCallbackHandler();\n        break;\n      }\n      default:\n        // we should never be able to get here\n        throw new AccessControlException(\n            \"Server does not support SASL \" + authMethod);\n    }\n    \n    SaslServer saslServer \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cSaslServer\u003e() {\n          @Override\n          public SaslServer run() throws SaslException  {\n            return Sasl.createSaslServer(mechanism, protocol, serverId,\n                SaslRpcServer.SASL_PROPS, callback);\n          }\n        });\n    if (saslServer \u003d\u003d null) {\n      throw new AccessControlException(\n          \"Unable to find SASL server implementation for \" + mechanism);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n    }\n    return saslServer;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcServer.java"
    }
  }
}