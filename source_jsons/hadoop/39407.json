{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ManagedParentQueue.java",
  "functionName": "updateQueueCapacities",
  "functionId": "updateQueueCapacities___queueCapacities-QueueCapacities",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java",
  "functionStartLine": 201,
  "functionEndLine": 242,
  "numCommitsSeen": 8,
  "timeTaken": 806,
  "changeHistory": [
    "450e5aa9dd49eae46a0e05151bbddc56083eafd5"
  ],
  "changeHistoryShort": {
    "450e5aa9dd49eae46a0e05151bbddc56083eafd5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "450e5aa9dd49eae46a0e05151bbddc56083eafd5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-10154. Addendum Patch which fixes below bugs\n\n1. RM fails to start when LeafQueueTemplate max capacity is not specified.\n2. Job stuck in ACCEPTED state with DominantResourceCalculator as Queue\n   Capacity is set to NaN during RM startup with clusterResource is zero.\n\nReviewed by Sunil G and Manikandan R.\n",
      "commitDate": "13/05/20 2:05 AM",
      "commitName": "450e5aa9dd49eae46a0e05151bbddc56083eafd5",
      "commitAuthor": "Prabhu Joseph",
      "diff": "@@ -0,0 +1,42 @@\n+  private void updateQueueCapacities(QueueCapacities queueCapacities) {\n+    for (String label : queueCapacities.getExistingNodeLabels()) {\n+      queueCapacities.setCapacity(label,\n+          this.csContext.getResourceCalculator().divide(\n+              this.csContext.getClusterResource(),\n+              this.csContext.getConfiguration().getMinimumResourceRequirement(\n+                  label,\n+                  this.csContext.getConfiguration()\n+                      .getAutoCreatedQueueTemplateConfPrefix(getQueuePath()),\n+                  resourceTypes),\n+              getQueueResourceQuotas().getConfiguredMinResource(label)));\n+\n+      Resource childMaxResource \u003d this.csContext.getConfiguration()\n+          .getMaximumResourceRequirement(label,\n+              this.csContext.getConfiguration()\n+                  .getAutoCreatedQueueTemplateConfPrefix(getQueuePath()),\n+              resourceTypes);\n+      Resource parentMaxRes \u003d getQueueResourceQuotas()\n+          .getConfiguredMaxResource(label);\n+\n+      Resource effMaxResource \u003d Resources.min(\n+          this.csContext.getResourceCalculator(),\n+          this.csContext.getClusterResource(),\n+          childMaxResource.equals(Resources.none()) ? parentMaxRes\n+              : childMaxResource,\n+          parentMaxRes);\n+\n+      queueCapacities.setMaximumCapacity(\n+          label, this.csContext.getResourceCalculator().divide(\n+               this.csContext.getClusterResource(),\n+               effMaxResource,\n+               getQueueResourceQuotas().getConfiguredMaxResource(label)));\n+\n+      queueCapacities.setAbsoluteCapacity(\n+          label, queueCapacities.getCapacity(label)\n+          * getQueueCapacities().getAbsoluteCapacity(label));\n+\n+      queueCapacities.setAbsoluteMaximumCapacity(label,\n+          queueCapacities.getMaximumCapacity(label)\n+          * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateQueueCapacities(QueueCapacities queueCapacities) {\n    for (String label : queueCapacities.getExistingNodeLabels()) {\n      queueCapacities.setCapacity(label,\n          this.csContext.getResourceCalculator().divide(\n              this.csContext.getClusterResource(),\n              this.csContext.getConfiguration().getMinimumResourceRequirement(\n                  label,\n                  this.csContext.getConfiguration()\n                      .getAutoCreatedQueueTemplateConfPrefix(getQueuePath()),\n                  resourceTypes),\n              getQueueResourceQuotas().getConfiguredMinResource(label)));\n\n      Resource childMaxResource \u003d this.csContext.getConfiguration()\n          .getMaximumResourceRequirement(label,\n              this.csContext.getConfiguration()\n                  .getAutoCreatedQueueTemplateConfPrefix(getQueuePath()),\n              resourceTypes);\n      Resource parentMaxRes \u003d getQueueResourceQuotas()\n          .getConfiguredMaxResource(label);\n\n      Resource effMaxResource \u003d Resources.min(\n          this.csContext.getResourceCalculator(),\n          this.csContext.getClusterResource(),\n          childMaxResource.equals(Resources.none()) ? parentMaxRes\n              : childMaxResource,\n          parentMaxRes);\n\n      queueCapacities.setMaximumCapacity(\n          label, this.csContext.getResourceCalculator().divide(\n               this.csContext.getClusterResource(),\n               effMaxResource,\n               getQueueResourceQuotas().getConfiguredMaxResource(label)));\n\n      queueCapacities.setAbsoluteCapacity(\n          label, queueCapacities.getCapacity(label)\n          * getQueueCapacities().getAbsoluteCapacity(label));\n\n      queueCapacities.setAbsoluteMaximumCapacity(label,\n          queueCapacities.getMaximumCapacity(label)\n          * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java"
    }
  }
}