{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeReference.java",
  "functionName": "destroyAndCollectBlocks",
  "functionId": "destroyAndCollectBlocks___reclaimContext-ReclaimContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
  "functionStartLine": 683,
  "functionEndLine": 724,
  "numCommitsSeen": 154,
  "timeTaken": 5577,
  "changeHistory": [
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "4536399d47f6c061e149e2504600804a0f1e093d",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
    "8df119da214babde03e73243c7ca4cfe6d0ca562",
    "f2ad787a276902359f964e4b89d8aca8ebb60de8",
    "d46e1608626c64400d2b6c7693a4c035783c55b4",
    "72d783374c1e302492d7ce537222b563241038bb",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b",
    "9701555899315c94584b24d8717c1d7540a4a491"
  ],
  "changeHistoryShort": {
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ybodychange",
    "4536399d47f6c061e149e2504600804a0f1e093d": "Ymultichange(Yparameterchange,Ybodychange)",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Ybodychange)",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": "Ybodychange",
    "8df119da214babde03e73243c7ca4cfe6d0ca562": "Ybodychange",
    "f2ad787a276902359f964e4b89d8aca8ebb60de8": "Ybodychange",
    "d46e1608626c64400d2b6c7693a4c035783c55b4": "Ybodychange",
    "72d783374c1e302492d7ce537222b563241038bb": "Ymultichange(Ymodifierchange,Ybodychange)",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": "Ymultichange(Yparameterchange,Ybodychange)",
    "9701555899315c94584b24d8717c1d7540a4a491": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "09/05/15 10:51 PM",
      "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.96,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n     public void destroyAndCollectBlocks(ReclaimContext reclaimContext) {\n+      // since we count everything of the subtree for the quota usage of a\n+      // dst reference node, here we should just simply do a quota computation.\n+      // then to avoid double counting, we pass a different QuotaDelta to other\n+      // calls\n+      reclaimContext.quotaDelta().add(computeQuotaUsage(reclaimContext.bsps));\n+      ReclaimContext newCtx \u003d reclaimContext.getCopy();\n+\n       if (removeReference(this) \u003c\u003d 0) {\n-        getReferredINode().destroyAndCollectBlocks(reclaimContext);\n+        getReferredINode().destroyAndCollectBlocks(newCtx);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n-          referred.cleanSubtree(reclaimContext, snapshot, prior);\n+          referred.cleanSubtree(newCtx, snapshot, prior);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n-          try {\n-            DirectoryWithSnapshotFeature.destroyDstSubtree(\n-                reclaimContext, dir, snapshot, prior);\n-          } catch (QuotaExceededException e) {\n-            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n-          }\n+          DirectoryWithSnapshotFeature.destroyDstSubtree(newCtx, dir,\n+              snapshot, prior);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(ReclaimContext reclaimContext) {\n      // since we count everything of the subtree for the quota usage of a\n      // dst reference node, here we should just simply do a quota computation.\n      // then to avoid double counting, we pass a different QuotaDelta to other\n      // calls\n      reclaimContext.quotaDelta().add(computeQuotaUsage(reclaimContext.bsps));\n      ReclaimContext newCtx \u003d reclaimContext.getCopy();\n\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(newCtx);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(newCtx, snapshot, prior);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          DirectoryWithSnapshotFeature.destroyDstSubtree(newCtx, dir,\n              snapshot, prior);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "4536399d47f6c061e149e2504600804a0f1e093d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
      "commitDate": "09/05/15 10:51 PM",
      "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,39 @@\n-    public void destroyAndCollectBlocks(\n-        BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks,\n-        final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n+    public void destroyAndCollectBlocks(ReclaimContext reclaimContext) {\n       if (removeReference(this) \u003c\u003d 0) {\n-        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n-            removedINodes, removedUCFiles);\n+        getReferredINode().destroyAndCollectBlocks(reclaimContext);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n-          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n-              removedINodes, removedUCFiles);\n+          referred.cleanSubtree(reclaimContext, snapshot, prior);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n-            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n-                prior, collectedBlocks, removedINodes, removedUCFiles);\n+            DirectoryWithSnapshotFeature.destroyDstSubtree(\n+                reclaimContext, dir, snapshot, prior);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(ReclaimContext reclaimContext) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(reclaimContext);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(reclaimContext, snapshot, prior);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(\n                reclaimContext, dir, snapshot, prior);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, collectedBlocks-BlocksMapUpdateInfo, removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e]",
            "newValue": "[reclaimContext-ReclaimContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,39 @@\n-    public void destroyAndCollectBlocks(\n-        BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks,\n-        final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n+    public void destroyAndCollectBlocks(ReclaimContext reclaimContext) {\n       if (removeReference(this) \u003c\u003d 0) {\n-        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n-            removedINodes, removedUCFiles);\n+        getReferredINode().destroyAndCollectBlocks(reclaimContext);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n-          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n-              removedINodes, removedUCFiles);\n+          referred.cleanSubtree(reclaimContext, snapshot, prior);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n-            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n-                prior, collectedBlocks, removedINodes, removedUCFiles);\n+            DirectoryWithSnapshotFeature.destroyDstSubtree(\n+                reclaimContext, dir, snapshot, prior);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(ReclaimContext reclaimContext) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(reclaimContext);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(reclaimContext, snapshot, prior);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(\n                reclaimContext, dir, snapshot, prior);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {}
        }
      ]
    },
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
      "commitDate": "08/05/15 11:04 PM",
      "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/04/15 9:20 PM",
          "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 36.07,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n-    public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,\n-        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n+    public void destroyAndCollectBlocks(\n+        BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks,\n+        final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n-            removedINodes);\n+            removedINodes, removedUCFiles);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n           referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n-              removedINodes);\n+              removedINodes, removedUCFiles);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n             DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n-                prior, collectedBlocks, removedINodes);\n+                prior, collectedBlocks, removedINodes, removedUCFiles);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(\n        BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks,\n        final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n            removedINodes, removedUCFiles);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n              removedINodes, removedUCFiles);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n                prior, collectedBlocks, removedINodes, removedUCFiles);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, collectedBlocks-BlocksMapUpdateInfo, removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite, collectedBlocks-BlocksMapUpdateInfo, removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/04/15 9:20 PM",
          "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 36.07,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n-    public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,\n-        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n+    public void destroyAndCollectBlocks(\n+        BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks,\n+        final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n-            removedINodes);\n+            removedINodes, removedUCFiles);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n           referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n-              removedINodes);\n+              removedINodes, removedUCFiles);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n             DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n-                prior, collectedBlocks, removedINodes);\n+                prior, collectedBlocks, removedINodes, removedUCFiles);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(\n        BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks,\n        final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n            removedINodes, removedUCFiles);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n              removedINodes, removedUCFiles);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n                prior, collectedBlocks, removedINodes, removedUCFiles);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public void destroyAndCollectBlocks(\n+    public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n-        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n+        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n-          referred.cleanSubtree(snapshot, prior, collectedBlocks,\n+          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n               removedINodes);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n-            DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n+            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n                 prior, collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n              removedINodes);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n                prior, collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {
            "oldValue": "[collectedBlocks-BlocksMapUpdateInfo, removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite, collectedBlocks-BlocksMapUpdateInfo, removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public void destroyAndCollectBlocks(\n+    public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n-        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n+        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           // when calling cleanSubtree of the referred node, since we\n           // compute quota usage updates before calling this destroy\n           // function, we use true for countDiffChange\n-          referred.cleanSubtree(snapshot, prior, collectedBlocks,\n+          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n               removedINodes);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n-            DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n+            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n                 prior, collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(bsps, collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(bsps, snapshot, prior, collectedBlocks,\n              removedINodes);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(bsps, dir, snapshot,\n                prior, collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {}
        }
      ]
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/09/14 11:37 AM",
      "commitNameOld": "300cb12bef9802f328cfb37aaab5af71137504ff",
      "commitAuthorOld": "",
      "daysBetweenCommits": 150.25,
      "commitsBetweenForRepo": 1218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,42 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n         int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n-          try {\n-            // when calling cleanSubtree of the referred node, since we \n-            // compute quota usage updates before calling this destroy \n-            // function, we use true for countDiffChange\n-            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n-                removedINodes, true);\n-          } catch (QuotaExceededException e) {\n-            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n-          }\n+          // when calling cleanSubtree of the referred node, since we\n+          // compute quota usage updates before calling this destroy\n+          // function, we use true for countDiffChange\n+          referred.cleanSubtree(snapshot, prior, collectedBlocks,\n+              removedINodes);\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n             DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n                 prior, collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          // when calling cleanSubtree of the referred node, since we\n          // compute quota usage updates before calling this destroy\n          // function, we use true for countDiffChange\n          referred.cleanSubtree(snapshot, prior, collectedBlocks,\n              removedINodes);\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n                prior, collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/12/13 2:13 AM",
      "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 24.44,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n-        Snapshot prior \u003d getPriorSnapshot(this);\n+        int prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n-        Preconditions.checkState(prior !\u003d null);\n+        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n         // identify the snapshot created after prior\n-        Snapshot snapshot \u003d getSelfSnapshot(prior);\n+        int snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred.isFile()) {\n           // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n           Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           try {\n             // when calling cleanSubtree of the referred node, since we \n             // compute quota usage updates before calling this destroy \n             // function, we use true for countDiffChange\n             referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                 removedINodes, true);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectory with snapshot\n           INodeDirectory dir \u003d referred.asDirectory();\n           Preconditions.checkState(dir.isWithSnapshot());\n           try {\n             DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n                 prior, collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        int prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d Snapshot.NO_SNAPSHOT_ID);\n        // identify the snapshot created after prior\n        int snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          try {\n            // when calling cleanSubtree of the referred node, since we \n            // compute quota usage updates before calling this destroy \n            // function, we use true for countDiffChange\n            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                removedINodes, true);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n                prior, collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/12/13 10:17 PM",
      "commitNameOld": "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         Snapshot prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d null);\n         // identify the snapshot created after prior\n         Snapshot snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n-        if (referred.isFile() \u0026\u0026 referred.asFile().isWithSnapshot()) {\n-          // if referred is a file, it must be a file with Snapshot since we did\n+        if (referred.isFile()) {\n+          // if referred is a file, it must be a file with snapshot since we did\n           // recordModification before the rename\n           INodeFile file \u003d referred.asFile();\n+          Preconditions.checkState(file.isWithSnapshot());\n           // make sure we mark the file as deleted\n           file.getFileWithSnapshotFeature().deleteCurrentFile();\n           try {\n             // when calling cleanSubtree of the referred node, since we \n             // compute quota usage updates before calling this destroy \n             // function, we use true for countDiffChange\n             referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                 removedINodes, true);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n-        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n+        } else if (referred.isDirectory()) {\n           // similarly, if referred is a directory, it must be an\n-          // INodeDirectoryWithSnapshot\n-          INodeDirectoryWithSnapshot sdir \u003d \n-              (INodeDirectoryWithSnapshot) referred;\n+          // INodeDirectory with snapshot\n+          INodeDirectory dir \u003d referred.asDirectory();\n+          Preconditions.checkState(dir.isWithSnapshot());\n           try {\n-            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n-                collectedBlocks, removedINodes);\n+            DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n+                prior, collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile()) {\n          // if referred is a file, it must be a file with snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          Preconditions.checkState(file.isWithSnapshot());\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          try {\n            // when calling cleanSubtree of the referred node, since we \n            // compute quota usage updates before calling this destroy \n            // function, we use true for countDiffChange\n            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                removedINodes, true);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        } else if (referred.isDirectory()) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectory with snapshot\n          INodeDirectory dir \u003d referred.asDirectory();\n          Preconditions.checkState(dir.isWithSnapshot());\n          try {\n            DirectoryWithSnapshotFeature.destroyDstSubtree(dir, snapshot,\n                prior, collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5554. Flatten INodeFile hierarchy: Replace INodeFileWithSnapshot with FileWithSnapshotFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:17 PM",
      "commitName": "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/11/13 12:32 PM",
      "commitNameOld": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         Snapshot prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d null);\n         // identify the snapshot created after prior\n         Snapshot snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n-        if (referred instanceof INodeFileWithSnapshot) {\n-          // if referred is a file, it must be a FileWithSnapshot since we did\n+        if (referred.isFile() \u0026\u0026 referred.asFile().isWithSnapshot()) {\n+          // if referred is a file, it must be a file with Snapshot since we did\n           // recordModification before the rename\n-          INodeFileWithSnapshot sfile \u003d (INodeFileWithSnapshot) referred;\n+          INodeFile file \u003d referred.asFile();\n           // make sure we mark the file as deleted\n-          sfile.deleteCurrentFile();\n+          file.getFileWithSnapshotFeature().deleteCurrentFile();\n           try {\n             // when calling cleanSubtree of the referred node, since we \n             // compute quota usage updates before calling this destroy \n             // function, we use true for countDiffChange\n             referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                 removedINodes, true);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         } else if (referred instanceof INodeDirectoryWithSnapshot) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectoryWithSnapshot\n           INodeDirectoryWithSnapshot sdir \u003d \n               (INodeDirectoryWithSnapshot) referred;\n           try {\n             INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                 collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred.isFile() \u0026\u0026 referred.asFile().isWithSnapshot()) {\n          // if referred is a file, it must be a file with Snapshot since we did\n          // recordModification before the rename\n          INodeFile file \u003d referred.asFile();\n          // make sure we mark the file as deleted\n          file.getFileWithSnapshotFeature().deleteCurrentFile();\n          try {\n            // when calling cleanSubtree of the referred node, since we \n            // compute quota usage updates before calling this destroy \n            // function, we use true for countDiffChange\n            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                removedINodes, true);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectoryWithSnapshot\n          INodeDirectoryWithSnapshot sdir \u003d \n              (INodeDirectoryWithSnapshot) referred;\n          try {\n            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "8df119da214babde03e73243c7ca4cfe6d0ca562": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5537. Remove FileWithSnapshot interface.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 12:32 PM",
      "commitName": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "20/11/13 7:17 PM",
      "commitNameOld": "5f458ef23f097c784f12a973b326f7e1254ae0b2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.72,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         Snapshot prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d null);\n         // identify the snapshot created after prior\n         Snapshot snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n-        if (referred instanceof FileWithSnapshot) {\n+        if (referred instanceof INodeFileWithSnapshot) {\n           // if referred is a file, it must be a FileWithSnapshot since we did\n           // recordModification before the rename\n-          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n+          INodeFileWithSnapshot sfile \u003d (INodeFileWithSnapshot) referred;\n           // make sure we mark the file as deleted\n           sfile.deleteCurrentFile();\n           try {\n             // when calling cleanSubtree of the referred node, since we \n             // compute quota usage updates before calling this destroy \n             // function, we use true for countDiffChange\n             referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                 removedINodes, true);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         } else if (referred instanceof INodeDirectoryWithSnapshot) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectoryWithSnapshot\n           INodeDirectoryWithSnapshot sdir \u003d \n               (INodeDirectoryWithSnapshot) referred;\n           try {\n             INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                 collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred instanceof INodeFileWithSnapshot) {\n          // if referred is a file, it must be a FileWithSnapshot since we did\n          // recordModification before the rename\n          INodeFileWithSnapshot sfile \u003d (INodeFileWithSnapshot) referred;\n          // make sure we mark the file as deleted\n          sfile.deleteCurrentFile();\n          try {\n            // when calling cleanSubtree of the referred node, since we \n            // compute quota usage updates before calling this destroy \n            // function, we use true for countDiffChange\n            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                removedINodes, true);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectoryWithSnapshot\n          INodeDirectoryWithSnapshot sdir \u003d \n              (INodeDirectoryWithSnapshot) referred;\n          try {\n            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "f2ad787a276902359f964e4b89d8aca8ebb60de8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5476. Snapshot: clean the blocks/files/directories under a renamed file/directory while deletion. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540142 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/13 10:18 AM",
      "commitName": "f2ad787a276902359f964e4b89d8aca8ebb60de8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "19/06/13 10:10 PM",
      "commitNameOld": "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 141.55,
      "commitsBetweenForRepo": 836,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         Snapshot prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d null);\n         // identify the snapshot created after prior\n         Snapshot snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred instanceof FileWithSnapshot) {\n           // if referred is a file, it must be a FileWithSnapshot since we did\n           // recordModification before the rename\n           FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n           // make sure we mark the file as deleted\n           sfile.deleteCurrentFile();\n-          if (snapshot !\u003d null) {\n-            try {\n-              // when calling cleanSubtree of the referred node, since we \n-              // compute quota usage updates before calling this destroy \n-              // function, we use true for countDiffChange\n-              referred.cleanSubtree(snapshot, prior, collectedBlocks,\n-                  removedINodes, true);\n-            } catch (QuotaExceededException e) {\n-              LOG.error(\"should not exceed quota while snapshot deletion\", e);\n-            }\n+          try {\n+            // when calling cleanSubtree of the referred node, since we \n+            // compute quota usage updates before calling this destroy \n+            // function, we use true for countDiffChange\n+            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n+                removedINodes, true);\n+          } catch (QuotaExceededException e) {\n+            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         } else if (referred instanceof INodeDirectoryWithSnapshot) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectoryWithSnapshot\n           INodeDirectoryWithSnapshot sdir \u003d \n               (INodeDirectoryWithSnapshot) referred;\n           try {\n             INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                 collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred instanceof FileWithSnapshot) {\n          // if referred is a file, it must be a FileWithSnapshot since we did\n          // recordModification before the rename\n          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n          // make sure we mark the file as deleted\n          sfile.deleteCurrentFile();\n          try {\n            // when calling cleanSubtree of the referred node, since we \n            // compute quota usage updates before calling this destroy \n            // function, we use true for countDiffChange\n            referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                removedINodes, true);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectoryWithSnapshot\n          INodeDirectoryWithSnapshot sdir \u003d \n              (INodeDirectoryWithSnapshot) referred;\n          try {\n            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "d46e1608626c64400d2b6c7693a4c035783c55b4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 1:15 PM",
      "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "29/05/13 1:54 PM",
      "commitNameOld": "973017cab7bbdded68a0c74b137ab52fbd7d6d83",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 7.97,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n     public void destroyAndCollectBlocks(\n         BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n       if (removeReference(this) \u003c\u003d 0) {\n         getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n             removedINodes);\n       } else {\n         // we will clean everything, including files, directories, and \n         // snapshots, that were created after this prior snapshot\n         Snapshot prior \u003d getPriorSnapshot(this);\n         // prior must be non-null, otherwise we do not have any previous \n         // WithName nodes, and the reference number will be 0.\n         Preconditions.checkState(prior !\u003d null);\n         // identify the snapshot created after prior\n         Snapshot snapshot \u003d getSelfSnapshot(prior);\n         \n         INode referred \u003d getReferredINode().asReference().getReferredINode();\n         if (referred instanceof FileWithSnapshot) {\n           // if referred is a file, it must be a FileWithSnapshot since we did\n           // recordModification before the rename\n           FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n           // make sure we mark the file as deleted\n           sfile.deleteCurrentFile();\n           if (snapshot !\u003d null) {\n             try {\n+              // when calling cleanSubtree of the referred node, since we \n+              // compute quota usage updates before calling this destroy \n+              // function, we use true for countDiffChange\n               referred.cleanSubtree(snapshot, prior, collectedBlocks,\n-                  removedINodes);\n+                  removedINodes, true);\n             } catch (QuotaExceededException e) {\n               LOG.error(\"should not exceed quota while snapshot deletion\", e);\n             }\n           }\n         } else if (referred instanceof INodeDirectoryWithSnapshot) {\n           // similarly, if referred is a directory, it must be an\n           // INodeDirectoryWithSnapshot\n           INodeDirectoryWithSnapshot sdir \u003d \n               (INodeDirectoryWithSnapshot) referred;\n           try {\n             INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                 collectedBlocks, removedINodes);\n           } catch (QuotaExceededException e) {\n             LOG.error(\"should not exceed quota while snapshot deletion\", e);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred instanceof FileWithSnapshot) {\n          // if referred is a file, it must be a FileWithSnapshot since we did\n          // recordModification before the rename\n          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n          // make sure we mark the file as deleted\n          sfile.deleteCurrentFile();\n          if (snapshot !\u003d null) {\n            try {\n              // when calling cleanSubtree of the referred node, since we \n              // compute quota usage updates before calling this destroy \n              // function, we use true for countDiffChange\n              referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                  removedINodes, true);\n            } catch (QuotaExceededException e) {\n              LOG.error(\"should not exceed quota while snapshot deletion\", e);\n            }\n          }\n        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectoryWithSnapshot\n          INodeDirectoryWithSnapshot sdir \u003d \n              (INodeDirectoryWithSnapshot) referred;\n          try {\n            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
      "extendedDetails": {}
    },
    "72d783374c1e302492d7ce537222b563241038bb": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 3:10 PM",
      "commitName": "72d783374c1e302492d7ce537222b563241038bb",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 3:10 PM",
          "commitName": "72d783374c1e302492d7ce537222b563241038bb",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/04/13 2:05 PM",
          "commitNameOld": "3a3e0f573129c8308332d4b301a9319ee579d85a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 4.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,44 @@\n-  public final void destroyAndCollectBlocks(\n-      BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n-    if (removeReference(this) \u003c\u003d 0) {\n-      referred.destroyAndCollectBlocks(collectedBlocks, removedINodes);\n-    }\n-  }\n\\ No newline at end of file\n+    public void destroyAndCollectBlocks(\n+        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n+      if (removeReference(this) \u003c\u003d 0) {\n+        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n+            removedINodes);\n+      } else {\n+        // we will clean everything, including files, directories, and \n+        // snapshots, that were created after this prior snapshot\n+        Snapshot prior \u003d getPriorSnapshot(this);\n+        // prior must be non-null, otherwise we do not have any previous \n+        // WithName nodes, and the reference number will be 0.\n+        Preconditions.checkState(prior !\u003d null);\n+        // identify the snapshot created after prior\n+        Snapshot snapshot \u003d getSelfSnapshot(prior);\n+        \n+        INode referred \u003d getReferredINode().asReference().getReferredINode();\n+        if (referred instanceof FileWithSnapshot) {\n+          // if referred is a file, it must be a FileWithSnapshot since we did\n+          // recordModification before the rename\n+          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n+          // make sure we mark the file as deleted\n+          sfile.deleteCurrentFile();\n+          if (snapshot !\u003d null) {\n+            try {\n+              referred.cleanSubtree(snapshot, prior, collectedBlocks,\n+                  removedINodes);\n+            } catch (QuotaExceededException e) {\n+              LOG.error(\"should not exceed quota while snapshot deletion\", e);\n+            }\n+          }\n+        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n+          // similarly, if referred is a directory, it must be an\n+          // INodeDirectoryWithSnapshot\n+          INodeDirectoryWithSnapshot sdir \u003d \n+              (INodeDirectoryWithSnapshot) referred;\n+          try {\n+            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n+                collectedBlocks, removedINodes);\n+          } catch (QuotaExceededException e) {\n+            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred instanceof FileWithSnapshot) {\n          // if referred is a file, it must be a FileWithSnapshot since we did\n          // recordModification before the rename\n          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n          // make sure we mark the file as deleted\n          sfile.deleteCurrentFile();\n          if (snapshot !\u003d null) {\n            try {\n              referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                  removedINodes);\n            } catch (QuotaExceededException e) {\n              LOG.error(\"should not exceed quota while snapshot deletion\", e);\n            }\n          }\n        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectoryWithSnapshot\n          INodeDirectoryWithSnapshot sdir \u003d \n              (INodeDirectoryWithSnapshot) referred;\n          try {\n            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 3:10 PM",
          "commitName": "72d783374c1e302492d7ce537222b563241038bb",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/04/13 2:05 PM",
          "commitNameOld": "3a3e0f573129c8308332d4b301a9319ee579d85a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 4.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,44 @@\n-  public final void destroyAndCollectBlocks(\n-      BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n-    if (removeReference(this) \u003c\u003d 0) {\n-      referred.destroyAndCollectBlocks(collectedBlocks, removedINodes);\n-    }\n-  }\n\\ No newline at end of file\n+    public void destroyAndCollectBlocks(\n+        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n+      if (removeReference(this) \u003c\u003d 0) {\n+        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n+            removedINodes);\n+      } else {\n+        // we will clean everything, including files, directories, and \n+        // snapshots, that were created after this prior snapshot\n+        Snapshot prior \u003d getPriorSnapshot(this);\n+        // prior must be non-null, otherwise we do not have any previous \n+        // WithName nodes, and the reference number will be 0.\n+        Preconditions.checkState(prior !\u003d null);\n+        // identify the snapshot created after prior\n+        Snapshot snapshot \u003d getSelfSnapshot(prior);\n+        \n+        INode referred \u003d getReferredINode().asReference().getReferredINode();\n+        if (referred instanceof FileWithSnapshot) {\n+          // if referred is a file, it must be a FileWithSnapshot since we did\n+          // recordModification before the rename\n+          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n+          // make sure we mark the file as deleted\n+          sfile.deleteCurrentFile();\n+          if (snapshot !\u003d null) {\n+            try {\n+              referred.cleanSubtree(snapshot, prior, collectedBlocks,\n+                  removedINodes);\n+            } catch (QuotaExceededException e) {\n+              LOG.error(\"should not exceed quota while snapshot deletion\", e);\n+            }\n+          }\n+        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n+          // similarly, if referred is a directory, it must be an\n+          // INodeDirectoryWithSnapshot\n+          INodeDirectoryWithSnapshot sdir \u003d \n+              (INodeDirectoryWithSnapshot) referred;\n+          try {\n+            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n+                collectedBlocks, removedINodes);\n+          } catch (QuotaExceededException e) {\n+            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void destroyAndCollectBlocks(\n        BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n      if (removeReference(this) \u003c\u003d 0) {\n        getReferredINode().destroyAndCollectBlocks(collectedBlocks,\n            removedINodes);\n      } else {\n        // we will clean everything, including files, directories, and \n        // snapshots, that were created after this prior snapshot\n        Snapshot prior \u003d getPriorSnapshot(this);\n        // prior must be non-null, otherwise we do not have any previous \n        // WithName nodes, and the reference number will be 0.\n        Preconditions.checkState(prior !\u003d null);\n        // identify the snapshot created after prior\n        Snapshot snapshot \u003d getSelfSnapshot(prior);\n        \n        INode referred \u003d getReferredINode().asReference().getReferredINode();\n        if (referred instanceof FileWithSnapshot) {\n          // if referred is a file, it must be a FileWithSnapshot since we did\n          // recordModification before the rename\n          FileWithSnapshot sfile \u003d (FileWithSnapshot) referred;\n          // make sure we mark the file as deleted\n          sfile.deleteCurrentFile();\n          if (snapshot !\u003d null) {\n            try {\n              referred.cleanSubtree(snapshot, prior, collectedBlocks,\n                  removedINodes);\n            } catch (QuotaExceededException e) {\n              LOG.error(\"should not exceed quota while snapshot deletion\", e);\n            }\n          }\n        } else if (referred instanceof INodeDirectoryWithSnapshot) {\n          // similarly, if referred is a directory, it must be an\n          // INodeDirectoryWithSnapshot\n          INodeDirectoryWithSnapshot sdir \u003d \n              (INodeDirectoryWithSnapshot) referred;\n          try {\n            INodeDirectoryWithSnapshot.destroyDstSubtree(sdir, snapshot, prior,\n                collectedBlocks, removedINodes);\n          } catch (QuotaExceededException e) {\n            LOG.error(\"should not exceed quota while snapshot deletion\", e);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {}
        }
      ]
    },
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 5:00 PM",
      "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/04/13 3:03 PM",
          "commitNameOld": "6bda1f20ad396918edde211f709f5819a361b51e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,6 @@\n-  public final void destroyAndCollectBlocks(BlocksMapUpdateInfo collectedBlocks) {\n+  public final void destroyAndCollectBlocks(\n+      BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n     if (removeReference(this) \u003c\u003d 0) {\n-      referred.destroyAndCollectBlocks(collectedBlocks);\n+      referred.destroyAndCollectBlocks(collectedBlocks, removedINodes);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final void destroyAndCollectBlocks(\n      BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n    if (removeReference(this) \u003c\u003d 0) {\n      referred.destroyAndCollectBlocks(collectedBlocks, removedINodes);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {
            "oldValue": "[collectedBlocks-BlocksMapUpdateInfo]",
            "newValue": "[collectedBlocks-BlocksMapUpdateInfo, removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/04/13 3:03 PM",
          "commitNameOld": "6bda1f20ad396918edde211f709f5819a361b51e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,6 @@\n-  public final void destroyAndCollectBlocks(BlocksMapUpdateInfo collectedBlocks) {\n+  public final void destroyAndCollectBlocks(\n+      BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n     if (removeReference(this) \u003c\u003d 0) {\n-      referred.destroyAndCollectBlocks(collectedBlocks);\n+      referred.destroyAndCollectBlocks(collectedBlocks, removedINodes);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final void destroyAndCollectBlocks(\n      BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n    if (removeReference(this) \u003c\u003d 0) {\n      referred.destroyAndCollectBlocks(collectedBlocks, removedINodes);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java",
          "extendedDetails": {}
        }
      ]
    },
    "9701555899315c94584b24d8717c1d7540a4a491": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4534. Add INodeReference in order to support rename with snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 11:27 PM",
      "commitName": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,5 @@\n+  public final void destroyAndCollectBlocks(BlocksMapUpdateInfo collectedBlocks) {\n+    if (removeReference(this) \u003c\u003d 0) {\n+      referred.destroyAndCollectBlocks(collectedBlocks);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public final void destroyAndCollectBlocks(BlocksMapUpdateInfo collectedBlocks) {\n    if (removeReference(this) \u003c\u003d 0) {\n      referred.destroyAndCollectBlocks(collectedBlocks);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeReference.java"
    }
  }
}