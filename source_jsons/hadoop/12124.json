{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataNode.java",
  "functionName": "reportCorruptedBlocks",
  "functionId": "reportCorruptedBlocks___corruptedBlocks-DFSUtilClient.CorruptedBlocks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
  "functionStartLine": 1304,
  "functionEndLine": 1316,
  "numCommitsSeen": 358,
  "timeTaken": 2325,
  "changeHistory": [
    "dfcb331ba3516264398121c9f23af3a79c0509cc"
  ],
  "changeHistoryShort": {
    "dfcb331ba3516264398121c9f23af3a79c0509cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dfcb331ba3516264398121c9f23af3a79c0509cc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13076: [SPS]: Addendum. Resolve conflicts after rebasing branch to trunk. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "dfcb331ba3516264398121c9f23af3a79c0509cc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,13 @@\n+  public void reportCorruptedBlocks(\n+      DFSUtilClient.CorruptedBlocks corruptedBlocks) throws IOException {\n+    Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap \u003d\n+        corruptedBlocks.getCorruptionMap();\n+    if (corruptionMap !\u003d null) {\n+      for (Map.Entry\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e entry :\n+          corruptionMap.entrySet()) {\n+        for (DatanodeInfo dnInfo : entry.getValue()) {\n+          reportRemoteBadBlock(dnInfo, entry.getKey());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportCorruptedBlocks(\n      DFSUtilClient.CorruptedBlocks corruptedBlocks) throws IOException {\n    Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap \u003d\n        corruptedBlocks.getCorruptionMap();\n    if (corruptionMap !\u003d null) {\n      for (Map.Entry\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e entry :\n          corruptionMap.entrySet()) {\n        for (DatanodeInfo dnInfo : entry.getValue()) {\n          reportRemoteBadBlock(dnInfo, entry.getKey());\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}