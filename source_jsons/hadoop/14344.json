{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GetJournalEditServlet.java",
  "functionName": "doGet",
  "functionId": "doGet___request-HttpServletRequest(modifiers-final)__response-HttpServletResponse(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
  "functionStartLine": 183,
  "functionEndLine": 248,
  "numCommitsSeen": 16,
  "timeTaken": 1860,
  "changeHistory": [
    "0e83ed5e7372c801c9fee01df91b6b56de467ab1",
    "94a1632fcb677fda6f4d812614026417f1d0a360",
    "dbd22b23c2d68b97b4da47215897906f06f978e3",
    "0f595915a388305edbb3ce928415571811d304e8",
    "70fc5cf01c9274c2afddac51f4999166d81d4e11",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "0e83ed5e7372c801c9fee01df91b6b56de467ab1": "Ybodychange",
    "94a1632fcb677fda6f4d812614026417f1d0a360": "Ybodychange",
    "dbd22b23c2d68b97b4da47215897906f06f978e3": "Ybodychange",
    "0f595915a388305edbb3ce928415571811d304e8": "Ybodychange",
    "70fc5cf01c9274c2afddac51f4999166d81d4e11": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e83ed5e7372c801c9fee01df91b6b56de467ab1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11877. FileJournalManager#getLogFile should ignore in progress edit logs during JN sync. Contributed by Hanisha Koneru.\n",
      "commitDate": "24/05/17 4:09 PM",
      "commitName": "0e83ed5e7372c801c9fee01df91b6b56de467ab1",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "05/11/14 3:09 PM",
      "commitNameOld": "ba1d4ad25b301f7247f3f23df15e7f800e50feed",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 931.0,
      "commitsBetweenForRepo": 6670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,66 @@\n   public void doGet(final HttpServletRequest request,\n       final HttpServletResponse response) throws ServletException, IOException {\n     FileInputStream editFileIn \u003d null;\n     try {\n       final ServletContext context \u003d getServletContext();\n       final Configuration conf \u003d (Configuration) getServletContext()\n           .getAttribute(JspHelper.CURRENT_CONF);\n       final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n+      final String inProgressOkStr \u003d request.getParameter(IN_PROGRESS_OK);\n+      final boolean inProgressOk;\n+      if (inProgressOkStr !\u003d null \u0026\u0026\n+          inProgressOkStr.equalsIgnoreCase(\"false\")) {\n+        inProgressOk \u003d false;\n+      } else {\n+        inProgressOk \u003d true;\n+      }\n       QuorumJournalManager.checkJournalId(journalId);\n       final JNStorage storage \u003d JournalNodeHttpServer\n           .getJournalFromContext(context, journalId).getStorage();\n \n       // Check security\n       if (!checkRequestorOrSendError(conf, request, response)) {\n         return;\n       }\n \n       // Check that the namespace info is correct\n       if (!checkStorageInfoOrSendError(storage, request, response)) {\n         return;\n       }\n       \n       long segmentTxId \u003d ServletUtil.parseLongParam(request,\n           SEGMENT_TXID_PARAM);\n \n       FileJournalManager fjm \u003d storage.getJournalManager();\n       File editFile;\n \n       synchronized (fjm) {\n         // Synchronize on the FJM so that the file doesn\u0027t get finalized\n         // out from underneath us while we\u0027re in the process of opening\n         // it up.\n-        EditLogFile elf \u003d fjm.getLogFile(\n-            segmentTxId);\n+        EditLogFile elf \u003d fjm.getLogFile(segmentTxId, inProgressOk);\n         if (elf \u003d\u003d null) {\n           response.sendError(HttpServletResponse.SC_NOT_FOUND,\n               \"No edit log found starting at txid \" + segmentTxId);\n           return;\n         }\n         editFile \u003d elf.getFile();\n         ImageServlet.setVerificationHeadersForGet(response, editFile);\n         ImageServlet.setFileNameHeaders(response, editFile);\n         editFileIn \u003d new FileInputStream(editFile);\n       }\n       \n       DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n \n       // send edits\n       TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n           editFileIn, throttler);\n \n     } catch (Throwable t) {\n       String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n       response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n       throw new IOException(errMsg);\n     } finally {\n       IOUtils.closeStream(editFileIn);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(final HttpServletRequest request,\n      final HttpServletResponse response) throws ServletException, IOException {\n    FileInputStream editFileIn \u003d null;\n    try {\n      final ServletContext context \u003d getServletContext();\n      final Configuration conf \u003d (Configuration) getServletContext()\n          .getAttribute(JspHelper.CURRENT_CONF);\n      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n      final String inProgressOkStr \u003d request.getParameter(IN_PROGRESS_OK);\n      final boolean inProgressOk;\n      if (inProgressOkStr !\u003d null \u0026\u0026\n          inProgressOkStr.equalsIgnoreCase(\"false\")) {\n        inProgressOk \u003d false;\n      } else {\n        inProgressOk \u003d true;\n      }\n      QuorumJournalManager.checkJournalId(journalId);\n      final JNStorage storage \u003d JournalNodeHttpServer\n          .getJournalFromContext(context, journalId).getStorage();\n\n      // Check security\n      if (!checkRequestorOrSendError(conf, request, response)) {\n        return;\n      }\n\n      // Check that the namespace info is correct\n      if (!checkStorageInfoOrSendError(storage, request, response)) {\n        return;\n      }\n      \n      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n          SEGMENT_TXID_PARAM);\n\n      FileJournalManager fjm \u003d storage.getJournalManager();\n      File editFile;\n\n      synchronized (fjm) {\n        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n        // out from underneath us while we\u0027re in the process of opening\n        // it up.\n        EditLogFile elf \u003d fjm.getLogFile(segmentTxId, inProgressOk);\n        if (elf \u003d\u003d null) {\n          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n              \"No edit log found starting at txid \" + segmentTxId);\n          return;\n        }\n        editFile \u003d elf.getFile();\n        ImageServlet.setVerificationHeadersForGet(response, editFile);\n        ImageServlet.setFileNameHeaders(response, editFile);\n        editFileIn \u003d new FileInputStream(editFile);\n      }\n      \n      DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n\n      // send edits\n      TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n          editFileIn, throttler);\n\n    } catch (Throwable t) {\n      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n      throw new IOException(errMsg);\n    } finally {\n      IOUtils.closeStream(editFileIn);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "94a1632fcb677fda6f4d812614026417f1d0a360": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:25 PM",
      "commitName": "94a1632fcb677fda6f4d812614026417f1d0a360",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "08/03/14 1:15 PM",
      "commitNameOld": "dbd22b23c2d68b97b4da47215897906f06f978e3",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public void doGet(final HttpServletRequest request,\n       final HttpServletResponse response) throws ServletException, IOException {\n     FileInputStream editFileIn \u003d null;\n     try {\n       final ServletContext context \u003d getServletContext();\n       final Configuration conf \u003d (Configuration) getServletContext()\n           .getAttribute(JspHelper.CURRENT_CONF);\n       final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n       QuorumJournalManager.checkJournalId(journalId);\n       final JNStorage storage \u003d JournalNodeHttpServer\n           .getJournalFromContext(context, journalId).getStorage();\n \n       // Check security\n       if (!checkRequestorOrSendError(conf, request, response)) {\n         return;\n       }\n \n       // Check that the namespace info is correct\n       if (!checkStorageInfoOrSendError(storage, request, response)) {\n         return;\n       }\n       \n       long segmentTxId \u003d ServletUtil.parseLongParam(request,\n           SEGMENT_TXID_PARAM);\n \n       FileJournalManager fjm \u003d storage.getJournalManager();\n       File editFile;\n \n       synchronized (fjm) {\n         // Synchronize on the FJM so that the file doesn\u0027t get finalized\n         // out from underneath us while we\u0027re in the process of opening\n         // it up.\n         EditLogFile elf \u003d fjm.getLogFile(\n             segmentTxId);\n         if (elf \u003d\u003d null) {\n           response.sendError(HttpServletResponse.SC_NOT_FOUND,\n               \"No edit log found starting at txid \" + segmentTxId);\n           return;\n         }\n         editFile \u003d elf.getFile();\n-        GetImageServlet.setVerificationHeaders(response, editFile);\n-        GetImageServlet.setFileNameHeaders(response, editFile);\n+        ImageServlet.setVerificationHeadersForGet(response, editFile);\n+        ImageServlet.setFileNameHeaders(response, editFile);\n         editFileIn \u003d new FileInputStream(editFile);\n       }\n       \n-      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n+      DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n \n       // send edits\n-      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n+      TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n+          editFileIn, throttler);\n \n     } catch (Throwable t) {\n       String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n       response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n       throw new IOException(errMsg);\n     } finally {\n       IOUtils.closeStream(editFileIn);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(final HttpServletRequest request,\n      final HttpServletResponse response) throws ServletException, IOException {\n    FileInputStream editFileIn \u003d null;\n    try {\n      final ServletContext context \u003d getServletContext();\n      final Configuration conf \u003d (Configuration) getServletContext()\n          .getAttribute(JspHelper.CURRENT_CONF);\n      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n      QuorumJournalManager.checkJournalId(journalId);\n      final JNStorage storage \u003d JournalNodeHttpServer\n          .getJournalFromContext(context, journalId).getStorage();\n\n      // Check security\n      if (!checkRequestorOrSendError(conf, request, response)) {\n        return;\n      }\n\n      // Check that the namespace info is correct\n      if (!checkStorageInfoOrSendError(storage, request, response)) {\n        return;\n      }\n      \n      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n          SEGMENT_TXID_PARAM);\n\n      FileJournalManager fjm \u003d storage.getJournalManager();\n      File editFile;\n\n      synchronized (fjm) {\n        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n        // out from underneath us while we\u0027re in the process of opening\n        // it up.\n        EditLogFile elf \u003d fjm.getLogFile(\n            segmentTxId);\n        if (elf \u003d\u003d null) {\n          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n              \"No edit log found starting at txid \" + segmentTxId);\n          return;\n        }\n        editFile \u003d elf.getFile();\n        ImageServlet.setVerificationHeadersForGet(response, editFile);\n        ImageServlet.setFileNameHeaders(response, editFile);\n        editFileIn \u003d new FileInputStream(editFile);\n      }\n      \n      DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n\n      // send edits\n      TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n          editFileIn, throttler);\n\n    } catch (Throwable t) {\n      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n      throw new IOException(errMsg);\n    } finally {\n      IOUtils.closeStream(editFileIn);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "dbd22b23c2d68b97b4da47215897906f06f978e3": {
      "type": "Ybodychange",
      "commitMessage": "Revert HDFS-3405 for recommit with correct renamed files\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575610 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:15 PM",
      "commitName": "dbd22b23c2d68b97b4da47215897906f06f978e3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/03/14 4:39 PM",
      "commitNameOld": "0f595915a388305edbb3ce928415571811d304e8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,58 @@\n   public void doGet(final HttpServletRequest request,\n       final HttpServletResponse response) throws ServletException, IOException {\n     FileInputStream editFileIn \u003d null;\n     try {\n       final ServletContext context \u003d getServletContext();\n       final Configuration conf \u003d (Configuration) getServletContext()\n           .getAttribute(JspHelper.CURRENT_CONF);\n       final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n       QuorumJournalManager.checkJournalId(journalId);\n       final JNStorage storage \u003d JournalNodeHttpServer\n           .getJournalFromContext(context, journalId).getStorage();\n \n       // Check security\n       if (!checkRequestorOrSendError(conf, request, response)) {\n         return;\n       }\n \n       // Check that the namespace info is correct\n       if (!checkStorageInfoOrSendError(storage, request, response)) {\n         return;\n       }\n       \n       long segmentTxId \u003d ServletUtil.parseLongParam(request,\n           SEGMENT_TXID_PARAM);\n \n       FileJournalManager fjm \u003d storage.getJournalManager();\n       File editFile;\n \n       synchronized (fjm) {\n         // Synchronize on the FJM so that the file doesn\u0027t get finalized\n         // out from underneath us while we\u0027re in the process of opening\n         // it up.\n         EditLogFile elf \u003d fjm.getLogFile(\n             segmentTxId);\n         if (elf \u003d\u003d null) {\n           response.sendError(HttpServletResponse.SC_NOT_FOUND,\n               \"No edit log found starting at txid \" + segmentTxId);\n           return;\n         }\n         editFile \u003d elf.getFile();\n-        ImageServlet.setVerificationHeadersForGet(response, editFile);\n-        ImageServlet.setFileNameHeaders(response, editFile);\n+        GetImageServlet.setVerificationHeaders(response, editFile);\n+        GetImageServlet.setFileNameHeaders(response, editFile);\n         editFileIn \u003d new FileInputStream(editFile);\n       }\n       \n-      DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n+      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n \n       // send edits\n-      TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n-          editFileIn, throttler);\n+      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n \n     } catch (Throwable t) {\n       String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n       response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n       throw new IOException(errMsg);\n     } finally {\n       IOUtils.closeStream(editFileIn);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(final HttpServletRequest request,\n      final HttpServletResponse response) throws ServletException, IOException {\n    FileInputStream editFileIn \u003d null;\n    try {\n      final ServletContext context \u003d getServletContext();\n      final Configuration conf \u003d (Configuration) getServletContext()\n          .getAttribute(JspHelper.CURRENT_CONF);\n      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n      QuorumJournalManager.checkJournalId(journalId);\n      final JNStorage storage \u003d JournalNodeHttpServer\n          .getJournalFromContext(context, journalId).getStorage();\n\n      // Check security\n      if (!checkRequestorOrSendError(conf, request, response)) {\n        return;\n      }\n\n      // Check that the namespace info is correct\n      if (!checkStorageInfoOrSendError(storage, request, response)) {\n        return;\n      }\n      \n      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n          SEGMENT_TXID_PARAM);\n\n      FileJournalManager fjm \u003d storage.getJournalManager();\n      File editFile;\n\n      synchronized (fjm) {\n        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n        // out from underneath us while we\u0027re in the process of opening\n        // it up.\n        EditLogFile elf \u003d fjm.getLogFile(\n            segmentTxId);\n        if (elf \u003d\u003d null) {\n          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n              \"No edit log found starting at txid \" + segmentTxId);\n          return;\n        }\n        editFile \u003d elf.getFile();\n        GetImageServlet.setVerificationHeaders(response, editFile);\n        GetImageServlet.setFileNameHeaders(response, editFile);\n        editFileIn \u003d new FileInputStream(editFile);\n      }\n      \n      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n\n      // send edits\n      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n\n    } catch (Throwable t) {\n      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n      throw new IOException(errMsg);\n    } finally {\n      IOUtils.closeStream(editFileIn);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "0f595915a388305edbb3ce928415571811d304e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575457 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 4:39 PM",
      "commitName": "0f595915a388305edbb3ce928415571811d304e8",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "25/01/14 12:01 PM",
      "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 41.19,
      "commitsBetweenForRepo": 399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public void doGet(final HttpServletRequest request,\n       final HttpServletResponse response) throws ServletException, IOException {\n     FileInputStream editFileIn \u003d null;\n     try {\n       final ServletContext context \u003d getServletContext();\n       final Configuration conf \u003d (Configuration) getServletContext()\n           .getAttribute(JspHelper.CURRENT_CONF);\n       final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n       QuorumJournalManager.checkJournalId(journalId);\n       final JNStorage storage \u003d JournalNodeHttpServer\n           .getJournalFromContext(context, journalId).getStorage();\n \n       // Check security\n       if (!checkRequestorOrSendError(conf, request, response)) {\n         return;\n       }\n \n       // Check that the namespace info is correct\n       if (!checkStorageInfoOrSendError(storage, request, response)) {\n         return;\n       }\n       \n       long segmentTxId \u003d ServletUtil.parseLongParam(request,\n           SEGMENT_TXID_PARAM);\n \n       FileJournalManager fjm \u003d storage.getJournalManager();\n       File editFile;\n \n       synchronized (fjm) {\n         // Synchronize on the FJM so that the file doesn\u0027t get finalized\n         // out from underneath us while we\u0027re in the process of opening\n         // it up.\n         EditLogFile elf \u003d fjm.getLogFile(\n             segmentTxId);\n         if (elf \u003d\u003d null) {\n           response.sendError(HttpServletResponse.SC_NOT_FOUND,\n               \"No edit log found starting at txid \" + segmentTxId);\n           return;\n         }\n         editFile \u003d elf.getFile();\n-        GetImageServlet.setVerificationHeaders(response, editFile);\n-        GetImageServlet.setFileNameHeaders(response, editFile);\n+        ImageServlet.setVerificationHeadersForGet(response, editFile);\n+        ImageServlet.setFileNameHeaders(response, editFile);\n         editFileIn \u003d new FileInputStream(editFile);\n       }\n       \n-      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n+      DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n \n       // send edits\n-      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n+      TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n+          editFileIn, throttler);\n \n     } catch (Throwable t) {\n       String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n       response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n       throw new IOException(errMsg);\n     } finally {\n       IOUtils.closeStream(editFileIn);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(final HttpServletRequest request,\n      final HttpServletResponse response) throws ServletException, IOException {\n    FileInputStream editFileIn \u003d null;\n    try {\n      final ServletContext context \u003d getServletContext();\n      final Configuration conf \u003d (Configuration) getServletContext()\n          .getAttribute(JspHelper.CURRENT_CONF);\n      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n      QuorumJournalManager.checkJournalId(journalId);\n      final JNStorage storage \u003d JournalNodeHttpServer\n          .getJournalFromContext(context, journalId).getStorage();\n\n      // Check security\n      if (!checkRequestorOrSendError(conf, request, response)) {\n        return;\n      }\n\n      // Check that the namespace info is correct\n      if (!checkStorageInfoOrSendError(storage, request, response)) {\n        return;\n      }\n      \n      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n          SEGMENT_TXID_PARAM);\n\n      FileJournalManager fjm \u003d storage.getJournalManager();\n      File editFile;\n\n      synchronized (fjm) {\n        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n        // out from underneath us while we\u0027re in the process of opening\n        // it up.\n        EditLogFile elf \u003d fjm.getLogFile(\n            segmentTxId);\n        if (elf \u003d\u003d null) {\n          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n              \"No edit log found starting at txid \" + segmentTxId);\n          return;\n        }\n        editFile \u003d elf.getFile();\n        ImageServlet.setVerificationHeadersForGet(response, editFile);\n        ImageServlet.setFileNameHeaders(response, editFile);\n        editFileIn \u003d new FileInputStream(editFile);\n      }\n      \n      DataTransferThrottler throttler \u003d ImageServlet.getThrottler(conf);\n\n      // send edits\n      TransferFsImage.copyFileToStream(response.getOutputStream(), editFile,\n          editFileIn, throttler);\n\n    } catch (Throwable t) {\n      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n      throw new IOException(errMsg);\n    } finally {\n      IOUtils.closeStream(editFileIn);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "70fc5cf01c9274c2afddac51f4999166d81d4e11": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4017. Unclosed FileInputStream in GetJournalEditServlet. Contributed by Chao Shi.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1395727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 12:11 PM",
      "commitName": "70fc5cf01c9274c2afddac51f4999166d81d4e11",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "19/09/12 11:52 AM",
      "commitNameOld": "663e7484c04c197eed53f10a7808140f1c955277",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   public void doGet(final HttpServletRequest request,\n       final HttpServletResponse response) throws ServletException, IOException {\n+    FileInputStream editFileIn \u003d null;\n     try {\n       final ServletContext context \u003d getServletContext();\n       final Configuration conf \u003d (Configuration) getServletContext()\n           .getAttribute(JspHelper.CURRENT_CONF);\n       final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n       QuorumJournalManager.checkJournalId(journalId);\n       final JNStorage storage \u003d JournalNodeHttpServer\n           .getJournalFromContext(context, journalId).getStorage();\n \n       // Check security\n       if (!checkRequestorOrSendError(conf, request, response)) {\n         return;\n       }\n \n       // Check that the namespace info is correct\n       if (!checkStorageInfoOrSendError(storage, request, response)) {\n         return;\n       }\n       \n       long segmentTxId \u003d ServletUtil.parseLongParam(request,\n           SEGMENT_TXID_PARAM);\n \n       FileJournalManager fjm \u003d storage.getJournalManager();\n       File editFile;\n-      FileInputStream editFileIn;\n-      \n+\n       synchronized (fjm) {\n         // Synchronize on the FJM so that the file doesn\u0027t get finalized\n         // out from underneath us while we\u0027re in the process of opening\n         // it up.\n         EditLogFile elf \u003d fjm.getLogFile(\n             segmentTxId);\n         if (elf \u003d\u003d null) {\n           response.sendError(HttpServletResponse.SC_NOT_FOUND,\n               \"No edit log found starting at txid \" + segmentTxId);\n           return;\n         }\n         editFile \u003d elf.getFile();\n         GetImageServlet.setVerificationHeaders(response, editFile);\n         GetImageServlet.setFileNameHeaders(response, editFile);\n         editFileIn \u003d new FileInputStream(editFile);\n       }\n       \n       DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n \n       // send edits\n       TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n \n     } catch (Throwable t) {\n       String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n       response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n       throw new IOException(errMsg);\n+    } finally {\n+      IOUtils.closeStream(editFileIn);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(final HttpServletRequest request,\n      final HttpServletResponse response) throws ServletException, IOException {\n    FileInputStream editFileIn \u003d null;\n    try {\n      final ServletContext context \u003d getServletContext();\n      final Configuration conf \u003d (Configuration) getServletContext()\n          .getAttribute(JspHelper.CURRENT_CONF);\n      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n      QuorumJournalManager.checkJournalId(journalId);\n      final JNStorage storage \u003d JournalNodeHttpServer\n          .getJournalFromContext(context, journalId).getStorage();\n\n      // Check security\n      if (!checkRequestorOrSendError(conf, request, response)) {\n        return;\n      }\n\n      // Check that the namespace info is correct\n      if (!checkStorageInfoOrSendError(storage, request, response)) {\n        return;\n      }\n      \n      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n          SEGMENT_TXID_PARAM);\n\n      FileJournalManager fjm \u003d storage.getJournalManager();\n      File editFile;\n\n      synchronized (fjm) {\n        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n        // out from underneath us while we\u0027re in the process of opening\n        // it up.\n        EditLogFile elf \u003d fjm.getLogFile(\n            segmentTxId);\n        if (elf \u003d\u003d null) {\n          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n              \"No edit log found starting at txid \" + segmentTxId);\n          return;\n        }\n        editFile \u003d elf.getFile();\n        GetImageServlet.setVerificationHeaders(response, editFile);\n        GetImageServlet.setFileNameHeaders(response, editFile);\n        editFileIn \u003d new FileInputStream(editFile);\n      }\n      \n      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n\n      // send edits\n      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n\n    } catch (Throwable t) {\n      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n      throw new IOException(errMsg);\n    } finally {\n      IOUtils.closeStream(editFileIn);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,56 @@\n+  public void doGet(final HttpServletRequest request,\n+      final HttpServletResponse response) throws ServletException, IOException {\n+    try {\n+      final ServletContext context \u003d getServletContext();\n+      final Configuration conf \u003d (Configuration) getServletContext()\n+          .getAttribute(JspHelper.CURRENT_CONF);\n+      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n+      QuorumJournalManager.checkJournalId(journalId);\n+      final JNStorage storage \u003d JournalNodeHttpServer\n+          .getJournalFromContext(context, journalId).getStorage();\n+\n+      // Check security\n+      if (!checkRequestorOrSendError(conf, request, response)) {\n+        return;\n+      }\n+\n+      // Check that the namespace info is correct\n+      if (!checkStorageInfoOrSendError(storage, request, response)) {\n+        return;\n+      }\n+      \n+      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n+          SEGMENT_TXID_PARAM);\n+\n+      FileJournalManager fjm \u003d storage.getJournalManager();\n+      File editFile;\n+      FileInputStream editFileIn;\n+      \n+      synchronized (fjm) {\n+        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n+        // out from underneath us while we\u0027re in the process of opening\n+        // it up.\n+        EditLogFile elf \u003d fjm.getLogFile(\n+            segmentTxId);\n+        if (elf \u003d\u003d null) {\n+          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n+              \"No edit log found starting at txid \" + segmentTxId);\n+          return;\n+        }\n+        editFile \u003d elf.getFile();\n+        GetImageServlet.setVerificationHeaders(response, editFile);\n+        GetImageServlet.setFileNameHeaders(response, editFile);\n+        editFileIn \u003d new FileInputStream(editFile);\n+      }\n+      \n+      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n+\n+      // send edits\n+      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n+\n+    } catch (Throwable t) {\n+      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n+      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n+      throw new IOException(errMsg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(final HttpServletRequest request,\n      final HttpServletResponse response) throws ServletException, IOException {\n    try {\n      final ServletContext context \u003d getServletContext();\n      final Configuration conf \u003d (Configuration) getServletContext()\n          .getAttribute(JspHelper.CURRENT_CONF);\n      final String journalId \u003d request.getParameter(JOURNAL_ID_PARAM);\n      QuorumJournalManager.checkJournalId(journalId);\n      final JNStorage storage \u003d JournalNodeHttpServer\n          .getJournalFromContext(context, journalId).getStorage();\n\n      // Check security\n      if (!checkRequestorOrSendError(conf, request, response)) {\n        return;\n      }\n\n      // Check that the namespace info is correct\n      if (!checkStorageInfoOrSendError(storage, request, response)) {\n        return;\n      }\n      \n      long segmentTxId \u003d ServletUtil.parseLongParam(request,\n          SEGMENT_TXID_PARAM);\n\n      FileJournalManager fjm \u003d storage.getJournalManager();\n      File editFile;\n      FileInputStream editFileIn;\n      \n      synchronized (fjm) {\n        // Synchronize on the FJM so that the file doesn\u0027t get finalized\n        // out from underneath us while we\u0027re in the process of opening\n        // it up.\n        EditLogFile elf \u003d fjm.getLogFile(\n            segmentTxId);\n        if (elf \u003d\u003d null) {\n          response.sendError(HttpServletResponse.SC_NOT_FOUND,\n              \"No edit log found starting at txid \" + segmentTxId);\n          return;\n        }\n        editFile \u003d elf.getFile();\n        GetImageServlet.setVerificationHeaders(response, editFile);\n        GetImageServlet.setFileNameHeaders(response, editFile);\n        editFileIn \u003d new FileInputStream(editFile);\n      }\n      \n      DataTransferThrottler throttler \u003d GetImageServlet.getThrottler(conf);\n\n      // send edits\n      TransferFsImage.getFileServer(response, editFile, editFileIn, throttler);\n\n    } catch (Throwable t) {\n      String errMsg \u003d \"getedit failed. \" + StringUtils.stringifyException(t);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, errMsg);\n      throw new IOException(errMsg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java"
    }
  }
}