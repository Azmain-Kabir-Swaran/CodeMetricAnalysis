{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractAutoCreatedLeafQueue.java",
  "functionName": "setEntitlement",
  "functionId": "setEntitlement___nodeLabel-String__entitlement-QueueEntitlement",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
  "functionStartLine": 95,
  "functionEndLine": 122,
  "numCommitsSeen": 16,
  "timeTaken": 7768,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "0fcb4a8cf2add3f112907ff4e833e2f04947b53e",
    "eb3e40b833b9d82c1556843f960194dc42e482f3"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9": "Ymultichange(Yfilerename,Ybodychange)",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0fcb4a8cf2add3f112907ff4e833e2f04947b53e": "Ybodychange",
    "eb3e40b833b9d82c1556843f960194dc42e482f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 372.72,
      "commitsBetweenForRepo": 2179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     writeLock.lock();\n     try {\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n       setCapacity(nodeLabel, capacity);\n       setAbsoluteCapacity(nodeLabel,\n           getParent().getQueueCapacities().\n               getAbsoluteCapacity(nodeLabel)\n               * getQueueCapacities().getCapacity(nodeLabel));\n       // note: we currently set maxCapacity to capacity\n       // this might be revised later\n       setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n       LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n-            .getQueueName());\n+            .getQueuePath());\n \n       //update queue used capacity etc\n       CSQueueUtils.updateQueueStatistics(resourceCalculator,\n           csContext.getClusterResource(),\n           this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n            .getQueuePath());\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
      "extendedDetails": {}
    },
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     writeLock.lock();\n     try {\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n       setCapacity(nodeLabel, capacity);\n       setAbsoluteCapacity(nodeLabel,\n           getParent().getQueueCapacities().\n               getAbsoluteCapacity(nodeLabel)\n               * getQueueCapacities().getCapacity(nodeLabel));\n       // note: we currently set maxCapacity to capacity\n       // this might be revised later\n       setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n+      LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n             .getQueueName());\n-      }\n \n       //update queue used capacity etc\n       CSQueueUtils.updateQueueStatistics(resourceCalculator,\n           csContext.getClusterResource(),\n           this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n            .getQueueName());\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     writeLock.lock();\n     try {\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n       setCapacity(nodeLabel, capacity);\n       setAbsoluteCapacity(nodeLabel,\n           getParent().getQueueCapacities().\n               getAbsoluteCapacity(nodeLabel)\n               * getQueueCapacities().getCapacity(nodeLabel));\n       // note: we currently set maxCapacity to capacity\n       // this might be revised later\n       setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n+        LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n             .getQueueName());\n       }\n \n       //update queue used capacity etc\n       CSQueueUtils.updateQueueStatistics(resourceCalculator,\n           csContext.getClusterResource(),\n           this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to {} for queue {}\", capacity, this\n            .getQueueName());\n      }\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "08/12/17 3:10 PM",
      "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 453.94,
      "commitsBetweenForRepo": 3961,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n       setCapacity(nodeLabel, capacity);\n       setAbsoluteCapacity(nodeLabel,\n           getParent().getQueueCapacities().\n               getAbsoluteCapacity(nodeLabel)\n               * getQueueCapacities().getCapacity(nodeLabel));\n       // note: we currently set maxCapacity to capacity\n       // this might be revised later\n       setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n             .getQueueName());\n       }\n \n       //update queue used capacity etc\n       CSQueueUtils.updateQueueStatistics(resourceCalculator,\n           csContext.getClusterResource(),\n           this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
          "commitDate": "08/12/17 3:10 PM",
          "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/12/17 3:07 PM",
          "commitNameOld": "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,30 @@\n-  public void setEntitlement(QueueEntitlement entitlement)\n+  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n-      setCapacity(capacity);\n-      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-      setMaxCapacity(entitlement.getMaxCapacity());\n+      setCapacity(nodeLabel, capacity);\n+      setAbsoluteCapacity(nodeLabel,\n+          getParent().getQueueCapacities().\n+              getAbsoluteCapacity(nodeLabel)\n+              * getQueueCapacities().getCapacity(nodeLabel));\n+      // note: we currently set maxCapacity to capacity\n+      // this might be revised later\n+      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n             .getQueueName());\n       }\n+\n+      //update queue used capacity etc\n+      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n+          csContext.getClusterResource(),\n+          this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AutoCreatedLeafQueue.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
            "oldMethodName": "setEntitlement",
            "newMethodName": "setEntitlement"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
          "commitDate": "08/12/17 3:10 PM",
          "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/12/17 3:07 PM",
          "commitNameOld": "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,30 @@\n-  public void setEntitlement(QueueEntitlement entitlement)\n+  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n-      setCapacity(capacity);\n-      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-      setMaxCapacity(entitlement.getMaxCapacity());\n+      setCapacity(nodeLabel, capacity);\n+      setAbsoluteCapacity(nodeLabel,\n+          getParent().getQueueCapacities().\n+              getAbsoluteCapacity(nodeLabel)\n+              * getQueueCapacities().getCapacity(nodeLabel));\n+      // note: we currently set maxCapacity to capacity\n+      // this might be revised later\n+      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n             .getQueueName());\n       }\n+\n+      //update queue used capacity etc\n+      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n+          csContext.getClusterResource(),\n+          this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
          "commitDate": "08/12/17 3:10 PM",
          "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/12/17 3:07 PM",
          "commitNameOld": "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,30 @@\n-  public void setEntitlement(QueueEntitlement entitlement)\n+  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n-      setCapacity(capacity);\n-      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-      setMaxCapacity(entitlement.getMaxCapacity());\n+      setCapacity(nodeLabel, capacity);\n+      setAbsoluteCapacity(nodeLabel,\n+          getParent().getQueueCapacities().\n+              getAbsoluteCapacity(nodeLabel)\n+              * getQueueCapacities().getCapacity(nodeLabel));\n+      // note: we currently set maxCapacity to capacity\n+      // this might be revised later\n+      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n             .getQueueName());\n       }\n+\n+      //update queue used capacity etc\n+      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n+          csContext.getClusterResource(),\n+          this, labelManager, nodeLabel);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(String nodeLabel, QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(nodeLabel, capacity);\n      setAbsoluteCapacity(nodeLabel,\n          getParent().getQueueCapacities().\n              getAbsoluteCapacity(nodeLabel)\n              * getQueueCapacities().getCapacity(nodeLabel));\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(nodeLabel, entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n\n      //update queue used capacity etc\n      CSQueueUtils.updateQueueStatistics(resourceCalculator,\n          csContext.getClusterResource(),\n          this, labelManager, nodeLabel);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractAutoCreatedLeafQueue.java",
          "extendedDetails": {
            "oldValue": "[entitlement-QueueEntitlement]",
            "newValue": "[nodeLabel-String, entitlement-QueueEntitlement]"
          }
        }
      ]
    },
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7394. Merge code paths for Reservation/Plan queues and Auto Created queues. (Suma Shivaprasad via wangda)\n",
      "commitDate": "06/11/17 9:38 PM",
      "commitName": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7394. Merge code paths for Reservation/Plan queues and Auto Created queues. (Suma Shivaprasad via wangda)\n",
          "commitDate": "06/11/17 9:38 PM",
          "commitName": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/11/17 3:45 PM",
          "commitNameOld": "8f214dc4f8423250947a3f0027f70b9ab402ab62",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,20 @@\n   public void setEntitlement(QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n       setCapacity(capacity);\n       setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-      // note: we currently set maxCapacity to capacity\n-      // this might be revised later\n       setMaxCapacity(entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n             .getQueueName());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(capacity);\n      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n      setMaxCapacity(entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AutoCreatedLeafQueue.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ReservationQueue.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AutoCreatedLeafQueue.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7394. Merge code paths for Reservation/Plan queues and Auto Created queues. (Suma Shivaprasad via wangda)\n",
          "commitDate": "06/11/17 9:38 PM",
          "commitName": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/11/17 3:45 PM",
          "commitNameOld": "8f214dc4f8423250947a3f0027f70b9ab402ab62",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,20 @@\n   public void setEntitlement(QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       float capacity \u003d entitlement.getCapacity();\n       if (capacity \u003c 0 || capacity \u003e 1.0f) {\n         throw new SchedulerDynamicEditException(\n             \"Capacity demand is not in the [0,1] range: \" + capacity);\n       }\n       setCapacity(capacity);\n       setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-      // note: we currently set maxCapacity to capacity\n-      // this might be revised later\n       setMaxCapacity(entitlement.getMaxCapacity());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n             .getQueueName());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(capacity);\n      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n      setMaxCapacity(entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AutoCreatedLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/07/15 7:33 PM",
          "commitNameOld": "0fcb4a8cf2add3f112907ff4e833e2f04947b53e",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 424.19,
          "commitsBetweenForRepo": 2887,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,22 @@\n-  public synchronized void setEntitlement(QueueEntitlement entitlement)\n+  public void setEntitlement(QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n-    float capacity \u003d entitlement.getCapacity();\n-    if (capacity \u003c 0 || capacity \u003e 1.0f) {\n-      throw new SchedulerDynamicEditException(\n-          \"Capacity demand is not in the [0,1] range: \" + capacity);\n-    }\n-    setCapacity(capacity);\n-    setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-    // note: we currently set maxCapacity to capacity\n-    // this might be revised later\n-    setMaxCapacity(entitlement.getMaxCapacity());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"successfully changed to \" + capacity + \" for queue \"\n-          + this.getQueueName());\n+    try {\n+      writeLock.lock();\n+      float capacity \u003d entitlement.getCapacity();\n+      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n+        throw new SchedulerDynamicEditException(\n+            \"Capacity demand is not in the [0,1] range: \" + capacity);\n+      }\n+      setCapacity(capacity);\n+      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n+      // note: we currently set maxCapacity to capacity\n+      // this might be revised later\n+      setMaxCapacity(entitlement.getMaxCapacity());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n+            .getQueueName());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(capacity);\n      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ReservationQueue.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/07/15 7:33 PM",
          "commitNameOld": "0fcb4a8cf2add3f112907ff4e833e2f04947b53e",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 424.19,
          "commitsBetweenForRepo": 2887,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,22 @@\n-  public synchronized void setEntitlement(QueueEntitlement entitlement)\n+  public void setEntitlement(QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n-    float capacity \u003d entitlement.getCapacity();\n-    if (capacity \u003c 0 || capacity \u003e 1.0f) {\n-      throw new SchedulerDynamicEditException(\n-          \"Capacity demand is not in the [0,1] range: \" + capacity);\n-    }\n-    setCapacity(capacity);\n-    setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-    // note: we currently set maxCapacity to capacity\n-    // this might be revised later\n-    setMaxCapacity(entitlement.getMaxCapacity());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"successfully changed to \" + capacity + \" for queue \"\n-          + this.getQueueName());\n+    try {\n+      writeLock.lock();\n+      float capacity \u003d entitlement.getCapacity();\n+      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n+        throw new SchedulerDynamicEditException(\n+            \"Capacity demand is not in the [0,1] range: \" + capacity);\n+      }\n+      setCapacity(capacity);\n+      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n+      // note: we currently set maxCapacity to capacity\n+      // this might be revised later\n+      setMaxCapacity(entitlement.getMaxCapacity());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n+            .getQueueName());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setEntitlement(QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      float capacity \u003d entitlement.getCapacity();\n      if (capacity \u003c 0 || capacity \u003e 1.0f) {\n        throw new SchedulerDynamicEditException(\n            \"Capacity demand is not in the [0,1] range: \" + capacity);\n      }\n      setCapacity(capacity);\n      setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n      // note: we currently set maxCapacity to capacity\n      // this might be revised later\n      setMaxCapacity(entitlement.getMaxCapacity());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"successfully changed to \" + capacity + \" for queue \" + this\n            .getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ReservationQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "0fcb4a8cf2add3f112907ff4e833e2f04947b53e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3969. Allow jobs to be submitted to reservation that is active but does not have any allocations. (subru via curino)\n",
      "commitDate": "23/07/15 7:33 PM",
      "commitName": "0fcb4a8cf2add3f112907ff4e833e2f04947b53e",
      "commitAuthor": "carlo curino",
      "commitDateOld": "17/04/15 1:36 PM",
      "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 97.25,
      "commitsBetweenForRepo": 799,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   public synchronized void setEntitlement(QueueEntitlement entitlement)\n       throws SchedulerDynamicEditException {\n     float capacity \u003d entitlement.getCapacity();\n     if (capacity \u003c 0 || capacity \u003e 1.0f) {\n       throw new SchedulerDynamicEditException(\n           \"Capacity demand is not in the [0,1] range: \" + capacity);\n     }\n     setCapacity(capacity);\n     setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n-    setMaxApplications((int) (maxSystemApps * getAbsoluteCapacity()));\n     // note: we currently set maxCapacity to capacity\n     // this might be revised later\n     setMaxCapacity(entitlement.getMaxCapacity());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"successfully changed to \" + capacity + \" for queue \"\n           + this.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setEntitlement(QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    float capacity \u003d entitlement.getCapacity();\n    if (capacity \u003c 0 || capacity \u003e 1.0f) {\n      throw new SchedulerDynamicEditException(\n          \"Capacity demand is not in the [0,1] range: \" + capacity);\n    }\n    setCapacity(capacity);\n    setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n    // note: we currently set maxCapacity to capacity\n    // this might be revised later\n    setMaxCapacity(entitlement.getMaxCapacity());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"successfully changed to \" + capacity + \" for queue \"\n          + this.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ReservationQueue.java",
      "extendedDetails": {}
    },
    "eb3e40b833b9d82c1556843f960194dc42e482f3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1707. Introduce APIs to add/remove/resize queues in the CapacityScheduler. Contributed by Carlo Curino and Subru Krishnan\n(cherry picked from commit aac47fda7fecda9fc18ade34d633eca895865a70)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthor": "carlo curino",
      "diff": "@@ -0,0 +1,18 @@\n+  public synchronized void setEntitlement(QueueEntitlement entitlement)\n+      throws SchedulerDynamicEditException {\n+    float capacity \u003d entitlement.getCapacity();\n+    if (capacity \u003c 0 || capacity \u003e 1.0f) {\n+      throw new SchedulerDynamicEditException(\n+          \"Capacity demand is not in the [0,1] range: \" + capacity);\n+    }\n+    setCapacity(capacity);\n+    setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n+    setMaxApplications((int) (maxSystemApps * getAbsoluteCapacity()));\n+    // note: we currently set maxCapacity to capacity\n+    // this might be revised later\n+    setMaxCapacity(entitlement.getMaxCapacity());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"successfully changed to \" + capacity + \" for queue \"\n+          + this.getQueueName());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setEntitlement(QueueEntitlement entitlement)\n      throws SchedulerDynamicEditException {\n    float capacity \u003d entitlement.getCapacity();\n    if (capacity \u003c 0 || capacity \u003e 1.0f) {\n      throw new SchedulerDynamicEditException(\n          \"Capacity demand is not in the [0,1] range: \" + capacity);\n    }\n    setCapacity(capacity);\n    setAbsoluteCapacity(getParent().getAbsoluteCapacity() * getCapacity());\n    setMaxApplications((int) (maxSystemApps * getAbsoluteCapacity()));\n    // note: we currently set maxCapacity to capacity\n    // this might be revised later\n    setMaxCapacity(entitlement.getMaxCapacity());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"successfully changed to \" + capacity + \" for queue \"\n          + this.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ReservationQueue.java"
    }
  }
}