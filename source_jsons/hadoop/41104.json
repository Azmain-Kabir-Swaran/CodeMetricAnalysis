{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComputeFairShares.java",
  "functionName": "computeShares",
  "functionId": "computeShares___schedulables-Collection__? extends Schedulable____totalResources-Resource__type-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
  "functionStartLine": 52,
  "functionEndLine": 56,
  "numCommitsSeen": 30,
  "timeTaken": 4631,
  "changeHistory": [
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
    "3072c83b38fd87318d502a7d1bc518963b5ccdf7",
    "0097b15e2150f95745f64179a0ef4644e96128f5",
    "a7643f4de7e0ac8eeb00f74cf73bd83137944e3f",
    "9274626a115802217346f845e968866cd0e4b2d8",
    "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750": "Yparameterchange",
    "3072c83b38fd87318d502a7d1bc518963b5ccdf7": "Ybodychange",
    "0097b15e2150f95745f64179a0ef4644e96128f5": "Ybodychange",
    "a7643f4de7e0ac8eeb00f74cf73bd83137944e3f": "Ybodychange",
    "9274626a115802217346f845e968866cd0e4b2d8": "Ybodychange",
    "e60fbbcc2e6a0d27d588b620817d29d1c70893a5": "Ymultichange(Ymovefromfile,Ybodychange,Yrename,Yparameterchange)",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": "Ybodychange",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": "Yfilerename",
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3": "Yfilerename",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-6612. Update fair scheduler policies to be aware of resource types. (Contributed by Daniel Templeton via Yufei Gu)\n",
      "commitDate": "14/09/17 11:23 AM",
      "commitName": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 429.53,
      "commitsBetweenForRepo": 2748,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   public static void computeShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n-      ResourceType type) {\n+      String type) {\n     computeSharesInternal(schedulables, totalResources, type, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      String type) {\n    computeSharesInternal(schedulables, totalResources, type, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
      "extendedDetails": {
        "oldValue": "[schedulables-Collection\u003c? extends Schedulable\u003e, totalResources-Resource, type-ResourceType]",
        "newValue": "[schedulables-Collection\u003c? extends Schedulable\u003e, totalResources-Resource, type-String]"
      }
    },
    "3072c83b38fd87318d502a7d1bc518963b5ccdf7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1458. FairScheduler: Zero weight can lead to livelock. (Zhihai Xu via kasha)\n",
      "commitDate": "10/09/14 8:26 AM",
      "commitName": "3072c83b38fd87318d502a7d1bc518963b5ccdf7",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/08/14 8:44 AM",
      "commitNameOld": "0097b15e2150f95745f64179a0ef4644e96128f5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 18.99,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,5 @@\n   public static void computeShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n       ResourceType type) {\n-    Collection\u003cSchedulable\u003e activeSchedulables \u003d new ArrayList\u003cSchedulable\u003e();\n-    for (Schedulable sched : schedulables) {\n-      if ((sched instanceof FSQueue) \u0026\u0026 !((FSQueue) sched).isActive()) {\n-        setResourceValue(0, sched.getFairShare(), type);\n-      } else {\n-        activeSchedulables.add(sched);\n-      }\n-    }\n-\n-    computeSharesInternal(activeSchedulables, totalResources, type, false);\n+    computeSharesInternal(schedulables, totalResources, type, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    computeSharesInternal(schedulables, totalResources, type, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
      "extendedDetails": {}
    },
    "0097b15e2150f95745f64179a0ef4644e96128f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2393. FairScheduler: Add the notion of steady fair share. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/14 8:44 AM",
      "commitName": "0097b15e2150f95745f64179a0ef4644e96128f5",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "08/08/14 7:10 PM",
      "commitNameOld": "a7643f4de7e0ac8eeb00f74cf73bd83137944e3f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 13.57,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public static void computeShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n       ResourceType type) {\n     Collection\u003cSchedulable\u003e activeSchedulables \u003d new ArrayList\u003cSchedulable\u003e();\n     for (Schedulable sched : schedulables) {\n-      if (sched.isActive()) {\n-        activeSchedulables.add(sched);\n-      } else {\n+      if ((sched instanceof FSQueue) \u0026\u0026 !((FSQueue) sched).isActive()) {\n         setResourceValue(0, sched.getFairShare(), type);\n+      } else {\n+        activeSchedulables.add(sched);\n       }\n     }\n \n-    computeSharesInternal(activeSchedulables, totalResources, type);\n+    computeSharesInternal(activeSchedulables, totalResources, type, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    Collection\u003cSchedulable\u003e activeSchedulables \u003d new ArrayList\u003cSchedulable\u003e();\n    for (Schedulable sched : schedulables) {\n      if ((sched instanceof FSQueue) \u0026\u0026 !((FSQueue) sched).isActive()) {\n        setResourceValue(0, sched.getFairShare(), type);\n      } else {\n        activeSchedulables.add(sched);\n      }\n    }\n\n    computeSharesInternal(activeSchedulables, totalResources, type, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
      "extendedDetails": {}
    },
    "a7643f4de7e0ac8eeb00f74cf73bd83137944e3f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2026. Fair scheduler: Consider only active queues for computing fairshare. (Ashwin Shankar via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616915 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 7:10 PM",
      "commitName": "a7643f4de7e0ac8eeb00f74cf73bd83137944e3f",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/04/14 4:24 PM",
      "commitNameOld": "9274626a115802217346f845e968866cd0e4b2d8",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 119.11,
      "commitsBetweenForRepo": 741,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,14 @@\n   public static void computeShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n       ResourceType type) {\n-    if (schedulables.isEmpty()) {\n-      return;\n-    }\n-    // Find an upper bound on R that we can use in our binary search. We start\n-    // at R \u003d 1 and double it until we have either used all the resources or we\n-    // have met all Schedulables\u0027 max shares.\n-    int totalMaxShare \u003d 0;\n+    Collection\u003cSchedulable\u003e activeSchedulables \u003d new ArrayList\u003cSchedulable\u003e();\n     for (Schedulable sched : schedulables) {\n-      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n-      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n-        totalMaxShare \u003d Integer.MAX_VALUE;\n-        break;\n+      if (sched.isActive()) {\n+        activeSchedulables.add(sched);\n       } else {\n-        totalMaxShare +\u003d maxShare;\n+        setResourceValue(0, sched.getFairShare(), type);\n       }\n     }\n-    int totalResource \u003d Math.min(totalMaxShare,\n-        getResourceValue(totalResources, type));\n-    \n-    double rMax \u003d 1.0;\n-    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n-        \u003c totalResource) {\n-      rMax *\u003d 2.0;\n-    }\n-    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n-    double left \u003d 0;\n-    double right \u003d rMax;\n-    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n-      double mid \u003d (left + right) / 2.0;\n-      int plannedResourceUsed \u003d resourceUsedWithWeightToResourceRatio(\n-          mid, schedulables, type);\n-      if (plannedResourceUsed \u003d\u003d totalResource) {\n-        right \u003d mid;\n-        break;\n-      } else if (plannedResourceUsed \u003c totalResource) {\n-        left \u003d mid;\n-      } else {\n-        right \u003d mid;\n-      }\n-    }\n-    // Set the fair shares based on the value of R we\u0027ve converged to\n-    for (Schedulable sched : schedulables) {\n-      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n-    }\n+\n+    computeSharesInternal(activeSchedulables, totalResources, type);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    Collection\u003cSchedulable\u003e activeSchedulables \u003d new ArrayList\u003cSchedulable\u003e();\n    for (Schedulable sched : schedulables) {\n      if (sched.isActive()) {\n        activeSchedulables.add(sched);\n      } else {\n        setResourceValue(0, sched.getFairShare(), type);\n      }\n    }\n\n    computeSharesInternal(activeSchedulables, totalResources, type);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
      "extendedDetails": {}
    },
    "9274626a115802217346f845e968866cd0e4b2d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1923. Make Fair Scheduler resource ratio calculations terminate faster (Anubhav Dhoot via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/14 4:24 PM",
      "commitName": "9274626a115802217346f845e968866cd0e4b2d8",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "24/06/13 11:33 AM",
      "commitNameOld": "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 291.2,
      "commitsBetweenForRepo": 1969,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public static void computeShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n       ResourceType type) {\n     if (schedulables.isEmpty()) {\n       return;\n     }\n     // Find an upper bound on R that we can use in our binary search. We start\n     // at R \u003d 1 and double it until we have either used all the resources or we\n     // have met all Schedulables\u0027 max shares.\n     int totalMaxShare \u003d 0;\n     for (Schedulable sched : schedulables) {\n       int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n       if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n         totalMaxShare \u003d Integer.MAX_VALUE;\n         break;\n       } else {\n         totalMaxShare +\u003d maxShare;\n       }\n     }\n     int totalResource \u003d Math.min(totalMaxShare,\n         getResourceValue(totalResources, type));\n     \n     double rMax \u003d 1.0;\n     while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n         \u003c totalResource) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n-          totalResource) {\n+      int plannedResourceUsed \u003d resourceUsedWithWeightToResourceRatio(\n+          mid, schedulables, type);\n+      if (plannedResourceUsed \u003d\u003d totalResource) {\n+        right \u003d mid;\n+        break;\n+      } else if (plannedResourceUsed \u003c totalResource) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n     for (Schedulable sched : schedulables) {\n       setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    if (schedulables.isEmpty()) {\n      return;\n    }\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used all the resources or we\n    // have met all Schedulables\u0027 max shares.\n    int totalMaxShare \u003d 0;\n    for (Schedulable sched : schedulables) {\n      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n        totalMaxShare \u003d Integer.MAX_VALUE;\n        break;\n      } else {\n        totalMaxShare +\u003d maxShare;\n      }\n    }\n    int totalResource \u003d Math.min(totalMaxShare,\n        getResourceValue(totalResources, type));\n    \n    double rMax \u003d 1.0;\n    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n        \u003c totalResource) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      int plannedResourceUsed \u003d resourceUsedWithWeightToResourceRatio(\n          mid, schedulables, type);\n      if (plannedResourceUsed \u003d\u003d totalResource) {\n        right \u003d mid;\n        break;\n      } else if (plannedResourceUsed \u003c totalResource) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
      "extendedDetails": {}
    },
    "e60fbbcc2e6a0d27d588b620817d29d1c70893a5": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-736. Add a multi-resource fair sharing metric. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/13 11:33 AM",
      "commitName": "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-736. Add a multi-resource fair sharing metric. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496153 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/13 11:33 AM",
          "commitName": "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/13 9:21 AM",
          "commitNameOld": "ca35235b04b7eb60635a62a0f517d214adc32ba7",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,44 @@\n-  public static void computeFairShares(\n-      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n-    // Find an upper bound on R that we can use in our binary search. We start\n-    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n-    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n-    Resource totalDemand \u003d Resources.createResource(0);\n-    for (Schedulable sched : schedulables) {\n-      Resources.addTo(totalDemand, sched.getDemand());\n+  public static void computeShares(\n+      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n+      ResourceType type) {\n+    if (schedulables.isEmpty()) {\n+      return;\n     }\n-    Resource cap \u003d Resources.min(RESOURCE_CALCULATOR, null, totalDemand,\n-        totalResources);\n+    // Find an upper bound on R that we can use in our binary search. We start\n+    // at R \u003d 1 and double it until we have either used all the resources or we\n+    // have met all Schedulables\u0027 max shares.\n+    int totalMaxShare \u003d 0;\n+    for (Schedulable sched : schedulables) {\n+      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n+      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n+        totalMaxShare \u003d Integer.MAX_VALUE;\n+        break;\n+      } else {\n+        totalMaxShare +\u003d maxShare;\n+      }\n+    }\n+    int totalResource \u003d Math.min(totalMaxShare,\n+        getResourceValue(totalResources, type));\n+    \n     double rMax \u003d 1.0;\n-    while (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-        resUsedWithWeightToResRatio(rMax, schedulables),\n-        cap)) {\n+    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n+        \u003c totalResource) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-          resUsedWithWeightToResRatio(mid, schedulables),\n-          cap)) {\n+      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n+          totalResource) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n     for (Schedulable sched : schedulables) {\n-      sched.setFairShare(computeShare(sched, right));\n+      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    if (schedulables.isEmpty()) {\n      return;\n    }\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used all the resources or we\n    // have met all Schedulables\u0027 max shares.\n    int totalMaxShare \u003d 0;\n    for (Schedulable sched : schedulables) {\n      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n        totalMaxShare \u003d Integer.MAX_VALUE;\n        break;\n      } else {\n        totalMaxShare +\u003d maxShare;\n      }\n    }\n    int totalResource \u003d Math.min(totalMaxShare,\n        getResourceValue(totalResources, type));\n    \n    double rMax \u003d 1.0;\n    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n        \u003c totalResource) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n          totalResource) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
            "oldMethodName": "computeFairShares",
            "newMethodName": "computeShares"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-736. Add a multi-resource fair sharing metric. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496153 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/13 11:33 AM",
          "commitName": "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/13 9:21 AM",
          "commitNameOld": "ca35235b04b7eb60635a62a0f517d214adc32ba7",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,44 @@\n-  public static void computeFairShares(\n-      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n-    // Find an upper bound on R that we can use in our binary search. We start\n-    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n-    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n-    Resource totalDemand \u003d Resources.createResource(0);\n-    for (Schedulable sched : schedulables) {\n-      Resources.addTo(totalDemand, sched.getDemand());\n+  public static void computeShares(\n+      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n+      ResourceType type) {\n+    if (schedulables.isEmpty()) {\n+      return;\n     }\n-    Resource cap \u003d Resources.min(RESOURCE_CALCULATOR, null, totalDemand,\n-        totalResources);\n+    // Find an upper bound on R that we can use in our binary search. We start\n+    // at R \u003d 1 and double it until we have either used all the resources or we\n+    // have met all Schedulables\u0027 max shares.\n+    int totalMaxShare \u003d 0;\n+    for (Schedulable sched : schedulables) {\n+      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n+      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n+        totalMaxShare \u003d Integer.MAX_VALUE;\n+        break;\n+      } else {\n+        totalMaxShare +\u003d maxShare;\n+      }\n+    }\n+    int totalResource \u003d Math.min(totalMaxShare,\n+        getResourceValue(totalResources, type));\n+    \n     double rMax \u003d 1.0;\n-    while (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-        resUsedWithWeightToResRatio(rMax, schedulables),\n-        cap)) {\n+    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n+        \u003c totalResource) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-          resUsedWithWeightToResRatio(mid, schedulables),\n-          cap)) {\n+      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n+          totalResource) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n     for (Schedulable sched : schedulables) {\n-      sched.setFairShare(computeShare(sched, right));\n+      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    if (schedulables.isEmpty()) {\n      return;\n    }\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used all the resources or we\n    // have met all Schedulables\u0027 max shares.\n    int totalMaxShare \u003d 0;\n    for (Schedulable sched : schedulables) {\n      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n        totalMaxShare \u003d Integer.MAX_VALUE;\n        break;\n      } else {\n        totalMaxShare +\u003d maxShare;\n      }\n    }\n    int totalResource \u003d Math.min(totalMaxShare,\n        getResourceValue(totalResources, type));\n    \n    double rMax \u003d 1.0;\n    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n        \u003c totalResource) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n          totalResource) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-736. Add a multi-resource fair sharing metric. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496153 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/13 11:33 AM",
          "commitName": "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/13 9:21 AM",
          "commitNameOld": "ca35235b04b7eb60635a62a0f517d214adc32ba7",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,44 @@\n-  public static void computeFairShares(\n-      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n-    // Find an upper bound on R that we can use in our binary search. We start\n-    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n-    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n-    Resource totalDemand \u003d Resources.createResource(0);\n-    for (Schedulable sched : schedulables) {\n-      Resources.addTo(totalDemand, sched.getDemand());\n+  public static void computeShares(\n+      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n+      ResourceType type) {\n+    if (schedulables.isEmpty()) {\n+      return;\n     }\n-    Resource cap \u003d Resources.min(RESOURCE_CALCULATOR, null, totalDemand,\n-        totalResources);\n+    // Find an upper bound on R that we can use in our binary search. We start\n+    // at R \u003d 1 and double it until we have either used all the resources or we\n+    // have met all Schedulables\u0027 max shares.\n+    int totalMaxShare \u003d 0;\n+    for (Schedulable sched : schedulables) {\n+      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n+      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n+        totalMaxShare \u003d Integer.MAX_VALUE;\n+        break;\n+      } else {\n+        totalMaxShare +\u003d maxShare;\n+      }\n+    }\n+    int totalResource \u003d Math.min(totalMaxShare,\n+        getResourceValue(totalResources, type));\n+    \n     double rMax \u003d 1.0;\n-    while (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-        resUsedWithWeightToResRatio(rMax, schedulables),\n-        cap)) {\n+    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n+        \u003c totalResource) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-          resUsedWithWeightToResRatio(mid, schedulables),\n-          cap)) {\n+      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n+          totalResource) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n     for (Schedulable sched : schedulables) {\n-      sched.setFairShare(computeShare(sched, right));\n+      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    if (schedulables.isEmpty()) {\n      return;\n    }\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used all the resources or we\n    // have met all Schedulables\u0027 max shares.\n    int totalMaxShare \u003d 0;\n    for (Schedulable sched : schedulables) {\n      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n        totalMaxShare \u003d Integer.MAX_VALUE;\n        break;\n      } else {\n        totalMaxShare +\u003d maxShare;\n      }\n    }\n    int totalResource \u003d Math.min(totalMaxShare,\n        getResourceValue(totalResources, type));\n    \n    double rMax \u003d 1.0;\n    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n        \u003c totalResource) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n          totalResource) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
          "extendedDetails": {
            "oldValue": "computeFairShares",
            "newValue": "computeShares"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-736. Add a multi-resource fair sharing metric. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496153 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/13 11:33 AM",
          "commitName": "e60fbbcc2e6a0d27d588b620817d29d1c70893a5",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/13 9:21 AM",
          "commitNameOld": "ca35235b04b7eb60635a62a0f517d214adc32ba7",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,44 @@\n-  public static void computeFairShares(\n-      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n-    // Find an upper bound on R that we can use in our binary search. We start\n-    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n-    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n-    Resource totalDemand \u003d Resources.createResource(0);\n-    for (Schedulable sched : schedulables) {\n-      Resources.addTo(totalDemand, sched.getDemand());\n+  public static void computeShares(\n+      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n+      ResourceType type) {\n+    if (schedulables.isEmpty()) {\n+      return;\n     }\n-    Resource cap \u003d Resources.min(RESOURCE_CALCULATOR, null, totalDemand,\n-        totalResources);\n+    // Find an upper bound on R that we can use in our binary search. We start\n+    // at R \u003d 1 and double it until we have either used all the resources or we\n+    // have met all Schedulables\u0027 max shares.\n+    int totalMaxShare \u003d 0;\n+    for (Schedulable sched : schedulables) {\n+      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n+      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n+        totalMaxShare \u003d Integer.MAX_VALUE;\n+        break;\n+      } else {\n+        totalMaxShare +\u003d maxShare;\n+      }\n+    }\n+    int totalResource \u003d Math.min(totalMaxShare,\n+        getResourceValue(totalResources, type));\n+    \n     double rMax \u003d 1.0;\n-    while (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-        resUsedWithWeightToResRatio(rMax, schedulables),\n-        cap)) {\n+    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n+        \u003c totalResource) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (Resources.lessThan(RESOURCE_CALCULATOR, null,\n-          resUsedWithWeightToResRatio(mid, schedulables),\n-          cap)) {\n+      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n+          totalResource) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n     for (Schedulable sched : schedulables) {\n-      sched.setFairShare(computeShare(sched, right));\n+      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void computeShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources,\n      ResourceType type) {\n    if (schedulables.isEmpty()) {\n      return;\n    }\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used all the resources or we\n    // have met all Schedulables\u0027 max shares.\n    int totalMaxShare \u003d 0;\n    for (Schedulable sched : schedulables) {\n      int maxShare \u003d getResourceValue(sched.getMaxShare(), type);\n      if (maxShare \u003d\u003d Integer.MAX_VALUE) {\n        totalMaxShare \u003d Integer.MAX_VALUE;\n        break;\n      } else {\n        totalMaxShare +\u003d maxShare;\n      }\n    }\n    int totalResource \u003d Math.min(totalMaxShare,\n        getResourceValue(totalResources, type));\n    \n    double rMax \u003d 1.0;\n    while (resourceUsedWithWeightToResourceRatio(rMax, schedulables, type)\n        \u003c totalResource) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (resourceUsedWithWeightToResourceRatio(mid, schedulables, type) \u003c\n          totalResource) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/ComputeFairShares.java",
          "extendedDetails": {
            "oldValue": "[schedulables-Collection\u003c? extends Schedulable\u003e, totalResources-Resource]",
            "newValue": "[schedulables-Collection\u003c? extends Schedulable\u003e, totalResources-Resource, type-ResourceType]"
          }
        }
      ]
    },
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-595. Refactor fair scheduler to use common Resources. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475670 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 1:33 AM",
      "commitName": "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/04/13 11:11 AM",
      "commitNameOld": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.6,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   public static void computeFairShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n     // Find an upper bound on R that we can use in our binary search. We start\n     // at R \u003d 1 and double it until we have either used totalSlots slots or we\n     // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n     Resource totalDemand \u003d Resources.createResource(0);\n     for (Schedulable sched : schedulables) {\n       Resources.addTo(totalDemand, sched.getDemand());\n     }\n-    Resource cap \u003d Resources.min(totalDemand, totalResources);\n+    Resource cap \u003d Resources.min(RESOURCE_CALCULATOR, null, totalDemand,\n+        totalResources);\n     double rMax \u003d 1.0;\n-    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables),\n+    while (Resources.lessThan(RESOURCE_CALCULATOR, null,\n+        resUsedWithWeightToResRatio(rMax, schedulables),\n         cap)) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables),\n+      if (Resources.lessThan(RESOURCE_CALCULATOR, null,\n+          resUsedWithWeightToResRatio(mid, schedulables),\n           cap)) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n     for (Schedulable sched : schedulables) {\n       sched.setFairShare(computeShare(sched, right));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeFairShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n    Resource totalDemand \u003d Resources.createResource(0);\n    for (Schedulable sched : schedulables) {\n      Resources.addTo(totalDemand, sched.getDemand());\n    }\n    Resource cap \u003d Resources.min(RESOURCE_CALCULATOR, null, totalDemand,\n        totalResources);\n    double rMax \u003d 1.0;\n    while (Resources.lessThan(RESOURCE_CALCULATOR, null,\n        resUsedWithWeightToResRatio(rMax, schedulables),\n        cap)) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (Resources.lessThan(RESOURCE_CALCULATOR, null,\n          resUsedWithWeightToResRatio(mid, schedulables),\n          cap)) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      sched.setFairShare(computeShare(sched, right));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java",
      "extendedDetails": {}
    },
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": {
      "type": "Yfilerename",
      "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 11:11 AM",
      "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/04/13 10:49 AM",
      "commitNameOld": "d219c904d32641c70f80f5d33c99cc81c79cf055",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void computeFairShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n    Resource totalDemand \u003d Resources.createResource(0);\n    for (Schedulable sched : schedulables) {\n      Resources.addTo(totalDemand, sched.getDemand());\n    }\n    Resource cap \u003d Resources.min(totalDemand, totalResources);\n    double rMax \u003d 1.0;\n    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables),\n        cap)) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables),\n          cap)) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      sched.setFairShare(computeShare(sched, right));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/modes/FairSchedulingMode.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java"
      }
    },
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3": {
      "type": "Yfilerename",
      "commitMessage": "YARN-469. Make scheduling mode in FS pluggable. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460961 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 8:25 PM",
      "commitName": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "25/03/13 7:34 PM",
      "commitNameOld": "2aed48a67f408c290e90c83af9f76165d695f91a",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   public static void computeFairShares(\n       Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n     // Find an upper bound on R that we can use in our binary search. We start\n     // at R \u003d 1 and double it until we have either used totalSlots slots or we\n     // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n     Resource totalDemand \u003d Resources.createResource(0);\n-    for (Schedulable sched: schedulables) {\n+    for (Schedulable sched : schedulables) {\n       Resources.addTo(totalDemand, sched.getDemand());\n     }\n     Resource cap \u003d Resources.min(totalDemand, totalResources);\n     double rMax \u003d 1.0;\n-    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables), cap)) {\n+    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables),\n+        cap)) {\n       rMax *\u003d 2.0;\n     }\n     // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n     double left \u003d 0;\n     double right \u003d rMax;\n     for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n       double mid \u003d (left + right) / 2.0;\n-      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables), cap)) {\n+      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables),\n+          cap)) {\n         left \u003d mid;\n       } else {\n         right \u003d mid;\n       }\n     }\n     // Set the fair shares based on the value of R we\u0027ve converged to\n-    for (Schedulable sched: schedulables) {\n+    for (Schedulable sched : schedulables) {\n       sched.setFairShare(computeShare(sched, right));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeFairShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n    Resource totalDemand \u003d Resources.createResource(0);\n    for (Schedulable sched : schedulables) {\n      Resources.addTo(totalDemand, sched.getDemand());\n    }\n    Resource cap \u003d Resources.min(totalDemand, totalResources);\n    double rMax \u003d 1.0;\n    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables),\n        cap)) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables),\n          cap)) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched : schedulables) {\n      sched.setFairShare(computeShare(sched, right));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/modes/FairSchedulingMode.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingAlgorithms.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/modes/FairSchedulingMode.java"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void computeFairShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n    Resource totalDemand \u003d Resources.createResource(0);\n    for (Schedulable sched: schedulables) {\n      Resources.addTo(totalDemand, sched.getDemand());\n    }\n    Resource cap \u003d Resources.min(totalDemand, totalResources);\n    double rMax \u003d 1.0;\n    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables), cap)) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables), cap)) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched: schedulables) {\n      sched.setFairShare(computeShare(sched, right));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingAlgorithms.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingAlgorithms.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingAlgorithms.java"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,30 @@\n+  public static void computeFairShares(\n+      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n+    // Find an upper bound on R that we can use in our binary search. We start\n+    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n+    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n+    Resource totalDemand \u003d Resources.createResource(0);\n+    for (Schedulable sched: schedulables) {\n+      Resources.addTo(totalDemand, sched.getDemand());\n+    }\n+    Resource cap \u003d Resources.min(totalDemand, totalResources);\n+    double rMax \u003d 1.0;\n+    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables), cap)) {\n+      rMax *\u003d 2.0;\n+    }\n+    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n+    double left \u003d 0;\n+    double right \u003d rMax;\n+    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n+      double mid \u003d (left + right) / 2.0;\n+      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables), cap)) {\n+        left \u003d mid;\n+      } else {\n+        right \u003d mid;\n+      }\n+    }\n+    // Set the fair shares based on the value of R we\u0027ve converged to\n+    for (Schedulable sched: schedulables) {\n+      sched.setFairShare(computeShare(sched, right));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void computeFairShares(\n      Collection\u003c? extends Schedulable\u003e schedulables, Resource totalResources) {\n    // Find an upper bound on R that we can use in our binary search. We start\n    // at R \u003d 1 and double it until we have either used totalSlots slots or we\n    // have met all Schedulables\u0027 demands (if total demand \u003c totalSlots).\n    Resource totalDemand \u003d Resources.createResource(0);\n    for (Schedulable sched: schedulables) {\n      Resources.addTo(totalDemand, sched.getDemand());\n    }\n    Resource cap \u003d Resources.min(totalDemand, totalResources);\n    double rMax \u003d 1.0;\n    while (Resources.lessThan(resUsedWithWeightToResRatio(rMax, schedulables), cap)) {\n      rMax *\u003d 2.0;\n    }\n    // Perform the binary search for up to COMPUTE_FAIR_SHARES_ITERATIONS steps\n    double left \u003d 0;\n    double right \u003d rMax;\n    for (int i \u003d 0; i \u003c COMPUTE_FAIR_SHARES_ITERATIONS; i++) {\n      double mid \u003d (left + right) / 2.0;\n      if (Resources.lessThan(resUsedWithWeightToResRatio(mid, schedulables), cap)) {\n        left \u003d mid;\n      } else {\n        right \u003d mid;\n      }\n    }\n    // Set the fair shares based on the value of R we\u0027ve converged to\n    for (Schedulable sched: schedulables) {\n      sched.setFairShare(computeShare(sched, right));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingAlgorithms.java"
    }
  }
}