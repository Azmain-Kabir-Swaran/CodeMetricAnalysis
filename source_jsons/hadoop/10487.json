{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "doTransition",
  "functionId": "doTransition___sd-StorageDirectory__nsInfo-NamespaceInfo__startOpt-StartupOption__callables-List__Callable__StorageDirectory______conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 714,
  "functionEndLine": 774,
  "numCommitsSeen": 179,
  "timeTaken": 9680,
  "changeHistory": [
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "496f33de0ce80dc455cfd51f19612da6f9b914f9",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "d34074e237ee10b83aeb02294f595714d43e39e4",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "496f33de0ce80dc455cfd51f19612da6f9b914f9": "Ybodychange",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "d34074e237ee10b83aeb02294f595714d43e39e4": "Ybodychange",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": "Ybodychange",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": "Ybodychange",
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": "Ybodychange",
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/08/17 1:48 AM",
      "commitNameOld": "2e43c28e01fe006210e71aab179527669f6412ed",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 122.71,
      "commitsBetweenForRepo": 1011,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n       StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n       Configuration conf) throws IOException {\n+    if (sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n+      createStorageID(sd, layoutVersion, conf);\n+      return false; // regular start up for PROVIDED storage directories\n+    }\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      createStorageID(sd, layoutVersion);\n+      createStorageID(sd, layoutVersion, conf);\n       return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       if (federationSupported) {\n         // If the existing on-disk layout version supports federation,\n         // simply update the properties.\n-        upgradeProperties(sd);\n+        upgradeProperties(sd, conf);\n       } else {\n         doUpgradePreFederation(sd, nsInfo, callables, conf);\n       }\n       return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      createStorageID(sd, layoutVersion, conf);\n      return false; // regular start up for PROVIDED storage directories\n    }\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion, conf);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      if (federationSupported) {\n        // If the existing on-disk layout version supports federation,\n        // simply update the properties.\n        upgradeProperties(sd, conf);\n      } else {\n        doUpgradePreFederation(sd, nsInfo, callables, conf);\n      }\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,57 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n-      StartupOption startOpt, Configuration conf) throws IOException {\n+      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n+      Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       createStorageID(sd, layoutVersion);\n       return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       if (federationSupported) {\n         // If the existing on-disk layout version supports federation,\n         // simply update the properties.\n         upgradeProperties(sd);\n       } else {\n-        doUpgradePreFederation(sd, nsInfo, conf);\n+        doUpgradePreFederation(sd, nsInfo, callables, conf);\n       }\n       return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      if (federationSupported) {\n        // If the existing on-disk layout version supports federation,\n        // simply update the properties.\n        upgradeProperties(sd);\n      } else {\n        doUpgradePreFederation(sd, nsInfo, callables, conf);\n      }\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption, conf-Configuration]",
            "newValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,57 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n-      StartupOption startOpt, Configuration conf) throws IOException {\n+      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n+      Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       createStorageID(sd, layoutVersion);\n       return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       if (federationSupported) {\n         // If the existing on-disk layout version supports federation,\n         // simply update the properties.\n         upgradeProperties(sd);\n       } else {\n-        doUpgradePreFederation(sd, nsInfo, conf);\n+        doUpgradePreFederation(sd, nsInfo, callables, conf);\n       }\n       return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      if (federationSupported) {\n        // If the existing on-disk layout version supports federation,\n        // simply update the properties.\n        upgradeProperties(sd);\n      } else {\n        doUpgradePreFederation(sd, nsInfo, callables, conf);\n      }\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "496f33de0ce80dc455cfd51f19612da6f9b914f9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9730. Storage ID update does not happen when there is a layout change. Contributed by  Tsz Wo Nicholas Sze.\n",
      "commitDate": "04/02/16 11:19 AM",
      "commitName": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/01/16 6:58 PM",
      "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 7.68,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,56 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n       StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       createStorageID(sd, layoutVersion);\n       return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      doUpgrade(sd, nsInfo, conf);  // upgrade\n+      if (federationSupported) {\n+        // If the existing on-disk layout version supports federation,\n+        // simply update the properties.\n+        upgradeProperties(sd);\n+      } else {\n+        doUpgradePreFederation(sd, nsInfo, conf);\n+      }\n       return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      if (federationSupported) {\n        // If the existing on-disk layout version supports federation,\n        // simply update the properties.\n        upgradeProperties(sd);\n      } else {\n        doUpgradePreFederation(sd, nsInfo, conf);\n      }\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/11/15 10:00 AM",
          "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 83.37,
          "commitsBetweenForRepo": 510,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,50 @@\n-  private void doTransition( DataNode datanode,\n-                             StorageDirectory sd, \n-                             NamespaceInfo nsInfo, \n-                             StartupOption startOpt\n-                             ) throws IOException {\n+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n+      StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n-    // Clusters previously upgraded from layout versions earlier than\n-    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n-    // new storage ID. We check for that and fix it now.\n-    boolean haveValidStorageId \u003d\n-        DataNodeLayoutVersion.supports(\n-            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n-            DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n-\n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      createStorageID(sd, !haveValidStorageId);\n-      return; // regular startup\n+      createStorageID(sd, layoutVersion);\n+      return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      doUpgrade(datanode, sd, nsInfo);  // upgrade\n-      createStorageID(sd, !haveValidStorageId);\n-      return;\n+      doUpgrade(sd, nsInfo, conf);  // upgrade\n+      return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(sd, nsInfo, conf);  // upgrade\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption]",
            "newValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption, conf-Configuration]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/11/15 10:00 AM",
          "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 83.37,
          "commitsBetweenForRepo": 510,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,50 @@\n-  private void doTransition( DataNode datanode,\n-                             StorageDirectory sd, \n-                             NamespaceInfo nsInfo, \n-                             StartupOption startOpt\n-                             ) throws IOException {\n+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n+      StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n-    // Clusters previously upgraded from layout versions earlier than\n-    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n-    // new storage ID. We check for that and fix it now.\n-    boolean haveValidStorageId \u003d\n-        DataNodeLayoutVersion.supports(\n-            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n-            DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n-\n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      createStorageID(sd, !haveValidStorageId);\n-      return; // regular startup\n+      createStorageID(sd, layoutVersion);\n+      return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      doUpgrade(datanode, sd, nsInfo);  // upgrade\n-      createStorageID(sd, !haveValidStorageId);\n-      return;\n+      doUpgrade(sd, nsInfo, conf);  // upgrade\n+      return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(sd, nsInfo, conf);  // upgrade\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/11/15 10:00 AM",
          "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 83.37,
          "commitsBetweenForRepo": 510,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,50 @@\n-  private void doTransition( DataNode datanode,\n-                             StorageDirectory sd, \n-                             NamespaceInfo nsInfo, \n-                             StartupOption startOpt\n-                             ) throws IOException {\n+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n+      StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n-    // Clusters previously upgraded from layout versions earlier than\n-    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n-    // new storage ID. We check for that and fix it now.\n-    boolean haveValidStorageId \u003d\n-        DataNodeLayoutVersion.supports(\n-            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n-            DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n-\n     // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      createStorageID(sd, !haveValidStorageId);\n-      return; // regular startup\n+      createStorageID(sd, layoutVersion);\n+      return false; // need to write properties\n     }\n \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n-      doUpgrade(datanode, sd, nsInfo);  // upgrade\n-      createStorageID(sd, !haveValidStorageId);\n-      return;\n+      doUpgrade(sd, nsInfo, conf);  // upgrade\n+      return true; // doUgrade already has written properties\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, layoutVersion);\n      return false; // need to write properties\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(sd, nsInfo, conf);  // upgrade\n      return true; // doUgrade already has written properties\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/03/15 3:25 PM",
      "commitNameOld": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.78,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n-    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n+    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n \n     // Clusters previously upgraded from layout versions earlier than\n     // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n     // new storage ID. We check for that and fix it now.\n     boolean haveValidStorageId \u003d\n         DataNodeLayoutVersion.supports(\n             LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n             DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n \n     // regular start up.\n-    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION) {\n+    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       createStorageID(sd, !haveValidStorageId);\n       return; // regular startup\n     }\n \n     // do upgrade\n-    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n+    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       doUpgrade(datanode, sd, nsInfo);  // upgrade\n       createStorageID(sd, !haveValidStorageId);\n       return;\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n-        + HdfsConstants.DATANODE_LAYOUT_VERSION);\n+        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // Clusters previously upgraded from layout versions earlier than\n    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n    // new storage ID. We check for that and fix it now.\n    boolean haveValidStorageId \u003d\n        DataNodeLayoutVersion.supports(\n            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n            DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, !haveValidStorageId);\n      return; // regular startup\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(datanode, sd, nsInfo);  // upgrade\n      createStorageID(sd, !haveValidStorageId);\n      return;\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsServerConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "d34074e237ee10b83aeb02294f595714d43e39e4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7575. Upgrade should generate a unique storage ID for each volume. (Contributed by Arpit Agarwal)\n",
      "commitDate": "22/01/15 2:08 PM",
      "commitName": "d34074e237ee10b83aeb02294f595714d43e39e4",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "19/12/14 1:18 PM",
      "commitNameOld": "8fa265a290792ff42635ff9b42416c634f88bdf3",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 34.03,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,62 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n-    \n-    // After addition of the federation feature, ctime check is only \n-    // meaningful at BlockPoolSliceStorage level. \n \n-    // regular start up. \n+    // Clusters previously upgraded from layout versions earlier than\n+    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n+    // new storage ID. We check for that and fix it now.\n+    boolean haveValidStorageId \u003d\n+        DataNodeLayoutVersion.supports(\n+            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n+            DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n+\n+    // regular start up.\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION) {\n-      createStorageID(sd);\n+      createStorageID(sd, !haveValidStorageId);\n       return; // regular startup\n     }\n-    \n+\n     // do upgrade\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n       doUpgrade(datanode, sd, nsInfo);  // upgrade\n-      createStorageID(sd);\n+      createStorageID(sd, !haveValidStorageId);\n       return;\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n\n    // Clusters previously upgraded from layout versions earlier than\n    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a\n    // new storage ID. We check for that and fix it now.\n    boolean haveValidStorageId \u003d\n        DataNodeLayoutVersion.supports(\n            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) \u0026\u0026\n            DatanodeStorage.isValidStorageId(sd.getStorageUuid());\n\n    // regular start up.\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd, !haveValidStorageId);\n      return; // regular startup\n    }\n\n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(datanode, sd, nsInfo);  // upgrade\n      createStorageID(sd, !haveValidStorageId);\n      return;\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
      "commitDate": "30/10/14 5:31 PM",
      "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "22/09/14 6:00 PM",
      "commitNameOld": "889122bd5580b6a83d35ef945db7ec001b7b550a",
      "commitAuthorOld": "",
      "daysBetweenCommits": 37.98,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // After addition of the federation feature, ctime check is only \n     // meaningful at BlockPoolSliceStorage level. \n \n     // regular start up. \n-    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n+    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION) {\n+      createStorageID(sd);\n       return; // regular startup\n+    }\n     \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n       doUpgrade(datanode, sd, nsInfo);  // upgrade\n+      createStorageID(sd);\n       return;\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // After addition of the federation feature, ctime check is only \n    // meaningful at BlockPoolSliceStorage level. \n\n    // regular start up. \n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      createStorageID(sd);\n      return; // regular startup\n    }\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(datanode, sd, nsInfo);  // upgrade\n      createStorageID(sd);\n      return;\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 1:41 PM",
      "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "29/04/14 3:27 AM",
      "commitNameOld": "9d21180c1a625295bb9da0d9d5d8c55740944008",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 94.43,
      "commitsBetweenForRepo": 594,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // After addition of the federation feature, ctime check is only \n     // meaningful at BlockPoolSliceStorage level. \n \n     // regular start up. \n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n       return; // regular startup\n     \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n-      doUpgrade(sd, nsInfo);  // upgrade\n+      doUpgrade(datanode, sd, nsInfo);  // upgrade\n       return;\n     }\n     \n     // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n         + \" is newer than the supported LV \u003d \"\n         + HdfsConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // After addition of the federation feature, ctime check is only \n    // meaningful at BlockPoolSliceStorage level. \n\n    // regular start up. \n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n      return; // regular startup\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(datanode, sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5874. Should not compare DataNode current layout version with that of NameNode in DataStrorage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1565750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 10:25 AM",
      "commitName": "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/01/14 7:21 PM",
      "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.63,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,54 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       DataNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // After addition of the federation feature, ctime check is only \n     // meaningful at BlockPoolSliceStorage level. \n \n     // regular start up. \n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n       return; // regular startup\n     \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n       doUpgrade(sd, nsInfo);  // upgrade\n       return;\n     }\n     \n-    // layoutVersion \u003c LAYOUT_VERSION. I.e. stored layout version is newer\n+    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n-                          + \" is newer than the supported LV \u003d \"\n-                          + HdfsConstants.DATANODE_LAYOUT_VERSION\n-                          + \" or name node LV \u003d \"\n-                          + nsInfo.getLayoutVersion());\n+        + \" is newer than the supported LV \u003d \"\n+        + HdfsConstants.DATANODE_LAYOUT_VERSION);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // After addition of the federation feature, ctime check is only \n    // meaningful at BlockPoolSliceStorage level. \n\n    // regular start up. \n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n      return; // regular startup\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003c DATANODE_LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n        + \" is newer than the supported LV \u003d \"\n        + HdfsConstants.DATANODE_LAYOUT_VERSION);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/12/13 9:41 AM",
      "commitNameOld": "18159be495f96bde4bd4fa2cacb14aafb87e87bc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.4,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n-    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n+    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n-      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n+      DataNodeLayoutVersion.supports(\n+          LayoutVersion.Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // After addition of the federation feature, ctime check is only \n     // meaningful at BlockPoolSliceStorage level. \n \n     // regular start up. \n-    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION)\n+    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n       return; // regular startup\n     \n     // do upgrade\n-    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION) {\n+    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n       doUpgrade(sd, nsInfo);  // upgrade\n       return;\n     }\n     \n     // layoutVersion \u003c LAYOUT_VERSION. I.e. stored layout version is newer\n     // than the version supported by datanode. This should have been caught\n     // in readProperties(), even if rollback was not carried out or somehow\n     // failed.\n     throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n                           + \" is newer than the supported LV \u003d \"\n-                          + HdfsConstants.LAYOUT_VERSION\n+                          + HdfsConstants.DATANODE_LAYOUT_VERSION\n                           + \" or name node LV \u003d \"\n                           + nsInfo.getLayoutVersion());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      DataNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // After addition of the federation feature, ctime check is only \n    // meaningful at BlockPoolSliceStorage level. \n\n    // regular start up. \n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION)\n      return; // regular startup\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003c LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n                          + \" is newer than the supported LV \u003d \"\n                          + HdfsConstants.DATANODE_LAYOUT_VERSION\n                          + \" or name node LV \u003d \"\n                          + nsInfo.getLayoutVersion());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5526. Datanode cannot roll back to previous layout version. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 7:33 AM",
      "commitName": "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "10/01/13 4:09 PM",
      "commitNameOld": "82b218c605add2f5cf01c5aa21ab8c55fa5967fd",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 318.64,
      "commitsBetweenForRepo": 1933,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,55 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n-    // regular start up\n-    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION \n-        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n+    // After addition of the federation feature, ctime check is only \n+    // meaningful at BlockPoolSliceStorage level. \n+\n+    // regular start up. \n+    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION)\n       return; // regular startup\n     \n     // do upgrade\n-    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n-        || this.cTime \u003c nsInfo.getCTime()) {\n+    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION) {\n       doUpgrade(sd, nsInfo);  // upgrade\n       return;\n     }\n     \n-    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n-    // must shutdown\n-    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n-                          + \" CTime \u003d \" + this.getCTime() \n-                          + \" is newer than the namespace state: LV \u003d \"\n-                          + nsInfo.getLayoutVersion() \n-                          + \" CTime \u003d \" + nsInfo.getCTime());\n+    // layoutVersion \u003c LAYOUT_VERSION. I.e. stored layout version is newer\n+    // than the version supported by datanode. This should have been caught\n+    // in readProperties(), even if rollback was not carried out or somehow\n+    // failed.\n+    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n+                          + \" is newer than the supported LV \u003d \"\n+                          + HdfsConstants.LAYOUT_VERSION\n+                          + \" or name node LV \u003d \"\n+                          + nsInfo.getLayoutVersion());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // After addition of the federation feature, ctime check is only \n    // meaningful at BlockPoolSliceStorage level. \n\n    // regular start up. \n    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION)\n      return; // regular startup\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003c LAYOUT_VERSION. I.e. stored layout version is newer\n    // than the version supported by datanode. This should have been caught\n    // in readProperties(), even if rollback was not carried out or somehow\n    // failed.\n    throw new IOException(\"BUG: The stored LV \u003d \" + this.getLayoutVersion()\n                          + \" is newer than the supported LV \u003d \"\n                          + HdfsConstants.LAYOUT_VERSION\n                          + \" or name node LV \u003d \"\n                          + nsInfo.getLayoutVersion());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2686. Remove DistributedUpgrade related code. Contributed by Suresh Srinivas\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375800 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/12 2:18 PM",
      "commitName": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "15/07/12 7:58 PM",
      "commitNameOld": "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 36.76,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,52 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // regular start up\n     if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION \n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n       return; // regular startup\n-    // verify necessity of a distributed upgrade\n-    UpgradeManagerDatanode um \u003d \n-      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n-    verifyDistributedUpgradeProgress(um, nsInfo);\n     \n     // do upgrade\n     if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo);  // upgrade\n       return;\n     }\n     \n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                           + \" CTime \u003d \" + this.getCTime() \n                           + \" is newer than the namespace state: LV \u003d \"\n                           + nsInfo.getLayoutVersion() \n                           + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // regular start up\n    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION \n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                          + \" CTime \u003d \" + this.getCTime() \n                          + \" is newer than the namespace state: LV \u003d \"\n                          + nsInfo.getLayoutVersion() \n                          + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n-    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n+    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // regular start up\n-    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n+    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION \n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n       return; // regular startup\n     // verify necessity of a distributed upgrade\n     UpgradeManagerDatanode um \u003d \n       datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n     verifyDistributedUpgradeProgress(um, nsInfo);\n     \n     // do upgrade\n-    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n+    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo);  // upgrade\n       return;\n     }\n     \n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                           + \" CTime \u003d \" + this.getCTime() \n                           + \" is newer than the namespace state: LV \u003d \"\n                           + nsInfo.getLayoutVersion() \n                           + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // regular start up\n    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION \n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    \n    // do upgrade\n    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                          + \" CTime \u003d \" + this.getCTime() \n                          + \" is newer than the namespace state: LV \u003d \"\n                          + nsInfo.getLayoutVersion() \n                          + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // regular start up\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    \n    // do upgrade\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                          + \" CTime \u003d \" + this.getCTime() \n                          + \" is newer than the namespace state: LV \u003d \"\n                          + nsInfo.getLayoutVersion() \n                          + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // regular start up\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    \n    // do upgrade\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                          + \" CTime \u003d \" + this.getCTime() \n                          + \" is newer than the namespace state: LV \u003d \"\n                          + nsInfo.getLayoutVersion() \n                          + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/07/11 6:11 PM",
      "commitNameOld": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   private void doTransition( DataNode datanode,\n                              StorageDirectory sd, \n                              NamespaceInfo nsInfo, \n                              StartupOption startOpt\n                              ) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     }\n-    sd.read();\n+    readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n       \"Future version is not allowed\";\n     \n     boolean federationSupported \u003d \n       LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n     // For pre-federation version - validate the namespaceID\n     if (!federationSupported \u0026\u0026\n         getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     \n     // For version that supports federation, validate clusterID\n     if (federationSupported\n         \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n       throw new IOException(\"Incompatible clusterIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n           + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n     }\n     \n     // regular start up\n     if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n       return; // regular startup\n     // verify necessity of a distributed upgrade\n     UpgradeManagerDatanode um \u003d \n       datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n     verifyDistributedUpgradeProgress(um, nsInfo);\n     \n     // do upgrade\n     if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo);  // upgrade\n       return;\n     }\n     \n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                           + \" CTime \u003d \" + this.getCTime() \n                           + \" is newer than the namespace state: LV \u003d \"\n                           + nsInfo.getLayoutVersion() \n                           + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // regular start up\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    \n    // do upgrade\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                          + \" CTime \u003d \" + this.getCTime() \n                          + \" is newer than the namespace state: LV \u003d \"\n                          + nsInfo.getLayoutVersion() \n                          + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,56 @@\n+  private void doTransition( DataNode datanode,\n+                             StorageDirectory sd, \n+                             NamespaceInfo nsInfo, \n+                             StartupOption startOpt\n+                             ) throws IOException {\n+    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n+      doRollback(sd, nsInfo); // rollback if applicable\n+    }\n+    sd.read();\n+    checkVersionUpgradable(this.layoutVersion);\n+    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n+      \"Future version is not allowed\";\n+    \n+    boolean federationSupported \u003d \n+      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n+    // For pre-federation version - validate the namespaceID\n+    if (!federationSupported \u0026\u0026\n+        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n+      throw new IOException(\"Incompatible namespaceIDs in \"\n+          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n+          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n+          + getNamespaceID());\n+    }\n+    \n+    // For version that supports federation, validate clusterID\n+    if (federationSupported\n+        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n+      throw new IOException(\"Incompatible clusterIDs in \"\n+          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n+          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n+    }\n+    \n+    // regular start up\n+    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n+        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n+      return; // regular startup\n+    // verify necessity of a distributed upgrade\n+    UpgradeManagerDatanode um \u003d \n+      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n+    verifyDistributedUpgradeProgress(um, nsInfo);\n+    \n+    // do upgrade\n+    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n+        || this.cTime \u003c nsInfo.getCTime()) {\n+      doUpgrade(sd, nsInfo);  // upgrade\n+      return;\n+    }\n+    \n+    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n+    // must shutdown\n+    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n+                          + \" CTime \u003d \" + this.getCTime() \n+                          + \" is newer than the namespace state: LV \u003d \"\n+                          + nsInfo.getLayoutVersion() \n+                          + \" CTime \u003d \" + nsInfo.getCTime());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             ) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    }\n    sd.read();\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION :\n      \"Future version is not allowed\";\n    \n    boolean federationSupported \u003d \n      LayoutVersion.supports(Feature.FEDERATION, layoutVersion);\n    // For pre-federation version - validate the namespaceID\n    if (!federationSupported \u0026\u0026\n        getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    \n    // For version that supports federation, validate clusterID\n    if (federationSupported\n        \u0026\u0026 !getClusterID().equals(nsInfo.getClusterID())) {\n      throw new IOException(\"Incompatible clusterIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode clusterID \u003d \"\n          + nsInfo.getClusterID() + \"; datanode clusterID \u003d \" + getClusterID());\n    }\n    \n    // regular start up\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION \n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    \n    // do upgrade\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo);  // upgrade\n      return;\n    }\n    \n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion() \n                          + \" CTime \u003d \" + this.getCTime() \n                          + \" is newer than the namespace state: LV \u003d \"\n                          + nsInfo.getLayoutVersion() \n                          + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}