{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppBlock.java",
  "functionName": "generateOverviewTable",
  "functionId": "generateOverviewTable___app-AppInfo__schedulerPath-String__webUiType-String__appReport-ApplicationReport",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
  "functionStartLine": 230,
  "functionEndLine": 290,
  "numCommitsSeen": 37,
  "timeTaken": 2389,
  "changeHistory": [
    "9520b2ad790bd8527033a03e7ee50da71a85df1d",
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
    "e6de10d0a6363bdaf767a7bdac7ad908d7786718"
  ],
  "changeHistoryShort": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": "Ybodychange",
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": "Ybodychange",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": "Ybodychange",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": "Ybodychange",
    "e6de10d0a6363bdaf767a7bdac7ad908d7786718": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10083. Provide utility to ask whether an application is in final status. Contributed by Adam Antal\n",
      "commitDate": "22/01/20 7:25 AM",
      "commitName": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "09/05/19 2:02 PM",
      "commitNameOld": "1b48100a5e5c6a08b91a9283bc2dbb7725e3236d",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 257.77,
      "commitsBetweenForRepo": 1648,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,61 @@\n   private void generateOverviewTable(AppInfo app, String schedulerPath,\n       String webUiType, ApplicationReport appReport) {\n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n         .__(\"User:\", schedulerPath, app.getUser())\n         .__(\"Name:\", app.getName())\n         .__(\"Application Type:\", app.getType())\n         .__(\"Application Tags:\",\n             app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n         .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n         .__(\n             \"YarnApplicationState:\",\n             app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                 .getAppState()))\n         .__(\"Queue:\", schedulerPath, app.getQueue())\n         .__(\"FinalStatus Reported by AM:\",\n             clairfyAppFinalStatus(app.getFinalAppStatus()))\n         .__(\"Started:\", Times.format(app.getStartedTime()))\n         .__(\"Launched:\", Times.format(app.getLaunchTime()))\n         .__(\"Finished:\", Times.format(app.getFinishedTime()))\n         .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n         .__(\n             \"Tracking URL:\",\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                 .getTrackingUrl()),\n             app.getTrackingUrl() \u003d\u003d null\n-                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n-                .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n-                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n-                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n-                : \"ApplicationMaster\");\n+                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" :\n+                Apps.isApplicationFinalState(app.getAppState()) ?\n+                    \"History\" : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable.__(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable.__(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n       long timeout \u003d appReport.getApplicationTimeouts()\n           .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n       if (timeout \u003c 0) {\n         overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n       } else {\n         overviewTable.__(\"Application Timeout (Remaining Time):\",\n             String.format(\"%d seconds\", timeout));\n       }\n     }\n     overviewTable.__(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n     overviewTable.__(\"Application Node Label expression:\",\n         app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAppNodeLabelExpression());\n     overviewTable.__(\"AM container Node Label expression:\",\n         app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAmNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateOverviewTable(AppInfo app, String schedulerPath,\n      String webUiType, ApplicationReport appReport) {\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n        .__(\"User:\", schedulerPath, app.getUser())\n        .__(\"Name:\", app.getName())\n        .__(\"Application Type:\", app.getType())\n        .__(\"Application Tags:\",\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n        .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n        .__(\n            \"YarnApplicationState:\",\n            app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                .getAppState()))\n        .__(\"Queue:\", schedulerPath, app.getQueue())\n        .__(\"FinalStatus Reported by AM:\",\n            clairfyAppFinalStatus(app.getFinalAppStatus()))\n        .__(\"Started:\", Times.format(app.getStartedTime()))\n        .__(\"Launched:\", Times.format(app.getLaunchTime()))\n        .__(\"Finished:\", Times.format(app.getFinishedTime()))\n        .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n        .__(\n            \"Tracking URL:\",\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                .getTrackingUrl()),\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" :\n                Apps.isApplicationFinalState(app.getAppState()) ?\n                    \"History\" : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable.__(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable.__(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable.__(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable.__(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable.__(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable.__(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 11:15 AM",
      "commitName": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 6:04 AM",
      "commitNameOld": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,63 @@\n   private void generateOverviewTable(AppInfo app, String schedulerPath,\n       String webUiType, ApplicationReport appReport) {\n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n         .__(\"User:\", schedulerPath, app.getUser())\n         .__(\"Name:\", app.getName())\n         .__(\"Application Type:\", app.getType())\n         .__(\"Application Tags:\",\n             app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n         .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n         .__(\n             \"YarnApplicationState:\",\n             app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                 .getAppState()))\n         .__(\"Queue:\", schedulerPath, app.getQueue())\n         .__(\"FinalStatus Reported by AM:\",\n             clairfyAppFinalStatus(app.getFinalAppStatus()))\n         .__(\"Started:\", Times.format(app.getStartedTime()))\n-        .__(\n-            \"Elapsed:\",\n-            StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n-                app.getFinishedTime())))\n+        .__(\"Launched:\", Times.format(app.getLaunchTime()))\n+        .__(\"Finished:\", Times.format(app.getFinishedTime()))\n+        .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n         .__(\n             \"Tracking URL:\",\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                 .getTrackingUrl()),\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                 .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                 : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable.__(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable.__(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n       long timeout \u003d appReport.getApplicationTimeouts()\n           .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n       if (timeout \u003c 0) {\n         overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n       } else {\n         overviewTable.__(\"Application Timeout (Remaining Time):\",\n             String.format(\"%d seconds\", timeout));\n       }\n     }\n     overviewTable.__(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n     overviewTable.__(\"Application Node Label expression:\",\n         app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAppNodeLabelExpression());\n     overviewTable.__(\"AM container Node Label expression:\",\n         app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAmNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateOverviewTable(AppInfo app, String schedulerPath,\n      String webUiType, ApplicationReport appReport) {\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n        .__(\"User:\", schedulerPath, app.getUser())\n        .__(\"Name:\", app.getName())\n        .__(\"Application Type:\", app.getType())\n        .__(\"Application Tags:\",\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n        .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n        .__(\n            \"YarnApplicationState:\",\n            app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                .getAppState()))\n        .__(\"Queue:\", schedulerPath, app.getQueue())\n        .__(\"FinalStatus Reported by AM:\",\n            clairfyAppFinalStatus(app.getFinalAppStatus()))\n        .__(\"Started:\", Times.format(app.getStartedTime()))\n        .__(\"Launched:\", Times.format(app.getLaunchTime()))\n        .__(\"Finished:\", Times.format(app.getFinishedTime()))\n        .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n        .__(\n            \"Tracking URL:\",\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                .getTrackingUrl()),\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable.__(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable.__(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable.__(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable.__(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable.__(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable.__(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\"\n\nThis reverts commit 0c14b6f0d80d847be7ef3eda1614eadbf835181c.\n",
      "commitDate": "17/04/18 6:04 AM",
      "commitName": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 5:59 AM",
      "commitNameOld": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   private void generateOverviewTable(AppInfo app, String schedulerPath,\n       String webUiType, ApplicationReport appReport) {\n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n         .__(\"User:\", schedulerPath, app.getUser())\n         .__(\"Name:\", app.getName())\n         .__(\"Application Type:\", app.getType())\n         .__(\"Application Tags:\",\n             app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n         .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n         .__(\n             \"YarnApplicationState:\",\n             app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                 .getAppState()))\n         .__(\"Queue:\", schedulerPath, app.getQueue())\n         .__(\"FinalStatus Reported by AM:\",\n             clairfyAppFinalStatus(app.getFinalAppStatus()))\n         .__(\"Started:\", Times.format(app.getStartedTime()))\n-        .__(\"Launched:\", Times.format(app.getLaunchTime()))\n-        .__(\"Finished:\", Times.format(app.getFinishedTime()))\n-        .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n+        .__(\n+            \"Elapsed:\",\n+            StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n+                app.getFinishedTime())))\n         .__(\n             \"Tracking URL:\",\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                 .getTrackingUrl()),\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                 .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                 : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable.__(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable.__(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n       long timeout \u003d appReport.getApplicationTimeouts()\n           .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n       if (timeout \u003c 0) {\n         overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n       } else {\n         overviewTable.__(\"Application Timeout (Remaining Time):\",\n             String.format(\"%d seconds\", timeout));\n       }\n     }\n     overviewTable.__(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n     overviewTable.__(\"Application Node Label expression:\",\n         app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAppNodeLabelExpression());\n     overviewTable.__(\"AM container Node Label expression:\",\n         app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAmNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateOverviewTable(AppInfo app, String schedulerPath,\n      String webUiType, ApplicationReport appReport) {\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n        .__(\"User:\", schedulerPath, app.getUser())\n        .__(\"Name:\", app.getName())\n        .__(\"Application Type:\", app.getType())\n        .__(\"Application Tags:\",\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n        .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n        .__(\n            \"YarnApplicationState:\",\n            app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                .getAppState()))\n        .__(\"Queue:\", schedulerPath, app.getQueue())\n        .__(\"FinalStatus Reported by AM:\",\n            clairfyAppFinalStatus(app.getFinalAppStatus()))\n        .__(\"Started:\", Times.format(app.getStartedTime()))\n        .__(\n            \"Elapsed:\",\n            StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n                app.getFinishedTime())))\n        .__(\n            \"Tracking URL:\",\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                .getTrackingUrl()),\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable.__(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable.__(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable.__(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable.__(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable.__(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable.__(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 5:59 AM",
      "commitName": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "13/03/18 9:12 PM",
      "commitNameOld": "e6de10d0a6363bdaf767a7bdac7ad908d7786718",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 34.37,
      "commitsBetweenForRepo": 342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,63 @@\n   private void generateOverviewTable(AppInfo app, String schedulerPath,\n       String webUiType, ApplicationReport appReport) {\n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n         .__(\"User:\", schedulerPath, app.getUser())\n         .__(\"Name:\", app.getName())\n         .__(\"Application Type:\", app.getType())\n         .__(\"Application Tags:\",\n             app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n         .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n         .__(\n             \"YarnApplicationState:\",\n             app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                 .getAppState()))\n         .__(\"Queue:\", schedulerPath, app.getQueue())\n         .__(\"FinalStatus Reported by AM:\",\n             clairfyAppFinalStatus(app.getFinalAppStatus()))\n         .__(\"Started:\", Times.format(app.getStartedTime()))\n-        .__(\n-            \"Elapsed:\",\n-            StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n-                app.getFinishedTime())))\n+        .__(\"Launched:\", Times.format(app.getLaunchTime()))\n+        .__(\"Finished:\", Times.format(app.getFinishedTime()))\n+        .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n         .__(\n             \"Tracking URL:\",\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                 .getTrackingUrl()),\n             app.getTrackingUrl() \u003d\u003d null\n                 || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                 .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                 : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable.__(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable.__(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n       long timeout \u003d appReport.getApplicationTimeouts()\n           .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n       if (timeout \u003c 0) {\n         overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n       } else {\n         overviewTable.__(\"Application Timeout (Remaining Time):\",\n             String.format(\"%d seconds\", timeout));\n       }\n     }\n     overviewTable.__(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n     overviewTable.__(\"Application Node Label expression:\",\n         app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAppNodeLabelExpression());\n     overviewTable.__(\"AM container Node Label expression:\",\n         app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAmNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateOverviewTable(AppInfo app, String schedulerPath,\n      String webUiType, ApplicationReport appReport) {\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n        .__(\"User:\", schedulerPath, app.getUser())\n        .__(\"Name:\", app.getName())\n        .__(\"Application Type:\", app.getType())\n        .__(\"Application Tags:\",\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n        .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n        .__(\n            \"YarnApplicationState:\",\n            app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                .getAppState()))\n        .__(\"Queue:\", schedulerPath, app.getQueue())\n        .__(\"FinalStatus Reported by AM:\",\n            clairfyAppFinalStatus(app.getFinalAppStatus()))\n        .__(\"Started:\", Times.format(app.getStartedTime()))\n        .__(\"Launched:\", Times.format(app.getLaunchTime()))\n        .__(\"Finished:\", Times.format(app.getFinishedTime()))\n        .__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime()))\n        .__(\n            \"Tracking URL:\",\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                .getTrackingUrl()),\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable.__(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable.__(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable.__(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable.__(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable.__(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable.__(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "e6de10d0a6363bdaf767a7bdac7ad908d7786718": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8022. ResourceManager UI cluster/app/\u003capp-id\u003e page fails to render. Contributed by Tarun Parimi.\n",
      "commitDate": "13/03/18 9:12 PM",
      "commitName": "e6de10d0a6363bdaf767a7bdac7ad908d7786718",
      "commitAuthor": "Rohith Sharma K S",
      "diff": "@@ -0,0 +1,64 @@\n+  private void generateOverviewTable(AppInfo app, String schedulerPath,\n+      String webUiType, ApplicationReport appReport) {\n+    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n+        .__(\"User:\", schedulerPath, app.getUser())\n+        .__(\"Name:\", app.getName())\n+        .__(\"Application Type:\", app.getType())\n+        .__(\"Application Tags:\",\n+            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n+        .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n+        .__(\n+            \"YarnApplicationState:\",\n+            app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n+                .getAppState()))\n+        .__(\"Queue:\", schedulerPath, app.getQueue())\n+        .__(\"FinalStatus Reported by AM:\",\n+            clairfyAppFinalStatus(app.getFinalAppStatus()))\n+        .__(\"Started:\", Times.format(app.getStartedTime()))\n+        .__(\n+            \"Elapsed:\",\n+            StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n+                app.getFinishedTime())))\n+        .__(\n+            \"Tracking URL:\",\n+            app.getTrackingUrl() \u003d\u003d null\n+                || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n+                .getTrackingUrl()),\n+            app.getTrackingUrl() \u003d\u003d null\n+                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n+                .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n+                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n+                : \"ApplicationMaster\");\n+    if (webUiType !\u003d null\n+        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n+      LogAggregationStatus status \u003d getLogAggregationStatus();\n+      if (status \u003d\u003d null) {\n+        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n+      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n+          || status \u003d\u003d LogAggregationStatus.NOT_START\n+          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n+        overviewTable.__(\"Log Aggregation Status:\", status.name());\n+      } else {\n+        overviewTable.__(\"Log Aggregation Status:\",\n+            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n+      }\n+      long timeout \u003d appReport.getApplicationTimeouts()\n+          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n+      if (timeout \u003c 0) {\n+        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n+      } else {\n+        overviewTable.__(\"Application Timeout (Remaining Time):\",\n+            String.format(\"%d seconds\", timeout));\n+      }\n+    }\n+    overviewTable.__(\"Diagnostics:\",\n+        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n+    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n+    overviewTable.__(\"Application Node Label expression:\",\n+        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n+            : app.getAppNodeLabelExpression());\n+    overviewTable.__(\"AM container Node Label expression:\",\n+        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n+            : app.getAmNodeLabelExpression());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateOverviewTable(AppInfo app, String schedulerPath,\n      String webUiType, ApplicationReport appReport) {\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n        .__(\"User:\", schedulerPath, app.getUser())\n        .__(\"Name:\", app.getName())\n        .__(\"Application Type:\", app.getType())\n        .__(\"Application Tags:\",\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n        .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n        .__(\n            \"YarnApplicationState:\",\n            app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n                .getAppState()))\n        .__(\"Queue:\", schedulerPath, app.getQueue())\n        .__(\"FinalStatus Reported by AM:\",\n            clairfyAppFinalStatus(app.getFinalAppStatus()))\n        .__(\"Started:\", Times.format(app.getStartedTime()))\n        .__(\n            \"Elapsed:\",\n            StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n                app.getFinishedTime())))\n        .__(\n            \"Tracking URL:\",\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n                .getTrackingUrl()),\n            app.getTrackingUrl() \u003d\u003d null\n                || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n                .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable.__(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable.__(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable.__(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable.__(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable.__(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable.__(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java"
    }
  }
}