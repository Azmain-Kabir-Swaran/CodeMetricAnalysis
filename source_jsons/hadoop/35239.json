{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLeveldbStateStoreService.java",
  "functionName": "initStorage",
  "functionId": "initStorage___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
  "functionStartLine": 1670,
  "functionEndLine": 1675,
  "numCommitsSeen": 43,
  "timeTaken": 2327,
  "changeHistory": [
    "4a8508501bc753858693dacdafba61d604702f71",
    "29f520052e2b02f44979980e446acc0dccd96d54",
    "8a8708582091c87e81e90f7a442624ac1e34ed33",
    "66598697a6e777615334ebde5ba7738135da83ae"
  ],
  "changeHistoryShort": {
    "4a8508501bc753858693dacdafba61d604702f71": "Ybodychange",
    "29f520052e2b02f44979980e446acc0dccd96d54": "Ybodychange",
    "8a8708582091c87e81e90f7a442624ac1e34ed33": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a8508501bc753858693dacdafba61d604702f71": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5009. NMLeveldbStateStoreService database can grow substantially leading to longer recovery times. Contributed by Jason Lowe\n",
      "commitDate": "28/04/16 9:54 PM",
      "commitName": "4a8508501bc753858693dacdafba61d604702f71",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/04/16 12:17 PM",
      "commitNameOld": "3150ae8108a1fc40a67926be6254824c1e37cb38",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 14.4,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,6 @@\n   protected void initStorage(Configuration conf)\n       throws IOException {\n-    Path storeRoot \u003d createStorageDir(conf);\n-    Options options \u003d new Options();\n-    options.createIfMissing(false);\n-    options.logger(new LeveldbLogger());\n-    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n-    File dbfile \u003d new File(storeRoot.toString());\n-    try {\n-      db \u003d JniDBFactory.factory.open(dbfile, options);\n-    } catch (NativeDB.DBException e) {\n-      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n-        LOG.info(\"Creating state database at \" + dbfile);\n-        isNewlyCreated \u003d true;\n-        options.createIfMissing(true);\n-        try {\n-          db \u003d JniDBFactory.factory.open(dbfile, options);\n-          // store version\n-          storeVersion();\n-        } catch (DBException dbErr) {\n-          throw new IOException(dbErr.getMessage(), dbErr);\n-        }\n-      } else {\n-        throw e;\n-      }\n-    }\n+    db \u003d openDatabase(conf);\n     checkVersion();\n+    startCompactionTimer(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initStorage(Configuration conf)\n      throws IOException {\n    db \u003d openDatabase(conf);\n    checkVersion();\n    startCompactionTimer(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "29f520052e2b02f44979980e446acc0dccd96d54": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2624. Resource Localization fails on a cluster due to existing cache directories. Contributed by Anubhav Dhoot\n",
      "commitDate": "02/10/14 10:39 AM",
      "commitName": "29f520052e2b02f44979980e446acc0dccd96d54",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "12/08/14 3:56 AM",
      "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 51.28,
      "commitsBetweenForRepo": 552,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   protected void initStorage(Configuration conf)\n       throws IOException {\n     Path storeRoot \u003d createStorageDir(conf);\n     Options options \u003d new Options();\n     options.createIfMissing(false);\n     options.logger(new LeveldbLogger());\n     LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n     File dbfile \u003d new File(storeRoot.toString());\n     try {\n       db \u003d JniDBFactory.factory.open(dbfile, options);\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         LOG.info(\"Creating state database at \" + dbfile);\n+        isNewlyCreated \u003d true;\n         options.createIfMissing(true);\n         try {\n           db \u003d JniDBFactory.factory.open(dbfile, options);\n           // store version\n           storeVersion();\n         } catch (DBException dbErr) {\n           throw new IOException(dbErr.getMessage(), dbErr);\n         }\n       } else {\n         throw e;\n       }\n     }\n     checkVersion();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initStorage(Configuration conf)\n      throws IOException {\n    Path storeRoot \u003d createStorageDir(conf);\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    options.logger(new LeveldbLogger());\n    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n    File dbfile \u003d new File(storeRoot.toString());\n    try {\n      db \u003d JniDBFactory.factory.open(dbfile, options);\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        isNewlyCreated \u003d true;\n        options.createIfMissing(true);\n        try {\n          db \u003d JniDBFactory.factory.open(dbfile, options);\n          // store version\n          storeVersion();\n        } catch (DBException dbErr) {\n          throw new IOException(dbErr.getMessage(), dbErr);\n        }\n      } else {\n        throw e;\n      }\n    }\n    checkVersion();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "8a8708582091c87e81e90f7a442624ac1e34ed33": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2045. Data persisted in NM should be versioned. Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612285 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 7:43 AM",
      "commitName": "8a8708582091c87e81e90f7a442624ac1e34ed33",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "17/07/14 4:33 PM",
      "commitNameOld": "403ec8ea80d59f209823a7370dc8185fa2c1c368",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 3.63,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,27 @@\n   protected void initStorage(Configuration conf)\n       throws IOException {\n     Path storeRoot \u003d createStorageDir(conf);\n     Options options \u003d new Options();\n     options.createIfMissing(false);\n     options.logger(new LeveldbLogger());\n     LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n     File dbfile \u003d new File(storeRoot.toString());\n-    byte[] schemaVersionData \u003d null;\n     try {\n       db \u003d JniDBFactory.factory.open(dbfile, options);\n-      try {\n-        schemaVersionData \u003d db.get(bytes(DB_SCHEMA_VERSION_KEY));\n-      } catch (DBException e) {\n-        throw new IOException(e.getMessage(), e);\n-      }\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         LOG.info(\"Creating state database at \" + dbfile);\n         options.createIfMissing(true);\n         try {\n           db \u003d JniDBFactory.factory.open(dbfile, options);\n-          schemaVersionData \u003d bytes(DB_SCHEMA_VERSION);\n-          db.put(bytes(DB_SCHEMA_VERSION_KEY), schemaVersionData);\n+          // store version\n+          storeVersion();\n         } catch (DBException dbErr) {\n           throw new IOException(dbErr.getMessage(), dbErr);\n         }\n       } else {\n         throw e;\n       }\n     }\n-    if (schemaVersionData !\u003d null) {\n-      String schemaVersion \u003d asString(schemaVersionData);\n-      // only support exact schema matches for now\n-      if (!DB_SCHEMA_VERSION.equals(schemaVersion)) {\n-        throw new IOException(\"Incompatible state database schema, found \"\n-            + schemaVersion + \" expected \" + DB_SCHEMA_VERSION);\n-      }\n-    } else {\n-      throw new IOException(\"State database schema version not found\");\n-    }\n+    checkVersion();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initStorage(Configuration conf)\n      throws IOException {\n    Path storeRoot \u003d createStorageDir(conf);\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    options.logger(new LeveldbLogger());\n    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n    File dbfile \u003d new File(storeRoot.toString());\n    try {\n      db \u003d JniDBFactory.factory.open(dbfile, options);\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          db \u003d JniDBFactory.factory.open(dbfile, options);\n          // store version\n          storeVersion();\n        } catch (DBException dbErr) {\n          throw new IOException(dbErr.getMessage(), dbErr);\n        }\n      } else {\n        throw e;\n      }\n    }\n    checkVersion();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,42 @@\n+  protected void initStorage(Configuration conf)\n+      throws IOException {\n+    Path storeRoot \u003d createStorageDir(conf);\n+    Options options \u003d new Options();\n+    options.createIfMissing(false);\n+    options.logger(new LeveldbLogger());\n+    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n+    File dbfile \u003d new File(storeRoot.toString());\n+    byte[] schemaVersionData \u003d null;\n+    try {\n+      db \u003d JniDBFactory.factory.open(dbfile, options);\n+      try {\n+        schemaVersionData \u003d db.get(bytes(DB_SCHEMA_VERSION_KEY));\n+      } catch (DBException e) {\n+        throw new IOException(e.getMessage(), e);\n+      }\n+    } catch (NativeDB.DBException e) {\n+      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n+        LOG.info(\"Creating state database at \" + dbfile);\n+        options.createIfMissing(true);\n+        try {\n+          db \u003d JniDBFactory.factory.open(dbfile, options);\n+          schemaVersionData \u003d bytes(DB_SCHEMA_VERSION);\n+          db.put(bytes(DB_SCHEMA_VERSION_KEY), schemaVersionData);\n+        } catch (DBException dbErr) {\n+          throw new IOException(dbErr.getMessage(), dbErr);\n+        }\n+      } else {\n+        throw e;\n+      }\n+    }\n+    if (schemaVersionData !\u003d null) {\n+      String schemaVersion \u003d asString(schemaVersionData);\n+      // only support exact schema matches for now\n+      if (!DB_SCHEMA_VERSION.equals(schemaVersion)) {\n+        throw new IOException(\"Incompatible state database schema, found \"\n+            + schemaVersion + \" expected \" + DB_SCHEMA_VERSION);\n+      }\n+    } else {\n+      throw new IOException(\"State database schema version not found\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initStorage(Configuration conf)\n      throws IOException {\n    Path storeRoot \u003d createStorageDir(conf);\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    options.logger(new LeveldbLogger());\n    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\n    File dbfile \u003d new File(storeRoot.toString());\n    byte[] schemaVersionData \u003d null;\n    try {\n      db \u003d JniDBFactory.factory.open(dbfile, options);\n      try {\n        schemaVersionData \u003d db.get(bytes(DB_SCHEMA_VERSION_KEY));\n      } catch (DBException e) {\n        throw new IOException(e.getMessage(), e);\n      }\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          db \u003d JniDBFactory.factory.open(dbfile, options);\n          schemaVersionData \u003d bytes(DB_SCHEMA_VERSION);\n          db.put(bytes(DB_SCHEMA_VERSION_KEY), schemaVersionData);\n        } catch (DBException dbErr) {\n          throw new IOException(dbErr.getMessage(), dbErr);\n        }\n      } else {\n        throw e;\n      }\n    }\n    if (schemaVersionData !\u003d null) {\n      String schemaVersion \u003d asString(schemaVersionData);\n      // only support exact schema matches for now\n      if (!DB_SCHEMA_VERSION.equals(schemaVersion)) {\n        throw new IOException(\"Incompatible state database schema, found \"\n            + schemaVersion + \" expected \" + DB_SCHEMA_VERSION);\n      }\n    } else {\n      throw new IOException(\"State database schema version not found\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java"
    }
  }
}