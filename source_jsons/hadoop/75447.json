{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "fenceOldActive",
  "functionId": "fenceOldActive",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 969,
  "functionEndLine": 1000,
  "numCommitsSeen": 38,
  "timeTaken": 1497,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "805c1280ce2773bc61ea718723b42b09d795688f"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "805c1280ce2773bc61ea718723b42b09d795688f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 211.49,
      "commitsBetweenForRepo": 1578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private Stat fenceOldActive() throws InterruptedException, KeeperException {\n     final Stat stat \u003d new Stat();\n     byte[] data;\n     LOG.info(\"Checking for any old active which needs to be fenced...\");\n     try {\n       data \u003d zkDoWithRetries(new ZKAction\u003cbyte[]\u003e() {\n         @Override\n         public byte[] run() throws KeeperException, InterruptedException {\n           return zkClient.getData(zkBreadCrumbPath, false, stat);\n         }\n       });\n     } catch (KeeperException ke) {\n       if (isNodeDoesNotExist(ke.code())) {\n         LOG.info(\"No old node to fence\");\n         return null;\n       }\n       \n       // If we failed to read for any other reason, then likely we lost\n       // our session, or we don\u0027t have permissions, etc. In any case,\n       // we probably shouldn\u0027t become active, and failing the whole\n       // thing is the best bet.\n       throw ke;\n     }\n \n-    LOG.info(\"Old node exists: \" + StringUtils.byteToHexString(data));\n+    LOG.info(\"Old node exists: {}\", StringUtils.byteToHexString(data));\n     if (Arrays.equals(data, appData)) {\n       LOG.info(\"But old node has our own data, so don\u0027t need to fence it.\");\n     } else {\n       appClient.fenceOldActive(data);\n     }\n     return stat;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Stat fenceOldActive() throws InterruptedException, KeeperException {\n    final Stat stat \u003d new Stat();\n    byte[] data;\n    LOG.info(\"Checking for any old active which needs to be fenced...\");\n    try {\n      data \u003d zkDoWithRetries(new ZKAction\u003cbyte[]\u003e() {\n        @Override\n        public byte[] run() throws KeeperException, InterruptedException {\n          return zkClient.getData(zkBreadCrumbPath, false, stat);\n        }\n      });\n    } catch (KeeperException ke) {\n      if (isNodeDoesNotExist(ke.code())) {\n        LOG.info(\"No old node to fence\");\n        return null;\n      }\n      \n      // If we failed to read for any other reason, then likely we lost\n      // our session, or we don\u0027t have permissions, etc. In any case,\n      // we probably shouldn\u0027t become active, and failing the whole\n      // thing is the best bet.\n      throw ke;\n    }\n\n    LOG.info(\"Old node exists: {}\", StringUtils.byteToHexString(data));\n    if (Arrays.equals(data, appData)) {\n      LOG.info(\"But old node has our own data, so don\u0027t need to fence it.\");\n    } else {\n      appClient.fenceOldActive(data);\n    }\n    return stat;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "805c1280ce2773bc61ea718723b42b09d795688f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8163. Improve ActiveStandbyElector to provide hooks for fencing old active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/03/12 5:05 PM",
      "commitName": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  private Stat fenceOldActive() throws InterruptedException, KeeperException {\n+    final Stat stat \u003d new Stat();\n+    byte[] data;\n+    LOG.info(\"Checking for any old active which needs to be fenced...\");\n+    try {\n+      data \u003d zkDoWithRetries(new ZKAction\u003cbyte[]\u003e() {\n+        @Override\n+        public byte[] run() throws KeeperException, InterruptedException {\n+          return zkClient.getData(zkBreadCrumbPath, false, stat);\n+        }\n+      });\n+    } catch (KeeperException ke) {\n+      if (isNodeDoesNotExist(ke.code())) {\n+        LOG.info(\"No old node to fence\");\n+        return null;\n+      }\n+      \n+      // If we failed to read for any other reason, then likely we lost\n+      // our session, or we don\u0027t have permissions, etc. In any case,\n+      // we probably shouldn\u0027t become active, and failing the whole\n+      // thing is the best bet.\n+      throw ke;\n+    }\n+\n+    LOG.info(\"Old node exists: \" + StringUtils.byteToHexString(data));\n+    if (Arrays.equals(data, appData)) {\n+      LOG.info(\"But old node has our own data, so don\u0027t need to fence it.\");\n+    } else {\n+      appClient.fenceOldActive(data);\n+    }\n+    return stat;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Stat fenceOldActive() throws InterruptedException, KeeperException {\n    final Stat stat \u003d new Stat();\n    byte[] data;\n    LOG.info(\"Checking for any old active which needs to be fenced...\");\n    try {\n      data \u003d zkDoWithRetries(new ZKAction\u003cbyte[]\u003e() {\n        @Override\n        public byte[] run() throws KeeperException, InterruptedException {\n          return zkClient.getData(zkBreadCrumbPath, false, stat);\n        }\n      });\n    } catch (KeeperException ke) {\n      if (isNodeDoesNotExist(ke.code())) {\n        LOG.info(\"No old node to fence\");\n        return null;\n      }\n      \n      // If we failed to read for any other reason, then likely we lost\n      // our session, or we don\u0027t have permissions, etc. In any case,\n      // we probably shouldn\u0027t become active, and failing the whole\n      // thing is the best bet.\n      throw ke;\n    }\n\n    LOG.info(\"Old node exists: \" + StringUtils.byteToHexString(data));\n    if (Arrays.equals(data, appData)) {\n      LOG.info(\"But old node has our own data, so don\u0027t need to fence it.\");\n    } else {\n      appClient.fenceOldActive(data);\n    }\n    return stat;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}