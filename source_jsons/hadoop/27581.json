{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineCollectorManager.java",
  "functionName": "serviceStop",
  "functionId": "serviceStop",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
  "functionStartLine": 222,
  "functionEndLine": 247,
  "numCommitsSeen": 21,
  "timeTaken": 1191,
  "changeHistory": [
    "0b62983c5a9361eb832784f134f140f9926c9ec6",
    "7dd258d8f4aef594346e874e5ad4ba22c3171cd1",
    "8603736ef2bb34605ea10f516dbe4e73bed3f309",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875"
  ],
  "changeHistoryShort": {
    "0b62983c5a9361eb832784f134f140f9926c9ec6": "Ybodychange",
    "7dd258d8f4aef594346e874e5ad4ba22c3171cd1": "Ybodychange",
    "8603736ef2bb34605ea10f516dbe4e73bed3f309": "Ybodychange",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b62983c5a9361eb832784f134f140f9926c9ec6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8826. Fix lingering timeline collector after serviceStop in TimelineCollectorManager. Contributed by Prabha Manepalli.\n",
      "commitDate": "23/10/18 12:28 AM",
      "commitName": "0b62983c5a9361eb832784f134f140f9926c9ec6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "354be99dbf3b6effb45032b574210fd7161d83d4",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 419.06,
      "commitsBetweenForRepo": 3819,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected void serviceStop() throws Exception {\n-    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n+    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 0) {\n       synchronized (collectors) {\n         for (TimelineCollector c : collectors.values()) {\n           c.serviceStop();\n         }\n       }\n     }\n     // stop the flusher first\n     if (writerFlusher !\u003d null) {\n       writerFlusher.shutdown();\n       writerFlusherRunning \u003d false;\n       if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\n         // in reality it should be ample time for the flusher task to finish\n         // even if it times out, writers may be able to handle closing in this\n         // situation fine\n         // proceed to close the writer\n         LOG.warn(\"failed to stop the flusher task in time. \" +\n             \"will still proceed to close the writer.\");\n       }\n     }\n     if (writer !\u003d null) {\n       writer.close();\n     }\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStop() throws Exception {\n    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 0) {\n      synchronized (collectors) {\n        for (TimelineCollector c : collectors.values()) {\n          c.serviceStop();\n        }\n      }\n    }\n    // stop the flusher first\n    if (writerFlusher !\u003d null) {\n      writerFlusher.shutdown();\n      writerFlusherRunning \u003d false;\n      if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\n        // in reality it should be ample time for the flusher task to finish\n        // even if it times out, writers may be able to handle closing in this\n        // situation fine\n        // proceed to close the writer\n        LOG.warn(\"failed to stop the flusher task in time. \" +\n            \"will still proceed to close the writer.\");\n      }\n    }\n    if (writer !\u003d null) {\n      writer.close();\n    }\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "7dd258d8f4aef594346e874e5ad4ba22c3171cd1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6563 ConcurrentModificationException in TimelineCollectorManager while stopping RM (Contributed by Haibo Chen via Vrushali C)\n",
      "commitDate": "09/05/17 11:18 AM",
      "commitName": "7dd258d8f4aef594346e874e5ad4ba22c3171cd1",
      "commitAuthor": "Vrushali Channapattan",
      "commitDateOld": "30/03/17 1:47 PM",
      "commitNameOld": "b58777a9c9a5b6f2e4bcfd2b3bede33f25f80dec",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 39.9,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   protected void serviceStop() throws Exception {\n     if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n-      for (TimelineCollector c : collectors.values()) {\n-        c.serviceStop();\n+      synchronized (collectors) {\n+        for (TimelineCollector c : collectors.values()) {\n+          c.serviceStop();\n+        }\n       }\n     }\n     // stop the flusher first\n     if (writerFlusher !\u003d null) {\n       writerFlusher.shutdown();\n       writerFlusherRunning \u003d false;\n       if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\n         // in reality it should be ample time for the flusher task to finish\n         // even if it times out, writers may be able to handle closing in this\n         // situation fine\n         // proceed to close the writer\n         LOG.warn(\"failed to stop the flusher task in time. \" +\n             \"will still proceed to close the writer.\");\n       }\n     }\n     if (writer !\u003d null) {\n       writer.close();\n     }\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStop() throws Exception {\n    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n      synchronized (collectors) {\n        for (TimelineCollector c : collectors.values()) {\n          c.serviceStop();\n        }\n      }\n    }\n    // stop the flusher first\n    if (writerFlusher !\u003d null) {\n      writerFlusher.shutdown();\n      writerFlusherRunning \u003d false;\n      if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\n        // in reality it should be ample time for the flusher task to finish\n        // even if it times out, writers may be able to handle closing in this\n        // situation fine\n        // proceed to close the writer\n        LOG.warn(\"failed to stop the flusher task in time. \" +\n            \"will still proceed to close the writer.\");\n      }\n    }\n    if (writer !\u003d null) {\n      writer.close();\n    }\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "8603736ef2bb34605ea10f516dbe4e73bed3f309": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3949. Ensure timely flush of timeline writes. Contributed by Sangjin Lee.\n\n(cherry picked from commit 967bef7e0396d857913caa2574afb103a5f0b81b)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8603736ef2bb34605ea10f516dbe4e73bed3f309",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,24 @@\n   protected void serviceStop() throws Exception {\n     if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n       for (TimelineCollector c : collectors.values()) {\n         c.serviceStop();\n       }\n     }\n+    // stop the flusher first\n+    if (writerFlusher !\u003d null) {\n+      writerFlusher.shutdown();\n+      writerFlusherRunning \u003d false;\n+      if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\n+        // in reality it should be ample time for the flusher task to finish\n+        // even if it times out, writers may be able to handle closing in this\n+        // situation fine\n+        // proceed to close the writer\n+        LOG.warn(\"failed to stop the flusher task in time. \" +\n+            \"will still proceed to close the writer.\");\n+      }\n+    }\n     if (writer !\u003d null) {\n       writer.close();\n     }\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStop() throws Exception {\n    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n      for (TimelineCollector c : collectors.values()) {\n        c.serviceStop();\n      }\n    }\n    // stop the flusher first\n    if (writerFlusher !\u003d null) {\n      writerFlusher.shutdown();\n      writerFlusherRunning \u003d false;\n      if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\n        // in reality it should be ample time for the flusher task to finish\n        // even if it times out, writers may be able to handle closing in this\n        // situation fine\n        // proceed to close the writer\n        LOG.warn(\"failed to stop the flusher task in time. \" +\n            \"will still proceed to close the writer.\");\n      }\n    }\n    if (writer !\u003d null) {\n      writer.close();\n    }\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3411. [Storage implementation] explore the native HBase write schema for storage (Vrushali C via sjlee)\n\n(cherry picked from commit 7a3068854d27eadae1c57545988f5b2029bf119a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,11 @@\n+  protected void serviceStop() throws Exception {\n+    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n+      for (TimelineCollector c : collectors.values()) {\n+        c.serviceStop();\n+      }\n+    }\n+    if (writer !\u003d null) {\n+      writer.close();\n+    }\n+    super.serviceStop();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStop() throws Exception {\n    if (collectors !\u003d null \u0026\u0026 collectors.size() \u003e 1) {\n      for (TimelineCollector c : collectors.values()) {\n        c.serviceStop();\n      }\n    }\n    if (writer !\u003d null) {\n      writer.close();\n    }\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java"
    }
  }
}