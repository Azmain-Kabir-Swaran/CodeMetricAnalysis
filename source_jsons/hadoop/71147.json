{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "attemptCleanup",
  "functionId": "attemptCleanup",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java",
  "functionStartLine": 1075,
  "functionEndLine": 1108,
  "numCommitsSeen": 7,
  "timeTaken": 1050,
  "changeHistory": [
    "9520b2ad790bd8527033a03e7ee50da71a85df1d",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": "Ybodychange",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10083. Provide utility to ask whether an application is in final status. Contributed by Adam Antal\n",
      "commitDate": "22/01/20 7:25 AM",
      "commitName": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "01/11/19 9:32 AM",
      "commitNameOld": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 81.95,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public void attemptCleanup() {\n     LOG.info(\"Attempting to clean up remaining running applications.\");\n     if (workloadJob !\u003d null) {\n       try {\n         workloadAppState \u003d workloadJob.getJobState();\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to fetch completion status of workload job. Will \"\n                 + \"proceed to attempt to kill it.\", ioe);\n       } catch (InterruptedException ie) {\n         Thread.currentThread().interrupt();\n         return;\n       }\n       if (!isCompleted(workloadAppState)) {\n         try {\n           LOG.info(\"Attempting to kill workload app: {}\",\n               workloadJob.getJobID());\n           workloadJob.killJob();\n           LOG.info(\"Killed workload app\");\n         } catch (IOException ioe) {\n           LOG.error(\"Unable to kill workload app ({})\", workloadJob.getJobID(),\n               ioe);\n         }\n       }\n     }\n-    if (infraAppId !\u003d null \u0026\u0026 !isCompleted(infraAppState)) {\n+    if (infraAppId !\u003d null \u0026\u0026 !Apps.isApplicationFinalState(infraAppState)) {\n       try {\n         LOG.info(\"Attempting to kill infrastructure app: \" + infraAppId);\n         forceKillApplication(infraAppId);\n         LOG.info(\"Killed infrastructure app\");\n       } catch (YarnException | IOException e) {\n         LOG.error(\"Unable to kill infrastructure app ({})\", infraAppId, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void attemptCleanup() {\n    LOG.info(\"Attempting to clean up remaining running applications.\");\n    if (workloadJob !\u003d null) {\n      try {\n        workloadAppState \u003d workloadJob.getJobState();\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to fetch completion status of workload job. Will \"\n                + \"proceed to attempt to kill it.\", ioe);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n        return;\n      }\n      if (!isCompleted(workloadAppState)) {\n        try {\n          LOG.info(\"Attempting to kill workload app: {}\",\n              workloadJob.getJobID());\n          workloadJob.killJob();\n          LOG.info(\"Killed workload app\");\n        } catch (IOException ioe) {\n          LOG.error(\"Unable to kill workload app ({})\", workloadJob.getJobID(),\n              ioe);\n        }\n      }\n    }\n    if (infraAppId !\u003d null \u0026\u0026 !Apps.isApplicationFinalState(infraAppState)) {\n      try {\n        LOG.info(\"Attempting to kill infrastructure app: \" + infraAppId);\n        forceKillApplication(infraAppId);\n        LOG.info(\"Killed infrastructure app\");\n      } catch (YarnException | IOException e) {\n        LOG.error(\"Unable to kill infrastructure app ({})\", infraAppId, e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java",
      "extendedDetails": {}
    },
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,34 @@\n+  public void attemptCleanup() {\n+    LOG.info(\"Attempting to clean up remaining running applications.\");\n+    if (workloadJob !\u003d null) {\n+      try {\n+        workloadAppState \u003d workloadJob.getJobState();\n+      } catch (IOException ioe) {\n+        LOG.warn(\"Unable to fetch completion status of workload job. Will \"\n+                + \"proceed to attempt to kill it.\", ioe);\n+      } catch (InterruptedException ie) {\n+        Thread.currentThread().interrupt();\n+        return;\n+      }\n+      if (!isCompleted(workloadAppState)) {\n+        try {\n+          LOG.info(\"Attempting to kill workload app: {}\",\n+              workloadJob.getJobID());\n+          workloadJob.killJob();\n+          LOG.info(\"Killed workload app\");\n+        } catch (IOException ioe) {\n+          LOG.error(\"Unable to kill workload app ({})\", workloadJob.getJobID(),\n+              ioe);\n+        }\n+      }\n+    }\n+    if (infraAppId !\u003d null \u0026\u0026 !isCompleted(infraAppState)) {\n+      try {\n+        LOG.info(\"Attempting to kill infrastructure app: \" + infraAppId);\n+        forceKillApplication(infraAppId);\n+        LOG.info(\"Killed infrastructure app\");\n+      } catch (YarnException | IOException e) {\n+        LOG.error(\"Unable to kill infrastructure app ({})\", infraAppId, e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void attemptCleanup() {\n    LOG.info(\"Attempting to clean up remaining running applications.\");\n    if (workloadJob !\u003d null) {\n      try {\n        workloadAppState \u003d workloadJob.getJobState();\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to fetch completion status of workload job. Will \"\n                + \"proceed to attempt to kill it.\", ioe);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n        return;\n      }\n      if (!isCompleted(workloadAppState)) {\n        try {\n          LOG.info(\"Attempting to kill workload app: {}\",\n              workloadJob.getJobID());\n          workloadJob.killJob();\n          LOG.info(\"Killed workload app\");\n        } catch (IOException ioe) {\n          LOG.error(\"Unable to kill workload app ({})\", workloadJob.getJobID(),\n              ioe);\n        }\n      }\n    }\n    if (infraAppId !\u003d null \u0026\u0026 !isCompleted(infraAppState)) {\n      try {\n        LOG.info(\"Attempting to kill infrastructure app: \" + infraAppId);\n        forceKillApplication(infraAppId);\n        LOG.info(\"Killed infrastructure app\");\n      } catch (YarnException | IOException e) {\n        LOG.error(\"Unable to kill infrastructure app ({})\", infraAppId, e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java"
    }
  }
}