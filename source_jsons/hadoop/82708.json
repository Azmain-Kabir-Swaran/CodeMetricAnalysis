{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JvmMetrics.java",
  "functionName": "getThreadUsageFromGroup",
  "functionId": "getThreadUsageFromGroup___rb-MetricsRecordBuilder",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
  "functionStartLine": 254,
  "functionEndLine": 285,
  "numCommitsSeen": 14,
  "timeTaken": 816,
  "changeHistory": [
    "954930e9d97b57bd3f595d2c123f4821f865ca3a"
  ],
  "changeHistoryShort": {
    "954930e9d97b57bd3f595d2c123f4821f865ca3a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "954930e9d97b57bd3f595d2c123f4821f865ca3a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16850. Support getting thread info from thread group for JvmMetrics to improve the performance. Contributed by Tao Yang.\n",
      "commitDate": "13/02/20 10:20 PM",
      "commitName": "954930e9d97b57bd3f595d2c123f4821f865ca3a",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,32 @@\n+  private void getThreadUsageFromGroup(MetricsRecordBuilder rb) {\n+    int threadsNew \u003d 0;\n+    int threadsRunnable \u003d 0;\n+    int threadsBlocked \u003d 0;\n+    int threadsWaiting \u003d 0;\n+    int threadsTimedWaiting \u003d 0;\n+    int threadsTerminated \u003d 0;\n+    ThreadGroup threadGroup \u003d Thread.currentThread().getThreadGroup();\n+    Thread[] threads \u003d new Thread[threadGroup.activeCount()];\n+    threadGroup.enumerate(threads);\n+    for (Thread thread : threads) {\n+      if (thread \u003d\u003d null) {\n+        // race protection\n+        continue;\n+      }\n+      switch (thread.getState()) {\n+      case NEW:           threadsNew++;           break;\n+      case RUNNABLE:      threadsRunnable++;      break;\n+      case BLOCKED:       threadsBlocked++;       break;\n+      case WAITING:       threadsWaiting++;       break;\n+      case TIMED_WAITING: threadsTimedWaiting++;  break;\n+      case TERMINATED:    threadsTerminated++;    break;\n+      default:\n+      }\n+    }\n+    rb.addGauge(ThreadsNew, threadsNew)\n+        .addGauge(ThreadsRunnable, threadsRunnable)\n+        .addGauge(ThreadsBlocked, threadsBlocked)\n+        .addGauge(ThreadsWaiting, threadsWaiting)\n+        .addGauge(ThreadsTimedWaiting, threadsTimedWaiting)\n+        .addGauge(ThreadsTerminated, threadsTerminated);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void getThreadUsageFromGroup(MetricsRecordBuilder rb) {\n    int threadsNew \u003d 0;\n    int threadsRunnable \u003d 0;\n    int threadsBlocked \u003d 0;\n    int threadsWaiting \u003d 0;\n    int threadsTimedWaiting \u003d 0;\n    int threadsTerminated \u003d 0;\n    ThreadGroup threadGroup \u003d Thread.currentThread().getThreadGroup();\n    Thread[] threads \u003d new Thread[threadGroup.activeCount()];\n    threadGroup.enumerate(threads);\n    for (Thread thread : threads) {\n      if (thread \u003d\u003d null) {\n        // race protection\n        continue;\n      }\n      switch (thread.getState()) {\n      case NEW:           threadsNew++;           break;\n      case RUNNABLE:      threadsRunnable++;      break;\n      case BLOCKED:       threadsBlocked++;       break;\n      case WAITING:       threadsWaiting++;       break;\n      case TIMED_WAITING: threadsTimedWaiting++;  break;\n      case TERMINATED:    threadsTerminated++;    break;\n      default:\n      }\n    }\n    rb.addGauge(ThreadsNew, threadsNew)\n        .addGauge(ThreadsRunnable, threadsRunnable)\n        .addGauge(ThreadsBlocked, threadsBlocked)\n        .addGauge(ThreadsWaiting, threadsWaiting)\n        .addGauge(ThreadsTimedWaiting, threadsTimedWaiting)\n        .addGauge(ThreadsTerminated, threadsTerminated);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java"
    }
  }
}