{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "queueCall",
  "functionId": "queueCall___call-Call",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2853,
  "functionEndLine": 2860,
  "numCommitsSeen": 162,
  "timeTaken": 2783,
  "changeHistory": [
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2",
    "236ac773c964fa21d6d5f1496023cd61818dd3b1"
  ],
  "changeHistoryShort": {
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2": "Ybodychange",
    "236ac773c964fa21d6d5f1496023cd61818dd3b1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14035. Reduce fair call queue backoff\u0027s impact on clients. Contributed by Daryn Sharp.\n",
      "commitDate": "06/06/17 6:35 AM",
      "commitName": "855e0477b1706a2d5b0df6a2b0e461aeec8839c2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "05/06/17 9:21 AM",
      "commitNameOld": "abdd609e51a80388493417126c3bc9b1badc0ac1",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,8 @@\n   public void queueCall(Call call) throws IOException, InterruptedException {\n-    if (!callQueue.isClientBackoffEnabled()) {\n-      callQueue.put(call); // queue the call; maybe blocked here\n-    } else if (callQueue.shouldBackOff(call) || !callQueue.offer(call)) {\n-      // If rpc scheduler indicates back off based on performance degradation\n-      // such as response time or rpc queue is full, we will ask the client\n-      // to back off by throwing RetriableException. Whether the client will\n-      // honor RetriableException and retry depends the client and its policy.\n-      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n-      // RetriableException.\n-      rpcMetrics.incrClientBackoff();\n-      throw new RetriableException(\"Server is too busy.\");\n+    // external non-rpc calls don\u0027t need server exception wrapper.\n+    try {\n+      internalQueueCall(call);\n+    } catch (RpcServerException rse) {\n+      throw (IOException)rse.getCause();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void queueCall(Call call) throws IOException, InterruptedException {\n    // external non-rpc calls don\u0027t need server exception wrapper.\n    try {\n      internalQueueCall(call);\n    } catch (RpcServerException rse) {\n      throw (IOException)rse.getCause();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "236ac773c964fa21d6d5f1496023cd61818dd3b1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13537. Support external calls in the RPC call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "29/09/16 11:27 AM",
      "commitName": "236ac773c964fa21d6d5f1496023cd61818dd3b1",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,14 @@\n+  public void queueCall(Call call) throws IOException, InterruptedException {\n+    if (!callQueue.isClientBackoffEnabled()) {\n+      callQueue.put(call); // queue the call; maybe blocked here\n+    } else if (callQueue.shouldBackOff(call) || !callQueue.offer(call)) {\n+      // If rpc scheduler indicates back off based on performance degradation\n+      // such as response time or rpc queue is full, we will ask the client\n+      // to back off by throwing RetriableException. Whether the client will\n+      // honor RetriableException and retry depends the client and its policy.\n+      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n+      // RetriableException.\n+      rpcMetrics.incrClientBackoff();\n+      throw new RetriableException(\"Server is too busy.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void queueCall(Call call) throws IOException, InterruptedException {\n    if (!callQueue.isClientBackoffEnabled()) {\n      callQueue.put(call); // queue the call; maybe blocked here\n    } else if (callQueue.shouldBackOff(call) || !callQueue.offer(call)) {\n      // If rpc scheduler indicates back off based on performance degradation\n      // such as response time or rpc queue is full, we will ask the client\n      // to back off by throwing RetriableException. Whether the client will\n      // honor RetriableException and retry depends the client and its policy.\n      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n      // RetriableException.\n      rpcMetrics.incrClientBackoff();\n      throw new RetriableException(\"Server is too busy.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}