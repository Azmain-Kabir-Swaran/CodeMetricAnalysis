{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlanCommand.java",
  "functionName": "execute",
  "functionId": "execute___cmd-CommandLine",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
  "functionStartLine": 91,
  "functionEndLine": 183,
  "numCommitsSeen": 17,
  "timeTaken": 3009,
  "changeHistory": [
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
    "121e1e1280c7b019f6d2cc3ba9eae1ead0dd8408",
    "9f32364d283dec47dd07490e253d477a0d14ac71",
    "30bb1970cc27c1345871a35bcf1220e520c1804b",
    "35c5943b8ba394191405555cdfc5e6127053ee97",
    "5b8e1c26d702e42b606265860c5e475970876aa5",
    "78a1032b71af7672840da98808e2bebac3cc11d1",
    "64ccb232ccf204991a28fa0211917fa935ad30c5",
    "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
    "75882ec0b096da862b8b373b70a091c19f281b2a"
  ],
  "changeHistoryShort": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": "Ybodychange",
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": "Ybodychange",
    "121e1e1280c7b019f6d2cc3ba9eae1ead0dd8408": "Ybodychange",
    "9f32364d283dec47dd07490e253d477a0d14ac71": "Ybodychange",
    "30bb1970cc27c1345871a35bcf1220e520c1804b": "Ybodychange",
    "35c5943b8ba394191405555cdfc5e6127053ee97": "Ybodychange",
    "5b8e1c26d702e42b606265860c5e475970876aa5": "Ybodychange",
    "78a1032b71af7672840da98808e2bebac3cc11d1": "Ybodychange",
    "64ccb232ccf204991a28fa0211917fa935ad30c5": "Ybodychange",
    "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3": "Ybodychange",
    "75882ec0b096da862b8b373b70a091c19f281b2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16029. Consecutive StringBuilder.append can be reused. Contributed by Ayush Saxena.\n",
      "commitDate": "11/01/19 10:54 AM",
      "commitName": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "13/07/18 8:42 AM",
      "commitNameOld": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 182.13,
      "commitsBetweenForRepo": 1442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,93 @@\n   public void execute(CommandLine cmd) throws Exception {\n     TextStringBuilder result \u003d new TextStringBuilder();\n     String outputLine \u003d \"\";\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n     verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d\n         getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     }\n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancerCLI.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n     try {\n       if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n         outputLine \u003d String.format(\"Writing plan to:\");\n         recordOutput(result, outputLine);\n \n         final String planFileName \u003d String.format(\n             DiskBalancerCLI.PLAN_TEMPLATE,\n             cmd.getOptionValue(DiskBalancerCLI.PLAN));\n         final String planFileFullName \u003d\n             new Path(getOutputPath(), planFileName).toString();\n         recordOutput(result, planFileFullName);\n \n         try (FSDataOutputStream planStream \u003d create(planFileName)) {\n           planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n         }\n       } else {\n         outputLine \u003d String.format(\n             \"No plan generated. DiskBalancing not needed for node: %s\"\n                 + \" threshold used: %s\",\n             cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n         recordOutput(result, outputLine);\n       }\n \n       if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n         printToScreen(plans);\n       }\n     } catch (Exception e) {\n       final String errMsg \u003d\n           \"Errors while recording the output of plan command.\";\n       LOG.error(errMsg, e);\n-      result.appendln(errMsg);\n-      result.appendln(Throwables.getStackTraceAsString(e));\n+      result.appendln(errMsg).appendln(Throwables.getStackTraceAsString(e));\n     }\n \n     getPrintStream().print(result.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    TextStringBuilder result \u003d new TextStringBuilder();\n    String outputLine \u003d \"\";\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d\n        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    }\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancerCLI.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n    try {\n      if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n        outputLine \u003d String.format(\"Writing plan to:\");\n        recordOutput(result, outputLine);\n\n        final String planFileName \u003d String.format(\n            DiskBalancerCLI.PLAN_TEMPLATE,\n            cmd.getOptionValue(DiskBalancerCLI.PLAN));\n        final String planFileFullName \u003d\n            new Path(getOutputPath(), planFileName).toString();\n        recordOutput(result, planFileFullName);\n\n        try (FSDataOutputStream planStream \u003d create(planFileName)) {\n          planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n        }\n      } else {\n        outputLine \u003d String.format(\n            \"No plan generated. DiskBalancing not needed for node: %s\"\n                + \" threshold used: %s\",\n            cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n        recordOutput(result, outputLine);\n      }\n\n      if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n        printToScreen(plans);\n      }\n    } catch (Exception e) {\n      final String errMsg \u003d\n          \"Errors while recording the output of plan command.\";\n      LOG.error(errMsg, e);\n      result.appendln(errMsg).appendln(Throwables.getStackTraceAsString(e));\n    }\n\n    getPrintStream().print(result.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15531. Use commons-text instead of commons-lang in some classes to fix deprecation warnings. Contributed by Takanobu Asanuma.\n",
      "commitDate": "13/07/18 8:42 AM",
      "commitName": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/06/18 10:17 AM",
      "commitNameOld": "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.93,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,94 @@\n   public void execute(CommandLine cmd) throws Exception {\n-    StrBuilder result \u003d new StrBuilder();\n+    TextStringBuilder result \u003d new TextStringBuilder();\n     String outputLine \u003d \"\";\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n     verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d\n         getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     }\n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancerCLI.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n     try {\n       if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n         outputLine \u003d String.format(\"Writing plan to:\");\n         recordOutput(result, outputLine);\n \n         final String planFileName \u003d String.format(\n             DiskBalancerCLI.PLAN_TEMPLATE,\n             cmd.getOptionValue(DiskBalancerCLI.PLAN));\n         final String planFileFullName \u003d\n             new Path(getOutputPath(), planFileName).toString();\n         recordOutput(result, planFileFullName);\n \n         try (FSDataOutputStream planStream \u003d create(planFileName)) {\n           planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n         }\n       } else {\n         outputLine \u003d String.format(\n             \"No plan generated. DiskBalancing not needed for node: %s\"\n                 + \" threshold used: %s\",\n             cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n         recordOutput(result, outputLine);\n       }\n \n       if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n         printToScreen(plans);\n       }\n     } catch (Exception e) {\n       final String errMsg \u003d\n           \"Errors while recording the output of plan command.\";\n       LOG.error(errMsg, e);\n       result.appendln(errMsg);\n       result.appendln(Throwables.getStackTraceAsString(e));\n     }\n \n     getPrintStream().print(result.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    TextStringBuilder result \u003d new TextStringBuilder();\n    String outputLine \u003d \"\";\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d\n        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    }\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancerCLI.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n    try {\n      if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n        outputLine \u003d String.format(\"Writing plan to:\");\n        recordOutput(result, outputLine);\n\n        final String planFileName \u003d String.format(\n            DiskBalancerCLI.PLAN_TEMPLATE,\n            cmd.getOptionValue(DiskBalancerCLI.PLAN));\n        final String planFileFullName \u003d\n            new Path(getOutputPath(), planFileName).toString();\n        recordOutput(result, planFileFullName);\n\n        try (FSDataOutputStream planStream \u003d create(planFileName)) {\n          planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n        }\n      } else {\n        outputLine \u003d String.format(\n            \"No plan generated. DiskBalancing not needed for node: %s\"\n                + \" threshold used: %s\",\n            cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n        recordOutput(result, outputLine);\n      }\n\n      if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n        printToScreen(plans);\n      }\n    } catch (Exception e) {\n      final String errMsg \u003d\n          \"Errors while recording the output of plan command.\";\n      LOG.error(errMsg, e);\n      result.appendln(errMsg);\n      result.appendln(Throwables.getStackTraceAsString(e));\n    }\n\n    getPrintStream().print(result.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "121e1e1280c7b019f6d2cc3ba9eae1ead0dd8408": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13175. Add more information for checking argument in DiskBalancerVolume.\nContributed by  Lei (Eddy) Xu.\n",
      "commitDate": "20/02/18 7:16 PM",
      "commitName": "121e1e1280c7b019f6d2cc3ba9eae1ead0dd8408",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "26/10/16 7:39 PM",
      "commitNameOld": "9f32364d283dec47dd07490e253d477a0d14ac71",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 482.03,
      "commitsBetweenForRepo": 3105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,94 @@\n   public void execute(CommandLine cmd) throws Exception {\n     StrBuilder result \u003d new StrBuilder();\n     String outputLine \u003d \"\";\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n     verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d\n         getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     }\n+\n+    try (FSDataOutputStream beforeStream \u003d create(String.format(\n+        DiskBalancerCLI.BEFORE_TEMPLATE,\n+        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n+      beforeStream.write(getCluster().toJson()\n+          .getBytes(StandardCharsets.UTF_8));\n+    }\n+\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n-\n-    try (FSDataOutputStream beforeStream \u003d create(String.format(\n-        DiskBalancerCLI.BEFORE_TEMPLATE,\n-        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n-      beforeStream.write(getCluster().toJson()\n-          .getBytes(StandardCharsets.UTF_8));\n-    }\n-\n     try {\n       if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n         outputLine \u003d String.format(\"Writing plan to:\");\n         recordOutput(result, outputLine);\n \n         final String planFileName \u003d String.format(\n             DiskBalancerCLI.PLAN_TEMPLATE,\n             cmd.getOptionValue(DiskBalancerCLI.PLAN));\n         final String planFileFullName \u003d\n             new Path(getOutputPath(), planFileName).toString();\n         recordOutput(result, planFileFullName);\n \n         try (FSDataOutputStream planStream \u003d create(planFileName)) {\n           planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n         }\n       } else {\n         outputLine \u003d String.format(\n             \"No plan generated. DiskBalancing not needed for node: %s\"\n                 + \" threshold used: %s\",\n             cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n         recordOutput(result, outputLine);\n       }\n \n       if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n         printToScreen(plans);\n       }\n     } catch (Exception e) {\n       final String errMsg \u003d\n           \"Errors while recording the output of plan command.\";\n       LOG.error(errMsg, e);\n       result.appendln(errMsg);\n       result.appendln(Throwables.getStackTraceAsString(e));\n     }\n \n     getPrintStream().print(result.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    StrBuilder result \u003d new StrBuilder();\n    String outputLine \u003d \"\";\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d\n        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    }\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancerCLI.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n    try {\n      if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n        outputLine \u003d String.format(\"Writing plan to:\");\n        recordOutput(result, outputLine);\n\n        final String planFileName \u003d String.format(\n            DiskBalancerCLI.PLAN_TEMPLATE,\n            cmd.getOptionValue(DiskBalancerCLI.PLAN));\n        final String planFileFullName \u003d\n            new Path(getOutputPath(), planFileName).toString();\n        recordOutput(result, planFileFullName);\n\n        try (FSDataOutputStream planStream \u003d create(planFileName)) {\n          planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n        }\n      } else {\n        outputLine \u003d String.format(\n            \"No plan generated. DiskBalancing not needed for node: %s\"\n                + \" threshold used: %s\",\n            cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n        recordOutput(result, outputLine);\n      }\n\n      if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n        printToScreen(plans);\n      }\n    } catch (Exception e) {\n      final String errMsg \u003d\n          \"Errors while recording the output of plan command.\";\n      LOG.error(errMsg, e);\n      result.appendln(errMsg);\n      result.appendln(Throwables.getStackTraceAsString(e));\n    }\n\n    getPrintStream().print(result.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "9f32364d283dec47dd07490e253d477a0d14ac71": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11038. DiskBalancer: support running multiple commands in single test. Contributed by Xiaobing Zhou.\n",
      "commitDate": "26/10/16 7:39 PM",
      "commitName": "9f32364d283dec47dd07490e253d477a0d14ac71",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "14/10/16 5:07 PM",
      "commitNameOld": "30bb1970cc27c1345871a35bcf1220e520c1804b",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 12.1,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,94 @@\n   public void execute(CommandLine cmd) throws Exception {\n     StrBuilder result \u003d new StrBuilder();\n     String outputLine \u003d \"\";\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n     verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d\n         getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancerCLI.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n     try {\n       if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n-        outputLine \u003d String.format(\"Writing plan to: %s\", getOutputPath());\n+        outputLine \u003d String.format(\"Writing plan to:\");\n         recordOutput(result, outputLine);\n-        try (FSDataOutputStream planStream \u003d create(String.format(\n+\n+        final String planFileName \u003d String.format(\n             DiskBalancerCLI.PLAN_TEMPLATE,\n-            cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n+            cmd.getOptionValue(DiskBalancerCLI.PLAN));\n+        final String planFileFullName \u003d\n+            new Path(getOutputPath(), planFileName).toString();\n+        recordOutput(result, planFileFullName);\n+\n+        try (FSDataOutputStream planStream \u003d create(planFileName)) {\n           planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n         }\n       } else {\n         outputLine \u003d String.format(\n             \"No plan generated. DiskBalancing not needed for node: %s\"\n                 + \" threshold used: %s\",\n             cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n         recordOutput(result, outputLine);\n       }\n \n       if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n         printToScreen(plans);\n       }\n     } catch (Exception e) {\n       final String errMsg \u003d\n           \"Errors while recording the output of plan command.\";\n       LOG.error(errMsg, e);\n       result.appendln(errMsg);\n       result.appendln(Throwables.getStackTraceAsString(e));\n     }\n \n-    getPrintStream().println(result.toString());\n+    getPrintStream().print(result.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    StrBuilder result \u003d new StrBuilder();\n    String outputLine \u003d \"\";\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d\n        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancerCLI.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    try {\n      if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n        outputLine \u003d String.format(\"Writing plan to:\");\n        recordOutput(result, outputLine);\n\n        final String planFileName \u003d String.format(\n            DiskBalancerCLI.PLAN_TEMPLATE,\n            cmd.getOptionValue(DiskBalancerCLI.PLAN));\n        final String planFileFullName \u003d\n            new Path(getOutputPath(), planFileName).toString();\n        recordOutput(result, planFileFullName);\n\n        try (FSDataOutputStream planStream \u003d create(planFileName)) {\n          planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n        }\n      } else {\n        outputLine \u003d String.format(\n            \"No plan generated. DiskBalancing not needed for node: %s\"\n                + \" threshold used: %s\",\n            cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n        recordOutput(result, outputLine);\n      }\n\n      if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n        printToScreen(plans);\n      }\n    } catch (Exception e) {\n      final String errMsg \u003d\n          \"Errors while recording the output of plan command.\";\n      LOG.error(errMsg, e);\n      result.appendln(errMsg);\n      result.appendln(Throwables.getStackTraceAsString(e));\n    }\n\n    getPrintStream().print(result.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "30bb1970cc27c1345871a35bcf1220e520c1804b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10558. DiskBalancer: Print the full path to plan file. Contributed by Xiaobing Zhou.\n",
      "commitDate": "14/10/16 5:07 PM",
      "commitName": "30bb1970cc27c1345871a35bcf1220e520c1804b",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "08/09/16 7:26 PM",
      "commitNameOld": "35c5943b8ba394191405555cdfc5e6127053ee97",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 35.9,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,88 @@\n   public void execute(CommandLine cmd) throws Exception {\n+    StrBuilder result \u003d new StrBuilder();\n+    String outputLine \u003d \"\";\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n     verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d\n         getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancerCLI.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n-    if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n-      LOG.info(\"Writing plan to : {}\", getOutputPath());\n-      try (FSDataOutputStream planStream \u003d create(String.format(\n-          DiskBalancerCLI.PLAN_TEMPLATE,\n-          cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n-        planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n+    try {\n+      if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n+        outputLine \u003d String.format(\"Writing plan to: %s\", getOutputPath());\n+        recordOutput(result, outputLine);\n+        try (FSDataOutputStream planStream \u003d create(String.format(\n+            DiskBalancerCLI.PLAN_TEMPLATE,\n+            cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n+          planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n+        }\n+      } else {\n+        outputLine \u003d String.format(\n+            \"No plan generated. DiskBalancing not needed for node: %s\"\n+                + \" threshold used: %s\",\n+            cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n+        recordOutput(result, outputLine);\n       }\n-    } else {\n-      LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n-              \"threshold used: {}\", cmd.getOptionValue(DiskBalancerCLI.PLAN),\n-          this.thresholdPercentage);\n+\n+      if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n+        printToScreen(plans);\n+      }\n+    } catch (Exception e) {\n+      final String errMsg \u003d\n+          \"Errors while recording the output of plan command.\";\n+      LOG.error(errMsg, e);\n+      result.appendln(errMsg);\n+      result.appendln(Throwables.getStackTraceAsString(e));\n     }\n \n-    if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n-      printToScreen(plans);\n-    }\n+    getPrintStream().println(result.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    StrBuilder result \u003d new StrBuilder();\n    String outputLine \u003d \"\";\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d\n        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancerCLI.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    try {\n      if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n        outputLine \u003d String.format(\"Writing plan to: %s\", getOutputPath());\n        recordOutput(result, outputLine);\n        try (FSDataOutputStream planStream \u003d create(String.format(\n            DiskBalancerCLI.PLAN_TEMPLATE,\n            cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n          planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n        }\n      } else {\n        outputLine \u003d String.format(\n            \"No plan generated. DiskBalancing not needed for node: %s\"\n                + \" threshold used: %s\",\n            cmd.getOptionValue(DiskBalancerCLI.PLAN), this.thresholdPercentage);\n        recordOutput(result, outputLine);\n      }\n\n      if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n        printToScreen(plans);\n      }\n    } catch (Exception e) {\n      final String errMsg \u003d\n          \"Errors while recording the output of plan command.\";\n      LOG.error(errMsg, e);\n      result.appendln(errMsg);\n      result.appendln(Throwables.getStackTraceAsString(e));\n    }\n\n    getPrintStream().println(result.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "35c5943b8ba394191405555cdfc5e6127053ee97": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10553. DiskBalancer: Rename Tools/DiskBalancer class to Tools/DiskBalancerCLI. Contributed by Manoj Govindassamy.\n",
      "commitDate": "08/09/16 7:26 PM",
      "commitName": "35c5943b8ba394191405555cdfc5e6127053ee97",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "15/08/16 9:47 AM",
      "commitNameOld": "9f29f423e426e2d42e650cbed88e46c1c29a2a63",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 24.4,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,73 @@\n   public void execute(CommandLine cmd) throws Exception {\n     LOG.debug(\"Processing Plan Command.\");\n-    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n-    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n+    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n+    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n \n-    if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n+    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n-    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n-      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n+    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n+      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .BANDWIDTH));\n     }\n \n-    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n-      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n+    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n+      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n-    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n-      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n+    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n+      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n-    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n+    DiskBalancerDataNode node \u003d\n+        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n-          cmd.getOptionValue(DiskBalancer.PLAN));\n+          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n-        DiskBalancer.BEFORE_TEMPLATE,\n-        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n+        DiskBalancerCLI.BEFORE_TEMPLATE,\n+        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n     if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n       LOG.info(\"Writing plan to : {}\", getOutputPath());\n       try (FSDataOutputStream planStream \u003d create(String.format(\n-          DiskBalancer.PLAN_TEMPLATE,\n-          cmd.getOptionValue(DiskBalancer.PLAN)))) {\n+          DiskBalancerCLI.PLAN_TEMPLATE,\n+          cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n         planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n       }\n     } else {\n       LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n-              \"threshold used: {}\", cmd.getOptionValue(DiskBalancer.PLAN),\n+              \"threshold used: {}\", cmd.getOptionValue(DiskBalancerCLI.PLAN),\n           this.thresholdPercentage);\n     }\n \n-    if (cmd.hasOption(DiskBalancer.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n+    if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n       printToScreen(plans);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancerCLI.PLAN));\n    verifyCommandOptions(DiskBalancerCLI.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancerCLI.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancerCLI\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancerCLI.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancerCLI.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d\n        getNode(cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancerCLI.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancerCLI.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n      LOG.info(\"Writing plan to : {}\", getOutputPath());\n      try (FSDataOutputStream planStream \u003d create(String.format(\n          DiskBalancerCLI.PLAN_TEMPLATE,\n          cmd.getOptionValue(DiskBalancerCLI.PLAN)))) {\n        planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n      }\n    } else {\n      LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n              \"threshold used: {}\", cmd.getOptionValue(DiskBalancerCLI.PLAN),\n          this.thresholdPercentage);\n    }\n\n    if (cmd.hasOption(DiskBalancerCLI.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n      printToScreen(plans);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "5b8e1c26d702e42b606265860c5e475970876aa5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10541. Diskbalancer: When no actions in plan, error message says \"Plan was generated more than 24 hours ago\". Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:27 PM",
      "commitName": "5b8e1c26d702e42b606265860c5e475970876aa5",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "af11ab34d0cff3883885a25aa918be4f98566142",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   public void execute(CommandLine cmd) throws Exception {\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n     verifyCommandOptions(DiskBalancer.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancer.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n     NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     if (plans.size() \u003e 0) {\n       plan \u003d plans.get(0);\n     }\n \n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancer.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancer.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n-    if (plan !\u003d null) {\n+    if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n       LOG.info(\"Writing plan to : {}\", getOutputPath());\n       try (FSDataOutputStream planStream \u003d create(String.format(\n           DiskBalancer.PLAN_TEMPLATE,\n           cmd.getOptionValue(DiskBalancer.PLAN)))) {\n         planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n       }\n     } else {\n       LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n               \"threshold used: {}\", cmd.getOptionValue(DiskBalancer.PLAN),\n           this.thresholdPercentage);\n     }\n \n     if (cmd.hasOption(DiskBalancer.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n       printToScreen(plans);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancer.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancer.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    if (plan !\u003d null \u0026\u0026 plan.getVolumeSetPlans().size() \u003e 0) {\n      LOG.info(\"Writing plan to : {}\", getOutputPath());\n      try (FSDataOutputStream planStream \u003d create(String.format(\n          DiskBalancer.PLAN_TEMPLATE,\n          cmd.getOptionValue(DiskBalancer.PLAN)))) {\n        planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n      }\n    } else {\n      LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n              \"threshold used: {}\", cmd.getOptionValue(DiskBalancer.PLAN),\n          this.thresholdPercentage);\n    }\n\n    if (cmd.hasOption(DiskBalancer.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n      printToScreen(plans);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "78a1032b71af7672840da98808e2bebac3cc11d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10500. Diskbalancer: Print out information when a plan is not generated. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "78a1032b71af7672840da98808e2bebac3cc11d1",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "64ccb232ccf204991a28fa0211917fa935ad30c5",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,72 @@\n   public void execute(CommandLine cmd) throws Exception {\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n     verifyCommandOptions(DiskBalancer.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancer.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n \n     LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n     populatePathNames(node);\n \n+    NodePlan plan \u003d null;\n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n-    LOG.info(\"Writing plan to : {}\", getOutputPath());\n-    System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n+    if (plans.size() \u003e 0) {\n+      plan \u003d plans.get(0);\n+    }\n+\n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancer.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancer.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n-    try (FSDataOutputStream planStream \u003d create(String.format(\n-        DiskBalancer.PLAN_TEMPLATE,\n-        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n-      planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n+    if (plan !\u003d null) {\n+      LOG.info(\"Writing plan to : {}\", getOutputPath());\n+      try (FSDataOutputStream planStream \u003d create(String.format(\n+          DiskBalancer.PLAN_TEMPLATE,\n+          cmd.getOptionValue(DiskBalancer.PLAN)))) {\n+        planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n+      }\n+    } else {\n+      LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n+              \"threshold used: {}\", cmd.getOptionValue(DiskBalancer.PLAN),\n+          this.thresholdPercentage);\n     }\n \n-    if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n+    if (cmd.hasOption(DiskBalancer.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n       printToScreen(plans);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancer.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    NodePlan plan \u003d null;\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    if (plans.size() \u003e 0) {\n      plan \u003d plans.get(0);\n    }\n\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancer.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    if (plan !\u003d null) {\n      LOG.info(\"Writing plan to : {}\", getOutputPath());\n      try (FSDataOutputStream planStream \u003d create(String.format(\n          DiskBalancer.PLAN_TEMPLATE,\n          cmd.getOptionValue(DiskBalancer.PLAN)))) {\n        planStream.write(plan.toJson().getBytes(StandardCharsets.UTF_8));\n      }\n    } else {\n      LOG.info(\"No plan generated. DiskBalancing not needed for node: {} \" +\n              \"threshold used: {}\", cmd.getOptionValue(DiskBalancer.PLAN),\n          this.thresholdPercentage);\n    }\n\n    if (cmd.hasOption(DiskBalancer.VERBOSE) \u0026\u0026 plans.size() \u003e 0) {\n      printToScreen(plans);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "64ccb232ccf204991a28fa0211917fa935ad30c5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10478. DiskBalancer: resolve volume path names. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "64ccb232ccf204991a28fa0211917fa935ad30c5",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,62 @@\n   public void execute(CommandLine cmd) throws Exception {\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n     verifyCommandOptions(DiskBalancer.PLAN, cmd);\n \n     if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n     }\n     setOutputPath(output);\n \n     // -plan nodename is the command line argument.\n     DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n           cmd.getOptionValue(DiskBalancer.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n+\n+    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n     setNodesToProcess(node);\n+    populatePathNames(node);\n \n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     LOG.info(\"Writing plan to : {}\", getOutputPath());\n     System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n \n     try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancer.BEFORE_TEMPLATE,\n         cmd.getOptionValue(DiskBalancer.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n     try (FSDataOutputStream planStream \u003d create(String.format(\n         DiskBalancer.PLAN_TEMPLATE,\n         cmd.getOptionValue(DiskBalancer.PLAN)))) {\n       planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n     }\n \n     if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n       printToScreen(plans);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancer.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n\n    LOG.debug(\"threshold Percentage is {}\", this.thresholdPercentage);\n    setNodesToProcess(node);\n    populatePathNames(node);\n\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    LOG.info(\"Writing plan to : {}\", getOutputPath());\n    System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancer.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    try (FSDataOutputStream planStream \u003d create(String.format(\n        DiskBalancer.PLAN_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n      planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n    }\n\n    if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n      printToScreen(plans);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9546: DiskBalancer: Add Execute command. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "75882ec0b096da862b8b373b70a091c19f281b2a",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public void execute(CommandLine cmd) throws Exception {\n     LOG.debug(\"Processing Plan Command.\");\n     Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n     verifyCommandOptions(DiskBalancer.PLAN, cmd);\n \n-    if (!cmd.hasOption(DiskBalancer.NODE)) {\n+    if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n       throw new IllegalArgumentException(\"A node name is required to create a\" +\n           \" plan.\");\n     }\n \n     if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n       this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .BANDWIDTH));\n     }\n \n     if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n       this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n           .MAXERROR));\n     }\n \n     readClusterInfo(cmd);\n     String output \u003d null;\n     if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n       output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n     }\n     setOutputPath(output);\n \n-    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.NODE));\n+    // -plan nodename is the command line argument.\n+    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n     if (node \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n-          cmd.getOptionValue(DiskBalancer.NODE));\n+          cmd.getOptionValue(DiskBalancer.PLAN));\n     }\n     this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n     setNodesToProcess(node);\n \n     List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n     setPlanParams(plans);\n \n     LOG.info(\"Writing plan to : {}\", getOutputPath());\n     System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n \n-    try(FSDataOutputStream beforeStream \u003d create(String.format(\n+    try (FSDataOutputStream beforeStream \u003d create(String.format(\n         DiskBalancer.BEFORE_TEMPLATE,\n-        cmd.getOptionValue(DiskBalancer.NODE)))) {\n+        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n       beforeStream.write(getCluster().toJson()\n           .getBytes(StandardCharsets.UTF_8));\n     }\n \n-    try(FSDataOutputStream planStream \u003d create(String.format(\n+    try (FSDataOutputStream planStream \u003d create(String.format(\n         DiskBalancer.PLAN_TEMPLATE,\n-        cmd.getOptionValue(DiskBalancer.NODE)))) {\n+        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n       planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n     }\n \n     if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n       printToScreen(plans);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n\n    if (cmd.getOptionValue(DiskBalancer.PLAN) \u003d\u003d null) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n    }\n    setOutputPath(output);\n\n    // -plan nodename is the command line argument.\n    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.PLAN));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancer.PLAN));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n    setNodesToProcess(node);\n\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    LOG.info(\"Writing plan to : {}\", getOutputPath());\n    System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n\n    try (FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancer.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    try (FSDataOutputStream planStream \u003d create(String.format(\n        DiskBalancer.PLAN_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.PLAN)))) {\n      planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n    }\n\n    if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n      printToScreen(plans);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java",
      "extendedDetails": {}
    },
    "75882ec0b096da862b8b373b70a091c19f281b2a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9545: DiskBalancer: Add Plan Command. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "75882ec0b096da862b8b373b70a091c19f281b2a",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,58 @@\n+  public void execute(CommandLine cmd) throws Exception {\n+    LOG.debug(\"Processing Plan Command.\");\n+    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n+    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n+\n+    if (!cmd.hasOption(DiskBalancer.NODE)) {\n+      throw new IllegalArgumentException(\"A node name is required to create a\" +\n+          \" plan.\");\n+    }\n+\n+    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n+      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n+          .BANDWIDTH));\n+    }\n+\n+    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n+      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n+          .MAXERROR));\n+    }\n+\n+    readClusterInfo(cmd);\n+    String output \u003d null;\n+    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n+      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n+    }\n+    setOutputPath(output);\n+\n+    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.NODE));\n+    if (node \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n+          cmd.getOptionValue(DiskBalancer.NODE));\n+    }\n+    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n+    setNodesToProcess(node);\n+\n+    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n+    setPlanParams(plans);\n+\n+    LOG.info(\"Writing plan to : {}\", getOutputPath());\n+    System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n+\n+    try(FSDataOutputStream beforeStream \u003d create(String.format(\n+        DiskBalancer.BEFORE_TEMPLATE,\n+        cmd.getOptionValue(DiskBalancer.NODE)))) {\n+      beforeStream.write(getCluster().toJson()\n+          .getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    try(FSDataOutputStream planStream \u003d create(String.format(\n+        DiskBalancer.PLAN_TEMPLATE,\n+        cmd.getOptionValue(DiskBalancer.NODE)))) {\n+      planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n+      printToScreen(plans);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute(CommandLine cmd) throws Exception {\n    LOG.debug(\"Processing Plan Command.\");\n    Preconditions.checkState(cmd.hasOption(DiskBalancer.PLAN));\n    verifyCommandOptions(DiskBalancer.PLAN, cmd);\n\n    if (!cmd.hasOption(DiskBalancer.NODE)) {\n      throw new IllegalArgumentException(\"A node name is required to create a\" +\n          \" plan.\");\n    }\n\n    if (cmd.hasOption(DiskBalancer.BANDWIDTH)) {\n      this.bandwidth \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .BANDWIDTH));\n    }\n\n    if (cmd.hasOption(DiskBalancer.MAXERROR)) {\n      this.maxError \u003d Integer.parseInt(cmd.getOptionValue(DiskBalancer\n          .MAXERROR));\n    }\n\n    readClusterInfo(cmd);\n    String output \u003d null;\n    if (cmd.hasOption(DiskBalancer.OUTFILE)) {\n      output \u003d cmd.getOptionValue(DiskBalancer.OUTFILE);\n    }\n    setOutputPath(output);\n\n    DiskBalancerDataNode node \u003d getNode(cmd.getOptionValue(DiskBalancer.NODE));\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Unable to find the specified node. \" +\n          cmd.getOptionValue(DiskBalancer.NODE));\n    }\n    this.thresholdPercentage \u003d getThresholdPercentage(cmd);\n    setNodesToProcess(node);\n\n    List\u003cNodePlan\u003e plans \u003d getCluster().computePlan(this.thresholdPercentage);\n    setPlanParams(plans);\n\n    LOG.info(\"Writing plan to : {}\", getOutputPath());\n    System.out.printf(\"Writing plan to : %s%n\", getOutputPath());\n\n    try(FSDataOutputStream beforeStream \u003d create(String.format(\n        DiskBalancer.BEFORE_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.NODE)))) {\n      beforeStream.write(getCluster().toJson()\n          .getBytes(StandardCharsets.UTF_8));\n    }\n\n    try(FSDataOutputStream planStream \u003d create(String.format(\n        DiskBalancer.PLAN_TEMPLATE,\n        cmd.getOptionValue(DiskBalancer.NODE)))) {\n      planStream.write(getPlan(plans).getBytes(StandardCharsets.UTF_8));\n    }\n\n    if (cmd.hasOption(DiskBalancer.VERBOSE)) {\n      printToScreen(plans);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/PlanCommand.java"
    }
  }
}