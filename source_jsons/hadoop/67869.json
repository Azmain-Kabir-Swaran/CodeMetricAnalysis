{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleCopyListing.java",
  "functionName": "addToFileListing",
  "functionId": "addToFileListing___fileListWriter-SequenceFile.Writer__sourceRoot-Path__path-Path__context-DistCpContext",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
  "functionStartLine": 235,
  "functionEndLine": 252,
  "numCommitsSeen": 51,
  "timeTaken": 2908,
  "changeHistory": [
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "bf3fb585aaf2b179836e139c041fc87920a3c886",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926"
  ],
  "changeHistoryShort": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf3fb585aaf2b179836e139c041fc87920a3c886": "Ybodychange",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": "Ybodychange",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": "Ybodychange",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   private void addToFileListing(SequenceFile.Writer fileListWriter,\n-      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n+      Path sourceRoot, Path path, DistCpContext context) throws IOException {\n     sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n     path \u003d getPathWithSchemeAndAuthority(path);\n     path \u003d makeQualified(path);\n \n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n     FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n-    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n-    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n-    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n+    final boolean preserveAcls \u003d context.shouldPreserve(FileAttribute.ACL);\n+    final boolean preserveXAttrs \u003d context.shouldPreserve(FileAttribute.XATTR);\n+    final boolean preserveRawXAttrs \u003d context.shouldPreserveRawXattrs();\n     LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n         DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n             preserveAcls, preserveXAttrs, preserveRawXAttrs,\n-            options.getBlocksPerChunk());\n+            context.getBlocksPerChunk());\n     writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n-        sourceRoot, options);\n+        sourceRoot, context);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addToFileListing(SequenceFile.Writer fileListWriter,\n      Path sourceRoot, Path path, DistCpContext context) throws IOException {\n    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n    path \u003d getPathWithSchemeAndAuthority(path);\n    path \u003d makeQualified(path);\n\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n    final boolean preserveAcls \u003d context.shouldPreserve(FileAttribute.ACL);\n    final boolean preserveXAttrs \u003d context.shouldPreserve(FileAttribute.XATTR);\n    final boolean preserveRawXAttrs \u003d context.shouldPreserveRawXattrs();\n    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n            context.getBlocksPerChunk());\n    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n        sourceRoot, context);\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {
            "oldValue": "[fileListWriter-SequenceFile.Writer, sourceRoot-Path, path-Path, options-DistCpOptions]",
            "newValue": "[fileListWriter-SequenceFile.Writer, sourceRoot-Path, path-Path, context-DistCpContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   private void addToFileListing(SequenceFile.Writer fileListWriter,\n-      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n+      Path sourceRoot, Path path, DistCpContext context) throws IOException {\n     sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n     path \u003d getPathWithSchemeAndAuthority(path);\n     path \u003d makeQualified(path);\n \n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n     FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n-    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n-    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n-    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n+    final boolean preserveAcls \u003d context.shouldPreserve(FileAttribute.ACL);\n+    final boolean preserveXAttrs \u003d context.shouldPreserve(FileAttribute.XATTR);\n+    final boolean preserveRawXAttrs \u003d context.shouldPreserveRawXattrs();\n     LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n         DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n             preserveAcls, preserveXAttrs, preserveRawXAttrs,\n-            options.getBlocksPerChunk());\n+            context.getBlocksPerChunk());\n     writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n-        sourceRoot, options);\n+        sourceRoot, context);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addToFileListing(SequenceFile.Writer fileListWriter,\n      Path sourceRoot, Path path, DistCpContext context) throws IOException {\n    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n    path \u003d getPathWithSchemeAndAuthority(path);\n    path \u003d makeQualified(path);\n\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n    final boolean preserveAcls \u003d context.shouldPreserve(FileAttribute.ACL);\n    final boolean preserveXAttrs \u003d context.shouldPreserve(FileAttribute.XATTR);\n    final boolean preserveRawXAttrs \u003d context.shouldPreserveRawXattrs();\n    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n            context.getBlocksPerChunk());\n    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n        sourceRoot, context);\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {}
        }
      ]
    },
    "bf3fb585aaf2b179836e139c041fc87920a3c886": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void addToFileListing(SequenceFile.Writer fileListWriter,\n       Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n     sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n     path \u003d getPathWithSchemeAndAuthority(path);\n     path \u003d makeQualified(path);\n \n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n     FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n     final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n     final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n     final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n-    CopyListingFileStatus fileCopyListingStatus \u003d\n+    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n         DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n-            preserveAcls, preserveXAttrs, preserveRawXAttrs);\n-\n+            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n+            options.getBlocksPerChunk());\n     writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n         sourceRoot, options);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToFileListing(SequenceFile.Writer fileListWriter,\n      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n    path \u003d getPathWithSchemeAndAuthority(path);\n    path \u003d makeQualified(path);\n\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n            options.getBlocksPerChunk());\n    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n        sourceRoot, options);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:01 PM",
      "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void addToFileListing(SequenceFile.Writer fileListWriter,\n       Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n     sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n     path \u003d getPathWithSchemeAndAuthority(path);\n     path \u003d makeQualified(path);\n \n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n     FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n     final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n     final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n     final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n-    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n+    CopyListingFileStatus fileCopyListingStatus \u003d\n         DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n-            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n-            options.getBlocksPerChunk());\n+            preserveAcls, preserveXAttrs, preserveRawXAttrs);\n+\n     writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n         sourceRoot, options);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToFileListing(SequenceFile.Writer fileListWriter,\n      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n    path \u003d getPathWithSchemeAndAuthority(path);\n    path \u003d makeQualified(path);\n\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n    CopyListingFileStatus fileCopyListingStatus \u003d\n        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n            preserveAcls, preserveXAttrs, preserveRawXAttrs);\n\n    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n        sourceRoot, options);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
      "commitDate": "30/03/17 5:01 PM",
      "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 135.21,
      "commitsBetweenForRepo": 732,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void addToFileListing(SequenceFile.Writer fileListWriter,\n       Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n     sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n     path \u003d getPathWithSchemeAndAuthority(path);\n     path \u003d makeQualified(path);\n \n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n     FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n     final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n     final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n     final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n-    CopyListingFileStatus fileCopyListingStatus \u003d\n+    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n         DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n-            preserveAcls, preserveXAttrs, preserveRawXAttrs);\n-\n+            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n+            options.getBlocksPerChunk());\n     writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n         sourceRoot, options);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToFileListing(SequenceFile.Writer fileListWriter,\n      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n    path \u003d getPathWithSchemeAndAuthority(path);\n    path \u003d makeQualified(path);\n\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n    LinkedList\u003cCopyListingFileStatus\u003e fileCopyListingStatus \u003d\n        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n            preserveAcls, preserveXAttrs, preserveRawXAttrs,\n            options.getBlocksPerChunk());\n    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n        sourceRoot, options);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "diff": "@@ -0,0 +1,18 @@\n+  private void addToFileListing(SequenceFile.Writer fileListWriter,\n+      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n+    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n+    path \u003d getPathWithSchemeAndAuthority(path);\n+    path \u003d makeQualified(path);\n+\n+    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n+    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n+    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n+    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n+    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n+    CopyListingFileStatus fileCopyListingStatus \u003d\n+        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n+            preserveAcls, preserveXAttrs, preserveRawXAttrs);\n+\n+    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n+        sourceRoot, options);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToFileListing(SequenceFile.Writer fileListWriter,\n      Path sourceRoot, Path path, DistCpOptions options) throws IOException {\n    sourceRoot \u003d getPathWithSchemeAndAuthority(sourceRoot);\n    path \u003d getPathWithSchemeAndAuthority(path);\n    path \u003d makeQualified(path);\n\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n    FileStatus fileStatus \u003d sourceFS.getFileStatus(path);\n    final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n    final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n    final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n    CopyListingFileStatus fileCopyListingStatus \u003d\n        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,\n            preserveAcls, preserveXAttrs, preserveRawXAttrs);\n\n    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,\n        sourceRoot, options);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java"
    }
  }
}