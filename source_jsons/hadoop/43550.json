{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceMaster.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
  "functionStartLine": 90,
  "functionEndLine": 144,
  "numCommitsSeen": 14,
  "timeTaken": 4221,
  "changeHistory": [
    "7dd26d5378483cdbce1dc594e8650a96c2976281",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "79bf5c084d4a063f1a933cae498af23edfd46792",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "7dd26d5378483cdbce1dc594e8650a96c2976281": "Ybodychange",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "79bf5c084d4a063f1a933cae498af23edfd46792": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7dd26d5378483cdbce1dc594e8650a96c2976281": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8308.  Fixed YARN Service AM failure with HDFS token renewal.\n            Contributed by Gour Saha\n",
      "commitDate": "31/05/18 6:09 PM",
      "commitName": "7dd26d5378483cdbce1dc594e8650a96c2976281",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/05/18 12:49 PM",
      "commitNameOld": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 20.22,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,55 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     printSystemEnv();\n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n     context.serviceHdfsDir \u003d appDir.toString();\n-    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n-    context.fs \u003d fs;\n-    fs.setAppDir(appDir);\n-    loadApplicationJson(context, fs);\n-\n     context.tokens \u003d recordTokensForContainers();\n+    Credentials credentials \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n+      credentials \u003d UserGroupInformation.getCurrentUser().getCredentials();\n       doSecureLogin();\n     }\n+    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n+    fs.setAppDir(appDir);\n+    context.fs \u003d fs;\n+    loadApplicationJson(context, fs);\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      // add back the credentials\n+      if (credentials !\u003d null) {\n+        UserGroupInformation.getCurrentUser().addCredentials(credentials);\n+      }\n+      removeHdfsDelegationToken(UserGroupInformation.getLoginUser());\n+    }\n+\n     // Take yarn config from YarnFile and merge them into YarnConfiguration\n     for (Map.Entry\u003cString, String\u003e entry : context.service\n         .getConfiguration().getProperties().entrySet()) {\n       conf.set(entry.getKey(), entry.getValue());\n     }\n \n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n     LOG.info(\"Service AppAttemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    printSystemEnv();\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    context.tokens \u003d recordTokensForContainers();\n    Credentials credentials \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      credentials \u003d UserGroupInformation.getCurrentUser().getCredentials();\n      doSecureLogin();\n    }\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    fs.setAppDir(appDir);\n    context.fs \u003d fs;\n    loadApplicationJson(context, fs);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // add back the credentials\n      if (credentials !\u003d null) {\n        UserGroupInformation.getCurrentUser().addCredentials(credentials);\n      }\n      removeHdfsDelegationToken(UserGroupInformation.getLoginUser());\n    }\n\n    // Take yarn config from YarnFile and merge them into YarnConfiguration\n    for (Map.Entry\u003cString, String\u003e entry : context.service\n        .getConfiguration().getProperties().entrySet()) {\n      conf.set(entry.getKey(), entry.getValue());\n    }\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
      "commitDate": "17/04/18 6:57 AM",
      "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "19/12/17 4:14 PM",
      "commitNameOld": "41b581012a83a17db785343362c718363e13e8f5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 118.57,
      "commitsBetweenForRepo": 826,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     printSystemEnv();\n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n     context.serviceHdfsDir \u003d appDir.toString();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n     loadApplicationJson(context, fs);\n \n+    context.tokens \u003d recordTokensForContainers();\n     if (UserGroupInformation.isSecurityEnabled()) {\n-      context.tokens \u003d recordTokensForContainers();\n       doSecureLogin();\n     }\n     // Take yarn config from YarnFile and merge them into YarnConfiguration\n     for (Map.Entry\u003cString, String\u003e entry : context.service\n         .getConfiguration().getProperties().entrySet()) {\n       conf.set(entry.getKey(), entry.getValue());\n     }\n \n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n     LOG.info(\"Service AppAttemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    printSystemEnv();\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    context.tokens \u003d recordTokensForContainers();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      doSecureLogin();\n    }\n    // Take yarn config from YarnFile and merge them into YarnConfiguration\n    for (Map.Entry\u003cString, String\u003e entry : context.service\n        .getConfiguration().getProperties().entrySet()) {\n      conf.set(entry.getKey(), entry.getValue());\n    }\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 27.94,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,46 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    //TODO Deprecate slider conf, make sure works with yarn conf\n     printSystemEnv();\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      UserGroupInformation.setConfiguration(conf);\n-    }\n-    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n-\n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n     context.serviceHdfsDir \u003d appDir.toString();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n     loadApplicationJson(context, fs);\n \n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      context.tokens \u003d recordTokensForContainers();\n+      doSecureLogin();\n+    }\n     // Take yarn config from YarnFile and merge them into YarnConfiguration\n     for (Map.Entry\u003cString, String\u003e entry : context.service\n         .getConfiguration().getProperties().entrySet()) {\n       conf.set(entry.getKey(), entry.getValue());\n     }\n \n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n     LOG.info(\"Service AppAttemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    printSystemEnv();\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      context.tokens \u003d recordTokensForContainers();\n      doSecureLogin();\n    }\n    // Take yarn config from YarnFile and merge them into YarnConfiguration\n    for (Map.Entry\u003cString, String\u003e entry : context.service\n        .getConfiguration().getProperties().entrySet()) {\n      conf.set(entry.getKey(), entry.getValue());\n    }\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,48 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     //TODO Deprecate slider conf, make sure works with yarn conf\n     printSystemEnv();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       UserGroupInformation.setConfiguration(conf);\n     }\n     LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n \n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n     context.serviceHdfsDir \u003d appDir.toString();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n     loadApplicationJson(context, fs);\n \n+    // Take yarn config from YarnFile and merge them into YarnConfiguration\n+    for (Map.Entry\u003cString, String\u003e entry : context.service\n+        .getConfiguration().getProperties().entrySet()) {\n+      conf.set(entry.getKey(), entry.getValue());\n+    }\n+\n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n     LOG.info(\"Service AppAttemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    //TODO Deprecate slider conf, make sure works with yarn conf\n    printSystemEnv();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.setConfiguration(conf);\n    }\n    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    // Take yarn config from YarnFile and merge them into YarnConfiguration\n    for (Map.Entry\u003cString, String\u003e entry : context.service\n        .getConfiguration().getProperties().entrySet()) {\n      conf.set(entry.getKey(), entry.getValue());\n    }\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     //TODO Deprecate slider conf, make sure works with yarn conf\n     printSystemEnv();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       UserGroupInformation.setConfiguration(conf);\n     }\n     LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n \n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n     context.serviceHdfsDir \u003d appDir.toString();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n     loadApplicationJson(context, fs);\n \n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n-    LOG.info(\"Application attemptId: \" + attemptId);\n+    LOG.info(\"Service AppAttemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    //TODO Deprecate slider conf, make sure works with yarn conf\n    printSystemEnv();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.setConfiguration(conf);\n    }\n    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     //TODO Deprecate slider conf, make sure works with yarn conf\n     printSystemEnv();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       UserGroupInformation.setConfiguration(conf);\n     }\n     LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n \n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n     context.serviceHdfsDir \u003d appDir.toString();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n     loadApplicationJson(context, fs);\n \n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n-    LOG.info(\"Application attemptId: \" + attemptId);\n+    LOG.info(\"Service AppAttemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    //TODO Deprecate slider conf, make sure works with yarn conf\n    printSystemEnv();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.setConfiguration(conf);\n    }\n    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
          "extendedDetails": {}
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     //TODO Deprecate slider conf, make sure works with yarn conf\n     printSystemEnv();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       UserGroupInformation.setConfiguration(conf);\n     }\n     LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n \n     context \u003d new ServiceContext();\n     Path appDir \u003d getAppDir();\n+    context.serviceHdfsDir \u003d appDir.toString();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n     loadApplicationJson(context, fs);\n \n     ContainerId amContainerId \u003d getAMContainerId();\n \n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n     LOG.info(\"Application attemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n     ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    //TODO Deprecate slider conf, make sure works with yarn conf\n    printSystemEnv();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.setConfiguration(conf);\n    }\n    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    context.serviceHdfsDir \u003d appDir.toString();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Application attemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "79bf5c084d4a063f1a933cae498af23edfd46792": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     //TODO Deprecate slider conf, make sure works with yarn conf\n     printSystemEnv();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       UserGroupInformation.setConfiguration(conf);\n     }\n     LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n \n-    ServiceContext context \u003d new ServiceContext();\n-    Path appDir \u003d new Path(amArgs.getAppDefPath()).getParent();\n+    context \u003d new ServiceContext();\n+    Path appDir \u003d getAppDir();\n     SliderFileSystem fs \u003d new SliderFileSystem(conf);\n     context.fs \u003d fs;\n     fs.setAppDir(appDir);\n-    context.application \u003d ServiceApiUtil\n-        .loadApplicationFrom(fs, new Path(amArgs.getAppDefPath()));\n-    LOG.info(context.application.toString());\n-    ContainerId amContainerId \u003d ContainerId.fromString(SliderUtils\n-        .mandatoryEnvVariable(\n-            ApplicationConstants.Environment.CONTAINER_ID.name()));\n+    loadApplicationJson(context, fs);\n+\n+    ContainerId amContainerId \u003d getAMContainerId();\n+\n     ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n     LOG.info(\"Application attemptId: \" + attemptId);\n     context.attemptId \u003d attemptId;\n \n     // configure AM to wait forever for RM\n     conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n     conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n \n     DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n \n     context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n     ClientAMService clientAMService \u003d new ClientAMService(context);\n     context.clientAMService \u003d clientAMService;\n     addService(clientAMService);\n \n-    ServiceScheduler scheduler \u003d new ServiceScheduler(context);\n+    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n     addService(scheduler);\n     context.scheduler \u003d scheduler;\n \n     ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n     addService(monitor);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    //TODO Deprecate slider conf, make sure works with yarn conf\n    printSystemEnv();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.setConfiguration(conf);\n    }\n    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n\n    context \u003d new ServiceContext();\n    Path appDir \u003d getAppDir();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    loadApplicationJson(context, fs);\n\n    ContainerId amContainerId \u003d getAMContainerId();\n\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Application attemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d createServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,43 @@\n+  protected void serviceInit(Configuration conf) throws Exception {\n+    //TODO Deprecate slider conf, make sure works with yarn conf\n+    printSystemEnv();\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      UserGroupInformation.setConfiguration(conf);\n+    }\n+    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n+\n+    ServiceContext context \u003d new ServiceContext();\n+    Path appDir \u003d new Path(amArgs.getAppDefPath()).getParent();\n+    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n+    context.fs \u003d fs;\n+    fs.setAppDir(appDir);\n+    context.application \u003d ServiceApiUtil\n+        .loadApplicationFrom(fs, new Path(amArgs.getAppDefPath()));\n+    LOG.info(context.application.toString());\n+    ContainerId amContainerId \u003d ContainerId.fromString(SliderUtils\n+        .mandatoryEnvVariable(\n+            ApplicationConstants.Environment.CONTAINER_ID.name()));\n+    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n+    LOG.info(\"Application attemptId: \" + attemptId);\n+    context.attemptId \u003d attemptId;\n+\n+    // configure AM to wait forever for RM\n+    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n+    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n+\n+    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n+\n+    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n+    ClientAMService clientAMService \u003d new ClientAMService(context);\n+    context.clientAMService \u003d clientAMService;\n+    addService(clientAMService);\n+\n+    ServiceScheduler scheduler \u003d new ServiceScheduler(context);\n+    addService(scheduler);\n+    context.scheduler \u003d scheduler;\n+\n+    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n+    addService(monitor);\n+\n+    super.serviceInit(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    //TODO Deprecate slider conf, make sure works with yarn conf\n    printSystemEnv();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.setConfiguration(conf);\n    }\n    LOG.info(\"Login user is {}\", UserGroupInformation.getLoginUser());\n\n    ServiceContext context \u003d new ServiceContext();\n    Path appDir \u003d new Path(amArgs.getAppDefPath()).getParent();\n    SliderFileSystem fs \u003d new SliderFileSystem(conf);\n    context.fs \u003d fs;\n    fs.setAppDir(appDir);\n    context.application \u003d ServiceApiUtil\n        .loadApplicationFrom(fs, new Path(amArgs.getAppDefPath()));\n    LOG.info(context.application.toString());\n    ContainerId amContainerId \u003d ContainerId.fromString(SliderUtils\n        .mandatoryEnvVariable(\n            ApplicationConstants.Environment.CONTAINER_ID.name()));\n    ApplicationAttemptId attemptId \u003d amContainerId.getApplicationAttemptId();\n    LOG.info(\"Application attemptId: \" + attemptId);\n    context.attemptId \u003d attemptId;\n\n    // configure AM to wait forever for RM\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\n\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\n\n    context.secretManager \u003d new ClientToAMTokenSecretManager(attemptId, null);\n    ClientAMService clientAMService \u003d new ClientAMService(context);\n    context.clientAMService \u003d clientAMService;\n    addService(clientAMService);\n\n    ServiceScheduler scheduler \u003d new ServiceScheduler(context);\n    addService(scheduler);\n    context.scheduler \u003d scheduler;\n\n    ServiceMonitor monitor \u003d new ServiceMonitor(\"Service Monitor\", context);\n    addService(monitor);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java"
    }
  }
}