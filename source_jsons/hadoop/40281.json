{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "handleNewContainerAllocation",
  "functionId": "handleNewContainerAllocation___allocationResult-ContainerAllocation__node-FiCaSchedulerNode__schedulerKey-SchedulerRequestKey__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 723,
  "functionEndLine": 746,
  "numCommitsSeen": 66,
  "timeTaken": 6232,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "e5003be907acef87c2770e3f2914953f62017b0e",
    "ba2313d6145a1234777938a747187373f4cd58d9"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "e5003be907acef87c2770e3f2914953f62017b0e": "Ybodychange",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/06/19 6:59 AM",
      "commitNameOld": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 83.84,
      "commitsBetweenForRepo": 744,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n     // Inform the application\n     RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n         container);\n \n     allocationResult.updatedContainer \u003d allocatedContainer;\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n           node, application, schedulerKey,\n-          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n+          ActivityDiagnosticConstant.APPLICATION_FAIL_TO_ALLOCATE,\n+          ActivityState.REJECTED, ActivityLevel.APP);\n       return ret;\n     }\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    // Inform the application\n    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n        container);\n\n    allocationResult.updatedContainer \u003d allocatedContainer;\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n          node, application, schedulerKey,\n          ActivityDiagnosticConstant.APPLICATION_FAIL_TO_ALLOCATE,\n          ActivityState.REJECTED, ActivityLevel.APP);\n      return ret;\n    }\n    \n    return allocationResult;    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "06/05/19 5:00 AM",
      "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n     // Inform the application\n     RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n         container);\n \n     allocationResult.updatedContainer \u003d allocatedContainer;\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n-          node, application, schedulerKey.getPriority(),\n+          node, application, schedulerKey,\n           ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n       return ret;\n     }\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    // Inform the application\n    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n        container);\n\n    allocationResult.updatedContainer \u003d allocatedContainer;\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n          node, application, schedulerKey,\n          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n      return ret;\n    }\n    \n    return allocationResult;    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n     // Inform the application\n     RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n-        lastResourceRequest, container);\n+        container);\n \n     allocationResult.updatedContainer \u003d allocatedContainer;\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n           node, application, schedulerKey.getPriority(),\n           ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n       return ret;\n     }\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    // Inform the application\n    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n        container);\n\n    allocationResult.updatedContainer \u003d allocatedContainer;\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n          node, application, schedulerKey.getPriority(),\n          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n      return ret;\n    }\n    \n    return allocationResult;    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,23 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n-      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n-      Container container) {\n-    // Handling container allocation\n-    // Did we previously reserve containers at this \u0027priority\u0027?\n-    if (reservedContainer !\u003d null) {\n-      application.unreserve(schedulerKey, node, reservedContainer);\n-    }\n-    \n+      SchedulerRequestKey schedulerKey, Container container) {\n     // Inform the application\n-    RMContainer allocatedContainer \u003d\n-        application.allocate(allocationResult.containerNodeType, node,\n-            schedulerKey, lastResourceRequest, container);\n+    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n+        lastResourceRequest, container);\n+\n+    allocationResult.updatedContainer \u003d allocatedContainer;\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n           node, application, schedulerKey.getPriority(),\n           ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n       return ret;\n     }\n-\n-    // Inform the node\n-    node.allocateContainer(allocatedContainer);\n-    \n-    // update locality statistics\n-    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n-        allocationResult.requestNodeType);\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    // Inform the application\n    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n        lastResourceRequest, container);\n\n    allocationResult.updatedContainer \u003d allocatedContainer;\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n          node, application, schedulerKey.getPriority(),\n          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n      return ret;\n    }\n    \n    return allocationResult;    \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[allocationResult-ContainerAllocation, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer, container-Container]",
            "newValue": "[allocationResult-ContainerAllocation, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, container-Container]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,23 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n-      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n-      Container container) {\n-    // Handling container allocation\n-    // Did we previously reserve containers at this \u0027priority\u0027?\n-    if (reservedContainer !\u003d null) {\n-      application.unreserve(schedulerKey, node, reservedContainer);\n-    }\n-    \n+      SchedulerRequestKey schedulerKey, Container container) {\n     // Inform the application\n-    RMContainer allocatedContainer \u003d\n-        application.allocate(allocationResult.containerNodeType, node,\n-            schedulerKey, lastResourceRequest, container);\n+    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n+        lastResourceRequest, container);\n+\n+    allocationResult.updatedContainer \u003d allocatedContainer;\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n           node, application, schedulerKey.getPriority(),\n           ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n       return ret;\n     }\n-\n-    // Inform the node\n-    node.allocateContainer(allocatedContainer);\n-    \n-    // update locality statistics\n-    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n-        allocationResult.requestNodeType);\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    // Inform the application\n    RMContainer allocatedContainer \u003d application.allocate(node, schedulerKey,\n        lastResourceRequest, container);\n\n    allocationResult.updatedContainer \u003d allocatedContainer;\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n          node, application, schedulerKey.getPriority(),\n          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n      return ret;\n    }\n    \n    return allocationResult;    \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 6:14 PM",
      "commitNameOld": "49969b16cdba0f251b9f8bf3d8df9906e38b5c61",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n       Container container) {\n     // Handling container allocation\n     // Did we previously reserve containers at this \u0027priority\u0027?\n     if (reservedContainer !\u003d null) {\n       application.unreserve(schedulerKey, node, reservedContainer);\n     }\n     \n     // Inform the application\n     RMContainer allocatedContainer \u003d\n         application.allocate(allocationResult.containerNodeType, node,\n             schedulerKey, lastResourceRequest, container);\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n+      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n+          node, application, schedulerKey.getPriority(),\n+          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n       return ret;\n     }\n \n     // Inform the node\n     node.allocateContainer(allocatedContainer);\n     \n     // update locality statistics\n     application.incNumAllocatedContainers(allocationResult.containerNodeType,\n         allocationResult.requestNodeType);\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n      Container container) {\n    // Handling container allocation\n    // Did we previously reserve containers at this \u0027priority\u0027?\n    if (reservedContainer !\u003d null) {\n      application.unreserve(schedulerKey, node, reservedContainer);\n    }\n    \n    // Inform the application\n    RMContainer allocatedContainer \u003d\n        application.allocate(allocationResult.containerNodeType, node,\n            schedulerKey, lastResourceRequest, container);\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,\n          node, application, schedulerKey.getPriority(),\n          ActivityDiagnosticConstant.FAIL_TO_ALLOCATE, ActivityState.REJECTED);\n      return ret;\n    }\n\n    // Inform the node\n    node.allocateContainer(allocatedContainer);\n    \n    // update locality statistics\n    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n        allocationResult.requestNodeType);\n    \n    return allocationResult;    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n-      Priority priority, RMContainer reservedContainer, Container container) {\n+      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n+      Container container) {\n     // Handling container allocation\n     // Did we previously reserve containers at this \u0027priority\u0027?\n     if (reservedContainer !\u003d null) {\n-      application.unreserve(priority, node, reservedContainer);\n+      application.unreserve(schedulerKey, node, reservedContainer);\n     }\n     \n     // Inform the application\n     RMContainer allocatedContainer \u003d\n         application.allocate(allocationResult.containerNodeType, node,\n-            priority, lastResourceRequest, container);\n+            schedulerKey, lastResourceRequest, container);\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       return ret;\n     }\n \n     // Inform the node\n     node.allocateContainer(allocatedContainer);\n     \n     // update locality statistics\n     application.incNumAllocatedContainers(allocationResult.containerNodeType,\n         allocationResult.requestNodeType);\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n      Container container) {\n    // Handling container allocation\n    // Did we previously reserve containers at this \u0027priority\u0027?\n    if (reservedContainer !\u003d null) {\n      application.unreserve(schedulerKey, node, reservedContainer);\n    }\n    \n    // Inform the application\n    RMContainer allocatedContainer \u003d\n        application.allocate(allocationResult.containerNodeType, node,\n            schedulerKey, lastResourceRequest, container);\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      return ret;\n    }\n\n    // Inform the node\n    node.allocateContainer(allocatedContainer);\n    \n    // update locality statistics\n    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n        allocationResult.requestNodeType);\n    \n    return allocationResult;    \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[allocationResult-ContainerAllocation, node-FiCaSchedulerNode, priority-Priority, reservedContainer-RMContainer, container-Container]",
            "newValue": "[allocationResult-ContainerAllocation, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer, container-Container]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n-      Priority priority, RMContainer reservedContainer, Container container) {\n+      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n+      Container container) {\n     // Handling container allocation\n     // Did we previously reserve containers at this \u0027priority\u0027?\n     if (reservedContainer !\u003d null) {\n-      application.unreserve(priority, node, reservedContainer);\n+      application.unreserve(schedulerKey, node, reservedContainer);\n     }\n     \n     // Inform the application\n     RMContainer allocatedContainer \u003d\n         application.allocate(allocationResult.containerNodeType, node,\n-            priority, lastResourceRequest, container);\n+            schedulerKey, lastResourceRequest, container);\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n               null, AllocationState.APP_SKIPPED);\n       return ret;\n     }\n \n     // Inform the node\n     node.allocateContainer(allocatedContainer);\n     \n     // update locality statistics\n     application.incNumAllocatedContainers(allocationResult.containerNodeType,\n         allocationResult.requestNodeType);\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer,\n      Container container) {\n    // Handling container allocation\n    // Did we previously reserve containers at this \u0027priority\u0027?\n    if (reservedContainer !\u003d null) {\n      application.unreserve(schedulerKey, node, reservedContainer);\n    }\n    \n    // Inform the application\n    RMContainer allocatedContainer \u003d\n        application.allocate(allocationResult.containerNodeType, node,\n            schedulerKey, lastResourceRequest, container);\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      return ret;\n    }\n\n    // Inform the node\n    node.allocateContainer(allocatedContainer);\n    \n    // update locality statistics\n    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n        allocationResult.requestNodeType);\n    \n    return allocationResult;    \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5003be907acef87c2770e3f2914953f62017b0e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
      "commitDate": "12/08/15 3:07 PM",
      "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/15 1:47 PM",
      "commitNameOld": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.06,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   private ContainerAllocation handleNewContainerAllocation(\n       ContainerAllocation allocationResult, FiCaSchedulerNode node,\n       Priority priority, RMContainer reservedContainer, Container container) {\n     // Handling container allocation\n     // Did we previously reserve containers at this \u0027priority\u0027?\n     if (reservedContainer !\u003d null) {\n       application.unreserve(priority, node, reservedContainer);\n     }\n     \n     // Inform the application\n     RMContainer allocatedContainer \u003d\n         application.allocate(allocationResult.containerNodeType, node,\n             priority, lastResourceRequest, container);\n \n     // Does the application need this resource?\n     if (allocatedContainer \u003d\u003d null) {\n       // Skip this app if we failed to allocate.\n       ContainerAllocation ret \u003d\n           new ContainerAllocation(allocationResult.containerToBeUnreserved,\n-              null, AllocationState.QUEUE_SKIPPED);\n-      ret.state \u003d AllocationState.APP_SKIPPED;\n+              null, AllocationState.APP_SKIPPED);\n       return ret;\n     }\n \n     // Inform the node\n     node.allocateContainer(allocatedContainer);\n     \n     // update locality statistics\n     application.incNumAllocatedContainers(allocationResult.containerNodeType,\n         allocationResult.requestNodeType);\n     \n     return allocationResult;    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      Priority priority, RMContainer reservedContainer, Container container) {\n    // Handling container allocation\n    // Did we previously reserve containers at this \u0027priority\u0027?\n    if (reservedContainer !\u003d null) {\n      application.unreserve(priority, node, reservedContainer);\n    }\n    \n    // Inform the application\n    RMContainer allocatedContainer \u003d\n        application.allocate(allocationResult.containerNodeType, node,\n            priority, lastResourceRequest, container);\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.APP_SKIPPED);\n      return ret;\n    }\n\n    // Inform the node\n    node.allocateContainer(allocatedContainer);\n    \n    // update locality statistics\n    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n        allocationResult.requestNodeType);\n    \n    return allocationResult;    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,33 @@\n+  private ContainerAllocation handleNewContainerAllocation(\n+      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n+      Priority priority, RMContainer reservedContainer, Container container) {\n+    // Handling container allocation\n+    // Did we previously reserve containers at this \u0027priority\u0027?\n+    if (reservedContainer !\u003d null) {\n+      application.unreserve(priority, node, reservedContainer);\n+    }\n+    \n+    // Inform the application\n+    RMContainer allocatedContainer \u003d\n+        application.allocate(allocationResult.containerNodeType, node,\n+            priority, lastResourceRequest, container);\n+\n+    // Does the application need this resource?\n+    if (allocatedContainer \u003d\u003d null) {\n+      // Skip this app if we failed to allocate.\n+      ContainerAllocation ret \u003d\n+          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n+              null, AllocationState.QUEUE_SKIPPED);\n+      ret.state \u003d AllocationState.APP_SKIPPED;\n+      return ret;\n+    }\n+\n+    // Inform the node\n+    node.allocateContainer(allocatedContainer);\n+    \n+    // update locality statistics\n+    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n+        allocationResult.requestNodeType);\n+    \n+    return allocationResult;    \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation handleNewContainerAllocation(\n      ContainerAllocation allocationResult, FiCaSchedulerNode node,\n      Priority priority, RMContainer reservedContainer, Container container) {\n    // Handling container allocation\n    // Did we previously reserve containers at this \u0027priority\u0027?\n    if (reservedContainer !\u003d null) {\n      application.unreserve(priority, node, reservedContainer);\n    }\n    \n    // Inform the application\n    RMContainer allocatedContainer \u003d\n        application.allocate(allocationResult.containerNodeType, node,\n            priority, lastResourceRequest, container);\n\n    // Does the application need this resource?\n    if (allocatedContainer \u003d\u003d null) {\n      // Skip this app if we failed to allocate.\n      ContainerAllocation ret \u003d\n          new ContainerAllocation(allocationResult.containerToBeUnreserved,\n              null, AllocationState.QUEUE_SKIPPED);\n      ret.state \u003d AllocationState.APP_SKIPPED;\n      return ret;\n    }\n\n    // Inform the node\n    node.allocateContainer(allocatedContainer);\n    \n    // update locality statistics\n    application.incNumAllocatedContainers(allocationResult.containerNodeType,\n        allocationResult.requestNodeType);\n    \n    return allocationResult;    \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java"
    }
  }
}