{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirEncryptionZoneOp.java",
  "functionName": "getFileEncryptionInfo",
  "functionId": "getFileEncryptionInfo___fsd-FSDirectory(modifiers-final)__iip-INodesInPath(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
  "functionStartLine": 438,
  "functionEndLine": 483,
  "numCommitsSeen": 485,
  "timeTaken": 9677,
  "changeHistory": [
    "2c6cfad5a31ca4d9126ecd2b3c43cca8543aacb4",
    "cd4a97bf80f1170175447b95b95ce78d717d86ff",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "6de9213df111a9a4ed875db995d67af72d08a798",
    "71a81b6257c0000475ad62eb69292a20d45d269c",
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "eee0d4563c62647cfaaed6605ee713aaf69add78",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "7f0efe96f85704e39349f20ab6a11bfaa81c6a75",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "1737950d0fc83c68f386881b843c41b0b1e342de"
  ],
  "changeHistoryShort": {
    "2c6cfad5a31ca4d9126ecd2b3c43cca8543aacb4": "Ybodychange",
    "cd4a97bf80f1170175447b95b95ce78d717d86ff": "Ybodychange",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ymultichange(Yparameterchange,Ybodychange)",
    "6de9213df111a9a4ed875db995d67af72d08a798": "Ybodychange",
    "71a81b6257c0000475ad62eb69292a20d45d269c": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yparameterchange)",
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "eee0d4563c62647cfaaed6605ee713aaf69add78": "Ybodychange",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Ybodychange",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ybodychange",
    "7f0efe96f85704e39349f20ab6a11bfaa81c6a75": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange",
    "1737950d0fc83c68f386881b843c41b0b1e342de": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "2c6cfad5a31ca4d9126ecd2b3c43cca8543aacb4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13087. Snapshotted encryption zone information should be immutable. Contributed by LiXin Ge.\n",
      "commitDate": "29/03/18 3:46 PM",
      "commitName": "2c6cfad5a31ca4d9126ecd2b3c43cca8543aacb4",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "27/02/18 8:53 AM",
      "commitNameOld": "cd4a97bf80f1170175447b95b95ce78d717d86ff",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 30.25,
      "commitsBetweenForRepo": 357,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n       final INodesInPath iip) throws IOException {\n     if (iip.isRaw() ||\n         !fsd.ezManager.hasCreatedEncryptionZone() ||\n         !iip.getLastINode().isFile()) {\n       return null;\n     }\n     fsd.readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n-          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+          iip.getLastINode(), iip.getPathSnapshotId(),\n+          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + iip.getPath(), e);\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INodesInPath iip) throws IOException {\n    if (iip.isRaw() ||\n        !fsd.ezManager.hasCreatedEncryptionZone() ||\n        !iip.getLastINode().isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n          iip.getLastINode(), iip.getPathSnapshotId(),\n          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + iip.getPath(), e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "cd4a97bf80f1170175447b95b95ce78d717d86ff": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13192. Change the code order in getFileEncryptionInfo to avoid unnecessary call of assignment. Contributed by LiXin Ge.\n",
      "commitDate": "27/02/18 8:53 AM",
      "commitName": "cd4a97bf80f1170175447b95b95ce78d717d86ff",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "22/02/18 11:32 AM",
      "commitNameOld": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 4.89,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n       final INodesInPath iip) throws IOException {\n     if (iip.isRaw() ||\n         !fsd.ezManager.hasCreatedEncryptionZone() ||\n         !iip.getLastINode().isFile()) {\n       return null;\n     }\n     fsd.readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n-      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n-      final CipherSuite suite \u003d encryptionZone.getSuite();\n-      final String keyName \u003d encryptionZone.getKeyName();\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n           iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n-\n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n+\n+      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n+      final CipherSuite suite \u003d encryptionZone.getSuite();\n+      final String keyName \u003d encryptionZone.getKeyName();\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + iip.getPath(), e);\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INodesInPath iip) throws IOException {\n    if (iip.isRaw() ||\n        !fsd.ezManager.hasCreatedEncryptionZone() ||\n        !iip.getLastINode().isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + iip.getPath(), e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 6:44 AM",
          "commitNameOld": "0670149c88852cd7c4d6774bff06c7c588558739",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n-      final INode inode, final int snapshotId, final INodesInPath iip)\n-      throws IOException {\n-    if (!inode.isFile() || !fsd.ezManager.hasCreatedEncryptionZone()) {\n+      final INodesInPath iip) throws IOException {\n+    if (iip.isRaw() ||\n+        !fsd.ezManager.hasCreatedEncryptionZone() ||\n+        !iip.getLastINode().isFile()) {\n       return null;\n     }\n     fsd.readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n-          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n+          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n-            \"inode \" + inode, e);\n+            \"inode \" + iip.getPath(), e);\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INodesInPath iip) throws IOException {\n    if (iip.isRaw() ||\n        !fsd.ezManager.hasCreatedEncryptionZone() ||\n        !iip.getLastINode().isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + iip.getPath(), e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory(modifiers-final), inode-INode(modifiers-final), snapshotId-int(modifiers-final), iip-INodesInPath(modifiers-final)]",
            "newValue": "[fsd-FSDirectory(modifiers-final), iip-INodesInPath(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 6:44 AM",
          "commitNameOld": "0670149c88852cd7c4d6774bff06c7c588558739",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n-      final INode inode, final int snapshotId, final INodesInPath iip)\n-      throws IOException {\n-    if (!inode.isFile() || !fsd.ezManager.hasCreatedEncryptionZone()) {\n+      final INodesInPath iip) throws IOException {\n+    if (iip.isRaw() ||\n+        !fsd.ezManager.hasCreatedEncryptionZone() ||\n+        !iip.getLastINode().isFile()) {\n       return null;\n     }\n     fsd.readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n-          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n+          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n-            \"inode \" + inode, e);\n+            \"inode \" + iip.getPath(), e);\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INodesInPath iip) throws IOException {\n    if (iip.isRaw() ||\n        !fsd.ezManager.hasCreatedEncryptionZone() ||\n        !iip.getLastINode().isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(\n          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + iip.getPath(), e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "6de9213df111a9a4ed875db995d67af72d08a798": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10458. getFileEncryptionInfo should return quickly for non-encrypted cluster.\n",
      "commitDate": "06/06/16 3:52 PM",
      "commitName": "6de9213df111a9a4ed875db995d67af72d08a798",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "21/03/16 11:39 AM",
      "commitNameOld": "e3bb38d62567eafe57d16b78deeba1b71c58e41c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 77.18,
      "commitsBetweenForRepo": 502,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n       final INode inode, final int snapshotId, final INodesInPath iip)\n       throws IOException {\n-    if (!inode.isFile()) {\n+    if (!inode.isFile() || !fsd.ezManager.hasCreatedEncryptionZone()) {\n       return null;\n     }\n     fsd.readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INode inode, final int snapshotId, final INodesInPath iip)\n      throws IOException {\n    if (!inode.isFile() || !fsd.ezManager.hasCreatedEncryptionZone()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "71a81b6257c0000475ad62eb69292a20d45d269c": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yparameterchange)",
      "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
      "commitDate": "24/09/15 8:34 AM",
      "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n-      INodesInPath iip) throws IOException {\n+  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n+      final INode inode, final int snapshotId, final INodesInPath iip)\n+      throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n-    readLock();\n+    fsd.readLock();\n     try {\n-      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n-\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INode inode, final int snapshotId, final INodesInPath iip)\n      throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
            "oldMethodName": "getFileEncryptionInfo",
            "newMethodName": "getFileEncryptionInfo"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n-      INodesInPath iip) throws IOException {\n+  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n+      final INode inode, final int snapshotId, final INodesInPath iip)\n+      throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n-    readLock();\n+    fsd.readLock();\n     try {\n-      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n-\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INode inode, final int snapshotId, final INodesInPath iip)\n      throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n-      INodesInPath iip) throws IOException {\n+  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n+      final INode inode, final int snapshotId, final INodesInPath iip)\n+      throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n-    readLock();\n+    fsd.readLock();\n     try {\n-      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n-\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INode inode, final int snapshotId, final INodesInPath iip)\n      throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n-      INodesInPath iip) throws IOException {\n+  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n+      final INode inode, final int snapshotId, final INodesInPath iip)\n+      throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n-    readLock();\n+    fsd.readLock();\n     try {\n-      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n-\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INode inode, final int snapshotId, final INodesInPath iip)\n      throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, snapshotId-int, iip-INodesInPath]",
            "newValue": "[fsd-FSDirectory(modifiers-final), inode-INode(modifiers-final), snapshotId-int(modifiers-final), iip-INodesInPath(modifiers-final)]"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n-      INodesInPath iip) throws IOException {\n+  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n+      final INode inode, final int snapshotId, final INodesInPath iip)\n+      throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n-    readLock();\n+    fsd.readLock();\n     try {\n-      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n-\n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n-\n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileEncryptionInfo getFileEncryptionInfo(final FSDirectory fsd,\n      final INode inode, final int snapshotId, final INodesInPath iip)\n      throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    fsd.readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(fsd, iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, snapshotId-int, iip-INodesInPath]",
            "newValue": "[fsd-FSDirectory(modifiers-final), inode-INode(modifiers-final), snapshotId-int(modifiers-final), iip-INodesInPath(modifiers-final)]"
          }
        }
      ]
    },
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "10/09/15 7:16 AM",
      "commitNameOld": "a40342b0dab1f9137ae4b3679a5aca7f2a57d23d",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 11.48,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n       INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n \n       XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n           snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n \n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n-        return PBHelper.convert(fileProto, suite, version, keyName);\n+        return PBHelperClient.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelperClient.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "eee0d4563c62647cfaaed6605ee713aaf69add78": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)\n",
      "commitDate": "25/08/15 1:16 AM",
      "commitName": "eee0d4563c62647cfaaed6605ee713aaf69add78",
      "commitAuthor": "yliu",
      "commitDateOld": "22/08/15 12:09 AM",
      "commitNameOld": "745d04be59accf80feda0ad38efcc74ba362f2ca",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.05,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n   FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n       INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n \n-      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByName(inode,\n-                                                               snapshotId,\n-                                                               CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n+          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n \n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelper.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,\n          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/12/14 11:04 AM",
      "commitNameOld": "d555bb2120cb44d094546e6b6560926561876c10",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n       INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n       EncryptionZone encryptionZone \u003d getEZForPath(iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n \n-      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n-          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByName(inode,\n+                                                               snapshotId,\n+                                                               CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n \n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelper.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d FSDirXAttrOp.unprotectedGetXAttrByName(inode,\n                                                               snapshotId,\n                                                               CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/12/14 2:09 PM",
      "commitNameOld": "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,45 @@\n   FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n       INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n-      if (iip \u003d\u003d null) {\n-        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n-      }\n       EncryptionZone encryptionZone \u003d getEZForPath(iip);\n       if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n \n       XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n           CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n-            inode.getFullPathName() + \" in encryption zone \" +\n-            encryptionZone.getPath());\n+            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n         return null;\n       }\n \n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelper.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            iip.getPath() + \" in encryption zone \" + encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "7f0efe96f85704e39349f20ab6a11bfaa81c6a75": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7124. Remove EncryptionZoneManager.NULL_EZ. (clamb via wang)\n",
      "commitDate": "29/09/14 2:14 PM",
      "commitName": "7f0efe96f85704e39349f20ab6a11bfaa81c6a75",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "25/09/14 6:40 PM",
      "commitNameOld": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.82,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n       INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n       if (iip \u003d\u003d null) {\n         iip \u003d getINodesInPath(inode.getFullPathName(), true);\n       }\n       EncryptionZone encryptionZone \u003d getEZForPath(iip);\n-      if (encryptionZone \u003d\u003d null ||\n-          encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n+      if (encryptionZone \u003d\u003d null) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n       final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n       final CipherSuite suite \u003d encryptionZone.getSuite();\n       final String keyName \u003d encryptionZone.getKeyName();\n \n       XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n           CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             inode.getFullPathName() + \" in encryption zone \" +\n             encryptionZone.getPath());\n         return null;\n       }\n \n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n         return PBHelper.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      if (iip \u003d\u003d null) {\n        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n      }\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            inode.getFullPathName() + \" in encryption zone \" +\n            encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/09/14 10:05 AM",
      "commitNameOld": "073bbd805c6680f47bbfcc6e8efd708ad729bca4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.36,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n       INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n       if (iip \u003d\u003d null) {\n         iip \u003d getINodesInPath(inode.getFullPathName(), true);\n       }\n       EncryptionZone encryptionZone \u003d getEZForPath(iip);\n       if (encryptionZone \u003d\u003d null ||\n           encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n         // not an encrypted file\n         return null;\n       } else if(encryptionZone.getPath() \u003d\u003d null\n           || encryptionZone.getPath().isEmpty()) {\n         if (NameNode.LOG.isDebugEnabled()) {\n           NameNode.LOG.debug(\"Encryption zone \" +\n               encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n \n-      CipherSuite suite \u003d encryptionZone.getSuite();\n-      String keyName \u003d encryptionZone.getKeyName();\n+      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n+      final CipherSuite suite \u003d encryptionZone.getSuite();\n+      final String keyName \u003d encryptionZone.getKeyName();\n \n       XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n           CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n \n       if (fileXAttr \u003d\u003d null) {\n         NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n             inode.getFullPathName() + \" in encryption zone \" +\n             encryptionZone.getPath());\n         return null;\n       }\n \n       try {\n         HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n             HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                 fileXAttr.getValue());\n-        return PBHelper.convert(fileProto, suite, keyName);\n+        return PBHelper.convert(fileProto, suite, version, keyName);\n       } catch (InvalidProtocolBufferException e) {\n         throw new IOException(\"Could not parse file encryption info for \" +\n             \"inode \" + inode, e);\n       }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      if (iip \u003d\u003d null) {\n        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n      }\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null ||\n          encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      final CryptoProtocolVersion version \u003d encryptionZone.getVersion();\n      final CipherSuite suite \u003d encryptionZone.getSuite();\n      final String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            inode.getFullPathName() + \" in encryption zone \" +\n            encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, version, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "1737950d0fc83c68f386881b843c41b0b1e342de": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
      "commitDate": "21/09/14 9:29 PM",
      "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
          "commitDate": "21/09/14 9:29 PM",
          "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 10:00 PM",
          "commitNameOld": "2d2b0009e662db75cf22e2ce8d618ed0a8e61c2f",
          "commitAuthorOld": "",
          "daysBetweenCommits": 3.98,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,49 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId)\n-      throws IOException {\n+  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n+      INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n-      List\u003cXAttr\u003e xAttrs \u003d XAttrStorage.readINodeXAttrs(inode, snapshotId);\n-      if (xAttrs \u003d\u003d null) {\n-        return null;\n+      if (iip \u003d\u003d null) {\n+        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n       }\n-      for (XAttr x : xAttrs) {\n-        if (XAttrHelper.getPrefixName(x)\n-            .equals(CRYPTO_XATTR_FILE_ENCRYPTION_INFO)) {\n-          try {\n-            HdfsProtos.FileEncryptionInfoProto proto \u003d\n-                HdfsProtos.FileEncryptionInfoProto.parseFrom(x.getValue());\n-            FileEncryptionInfo feInfo \u003d PBHelper.convert(proto);\n-            return feInfo;\n-          } catch (InvalidProtocolBufferException e) {\n-            throw new IOException(\"Could not parse file encryption info for \" +\n-                \"inode \" + inode, e);\n-          }\n+      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      if (encryptionZone \u003d\u003d null ||\n+          encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n+        // not an encrypted file\n+        return null;\n+      } else if(encryptionZone.getPath() \u003d\u003d null\n+          || encryptionZone.getPath().isEmpty()) {\n+        if (NameNode.LOG.isDebugEnabled()) {\n+          NameNode.LOG.debug(\"Encryption zone \" +\n+              encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n-      return null;\n+\n+      CipherSuite suite \u003d encryptionZone.getSuite();\n+      String keyName \u003d encryptionZone.getKeyName();\n+\n+      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n+          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+\n+      if (fileXAttr \u003d\u003d null) {\n+        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n+            inode.getFullPathName() + \" in encryption zone \" +\n+            encryptionZone.getPath());\n+        return null;\n+      }\n+\n+      try {\n+        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n+            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n+                fileXAttr.getValue());\n+        return PBHelper.convert(fileProto, suite, keyName);\n+      } catch (InvalidProtocolBufferException e) {\n+        throw new IOException(\"Could not parse file encryption info for \" +\n+            \"inode \" + inode, e);\n+      }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      if (iip \u003d\u003d null) {\n        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n      }\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null ||\n          encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      CipherSuite suite \u003d encryptionZone.getSuite();\n      String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            inode.getFullPathName() + \" in encryption zone \" +\n            encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, snapshotId-int]",
            "newValue": "[inode-INode, snapshotId-int, iip-INodesInPath]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
          "commitDate": "21/09/14 9:29 PM",
          "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 10:00 PM",
          "commitNameOld": "2d2b0009e662db75cf22e2ce8d618ed0a8e61c2f",
          "commitAuthorOld": "",
          "daysBetweenCommits": 3.98,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,49 @@\n-  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId)\n-      throws IOException {\n+  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n+      INodesInPath iip) throws IOException {\n     if (!inode.isFile()) {\n       return null;\n     }\n     readLock();\n     try {\n-      List\u003cXAttr\u003e xAttrs \u003d XAttrStorage.readINodeXAttrs(inode, snapshotId);\n-      if (xAttrs \u003d\u003d null) {\n-        return null;\n+      if (iip \u003d\u003d null) {\n+        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n       }\n-      for (XAttr x : xAttrs) {\n-        if (XAttrHelper.getPrefixName(x)\n-            .equals(CRYPTO_XATTR_FILE_ENCRYPTION_INFO)) {\n-          try {\n-            HdfsProtos.FileEncryptionInfoProto proto \u003d\n-                HdfsProtos.FileEncryptionInfoProto.parseFrom(x.getValue());\n-            FileEncryptionInfo feInfo \u003d PBHelper.convert(proto);\n-            return feInfo;\n-          } catch (InvalidProtocolBufferException e) {\n-            throw new IOException(\"Could not parse file encryption info for \" +\n-                \"inode \" + inode, e);\n-          }\n+      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n+      if (encryptionZone \u003d\u003d null ||\n+          encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n+        // not an encrypted file\n+        return null;\n+      } else if(encryptionZone.getPath() \u003d\u003d null\n+          || encryptionZone.getPath().isEmpty()) {\n+        if (NameNode.LOG.isDebugEnabled()) {\n+          NameNode.LOG.debug(\"Encryption zone \" +\n+              encryptionZone.getPath() + \" does not have a valid path.\");\n         }\n       }\n-      return null;\n+\n+      CipherSuite suite \u003d encryptionZone.getSuite();\n+      String keyName \u003d encryptionZone.getKeyName();\n+\n+      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n+          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n+\n+      if (fileXAttr \u003d\u003d null) {\n+        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n+            inode.getFullPathName() + \" in encryption zone \" +\n+            encryptionZone.getPath());\n+        return null;\n+      }\n+\n+      try {\n+        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n+            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n+                fileXAttr.getValue());\n+        return PBHelper.convert(fileProto, suite, keyName);\n+      } catch (InvalidProtocolBufferException e) {\n+        throw new IOException(\"Could not parse file encryption info for \" +\n+            \"inode \" + inode, e);\n+      }\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip) throws IOException {\n    if (!inode.isFile()) {\n      return null;\n    }\n    readLock();\n    try {\n      if (iip \u003d\u003d null) {\n        iip \u003d getINodesInPath(inode.getFullPathName(), true);\n      }\n      EncryptionZone encryptionZone \u003d getEZForPath(iip);\n      if (encryptionZone \u003d\u003d null ||\n          encryptionZone.equals(EncryptionZoneManager.NULL_EZ)) {\n        // not an encrypted file\n        return null;\n      } else if(encryptionZone.getPath() \u003d\u003d null\n          || encryptionZone.getPath().isEmpty()) {\n        if (NameNode.LOG.isDebugEnabled()) {\n          NameNode.LOG.debug(\"Encryption zone \" +\n              encryptionZone.getPath() + \" does not have a valid path.\");\n        }\n      }\n\n      CipherSuite suite \u003d encryptionZone.getSuite();\n      String keyName \u003d encryptionZone.getKeyName();\n\n      XAttr fileXAttr \u003d unprotectedGetXAttrByName(inode, snapshotId,\n          CRYPTO_XATTR_FILE_ENCRYPTION_INFO);\n\n      if (fileXAttr \u003d\u003d null) {\n        NameNode.LOG.warn(\"Could not find encryption XAttr for file \" +\n            inode.getFullPathName() + \" in encryption zone \" +\n            encryptionZone.getPath());\n        return null;\n      }\n\n      try {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d\n            HdfsProtos.PerFileEncryptionInfoProto.parseFrom(\n                fileXAttr.getValue());\n        return PBHelper.convert(fileProto, suite, keyName);\n      } catch (InvalidProtocolBufferException e) {\n        throw new IOException(\"Could not parse file encryption info for \" +\n            \"inode \" + inode, e);\n      }\n    } finally {\n      readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}