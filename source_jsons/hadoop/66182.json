{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMSimulator.java",
  "functionName": "generateContainerStatusList",
  "functionId": "generateContainerStatusList",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
  "functionStartLine": 200,
  "functionEndLine": 234,
  "numCommitsSeen": 9,
  "timeTaken": 875,
  "changeHistory": [
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/07/14 6:29 PM",
      "commitNameOld": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1060.12,
      "commitsBetweenForRepo": 7788,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private ArrayList\u003cContainerStatus\u003e generateContainerStatusList() {\n     ArrayList\u003cContainerStatus\u003e csList \u003d new ArrayList\u003cContainerStatus\u003e();\n     // add running containers\n     for (ContainerSimulator container : runningContainers.values()) {\n       csList.add(newContainerStatus(container.getId(),\n         ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n     }\n     synchronized(amContainerList) {\n       for (ContainerId cId : amContainerList) {\n         csList.add(newContainerStatus(cId,\n             ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n       }\n     }\n     // add complete containers\n     synchronized(completedContainerList) {\n       for (ContainerId cId : completedContainerList) {\n-        LOG.debug(MessageFormat.format(\"NodeManager {0} completed\" +\n-                \" container ({1}).\", node.getNodeID(), cId));\n+        LOG.debug(\"NodeManager {} completed container ({}).\",\n+            node.getNodeID(), cId);\n         csList.add(newContainerStatus(\n                 cId, ContainerState.COMPLETE, ContainerExitStatus.SUCCESS));\n       }\n       completedContainerList.clear();\n     }\n     // released containers\n     synchronized(releasedContainerList) {\n       for (ContainerId cId : releasedContainerList) {\n-        LOG.debug(MessageFormat.format(\"NodeManager {0} released container\" +\n-                \" ({1}).\", node.getNodeID(), cId));\n+        LOG.debug(\"NodeManager {} released container ({}).\",\n+            node.getNodeID(), cId);\n         csList.add(newContainerStatus(\n                 cId, ContainerState.COMPLETE, ContainerExitStatus.ABORTED));\n       }\n       releasedContainerList.clear();\n     }\n     return csList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ArrayList\u003cContainerStatus\u003e generateContainerStatusList() {\n    ArrayList\u003cContainerStatus\u003e csList \u003d new ArrayList\u003cContainerStatus\u003e();\n    // add running containers\n    for (ContainerSimulator container : runningContainers.values()) {\n      csList.add(newContainerStatus(container.getId(),\n        ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n    }\n    synchronized(amContainerList) {\n      for (ContainerId cId : amContainerList) {\n        csList.add(newContainerStatus(cId,\n            ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n      }\n    }\n    // add complete containers\n    synchronized(completedContainerList) {\n      for (ContainerId cId : completedContainerList) {\n        LOG.debug(\"NodeManager {} completed container ({}).\",\n            node.getNodeID(), cId);\n        csList.add(newContainerStatus(\n                cId, ContainerState.COMPLETE, ContainerExitStatus.SUCCESS));\n      }\n      completedContainerList.clear();\n    }\n    // released containers\n    synchronized(releasedContainerList) {\n      for (ContainerId cId : releasedContainerList) {\n        LOG.debug(\"NodeManager {} released container ({}).\",\n            node.getNodeID(), cId);\n        csList.add(newContainerStatus(\n                cId, ContainerState.COMPLETE, ContainerExitStatus.ABORTED));\n      }\n      releasedContainerList.clear();\n    }\n    return csList;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,35 @@\n+  private ArrayList\u003cContainerStatus\u003e generateContainerStatusList() {\n+    ArrayList\u003cContainerStatus\u003e csList \u003d new ArrayList\u003cContainerStatus\u003e();\n+    // add running containers\n+    for (ContainerSimulator container : runningContainers.values()) {\n+      csList.add(newContainerStatus(container.getId(),\n+        ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n+    }\n+    synchronized(amContainerList) {\n+      for (ContainerId cId : amContainerList) {\n+        csList.add(newContainerStatus(cId,\n+            ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n+      }\n+    }\n+    // add complete containers\n+    synchronized(completedContainerList) {\n+      for (ContainerId cId : completedContainerList) {\n+        LOG.debug(MessageFormat.format(\"NodeManager {0} completed\" +\n+                \" container ({1}).\", node.getNodeID(), cId));\n+        csList.add(newContainerStatus(\n+                cId, ContainerState.COMPLETE, ContainerExitStatus.SUCCESS));\n+      }\n+      completedContainerList.clear();\n+    }\n+    // released containers\n+    synchronized(releasedContainerList) {\n+      for (ContainerId cId : releasedContainerList) {\n+        LOG.debug(MessageFormat.format(\"NodeManager {0} released container\" +\n+                \" ({1}).\", node.getNodeID(), cId));\n+        csList.add(newContainerStatus(\n+                cId, ContainerState.COMPLETE, ContainerExitStatus.ABORTED));\n+      }\n+      releasedContainerList.clear();\n+    }\n+    return csList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ArrayList\u003cContainerStatus\u003e generateContainerStatusList() {\n    ArrayList\u003cContainerStatus\u003e csList \u003d new ArrayList\u003cContainerStatus\u003e();\n    // add running containers\n    for (ContainerSimulator container : runningContainers.values()) {\n      csList.add(newContainerStatus(container.getId(),\n        ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n    }\n    synchronized(amContainerList) {\n      for (ContainerId cId : amContainerList) {\n        csList.add(newContainerStatus(cId,\n            ContainerState.RUNNING, ContainerExitStatus.SUCCESS));\n      }\n    }\n    // add complete containers\n    synchronized(completedContainerList) {\n      for (ContainerId cId : completedContainerList) {\n        LOG.debug(MessageFormat.format(\"NodeManager {0} completed\" +\n                \" container ({1}).\", node.getNodeID(), cId));\n        csList.add(newContainerStatus(\n                cId, ContainerState.COMPLETE, ContainerExitStatus.SUCCESS));\n      }\n      completedContainerList.clear();\n    }\n    // released containers\n    synchronized(releasedContainerList) {\n      for (ContainerId cId : releasedContainerList) {\n        LOG.debug(MessageFormat.format(\"NodeManager {0} released container\" +\n                \" ({1}).\", node.getNodeID(), cId));\n        csList.add(newContainerStatus(\n                cId, ContainerState.COMPLETE, ContainerExitStatus.ABORTED));\n      }\n      releasedContainerList.clear();\n    }\n    return csList;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java"
    }
  }
}