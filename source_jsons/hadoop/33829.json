{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PrivilegedOperationExecutor.java",
  "functionName": "executePrivilegedOperation",
  "functionId": "executePrivilegedOperation___prefixCommands-List__String____operation-PrivilegedOperation__workingDir-File__env-Map__String,String____grabOutput-boolean__inheritParentEnv-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
  "functionStartLine": 144,
  "functionEndLine": 193,
  "numCommitsSeen": 16,
  "timeTaken": 2941,
  "changeHistory": [
    "bfb4d950596d6198e473045dac6eb36c685b0319",
    "9d4d30243b0fc9630da51a2c17b543ef671d035c",
    "059caf99891943d9587cac19b48e82efbed06b2d",
    "fb9c1519b30cf8113cf9b8deed9b9901db5e9693",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "838b06ac87339494cea706d4a97e7f5383bdc442"
  ],
  "changeHistoryShort": {
    "bfb4d950596d6198e473045dac6eb36c685b0319": "Ybodychange",
    "9d4d30243b0fc9630da51a2c17b543ef671d035c": "Ymultichange(Yparameterchange,Ybodychange)",
    "059caf99891943d9587cac19b48e82efbed06b2d": "Ybodychange",
    "fb9c1519b30cf8113cf9b8deed9b9901db5e9693": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "838b06ac87339494cea706d4a97e7f5383bdc442": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bfb4d950596d6198e473045dac6eb36c685b0319": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5430. Return container\u0027s ip and host from NM ContainerStatus call. Contributed by Jian He.\n",
      "commitDate": "26/08/16 4:00 AM",
      "commitName": "bfb4d950596d6198e473045dac6eb36c685b0319",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "29/04/16 9:25 AM",
      "commitNameOld": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 118.77,
      "commitsBetweenForRepo": 930,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n       PrivilegedOperation operation, File workingDir,\n       Map\u003cString, String\u003e env, boolean grabOutput, boolean inheritParentEnv)\n       throws PrivilegedOperationException {\n     String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n         (prefixCommands, operation);\n     ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n         workingDir, env, 0L, inheritParentEnv);\n \n     try {\n       exec.execute();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"command array:\");\n         LOG.debug(Arrays.toString(fullCommandArray));\n         LOG.debug(\"Privileged Execution Operation Output:\");\n         LOG.debug(exec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       if (operation.isFailureLoggingEnabled()) {\n-\n         StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n             + \"exit code: \")\n             .append(exec.getExitCode())\n-            .append(\". Privileged Execution Operation Output: \")\n-            .append(System.lineSeparator()).append(exec.getOutput());\n-\n+            .append(\". Privileged Execution Operation Stderr: \")\n+            .append(System.lineSeparator())\n+            .append(e.getMessage())\n+            .append(System.lineSeparator())\n+            .append(\"Stdout: \" + exec.getOutput())\n+            .append(System.lineSeparator());\n         logBuilder.append(\"Full command array for failed execution: \")\n             .append(System.lineSeparator());\n         logBuilder.append(Arrays.toString(fullCommandArray));\n \n         LOG.warn(logBuilder.toString());\n       }\n \n       //stderr from shell executor seems to be stuffed into the exception\n       //\u0027message\u0027 - so, we have to extract it and set it as the error out\n       throw new PrivilegedOperationException(e, e.getExitCode(),\n           exec.getOutput(), e.getMessage());\n     } catch (IOException e) {\n       LOG.warn(\"IOException executing command: \", e);\n       throw new PrivilegedOperationException(e);\n     }\n \n     if (grabOutput) {\n       return exec.getOutput();\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput, boolean inheritParentEnv)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env, 0L, inheritParentEnv);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      if (operation.isFailureLoggingEnabled()) {\n        StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n            + \"exit code: \")\n            .append(exec.getExitCode())\n            .append(\". Privileged Execution Operation Stderr: \")\n            .append(System.lineSeparator())\n            .append(e.getMessage())\n            .append(System.lineSeparator())\n            .append(\"Stdout: \" + exec.getOutput())\n            .append(System.lineSeparator());\n        logBuilder.append(\"Full command array for failed execution: \")\n            .append(System.lineSeparator());\n        logBuilder.append(Arrays.toString(fullCommandArray));\n\n        LOG.warn(logBuilder.toString());\n      }\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          exec.getOutput(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
      "extendedDetails": {}
    },
    "9d4d30243b0fc9630da51a2c17b543ef671d035c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Remove parent\u0027s env vars from child processes\n",
      "commitDate": "29/04/16 9:25 AM",
      "commitName": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Remove parent\u0027s env vars from child processes\n",
          "commitDate": "29/04/16 9:25 AM",
          "commitName": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "07/03/16 7:40 AM",
          "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 53.03,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n       PrivilegedOperation operation, File workingDir,\n-      Map\u003cString, String\u003e env, boolean grabOutput)\n+      Map\u003cString, String\u003e env, boolean grabOutput, boolean inheritParentEnv)\n       throws PrivilegedOperationException {\n     String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n         (prefixCommands, operation);\n     ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n-        workingDir, env);\n+        workingDir, env, 0L, inheritParentEnv);\n \n     try {\n       exec.execute();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"command array:\");\n         LOG.debug(Arrays.toString(fullCommandArray));\n         LOG.debug(\"Privileged Execution Operation Output:\");\n         LOG.debug(exec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       if (operation.isFailureLoggingEnabled()) {\n \n         StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n             + \"exit code: \")\n             .append(exec.getExitCode())\n             .append(\". Privileged Execution Operation Output: \")\n             .append(System.lineSeparator()).append(exec.getOutput());\n \n         logBuilder.append(\"Full command array for failed execution: \")\n             .append(System.lineSeparator());\n         logBuilder.append(Arrays.toString(fullCommandArray));\n \n         LOG.warn(logBuilder.toString());\n       }\n \n       //stderr from shell executor seems to be stuffed into the exception\n       //\u0027message\u0027 - so, we have to extract it and set it as the error out\n       throw new PrivilegedOperationException(e, e.getExitCode(),\n           exec.getOutput(), e.getMessage());\n     } catch (IOException e) {\n       LOG.warn(\"IOException executing command: \", e);\n       throw new PrivilegedOperationException(e);\n     }\n \n     if (grabOutput) {\n       return exec.getOutput();\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput, boolean inheritParentEnv)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env, 0L, inheritParentEnv);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      if (operation.isFailureLoggingEnabled()) {\n\n        StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n            + \"exit code: \")\n            .append(exec.getExitCode())\n            .append(\". Privileged Execution Operation Output: \")\n            .append(System.lineSeparator()).append(exec.getOutput());\n\n        logBuilder.append(\"Full command array for failed execution: \")\n            .append(System.lineSeparator());\n        logBuilder.append(Arrays.toString(fullCommandArray));\n\n        LOG.warn(logBuilder.toString());\n      }\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          exec.getOutput(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
          "extendedDetails": {
            "oldValue": "[prefixCommands-List\u003cString\u003e, operation-PrivilegedOperation, workingDir-File, env-Map\u003cString,String\u003e, grabOutput-boolean]",
            "newValue": "[prefixCommands-List\u003cString\u003e, operation-PrivilegedOperation, workingDir-File, env-Map\u003cString,String\u003e, grabOutput-boolean, inheritParentEnv-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove parent\u0027s env vars from child processes\n",
          "commitDate": "29/04/16 9:25 AM",
          "commitName": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "07/03/16 7:40 AM",
          "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 53.03,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n       PrivilegedOperation operation, File workingDir,\n-      Map\u003cString, String\u003e env, boolean grabOutput)\n+      Map\u003cString, String\u003e env, boolean grabOutput, boolean inheritParentEnv)\n       throws PrivilegedOperationException {\n     String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n         (prefixCommands, operation);\n     ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n-        workingDir, env);\n+        workingDir, env, 0L, inheritParentEnv);\n \n     try {\n       exec.execute();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"command array:\");\n         LOG.debug(Arrays.toString(fullCommandArray));\n         LOG.debug(\"Privileged Execution Operation Output:\");\n         LOG.debug(exec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       if (operation.isFailureLoggingEnabled()) {\n \n         StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n             + \"exit code: \")\n             .append(exec.getExitCode())\n             .append(\". Privileged Execution Operation Output: \")\n             .append(System.lineSeparator()).append(exec.getOutput());\n \n         logBuilder.append(\"Full command array for failed execution: \")\n             .append(System.lineSeparator());\n         logBuilder.append(Arrays.toString(fullCommandArray));\n \n         LOG.warn(logBuilder.toString());\n       }\n \n       //stderr from shell executor seems to be stuffed into the exception\n       //\u0027message\u0027 - so, we have to extract it and set it as the error out\n       throw new PrivilegedOperationException(e, e.getExitCode(),\n           exec.getOutput(), e.getMessage());\n     } catch (IOException e) {\n       LOG.warn(\"IOException executing command: \", e);\n       throw new PrivilegedOperationException(e);\n     }\n \n     if (grabOutput) {\n       return exec.getOutput();\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput, boolean inheritParentEnv)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env, 0L, inheritParentEnv);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      if (operation.isFailureLoggingEnabled()) {\n\n        StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n            + \"exit code: \")\n            .append(exec.getExitCode())\n            .append(\". Privileged Execution Operation Output: \")\n            .append(System.lineSeparator()).append(exec.getOutput());\n\n        logBuilder.append(\"Full command array for failed execution: \")\n            .append(System.lineSeparator());\n        logBuilder.append(Arrays.toString(fullCommandArray));\n\n        LOG.warn(logBuilder.toString());\n      }\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          exec.getOutput(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "059caf99891943d9587cac19b48e82efbed06b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4744. Too many signal to container failure in case of LCE. Contributed by Sidharta Seethana\n",
      "commitDate": "07/03/16 7:40 AM",
      "commitName": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/10/15 2:48 AM",
      "commitNameOld": "fb9c1519b30cf8113cf9b8deed9b9901db5e9693",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 145.24,
      "commitsBetweenForRepo": 987,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n       PrivilegedOperation operation, File workingDir,\n       Map\u003cString, String\u003e env, boolean grabOutput)\n       throws PrivilegedOperationException {\n     String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n         (prefixCommands, operation);\n     ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n         workingDir, env);\n \n     try {\n       exec.execute();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"command array:\");\n         LOG.debug(Arrays.toString(fullCommandArray));\n         LOG.debug(\"Privileged Execution Operation Output:\");\n         LOG.debug(exec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n-      StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n-          + \"exit code: \")\n-          .append(exec.getExitCode())\n-          .append(\". Privileged Execution Operation Output: \")\n-          .append(System.lineSeparator()).append(exec.getOutput());\n+      if (operation.isFailureLoggingEnabled()) {\n \n-      logBuilder.append(\"Full command array for failed execution: \")\n-          .append(System.lineSeparator());\n-      logBuilder.append(Arrays.toString(fullCommandArray));\n+        StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n+            + \"exit code: \")\n+            .append(exec.getExitCode())\n+            .append(\". Privileged Execution Operation Output: \")\n+            .append(System.lineSeparator()).append(exec.getOutput());\n \n-      LOG.warn(logBuilder.toString());\n+        logBuilder.append(\"Full command array for failed execution: \")\n+            .append(System.lineSeparator());\n+        logBuilder.append(Arrays.toString(fullCommandArray));\n+\n+        LOG.warn(logBuilder.toString());\n+      }\n \n       //stderr from shell executor seems to be stuffed into the exception\n       //\u0027message\u0027 - so, we have to extract it and set it as the error out\n       throw new PrivilegedOperationException(e, e.getExitCode(),\n           exec.getOutput(), e.getMessage());\n     } catch (IOException e) {\n       LOG.warn(\"IOException executing command: \", e);\n       throw new PrivilegedOperationException(e);\n     }\n \n     if (grabOutput) {\n       return exec.getOutput();\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      if (operation.isFailureLoggingEnabled()) {\n\n        StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n            + \"exit code: \")\n            .append(exec.getExitCode())\n            .append(\". Privileged Execution Operation Output: \")\n            .append(System.lineSeparator()).append(exec.getOutput());\n\n        logBuilder.append(\"Full command array for failed execution: \")\n            .append(System.lineSeparator());\n        logBuilder.append(Arrays.toString(fullCommandArray));\n\n        LOG.warn(logBuilder.toString());\n      }\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          exec.getOutput(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
      "extendedDetails": {}
    },
    "fb9c1519b30cf8113cf9b8deed9b9901db5e9693": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4252. Log container-executor invocation details when exit code is non-zero. Contributed by Sidharta Seethana.\n",
      "commitDate": "14/10/15 2:48 AM",
      "commitName": "fb9c1519b30cf8113cf9b8deed9b9901db5e9693",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "27/07/15 11:57 AM",
      "commitNameOld": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 78.62,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,45 @@\n   public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n       PrivilegedOperation operation, File workingDir,\n       Map\u003cString, String\u003e env, boolean grabOutput)\n       throws PrivilegedOperationException {\n     String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n         (prefixCommands, operation);\n     ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n         workingDir, env);\n \n     try {\n       exec.execute();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"command array:\");\n         LOG.debug(Arrays.toString(fullCommandArray));\n         LOG.debug(\"Privileged Execution Operation Output:\");\n         LOG.debug(exec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n-      String logLine \u003d new StringBuffer(\"Shell execution returned exit code: \")\n+      StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n+          + \"exit code: \")\n           .append(exec.getExitCode())\n           .append(\". Privileged Execution Operation Output: \")\n-          .append(System.lineSeparator()).append(exec.getOutput()).toString();\n+          .append(System.lineSeparator()).append(exec.getOutput());\n \n-      LOG.warn(logLine);\n+      logBuilder.append(\"Full command array for failed execution: \")\n+          .append(System.lineSeparator());\n+      logBuilder.append(Arrays.toString(fullCommandArray));\n+\n+      LOG.warn(logBuilder.toString());\n \n       //stderr from shell executor seems to be stuffed into the exception\n       //\u0027message\u0027 - so, we have to extract it and set it as the error out\n       throw new PrivilegedOperationException(e, e.getExitCode(),\n           exec.getOutput(), e.getMessage());\n     } catch (IOException e) {\n       LOG.warn(\"IOException executing command: \", e);\n       throw new PrivilegedOperationException(e);\n     }\n \n     if (grabOutput) {\n       return exec.getOutput();\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      StringBuilder logBuilder \u003d new StringBuilder(\"Shell execution returned \"\n          + \"exit code: \")\n          .append(exec.getExitCode())\n          .append(\". Privileged Execution Operation Output: \")\n          .append(System.lineSeparator()).append(exec.getOutput());\n\n      logBuilder.append(\"Full command array for failed execution: \")\n          .append(System.lineSeparator());\n      logBuilder.append(Arrays.toString(fullCommandArray));\n\n      LOG.warn(logBuilder.toString());\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          exec.getOutput(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/07/15 4:29 AM",
      "commitNameOld": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,40 @@\n   public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n       PrivilegedOperation operation, File workingDir,\n       Map\u003cString, String\u003e env, boolean grabOutput)\n       throws PrivilegedOperationException {\n     String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n         (prefixCommands, operation);\n     ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n         workingDir, env);\n \n     try {\n       exec.execute();\n       if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"command array:\");\n+        LOG.debug(Arrays.toString(fullCommandArray));\n         LOG.debug(\"Privileged Execution Operation Output:\");\n         LOG.debug(exec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       String logLine \u003d new StringBuffer(\"Shell execution returned exit code: \")\n           .append(exec.getExitCode())\n           .append(\". Privileged Execution Operation Output: \")\n           .append(System.lineSeparator()).append(exec.getOutput()).toString();\n \n       LOG.warn(logLine);\n-      throw new PrivilegedOperationException(e);\n+\n+      //stderr from shell executor seems to be stuffed into the exception\n+      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n+      throw new PrivilegedOperationException(e, e.getExitCode(),\n+          exec.getOutput(), e.getMessage());\n     } catch (IOException e) {\n       LOG.warn(\"IOException executing command: \", e);\n       throw new PrivilegedOperationException(e);\n     }\n \n     if (grabOutput) {\n       return exec.getOutput();\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      String logLine \u003d new StringBuffer(\"Shell execution returned exit code: \")\n          .append(exec.getExitCode())\n          .append(\". Privileged Execution Operation Output: \")\n          .append(System.lineSeparator()).append(exec.getOutput()).toString();\n\n      LOG.warn(logLine);\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          exec.getOutput(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
      "extendedDetails": {}
    },
    "838b06ac87339494cea706d4a97e7f5383bdc442": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3443. Create a \u0027ResourceHandler\u0027 subsystem to ease addition of support for new resource types on the NM. Contributed by Sidharta Seethana.\n",
      "commitDate": "13/04/15 6:35 PM",
      "commitName": "838b06ac87339494cea706d4a97e7f5383bdc442",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,34 @@\n+  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n+      PrivilegedOperation operation, File workingDir,\n+      Map\u003cString, String\u003e env, boolean grabOutput)\n+      throws PrivilegedOperationException {\n+    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n+        (prefixCommands, operation);\n+    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n+        workingDir, env);\n+\n+    try {\n+      exec.execute();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Privileged Execution Operation Output:\");\n+        LOG.debug(exec.getOutput());\n+      }\n+    } catch (ExitCodeException e) {\n+      String logLine \u003d new StringBuffer(\"Shell execution returned exit code: \")\n+          .append(exec.getExitCode())\n+          .append(\". Privileged Execution Operation Output: \")\n+          .append(System.lineSeparator()).append(exec.getOutput()).toString();\n+\n+      LOG.warn(logLine);\n+      throw new PrivilegedOperationException(e);\n+    } catch (IOException e) {\n+      LOG.warn(\"IOException executing command: \", e);\n+      throw new PrivilegedOperationException(e);\n+    }\n+\n+    if (grabOutput) {\n+      return exec.getOutput();\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String executePrivilegedOperation(List\u003cString\u003e prefixCommands,\n      PrivilegedOperation operation, File workingDir,\n      Map\u003cString, String\u003e env, boolean grabOutput)\n      throws PrivilegedOperationException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand\n        (prefixCommands, operation);\n    ShellCommandExecutor exec \u003d new ShellCommandExecutor(fullCommandArray,\n        workingDir, env);\n\n    try {\n      exec.execute();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Privileged Execution Operation Output:\");\n        LOG.debug(exec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      String logLine \u003d new StringBuffer(\"Shell execution returned exit code: \")\n          .append(exec.getExitCode())\n          .append(\". Privileged Execution Operation Output: \")\n          .append(System.lineSeparator()).append(exec.getOutput()).toString();\n\n      LOG.warn(logLine);\n      throw new PrivilegedOperationException(e);\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    if (grabOutput) {\n      return exec.getOutput();\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java"
    }
  }
}