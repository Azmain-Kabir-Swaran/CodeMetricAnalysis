{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryWithSnapshotFeature.java",
  "functionName": "computeDiffBetweenSnapshots",
  "functionId": "computeDiffBetweenSnapshots___fromSnapshot-Snapshot__toSnapshot-Snapshot__diff-ChildrenDiff__currentINode-INodeDirectory",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
  "functionStartLine": 660,
  "functionEndLine": 698,
  "numCommitsSeen": 103,
  "timeTaken": 4572,
  "changeHistory": [
    "346caa209571dedf1331b2658d5702b45dd40bfe",
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252",
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
    "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
    "66ea187228c899cadf23d10c7032c8efe1aa0df4"
  ],
  "changeHistoryShort": {
    "346caa209571dedf1331b2658d5702b45dd40bfe": "Ybodychange",
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252": "Ybodychange",
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "c02953dbc344b39e0eb0d13fe2d899cdcdc46380": "Ybodychange",
    "3a812e9f3ae66cfa525faceb5af9085a4cc37232": "Ybodychange",
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c": "Ybodychange",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": "Ybodychange",
    "66ea187228c899cadf23d10c7032c8efe1aa0df4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "346caa209571dedf1331b2658d5702b45dd40bfe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13227. Add a method to calculate cumulative diff over multiple snapshots in DirectoryDiffList.  Contributed by Shashikant Banerjee\n",
      "commitDate": "06/03/18 1:35 PM",
      "commitName": "346caa209571dedf1331b2658d5702b45dd40bfe",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "02/03/18 5:47 PM",
      "commitNameOld": "ba82e5c488ca0081534c1e40810b3f9e7da9eaad",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.82,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n     int[] diffIndexPair \u003d diffs.changedBetweenSnapshots(fromSnapshot,\n         toSnapshot);\n     if (diffIndexPair \u003d\u003d null) {\n       return false;\n     }\n     int earlierDiffIndex \u003d diffIndexPair[0];\n     int laterDiffIndex \u003d diffIndexPair[1];\n \n     boolean dirMetadataChanged \u003d false;\n     INodeDirectoryAttributes dirCopy \u003d null;\n-    DiffList\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n-    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n-      DirectoryDiff sdiff \u003d difflist.get(i);\n+    List\u003cDirectoryDiff\u003e difflist \u003d diffs\n+        .getDiffListBetweenSnapshots(earlierDiffIndex, laterDiffIndex,\n+            currentINode);\n+    for (DirectoryDiff sdiff : difflist) {\n       diff.combinePosterior(sdiff.diff, null);\n       if (!dirMetadataChanged \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c difflist.size(); i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(currentINode);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n    int[] diffIndexPair \u003d diffs.changedBetweenSnapshots(fromSnapshot,\n        toSnapshot);\n    if (diffIndexPair \u003d\u003d null) {\n      return false;\n    }\n    int earlierDiffIndex \u003d diffIndexPair[0];\n    int laterDiffIndex \u003d diffIndexPair[1];\n\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    List\u003cDirectoryDiff\u003e difflist \u003d diffs\n        .getDiffListBetweenSnapshots(earlierDiffIndex, laterDiffIndex,\n            currentINode);\n    for (DirectoryDiff sdiff : difflist) {\n      diff.combinePosterior(sdiff.diff, null);\n      if (!dirMetadataChanged \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c difflist.size(); i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(currentINode);\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13142. Define and Implement a DiifList Interface to store and manage SnapshotDiffs.  Contributed by Shashikant Banerjee\n",
      "commitDate": "15/02/18 3:33 AM",
      "commitName": "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "14/07/17 2:35 PM",
      "commitNameOld": "f413ee33df301659c4ca9024380c2354983dcc84",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 215.58,
      "commitsBetweenForRepo": 1591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n     int[] diffIndexPair \u003d diffs.changedBetweenSnapshots(fromSnapshot,\n         toSnapshot);\n     if (diffIndexPair \u003d\u003d null) {\n       return false;\n     }\n     int earlierDiffIndex \u003d diffIndexPair[0];\n     int laterDiffIndex \u003d diffIndexPair[1];\n \n     boolean dirMetadataChanged \u003d false;\n     INodeDirectoryAttributes dirCopy \u003d null;\n-    List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n+    DiffList\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (!dirMetadataChanged \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c difflist.size(); i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(currentINode);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n    int[] diffIndexPair \u003d diffs.changedBetweenSnapshots(fromSnapshot,\n        toSnapshot);\n    if (diffIndexPair \u003d\u003d null) {\n      return false;\n    }\n    int earlierDiffIndex \u003d diffIndexPair[0];\n    int laterDiffIndex \u003d diffIndexPair[1];\n\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    DiffList\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (!dirMetadataChanged \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c difflist.size(); i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(currentINode);\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/14 3:59 PM",
      "commitName": "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "13/05/14 6:15 PM",
      "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 38.91,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,38 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n-    Snapshot earlier \u003d fromSnapshot;\n-    Snapshot later \u003d toSnapshot;\n-    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n-      earlier \u003d toSnapshot;\n-      later \u003d fromSnapshot;\n-    }\n-\n-    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n-    if (!modified) {\n+    int[] diffIndexPair \u003d diffs.changedBetweenSnapshots(fromSnapshot,\n+        toSnapshot);\n+    if (diffIndexPair \u003d\u003d null) {\n       return false;\n     }\n-\n-    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n-    final int size \u003d difflist.size();\n-    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n-    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n-        .binarySearch(difflist, later.getId());\n-    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n-        : earlierDiffIndex;\n-    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n-        : laterDiffIndex;\n+    int earlierDiffIndex \u003d diffIndexPair[0];\n+    int laterDiffIndex \u003d diffIndexPair[1];\n \n     boolean dirMetadataChanged \u003d false;\n     INodeDirectoryAttributes dirCopy \u003d null;\n+    List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n-      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n+      if (!dirMetadataChanged \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n-      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n+      for (int i \u003d laterDiffIndex; i \u003c difflist.size(); i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(currentINode);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n    int[] diffIndexPair \u003d diffs.changedBetweenSnapshots(fromSnapshot,\n        toSnapshot);\n    if (diffIndexPair \u003d\u003d null) {\n      return false;\n    }\n    int earlierDiffIndex \u003d diffIndexPair[0];\n    int laterDiffIndex \u003d diffIndexPair[1];\n\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (!dirMetadataChanged \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c difflist.size(); i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(currentINode);\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n-      Snapshot toSnapshot, ChildrenDiff diff) {\n+      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n     Snapshot earlier \u003d fromSnapshot;\n     Snapshot later \u003d toSnapshot;\n     if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n       earlier \u003d toSnapshot;\n       later \u003d fromSnapshot;\n     }\n-    \n-    boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n-        later);\n+\n+    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n     if (!modified) {\n       return false;\n     }\n-    \n+\n     final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     final int size \u003d difflist.size();\n     int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n     int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n         .binarySearch(difflist, later.getId());\n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n-    \n+\n     boolean dirMetadataChanged \u003d false;\n     INodeDirectoryAttributes dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n-      return !dirCopy.metadataEquals(this);\n+      return !dirCopy.metadataEquals(currentINode);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n    Snapshot earlier \u003d fromSnapshot;\n    Snapshot later \u003d toSnapshot;\n    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n      earlier \u003d toSnapshot;\n      later \u003d fromSnapshot;\n    }\n\n    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n    if (!modified) {\n      return false;\n    }\n\n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n        .binarySearch(difflist, later.getId());\n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(currentINode);\n    } else {\n      return false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n-      Snapshot toSnapshot, ChildrenDiff diff) {\n+      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n     Snapshot earlier \u003d fromSnapshot;\n     Snapshot later \u003d toSnapshot;\n     if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n       earlier \u003d toSnapshot;\n       later \u003d fromSnapshot;\n     }\n-    \n-    boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n-        later);\n+\n+    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n     if (!modified) {\n       return false;\n     }\n-    \n+\n     final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     final int size \u003d difflist.size();\n     int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n     int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n         .binarySearch(difflist, later.getId());\n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n-    \n+\n     boolean dirMetadataChanged \u003d false;\n     INodeDirectoryAttributes dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n-      return !dirCopy.metadataEquals(this);\n+      return !dirCopy.metadataEquals(currentINode);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n    Snapshot earlier \u003d fromSnapshot;\n    Snapshot later \u003d toSnapshot;\n    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n      earlier \u003d toSnapshot;\n      later \u003d fromSnapshot;\n    }\n\n    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n    if (!modified) {\n      return false;\n    }\n\n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n        .binarySearch(difflist, later.getId());\n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(currentINode);\n    } else {\n      return false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n-      Snapshot toSnapshot, ChildrenDiff diff) {\n+      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n     Snapshot earlier \u003d fromSnapshot;\n     Snapshot later \u003d toSnapshot;\n     if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n       earlier \u003d toSnapshot;\n       later \u003d fromSnapshot;\n     }\n-    \n-    boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n-        later);\n+\n+    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n     if (!modified) {\n       return false;\n     }\n-    \n+\n     final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     final int size \u003d difflist.size();\n     int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n     int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n         .binarySearch(difflist, later.getId());\n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n-    \n+\n     boolean dirMetadataChanged \u003d false;\n     INodeDirectoryAttributes dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n-      return !dirCopy.metadataEquals(this);\n+      return !dirCopy.metadataEquals(currentINode);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode) {\n    Snapshot earlier \u003d fromSnapshot;\n    Snapshot later \u003d toSnapshot;\n    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n      earlier \u003d toSnapshot;\n      later \u003d fromSnapshot;\n    }\n\n    boolean modified \u003d diffs.changedBetweenSnapshots(earlier, later);\n    if (!modified) {\n      return false;\n    }\n\n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n        .binarySearch(difflist, later.getId());\n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(currentINode);\n    } else {\n      return false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[fromSnapshot-Snapshot, toSnapshot-Snapshot, diff-ChildrenDiff]",
            "newValue": "[fromSnapshot-Snapshot, toSnapshot-Snapshot, diff-ChildrenDiff, currentINode-INodeDirectory]"
          }
        }
      ]
    },
    "c02953dbc344b39e0eb0d13fe2d899cdcdc46380": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4908. Reduce snapshot inode memory usage.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 10:10 PM",
      "commitName": "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/06/13 1:15 PM",
      "commitNameOld": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 13.37,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff) {\n     Snapshot earlier \u003d fromSnapshot;\n     Snapshot later \u003d toSnapshot;\n     if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n       earlier \u003d toSnapshot;\n       later \u003d fromSnapshot;\n     }\n     \n     boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n         later);\n     if (!modified) {\n       return false;\n     }\n     \n     final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     final int size \u003d difflist.size();\n     int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n     int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n         .binarySearch(difflist, later.getId());\n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n     \n     boolean dirMetadataChanged \u003d false;\n-    INodeDirectory dirCopy \u003d null;\n+    INodeDirectoryAttributes dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n           dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(this);\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff) {\n    Snapshot earlier \u003d fromSnapshot;\n    Snapshot later \u003d toSnapshot;\n    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n      earlier \u003d toSnapshot;\n      later \u003d fromSnapshot;\n    }\n    \n    boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n        later);\n    if (!modified) {\n      return false;\n    }\n    \n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n        .binarySearch(difflist, later.getId());\n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n    \n    boolean dirMetadataChanged \u003d false;\n    INodeDirectoryAttributes dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(this);\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "3a812e9f3ae66cfa525faceb5af9085a4cc37232": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4738. Changes AbstractINodeDiff to implement Comparable\u003cInteger\u003e, and fix javadoc and other warnings.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471228 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 7:11 PM",
      "commitName": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/04/13 5:11 PM",
      "commitNameOld": "10a2d82b45353ed3dbaa19d87c7e887c0afa2c57",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff) {\n-    Snapshot earlierSnapshot \u003d fromSnapshot;\n-    Snapshot laterSnapshot \u003d toSnapshot;\n+    Snapshot earlier \u003d fromSnapshot;\n+    Snapshot later \u003d toSnapshot;\n     if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n-      earlierSnapshot \u003d toSnapshot;\n-      laterSnapshot \u003d fromSnapshot;\n+      earlier \u003d toSnapshot;\n+      later \u003d fromSnapshot;\n     }\n     \n-    boolean modified \u003d diffs.changedBetweenSnapshots(earlierSnapshot,\n-        laterSnapshot);\n+    boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n+        later);\n     if (!modified) {\n       return false;\n     }\n     \n     final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     final int size \u003d difflist.size();\n-    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlierSnapshot);\n-    int laterDiffIndex \u003d laterSnapshot \u003d\u003d null ? size : Collections\n-        .binarySearch(difflist, laterSnapshot);\n+    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n+    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n+        .binarySearch(difflist, later.getId());\n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n     \n     boolean dirMetadataChanged \u003d false;\n     INodeDirectory dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n-        } else {\n-          if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n-            dirMetadataChanged \u003d true;\n-          }\n+        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n+          dirMetadataChanged \u003d true;\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(this);\n+    } else {\n+      return false;\n     }\n-    return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff) {\n    Snapshot earlier \u003d fromSnapshot;\n    Snapshot later \u003d toSnapshot;\n    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n      earlier \u003d toSnapshot;\n      later \u003d fromSnapshot;\n    }\n    \n    boolean modified \u003d diffs.changedBetweenSnapshots(earlier,\n        later);\n    if (!modified) {\n      return false;\n    }\n    \n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlier.getId());\n    int laterDiffIndex \u003d later \u003d\u003d null ? size : Collections\n        .binarySearch(difflist, later.getId());\n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n    \n    boolean dirMetadataChanged \u003d false;\n    INodeDirectory dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n          dirMetadataChanged \u003d true;\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(this);\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/13 3:07 PM",
      "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/02/13 2:00 PM",
      "commitNameOld": "d42d0860cb670c8284bb298029cd6f8f59db9510",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,53 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff) {\n     Snapshot earlierSnapshot \u003d fromSnapshot;\n     Snapshot laterSnapshot \u003d toSnapshot;\n-    if (fromSnapshot \u003d\u003d null\n-        || (toSnapshot !\u003d null \u0026\u0026 Snapshot.ID_COMPARATOR.compare(fromSnapshot,\n-            toSnapshot) \u003e 0)) {\n+    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n       earlierSnapshot \u003d toSnapshot;\n       laterSnapshot \u003d fromSnapshot;\n     }\n     \n+    boolean modified \u003d diffs.changedBetweenSnapshots(earlierSnapshot,\n+        laterSnapshot);\n+    if (!modified) {\n+      return false;\n+    }\n+    \n     final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n     final int size \u003d difflist.size();\n     int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlierSnapshot);\n-    if (earlierDiffIndex \u003c 0 \u0026\u0026 (-earlierDiffIndex - 1) \u003d\u003d size) {\n-      // if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,\n-      // no modification happened after the earlierSnapshot\n-      return false;\n-    }\n-    int laterDiffIndex \u003d size;\n-    if (laterSnapshot !\u003d null) {\n-      laterDiffIndex \u003d Collections.binarySearch(difflist, laterSnapshot);\n-      if (laterDiffIndex \u003d\u003d -1 || laterDiffIndex \u003d\u003d 0) {\n-        // if the endSnapshot is the earliest SnapshotDiff stored in\n-        // diffs, or before it, no modification happened before the endSnapshot\n-        return false;\n-      }\n-    }\n-    \n+    int laterDiffIndex \u003d laterSnapshot \u003d\u003d null ? size : Collections\n+        .binarySearch(difflist, laterSnapshot);\n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n+    \n     boolean dirMetadataChanged \u003d false;\n     INodeDirectory dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n       DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else {\n           if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n             dirMetadataChanged \u003d true;\n           }\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n       for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n         if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(this);\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff) {\n    Snapshot earlierSnapshot \u003d fromSnapshot;\n    Snapshot laterSnapshot \u003d toSnapshot;\n    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) \u003e 0) {\n      earlierSnapshot \u003d toSnapshot;\n      laterSnapshot \u003d fromSnapshot;\n    }\n    \n    boolean modified \u003d diffs.changedBetweenSnapshots(earlierSnapshot,\n        laterSnapshot);\n    if (!modified) {\n      return false;\n    }\n    \n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlierSnapshot);\n    int laterDiffIndex \u003d laterSnapshot \u003d\u003d null ? size : Collections\n        .binarySearch(difflist, laterSnapshot);\n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n    \n    boolean dirMetadataChanged \u003d false;\n    INodeDirectory dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else {\n          if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n            dirMetadataChanged \u003d true;\n          }\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(this);\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 3:25 PM",
      "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/01/13 1:31 PM",
      "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n       Snapshot toSnapshot, ChildrenDiff diff) {\n     Snapshot earlierSnapshot \u003d fromSnapshot;\n     Snapshot laterSnapshot \u003d toSnapshot;\n     if (fromSnapshot \u003d\u003d null\n         || (toSnapshot !\u003d null \u0026\u0026 Snapshot.ID_COMPARATOR.compare(fromSnapshot,\n             toSnapshot) \u003e 0)) {\n       earlierSnapshot \u003d toSnapshot;\n       laterSnapshot \u003d fromSnapshot;\n     }\n     \n-    int earlierDiffIndex \u003d Collections.binarySearch(diffs, earlierSnapshot);\n-    if (earlierDiffIndex \u003c 0 \u0026\u0026 (-earlierDiffIndex - 1) \u003d\u003d diffs.size()) {\n+    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n+    final int size \u003d difflist.size();\n+    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlierSnapshot);\n+    if (earlierDiffIndex \u003c 0 \u0026\u0026 (-earlierDiffIndex - 1) \u003d\u003d size) {\n       // if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,\n       // no modification happened after the earlierSnapshot\n       return false;\n     }\n-    int laterDiffIndex \u003d diffs.size();\n+    int laterDiffIndex \u003d size;\n     if (laterSnapshot !\u003d null) {\n-      laterDiffIndex \u003d Collections.binarySearch(diffs, laterSnapshot);\n+      laterDiffIndex \u003d Collections.binarySearch(difflist, laterSnapshot);\n       if (laterDiffIndex \u003d\u003d -1 || laterDiffIndex \u003d\u003d 0) {\n         // if the endSnapshot is the earliest SnapshotDiff stored in\n         // diffs, or before it, no modification happened before the endSnapshot\n         return false;\n       }\n     }\n     \n     earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n         : earlierDiffIndex;\n     laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n         : laterDiffIndex;\n     boolean dirMetadataChanged \u003d false;\n     INodeDirectory dirCopy \u003d null;\n     for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n-      SnapshotDiff sdiff \u003d diffs.get(i);\n+      DirectoryDiff sdiff \u003d difflist.get(i);\n       diff.combinePosterior(sdiff.diff, null);\n       if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n         if (dirCopy \u003d\u003d null) {\n           dirCopy \u003d sdiff.snapshotINode;\n         } else {\n           if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n             dirMetadataChanged \u003d true;\n           }\n         }\n       }\n     }\n \n     if (!diff.isEmpty() || dirMetadataChanged) {\n       return true;\n     } else if (dirCopy !\u003d null) {\n-      for (int i \u003d laterDiffIndex; i \u003c diffs.size(); i++) {\n-        if (diffs.get(i).snapshotINode !\u003d null\n-            \u0026\u0026 !dirCopy.metadataEquals(diffs.get(i).snapshotINode)) {\n+      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n+        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n           return true;\n         }\n       }\n       return !dirCopy.metadataEquals(this);\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff) {\n    Snapshot earlierSnapshot \u003d fromSnapshot;\n    Snapshot laterSnapshot \u003d toSnapshot;\n    if (fromSnapshot \u003d\u003d null\n        || (toSnapshot !\u003d null \u0026\u0026 Snapshot.ID_COMPARATOR.compare(fromSnapshot,\n            toSnapshot) \u003e 0)) {\n      earlierSnapshot \u003d toSnapshot;\n      laterSnapshot \u003d fromSnapshot;\n    }\n    \n    final List\u003cDirectoryDiff\u003e difflist \u003d diffs.asList();\n    final int size \u003d difflist.size();\n    int earlierDiffIndex \u003d Collections.binarySearch(difflist, earlierSnapshot);\n    if (earlierDiffIndex \u003c 0 \u0026\u0026 (-earlierDiffIndex - 1) \u003d\u003d size) {\n      // if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,\n      // no modification happened after the earlierSnapshot\n      return false;\n    }\n    int laterDiffIndex \u003d size;\n    if (laterSnapshot !\u003d null) {\n      laterDiffIndex \u003d Collections.binarySearch(difflist, laterSnapshot);\n      if (laterDiffIndex \u003d\u003d -1 || laterDiffIndex \u003d\u003d 0) {\n        // if the endSnapshot is the earliest SnapshotDiff stored in\n        // diffs, or before it, no modification happened before the endSnapshot\n        return false;\n      }\n    }\n    \n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectory dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      DirectoryDiff sdiff \u003d difflist.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else {\n          if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n            dirMetadataChanged \u003d true;\n          }\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c size; i++) {\n        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(this);\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "66ea187228c899cadf23d10c7032c8efe1aa0df4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4131. Add capability to namenode to get snapshot diff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440152 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 1:31 PM",
      "commitName": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,60 @@\n+  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n+      Snapshot toSnapshot, ChildrenDiff diff) {\n+    Snapshot earlierSnapshot \u003d fromSnapshot;\n+    Snapshot laterSnapshot \u003d toSnapshot;\n+    if (fromSnapshot \u003d\u003d null\n+        || (toSnapshot !\u003d null \u0026\u0026 Snapshot.ID_COMPARATOR.compare(fromSnapshot,\n+            toSnapshot) \u003e 0)) {\n+      earlierSnapshot \u003d toSnapshot;\n+      laterSnapshot \u003d fromSnapshot;\n+    }\n+    \n+    int earlierDiffIndex \u003d Collections.binarySearch(diffs, earlierSnapshot);\n+    if (earlierDiffIndex \u003c 0 \u0026\u0026 (-earlierDiffIndex - 1) \u003d\u003d diffs.size()) {\n+      // if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,\n+      // no modification happened after the earlierSnapshot\n+      return false;\n+    }\n+    int laterDiffIndex \u003d diffs.size();\n+    if (laterSnapshot !\u003d null) {\n+      laterDiffIndex \u003d Collections.binarySearch(diffs, laterSnapshot);\n+      if (laterDiffIndex \u003d\u003d -1 || laterDiffIndex \u003d\u003d 0) {\n+        // if the endSnapshot is the earliest SnapshotDiff stored in\n+        // diffs, or before it, no modification happened before the endSnapshot\n+        return false;\n+      }\n+    }\n+    \n+    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n+        : earlierDiffIndex;\n+    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n+        : laterDiffIndex;\n+    boolean dirMetadataChanged \u003d false;\n+    INodeDirectory dirCopy \u003d null;\n+    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n+      SnapshotDiff sdiff \u003d diffs.get(i);\n+      diff.combinePosterior(sdiff.diff, null);\n+      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n+        if (dirCopy \u003d\u003d null) {\n+          dirCopy \u003d sdiff.snapshotINode;\n+        } else {\n+          if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n+            dirMetadataChanged \u003d true;\n+          }\n+        }\n+      }\n+    }\n+\n+    if (!diff.isEmpty() || dirMetadataChanged) {\n+      return true;\n+    } else if (dirCopy !\u003d null) {\n+      for (int i \u003d laterDiffIndex; i \u003c diffs.size(); i++) {\n+        if (diffs.get(i).snapshotINode !\u003d null\n+            \u0026\u0026 !dirCopy.metadataEquals(diffs.get(i).snapshotINode)) {\n+          return true;\n+        }\n+      }\n+      return !dirCopy.metadataEquals(this);\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,\n      Snapshot toSnapshot, ChildrenDiff diff) {\n    Snapshot earlierSnapshot \u003d fromSnapshot;\n    Snapshot laterSnapshot \u003d toSnapshot;\n    if (fromSnapshot \u003d\u003d null\n        || (toSnapshot !\u003d null \u0026\u0026 Snapshot.ID_COMPARATOR.compare(fromSnapshot,\n            toSnapshot) \u003e 0)) {\n      earlierSnapshot \u003d toSnapshot;\n      laterSnapshot \u003d fromSnapshot;\n    }\n    \n    int earlierDiffIndex \u003d Collections.binarySearch(diffs, earlierSnapshot);\n    if (earlierDiffIndex \u003c 0 \u0026\u0026 (-earlierDiffIndex - 1) \u003d\u003d diffs.size()) {\n      // if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,\n      // no modification happened after the earlierSnapshot\n      return false;\n    }\n    int laterDiffIndex \u003d diffs.size();\n    if (laterSnapshot !\u003d null) {\n      laterDiffIndex \u003d Collections.binarySearch(diffs, laterSnapshot);\n      if (laterDiffIndex \u003d\u003d -1 || laterDiffIndex \u003d\u003d 0) {\n        // if the endSnapshot is the earliest SnapshotDiff stored in\n        // diffs, or before it, no modification happened before the endSnapshot\n        return false;\n      }\n    }\n    \n    earlierDiffIndex \u003d earlierDiffIndex \u003c 0 ? (-earlierDiffIndex - 1)\n        : earlierDiffIndex;\n    laterDiffIndex \u003d laterDiffIndex \u003c 0 ? (-laterDiffIndex - 1)\n        : laterDiffIndex;\n    boolean dirMetadataChanged \u003d false;\n    INodeDirectory dirCopy \u003d null;\n    for (int i \u003d earlierDiffIndex; i \u003c laterDiffIndex; i++) {\n      SnapshotDiff sdiff \u003d diffs.get(i);\n      diff.combinePosterior(sdiff.diff, null);\n      if (dirMetadataChanged \u003d\u003d false \u0026\u0026 sdiff.snapshotINode !\u003d null) {\n        if (dirCopy \u003d\u003d null) {\n          dirCopy \u003d sdiff.snapshotINode;\n        } else {\n          if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {\n            dirMetadataChanged \u003d true;\n          }\n        }\n      }\n    }\n\n    if (!diff.isEmpty() || dirMetadataChanged) {\n      return true;\n    } else if (dirCopy !\u003d null) {\n      for (int i \u003d laterDiffIndex; i \u003c diffs.size(); i++) {\n        if (diffs.get(i).snapshotINode !\u003d null\n            \u0026\u0026 !dirCopy.metadataEquals(diffs.get(i).snapshotINode)) {\n          return true;\n        }\n      }\n      return !dirCopy.metadataEquals(this);\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}