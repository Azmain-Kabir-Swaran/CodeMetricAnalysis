{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Resources.java",
  "functionName": "initResourceMap",
  "functionId": "initResourceMap",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
  "functionStartLine": 180,
  "functionEndLine": 189,
  "numCommitsSeen": 44,
  "timeTaken": 3722,
  "changeHistory": [
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "239c1824a07fede71dd751ed2c1f40036b22170e",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137"
  ],
  "changeHistoryShort": {
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "239c1824a07fede71dd751ed2c1f40036b22170e": "Ybodychange",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": "Ybodychange",
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1": "Ybodychange",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,10 @@\n     private void initResourceMap() {\n       ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n       if (types !\u003d null) {\n         resources \u003d new ResourceInformation[types.length];\n-        readOnlyResources \u003d new ResourceInformation[types.length];\n         for (int index \u003d 0; index \u003c types.length; index++) {\n           resources[index] \u003d ResourceInformation.newInstance(types[index]);\n           resources[index].setValue(resourceValue);\n-\n-          // this is a fix for getVirtualCores returning an int\n-          if (resourceValue \u003e Integer.MAX_VALUE \u0026\u0026 ResourceInformation.VCORES\n-              .getName().equals(resources[index].getName())) {\n-            resources[index].setValue((long) Integer.MAX_VALUE);\n-          }\n         }\n       }\n-      readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initResourceMap() {\n      ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n      if (types !\u003d null) {\n        resources \u003d new ResourceInformation[types.length];\n        for (int index \u003d 0; index \u003c types.length; index++) {\n          resources[index] \u003d ResourceInformation.newInstance(types[index]);\n          resources[index].setValue(resourceValue);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n-    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n-      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n-      Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n+    private void initResourceMap() {\n+      ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n       if (types !\u003d null) {\n-        for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n-          tmp.put(entry.getKey(),\n-              ResourceInformation.newInstance(entry.getValue()));\n-          tmp.get(entry.getKey()).setValue(resourceValue);\n+        resources \u003d new ResourceInformation[types.length];\n+        readOnlyResources \u003d new ResourceInformation[types.length];\n+        for (int index \u003d 0; index \u003c types.length; index++) {\n+          resources[index] \u003d ResourceInformation.newInstance(types[index]);\n+          resources[index].setValue(resourceValue);\n+\n+          // this is a fix for getVirtualCores returning an int\n+          if (resourceValue \u003e Integer.MAX_VALUE \u0026\u0026 ResourceInformation.VCORES\n+              .getName().equals(resources[index].getName())) {\n+            resources[index].setValue((long) Integer.MAX_VALUE);\n+          }\n         }\n       }\n-      // this is a fix for getVirtualCores returning an int\n-      if (resourceValue \u003e Integer.MAX_VALUE) {\n-        tmp.get(ResourceInformation.VCORES.getName())\n-            .setValue((long) Integer.MAX_VALUE);\n-      }\n-      return tmp;\n+      readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void initResourceMap() {\n      ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n      if (types !\u003d null) {\n        resources \u003d new ResourceInformation[types.length];\n        readOnlyResources \u003d new ResourceInformation[types.length];\n        for (int index \u003d 0; index \u003c types.length; index++) {\n          resources[index] \u003d ResourceInformation.newInstance(types[index]);\n          resources[index].setValue(resourceValue);\n\n          // this is a fix for getVirtualCores returning an int\n          if (resourceValue \u003e Integer.MAX_VALUE \u0026\u0026 ResourceInformation.VCORES\n              .getName().equals(resources[index].getName())) {\n            resources[index].setValue((long) Integer.MAX_VALUE);\n          }\n        }\n      }\n      readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
          "extendedDetails": {
            "oldValue": "Map\u003cString,ResourceInformation\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n-    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n-      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n-      Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n+    private void initResourceMap() {\n+      ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n       if (types !\u003d null) {\n-        for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n-          tmp.put(entry.getKey(),\n-              ResourceInformation.newInstance(entry.getValue()));\n-          tmp.get(entry.getKey()).setValue(resourceValue);\n+        resources \u003d new ResourceInformation[types.length];\n+        readOnlyResources \u003d new ResourceInformation[types.length];\n+        for (int index \u003d 0; index \u003c types.length; index++) {\n+          resources[index] \u003d ResourceInformation.newInstance(types[index]);\n+          resources[index].setValue(resourceValue);\n+\n+          // this is a fix for getVirtualCores returning an int\n+          if (resourceValue \u003e Integer.MAX_VALUE \u0026\u0026 ResourceInformation.VCORES\n+              .getName().equals(resources[index].getName())) {\n+            resources[index].setValue((long) Integer.MAX_VALUE);\n+          }\n         }\n       }\n-      // this is a fix for getVirtualCores returning an int\n-      if (resourceValue \u003e Integer.MAX_VALUE) {\n-        tmp.get(ResourceInformation.VCORES.getName())\n-            .setValue((long) Integer.MAX_VALUE);\n-      }\n-      return tmp;\n+      readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void initResourceMap() {\n      ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n      if (types !\u003d null) {\n        resources \u003d new ResourceInformation[types.length];\n        readOnlyResources \u003d new ResourceInformation[types.length];\n        for (int index \u003d 0; index \u003c types.length; index++) {\n          resources[index] \u003d ResourceInformation.newInstance(types[index]);\n          resources[index].setValue(resourceValue);\n\n          // this is a fix for getVirtualCores returning an int\n          if (resourceValue \u003e Integer.MAX_VALUE \u0026\u0026 ResourceInformation.VCORES\n              .getName().equals(resources[index].getName())) {\n            resources[index].setValue((long) Integer.MAX_VALUE);\n          }\n        }\n      }\n      readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
          "extendedDetails": {}
        }
      ]
    },
    "239c1824a07fede71dd751ed2c1f40036b22170e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5586. Update the Resources class to consider all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,17 @@\n     private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n       Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n       Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n       if (types !\u003d null) {\n         for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n           tmp.put(entry.getKey(),\n               ResourceInformation.newInstance(entry.getValue()));\n           tmp.get(entry.getKey()).setValue(resourceValue);\n         }\n       }\n+      // this is a fix for getVirtualCores returning an int\n+      if (resourceValue \u003e Integer.MAX_VALUE) {\n+        tmp.get(ResourceInformation.VCORES.getName())\n+            .setValue((long) Integer.MAX_VALUE);\n+      }\n       return tmp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n      Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n      if (types !\u003d null) {\n        for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n          tmp.put(entry.getKey(),\n              ResourceInformation.newInstance(entry.getValue()));\n          tmp.get(entry.getKey()).setValue(resourceValue);\n        }\n      }\n      // this is a fix for getVirtualCores returning an int\n      if (resourceValue \u003e Integer.MAX_VALUE) {\n        tmp.get(ResourceInformation.VCORES.getName())\n            .setValue((long) Integer.MAX_VALUE);\n      }\n      return tmp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
      "extendedDetails": {}
    },
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5242. Update DominantResourceCalculator to consider all resource types in calculations. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,12 @@\n     private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n       Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n-      // Due to backwards compat, the max value for memory and vcores\n-      // needs to be Integer.MAX_VALUE\n-      int max \u003d resourceValue \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE :\n-          resourceValue.intValue();\n       Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n       if (types !\u003d null) {\n         for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n           tmp.put(entry.getKey(),\n               ResourceInformation.newInstance(entry.getValue()));\n-          tmp.get(entry.getKey()).setValue((long) max);\n+          tmp.get(entry.getKey()).setValue(resourceValue);\n         }\n       }\n       return tmp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n      Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n      if (types !\u003d null) {\n        for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n          tmp.put(entry.getKey(),\n              ResourceInformation.newInstance(entry.getValue()));\n          tmp.get(entry.getKey()).setValue(resourceValue);\n        }\n      }\n      return tmp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
      "extendedDetails": {}
    },
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4715. Add support to read resource types from a config file. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,16 @@\n     private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n       Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n       // Due to backwards compat, the max value for memory and vcores\n       // needs to be Integer.MAX_VALUE\n       int max \u003d resourceValue \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE :\n           resourceValue.intValue();\n-      tmp.put(ResourceInformation.MEMORY.getName(), ResourceInformation\n-          .newInstance(ResourceInformation.MEMORY.getName(),\n-              ResourceInformation.MEMORY_MB.getUnits(), (long) max));\n-      tmp.put(ResourceInformation.VCORES.getName(), ResourceInformation\n-          .newInstance(ResourceInformation.VCORES.getName(), (long) max));\n+      Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n+      if (types !\u003d null) {\n+        for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n+          tmp.put(entry.getKey(),\n+              ResourceInformation.newInstance(entry.getValue()));\n+          tmp.get(entry.getKey()).setValue((long) max);\n+        }\n+      }\n       return tmp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n      // Due to backwards compat, the max value for memory and vcores\n      // needs to be Integer.MAX_VALUE\n      int max \u003d resourceValue \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE :\n          resourceValue.intValue();\n      Map\u003cString, ResourceInformation\u003e types \u003d ResourceUtils.getResourceTypes();\n      if (types !\u003d null) {\n        for (Map.Entry\u003cString, ResourceInformation\u003e entry : types.entrySet()) {\n          tmp.put(entry.getKey(),\n              ResourceInformation.newInstance(entry.getValue()));\n          tmp.get(entry.getKey()).setValue((long) max);\n        }\n      }\n      return tmp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java",
      "extendedDetails": {}
    },
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,13 @@\n+    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n+      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n+      // Due to backwards compat, the max value for memory and vcores\n+      // needs to be Integer.MAX_VALUE\n+      int max \u003d resourceValue \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE :\n+          resourceValue.intValue();\n+      tmp.put(ResourceInformation.MEMORY.getName(), ResourceInformation\n+          .newInstance(ResourceInformation.MEMORY.getName(),\n+              ResourceInformation.MEMORY_MB.getUnits(), (long) max));\n+      tmp.put(ResourceInformation.VCORES.getName(), ResourceInformation\n+          .newInstance(ResourceInformation.VCORES.getName(), (long) max));\n+      return tmp;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Map\u003cString, ResourceInformation\u003e initResourceMap() {\n      Map\u003cString, ResourceInformation\u003e tmp \u003d new HashMap\u003c\u003e();\n      // Due to backwards compat, the max value for memory and vcores\n      // needs to be Integer.MAX_VALUE\n      int max \u003d resourceValue \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE :\n          resourceValue.intValue();\n      tmp.put(ResourceInformation.MEMORY.getName(), ResourceInformation\n          .newInstance(ResourceInformation.MEMORY.getName(),\n              ResourceInformation.MEMORY_MB.getUnits(), (long) max));\n      tmp.put(ResourceInformation.VCORES.getName(), ResourceInformation\n          .newInstance(ResourceInformation.VCORES.getName(), (long) max));\n      return tmp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java"
    }
  }
}