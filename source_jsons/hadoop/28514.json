{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppBlock.java",
  "functionName": "generateApplicationTable",
  "functionId": "generateApplicationTable___html-Block__callerUGI-UserGroupInformation__attempts-Collection__ApplicationAttemptReport__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
  "functionStartLine": 292,
  "functionEndLine": 371,
  "numCommitsSeen": 37,
  "timeTaken": 2952,
  "changeHistory": [
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "722ee841948db1f246f0056acec9a1ac464fe1f9",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "3cd02b95224e9d43fd63a4ef9ac5c44f113f710d",
    "7faae0e6fe027a3886d9f4e290b6a488a2c55b3a",
    "1fa8075794894b3e0053d251788277fb88e85533",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6"
  ],
  "changeHistoryShort": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "722ee841948db1f246f0056acec9a1ac464fe1f9": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "3cd02b95224e9d43fd63a4ef9ac5c44f113f710d": "Ybodychange",
    "7faae0e6fe027a3886d9f4e290b6a488a2c55b3a": "Ybodychange",
    "1fa8075794894b3e0053d251788277fb88e85533": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "17/04/18 11:15 AM",
      "commitNameOld": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 55.89,
      "commitsBetweenForRepo": 937,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           .__().__().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         final GetContainerReportRequest request \u003d\n                 GetContainerReportRequest.newInstance(\n                       appAttemptReport.getAMContainerId());\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               getContainerReport(request);\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               if (request.getContainerId() !\u003d null) {\n                   try {\n                     report \u003d getContainerReport(request);\n                   } catch (ContainerNotFoundException ex) {\n                     LOG.warn(ex.getMessage());\n                   }\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p().__(message).__();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n-            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n+            .escapeEcmaScript(StringEscapeUtils.escapeHtml4(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          .__().__().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        final GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(\n                      appAttemptReport.getAMContainerId());\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              getContainerReport(request);\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              if (request.getContainerId() !\u003d null) {\n                  try {\n                    report \u003d getContainerReport(request);\n                  } catch (ContainerNotFoundException ex) {\n                    LOG.warn(ex.getMessage());\n                  }\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p().__(message).__();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeEcmaScript(StringEscapeUtils.escapeHtml4(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "722ee841948db1f246f0056acec9a1ac464fe1f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7163. RMContext need not to be injected to webapp and other Always Running services. Contributed by Rohith Sharma K S.\n",
      "commitDate": "10/09/17 9:58 PM",
      "commitName": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/09/17 12:46 AM",
      "commitNameOld": "6f101e7df10d477cf7469f6979d0cb8269315a3e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 3.88,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,80 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           .__().__().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         final GetContainerReportRequest request \u003d\n                 GetContainerReportRequest.newInstance(\n                       appAttemptReport.getAMContainerId());\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n-              appBaseProt.getContainerReport(request).getContainerReport();\n+              getContainerReport(request);\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               if (request.getContainerId() !\u003d null) {\n                   try {\n-                    report \u003d appBaseProt.getContainerReport(request)\n-                        .getContainerReport();\n+                    report \u003d getContainerReport(request);\n                   } catch (ContainerNotFoundException ex) {\n                     LOG.warn(ex.getMessage());\n                   }\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p().__(message).__();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          .__().__().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        final GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(\n                      appAttemptReport.getAMContainerId());\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              getContainerReport(request);\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              if (request.getContainerId() !\u003d null) {\n                  try {\n                    report \u003d getContainerReport(request);\n                  } catch (ContainerNotFoundException ex) {\n                    LOG.warn(ex.getMessage());\n                  }\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p().__(message).__();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/02/17 6:34 PM",
      "commitNameOld": "172b23af33554b7d58fd41b022d983bcc2433da7",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 158.9,
      "commitsBetweenForRepo": 845,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n-          ._()._().tbody();\n+          .__().__().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         final GetContainerReportRequest request \u003d\n                 GetContainerReportRequest.newInstance(\n                       appAttemptReport.getAMContainerId());\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               if (request.getContainerId() !\u003d null) {\n                   try {\n                     report \u003d appBaseProt.getContainerReport(request)\n                         .getContainerReport();\n                   } catch (ContainerNotFoundException ex) {\n                     LOG.warn(ex.getMessage());\n                   }\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n-        html.p()._(message)._();\n+        html.p().__(message).__();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n-      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+      .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n-    tbody._()._();\n+    tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          .__().__().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        final GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(\n                      appAttemptReport.getAMContainerId());\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              if (request.getContainerId() !\u003d null) {\n                  try {\n                    report \u003d appBaseProt.getContainerReport(request)\n                        .getContainerReport();\n                  } catch (ContainerNotFoundException ex) {\n                    LOG.warn(ex.getMessage());\n                  }\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p().__(message).__();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "3cd02b95224e9d43fd63a4ef9ac5c44f113f710d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3978. Configurably turn off the saving of container info in Generic AHS (Eric Payne via jeagles)\n",
      "commitDate": "03/08/15 8:38 AM",
      "commitName": "3cd02b95224e9d43fd63a4ef9ac5c44f113f710d",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "17/07/15 9:02 AM",
      "commitNameOld": "7faae0e6fe027a3886d9f4e290b6a488a2c55b3a",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,81 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         final GetContainerReportRequest request \u003d\n                 GetContainerReportRequest.newInstance(\n                       appAttemptReport.getAMContainerId());\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n-              try {\n-                report \u003d appBaseProt.getContainerReport(request)\n-                    .getContainerReport();\n-              } catch (ContainerNotFoundException ex) {\n-                LOG.warn(ex.getMessage());\n+              if (request.getContainerId() !\u003d null) {\n+                  try {\n+                    report \u003d appBaseProt.getContainerReport(request)\n+                        .getContainerReport();\n+                  } catch (ContainerNotFoundException ex) {\n+                    LOG.warn(ex.getMessage());\n+                  }\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        final GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(\n                      appAttemptReport.getAMContainerId());\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              if (request.getContainerId() !\u003d null) {\n                  try {\n                    report \u003d appBaseProt.getContainerReport(request)\n                        .getContainerReport();\n                  } catch (ContainerNotFoundException ex) {\n                    LOG.warn(ex.getMessage());\n                  }\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "7faae0e6fe027a3886d9f4e290b6a488a2c55b3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3905. Application History Server UI NPEs when accessing apps run after RM restart (Eric Payne via jeagles)\n",
      "commitDate": "17/07/15 9:02 AM",
      "commitName": "7faae0e6fe027a3886d9f4e290b6a488a2c55b3a",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "14/05/15 10:58 AM",
      "commitNameOld": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 63.92,
      "commitsBetweenForRepo": 436,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,79 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n-        // AM container is always the first container of the attempt\n         final GetContainerReportRequest request \u003d\n-            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n-              appAttemptReport.getApplicationAttemptId(), 1));\n+                GetContainerReportRequest.newInstance(\n+                      appAttemptReport.getAMContainerId());\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               try {\n                 report \u003d appBaseProt.getContainerReport(request)\n                     .getContainerReport();\n               } catch (ContainerNotFoundException ex) {\n                 LOG.warn(ex.getMessage());\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        final GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(\n                      appAttemptReport.getAMContainerId());\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "1fa8075794894b3e0053d251788277fb88e85533": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6300. Task list sort by task id broken. Contributed by Siqi Li.\n",
      "commitDate": "16/04/15 8:04 AM",
      "commitName": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "15/04/15 1:52 PM",
      "commitNameOld": "b2e6cf607f1712d103520ca6b3ff21ecc07cd265",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,80 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         // AM container is always the first container of the attempt\n         final GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n               appAttemptReport.getApplicationAttemptId(), 1));\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               try {\n                 report \u003d appBaseProt.getContainerReport(request)\n                     .getContainerReport();\n               } catch (ContainerNotFoundException ex) {\n                 LOG.warn(ex.getMessage());\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n-      // AppAttemptID numerical value parsed by parseHadoopID in\n-      // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n              appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,82 @@\n+  protected void generateApplicationTable(Block html,\n+      UserGroupInformation callerUGI,\n+      Collection\u003cApplicationAttemptReport\u003e attempts) {\n+    // Application Attempt Table\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n+          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n+          ._()._().tbody();\n+\n+    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n+    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n+      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n+      ContainerReport containerReport;\n+      try {\n+        // AM container is always the first container of the attempt\n+        final GetContainerReportRequest request \u003d\n+            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n+              appAttemptReport.getApplicationAttemptId(), 1));\n+        if (callerUGI \u003d\u003d null) {\n+          containerReport \u003d\n+              appBaseProt.getContainerReport(request).getContainerReport();\n+        } else {\n+          containerReport \u003d callerUGI.doAs(\n+              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n+            @Override\n+            public ContainerReport run() throws Exception {\n+              ContainerReport report \u003d null;\n+              try {\n+                report \u003d appBaseProt.getContainerReport(request)\n+                    .getContainerReport();\n+              } catch (ContainerNotFoundException ex) {\n+                LOG.warn(ex.getMessage());\n+              }\n+              return report;\n+            }\n+          });\n+        }\n+      } catch (Exception e) {\n+        String message \u003d\n+            \"Failed to read the AM container of the application attempt \"\n+                + appAttemptReport.getApplicationAttemptId() + \".\";\n+        LOG.error(message, e);\n+        html.p()._(message)._();\n+        return;\n+      }\n+      long startTime \u003d 0L;\n+      String logsLink \u003d null;\n+      String nodeLink \u003d null;\n+      if (containerReport !\u003d null) {\n+        ContainerInfo container \u003d new ContainerInfo(containerReport);\n+        startTime \u003d container.getStartedTime();\n+        logsLink \u003d containerReport.getLogUrl();\n+        nodeLink \u003d containerReport.getNodeHttpAddress();\n+      }\n+      // AppAttemptID numerical value parsed by parseHadoopID in\n+      // yarn.dt.plugins.js\n+      attemptsTableData\n+        .append(\"[\\\"\u003ca href\u003d\u0027\")\n+        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n+        .append(\"\u0027\u003e\")\n+        .append(appAttempt.getAppAttemptId())\n+        .append(\"\u003c/a\u003e\\\",\\\"\")\n+        .append(startTime)\n+        .append(\"\\\",\\\"\u003ca \")\n+        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n+        .append(\"\u0027\u003e\")\n+        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n+            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n+        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n+        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n+        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n+    }\n+    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      attemptsTableData.delete(attemptsTableData.length() - 2,\n+        attemptsTableData.length() - 1);\n+    }\n+    attemptsTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\")\n+      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n              appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java"
    }
  }
}