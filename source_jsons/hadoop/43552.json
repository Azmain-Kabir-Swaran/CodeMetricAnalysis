{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceMaster.java",
  "functionName": "doSecureLogin",
  "functionId": "doSecureLogin",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
  "functionStartLine": 173,
  "functionEndLine": 213,
  "numCommitsSeen": 11,
  "timeTaken": 1323,
  "changeHistory": [
    "7dd26d5378483cdbce1dc594e8650a96c2976281",
    "d30d57828fddaa8667de49af879cde999907c7f6"
  ],
  "changeHistoryShort": {
    "7dd26d5378483cdbce1dc594e8650a96c2976281": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7dd26d5378483cdbce1dc594e8650a96c2976281": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8308.  Fixed YARN Service AM failure with HDFS token renewal.\n            Contributed by Gour Saha\n",
      "commitDate": "31/05/18 6:09 PM",
      "commitName": "7dd26d5378483cdbce1dc594e8650a96c2976281",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/05/18 12:49 PM",
      "commitNameOld": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 20.22,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,41 @@\n   private void doSecureLogin()\n       throws IOException, URISyntaxException {\n     // read the localized keytab specified by user\n-    File keytab \u003d new File(String.format(KEYTAB_LOCATION,\n-        context.service.getName()));\n+    File keytab \u003d new File(String.format(KEYTAB_LOCATION, getServiceName()));\n     if (!keytab.exists()) {\n       LOG.info(\"No keytab localized at \" + keytab);\n       // Check if there exists a pre-installed keytab at host\n-      String preInstalledKeytab \u003d context.service.getKerberosPrincipal()\n-          .getKeytab();\n+      String preInstalledKeytab \u003d context.service \u003d\u003d null ? this.serviceKeytab\n+          : context.service.getKerberosPrincipal().getKeytab();\n       if (!StringUtils.isEmpty(preInstalledKeytab)) {\n         URI uri \u003d new URI(preInstalledKeytab);\n         if (uri.getScheme().equals(\"file\")) {\n           keytab \u003d new File(uri);\n           LOG.info(\"Using pre-installed keytab from localhost: \" +\n               preInstalledKeytab);\n         }\n       }\n     }\n     if (!keytab.exists()) {\n       LOG.info(\"No keytab exists: \" + keytab);\n       return;\n     }\n-    String principal \u003d context.service.getKerberosPrincipal()\n-        .getPrincipalName();\n+    String principal \u003d context.service \u003d\u003d null ? this.servicePrincipalName\n+        : context.service.getKerberosPrincipal().getPrincipalName();\n     if (StringUtils.isEmpty((principal))) {\n       principal \u003d UserGroupInformation.getLoginUser().getShortUserName();\n       LOG.info(\"No principal name specified.  Will use AM \" +\n           \"login identity {} to attempt keytab-based login\", principal);\n     }\n \n-    Credentials credentials \u003d UserGroupInformation.getCurrentUser()\n-        .getCredentials();\n     LOG.info(\"User before logged in is: \" + UserGroupInformation\n         .getCurrentUser());\n     String principalName \u003d SecurityUtil.getServerPrincipal(principal,\n         ServiceUtils.getLocalHostName(getConfig()));\n     UserGroupInformation.loginUserFromKeytab(principalName,\n         keytab.getAbsolutePath());\n-    // add back the credentials\n-    UserGroupInformation.getCurrentUser().addCredentials(credentials);\n     LOG.info(\"User after logged in is: \" + UserGroupInformation\n         .getCurrentUser());\n     context.principal \u003d principalName;\n     context.keytab \u003d keytab.getAbsolutePath();\n-    removeHdfsDelegationToken(UserGroupInformation.getLoginUser());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doSecureLogin()\n      throws IOException, URISyntaxException {\n    // read the localized keytab specified by user\n    File keytab \u003d new File(String.format(KEYTAB_LOCATION, getServiceName()));\n    if (!keytab.exists()) {\n      LOG.info(\"No keytab localized at \" + keytab);\n      // Check if there exists a pre-installed keytab at host\n      String preInstalledKeytab \u003d context.service \u003d\u003d null ? this.serviceKeytab\n          : context.service.getKerberosPrincipal().getKeytab();\n      if (!StringUtils.isEmpty(preInstalledKeytab)) {\n        URI uri \u003d new URI(preInstalledKeytab);\n        if (uri.getScheme().equals(\"file\")) {\n          keytab \u003d new File(uri);\n          LOG.info(\"Using pre-installed keytab from localhost: \" +\n              preInstalledKeytab);\n        }\n      }\n    }\n    if (!keytab.exists()) {\n      LOG.info(\"No keytab exists: \" + keytab);\n      return;\n    }\n    String principal \u003d context.service \u003d\u003d null ? this.servicePrincipalName\n        : context.service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty((principal))) {\n      principal \u003d UserGroupInformation.getLoginUser().getShortUserName();\n      LOG.info(\"No principal name specified.  Will use AM \" +\n          \"login identity {} to attempt keytab-based login\", principal);\n    }\n\n    LOG.info(\"User before logged in is: \" + UserGroupInformation\n        .getCurrentUser());\n    String principalName \u003d SecurityUtil.getServerPrincipal(principal,\n        ServiceUtils.getLocalHostName(getConfig()));\n    UserGroupInformation.loginUserFromKeytab(principalName,\n        keytab.getAbsolutePath());\n    LOG.info(\"User after logged in is: \" + UserGroupInformation\n        .getCurrentUser());\n    context.principal \u003d principalName;\n    context.keytab \u003d keytab.getAbsolutePath();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,47 @@\n+  private void doSecureLogin()\n+      throws IOException, URISyntaxException {\n+    // read the localized keytab specified by user\n+    File keytab \u003d new File(String.format(KEYTAB_LOCATION,\n+        context.service.getName()));\n+    if (!keytab.exists()) {\n+      LOG.info(\"No keytab localized at \" + keytab);\n+      // Check if there exists a pre-installed keytab at host\n+      String preInstalledKeytab \u003d context.service.getKerberosPrincipal()\n+          .getKeytab();\n+      if (!StringUtils.isEmpty(preInstalledKeytab)) {\n+        URI uri \u003d new URI(preInstalledKeytab);\n+        if (uri.getScheme().equals(\"file\")) {\n+          keytab \u003d new File(uri);\n+          LOG.info(\"Using pre-installed keytab from localhost: \" +\n+              preInstalledKeytab);\n+        }\n+      }\n+    }\n+    if (!keytab.exists()) {\n+      LOG.info(\"No keytab exists: \" + keytab);\n+      return;\n+    }\n+    String principal \u003d context.service.getKerberosPrincipal()\n+        .getPrincipalName();\n+    if (StringUtils.isEmpty((principal))) {\n+      principal \u003d UserGroupInformation.getLoginUser().getShortUserName();\n+      LOG.info(\"No principal name specified.  Will use AM \" +\n+          \"login identity {} to attempt keytab-based login\", principal);\n+    }\n+\n+    Credentials credentials \u003d UserGroupInformation.getCurrentUser()\n+        .getCredentials();\n+    LOG.info(\"User before logged in is: \" + UserGroupInformation\n+        .getCurrentUser());\n+    String principalName \u003d SecurityUtil.getServerPrincipal(principal,\n+        ServiceUtils.getLocalHostName(getConfig()));\n+    UserGroupInformation.loginUserFromKeytab(principalName,\n+        keytab.getAbsolutePath());\n+    // add back the credentials\n+    UserGroupInformation.getCurrentUser().addCredentials(credentials);\n+    LOG.info(\"User after logged in is: \" + UserGroupInformation\n+        .getCurrentUser());\n+    context.principal \u003d principalName;\n+    context.keytab \u003d keytab.getAbsolutePath();\n+    removeHdfsDelegationToken(UserGroupInformation.getLoginUser());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void doSecureLogin()\n      throws IOException, URISyntaxException {\n    // read the localized keytab specified by user\n    File keytab \u003d new File(String.format(KEYTAB_LOCATION,\n        context.service.getName()));\n    if (!keytab.exists()) {\n      LOG.info(\"No keytab localized at \" + keytab);\n      // Check if there exists a pre-installed keytab at host\n      String preInstalledKeytab \u003d context.service.getKerberosPrincipal()\n          .getKeytab();\n      if (!StringUtils.isEmpty(preInstalledKeytab)) {\n        URI uri \u003d new URI(preInstalledKeytab);\n        if (uri.getScheme().equals(\"file\")) {\n          keytab \u003d new File(uri);\n          LOG.info(\"Using pre-installed keytab from localhost: \" +\n              preInstalledKeytab);\n        }\n      }\n    }\n    if (!keytab.exists()) {\n      LOG.info(\"No keytab exists: \" + keytab);\n      return;\n    }\n    String principal \u003d context.service.getKerberosPrincipal()\n        .getPrincipalName();\n    if (StringUtils.isEmpty((principal))) {\n      principal \u003d UserGroupInformation.getLoginUser().getShortUserName();\n      LOG.info(\"No principal name specified.  Will use AM \" +\n          \"login identity {} to attempt keytab-based login\", principal);\n    }\n\n    Credentials credentials \u003d UserGroupInformation.getCurrentUser()\n        .getCredentials();\n    LOG.info(\"User before logged in is: \" + UserGroupInformation\n        .getCurrentUser());\n    String principalName \u003d SecurityUtil.getServerPrincipal(principal,\n        ServiceUtils.getLocalHostName(getConfig()));\n    UserGroupInformation.loginUserFromKeytab(principalName,\n        keytab.getAbsolutePath());\n    // add back the credentials\n    UserGroupInformation.getCurrentUser().addCredentials(credentials);\n    LOG.info(\"User after logged in is: \" + UserGroupInformation\n        .getCurrentUser());\n    context.principal \u003d principalName;\n    context.keytab \u003d keytab.getAbsolutePath();\n    removeHdfsDelegationToken(UserGroupInformation.getLoginUser());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java"
    }
  }
}