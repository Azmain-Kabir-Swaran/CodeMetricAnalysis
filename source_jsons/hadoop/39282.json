{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "doneApplicationAttempt",
  "functionId": "doneApplicationAttempt___applicationAttemptId-ApplicationAttemptId__rmAppAttemptFinalState-RMAppAttemptState__keepContainers-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1129,
  "functionEndLine": 1185,
  "numCommitsSeen": 363,
  "timeTaken": 15327,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ybodychange",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ybodychange",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ybodychange",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ybodychange",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ymultichange(Yparameterchange,Ybodychange)",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": "Yrename",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": "Yrename",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": "Yrename",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ybodychange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   private void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     writeLock.lock();\n     try {\n       LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n           + \" finalState\u003d\" + rmAppAttemptFinalState);\n \n       FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n \n       if (application \u003d\u003d null || attempt \u003d\u003d null) {\n         LOG.info(\n             \"Unknown application \" + applicationAttemptId + \" has completed!\");\n         return;\n       }\n \n       // Release all the allocated, acquired, running containers\n       for (RMContainer rmContainer : attempt.getLiveContainers()) {\n         if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n             RMContainerState.RUNNING)) {\n           // do not kill the running container in the case of work-preserving AM\n           // restart.\n           LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n           continue;\n         }\n         super.completedContainer(rmContainer, SchedulerUtils\n                 .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                     SchedulerUtils.COMPLETED_APPLICATION),\n             RMContainerEventType.KILL);\n       }\n \n       // Release all reserved containers\n       for (RMContainer rmContainer : attempt.getReservedContainers()) {\n         super.completedContainer(rmContainer, SchedulerUtils\n             .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                 \"Application Complete\"), RMContainerEventType.KILL);\n       }\n \n       // Clean up pending requests, metrics etc.\n       attempt.stop(rmAppAttemptFinalState);\n \n       // Inform the queue\n-      String queueName \u003d attempt.getQueue().getQueueName();\n-      CSQueue queue \u003d this.getQueue(queueName);\n-      if (!(queue instanceof LeafQueue)) {\n+      Queue  queue \u003d attempt.getQueue();\n+      CSQueue csQueue \u003d (CSQueue) queue;\n+      if (!(csQueue instanceof LeafQueue)) {\n         LOG.error(\n-            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n+            \"Cannot finish application \" + \"from non-leaf queue: \"\n+            + csQueue.getQueuePath());\n       } else{\n-        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n+        csQueue.finishApplicationAttempt(attempt, csQueue.getQueuePath());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    writeLock.lock();\n    try {\n      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n          + \" finalState\u003d\" + rmAppAttemptFinalState);\n\n      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n\n      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n        LOG.info(\n            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n        return;\n      }\n\n      // Release all the allocated, acquired, running containers\n      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n            RMContainerState.RUNNING)) {\n          // do not kill the running container in the case of work-preserving AM\n          // restart.\n          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n          continue;\n        }\n        super.completedContainer(rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.COMPLETED_APPLICATION),\n            RMContainerEventType.KILL);\n      }\n\n      // Release all reserved containers\n      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n        super.completedContainer(rmContainer, SchedulerUtils\n            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                \"Application Complete\"), RMContainerEventType.KILL);\n      }\n\n      // Clean up pending requests, metrics etc.\n      attempt.stop(rmAppAttemptFinalState);\n\n      // Inform the queue\n      Queue  queue \u003d attempt.getQueue();\n      CSQueue csQueue \u003d (CSQueue) queue;\n      if (!(csQueue instanceof LeafQueue)) {\n        LOG.error(\n            \"Cannot finish application \" + \"from non-leaf queue: \"\n            + csQueue.getQueuePath());\n      } else{\n        csQueue.finishApplicationAttempt(attempt, csQueue.getQueuePath());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   private void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n           + \" finalState\u003d\" + rmAppAttemptFinalState);\n \n       FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n \n       if (application \u003d\u003d null || attempt \u003d\u003d null) {\n         LOG.info(\n             \"Unknown application \" + applicationAttemptId + \" has completed!\");\n         return;\n       }\n \n       // Release all the allocated, acquired, running containers\n       for (RMContainer rmContainer : attempt.getLiveContainers()) {\n         if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n             RMContainerState.RUNNING)) {\n           // do not kill the running container in the case of work-preserving AM\n           // restart.\n           LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n           continue;\n         }\n         super.completedContainer(rmContainer, SchedulerUtils\n                 .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                     SchedulerUtils.COMPLETED_APPLICATION),\n             RMContainerEventType.KILL);\n       }\n \n       // Release all reserved containers\n       for (RMContainer rmContainer : attempt.getReservedContainers()) {\n         super.completedContainer(rmContainer, SchedulerUtils\n             .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                 \"Application Complete\"), RMContainerEventType.KILL);\n       }\n \n       // Clean up pending requests, metrics etc.\n       attempt.stop(rmAppAttemptFinalState);\n \n       // Inform the queue\n       String queueName \u003d attempt.getQueue().getQueueName();\n       CSQueue queue \u003d this.getQueue(queueName);\n       if (!(queue instanceof LeafQueue)) {\n         LOG.error(\n             \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n       } else{\n         queue.finishApplicationAttempt(attempt, queue.getQueueName());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    writeLock.lock();\n    try {\n      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n          + \" finalState\u003d\" + rmAppAttemptFinalState);\n\n      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n\n      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n        LOG.info(\n            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n        return;\n      }\n\n      // Release all the allocated, acquired, running containers\n      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n            RMContainerState.RUNNING)) {\n          // do not kill the running container in the case of work-preserving AM\n          // restart.\n          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n          continue;\n        }\n        super.completedContainer(rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.COMPLETED_APPLICATION),\n            RMContainerEventType.KILL);\n      }\n\n      // Release all reserved containers\n      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n        super.completedContainer(rmContainer, SchedulerUtils\n            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                \"Application Complete\"), RMContainerEventType.KILL);\n      }\n\n      // Clean up pending requests, metrics etc.\n      attempt.stop(rmAppAttemptFinalState);\n\n      // Inform the queue\n      String queueName \u003d attempt.getQueue().getQueueName();\n      CSQueue queue \u003d this.getQueue(queueName);\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\n            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n      } else{\n        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   private void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     try {\n       writeLock.lock();\n       LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n           + \" finalState\u003d\" + rmAppAttemptFinalState);\n \n       FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n \n       if (application \u003d\u003d null || attempt \u003d\u003d null) {\n         LOG.info(\n             \"Unknown application \" + applicationAttemptId + \" has completed!\");\n         return;\n       }\n \n       // Release all the allocated, acquired, running containers\n       for (RMContainer rmContainer : attempt.getLiveContainers()) {\n         if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n             RMContainerState.RUNNING)) {\n           // do not kill the running container in the case of work-preserving AM\n           // restart.\n           LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n           continue;\n         }\n         super.completedContainer(rmContainer, SchedulerUtils\n                 .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                     SchedulerUtils.COMPLETED_APPLICATION),\n             RMContainerEventType.KILL);\n       }\n \n       // Release all reserved containers\n       for (RMContainer rmContainer : attempt.getReservedContainers()) {\n         super.completedContainer(rmContainer, SchedulerUtils\n             .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                 \"Application Complete\"), RMContainerEventType.KILL);\n       }\n \n       // Clean up pending requests, metrics etc.\n       attempt.stop(rmAppAttemptFinalState);\n \n       // Inform the queue\n       String queueName \u003d attempt.getQueue().getQueueName();\n-      CSQueue queue \u003d queues.get(queueName);\n+      CSQueue queue \u003d this.getQueue(queueName);\n       if (!(queue instanceof LeafQueue)) {\n         LOG.error(\n             \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n       } else{\n         queue.finishApplicationAttempt(attempt, queue.getQueueName());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    try {\n      writeLock.lock();\n      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n          + \" finalState\u003d\" + rmAppAttemptFinalState);\n\n      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n\n      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n        LOG.info(\n            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n        return;\n      }\n\n      // Release all the allocated, acquired, running containers\n      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n            RMContainerState.RUNNING)) {\n          // do not kill the running container in the case of work-preserving AM\n          // restart.\n          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n          continue;\n        }\n        super.completedContainer(rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.COMPLETED_APPLICATION),\n            RMContainerEventType.KILL);\n      }\n\n      // Release all reserved containers\n      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n        super.completedContainer(rmContainer, SchedulerUtils\n            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                \"Application Complete\"), RMContainerEventType.KILL);\n      }\n\n      // Clean up pending requests, metrics etc.\n      attempt.stop(rmAppAttemptFinalState);\n\n      // Inform the queue\n      String queueName \u003d attempt.getQueue().getQueueName();\n      CSQueue queue \u003d this.getQueue(queueName);\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\n            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n      } else{\n        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,56 @@\n-  private synchronized void doneApplicationAttempt(\n+  private void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n-    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n-        \" finalState\u003d\" + rmAppAttemptFinalState);\n-    \n-    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        applications.get(applicationAttemptId.getApplicationId());\n+    try {\n+      writeLock.lock();\n+      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n+          + \" finalState\u003d\" + rmAppAttemptFinalState);\n \n-    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n-      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n-      return;\n-    }\n+      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n+          applicationAttemptId.getApplicationId());\n \n-    // Release all the allocated, acquired, running containers\n-    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n-      if (keepContainers\n-          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n-        // do not kill the running container in the case of work-preserving AM\n-        // restart.\n-        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n-        continue;\n+      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n+        LOG.info(\n+            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n+        return;\n       }\n-      super.completedContainer(\n-        rmContainer,\n-        SchedulerUtils.createAbnormalContainerStatus(\n-          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n-        RMContainerEventType.KILL);\n-    }\n \n-    // Release all reserved containers\n-    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      super.completedContainer(\n-        rmContainer,\n-        SchedulerUtils.createAbnormalContainerStatus(\n-          rmContainer.getContainerId(), \"Application Complete\"),\n-        RMContainerEventType.KILL);\n-    }\n+      // Release all the allocated, acquired, running containers\n+      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n+        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n+            RMContainerState.RUNNING)) {\n+          // do not kill the running container in the case of work-preserving AM\n+          // restart.\n+          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n+          continue;\n+        }\n+        super.completedContainer(rmContainer, SchedulerUtils\n+                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n+                    SchedulerUtils.COMPLETED_APPLICATION),\n+            RMContainerEventType.KILL);\n+      }\n \n-    // Clean up pending requests, metrics etc.\n-    attempt.stop(rmAppAttemptFinalState);\n+      // Release all reserved containers\n+      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n+        super.completedContainer(rmContainer, SchedulerUtils\n+            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n+                \"Application Complete\"), RMContainerEventType.KILL);\n+      }\n \n-    // Inform the queue\n-    String queueName \u003d attempt.getQueue().getQueueName();\n-    CSQueue queue \u003d queues.get(queueName);\n-    if (!(queue instanceof LeafQueue)) {\n-      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n-          + queueName);\n-    } else {\n-      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n+      // Clean up pending requests, metrics etc.\n+      attempt.stop(rmAppAttemptFinalState);\n+\n+      // Inform the queue\n+      String queueName \u003d attempt.getQueue().getQueueName();\n+      CSQueue queue \u003d queues.get(queueName);\n+      if (!(queue instanceof LeafQueue)) {\n+        LOG.error(\n+            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n+      } else{\n+        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    try {\n      writeLock.lock();\n      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n          + \" finalState\u003d\" + rmAppAttemptFinalState);\n\n      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n\n      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n        LOG.info(\n            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n        return;\n      }\n\n      // Release all the allocated, acquired, running containers\n      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n            RMContainerState.RUNNING)) {\n          // do not kill the running container in the case of work-preserving AM\n          // restart.\n          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n          continue;\n        }\n        super.completedContainer(rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.COMPLETED_APPLICATION),\n            RMContainerEventType.KILL);\n      }\n\n      // Release all reserved containers\n      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n        super.completedContainer(rmContainer, SchedulerUtils\n            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                \"Application Complete\"), RMContainerEventType.KILL);\n      }\n\n      // Clean up pending requests, metrics etc.\n      attempt.stop(rmAppAttemptFinalState);\n\n      // Inform the queue\n      String queueName \u003d attempt.getQueue().getQueueName();\n      CSQueue queue \u003d queues.get(queueName);\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\n            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n      } else{\n        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,56 @@\n-  private synchronized void doneApplicationAttempt(\n+  private void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n-    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n-        \" finalState\u003d\" + rmAppAttemptFinalState);\n-    \n-    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        applications.get(applicationAttemptId.getApplicationId());\n+    try {\n+      writeLock.lock();\n+      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n+          + \" finalState\u003d\" + rmAppAttemptFinalState);\n \n-    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n-      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n-      return;\n-    }\n+      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n+          applicationAttemptId.getApplicationId());\n \n-    // Release all the allocated, acquired, running containers\n-    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n-      if (keepContainers\n-          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n-        // do not kill the running container in the case of work-preserving AM\n-        // restart.\n-        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n-        continue;\n+      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n+        LOG.info(\n+            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n+        return;\n       }\n-      super.completedContainer(\n-        rmContainer,\n-        SchedulerUtils.createAbnormalContainerStatus(\n-          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n-        RMContainerEventType.KILL);\n-    }\n \n-    // Release all reserved containers\n-    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      super.completedContainer(\n-        rmContainer,\n-        SchedulerUtils.createAbnormalContainerStatus(\n-          rmContainer.getContainerId(), \"Application Complete\"),\n-        RMContainerEventType.KILL);\n-    }\n+      // Release all the allocated, acquired, running containers\n+      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n+        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n+            RMContainerState.RUNNING)) {\n+          // do not kill the running container in the case of work-preserving AM\n+          // restart.\n+          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n+          continue;\n+        }\n+        super.completedContainer(rmContainer, SchedulerUtils\n+                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n+                    SchedulerUtils.COMPLETED_APPLICATION),\n+            RMContainerEventType.KILL);\n+      }\n \n-    // Clean up pending requests, metrics etc.\n-    attempt.stop(rmAppAttemptFinalState);\n+      // Release all reserved containers\n+      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n+        super.completedContainer(rmContainer, SchedulerUtils\n+            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n+                \"Application Complete\"), RMContainerEventType.KILL);\n+      }\n \n-    // Inform the queue\n-    String queueName \u003d attempt.getQueue().getQueueName();\n-    CSQueue queue \u003d queues.get(queueName);\n-    if (!(queue instanceof LeafQueue)) {\n-      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n-          + queueName);\n-    } else {\n-      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n+      // Clean up pending requests, metrics etc.\n+      attempt.stop(rmAppAttemptFinalState);\n+\n+      // Inform the queue\n+      String queueName \u003d attempt.getQueue().getQueueName();\n+      CSQueue queue \u003d queues.get(queueName);\n+      if (!(queue instanceof LeafQueue)) {\n+        LOG.error(\n+            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n+      } else{\n+        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    try {\n      writeLock.lock();\n      LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\"\n          + \" finalState\u003d\" + rmAppAttemptFinalState);\n\n      FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n\n      if (application \u003d\u003d null || attempt \u003d\u003d null) {\n        LOG.info(\n            \"Unknown application \" + applicationAttemptId + \" has completed!\");\n        return;\n      }\n\n      // Release all the allocated, acquired, running containers\n      for (RMContainer rmContainer : attempt.getLiveContainers()) {\n        if (keepContainers \u0026\u0026 rmContainer.getState().equals(\n            RMContainerState.RUNNING)) {\n          // do not kill the running container in the case of work-preserving AM\n          // restart.\n          LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n          continue;\n        }\n        super.completedContainer(rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.COMPLETED_APPLICATION),\n            RMContainerEventType.KILL);\n      }\n\n      // Release all reserved containers\n      for (RMContainer rmContainer : attempt.getReservedContainers()) {\n        super.completedContainer(rmContainer, SchedulerUtils\n            .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                \"Application Complete\"), RMContainerEventType.KILL);\n      }\n\n      // Clean up pending requests, metrics etc.\n      attempt.stop(rmAppAttemptFinalState);\n\n      // Inform the queue\n      String queueName \u003d attempt.getQueue().getQueueName();\n      CSQueue queue \u003d queues.get(queueName);\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\n            \"Cannot finish application \" + \"from non-leaf queue: \" + queueName);\n      } else{\n        queue.finishApplicationAttempt(attempt, queue.getQueueName());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:27 PM",
      "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n         \" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n \n     if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n \n     // Release all the allocated, acquired, running containers\n     for (RMContainer rmContainer : attempt.getLiveContainers()) {\n       if (keepContainers\n           \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n         // do not kill the running container in the case of work-preserving AM\n         // restart.\n         LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n         continue;\n       }\n-      completedContainer(\n+      super.completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n         RMContainerEventType.KILL);\n     }\n \n     // Release all reserved containers\n     for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      completedContainer(\n+      super.completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), \"Application Complete\"),\n         RMContainerEventType.KILL);\n     }\n \n     // Clean up pending requests, metrics etc.\n     attempt.stop(rmAppAttemptFinalState);\n \n     // Inform the queue\n     String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n        \" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      super.completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      super.completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 1:06 AM",
      "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n         \" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n \n     if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n \n     // Release all the allocated, acquired, running containers\n     for (RMContainer rmContainer : attempt.getLiveContainers()) {\n       if (keepContainers\n           \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n         // do not kill the running container in the case of work-preserving AM\n         // restart.\n         LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n         continue;\n       }\n-      super.completedContainer(\n+      completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n         RMContainerEventType.KILL);\n     }\n \n     // Release all reserved containers\n     for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      super.completedContainer(\n+      completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), \"Application Complete\"),\n         RMContainerEventType.KILL);\n     }\n \n     // Clean up pending requests, metrics etc.\n     attempt.stop(rmAppAttemptFinalState);\n \n     // Inform the queue\n     String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n        \" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 12:50 AM",
      "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n         \" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n \n     if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n \n     // Release all the allocated, acquired, running containers\n     for (RMContainer rmContainer : attempt.getLiveContainers()) {\n       if (keepContainers\n           \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n         // do not kill the running container in the case of work-preserving AM\n         // restart.\n         LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n         continue;\n       }\n-      completedContainer(\n+      super.completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n         RMContainerEventType.KILL);\n     }\n \n     // Release all reserved containers\n     for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      completedContainer(\n+      super.completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), \"Application Complete\"),\n         RMContainerEventType.KILL);\n     }\n \n     // Clean up pending requests, metrics etc.\n     attempt.stop(rmAppAttemptFinalState);\n \n     // Inform the queue\n     String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n        \" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      super.completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      super.completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/01/16 7:04 PM",
      "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n         \" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n \n     if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n \n     // Release all the allocated, acquired, running containers\n     for (RMContainer rmContainer : attempt.getLiveContainers()) {\n       if (keepContainers\n           \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n         // do not kill the running container in the case of work-preserving AM\n         // restart.\n         LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n         continue;\n       }\n-      super.completedContainer(\n+      completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n         RMContainerEventType.KILL);\n     }\n \n     // Release all reserved containers\n     for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      super.completedContainer(\n+      completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), \"Application Complete\"),\n         RMContainerEventType.KILL);\n     }\n \n     // Clean up pending requests, metrics etc.\n     attempt.stop(rmAppAttemptFinalState);\n \n     // Inform the queue\n     String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n        \" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/01/16 9:18 PM",
      "commitNameOld": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.91,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n         \" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n \n     if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n \n     // Release all the allocated, acquired, running containers\n     for (RMContainer rmContainer : attempt.getLiveContainers()) {\n       if (keepContainers\n           \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n         // do not kill the running container in the case of work-preserving AM\n         // restart.\n         LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n         continue;\n       }\n-      completedContainer(\n+      super.completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n         RMContainerEventType.KILL);\n     }\n \n     // Release all reserved containers\n     for (RMContainer rmContainer : attempt.getReservedContainers()) {\n-      completedContainer(\n+      super.completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), \"Application Complete\"),\n         RMContainerEventType.KILL);\n     }\n \n     // Clean up pending requests, metrics etc.\n     attempt.stop(rmAppAttemptFinalState);\n \n     // Inform the queue\n     String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n        \" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      super.completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      super.completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 7:53 PM",
      "commitNameOld": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 65.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n-    SchedulerApplication application \u003d\n+    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n \n     if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n \n     // Release all the allocated, acquired, running containers\n     for (RMContainer rmContainer : attempt.getLiveContainers()) {\n       if (keepContainers\n           \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n         // do not kill the running container in the case of work-preserving AM\n         // restart.\n         LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n         continue;\n       }\n       completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n         RMContainerEventType.KILL);\n     }\n \n     // Release all reserved containers\n     for (RMContainer rmContainer : attempt.getReservedContainers()) {\n       completedContainer(\n         rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(\n           rmContainer.getContainerId(), \"Application Complete\"),\n         RMContainerEventType.KILL);\n     }\n \n     // Clean up pending requests, metrics etc.\n     attempt.stop(rmAppAttemptFinalState);\n \n     // Inform the queue\n     String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/01/14 7:04 AM",
          "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/01/14 12:19 PM",
          "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n-      RMAppAttemptState rmAppAttemptFinalState) {\n+      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n-    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n+    SchedulerApplication application \u003d\n+        applications.get(applicationAttemptId.getApplicationId());\n \n-    if (application \u003d\u003d null) {\n-      //      throw new IOException(\"Unknown application \" + applicationId + \n-      //          \" has completed!\");\n+    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n-    \n-    // Release all the running containers \n-    for (RMContainer rmContainer : application.getLiveContainers()) {\n-      completedContainer(rmContainer, \n-          SchedulerUtils.createAbnormalContainerStatus(\n-              rmContainer.getContainerId(), \n-              SchedulerUtils.COMPLETED_APPLICATION), \n-          RMContainerEventType.KILL);\n+\n+    // Release all the allocated, acquired, running containers\n+    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n+      if (keepContainers\n+          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n+        // do not kill the running container in the case of work-preserving AM\n+        // restart.\n+        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n+        continue;\n+      }\n+      completedContainer(\n+        rmContainer,\n+        SchedulerUtils.createAbnormalContainerStatus(\n+          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n+        RMContainerEventType.KILL);\n     }\n-    \n-     // Release all reserved containers\n-    for (RMContainer rmContainer : application.getReservedContainers()) {\n-      completedContainer(rmContainer, \n-          SchedulerUtils.createAbnormalContainerStatus(\n-              rmContainer.getContainerId(), \n-              \"Application Complete\"), \n-          RMContainerEventType.KILL);\n+\n+    // Release all reserved containers\n+    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n+      completedContainer(\n+        rmContainer,\n+        SchedulerUtils.createAbnormalContainerStatus(\n+          rmContainer.getContainerId(), \"Application Complete\"),\n+        RMContainerEventType.KILL);\n     }\n-    \n+\n     // Clean up pending requests, metrics etc.\n-    application.stop(rmAppAttemptFinalState);\n-    \n+    attempt.stop(rmAppAttemptFinalState);\n+\n     // Inform the queue\n-    String queueName \u003d application.getQueue().getQueueName();\n+    String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n-      queue.finishApplicationAttempt(application, queue.getQueueName());\n+      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n-    \n-    // Remove from our data-structure\n-    appAttempts.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, rmAppAttemptFinalState-RMAppAttemptState]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, rmAppAttemptFinalState-RMAppAttemptState, keepContainers-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/01/14 7:04 AM",
          "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/01/14 12:19 PM",
          "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n-      RMAppAttemptState rmAppAttemptFinalState) {\n+      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n     LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n-    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n+    SchedulerApplication application \u003d\n+        applications.get(applicationAttemptId.getApplicationId());\n \n-    if (application \u003d\u003d null) {\n-      //      throw new IOException(\"Unknown application \" + applicationId + \n-      //          \" has completed!\");\n+    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n-    \n-    // Release all the running containers \n-    for (RMContainer rmContainer : application.getLiveContainers()) {\n-      completedContainer(rmContainer, \n-          SchedulerUtils.createAbnormalContainerStatus(\n-              rmContainer.getContainerId(), \n-              SchedulerUtils.COMPLETED_APPLICATION), \n-          RMContainerEventType.KILL);\n+\n+    // Release all the allocated, acquired, running containers\n+    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n+      if (keepContainers\n+          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n+        // do not kill the running container in the case of work-preserving AM\n+        // restart.\n+        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n+        continue;\n+      }\n+      completedContainer(\n+        rmContainer,\n+        SchedulerUtils.createAbnormalContainerStatus(\n+          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n+        RMContainerEventType.KILL);\n     }\n-    \n-     // Release all reserved containers\n-    for (RMContainer rmContainer : application.getReservedContainers()) {\n-      completedContainer(rmContainer, \n-          SchedulerUtils.createAbnormalContainerStatus(\n-              rmContainer.getContainerId(), \n-              \"Application Complete\"), \n-          RMContainerEventType.KILL);\n+\n+    // Release all reserved containers\n+    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n+      completedContainer(\n+        rmContainer,\n+        SchedulerUtils.createAbnormalContainerStatus(\n+          rmContainer.getContainerId(), \"Application Complete\"),\n+        RMContainerEventType.KILL);\n     }\n-    \n+\n     // Clean up pending requests, metrics etc.\n-    application.stop(rmAppAttemptFinalState);\n-    \n+    attempt.stop(rmAppAttemptFinalState);\n+\n     // Inform the queue\n-    String queueName \u003d application.getQueue().getQueueName();\n+    String queueName \u003d attempt.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n-      queue.finishApplicationAttempt(application, queue.getQueueName());\n+      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n     }\n-    \n-    // Remove from our data-structure\n-    appAttempts.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp attempt \u003d getApplicationAttempt(applicationAttemptId);\n    SchedulerApplication application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n\n    if (application \u003d\u003d null || attempt \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n\n    // Release all the allocated, acquired, running containers\n    for (RMContainer rmContainer : attempt.getLiveContainers()) {\n      if (keepContainers\n          \u0026\u0026 rmContainer.getState().equals(RMContainerState.RUNNING)) {\n        // do not kill the running container in the case of work-preserving AM\n        // restart.\n        LOG.info(\"Skip killing \" + rmContainer.getContainerId());\n        continue;\n      }\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), SchedulerUtils.COMPLETED_APPLICATION),\n        RMContainerEventType.KILL);\n    }\n\n    // Release all reserved containers\n    for (RMContainer rmContainer : attempt.getReservedContainers()) {\n      completedContainer(\n        rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(\n          rmContainer.getContainerId(), \"Application Complete\"),\n        RMContainerEventType.KILL);\n    }\n\n    // Clean up pending requests, metrics etc.\n    attempt.stop(rmAppAttemptFinalState);\n\n    // Inform the queue\n    String queueName \u003d attempt.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(attempt, queue.getQueueName());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/12/13 5:44 PM",
      "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n-    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n+    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               SchedulerUtils.COMPLETED_APPLICATION), \n           RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getReservedContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               \"Application Complete\"), \n           RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n-      queue.finishApplication(application, queue.getQueueName());\n+      queue.finishApplicationAttempt(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n-    applications.remove(applicationAttemptId);\n+    appAttempts.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application Attempt \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplicationAttempt(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    appAttempts.remove(applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": {
      "type": "Yrename",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 5:44 PM",
      "commitName": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:45 PM",
      "commitNameOld": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n-  private synchronized void doneApplication(\n+  private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               SchedulerUtils.COMPLETED_APPLICATION), \n           RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getReservedContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               \"Application Complete\"), \n           RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "doneApplication",
        "newValue": "doneApplicationAttempt"
      }
    },
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": {
      "type": "Yrename",
      "commitMessage": "Reverting YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550594 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:45 PM",
      "commitName": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:07 PM",
      "commitNameOld": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n-  private synchronized void doneApplicationAttempt(\n+  private synchronized void doneApplication(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               SchedulerUtils.COMPLETED_APPLICATION), \n           RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getReservedContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               \"Application Complete\"), \n           RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "doneApplicationAttempt",
        "newValue": "doneApplication"
      }
    },
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": {
      "type": "Yrename",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:07 PM",
      "commitName": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n-  private synchronized void doneApplication(\n+  private synchronized void doneApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               SchedulerUtils.COMPLETED_APPLICATION), \n           RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getReservedContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               \"Application Complete\"), \n           RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "doneApplication",
        "newValue": "doneApplicationAttempt"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private synchronized void doneApplication(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n-    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               SchedulerUtils.COMPLETED_APPLICATION), \n           RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getReservedContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               \"Application Complete\"), \n           RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3050. Add ability to get resource usage information for applications and nodes. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177859 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/09/11 3:19 PM",
      "commitName": "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 17.93,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private synchronized void doneApplication(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               SchedulerUtils.COMPLETED_APPLICATION), \n           RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n-    for (RMContainer rmContainer : application.getAllReservedContainers()) {\n+    for (RMContainer rmContainer : application.getReservedContainers()) {\n       completedContainer(rmContainer, \n           SchedulerUtils.createAbnormalContainerStatus(\n               rmContainer.getContainerId(), \n               \"Application Complete\"), \n           RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 11:26 AM",
      "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,49 @@\n   private synchronized void doneApplication(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n-      completedContainer(rmContainer, RMContainerEventType.KILL);\n+      completedContainer(rmContainer, \n+          SchedulerUtils.createAbnormalContainerStatus(\n+              rmContainer.getContainerId(), \n+              SchedulerUtils.COMPLETED_APPLICATION), \n+          RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getAllReservedContainers()) {\n-      completedContainer(rmContainer, RMContainerEventType.KILL);\n+      completedContainer(rmContainer, \n+          SchedulerUtils.createAbnormalContainerStatus(\n+              rmContainer.getContainerId(), \n+              \"Application Complete\"), \n+          RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n     CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              SchedulerUtils.COMPLETED_APPLICATION), \n          RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getAllReservedContainers()) {\n      completedContainer(rmContainer, \n          SchedulerUtils.createAbnormalContainerStatus(\n              rmContainer.getContainerId(), \n              \"Application Complete\"), \n          RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 10:54 PM",
      "commitNameOld": "0ecba04727b5c31182d29511646c8d3e6441300f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private synchronized void doneApplication(\n       ApplicationAttemptId applicationAttemptId,\n       RMAppAttemptState rmAppAttemptFinalState) {\n     LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n     \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n     \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n \n     if (application \u003d\u003d null) {\n       //      throw new IOException(\"Unknown application \" + applicationId + \n       //          \" has completed!\");\n       LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n       return;\n     }\n     \n     // Release all the running containers \n     for (RMContainer rmContainer : application.getLiveContainers()) {\n       completedContainer(rmContainer, RMContainerEventType.KILL);\n     }\n     \n      // Release all reserved containers\n     for (RMContainer rmContainer : application.getAllReservedContainers()) {\n       completedContainer(rmContainer, RMContainerEventType.KILL);\n     }\n     \n     // Clean up pending requests, metrics etc.\n     application.stop(rmAppAttemptFinalState);\n     \n     // Inform the queue\n     String queueName \u003d application.getQueue().getQueueName();\n-    Queue queue \u003d queues.get(queueName);\n+    CSQueue queue \u003d queues.get(queueName);\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queueName);\n     } else {\n       queue.finishApplication(application, queue.getQueueName());\n     }\n     \n     // Remove from our data-structure\n     applications.remove(applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getAllReservedContainers()) {\n      completedContainer(rmContainer, RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    CSQueue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getAllReservedContainers()) {\n      completedContainer(rmContainer, RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    Queue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,41 @@\n+  private synchronized void doneApplication(\n+      ApplicationAttemptId applicationAttemptId,\n+      RMAppAttemptState rmAppAttemptFinalState) {\n+    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n+    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n+    \n+    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+\n+    if (application \u003d\u003d null) {\n+      //      throw new IOException(\"Unknown application \" + applicationId + \n+      //          \" has completed!\");\n+      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n+      return;\n+    }\n+    \n+    // Release all the running containers \n+    for (RMContainer rmContainer : application.getLiveContainers()) {\n+      completedContainer(rmContainer, RMContainerEventType.KILL);\n+    }\n+    \n+     // Release all reserved containers\n+    for (RMContainer rmContainer : application.getAllReservedContainers()) {\n+      completedContainer(rmContainer, RMContainerEventType.KILL);\n+    }\n+    \n+    // Clean up pending requests, metrics etc.\n+    application.stop(rmAppAttemptFinalState);\n+    \n+    // Inform the queue\n+    String queueName \u003d application.getQueue().getQueueName();\n+    Queue queue \u003d queues.get(queueName);\n+    if (!(queue instanceof LeafQueue)) {\n+      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n+          + queueName);\n+    } else {\n+      queue.finishApplication(application, queue.getQueueName());\n+    }\n+    \n+    // Remove from our data-structure\n+    applications.remove(applicationAttemptId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState) {\n    LOG.info(\"Application \" + applicationAttemptId + \" is done.\" +\n    \t\t\" finalState\u003d\" + rmAppAttemptFinalState);\n    \n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n\n    if (application \u003d\u003d null) {\n      //      throw new IOException(\"Unknown application \" + applicationId + \n      //          \" has completed!\");\n      LOG.info(\"Unknown application \" + applicationAttemptId + \" has completed!\");\n      return;\n    }\n    \n    // Release all the running containers \n    for (RMContainer rmContainer : application.getLiveContainers()) {\n      completedContainer(rmContainer, RMContainerEventType.KILL);\n    }\n    \n     // Release all reserved containers\n    for (RMContainer rmContainer : application.getAllReservedContainers()) {\n      completedContainer(rmContainer, RMContainerEventType.KILL);\n    }\n    \n    // Clean up pending requests, metrics etc.\n    application.stop(rmAppAttemptFinalState);\n    \n    // Inform the queue\n    String queueName \u003d application.getQueue().getQueueName();\n    Queue queue \u003d queues.get(queueName);\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queueName);\n    } else {\n      queue.finishApplication(application, queue.getQueueName());\n    }\n    \n    // Remove from our data-structure\n    applications.remove(applicationAttemptId);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}