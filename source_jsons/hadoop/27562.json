{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PerNodeTimelineCollectorsAuxService.java",
  "functionName": "removeApplicationCollector",
  "functionId": "removeApplicationCollector___containerId-ContainerId(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/PerNodeTimelineCollectorsAuxService.java",
  "functionStartLine": 187,
  "functionEndLine": 213,
  "numCommitsSeen": 16,
  "timeTaken": 1732,
  "changeHistory": [
    "4aacbfff605262aaf3dbd926258afcadc86c72c0",
    "d1274c3b71549cb000868500c293cafd880b3713"
  ],
  "changeHistoryShort": {
    "4aacbfff605262aaf3dbd926258afcadc86c72c0": "Ybodychange",
    "d1274c3b71549cb000868500c293cafd880b3713": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4aacbfff605262aaf3dbd926258afcadc86c72c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8679. [ATSv2] If HBase cluster is down for long time, high chances that NM ContainerManager dispatcher get blocked. Contributed by Wangda Tan.\n",
      "commitDate": "17/08/18 9:56 PM",
      "commitName": "4aacbfff605262aaf3dbd926258afcadc86c72c0",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "28/02/18 9:10 PM",
      "commitNameOld": "d1274c3b71549cb000868500c293cafd880b3713",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 169.99,
      "commitsBetweenForRepo": 1880,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,27 @@\n   protected Future removeApplicationCollector(final ContainerId containerId) {\n     final ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n     return scheduler.schedule(new Runnable() {\n       public void run() {\n+        boolean shouldRemoveApplication \u003d false;\n         synchronized (appIdToContainerId) {\n           Set\u003cContainerId\u003e masterContainers \u003d appIdToContainerId.get(appId);\n           if (masterContainers \u003d\u003d null) {\n             LOG.info(\"Stop container for \" + containerId\n                 + \" is called before initializing container.\");\n             return;\n           }\n           masterContainers.remove(containerId);\n           if (masterContainers.size() \u003d\u003d 0) {\n             // remove only if it is last master container\n-            removeApplication(appId);\n+            shouldRemoveApplication \u003d true;\n             appIdToContainerId.remove(appId);\n           }\n         }\n+\n+        if (shouldRemoveApplication) {\n+          removeApplication(appId);\n+        }\n       }\n     }, collectorLingerPeriod, TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Future removeApplicationCollector(final ContainerId containerId) {\n    final ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    return scheduler.schedule(new Runnable() {\n      public void run() {\n        boolean shouldRemoveApplication \u003d false;\n        synchronized (appIdToContainerId) {\n          Set\u003cContainerId\u003e masterContainers \u003d appIdToContainerId.get(appId);\n          if (masterContainers \u003d\u003d null) {\n            LOG.info(\"Stop container for \" + containerId\n                + \" is called before initializing container.\");\n            return;\n          }\n          masterContainers.remove(containerId);\n          if (masterContainers.size() \u003d\u003d 0) {\n            // remove only if it is last master container\n            shouldRemoveApplication \u003d true;\n            appIdToContainerId.remove(appId);\n          }\n        }\n\n        if (shouldRemoveApplication) {\n          removeApplication(appId);\n        }\n      }\n    }, collectorLingerPeriod, TimeUnit.MILLISECONDS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/PerNodeTimelineCollectorsAuxService.java",
      "extendedDetails": {}
    },
    "d1274c3b71549cb000868500c293cafd880b3713": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7835. Race condition in NM while publishing events if second attempt is launched on the same node. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "28/02/18 9:10 PM",
      "commitName": "d1274c3b71549cb000868500c293cafd880b3713",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,22 @@\n+  protected Future removeApplicationCollector(final ContainerId containerId) {\n+    final ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    return scheduler.schedule(new Runnable() {\n+      public void run() {\n+        synchronized (appIdToContainerId) {\n+          Set\u003cContainerId\u003e masterContainers \u003d appIdToContainerId.get(appId);\n+          if (masterContainers \u003d\u003d null) {\n+            LOG.info(\"Stop container for \" + containerId\n+                + \" is called before initializing container.\");\n+            return;\n+          }\n+          masterContainers.remove(containerId);\n+          if (masterContainers.size() \u003d\u003d 0) {\n+            // remove only if it is last master container\n+            removeApplication(appId);\n+            appIdToContainerId.remove(appId);\n+          }\n+        }\n+      }\n+    }, collectorLingerPeriod, TimeUnit.MILLISECONDS);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Future removeApplicationCollector(final ContainerId containerId) {\n    final ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    return scheduler.schedule(new Runnable() {\n      public void run() {\n        synchronized (appIdToContainerId) {\n          Set\u003cContainerId\u003e masterContainers \u003d appIdToContainerId.get(appId);\n          if (masterContainers \u003d\u003d null) {\n            LOG.info(\"Stop container for \" + containerId\n                + \" is called before initializing container.\");\n            return;\n          }\n          masterContainers.remove(containerId);\n          if (masterContainers.size() \u003d\u003d 0) {\n            // remove only if it is last master container\n            removeApplication(appId);\n            appIdToContainerId.remove(appId);\n          }\n        }\n      }\n    }, collectorLingerPeriod, TimeUnit.MILLISECONDS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/PerNodeTimelineCollectorsAuxService.java"
    }
  }
}