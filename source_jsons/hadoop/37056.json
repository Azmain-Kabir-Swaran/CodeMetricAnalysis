{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "removeReservation",
  "functionId": "removeReservation___reservation-ReservationAllocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 425,
  "functionEndLine": 455,
  "numCommitsSeen": 19,
  "timeTaken": 1420,
  "changeHistory": [
    "2798723a5443d04455b9d79c48d61f435ab52267",
    "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "2798723a5443d04455b9d79c48d61f435ab52267": "Ybodychange",
    "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c": "Ybodychange",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2798723a5443d04455b9d79c48d61f435ab52267": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3739. Add reservation system recovery to RM recovery process. Contributed by  Subru Krishnan.\n",
      "commitDate": "22/10/15 6:51 AM",
      "commitName": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthor": "Anubhav Dhoot",
      "commitDateOld": "20/10/15 4:46 PM",
      "commitNameOld": "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   private boolean removeReservation(ReservationAllocation reservation) {\n     assert (readWriteLock.isWriteLockedByCurrentThread());\n     ReservationInterval searchInterval \u003d\n         new ReservationInterval(reservation.getStartTime(),\n             reservation.getEndTime());\n     Set\u003cInMemoryReservationAllocation\u003e reservations \u003d\n         currentReservations.get(searchInterval);\n     if (reservations !\u003d null) {\n+      if (rmStateStore !\u003d null) {\n+        rmStateStore.removeReservation(getQueueName(),\n+            reservation.getReservationId().toString());\n+      }\n       if (!reservations.remove(reservation)) {\n         LOG.error(\"Unable to remove reservation: {} from plan.\",\n             reservation.getReservationId());\n         return false;\n       }\n       if (reservations.isEmpty()) {\n         currentReservations.remove(searchInterval);\n       }\n     } else {\n       String errMsg \u003d\n           \"The specified Reservation with ID \" + reservation.getReservationId()\n               + \" does not exist in the plan\";\n       LOG.error(errMsg);\n       throw new IllegalArgumentException(errMsg);\n     }\n     reservationTable.remove(reservation.getReservationId());\n-    rmContext.getStateStore().removeReservation(\n-        getQueueName(), reservation.getReservationId().toString());\n     decrementAllocation(reservation);\n     LOG.info(\"Sucessfully deleted reservation: {} in plan.\",\n         reservation.getReservationId());\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean removeReservation(ReservationAllocation reservation) {\n    assert (readWriteLock.isWriteLockedByCurrentThread());\n    ReservationInterval searchInterval \u003d\n        new ReservationInterval(reservation.getStartTime(),\n            reservation.getEndTime());\n    Set\u003cInMemoryReservationAllocation\u003e reservations \u003d\n        currentReservations.get(searchInterval);\n    if (reservations !\u003d null) {\n      if (rmStateStore !\u003d null) {\n        rmStateStore.removeReservation(getQueueName(),\n            reservation.getReservationId().toString());\n      }\n      if (!reservations.remove(reservation)) {\n        LOG.error(\"Unable to remove reservation: {} from plan.\",\n            reservation.getReservationId());\n        return false;\n      }\n      if (reservations.isEmpty()) {\n        currentReservations.remove(searchInterval);\n      }\n    } else {\n      String errMsg \u003d\n          \"The specified Reservation with ID \" + reservation.getReservationId()\n              + \" does not exist in the plan\";\n      LOG.error(errMsg);\n      throw new IllegalArgumentException(errMsg);\n    }\n    reservationTable.remove(reservation.getReservationId());\n    decrementAllocation(reservation);\n    LOG.info(\"Sucessfully deleted reservation: {} in plan.\",\n        reservation.getReservationId());\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3985. Make ReservationSystem persist state using RMStateStore reservation APIs. (adhoot via asuresh)\n",
      "commitDate": "20/10/15 4:46 PM",
      "commitName": "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "25/07/15 7:39 AM",
      "commitNameOld": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthorOld": "ccurino",
      "daysBetweenCommits": 87.38,
      "commitsBetweenForRepo": 560,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   private boolean removeReservation(ReservationAllocation reservation) {\n     assert (readWriteLock.isWriteLockedByCurrentThread());\n     ReservationInterval searchInterval \u003d\n         new ReservationInterval(reservation.getStartTime(),\n             reservation.getEndTime());\n     Set\u003cInMemoryReservationAllocation\u003e reservations \u003d\n         currentReservations.get(searchInterval);\n     if (reservations !\u003d null) {\n       if (!reservations.remove(reservation)) {\n         LOG.error(\"Unable to remove reservation: {} from plan.\",\n             reservation.getReservationId());\n         return false;\n       }\n       if (reservations.isEmpty()) {\n         currentReservations.remove(searchInterval);\n       }\n     } else {\n       String errMsg \u003d\n           \"The specified Reservation with ID \" + reservation.getReservationId()\n               + \" does not exist in the plan\";\n       LOG.error(errMsg);\n       throw new IllegalArgumentException(errMsg);\n     }\n     reservationTable.remove(reservation.getReservationId());\n+    rmContext.getStateStore().removeReservation(\n+        getQueueName(), reservation.getReservationId().toString());\n     decrementAllocation(reservation);\n     LOG.info(\"Sucessfully deleted reservation: {} in plan.\",\n         reservation.getReservationId());\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean removeReservation(ReservationAllocation reservation) {\n    assert (readWriteLock.isWriteLockedByCurrentThread());\n    ReservationInterval searchInterval \u003d\n        new ReservationInterval(reservation.getStartTime(),\n            reservation.getEndTime());\n    Set\u003cInMemoryReservationAllocation\u003e reservations \u003d\n        currentReservations.get(searchInterval);\n    if (reservations !\u003d null) {\n      if (!reservations.remove(reservation)) {\n        LOG.error(\"Unable to remove reservation: {} from plan.\",\n            reservation.getReservationId());\n        return false;\n      }\n      if (reservations.isEmpty()) {\n        currentReservations.remove(searchInterval);\n      }\n    } else {\n      String errMsg \u003d\n          \"The specified Reservation with ID \" + reservation.getReservationId()\n              + \" does not exist in the plan\";\n      LOG.error(errMsg);\n      throw new IllegalArgumentException(errMsg);\n    }\n    reservationTable.remove(reservation.getReservationId());\n    rmContext.getStateStore().removeReservation(\n        getQueueName(), reservation.getReservationId().toString());\n    decrementAllocation(reservation);\n    LOG.info(\"Sucessfully deleted reservation: {} in plan.\",\n        reservation.getReservationId());\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,29 @@\n+  private boolean removeReservation(ReservationAllocation reservation) {\n+    assert (readWriteLock.isWriteLockedByCurrentThread());\n+    ReservationInterval searchInterval \u003d\n+        new ReservationInterval(reservation.getStartTime(),\n+            reservation.getEndTime());\n+    Set\u003cInMemoryReservationAllocation\u003e reservations \u003d\n+        currentReservations.get(searchInterval);\n+    if (reservations !\u003d null) {\n+      if (!reservations.remove(reservation)) {\n+        LOG.error(\"Unable to remove reservation: {} from plan.\",\n+            reservation.getReservationId());\n+        return false;\n+      }\n+      if (reservations.isEmpty()) {\n+        currentReservations.remove(searchInterval);\n+      }\n+    } else {\n+      String errMsg \u003d\n+          \"The specified Reservation with ID \" + reservation.getReservationId()\n+              + \" does not exist in the plan\";\n+      LOG.error(errMsg);\n+      throw new IllegalArgumentException(errMsg);\n+    }\n+    reservationTable.remove(reservation.getReservationId());\n+    decrementAllocation(reservation);\n+    LOG.info(\"Sucessfully deleted reservation: {} in plan.\",\n+        reservation.getReservationId());\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean removeReservation(ReservationAllocation reservation) {\n    assert (readWriteLock.isWriteLockedByCurrentThread());\n    ReservationInterval searchInterval \u003d\n        new ReservationInterval(reservation.getStartTime(),\n            reservation.getEndTime());\n    Set\u003cInMemoryReservationAllocation\u003e reservations \u003d\n        currentReservations.get(searchInterval);\n    if (reservations !\u003d null) {\n      if (!reservations.remove(reservation)) {\n        LOG.error(\"Unable to remove reservation: {} from plan.\",\n            reservation.getReservationId());\n        return false;\n      }\n      if (reservations.isEmpty()) {\n        currentReservations.remove(searchInterval);\n      }\n    } else {\n      String errMsg \u003d\n          \"The specified Reservation with ID \" + reservation.getReservationId()\n              + \" does not exist in the plan\";\n      LOG.error(errMsg);\n      throw new IllegalArgumentException(errMsg);\n    }\n    reservationTable.remove(reservation.getReservationId());\n    decrementAllocation(reservation);\n    LOG.info(\"Sucessfully deleted reservation: {} in plan.\",\n        reservation.getReservationId());\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}