{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfServlet.java",
  "functionName": "doGet",
  "functionId": "doGet___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
  "functionStartLine": 58,
  "functionEndLine": 83,
  "numCommitsSeen": 14,
  "timeTaken": 2666,
  "changeHistory": [
    "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab",
    "563dcdfc1de7ea9ee7ce296163cf2678dfe5349c",
    "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
    "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
    "59d59667a8b1d3fb4a744a41774b2397fd91cbb3",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "a70587f368a6519fceb0388c14befec4e97e8293",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "ee27b8ea643ecf2345dee0950b266dcb39fa21cc",
    "7785232da5a1db2d06f5d208ce3258c342a4d19c",
    "889528e387680f18472b45e63f7857dbd0117eb9"
  ],
  "changeHistoryShort": {
    "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab": "Ybodychange",
    "563dcdfc1de7ea9ee7ce296163cf2678dfe5349c": "Ybodychange",
    "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487": "Ybodychange",
    "00160f71b6d98244fcb1cb58b2db9fc24f1cd672": "Ybodychange",
    "59d59667a8b1d3fb4a744a41774b2397fd91cbb3": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "a70587f368a6519fceb0388c14befec4e97e8293": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "ee27b8ea643ecf2345dee0950b266dcb39fa21cc": "Ybodychange",
    "7785232da5a1db2d06f5d208ce3258c342a4d19c": "Ybodychange",
    "889528e387680f18472b45e63f7857dbd0117eb9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13707. If kerberos is enabled while HTTP SPNEGO is not configured, some links cannot be accessed. Contributed by Yuanbo Liu\"\n\nChange-Id: I946a466a43d56c73bb0135384e73cb8513595461\n(cherry picked from commit 80ee5248b2dda1cb8d122d4f362f2f8cf02b9467)\n",
      "commitDate": "14/03/18 1:36 PM",
      "commitName": "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/10/17 10:58 AM",
      "commitNameOld": "563dcdfc1de7ea9ee7ce296163cf2678dfe5349c",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 163.11,
      "commitsBetweenForRepo": 1132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,26 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n-    // If user is a static user and auth Type is null, that means\n-    // there is a non-security environment and no need authorization,\n-    // otherwise, do the authorization.\n-    final ServletContext servletContext \u003d getServletContext();\n-    if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n-        !HttpServer2.isInstrumentationAccessAllowed(servletContext,\n+    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                    request, response)) {\n       return;\n     }\n \n     String format \u003d parseAcceptHeader(request);\n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n     String name \u003d request.getParameter(\"name\");\n     Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format, name);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     } catch (IllegalArgumentException iae) {\n       response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d parseAcceptHeader(request);\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    String name \u003d request.getParameter(\"name\");\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format, name);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    } catch (IllegalArgumentException iae) {\n      response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "563dcdfc1de7ea9ee7ce296163cf2678dfe5349c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14915. method name is incorrect in ConfServlet. Contributed by Bharat Viswanadham.\n",
      "commitDate": "02/10/17 10:58 AM",
      "commitName": "563dcdfc1de7ea9ee7ce296163cf2678dfe5349c",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "08/11/16 7:25 AM",
      "commitNameOld": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 328.11,
      "commitsBetweenForRepo": 1987,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n     // If user is a static user and auth Type is null, that means\n     // there is a non-security environment and no need authorization,\n     // otherwise, do the authorization.\n     final ServletContext servletContext \u003d getServletContext();\n     if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n         !HttpServer2.isInstrumentationAccessAllowed(servletContext,\n                                                    request, response)) {\n       return;\n     }\n \n-    String format \u003d parseAccecptHeader(request);\n+    String format \u003d parseAcceptHeader(request);\n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n     String name \u003d request.getParameter(\"name\");\n     Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format, name);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     } catch (IllegalArgumentException iae) {\n       response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // If user is a static user and auth Type is null, that means\n    // there is a non-security environment and no need authorization,\n    // otherwise, do the authorization.\n    final ServletContext servletContext \u003d getServletContext();\n    if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n        !HttpServer2.isInstrumentationAccessAllowed(servletContext,\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d parseAcceptHeader(request);\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    String name \u003d request.getParameter(\"name\");\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format, name);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    } catch (IllegalArgumentException iae) {\n      response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13707. If kerberos is enabled while HTTP SPNEGO is not configured, some links cannot be accessed. Contributed by Yuanbo Liu.\n",
      "commitDate": "08/11/16 7:25 AM",
      "commitName": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "05/10/16 1:50 PM",
      "commitNameOld": "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 33.77,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n-    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n+    // If user is a static user and auth Type is null, that means\n+    // there is a non-security environment and no need authorization,\n+    // otherwise, do the authorization.\n+    final ServletContext servletContext \u003d getServletContext();\n+    if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n+        !HttpServer2.isInstrumentationAccessAllowed(servletContext,\n                                                    request, response)) {\n       return;\n     }\n \n     String format \u003d parseAccecptHeader(request);\n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n     String name \u003d request.getParameter(\"name\");\n     Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format, name);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     } catch (IllegalArgumentException iae) {\n       response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // If user is a static user and auth Type is null, that means\n    // there is a non-security environment and no need authorization,\n    // otherwise, do the authorization.\n    final ServletContext servletContext \u003d getServletContext();\n    if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n        !HttpServer2.isInstrumentationAccessAllowed(servletContext,\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d parseAccecptHeader(request);\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    String name \u003d request.getParameter(\"name\");\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format, name);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    } catch (IllegalArgumentException iae) {\n      response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "00160f71b6d98244fcb1cb58b2db9fc24f1cd672": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13628. Support to retrieve specific property from configuration via REST API. Contributed by Weiwei Yang\n",
      "commitDate": "05/10/16 1:50 PM",
      "commitName": "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "12/09/16 4:17 PM",
      "commitNameOld": "59d59667a8b1d3fb4a744a41774b2397fd91cbb3",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 22.9,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n     if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                    request, response)) {\n       return;\n     }\n \n     String format \u003d parseAccecptHeader(request);\n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n+    String name \u003d request.getParameter(\"name\");\n     Writer out \u003d response.getWriter();\n     try {\n-      writeResponse(getConfFromContext(), out, format);\n+      writeResponse(getConfFromContext(), out, format, name);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n+    } catch (IllegalArgumentException iae) {\n+      response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d parseAccecptHeader(request);\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    String name \u003d request.getParameter(\"name\");\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format, name);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    } catch (IllegalArgumentException iae) {\n      response.sendError(HttpServletResponse.SC_NOT_FOUND, iae.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "59d59667a8b1d3fb4a744a41774b2397fd91cbb3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13588. ConfServlet should respect Accept request header. Contributed by Weiwei Yang\n",
      "commitDate": "12/09/16 4:17 PM",
      "commitName": "59d59667a8b1d3fb4a744a41774b2397fd91cbb3",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 958.66,
      "commitsBetweenForRepo": 7469,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,23 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n     if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                    request, response)) {\n       return;\n     }\n \n-    String format \u003d request.getParameter(FORMAT_PARAM);\n-    if (null \u003d\u003d format) {\n-      format \u003d FORMAT_XML;\n-    }\n-\n+    String format \u003d parseAccecptHeader(request);\n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n     Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d parseAccecptHeader(request);\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "03/05/12 8:31 PM",
      "commitNameOld": "a70587f368a6519fceb0388c14befec4e97e8293",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 634.17,
      "commitsBetweenForRepo": 3673,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n-    if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n+    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                    request, response)) {\n       return;\n     }\n \n     String format \u003d request.getParameter(FORMAT_PARAM);\n     if (null \u003d\u003d format) {\n       format \u003d FORMAT_XML;\n     }\n \n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n     Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "a70587f368a6519fceb0388c14befec4e97e8293": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8343. Allow configuration of authorization for JmxJsonServlet and MetricsServlet (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 8:31 PM",
      "commitName": "a70587f368a6519fceb0388c14befec4e97e8293",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 253.14,
      "commitsBetweenForRepo": 1817,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n-    // Do the authorization\n-    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n-        response)) {\n+    if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n+                                                   request, response)) {\n       return;\n     }\n \n     String format \u003d request.getParameter(FORMAT_PARAM);\n     if (null \u003d\u003d format) {\n       format \u003d FORMAT_XML;\n     }\n \n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n     Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n                                                   request, response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // Do the authorization\n    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n        response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // Do the authorization\n    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n        response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/conf/ConfServlet.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/ConfServlet.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // Do the authorization\n    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n        response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "common/src/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/conf/ConfServlet.java",
        "newPath": "common/src/java/org/apache/hadoop/conf/ConfServlet.java"
      }
    },
    "ee27b8ea643ecf2345dee0950b266dcb39fa21cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7093. Servlets should default to text/plain. Contributed by Todd Lipcon\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1058822 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/01/11 5:08 PM",
      "commitName": "ee27b8ea643ecf2345dee0950b266dcb39fa21cc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 216.15,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n \n     // Do the authorization\n     if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n         response)) {\n       return;\n     }\n \n     String format \u003d request.getParameter(FORMAT_PARAM);\n     if (null \u003d\u003d format) {\n       format \u003d FORMAT_XML;\n     }\n \n     if (FORMAT_XML.equals(format)) {\n-      response.setContentType(\"text/xml\");\n+      response.setContentType(\"text/xml; charset\u003dutf-8\");\n     } else if (FORMAT_JSON.equals(format)) {\n-      response.setContentType(\"text/javascript\");\n+      response.setContentType(\"application/json; charset\u003dutf-8\");\n     }\n \n-    OutputStreamWriter out \u003d new OutputStreamWriter(response.getOutputStream());\n+    Writer out \u003d response.getWriter();\n     try {\n       writeResponse(getConfFromContext(), out, format);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // Do the authorization\n    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n        response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml; charset\u003dutf-8\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"application/json; charset\u003dutf-8\");\n    }\n\n    Writer out \u003d response.getWriter();\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "src/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "7785232da5a1db2d06f5d208ce3258c342a4d19c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6568. Adds authorization for the default servlets. Contributed by Vinod Kumar Vavilapalli.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916467 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/10 1:39 PM",
      "commitName": "7785232da5a1db2d06f5d208ce3258c342a4d19c",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "06/01/10 11:44 AM",
      "commitNameOld": "889528e387680f18472b45e63f7857dbd0117eb9",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 50.08,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,28 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n+\n+    // Do the authorization\n+    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n+        response)) {\n+      return;\n+    }\n+\n     String format \u003d request.getParameter(FORMAT_PARAM);\n     if (null \u003d\u003d format) {\n       format \u003d FORMAT_XML;\n     }\n \n     if (FORMAT_XML.equals(format)) {\n       response.setContentType(\"text/xml\");\n     } else if (FORMAT_JSON.equals(format)) {\n       response.setContentType(\"text/javascript\");\n     }\n \n     OutputStreamWriter out \u003d new OutputStreamWriter(response.getOutputStream());\n     try {\n       writeResponse(getConfFromContext(), out, format);\n     } catch (BadFormatException bfe) {\n       response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    // Do the authorization\n    if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n        response)) {\n      return;\n    }\n\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"text/javascript\");\n    }\n\n    OutputStreamWriter out \u003d new OutputStreamWriter(response.getOutputStream());\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "src/java/org/apache/hadoop/conf/ConfServlet.java",
      "extendedDetails": {}
    },
    "889528e387680f18472b45e63f7857dbd0117eb9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6408. Add a /conf servlet to dump running configuration. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@896641 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/10 11:44 AM",
      "commitName": "889528e387680f18472b45e63f7857dbd0117eb9",
      "commitAuthor": "Thomas White",
      "diff": "@@ -0,0 +1,21 @@\n+  public void doGet(HttpServletRequest request, HttpServletResponse response)\n+      throws ServletException, IOException {\n+    String format \u003d request.getParameter(FORMAT_PARAM);\n+    if (null \u003d\u003d format) {\n+      format \u003d FORMAT_XML;\n+    }\n+\n+    if (FORMAT_XML.equals(format)) {\n+      response.setContentType(\"text/xml\");\n+    } else if (FORMAT_JSON.equals(format)) {\n+      response.setContentType(\"text/javascript\");\n+    }\n+\n+    OutputStreamWriter out \u003d new OutputStreamWriter(response.getOutputStream());\n+    try {\n+      writeResponse(getConfFromContext(), out, format);\n+    } catch (BadFormatException bfe) {\n+      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n+    }\n+    out.close();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String format \u003d request.getParameter(FORMAT_PARAM);\n    if (null \u003d\u003d format) {\n      format \u003d FORMAT_XML;\n    }\n\n    if (FORMAT_XML.equals(format)) {\n      response.setContentType(\"text/xml\");\n    } else if (FORMAT_JSON.equals(format)) {\n      response.setContentType(\"text/javascript\");\n    }\n\n    OutputStreamWriter out \u003d new OutputStreamWriter(response.getOutputStream());\n    try {\n      writeResponse(getConfFromContext(), out, format);\n    } catch (BadFormatException bfe) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, bfe.getMessage());\n    }\n    out.close();\n  }",
      "path": "src/java/org/apache/hadoop/conf/ConfServlet.java"
    }
  }
}