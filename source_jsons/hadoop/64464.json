{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AUtils.java",
  "functionName": "translateException",
  "functionId": "translateException___operation-String(annotations-@Nullable)__path-String__exception-SdkBaseException",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
  "functionStartLine": 183,
  "functionEndLine": 319,
  "numCommitsSeen": 72,
  "timeTaken": 7174,
  "changeHistory": [
    "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
    "e02eb24e0a9139418120027b694492e0738df20a",
    "215ffc792ef4be599e9434ee64f958744d2508f1",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "da9a39eed138210de29b59b90c449b28da1c04f9",
    "9a013b255f301c557c3868dc1ad657202e9e7a67",
    "1093a73689912f78547e6d23023be2fd1c7ddc85",
    "f274fe33ea359d26a31efec42a856320a0dbb5f4",
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
    "2ff84a00405e977b1fd791cfb974244580dd5ae8",
    "88b9444a81081da9b168d2e290f9552b58a4d8c6",
    "39ec1515a205952eda7e171408a8b83eceb4abde"
  ],
  "changeHistoryShort": {
    "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0": "Ybodychange",
    "e02eb24e0a9139418120027b694492e0738df20a": "Ybodychange",
    "215ffc792ef4be599e9434ee64f958744d2508f1": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ybodychange",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ybodychange",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ybodychange",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ybodychange",
    "da9a39eed138210de29b59b90c449b28da1c04f9": "Ybodychange",
    "9a013b255f301c557c3868dc1ad657202e9e7a67": "Ybodychange",
    "1093a73689912f78547e6d23023be2fd1c7ddc85": "Yparametermetachange",
    "f274fe33ea359d26a31efec42a856320a0dbb5f4": "Yparametermetachange",
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb": "Yparametermetachange",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Ymultichange(Yparameterchange,Ybodychange)",
    "2ff84a00405e977b1fd791cfb974244580dd5ae8": "Ybodychange",
    "88b9444a81081da9b168d2e290f9552b58a4d8c6": "Ybodychange",
    "39ec1515a205952eda7e171408a8b83eceb4abde": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16711.\n\nThis adds a new option fs.s3a.bucket.probe, range (0-2) to\ncontrol which probe for a bucket existence to perform on startup.\n\n0: no checks\n1: v1 check (as has been performend until now)\n2: v2 bucket check, which also incudes a permission check. Default.\n\nWhen set to 0, bucket existence checks won\u0027t be done\nduring initialization thus making it faster.\nWhen the bucket is not available in S3,\nor if fs.s3a.endpoint points to the wrong instance of a private S3 store\nconsecutive calls like listing, read, write etc. will fail with\nan UnknownStoreException.\n\nContributed by:\n  * Mukund Thakur (main patch and tests)\n  * Rajesh Balamohan (v0 list and performance tests)\n  * lqjacklee (HADOOP-15990/v2 list)\n  * Steve Loughran (UnknownStoreException support)\n\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ARetryPolicy.java\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java\n       new file:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/UnknownStoreException.java\n       new file:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ErrorTranslation.java\n       modified:   hadoop-tools/hadoop-aws/src/site/markdown/tools/hadoop-aws/index.md\n       modified:   hadoop-tools/hadoop-aws/src/site/markdown/tools/hadoop-aws/performance.md\n       modified:   hadoop-tools/hadoop-aws/src/site/markdown/tools/hadoop-aws/troubleshooting_s3a.md\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/AbstractS3AMockTest.java\n       new file:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3ABucketExistence.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/MockS3ClientFactory.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/TestS3AExceptionTranslation.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/AbstractS3GuardToolTestBase.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java\n       modified:   hadoop-tools/hadoop-aws/src/test/resources/core-site.xml\n\nChange-Id: Ic174f803e655af172d81c1274ed92b51bdceb384\n",
      "commitDate": "21/02/20 5:44 AM",
      "commitName": "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
      "commitAuthor": "Mukund Thakur",
      "commitDateOld": "24/01/20 5:37 AM",
      "commitNameOld": "839054754b84b9731d2122096882582df6ff4b36",
      "commitAuthorOld": "Mustafa Iman",
      "daysBetweenCommits": 28.01,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,137 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       if (exception instanceof CredentialInitializationException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n+        if (isUnknownBucket(ase)) {\n+          // this is a missing bucket\n+          ioe \u003d new UnknownStoreException(path, ase);\n+        } else {\n+          // a normal unknown object\n+          ioe \u003d new FileNotFoundException(message);\n+          ioe.initCause(ase);\n+        }\n+        break;\n+\n+      // this also surfaces sometimes and is considered to\n+      // be ~ a not found exception.\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // method not allowed; seen on S3 Select.\n       // treated as a bad request\n       case 405:\n         ioe \u003d new AWSBadRequestException(message, s3Exception);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof CredentialInitializationException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n        if (isUnknownBucket(ase)) {\n          // this is a missing bucket\n          ioe \u003d new UnknownStoreException(path, ase);\n        } else {\n          // a normal unknown object\n          ioe \u003d new FileNotFoundException(message);\n          ioe.initCause(ase);\n        }\n        break;\n\n      // this also surfaces sometimes and is considered to\n      // be ~ a not found exception.\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // method not allowed; seen on S3 Select.\n      // treated as a bad request\n      case 405:\n        ioe \u003d new AWSBadRequestException(message, s3Exception);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/06/19 5:54 AM",
      "commitNameOld": "309501c6fa1073f3cfd7e535a4207dbfb21165f9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 14.83,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,125 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       if (exception instanceof CredentialInitializationException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // method not allowed; seen on S3 Select.\n       // treated as a bad request\n       case 405:\n         ioe \u003d new AWSBadRequestException(message, s3Exception);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n-          return translateMultiObjectDeleteException(message,\n+          return translateDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof CredentialInitializationException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // method not allowed; seen on S3 Select.\n      // treated as a bad request\n      case 405:\n        ioe \u003d new AWSBadRequestException(message, s3Exception);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "215ffc792ef4be599e9434ee64f958744d2508f1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16197 S3AUtils.translateException to map CredentialInitializationException to AccessDeniedException\n\nContributed by Steve Loughran.\n\nChange-Id: Ie98ca5210bf0009f297edbcacf1fc6dfe5ea70cd.\n",
      "commitDate": "04/04/19 1:14 PM",
      "commitName": "215ffc792ef4be599e9434ee64f958744d2508f1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/02/19 1:07 PM",
      "commitNameOld": "6c999fe4b0181720c8e55be8388bd592196c8c87",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 51.96,
      "commitsBetweenForRepo": 448,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,125 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n-      if (exception instanceof NoAuthWithAWSException) {\n+      if (exception instanceof CredentialInitializationException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // method not allowed; seen on S3 Select.\n       // treated as a bad request\n       case 405:\n         ioe \u003d new AWSBadRequestException(message, s3Exception);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateMultiObjectDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof CredentialInitializationException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // method not allowed; seen on S3 Select.\n      // treated as a bad request\n      case 405:\n        ioe \u003d new AWSBadRequestException(message, s3Exception);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/01/19 9:59 AM",
      "commitNameOld": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 21.74,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,125 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       if (exception instanceof NoAuthWithAWSException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n+      // method not allowed; seen on S3 Select.\n+      // treated as a bad request\n+      case 405:\n+        ioe \u003d new AWSBadRequestException(message, s3Exception);\n+        break;\n+\n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateMultiObjectDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof NoAuthWithAWSException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // method not allowed; seen on S3 Select.\n      // treated as a bad request\n      case 405:\n        ioe \u003d new AWSBadRequestException(message, s3Exception);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.51,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,119 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n-        path !\u003d null ? (\" on \" + path) : \"\",\n+        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       if (exception instanceof NoAuthWithAWSException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateMultiObjectDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof NoAuthWithAWSException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/01/19 5:18 AM",
      "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,119 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n-        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n+        path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       if (exception instanceof NoAuthWithAWSException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateMultiObjectDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof NoAuthWithAWSException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/09/18 9:04 PM",
      "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 116.38,
      "commitsBetweenForRepo": 928,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,119 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n-        path !\u003d null ? (\" on \" + path) : \"\",\n+        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       if (exception instanceof NoAuthWithAWSException) {\n         // the exception raised by AWSCredentialProvider list if the\n         // credentials were not accepted.\n         return (AccessDeniedException)new AccessDeniedException(path, null,\n             exception.toString()).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateMultiObjectDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        StringUtils.isNotEmpty(path)? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof NoAuthWithAWSException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "da9a39eed138210de29b59b90c449b28da1c04f9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
      "commitDate": "08/08/18 10:57 PM",
      "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 42.01,
      "commitsBetweenForRepo": 267,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,119 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n+      if (exception instanceof NoAuthWithAWSException) {\n+        // the exception raised by AWSCredentialProvider list if the\n+        // credentials were not accepted.\n+        return (AccessDeniedException)new AccessDeniedException(path, null,\n+            exception.toString()).initCause(exception);\n+      }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n-        return translateDynamoDBException(message,\n+        return translateDynamoDBException(path, message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       case 200:\n         if (exception instanceof MultiObjectDeleteException) {\n           // failure during a bulk delete\n           return translateMultiObjectDeleteException(message,\n               (MultiObjectDeleteException) exception);\n         }\n         // other 200: FALL THROUGH\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      if (exception instanceof NoAuthWithAWSException) {\n        // the exception raised by AWSCredentialProvider list if the\n        // credentials were not accepted.\n        return (AccessDeniedException)new AccessDeniedException(path, null,\n            exception.toString()).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(path, message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "9a013b255f301c557c3868dc1ad657202e9e7a67": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15176. Enhance IAM Assumed Role support in S3A client.\nContributed by Steve Loughran\n\n(cherry picked from commit 96c047fbb98c2378eed9693a724d4cbbd03c00fd)\n",
      "commitDate": "15/02/18 7:57 AM",
      "commitName": "9a013b255f301c557c3868dc1ad657202e9e7a67",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 5:13 AM",
      "commitNameOld": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 28.11,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,113 @@\n   public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n+      case 200:\n+        if (exception instanceof MultiObjectDeleteException) {\n+          // failure during a bulk delete\n+          return translateMultiObjectDeleteException(message,\n+              (MultiObjectDeleteException) exception);\n+        }\n+        // other 200: FALL THROUGH\n+\n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      case 200:\n        if (exception instanceof MultiObjectDeleteException) {\n          // failure during a bulk delete\n          return translateMultiObjectDeleteException(message,\n              (MultiObjectDeleteException) exception);\n        }\n        // other 200: FALL THROUGH\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "1093a73689912f78547e6d23023be2fd1c7ddc85": {
      "type": "Yparametermetachange",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/01/18 5:13 AM",
      "commitName": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 4:35 AM",
      "commitNameOld": "f274fe33ea359d26a31efec42a856320a0dbb5f4",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,105 @@\n-  public static IOException translateException(String operation,\n+  public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {
        "oldValue": "[operation-String, path-String, exception-SdkBaseException]",
        "newValue": "[operation-String(annotations-@Nullable), path-String, exception-SdkBaseException]"
      }
    },
    "f274fe33ea359d26a31efec42a856320a0dbb5f4": {
      "type": "Yparametermetachange",
      "commitMessage": "Revert \"HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\"\n\nThis reverts commit 35ad9b1dd279b769381ea1625d9bf776c309c5cb.\n",
      "commitDate": "18/01/18 4:35 AM",
      "commitName": "f274fe33ea359d26a31efec42a856320a0dbb5f4",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/01/18 12:05 AM",
      "commitNameOld": "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 1.19,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,105 @@\n-  public static IOException translateException(@Nullable String operation,\n+  public static IOException translateException(String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {
        "oldValue": "[operation-String(annotations-@Nullable), path-String, exception-SdkBaseException]",
        "newValue": "[operation-String, path-String, exception-SdkBaseException]"
      }
    },
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb": {
      "type": "Yparametermetachange",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/12/17 1:19 PM",
      "commitName": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/11/17 8:31 AM",
      "commitNameOld": "3cd75845da1aced3d88e0ce68c68e8d95f48fb79",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 21.2,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,105 @@\n-  public static IOException translateException(String operation,\n+  public static IOException translateException(@Nullable String operation,\n       String path,\n       SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       Exception innerCause \u003d containsInterruptedException(exception);\n       if (innerCause !\u003d null) {\n         // interrupted IO, or a socket exception underneath that class\n         return translateInterruptedException(exception, innerCause, message);\n       }\n       if (signifiesConnectionBroken(exception)) {\n         // call considered an sign of connectivity failure\n         return (EOFException)new EOFException(message).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n       if (exception instanceof AmazonDynamoDBException) {\n         // special handling for dynamo DB exceptions\n         return translateDynamoDBException(message,\n             (AmazonDynamoDBException)exception);\n       }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n       case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n \n       case 400:\n         ioe \u003d new AWSBadRequestException(message, ase);\n         break;\n \n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         ioe.initCause(ase);\n         break;\n \n       // this has surfaced as a \"no response from server\" message.\n       // so rare we haven\u0027t replicated it.\n       // Treating as an idempotent proxy error.\n       case 443:\n       case 444:\n         ioe \u003d new AWSNoResponseException(message, ase);\n         break;\n \n       // throttling\n       case 503:\n         ioe \u003d new AWSServiceThrottledException(message, ase);\n         break;\n \n       // internal error\n       case 500:\n         ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(@Nullable String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {
        "oldValue": "[operation-String, path-String, exception-SdkBaseException]",
        "newValue": "[operation-String(annotations-@Nullable), path-String, exception-SdkBaseException]"
      }
    },
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
          "commitDate": "22/11/17 7:28 AM",
          "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "25/09/17 3:59 PM",
          "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 57.69,
          "commitsBetweenForRepo": 477,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,105 @@\n   public static IOException translateException(String operation,\n       String path,\n-      AmazonClientException exception) {\n+      SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n-      if (containsInterruptedException(exception)) {\n-        return (IOException)new InterruptedIOException(message)\n-            .initCause(exception);\n+      Exception innerCause \u003d containsInterruptedException(exception);\n+      if (innerCause !\u003d null) {\n+        // interrupted IO, or a socket exception underneath that class\n+        return translateInterruptedException(exception, innerCause, message);\n+      }\n+      if (signifiesConnectionBroken(exception)) {\n+        // call considered an sign of connectivity failure\n+        return (EOFException)new EOFException(message).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n-\n+      if (exception instanceof AmazonDynamoDBException) {\n+        // special handling for dynamo DB exceptions\n+        return translateDynamoDBException(message,\n+            (AmazonDynamoDBException)exception);\n+      }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n+      message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n+      case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n-          ioe \u003d new AWSS3IOException(message, s3Exception);\n+          ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n-          ioe \u003d new AWSServiceIOException(message, ase);\n+          ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n+\n+      case 400:\n+        ioe \u003d new AWSBadRequestException(message, ase);\n+        break;\n+\n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n+        ioe.initCause(ase);\n+        break;\n+\n+      // this has surfaced as a \"no response from server\" message.\n+      // so rare we haven\u0027t replicated it.\n+      // Treating as an idempotent proxy error.\n+      case 443:\n+      case 444:\n+        ioe \u003d new AWSNoResponseException(message, ase);\n+        break;\n+\n+      // throttling\n+      case 503:\n+        ioe \u003d new AWSServiceThrottledException(message, ase);\n+        break;\n+\n+      // internal error\n+      case 500:\n+        ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException translateException(String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[operation-String, path-String, exception-AmazonClientException]",
            "newValue": "[operation-String, path-String, exception-SdkBaseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
          "commitDate": "22/11/17 7:28 AM",
          "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "25/09/17 3:59 PM",
          "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 57.69,
          "commitsBetweenForRepo": 477,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,105 @@\n   public static IOException translateException(String operation,\n       String path,\n-      AmazonClientException exception) {\n+      SdkBaseException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n-      if (containsInterruptedException(exception)) {\n-        return (IOException)new InterruptedIOException(message)\n-            .initCause(exception);\n+      Exception innerCause \u003d containsInterruptedException(exception);\n+      if (innerCause !\u003d null) {\n+        // interrupted IO, or a socket exception underneath that class\n+        return translateInterruptedException(exception, innerCause, message);\n+      }\n+      if (signifiesConnectionBroken(exception)) {\n+        // call considered an sign of connectivity failure\n+        return (EOFException)new EOFException(message).initCause(exception);\n       }\n       return new AWSClientIOException(message, exception);\n     } else {\n-\n+      if (exception instanceof AmazonDynamoDBException) {\n+        // special handling for dynamo DB exceptions\n+        return translateDynamoDBException(message,\n+            (AmazonDynamoDBException)exception);\n+      }\n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n+      message \u003d message + \":\" + ase.getErrorCode();\n       switch (status) {\n \n       case 301:\n+      case 307:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n-          ioe \u003d new AWSS3IOException(message, s3Exception);\n+          ioe \u003d new AWSRedirectException(message, s3Exception);\n         } else {\n-          ioe \u003d new AWSServiceIOException(message, ase);\n+          ioe \u003d new AWSRedirectException(message, ase);\n         }\n         break;\n+\n+      case 400:\n+        ioe \u003d new AWSBadRequestException(message, ase);\n+        break;\n+\n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n+        ioe.initCause(ase);\n+        break;\n+\n+      // this has surfaced as a \"no response from server\" message.\n+      // so rare we haven\u0027t replicated it.\n+      // Treating as an idempotent proxy error.\n+      case 443:\n+      case 444:\n+        ioe \u003d new AWSNoResponseException(message, ase);\n+        break;\n+\n+      // throttling\n+      case 503:\n+        ioe \u003d new AWSServiceThrottledException(message, ase);\n+        break;\n+\n+      // internal error\n+      case 500:\n+        ioe \u003d new AWSStatus500Exception(message, ase);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException translateException(String operation,\n      String path,\n      SdkBaseException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      Exception innerCause \u003d containsInterruptedException(exception);\n      if (innerCause !\u003d null) {\n        // interrupted IO, or a socket exception underneath that class\n        return translateInterruptedException(exception, innerCause, message);\n      }\n      if (signifiesConnectionBroken(exception)) {\n        // call considered an sign of connectivity failure\n        return (EOFException)new EOFException(message).initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n      if (exception instanceof AmazonDynamoDBException) {\n        // special handling for dynamo DB exceptions\n        return translateDynamoDBException(message,\n            (AmazonDynamoDBException)exception);\n      }\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      message \u003d message + \":\" + ase.getErrorCode();\n      switch (status) {\n\n      case 301:\n      case 307:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSRedirectException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSRedirectException(message, ase);\n        }\n        break;\n\n      case 400:\n        ioe \u003d new AWSBadRequestException(message, ase);\n        break;\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        ioe.initCause(ase);\n        break;\n\n      // this has surfaced as a \"no response from server\" message.\n      // so rare we haven\u0027t replicated it.\n      // Treating as an idempotent proxy error.\n      case 443:\n      case 444:\n        ioe \u003d new AWSNoResponseException(message, ase);\n        break;\n\n      // throttling\n      case 503:\n        ioe \u003d new AWSServiceThrottledException(message, ase);\n        break;\n\n      // internal error\n      case 500:\n        ioe \u003d new AWSStatus500Exception(message, ase);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "2ff84a00405e977b1fd791cfb974244580dd5ae8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13857. S3AUtils.translateException to map (wrapped) InterruptedExceptions to InterruptedIOEs. Contributed by Steve Loughran\n",
      "commitDate": "02/12/16 1:36 PM",
      "commitName": "2ff84a00405e977b1fd791cfb974244580dd5ae8",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "31/10/16 1:54 PM",
      "commitNameOld": "a1761a841e95ef7d2296ac3e40b3a26d97787eab",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 32.03,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,70 @@\n   public static IOException translateException(String operation,\n       String path,\n       AmazonClientException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n+      if (containsInterruptedException(exception)) {\n+        return (IOException)new InterruptedIOException(message)\n+            .initCause(exception);\n+      }\n       return new AWSClientIOException(message, exception);\n     } else {\n \n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       switch (status) {\n \n       case 301:\n         if (s3Exception !\u003d null) {\n           if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n               s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n             message \u003d String.format(\"Received permanent redirect response to \"\n                 + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                 + \"configured in %s does not match the AWS region containing \"\n                 + \"the bucket.\",\n                 s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n           }\n           ioe \u003d new AWSS3IOException(message, s3Exception);\n         } else {\n           ioe \u003d new AWSServiceIOException(message, ase);\n         }\n         break;\n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(String operation,\n      String path,\n      AmazonClientException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      if (containsInterruptedException(exception)) {\n        return (IOException)new InterruptedIOException(message)\n            .initCause(exception);\n      }\n      return new AWSClientIOException(message, exception);\n    } else {\n\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      switch (status) {\n\n      case 301:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSS3IOException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSServiceIOException(message, ase);\n        }\n        break;\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "88b9444a81081da9b168d2e290f9552b58a4d8c6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13674. S3A can provide a more detailed error message when accessing a bucket through an incorrect S3 endpoint. Contributed by Chris Nauroth.\n",
      "commitDate": "04/10/16 10:36 AM",
      "commitName": "88b9444a81081da9b168d2e290f9552b58a4d8c6",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "06/09/16 9:36 AM",
      "commitNameOld": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 28.04,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,66 @@\n   public static IOException translateException(String operation,\n       String path,\n       AmazonClientException exception) {\n     String message \u003d String.format(\"%s%s: %s\",\n         operation,\n         path !\u003d null ? (\" on \" + path) : \"\",\n         exception);\n     if (!(exception instanceof AmazonServiceException)) {\n       return new AWSClientIOException(message, exception);\n     } else {\n \n       IOException ioe;\n       AmazonServiceException ase \u003d (AmazonServiceException) exception;\n       // this exception is non-null if the service exception is an s3 one\n       AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n           ? (AmazonS3Exception) ase\n           : null;\n       int status \u003d ase.getStatusCode();\n       switch (status) {\n \n+      case 301:\n+        if (s3Exception !\u003d null) {\n+          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n+              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n+            message \u003d String.format(\"Received permanent redirect response to \"\n+                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n+                + \"configured in %s does not match the AWS region containing \"\n+                + \"the bucket.\",\n+                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n+          }\n+          ioe \u003d new AWSS3IOException(message, s3Exception);\n+        } else {\n+          ioe \u003d new AWSServiceIOException(message, ase);\n+        }\n+        break;\n       // permissions\n       case 401:\n       case 403:\n         ioe \u003d new AccessDeniedException(path, null, message);\n         ioe.initCause(ase);\n         break;\n \n       // the object isn\u0027t there\n       case 404:\n       case 410:\n         ioe \u003d new FileNotFoundException(message);\n         ioe.initCause(ase);\n         break;\n \n       // out of range. This may happen if an object is overwritten with\n       // a shorter one while it is being read.\n       case 416:\n         ioe \u003d new EOFException(message);\n         break;\n \n       default:\n         // no specific exit code. Choose an IOE subclass based on the class\n         // of the caught exception\n         ioe \u003d s3Exception !\u003d null\n             ? new AWSS3IOException(message, s3Exception)\n             : new AWSServiceIOException(message, ase);\n         break;\n       }\n       return ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(String operation,\n      String path,\n      AmazonClientException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      return new AWSClientIOException(message, exception);\n    } else {\n\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      switch (status) {\n\n      case 301:\n        if (s3Exception !\u003d null) {\n          if (s3Exception.getAdditionalDetails() !\u003d null \u0026\u0026\n              s3Exception.getAdditionalDetails().containsKey(ENDPOINT_KEY)) {\n            message \u003d String.format(\"Received permanent redirect response to \"\n                + \"endpoint %s.  This likely indicates that the S3 endpoint \"\n                + \"configured in %s does not match the AWS region containing \"\n                + \"the bucket.\",\n                s3Exception.getAdditionalDetails().get(ENDPOINT_KEY), ENDPOINT);\n          }\n          ioe \u003d new AWSS3IOException(message, s3Exception);\n        } else {\n          ioe \u003d new AWSServiceIOException(message, ase);\n        }\n        break;\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "39ec1515a205952eda7e171408a8b83eceb4abde": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
      "commitDate": "21/05/16 8:39 AM",
      "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,51 @@\n+  public static IOException translateException(String operation,\n+      String path,\n+      AmazonClientException exception) {\n+    String message \u003d String.format(\"%s%s: %s\",\n+        operation,\n+        path !\u003d null ? (\" on \" + path) : \"\",\n+        exception);\n+    if (!(exception instanceof AmazonServiceException)) {\n+      return new AWSClientIOException(message, exception);\n+    } else {\n+\n+      IOException ioe;\n+      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n+      // this exception is non-null if the service exception is an s3 one\n+      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n+          ? (AmazonS3Exception) ase\n+          : null;\n+      int status \u003d ase.getStatusCode();\n+      switch (status) {\n+\n+      // permissions\n+      case 401:\n+      case 403:\n+        ioe \u003d new AccessDeniedException(path, null, message);\n+        ioe.initCause(ase);\n+        break;\n+\n+      // the object isn\u0027t there\n+      case 404:\n+      case 410:\n+        ioe \u003d new FileNotFoundException(message);\n+        ioe.initCause(ase);\n+        break;\n+\n+      // out of range. This may happen if an object is overwritten with\n+      // a shorter one while it is being read.\n+      case 416:\n+        ioe \u003d new EOFException(message);\n+        break;\n+\n+      default:\n+        // no specific exit code. Choose an IOE subclass based on the class\n+        // of the caught exception\n+        ioe \u003d s3Exception !\u003d null\n+            ? new AWSS3IOException(message, s3Exception)\n+            : new AWSServiceIOException(message, ase);\n+        break;\n+      }\n+      return ioe;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException translateException(String operation,\n      String path,\n      AmazonClientException exception) {\n    String message \u003d String.format(\"%s%s: %s\",\n        operation,\n        path !\u003d null ? (\" on \" + path) : \"\",\n        exception);\n    if (!(exception instanceof AmazonServiceException)) {\n      return new AWSClientIOException(message, exception);\n    } else {\n\n      IOException ioe;\n      AmazonServiceException ase \u003d (AmazonServiceException) exception;\n      // this exception is non-null if the service exception is an s3 one\n      AmazonS3Exception s3Exception \u003d ase instanceof AmazonS3Exception\n          ? (AmazonS3Exception) ase\n          : null;\n      int status \u003d ase.getStatusCode();\n      switch (status) {\n\n      // permissions\n      case 401:\n      case 403:\n        ioe \u003d new AccessDeniedException(path, null, message);\n        ioe.initCause(ase);\n        break;\n\n      // the object isn\u0027t there\n      case 404:\n      case 410:\n        ioe \u003d new FileNotFoundException(message);\n        ioe.initCause(ase);\n        break;\n\n      // out of range. This may happen if an object is overwritten with\n      // a shorter one while it is being read.\n      case 416:\n        ioe \u003d new EOFException(message);\n        break;\n\n      default:\n        // no specific exit code. Choose an IOE subclass based on the class\n        // of the caught exception\n        ioe \u003d s3Exception !\u003d null\n            ? new AWSS3IOException(message, s3Exception)\n            : new AWSServiceIOException(message, ase);\n        break;\n      }\n      return ioe;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java"
    }
  }
}