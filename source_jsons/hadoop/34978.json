{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMTimelinePublisher.java",
  "functionName": "publishContainerLocalizationEvent",
  "functionId": "publishContainerLocalizationEvent___event-ContainerLocalizationEvent__eventType-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
  "functionStartLine": 363,
  "functionEndLine": 399,
  "numCommitsSeen": 33,
  "timeTaken": 3974,
  "changeHistory": [
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
    "092fead5d9875fb3760206bcdd76cdafec5e9481",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51"
  ],
  "changeHistoryShort": {
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676": "Ybodychange",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": "Ybodychange",
    "092fead5d9875fb3760206bcdd76cdafec5e9481": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ybodychange",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": "Yintroduced"
  },
  "changeHistoryDetails": {
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9418. ATSV2 /apps//entities/YARN_CONTAINER rest api does not show metrics. Contributed by Prabhu Joseph.\n",
      "commitDate": "01/04/19 11:06 AM",
      "commitName": "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.78,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n   private void publishContainerLocalizationEvent(\n       ContainerLocalizationEvent event, String eventType) {\n     if (publishNMContainerEvents) {\n       Container container \u003d event.getContainer();\n       ContainerId containerId \u003d container.getContainerId();\n       TimelineEntity entity \u003d createContainerEntity(containerId);\n \n       TimelineEvent tEvent \u003d new TimelineEvent();\n       tEvent.setId(eventType);\n       tEvent.setTimestamp(event.getTimestamp());\n       entity.addEvent(tEvent);\n-      entity.setIdPrefix(TimelineServiceHelper.\n-          invertLong(container.getContainerStartTime()));\n \n       ApplicationId appId \u003d container.getContainerId().\n           getApplicationAttemptId().getApplicationId();\n       try {\n         // no need to put it as part of publisher as timeline client already has\n         // Queuing concept\n         TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n         if (timelineClient !\u003d null) {\n           timelineClient.putEntitiesAsync(entity);\n         } else {\n           LOG.error(\"Seems like client has been removed before the event\"\n               + \" could be published for \" + container.getContainerId());\n         }\n       } catch (IOException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId());\n         LOG.debug(\"Failed to publish Container metrics for container {}\",\n             container.getContainerId(), e);\n       } catch (YarnException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId(), e.getMessage());\n         LOG.debug(\"Failed to publish Container metrics for container {}\",\n             container.getContainerId(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    if (publishNMContainerEvents) {\n      Container container \u003d event.getContainer();\n      ContainerId containerId \u003d container.getContainerId();\n      TimelineEntity entity \u003d createContainerEntity(containerId);\n\n      TimelineEvent tEvent \u003d new TimelineEvent();\n      tEvent.setId(eventType);\n      tEvent.setTimestamp(event.getTimestamp());\n      entity.addEvent(tEvent);\n\n      ApplicationId appId \u003d container.getContainerId().\n          getApplicationAttemptId().getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the event\"\n              + \" could be published for \" + container.getContainerId());\n        }\n      } catch (IOException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId());\n        LOG.debug(\"Failed to publish Container metrics for container {}\",\n            container.getContainerId(), e);\n      } catch (YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e.getMessage());\n        LOG.debug(\"Failed to publish Container metrics for container {}\",\n            container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/02/19 12:18 AM",
      "commitNameOld": "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 38.63,
      "commitsBetweenForRepo": 349,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,39 @@\n   private void publishContainerLocalizationEvent(\n       ContainerLocalizationEvent event, String eventType) {\n     if (publishNMContainerEvents) {\n       Container container \u003d event.getContainer();\n       ContainerId containerId \u003d container.getContainerId();\n       TimelineEntity entity \u003d createContainerEntity(containerId);\n \n       TimelineEvent tEvent \u003d new TimelineEvent();\n       tEvent.setId(eventType);\n       tEvent.setTimestamp(event.getTimestamp());\n       entity.addEvent(tEvent);\n       entity.setIdPrefix(TimelineServiceHelper.\n           invertLong(container.getContainerStartTime()));\n \n       ApplicationId appId \u003d container.getContainerId().\n           getApplicationAttemptId().getApplicationId();\n       try {\n         // no need to put it as part of publisher as timeline client already has\n         // Queuing concept\n         TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n         if (timelineClient !\u003d null) {\n           timelineClient.putEntitiesAsync(entity);\n         } else {\n           LOG.error(\"Seems like client has been removed before the event\"\n               + \" could be published for \" + container.getContainerId());\n         }\n       } catch (IOException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Failed to publish Container metrics for container \"\n-              + container.getContainerId(), e);\n-        }\n+        LOG.debug(\"Failed to publish Container metrics for container {}\",\n+            container.getContainerId(), e);\n       } catch (YarnException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId(), e.getMessage());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Failed to publish Container metrics for container \"\n-              + container.getContainerId(), e);\n-        }\n+        LOG.debug(\"Failed to publish Container metrics for container {}\",\n+            container.getContainerId(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    if (publishNMContainerEvents) {\n      Container container \u003d event.getContainer();\n      ContainerId containerId \u003d container.getContainerId();\n      TimelineEntity entity \u003d createContainerEntity(containerId);\n\n      TimelineEvent tEvent \u003d new TimelineEvent();\n      tEvent.setId(eventType);\n      tEvent.setTimestamp(event.getTimestamp());\n      entity.addEvent(tEvent);\n      entity.setIdPrefix(TimelineServiceHelper.\n          invertLong(container.getContainerStartTime()));\n\n      ApplicationId appId \u003d container.getContainerId().\n          getApplicationAttemptId().getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the event\"\n              + \" could be published for \" + container.getContainerId());\n        }\n      } catch (IOException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId());\n        LOG.debug(\"Failed to publish Container metrics for container {}\",\n            container.getContainerId(), e);\n      } catch (YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e.getMessage());\n        LOG.debug(\"Failed to publish Container metrics for container {}\",\n            container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6735. Have a way to turn off container metrics from NMs. Contributed by Abhishek Modi.\n",
      "commitDate": "05/02/19 12:18 AM",
      "commitName": "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "14/06/18 12:08 AM",
      "commitNameOld": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 236.05,
      "commitsBetweenForRepo": 1785,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   private void publishContainerLocalizationEvent(\n       ContainerLocalizationEvent event, String eventType) {\n-    Container container \u003d event.getContainer();\n-    ContainerId containerId \u003d container.getContainerId();\n-    TimelineEntity entity \u003d createContainerEntity(containerId);\n+    if (publishNMContainerEvents) {\n+      Container container \u003d event.getContainer();\n+      ContainerId containerId \u003d container.getContainerId();\n+      TimelineEntity entity \u003d createContainerEntity(containerId);\n \n-    TimelineEvent tEvent \u003d new TimelineEvent();\n-    tEvent.setId(eventType);\n-    tEvent.setTimestamp(event.getTimestamp());\n-    entity.addEvent(tEvent);\n-    entity.setIdPrefix(TimelineServiceHelper.\n-        invertLong(container.getContainerStartTime()));\n+      TimelineEvent tEvent \u003d new TimelineEvent();\n+      tEvent.setId(eventType);\n+      tEvent.setTimestamp(event.getTimestamp());\n+      entity.addEvent(tEvent);\n+      entity.setIdPrefix(TimelineServiceHelper.\n+          invertLong(container.getContainerStartTime()));\n \n-    ApplicationId appId \u003d\n-        container.getContainerId().getApplicationAttemptId().getApplicationId();\n-    try {\n-      // no need to put it as part of publisher as timeline client already has\n-      // Queuing concept\n-      TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n-      if (timelineClient !\u003d null) {\n-        timelineClient.putEntitiesAsync(entity);\n-      } else {\n-        LOG.error(\"Seems like client has been removed before the event could be\"\n-            + \" published for \" + container.getContainerId());\n-      }\n-    } catch (IOException e) {\n-      LOG.error(\"Failed to publish Container metrics for container \"\n-          + container.getContainerId());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Failed to publish Container metrics for container \"\n-            + container.getContainerId(), e);\n-      }\n-    } catch (YarnException e) {\n-      LOG.error(\"Failed to publish Container metrics for container \"\n-          + container.getContainerId(), e.getMessage());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Failed to publish Container metrics for container \"\n-            + container.getContainerId(), e);\n+      ApplicationId appId \u003d container.getContainerId().\n+          getApplicationAttemptId().getApplicationId();\n+      try {\n+        // no need to put it as part of publisher as timeline client already has\n+        // Queuing concept\n+        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n+        if (timelineClient !\u003d null) {\n+          timelineClient.putEntitiesAsync(entity);\n+        } else {\n+          LOG.error(\"Seems like client has been removed before the event\"\n+              + \" could be published for \" + container.getContainerId());\n+        }\n+      } catch (IOException e) {\n+        LOG.error(\"Failed to publish Container metrics for container \"\n+            + container.getContainerId());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Failed to publish Container metrics for container \"\n+              + container.getContainerId(), e);\n+        }\n+      } catch (YarnException e) {\n+        LOG.error(\"Failed to publish Container metrics for container \"\n+            + container.getContainerId(), e.getMessage());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Failed to publish Container metrics for container \"\n+              + container.getContainerId(), e);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    if (publishNMContainerEvents) {\n      Container container \u003d event.getContainer();\n      ContainerId containerId \u003d container.getContainerId();\n      TimelineEntity entity \u003d createContainerEntity(containerId);\n\n      TimelineEvent tEvent \u003d new TimelineEvent();\n      tEvent.setId(eventType);\n      tEvent.setTimestamp(event.getTimestamp());\n      entity.addEvent(tEvent);\n      entity.setIdPrefix(TimelineServiceHelper.\n          invertLong(container.getContainerStartTime()));\n\n      ApplicationId appId \u003d container.getContainerId().\n          getApplicationAttemptId().getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the event\"\n              + \" could be published for \" + container.getContainerId());\n        }\n      } catch (IOException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Failed to publish Container metrics for container \"\n              + container.getContainerId(), e);\n        }\n      } catch (YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e.getMessage());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Failed to publish Container metrics for container \"\n              + container.getContainerId(), e);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8155. Improve ATSv2 client logging in RM and NM publisher. Contributed by Abhishek Modi.\n",
      "commitDate": "14/06/18 12:08 AM",
      "commitName": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "14/05/18 11:08 AM",
      "commitNameOld": "2d00a0c71b5dde31e2cf8fcb96d9d541d41fb879",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 30.54,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,41 @@\n   private void publishContainerLocalizationEvent(\n       ContainerLocalizationEvent event, String eventType) {\n     Container container \u003d event.getContainer();\n     ContainerId containerId \u003d container.getContainerId();\n     TimelineEntity entity \u003d createContainerEntity(containerId);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(eventType);\n     tEvent.setTimestamp(event.getTimestamp());\n     entity.addEvent(tEvent);\n     entity.setIdPrefix(TimelineServiceHelper.\n         invertLong(container.getContainerStartTime()));\n \n     ApplicationId appId \u003d\n         container.getContainerId().getApplicationAttemptId().getApplicationId();\n     try {\n       // no need to put it as part of publisher as timeline client already has\n       // Queuing concept\n       TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n       if (timelineClient !\u003d null) {\n         timelineClient.putEntitiesAsync(entity);\n       } else {\n         LOG.error(\"Seems like client has been removed before the event could be\"\n             + \" published for \" + container.getContainerId());\n       }\n-    } catch (IOException | YarnException e) {\n+    } catch (IOException e) {\n       LOG.error(\"Failed to publish Container metrics for container \"\n-          + container.getContainerId(), e);\n+          + container.getContainerId());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Failed to publish Container metrics for container \"\n+            + container.getContainerId(), e);\n+      }\n+    } catch (YarnException e) {\n+      LOG.error(\"Failed to publish Container metrics for container \"\n+          + container.getContainerId(), e.getMessage());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Failed to publish Container metrics for container \"\n+            + container.getContainerId(), e);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    Container container \u003d event.getContainer();\n    ContainerId containerId \u003d container.getContainerId();\n    TimelineEntity entity \u003d createContainerEntity(containerId);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(eventType);\n    tEvent.setTimestamp(event.getTimestamp());\n    entity.addEvent(tEvent);\n    entity.setIdPrefix(TimelineServiceHelper.\n        invertLong(container.getContainerStartTime()));\n\n    ApplicationId appId \u003d\n        container.getContainerId().getApplicationAttemptId().getApplicationId();\n    try {\n      // no need to put it as part of publisher as timeline client already has\n      // Queuing concept\n      TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n      if (timelineClient !\u003d null) {\n        timelineClient.putEntitiesAsync(entity);\n      } else {\n        LOG.error(\"Seems like client has been removed before the event could be\"\n            + \" published for \" + container.getContainerId());\n      }\n    } catch (IOException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e);\n      }\n    } catch (YarnException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId(), e.getMessage());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "092fead5d9875fb3760206bcdd76cdafec5e9481": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5792. Adopt the id prefix for YARN, MR, and DS entities. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "278bd6fcff8d084acfd85b91a6f4ca7e189e742d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private void publishContainerLocalizationEvent(\n       ContainerLocalizationEvent event, String eventType) {\n     Container container \u003d event.getContainer();\n     ContainerId containerId \u003d container.getContainerId();\n     TimelineEntity entity \u003d createContainerEntity(containerId);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(eventType);\n     tEvent.setTimestamp(event.getTimestamp());\n     entity.addEvent(tEvent);\n+    entity.setIdPrefix(TimelineServiceHelper.\n+        invertLong(container.getContainerStartTime()));\n \n     ApplicationId appId \u003d\n         container.getContainerId().getApplicationAttemptId().getApplicationId();\n     try {\n       // no need to put it as part of publisher as timeline client already has\n       // Queuing concept\n       TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n       if (timelineClient !\u003d null) {\n         timelineClient.putEntitiesAsync(entity);\n       } else {\n         LOG.error(\"Seems like client has been removed before the event could be\"\n             + \" published for \" + container.getContainerId());\n       }\n     } catch (IOException | YarnException e) {\n       LOG.error(\"Failed to publish Container metrics for container \"\n           + container.getContainerId(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    Container container \u003d event.getContainer();\n    ContainerId containerId \u003d container.getContainerId();\n    TimelineEntity entity \u003d createContainerEntity(containerId);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(eventType);\n    tEvent.setTimestamp(event.getTimestamp());\n    entity.addEvent(tEvent);\n    entity.setIdPrefix(TimelineServiceHelper.\n        invertLong(container.getContainerStartTime()));\n\n    ApplicationId appId \u003d\n        container.getContainerId().getApplicationAttemptId().getApplicationId();\n    try {\n      // no need to put it as part of publisher as timeline client already has\n      // Queuing concept\n      TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n      if (timelineClient !\u003d null) {\n        timelineClient.putEntitiesAsync(entity);\n      } else {\n        LOG.error(\"Seems like client has been removed before the event could be\"\n            + \" published for \" + container.getContainerId());\n      }\n    } catch (IOException | YarnException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "06/01/17 6:41 PM",
      "commitNameOld": "a59df15757fac7f917cb96fc8fcfeb7017475e4f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 40.71,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void publishContainerLocalizationEvent(\n       ContainerLocalizationEvent event, String eventType) {\n     Container container \u003d event.getContainer();\n     ContainerId containerId \u003d container.getContainerId();\n     TimelineEntity entity \u003d createContainerEntity(containerId);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(eventType);\n     tEvent.setTimestamp(event.getTimestamp());\n     entity.addEvent(tEvent);\n \n     ApplicationId appId \u003d\n         container.getContainerId().getApplicationAttemptId().getApplicationId();\n     try {\n       // no need to put it as part of publisher as timeline client already has\n       // Queuing concept\n-      TimelineClient timelineClient \u003d getTimelineClient(appId);\n+      TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n       if (timelineClient !\u003d null) {\n         timelineClient.putEntitiesAsync(entity);\n       } else {\n         LOG.error(\"Seems like client has been removed before the event could be\"\n             + \" published for \" + container.getContainerId());\n       }\n     } catch (IOException | YarnException e) {\n       LOG.error(\"Failed to publish Container metrics for container \"\n           + container.getContainerId(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    Container container \u003d event.getContainer();\n    ContainerId containerId \u003d container.getContainerId();\n    TimelineEntity entity \u003d createContainerEntity(containerId);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(eventType);\n    tEvent.setTimestamp(event.getTimestamp());\n    entity.addEvent(tEvent);\n\n    ApplicationId appId \u003d\n        container.getContainerId().getApplicationAttemptId().getApplicationId();\n    try {\n      // no need to put it as part of publisher as timeline client already has\n      // Queuing concept\n      TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n      if (timelineClient !\u003d null) {\n        timelineClient.putEntitiesAsync(entity);\n      } else {\n        LOG.error(\"Seems like client has been removed before the event could be\"\n            + \" published for \" + container.getContainerId());\n      }\n    } catch (IOException | YarnException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  private void publishContainerCreatedEvent(ContainerEntity entity,\n-      ContainerId containerId, Resource resource, Priority priority,\n-      long timestamp) {\n-    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n-        resource.getMemory());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n-        resource.getVirtualCores());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n-        nodeId.getHost());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n-        nodeId.getPort());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n-        priority.toString());\n-    entityInfo.put(\n-        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n-        httpAddress);\n-    entity.setInfo(entityInfo);\n+  private void publishContainerLocalizationEvent(\n+      ContainerLocalizationEvent event, String eventType) {\n+    Container container \u003d event.getContainer();\n+    ContainerId containerId \u003d container.getContainerId();\n+    TimelineEntity entity \u003d createContainerEntity(containerId);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n-    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n-    tEvent.setTimestamp(timestamp);\n-\n+    tEvent.setId(eventType);\n+    tEvent.setTimestamp(event.getTimestamp());\n     entity.addEvent(tEvent);\n-    entity.setCreatedTime(timestamp);\n-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+\n+    ApplicationId appId \u003d\n+        container.getContainerId().getApplicationAttemptId().getApplicationId();\n+    try {\n+      // no need to put it as part of publisher as timeline client already has\n+      // Queuing concept\n+      TimelineClient timelineClient \u003d getTimelineClient(appId);\n+      if (timelineClient !\u003d null) {\n+        timelineClient.putEntitiesAsync(entity);\n+      } else {\n+        LOG.error(\"Seems like client has been removed before the event could be\"\n+            + \" published for \" + container.getContainerId());\n+      }\n+    } catch (IOException | YarnException e) {\n+      LOG.error(\"Failed to publish Container metrics for container \"\n+          + container.getContainerId(), e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    Container container \u003d event.getContainer();\n    ContainerId containerId \u003d container.getContainerId();\n    TimelineEntity entity \u003d createContainerEntity(containerId);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(eventType);\n    tEvent.setTimestamp(event.getTimestamp());\n    entity.addEvent(tEvent);\n\n    ApplicationId appId \u003d\n        container.getContainerId().getApplicationAttemptId().getApplicationId();\n    try {\n      // no need to put it as part of publisher as timeline client already has\n      // Queuing concept\n      TimelineClient timelineClient \u003d getTimelineClient(appId);\n      if (timelineClient !\u003d null) {\n        timelineClient.putEntitiesAsync(entity);\n      } else {\n        LOG.error(\"Seems like client has been removed before the event could be\"\n            + \" published for \" + container.getContainerId());\n      }\n    } catch (IOException | YarnException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "publishContainerCreatedEvent",
            "newValue": "publishContainerLocalizationEvent"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  private void publishContainerCreatedEvent(ContainerEntity entity,\n-      ContainerId containerId, Resource resource, Priority priority,\n-      long timestamp) {\n-    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n-        resource.getMemory());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n-        resource.getVirtualCores());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n-        nodeId.getHost());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n-        nodeId.getPort());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n-        priority.toString());\n-    entityInfo.put(\n-        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n-        httpAddress);\n-    entity.setInfo(entityInfo);\n+  private void publishContainerLocalizationEvent(\n+      ContainerLocalizationEvent event, String eventType) {\n+    Container container \u003d event.getContainer();\n+    ContainerId containerId \u003d container.getContainerId();\n+    TimelineEntity entity \u003d createContainerEntity(containerId);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n-    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n-    tEvent.setTimestamp(timestamp);\n-\n+    tEvent.setId(eventType);\n+    tEvent.setTimestamp(event.getTimestamp());\n     entity.addEvent(tEvent);\n-    entity.setCreatedTime(timestamp);\n-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+\n+    ApplicationId appId \u003d\n+        container.getContainerId().getApplicationAttemptId().getApplicationId();\n+    try {\n+      // no need to put it as part of publisher as timeline client already has\n+      // Queuing concept\n+      TimelineClient timelineClient \u003d getTimelineClient(appId);\n+      if (timelineClient !\u003d null) {\n+        timelineClient.putEntitiesAsync(entity);\n+      } else {\n+        LOG.error(\"Seems like client has been removed before the event could be\"\n+            + \" published for \" + container.getContainerId());\n+      }\n+    } catch (IOException | YarnException e) {\n+      LOG.error(\"Failed to publish Container metrics for container \"\n+          + container.getContainerId(), e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    Container container \u003d event.getContainer();\n    ContainerId containerId \u003d container.getContainerId();\n    TimelineEntity entity \u003d createContainerEntity(containerId);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(eventType);\n    tEvent.setTimestamp(event.getTimestamp());\n    entity.addEvent(tEvent);\n\n    ApplicationId appId \u003d\n        container.getContainerId().getApplicationAttemptId().getApplicationId();\n    try {\n      // no need to put it as part of publisher as timeline client already has\n      // Queuing concept\n      TimelineClient timelineClient \u003d getTimelineClient(appId);\n      if (timelineClient !\u003d null) {\n        timelineClient.putEntitiesAsync(entity);\n      } else {\n        LOG.error(\"Seems like client has been removed before the event could be\"\n            + \" published for \" + container.getContainerId());\n      }\n    } catch (IOException | YarnException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "[entity-ContainerEntity, containerId-ContainerId, resource-Resource, priority-Priority, timestamp-long]",
            "newValue": "[event-ContainerLocalizationEvent, eventType-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  private void publishContainerCreatedEvent(ContainerEntity entity,\n-      ContainerId containerId, Resource resource, Priority priority,\n-      long timestamp) {\n-    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n-        resource.getMemory());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n-        resource.getVirtualCores());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n-        nodeId.getHost());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n-        nodeId.getPort());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n-        priority.toString());\n-    entityInfo.put(\n-        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n-        httpAddress);\n-    entity.setInfo(entityInfo);\n+  private void publishContainerLocalizationEvent(\n+      ContainerLocalizationEvent event, String eventType) {\n+    Container container \u003d event.getContainer();\n+    ContainerId containerId \u003d container.getContainerId();\n+    TimelineEntity entity \u003d createContainerEntity(containerId);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n-    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n-    tEvent.setTimestamp(timestamp);\n-\n+    tEvent.setId(eventType);\n+    tEvent.setTimestamp(event.getTimestamp());\n     entity.addEvent(tEvent);\n-    entity.setCreatedTime(timestamp);\n-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+\n+    ApplicationId appId \u003d\n+        container.getContainerId().getApplicationAttemptId().getApplicationId();\n+    try {\n+      // no need to put it as part of publisher as timeline client already has\n+      // Queuing concept\n+      TimelineClient timelineClient \u003d getTimelineClient(appId);\n+      if (timelineClient !\u003d null) {\n+        timelineClient.putEntitiesAsync(entity);\n+      } else {\n+        LOG.error(\"Seems like client has been removed before the event could be\"\n+            + \" published for \" + container.getContainerId());\n+      }\n+    } catch (IOException | YarnException e) {\n+      LOG.error(\"Failed to publish Container metrics for container \"\n+          + container.getContainerId(), e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerLocalizationEvent(\n      ContainerLocalizationEvent event, String eventType) {\n    Container container \u003d event.getContainer();\n    ContainerId containerId \u003d container.getContainerId();\n    TimelineEntity entity \u003d createContainerEntity(containerId);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(eventType);\n    tEvent.setTimestamp(event.getTimestamp());\n    entity.addEvent(tEvent);\n\n    ApplicationId appId \u003d\n        container.getContainerId().getApplicationAttemptId().getApplicationId();\n    try {\n      // no need to put it as part of publisher as timeline client already has\n      // Queuing concept\n      TimelineClient timelineClient \u003d getTimelineClient(appId);\n      if (timelineClient !\u003d null) {\n        timelineClient.putEntitiesAsync(entity);\n      } else {\n        LOG.error(\"Seems like client has been removed before the event could be\"\n            + \" published for \" + container.getContainerId());\n      }\n    } catch (IOException | YarnException e) {\n      LOG.error(\"Failed to publish Container metrics for container \"\n          + container.getContainerId(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {}
        }
      ]
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   private void publishContainerCreatedEvent(ContainerEntity entity,\n       ContainerId containerId, Resource resource, Priority priority,\n       long timestamp) {\n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n         resource.getMemory());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n         resource.getVirtualCores());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n         nodeId.getHost());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n         nodeId.getPort());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n         priority.toString());\n     entityInfo.put(\n         ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n     tEvent.setTimestamp(timestamp);\n \n     entity.addEvent(tEvent);\n+    entity.setCreatedTime(timestamp);\n     putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEntity entity,\n      ContainerId containerId, Resource resource, Priority priority,\n      long timestamp) {\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemory());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        priority.toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(timestamp);\n\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(timestamp);\n    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3045. Implement NM writing container lifecycle events to Timeline Service v2. Contributed by Naganarasimha G R.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "477a30f536277bf95d7181bf1b2fdda52d83bf51",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,26 @@\n+  private void publishContainerCreatedEvent(ContainerEntity entity,\n+      ContainerId containerId, Resource resource, Priority priority,\n+      long timestamp) {\n+    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n+        resource.getMemory());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n+        resource.getVirtualCores());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n+        nodeId.getHost());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n+        nodeId.getPort());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n+        priority.toString());\n+    entityInfo.put(\n+        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n+        httpAddress);\n+    entity.setInfo(entityInfo);\n+\n+    TimelineEvent tEvent \u003d new TimelineEvent();\n+    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n+    tEvent.setTimestamp(timestamp);\n+\n+    entity.addEvent(tEvent);\n+    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEntity entity,\n      ContainerId containerId, Resource resource, Priority priority,\n      long timestamp) {\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemory());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        priority.toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(timestamp);\n\n    entity.addEvent(tEvent);\n    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java"
    }
  }
}