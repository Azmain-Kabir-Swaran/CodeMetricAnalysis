{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSStripedInputStream.java",
  "functionName": "fetchBlockByteRange",
  "functionId": "fetchBlockByteRange___block-LocatedBlock__start-long__end-long__buf-ByteBuffer__corruptedBlocks-CorruptedBlocks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
  "functionStartLine": 487,
  "functionEndLine": 515,
  "numCommitsSeen": 44,
  "timeTaken": 1710,
  "changeHistory": [
    "734d54c1a8950446e68098f62d8964e02ecc2890",
    "401db4fc65140979fe7665983e36905e886df971",
    "8808779db351fe444388d4acb3094766b5980718"
  ],
  "changeHistoryShort": {
    "734d54c1a8950446e68098f62d8964e02ecc2890": "Ybodychange",
    "401db4fc65140979fe7665983e36905e886df971": "Ymultichange(Yparameterchange,Ybodychange)",
    "8808779db351fe444388d4acb3094766b5980718": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "734d54c1a8950446e68098f62d8964e02ecc2890": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10861. Refactor StripeReaders and use ECChunk version decode API. Contributed by Sammi Chen\n",
      "commitDate": "21/09/16 6:34 AM",
      "commitName": "734d54c1a8950446e68098f62d8964e02ecc2890",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "08/09/16 11:54 AM",
      "commitNameOld": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 12.78,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   protected void fetchBlockByteRange(LocatedBlock block, long start,\n       long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     // Refresh the striped block group\n     LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n \n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n         ecPolicy, cellSize, blockGroup, start, end, buf);\n-    CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n-        dfsClient.getStripedReadsThreadPool());\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n     try {\n       for (AlignedStripe stripe : stripes) {\n         // Parse group to get chosen DN location\n-        StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n-            blks, preaderInfos, corruptedBlocks);\n-        preader.readStripe();\n+        StripeReader preader \u003d new PositionStripeReader(stripe, ecPolicy, blks,\n+            preaderInfos, corruptedBlocks, decoder, this);\n+        try {\n+          preader.readStripe();\n+        } finally {\n+          preader.close();\n+        }\n       }\n       buf.position(buf.position() + (int)(end - start + 1));\n     } finally {\n       for (BlockReaderInfo preaderInfo : preaderInfos) {\n         closeReader(preaderInfo);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void fetchBlockByteRange(LocatedBlock block, long start,\n      long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    // Refresh the striped block group\n    LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n        ecPolicy, cellSize, blockGroup, start, end, buf);\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n    try {\n      for (AlignedStripe stripe : stripes) {\n        // Parse group to get chosen DN location\n        StripeReader preader \u003d new PositionStripeReader(stripe, ecPolicy, blks,\n            preaderInfos, corruptedBlocks, decoder, this);\n        try {\n          preader.readStripe();\n        } finally {\n          preader.close();\n        }\n      }\n      buf.position(buf.position() + (int)(end - start + 1));\n    } finally {\n      for (BlockReaderInfo preaderInfo : preaderInfos) {\n        closeReader(preaderInfo);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
      "extendedDetails": {}
    },
    "401db4fc65140979fe7665983e36905e886df971": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
      "commitDate": "08/09/16 11:54 AM",
      "commitName": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
          "commitDate": "08/09/16 11:54 AM",
          "commitName": "401db4fc65140979fe7665983e36905e886df971",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "24/08/16 6:57 AM",
          "commitNameOld": "793447f79924c97c2b562d5e41fa85adf19673fe",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 15.21,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n   protected void fetchBlockByteRange(LocatedBlock block, long start,\n-      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)\n+      long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     // Refresh the striped block group\n     LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n \n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n-        ecPolicy, cellSize, blockGroup, start, end, buf, offset);\n+        ecPolicy, cellSize, blockGroup, start, end, buf);\n     CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n         dfsClient.getStripedReadsThreadPool());\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n     try {\n       for (AlignedStripe stripe : stripes) {\n         // Parse group to get chosen DN location\n         StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n             blks, preaderInfos, corruptedBlocks);\n         preader.readStripe();\n       }\n+      buf.position(buf.position() + (int)(end - start + 1));\n     } finally {\n       for (BlockReaderInfo preaderInfo : preaderInfos) {\n         closeReader(preaderInfo);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void fetchBlockByteRange(LocatedBlock block, long start,\n      long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    // Refresh the striped block group\n    LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n        ecPolicy, cellSize, blockGroup, start, end, buf);\n    CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n        dfsClient.getStripedReadsThreadPool());\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n    try {\n      for (AlignedStripe stripe : stripes) {\n        // Parse group to get chosen DN location\n        StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n            blks, preaderInfos, corruptedBlocks);\n        preader.readStripe();\n      }\n      buf.position(buf.position() + (int)(end - start + 1));\n    } finally {\n      for (BlockReaderInfo preaderInfo : preaderInfos) {\n        closeReader(preaderInfo);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
          "extendedDetails": {
            "oldValue": "[block-LocatedBlock, start-long, end-long, buf-byte[], offset-int, corruptedBlocks-CorruptedBlocks]",
            "newValue": "[block-LocatedBlock, start-long, end-long, buf-ByteBuffer, corruptedBlocks-CorruptedBlocks]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
          "commitDate": "08/09/16 11:54 AM",
          "commitName": "401db4fc65140979fe7665983e36905e886df971",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "24/08/16 6:57 AM",
          "commitNameOld": "793447f79924c97c2b562d5e41fa85adf19673fe",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 15.21,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n   protected void fetchBlockByteRange(LocatedBlock block, long start,\n-      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)\n+      long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     // Refresh the striped block group\n     LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n \n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n-        ecPolicy, cellSize, blockGroup, start, end, buf, offset);\n+        ecPolicy, cellSize, blockGroup, start, end, buf);\n     CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n         dfsClient.getStripedReadsThreadPool());\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n     try {\n       for (AlignedStripe stripe : stripes) {\n         // Parse group to get chosen DN location\n         StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n             blks, preaderInfos, corruptedBlocks);\n         preader.readStripe();\n       }\n+      buf.position(buf.position() + (int)(end - start + 1));\n     } finally {\n       for (BlockReaderInfo preaderInfo : preaderInfos) {\n         closeReader(preaderInfo);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void fetchBlockByteRange(LocatedBlock block, long start,\n      long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    // Refresh the striped block group\n    LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n        ecPolicy, cellSize, blockGroup, start, end, buf);\n    CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n        dfsClient.getStripedReadsThreadPool());\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n    try {\n      for (AlignedStripe stripe : stripes) {\n        // Parse group to get chosen DN location\n        StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n            blks, preaderInfos, corruptedBlocks);\n        preader.readStripe();\n      }\n      buf.position(buf.position() + (int)(end - start + 1));\n    } finally {\n      for (BlockReaderInfo preaderInfo : preaderInfos) {\n        closeReader(preaderInfo);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "8808779db351fe444388d4acb3094766b5980718": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
      "commitDate": "25/02/16 9:55 AM",
      "commitName": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n   protected void fetchBlockByteRange(LocatedBlock block, long start,\n-      long end, byte[] buf, int offset,\n-      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     // Refresh the striped block group\n     LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n \n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n         ecPolicy, cellSize, blockGroup, start, end, buf, offset);\n     CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n         dfsClient.getStripedReadsThreadPool());\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n     try {\n       for (AlignedStripe stripe : stripes) {\n         // Parse group to get chosen DN location\n         StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n-            blks, preaderInfos, corruptedBlockMap);\n+            blks, preaderInfos, corruptedBlocks);\n         preader.readStripe();\n       }\n     } finally {\n       for (BlockReaderInfo preaderInfo : preaderInfos) {\n         closeReader(preaderInfo);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void fetchBlockByteRange(LocatedBlock block, long start,\n      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    // Refresh the striped block group\n    LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n        ecPolicy, cellSize, blockGroup, start, end, buf, offset);\n    CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n        dfsClient.getStripedReadsThreadPool());\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n    try {\n      for (AlignedStripe stripe : stripes) {\n        // Parse group to get chosen DN location\n        StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n            blks, preaderInfos, corruptedBlocks);\n        preader.readStripe();\n      }\n    } finally {\n      for (BlockReaderInfo preaderInfo : preaderInfos) {\n        closeReader(preaderInfo);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
          "extendedDetails": {
            "oldValue": "[block-LocatedBlock, start-long, end-long, buf-byte[], offset-int, corruptedBlockMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]",
            "newValue": "[block-LocatedBlock, start-long, end-long, buf-byte[], offset-int, corruptedBlocks-CorruptedBlocks]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n   protected void fetchBlockByteRange(LocatedBlock block, long start,\n-      long end, byte[] buf, int offset,\n-      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     // Refresh the striped block group\n     LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n \n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n         ecPolicy, cellSize, blockGroup, start, end, buf, offset);\n     CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n         dfsClient.getStripedReadsThreadPool());\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n     try {\n       for (AlignedStripe stripe : stripes) {\n         // Parse group to get chosen DN location\n         StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n-            blks, preaderInfos, corruptedBlockMap);\n+            blks, preaderInfos, corruptedBlocks);\n         preader.readStripe();\n       }\n     } finally {\n       for (BlockReaderInfo preaderInfo : preaderInfos) {\n         closeReader(preaderInfo);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void fetchBlockByteRange(LocatedBlock block, long start,\n      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    // Refresh the striped block group\n    LocatedStripedBlock blockGroup \u003d getBlockGroupAt(block.getStartOffset());\n\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideByteRangeIntoStripes(\n        ecPolicy, cellSize, blockGroup, start, end, buf, offset);\n    CompletionService\u003cVoid\u003e readService \u003d new ExecutorCompletionService\u003c\u003e(\n        dfsClient.getStripedReadsThreadPool());\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    final BlockReaderInfo[] preaderInfos \u003d new BlockReaderInfo[groupSize];\n    try {\n      for (AlignedStripe stripe : stripes) {\n        // Parse group to get chosen DN location\n        StripeReader preader \u003d new PositionStripeReader(readService, stripe,\n            blks, preaderInfos, corruptedBlocks);\n        preader.readStripe();\n      }\n    } finally {\n      for (BlockReaderInfo preaderInfo : preaderInfos) {\n        closeReader(preaderInfo);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}