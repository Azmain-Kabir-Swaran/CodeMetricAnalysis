{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpServer2.java",
  "functionName": "getFilterInitializers",
  "functionId": "getFilterInitializers___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
  "functionStartLine": 756,
  "functionEndLine": 778,
  "numCommitsSeen": 116,
  "timeTaken": 3614,
  "changeHistory": [
    "294695dd57cb75f2756a31a54264bdd37b32bb01",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "294695dd57cb75f2756a31a54264bdd37b32bb01": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "294695dd57cb75f2756a31a54264bdd37b32bb01": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16314.  Make sure all web end points are covered by the same authentication filter.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "05/06/19 3:55 PM",
      "commitName": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/01/19 2:54 PM",
      "commitNameOld": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 152.0,
      "commitsBetweenForRepo": 1072,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,23 @@\n   private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n     if (conf \u003d\u003d null) {\n       return null;\n     }\n \n     Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n     if (classes \u003d\u003d null) {\n       return null;\n     }\n \n-    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n-    for(int i \u003d 0; i \u003c classes.length; i++) {\n+    List\u003cClass\u003c?\u003e\u003e classList \u003d new ArrayList\u003c\u003e(Arrays.asList(classes));\n+    if (classList.contains(AuthenticationFilterInitializer.class) \u0026\u0026\n+        classList.contains(ProxyUserAuthenticationFilterInitializer.class)) {\n+      classList.remove(AuthenticationFilterInitializer.class);\n+    }\n+\n+    FilterInitializer[] initializers \u003d new FilterInitializer[classList.size()];\n+    for(int i \u003d 0; i \u003c classList.size(); i++) {\n       initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n-          classes[i], conf);\n+          classList.get(i), conf);\n     }\n     return initializers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n    if (conf \u003d\u003d null) {\n      return null;\n    }\n\n    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n    if (classes \u003d\u003d null) {\n      return null;\n    }\n\n    List\u003cClass\u003c?\u003e\u003e classList \u003d new ArrayList\u003c\u003e(Arrays.asList(classes));\n    if (classList.contains(AuthenticationFilterInitializer.class) \u0026\u0026\n        classList.contains(ProxyUserAuthenticationFilterInitializer.class)) {\n      classList.remove(AuthenticationFilterInitializer.class);\n    }\n\n    FilterInitializer[] initializers \u003d new FilterInitializer[classList.size()];\n    for(int i \u003d 0; i \u003c classList.size(); i++) {\n      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n          classList.get(i), conf);\n    }\n    return initializers;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/01/14 10:41 PM",
      "commitNameOld": "87166f1ee81dbad579508c2bdbc7dda96b1ef809",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n    if (conf \u003d\u003d null) {\n      return null;\n    }\n\n    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n    if (classes \u003d\u003d null) {\n      return null;\n    }\n\n    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n    for(int i \u003d 0; i \u003c classes.length; i++) {\n      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n          classes[i], conf);\n    }\n    return initializers;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n    if (conf \u003d\u003d null) {\n      return null;\n    }\n\n    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n    if (classes \u003d\u003d null) {\n      return null;\n    }\n\n    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n    for(int i \u003d 0; i \u003c classes.length; i++) {\n      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n          classes[i], conf);\n    }\n    return initializers;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n    if (conf \u003d\u003d null) {\n      return null;\n    }\n\n    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n    if (classes \u003d\u003d null) {\n      return null;\n    }\n\n    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n    for(int i \u003d 0; i \u003c classes.length; i++) {\n      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n          classes[i], conf);\n    }\n    return initializers;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n    if (conf \u003d\u003d null) {\n      return null;\n    }\n\n    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n    if (classes \u003d\u003d null) {\n      return null;\n    }\n\n    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n    for(int i \u003d 0; i \u003c classes.length; i++) {\n      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n          classes[i], conf);\n    }\n    return initializers;\n  }",
      "path": "common/src/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "common/src/java/org/apache/hadoop/http/HttpServer.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,17 @@\n+  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n+    if (conf \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n+    if (classes \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n+    for(int i \u003d 0; i \u003c classes.length; i++) {\n+      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n+          classes[i], conf);\n+    }\n+    return initializers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static FilterInitializer[] getFilterInitializers(Configuration conf) {\n    if (conf \u003d\u003d null) {\n      return null;\n    }\n\n    Class\u003c?\u003e[] classes \u003d conf.getClasses(FILTER_INITIALIZER_PROPERTY);\n    if (classes \u003d\u003d null) {\n      return null;\n    }\n\n    FilterInitializer[] initializers \u003d new FilterInitializer[classes.length];\n    for(int i \u003d 0; i \u003c classes.length; i++) {\n      initializers[i] \u003d (FilterInitializer)ReflectionUtils.newInstance(\n          classes[i], conf);\n    }\n    return initializers;\n  }",
      "path": "src/java/org/apache/hadoop/http/HttpServer.java"
    }
  }
}