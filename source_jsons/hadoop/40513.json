{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultiNodeSorter.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/MultiNodeSorter.java",
  "functionStartLine": 97,
  "functionEndLine": 114,
  "numCommitsSeen": 2,
  "timeTaken": 1727,
  "changeHistory": [
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181"
  ],
  "changeHistoryShort": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,18 @@\n+  public void serviceStart() throws Exception {\n+    LOG.info(\"Starting SchedulingMonitor\u003d\" + getName());\n+    assert !stopped : \"starting when already stopped\";\n+    ses \u003d Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+      public Thread newThread(Runnable r) {\n+        Thread t \u003d new Thread(r);\n+        t.setName(getName());\n+        return t;\n+      }\n+    });\n+\n+    // Start sorter thread only if sorting interval is a +ve value.\n+    if(policySpec.getSortingInterval() !\u003d 0) {\n+      handler \u003d ses.scheduleAtFixedRate(new SortingThread(),\n+          0, policySpec.getSortingInterval(), TimeUnit.MILLISECONDS);\n+    }\n+    super.serviceStart();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    LOG.info(\"Starting SchedulingMonitor\u003d\" + getName());\n    assert !stopped : \"starting when already stopped\";\n    ses \u003d Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n      public Thread newThread(Runnable r) {\n        Thread t \u003d new Thread(r);\n        t.setName(getName());\n        return t;\n      }\n    });\n\n    // Start sorter thread only if sorting interval is a +ve value.\n    if(policySpec.getSortingInterval() !\u003d 0) {\n      handler \u003d ses.scheduleAtFixedRate(new SortingThread(),\n          0, policySpec.getSortingInterval(), TimeUnit.MILLISECONDS);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/MultiNodeSorter.java"
    }
  }
}