{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 1138,
  "functionEndLine": 1162,
  "numCommitsSeen": 159,
  "timeTaken": 4398,
  "changeHistory": [
    "5672ae7b37ce75086a1cb5bb9a388288fc913eb7",
    "d4d076876a8d0002bd3a73491d8459d11cb4896c",
    "23abb09c1f979d8c18ece81e32630a35ed569399",
    "aa4fe26a01d2ca881cb458d49032ce419351bed1",
    "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "2786e80436de5e27d4edc648bc882b77c922091a",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "5672ae7b37ce75086a1cb5bb9a388288fc913eb7": "Ybodychange",
    "d4d076876a8d0002bd3a73491d8459d11cb4896c": "Ybodychange",
    "23abb09c1f979d8c18ece81e32630a35ed569399": "Ybodychange",
    "aa4fe26a01d2ca881cb458d49032ce419351bed1": "Ybodychange",
    "7ba12a628ad8de8c3e00afb45228b3e9d82c129b": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "2786e80436de5e27d4edc648bc882b77c922091a": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5672ae7b37ce75086a1cb5bb9a388288fc913eb7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11861. ipc.Client.Connection#sendRpcRequest should log request name. Contributed by John Zhuge.\n",
      "commitDate": "07/06/17 3:52 PM",
      "commitName": "5672ae7b37ce75086a1cb5bb9a388288fc913eb7",
      "commitAuthor": "John Zhuge",
      "commitDateOld": "10/03/17 9:25 AM",
      "commitNameOld": "4478273e5fb731de93ff12e249a3137c38fcf46f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 89.23,
      "commitsBetweenForRepo": 489,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n           public void run() {\n             try {\n               synchronized (ipcStreams.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n-                  LOG.debug(getName() + \" sending #\" + call.id);\n+                  LOG.debug(getName() + \" sending #\" + call.id\n+                      + \" \" + call.rpcRequest);\n                 }\n                 // RpcRequestHeader + RpcRequest\n                 ipcStreams.sendRequest(buf.toByteArray());\n                 ipcStreams.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(buf);\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            try {\n              synchronized (ipcStreams.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id\n                      + \" \" + call.rpcRequest);\n                }\n                // RpcRequestHeader + RpcRequest\n                ipcStreams.sendRequest(buf.toByteArray());\n                ipcStreams.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "d4d076876a8d0002bd3a73491d8459d11cb4896c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10940. RPC client does no bounds checking of responses. Contributed by Daryn Sharp.\n",
      "commitDate": "09/09/16 8:39 AM",
      "commitName": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/09/16 9:03 AM",
      "commitNameOld": "23abb09c1f979d8c18ece81e32630a35ed569399",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.98,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n           public void run() {\n             try {\n-              synchronized (Connection.this.out) {\n+              synchronized (ipcStreams.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n                   LOG.debug(getName() + \" sending #\" + call.id);\n                 }\n-                buf.writeTo(out); // RpcRequestHeader + RpcRequest\n-                out.flush();\n+                // RpcRequestHeader + RpcRequest\n+                ipcStreams.sendRequest(buf.toByteArray());\n+                ipcStreams.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(buf);\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            try {\n              synchronized (ipcStreams.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id);\n                }\n                // RpcRequestHeader + RpcRequest\n                ipcStreams.sendRequest(buf.toByteArray());\n                ipcStreams.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "23abb09c1f979d8c18ece81e32630a35ed569399": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13547. Optimize IPC client protobuf decoding. Contributed by Daryn Sharp.\n",
      "commitDate": "02/09/16 9:03 AM",
      "commitName": "23abb09c1f979d8c18ece81e32630a35ed569399",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/06/16 12:45 AM",
      "commitNameOld": "d328e667067743f723e332d92154da8e84e65742",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 69.35,
      "commitsBetweenForRepo": 554,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,23 @@\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n-                \n-                if (LOG.isDebugEnabled())\n+                if (LOG.isDebugEnabled()) {\n                   LOG.debug(getName() + \" sending #\" + call.id);\n-         \n-                byte[] data \u003d d.getData();\n-                int totalLength \u003d d.getLength();\n-                out.writeInt(totalLength); // Total Length\n-                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n+                }\n+                buf.writeTo(out); // RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n-              IOUtils.closeStream(d);\n+              IOUtils.closeStream(buf);\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(getName() + \" sending #\" + call.id);\n                }\n                buf.writeTo(out); // RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(buf);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "aa4fe26a01d2ca881cb458d49032ce419351bed1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/12 2:16 PM",
      "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "10/12/12 1:25 PM",
      "commitNameOld": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 7.04,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n           public void run() {\n             try {\n               synchronized (Connection.this.out) {\n                 if (shouldCloseConnection.get()) {\n                   return;\n                 }\n                 \n                 if (LOG.isDebugEnabled())\n                   LOG.debug(getName() + \" sending #\" + call.id);\n          \n                 byte[] data \u003d d.getData();\n                 int totalLength \u003d d.getLength();\n                 out.writeInt(totalLength); // Total Length\n-                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                 out.flush();\n               }\n             } catch (IOException e) {\n               // exception at this point would leave the connection in an\n               // unrecoverable state (eg half a call left on the wire).\n               // So, close the connection, killing any outstanding calls\n               markClosed(e);\n             } finally {\n               //the buffer is just an in-memory buffer, but it is still polite to\n               // close early\n               IOUtils.closeStream(d);\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "7ba12a628ad8de8c3e00afb45228b3e9d82c129b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6762. Exception while doing RPC I/O closes channel. Contributed by Sam Rash and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 1:25 PM",
      "commitName": "7ba12a628ad8de8c3e00afb45228b3e9d82c129b",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "15/11/12 1:14 PM",
      "commitNameOld": "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 25.01,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n-    public void run() {\n-      if (LOG.isDebugEnabled())\n-        LOG.debug(getName() + \": starting, having connections \" \n-            + connections.size());\n-\n-      try {\n-        while (waitForWork()) {//wait here for work - read or close connection\n-          receiveResponse();\n-        }\n-      } catch (Throwable t) {\n-        // This truly is unexpected, since we catch IOException in receiveResponse\n-        // -- this is only to be really sure that we don\u0027t leave a client hanging\n-        // forever.\n-        LOG.warn(\"Unexpected error reading responses on connection \" + this, t);\n-        markClosed(new IOException(\"Error reading responses\", t));\n-      }\n-      \n-      close();\n-      \n-      if (LOG.isDebugEnabled())\n-        LOG.debug(getName() + \": stopped, remaining connections \"\n-            + connections.size());\n-    }\n\\ No newline at end of file\n+          public void run() {\n+            try {\n+              synchronized (Connection.this.out) {\n+                if (shouldCloseConnection.get()) {\n+                  return;\n+                }\n+                \n+                if (LOG.isDebugEnabled())\n+                  LOG.debug(getName() + \" sending #\" + call.id);\n+         \n+                byte[] data \u003d d.getData();\n+                int totalLength \u003d d.getLength();\n+                out.writeInt(totalLength); // Total Length\n+                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n+                out.flush();\n+              }\n+            } catch (IOException e) {\n+              // exception at this point would leave the connection in an\n+              // unrecoverable state (eg half a call left on the wire).\n+              // So, close the connection, killing any outstanding calls\n+              markClosed(e);\n+            } finally {\n+              //the buffer is just an in-memory buffer, but it is still polite to\n+              // close early\n+              IOUtils.closeStream(d);\n+            }\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            try {\n              synchronized (Connection.this.out) {\n                if (shouldCloseConnection.get()) {\n                  return;\n                }\n                \n                if (LOG.isDebugEnabled())\n                  LOG.debug(getName() + \" sending #\" + call.id);\n         \n                byte[] data \u003d d.getData();\n                int totalLength \u003d d.getLength();\n                out.writeInt(totalLength); // Total Length\n                out.write(data, 0, totalLength);//PayloadHeader + RpcRequest\n                out.flush();\n              }\n            } catch (IOException e) {\n              // exception at this point would leave the connection in an\n              // unrecoverable state (eg half a call left on the wire).\n              // So, close the connection, killing any outstanding calls\n              markClosed(e);\n            } finally {\n              //the buffer is just an in-memory buffer, but it is still polite to\n              // close early\n              IOUtils.closeStream(d);\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": starting, having connections \" \n            + connections.size());\n\n      try {\n        while (waitForWork()) {//wait here for work - read or close connection\n          receiveResponse();\n        }\n      } catch (Throwable t) {\n        // This truly is unexpected, since we catch IOException in receiveResponse\n        // -- this is only to be really sure that we don\u0027t leave a client hanging\n        // forever.\n        LOG.warn(\"Unexpected error reading responses on connection \" + this, t);\n        markClosed(new IOException(\"Error reading responses\", t));\n      }\n      \n      close();\n      \n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": stopped, remaining connections \"\n            + connections.size());\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": starting, having connections \" \n            + connections.size());\n\n      try {\n        while (waitForWork()) {//wait here for work - read or close connection\n          receiveResponse();\n        }\n      } catch (Throwable t) {\n        // This truly is unexpected, since we catch IOException in receiveResponse\n        // -- this is only to be really sure that we don\u0027t leave a client hanging\n        // forever.\n        LOG.warn(\"Unexpected error reading responses on connection \" + this, t);\n        markClosed(new IOException(\"Error reading responses\", t));\n      }\n      \n      close();\n      \n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": stopped, remaining connections \"\n            + connections.size());\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": starting, having connections \" \n            + connections.size());\n\n      try {\n        while (waitForWork()) {//wait here for work - read or close connection\n          receiveResponse();\n        }\n      } catch (Throwable t) {\n        // This truly is unexpected, since we catch IOException in receiveResponse\n        // -- this is only to be really sure that we don\u0027t leave a client hanging\n        // forever.\n        LOG.warn(\"Unexpected error reading responses on connection \" + this, t);\n        markClosed(new IOException(\"Error reading responses\", t));\n      }\n      \n      close();\n      \n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": stopped, remaining connections \"\n            + connections.size());\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "2786e80436de5e27d4edc648bc882b77c922091a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6723.  Unchecked exceptions thrown in IPC Connection should not orphan clients.  Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@947747 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/05/10 11:24 AM",
      "commitName": "2786e80436de5e27d4edc648bc882b77c922091a",
      "commitAuthor": "Thomas White",
      "commitDateOld": "14/05/10 12:00 PM",
      "commitNameOld": "1e15cf0355632bda48ec892d56f0e34f5c80c561",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,23 @@\n     public void run() {\n       if (LOG.isDebugEnabled())\n         LOG.debug(getName() + \": starting, having connections \" \n             + connections.size());\n \n-      while (waitForWork()) {//wait here for work - read or close connection\n-        receiveResponse();\n+      try {\n+        while (waitForWork()) {//wait here for work - read or close connection\n+          receiveResponse();\n+        }\n+      } catch (Throwable t) {\n+        // This truly is unexpected, since we catch IOException in receiveResponse\n+        // -- this is only to be really sure that we don\u0027t leave a client hanging\n+        // forever.\n+        LOG.warn(\"Unexpected error reading responses on connection \" + this, t);\n+        markClosed(new IOException(\"Error reading responses\", t));\n       }\n       \n       close();\n       \n       if (LOG.isDebugEnabled())\n         LOG.debug(getName() + \": stopped, remaining connections \"\n             + connections.size());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": starting, having connections \" \n            + connections.size());\n\n      try {\n        while (waitForWork()) {//wait here for work - read or close connection\n          receiveResponse();\n        }\n      } catch (Throwable t) {\n        // This truly is unexpected, since we catch IOException in receiveResponse\n        // -- this is only to be really sure that we don\u0027t leave a client hanging\n        // forever.\n        LOG.warn(\"Unexpected error reading responses on connection \" + this, t);\n        markClosed(new IOException(\"Error reading responses\", t));\n      }\n      \n      close();\n      \n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": stopped, remaining connections \"\n            + connections.size());\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,15 @@\n+    public void run() {\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(getName() + \": starting, having connections \" \n+            + connections.size());\n+\n+      while (waitForWork()) {//wait here for work - read or close connection\n+        receiveResponse();\n+      }\n+      \n+      close();\n+      \n+      if (LOG.isDebugEnabled())\n+        LOG.debug(getName() + \": stopped, remaining connections \"\n+            + connections.size());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": starting, having connections \" \n            + connections.size());\n\n      while (waitForWork()) {//wait here for work - read or close connection\n        receiveResponse();\n      }\n      \n      close();\n      \n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": stopped, remaining connections \"\n            + connections.size());\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}