{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultRequestInterceptor.java",
  "functionName": "allocate",
  "functionId": "allocate___request-AllocateRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
  "functionStartLine": 218,
  "functionEndLine": 221,
  "numCommitsSeen": 11,
  "timeTaken": 1596,
  "changeHistory": [
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02"
  ],
  "changeHistoryShort": {
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Ymultichange(Ybodychange,Yparametermetachange)",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
          "commitDate": "24/04/16 10:38 PM",
          "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "27/03/16 8:22 PM",
          "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 28.09,
          "commitsBetweenForRepo": 183,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,4 @@\n-  public AllocateResponse allocate(final AllocateRequest request)\n-      throws YarnException, IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Forwarding allocate request to the real YARN RM\");\n-    }\n-    AllocateResponse allocateResponse \u003d rmClient.allocate(request);\n-    if (allocateResponse.getAMRMToken() !\u003d null) {\n-      updateAMRMToken(allocateResponse.getAMRMToken());\n-    }\n-\n-    return allocateResponse;\n-  }\n\\ No newline at end of file\n+        public AllocateResponse allocate(AllocateRequest request) throws\n+            YarnException, IOException {\n+          return rmClient.allocate(request);\n+        }\n\\ No newline at end of file\n",
          "actualSource": "        public AllocateResponse allocate(AllocateRequest request) throws\n            YarnException, IOException {\n          return rmClient.allocate(request);\n        }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
          "commitDate": "24/04/16 10:38 PM",
          "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "27/03/16 8:22 PM",
          "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 28.09,
          "commitsBetweenForRepo": 183,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,4 @@\n-  public AllocateResponse allocate(final AllocateRequest request)\n-      throws YarnException, IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Forwarding allocate request to the real YARN RM\");\n-    }\n-    AllocateResponse allocateResponse \u003d rmClient.allocate(request);\n-    if (allocateResponse.getAMRMToken() !\u003d null) {\n-      updateAMRMToken(allocateResponse.getAMRMToken());\n-    }\n-\n-    return allocateResponse;\n-  }\n\\ No newline at end of file\n+        public AllocateResponse allocate(AllocateRequest request) throws\n+            YarnException, IOException {\n+          return rmClient.allocate(request);\n+        }\n\\ No newline at end of file\n",
          "actualSource": "        public AllocateResponse allocate(AllocateRequest request) throws\n            YarnException, IOException {\n          return rmClient.allocate(request);\n        }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
          "extendedDetails": {
            "oldValue": "[request-AllocateRequest(modifiers-final)]",
            "newValue": "[request-AllocateRequest]"
          }
        }
      ]
    },
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2884. Added a proxy service in NM to proxy the the communication between AM and RM. Contributed by Kishore Chaliparambil\n",
      "commitDate": "07/09/15 6:35 PM",
      "commitName": "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,12 @@\n+  public AllocateResponse allocate(final AllocateRequest request)\n+      throws YarnException, IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Forwarding allocate request to the real YARN RM\");\n+    }\n+    AllocateResponse allocateResponse \u003d rmClient.allocate(request);\n+    if (allocateResponse.getAMRMToken() !\u003d null) {\n+      updateAMRMToken(allocateResponse.getAMRMToken());\n+    }\n+\n+    return allocateResponse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AllocateResponse allocate(final AllocateRequest request)\n      throws YarnException, IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Forwarding allocate request to the real YARN RM\");\n    }\n    AllocateResponse allocateResponse \u003d rmClient.allocate(request);\n    if (allocateResponse.getAMRMToken() !\u003d null) {\n      updateAMRMToken(allocateResponse.getAMRMToken());\n    }\n\n    return allocateResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java"
    }
  }
}