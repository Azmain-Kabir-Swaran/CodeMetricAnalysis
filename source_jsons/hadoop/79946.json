{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawLocalFileSystem.java",
  "functionName": "handleEmptyDstDirectoryOnWindows",
  "functionId": "handleEmptyDstDirectoryOnWindows___src-Path__srcFile-File__dst-Path__dstFile-File",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
  "functionStartLine": 403,
  "functionEndLine": 429,
  "numCommitsSeen": 53,
  "timeTaken": 1781,
  "changeHistory": [
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "5763b173d34dcf7372520076f00b576f493662cd"
  ],
  "changeHistoryShort": {
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": "Ybodychange",
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "5763b173d34dcf7372520076f00b576f493662cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12940. Fix warnings from Spotbugs in hadoop-common.\n",
      "commitDate": "22/06/17 6:28 PM",
      "commitName": "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/04/17 6:33 PM",
      "commitNameOld": "d11d280b8b527d572ca0b29ef57434e9ff533ffe",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 58.0,
      "commitsBetweenForRepo": 306,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   public final boolean handleEmptyDstDirectoryOnWindows(Path src, File srcFile,\n       Path dst, File dstFile) throws IOException {\n \n     // Enforce POSIX rename behavior that a source directory replaces an\n     // existing destination if the destination is an empty directory. On most\n     // platforms, this is already handled by the Java API call above. Some\n     // platforms (notably Windows) do not provide this behavior, so the Java API\n     // call renameTo(dstFile) fails. Delete destination and attempt rename\n     // again.\n     try {\n       FileStatus sdst \u003d this.getFileStatus(dst);\n-      if (sdst.isDirectory() \u0026\u0026 dstFile.list().length \u003d\u003d 0) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Deleting empty destination and renaming \" + src + \" to \" +\n-              dst);\n-        }\n-        if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n-          return true;\n+      String[] dstFileList \u003d dstFile.list();\n+      if (dstFileList !\u003d null) {\n+        if (sdst.isDirectory() \u0026\u0026 dstFileList.length \u003d\u003d 0) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Deleting empty destination and renaming \" + src +\n+                \" to \" + dst);\n+          }\n+          if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n+            return true;\n+          }\n         }\n       }\n     } catch (FileNotFoundException ignored) {\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final boolean handleEmptyDstDirectoryOnWindows(Path src, File srcFile,\n      Path dst, File dstFile) throws IOException {\n\n    // Enforce POSIX rename behavior that a source directory replaces an\n    // existing destination if the destination is an empty directory. On most\n    // platforms, this is already handled by the Java API call above. Some\n    // platforms (notably Windows) do not provide this behavior, so the Java API\n    // call renameTo(dstFile) fails. Delete destination and attempt rename\n    // again.\n    try {\n      FileStatus sdst \u003d this.getFileStatus(dst);\n      String[] dstFileList \u003d dstFile.list();\n      if (dstFileList !\u003d null) {\n        if (sdst.isDirectory() \u0026\u0026 dstFileList.length \u003d\u003d 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Deleting empty destination and renaming \" + src +\n                \" to \" + dst);\n          }\n          if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n            return true;\n          }\n        }\n      }\n    } catch (FileNotFoundException ignored) {\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "18/10/16 6:18 PM",
      "commitNameOld": "efdf810cf9f72d78e97e860576c64a382ece437c",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 27.73,
      "commitsBetweenForRepo": 271,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public final boolean handleEmptyDstDirectoryOnWindows(Path src, File srcFile,\n       Path dst, File dstFile) throws IOException {\n \n     // Enforce POSIX rename behavior that a source directory replaces an\n     // existing destination if the destination is an empty directory. On most\n     // platforms, this is already handled by the Java API call above. Some\n     // platforms (notably Windows) do not provide this behavior, so the Java API\n     // call renameTo(dstFile) fails. Delete destination and attempt rename\n     // again.\n-    if (this.exists(dst)) {\n+    try {\n       FileStatus sdst \u003d this.getFileStatus(dst);\n       if (sdst.isDirectory() \u0026\u0026 dstFile.list().length \u003d\u003d 0) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Deleting empty destination and renaming \" + src + \" to \" +\n-            dst);\n+              dst);\n         }\n         if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n           return true;\n         }\n       }\n+    } catch (FileNotFoundException ignored) {\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final boolean handleEmptyDstDirectoryOnWindows(Path src, File srcFile,\n      Path dst, File dstFile) throws IOException {\n\n    // Enforce POSIX rename behavior that a source directory replaces an\n    // existing destination if the destination is an empty directory. On most\n    // platforms, this is already handled by the Java API call above. Some\n    // platforms (notably Windows) do not provide this behavior, so the Java API\n    // call renameTo(dstFile) fails. Delete destination and attempt rename\n    // again.\n    try {\n      FileStatus sdst \u003d this.getFileStatus(dst);\n      if (sdst.isDirectory() \u0026\u0026 dstFile.list().length \u003d\u003d 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Deleting empty destination and renaming \" + src + \" to \" +\n              dst);\n        }\n        if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n          return true;\n        }\n      }\n    } catch (FileNotFoundException ignored) {\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "5763b173d34dcf7372520076f00b576f493662cd": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9805. Refactor RawLocalFileSystem#rename for improved testability. Contributed by Jean-Pierre Matsumoto.\n",
      "commitDate": "02/04/15 4:13 PM",
      "commitName": "5763b173d34dcf7372520076f00b576f493662cd",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,23 @@\n+  public final boolean handleEmptyDstDirectoryOnWindows(Path src, File srcFile,\n+      Path dst, File dstFile) throws IOException {\n+\n+    // Enforce POSIX rename behavior that a source directory replaces an\n+    // existing destination if the destination is an empty directory. On most\n+    // platforms, this is already handled by the Java API call above. Some\n+    // platforms (notably Windows) do not provide this behavior, so the Java API\n+    // call renameTo(dstFile) fails. Delete destination and attempt rename\n+    // again.\n+    if (this.exists(dst)) {\n+      FileStatus sdst \u003d this.getFileStatus(dst);\n+      if (sdst.isDirectory() \u0026\u0026 dstFile.list().length \u003d\u003d 0) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Deleting empty destination and renaming \" + src + \" to \" +\n+            dst);\n+        }\n+        if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public final boolean handleEmptyDstDirectoryOnWindows(Path src, File srcFile,\n      Path dst, File dstFile) throws IOException {\n\n    // Enforce POSIX rename behavior that a source directory replaces an\n    // existing destination if the destination is an empty directory. On most\n    // platforms, this is already handled by the Java API call above. Some\n    // platforms (notably Windows) do not provide this behavior, so the Java API\n    // call renameTo(dstFile) fails. Delete destination and attempt rename\n    // again.\n    if (this.exists(dst)) {\n      FileStatus sdst \u003d this.getFileStatus(dst);\n      if (sdst.isDirectory() \u0026\u0026 dstFile.list().length \u003d\u003d 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Deleting empty destination and renaming \" + src + \" to \" +\n            dst);\n        }\n        if (this.delete(dst, false) \u0026\u0026 srcFile.renameTo(dstFile)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
    }
  }
}