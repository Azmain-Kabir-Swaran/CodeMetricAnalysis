{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDownload.java",
  "functionName": "call",
  "functionId": "call",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
  "functionStartLine": 393,
  "functionEndLine": 440,
  "numCommitsSeen": 31,
  "timeTaken": 10307,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "c7101fe21ba7b9aa589f0a9266ed34356f30b35f",
    "7288b08330001102f944124d18e02bf0585d3e96",
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
    "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
    "3a54a5653bf1ea0b5b98e223c7500a9606abf04d",
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
    "2526a96aaa349d5514a8e8119373af9aed50cc5a",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
    "5f9e67e226c572018b274f17e85e4aab6ebab44b",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "c7101fe21ba7b9aa589f0a9266ed34356f30b35f": "Ybodychange",
    "7288b08330001102f944124d18e02bf0585d3e96": "Ybodychange",
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662": "Ybodychange",
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34": "Ybodychange",
    "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15": "Ybodychange",
    "3a54a5653bf1ea0b5b98e223c7500a9606abf04d": "Ybodychange",
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92": "Ybodychange",
    "2526a96aaa349d5514a8e8119373af9aed50cc5a": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ybodychange",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": "Yfilerename",
    "5f9e67e226c572018b274f17e85e4aab6ebab44b": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,48 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(String.format(\"Starting to download %s %s %s\",\n-          sCopy,\n-          resource.getType(),\n-          resource.getPattern()));\n-    }\n+    LOG.debug(\"Starting to download {} {} {}\", sCopy,\n+        resource.getType(), resource.getPattern());\n \n     final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n     createDir(destinationTmp, cachePerms);\n     Path dFinal \u003d\n         files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n     try {\n       if (userUgi \u003d\u003d null) {\n         verifyAndCopy(dFinal);\n       } else {\n         userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws Exception {\n             verifyAndCopy(dFinal);\n             return null;\n           }\n         });\n       }\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n-            new Path(destDirPath, sCopy.getName()), sCopy));\n-      }\n+      LOG.debug(\"File has been downloaded to {} from {}\",\n+          new Path(destDirPath, sCopy.getName()), sCopy);\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n         files.delete(destinationTmp, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    LOG.debug(\"Starting to download {} {} {}\", sCopy,\n        resource.getType(), resource.getPattern());\n\n    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n    createDir(destinationTmp, cachePerms);\n    Path dFinal \u003d\n        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n    try {\n      if (userUgi \u003d\u003d null) {\n        verifyAndCopy(dFinal);\n      } else {\n        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            verifyAndCopy(dFinal);\n            return null;\n          }\n        });\n      }\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n\n      LOG.debug(\"File has been downloaded to {} from {}\",\n          new Path(destDirPath, sCopy.getName()), sCopy);\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(destinationTmp, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "c7101fe21ba7b9aa589f0a9266ed34356f30b35f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7879. NM user is unable to access the application filecache due to permissions. Contributed by Jason Lowe.\n",
      "commitDate": "02/02/18 4:48 PM",
      "commitName": "c7101fe21ba7b9aa589f0a9266ed34356f30b35f",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "31/01/18 7:39 AM",
      "commitNameOld": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 2.38,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,54 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(String.format(\"Starting to download %s %s %s\",\n           sCopy,\n           resource.getType(),\n           resource.getPattern()));\n     }\n \n     final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n-    createDir(destinationTmp, PRIVATE_DIR_PERMS);\n+    createDir(destinationTmp, cachePerms);\n     Path dFinal \u003d\n         files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n     try {\n       if (userUgi \u003d\u003d null) {\n         verifyAndCopy(dFinal);\n       } else {\n         userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws Exception {\n             verifyAndCopy(dFinal);\n             return null;\n           }\n         });\n       }\n-      Path destinationTmpfilesQualified \u003d files.makeQualified(destinationTmp);\n-      changePermissions(\n-          destinationTmpfilesQualified.getFileSystem(conf),\n-          destinationTmpfilesQualified);\n+      changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n             new Path(destDirPath, sCopy.getName()), sCopy));\n       }\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n         files.delete(destinationTmp, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(\"Starting to download %s %s %s\",\n          sCopy,\n          resource.getType(),\n          resource.getPattern()));\n    }\n\n    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n    createDir(destinationTmp, cachePerms);\n    Path dFinal \u003d\n        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n    try {\n      if (userUgi \u003d\u003d null) {\n        verifyAndCopy(dFinal);\n      } else {\n        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            verifyAndCopy(dFinal);\n            return null;\n          }\n        });\n      }\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n            new Path(destDirPath, sCopy.getName()), sCopy));\n      }\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(destinationTmp, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "7288b08330001102f944124d18e02bf0585d3e96": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "31/01/18 7:39 AM",
      "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "30/01/18 6:34 AM",
      "commitNameOld": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,57 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Starting to download \" + sCopy);\n+      LOG.debug(String.format(\"Starting to download %s %s %s\",\n+          sCopy,\n+          resource.getType(),\n+          resource.getPattern()));\n     }\n \n-    createDir(destDirPath, cachePerms);\n-    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n-    createDir(dst_work, cachePerms);\n-    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n+    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n+    createDir(destinationTmp, PRIVATE_DIR_PERMS);\n+    Path dFinal \u003d\n+        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n     try {\n-      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n-          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n-            public Path run() throws Exception {\n-              return files.makeQualified(copy(sCopy, dst_work));\n-            };\n-          });\n-      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n-      changePermissions(dFinal.getFileSystem(conf), dFinal);\n-      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n+      if (userUgi \u003d\u003d null) {\n+        verifyAndCopy(dFinal);\n+      } else {\n+        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws Exception {\n+            verifyAndCopy(dFinal);\n+            return null;\n+          }\n+        });\n+      }\n+      Path destinationTmpfilesQualified \u003d files.makeQualified(destinationTmp);\n+      changePermissions(\n+          destinationTmpfilesQualified.getFileSystem(conf),\n+          destinationTmpfilesQualified);\n+      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"File has been downloaded to \" +\n-            new Path(destDirPath, sCopy.getName()));\n+        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n+            new Path(destDirPath, sCopy.getName()), sCopy));\n       }\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n-        files.delete(dst_work, true);\n+        files.delete(destinationTmp, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(\"Starting to download %s %s %s\",\n          sCopy,\n          resource.getType(),\n          resource.getPattern()));\n    }\n\n    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n    createDir(destinationTmp, PRIVATE_DIR_PERMS);\n    Path dFinal \u003d\n        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n    try {\n      if (userUgi \u003d\u003d null) {\n        verifyAndCopy(dFinal);\n      } else {\n        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            verifyAndCopy(dFinal);\n            return null;\n          }\n        });\n      }\n      Path destinationTmpfilesQualified \u003d files.makeQualified(destinationTmp);\n      changePermissions(\n          destinationTmpfilesQualified.getFileSystem(conf),\n          destinationTmpfilesQualified);\n      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n            new Path(destDirPath, sCopy.getName()), sCopy));\n      }\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(destinationTmp, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
      "commitDate": "30/01/18 6:34 AM",
      "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/01/18 11:25 AM",
      "commitNameOld": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 3.8,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,47 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(String.format(\"Starting to download %s %s %s\",\n-          sCopy,\n-          resource.getType(),\n-          resource.getPattern()));\n+      LOG.debug(\"Starting to download \" + sCopy);\n     }\n \n-    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n-    createDir(destinationTmp, PRIVATE_DIR_PERMS);\n-    Path dFinal \u003d\n-        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n+    createDir(destDirPath, cachePerms);\n+    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n+    createDir(dst_work, cachePerms);\n+    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n-      if (userUgi \u003d\u003d null) {\n-        verifyAndCopy(dFinal);\n-      } else {\n-        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n-          @Override\n-          public Void run() throws Exception {\n-            verifyAndCopy(dFinal);\n-            return null;\n-          }\n-        });\n-      }\n+      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n+          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n+            public Path run() throws Exception {\n+              return files.makeQualified(copy(sCopy, dst_work));\n+            };\n+          });\n+      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n-      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n+      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n-            new Path(destDirPath, sCopy.getName()), sCopy));\n+        LOG.debug(\"File has been downloaded to \" +\n+            new Path(destDirPath, sCopy.getName()));\n       }\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n-        files.delete(destinationTmp, true);\n+        files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Starting to download \" + sCopy);\n    }\n\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n          });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"File has been downloaded to \" +\n            new Path(destDirPath, sCopy.getName()));\n      }\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "26/01/18 11:25 AM",
      "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "20/10/17 10:00 AM",
      "commitNameOld": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 98.1,
      "commitsBetweenForRepo": 645,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,54 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Starting to download \" + sCopy);\n+      LOG.debug(String.format(\"Starting to download %s %s %s\",\n+          sCopy,\n+          resource.getType(),\n+          resource.getPattern()));\n     }\n \n-    createDir(destDirPath, cachePerms);\n-    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n-    createDir(dst_work, cachePerms);\n-    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n+    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n+    createDir(destinationTmp, PRIVATE_DIR_PERMS);\n+    Path dFinal \u003d\n+        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n     try {\n-      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n-          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n-            public Path run() throws Exception {\n-              return files.makeQualified(copy(sCopy, dst_work));\n-            };\n-          });\n-      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n+      if (userUgi \u003d\u003d null) {\n+        verifyAndCopy(dFinal);\n+      } else {\n+        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws Exception {\n+            verifyAndCopy(dFinal);\n+            return null;\n+          }\n+        });\n+      }\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n-      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n+      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"File has been downloaded to \" +\n-            new Path(destDirPath, sCopy.getName()));\n+        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n+            new Path(destDirPath, sCopy.getName()), sCopy));\n       }\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n-        files.delete(dst_work, true);\n+        files.delete(destinationTmp, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(\"Starting to download %s %s %s\",\n          sCopy,\n          resource.getType(),\n          resource.getPattern()));\n    }\n\n    final Path destinationTmp \u003d new Path(destDirPath + \"_tmp\");\n    createDir(destinationTmp, PRIVATE_DIR_PERMS);\n    Path dFinal \u003d\n        files.makeQualified(new Path(destinationTmp, sCopy.getName()));\n    try {\n      if (userUgi \u003d\u003d null) {\n        verifyAndCopy(dFinal);\n      } else {\n        userUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            verifyAndCopy(dFinal);\n            return null;\n          }\n        });\n      }\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\"File has been downloaded to %s from %s\",\n            new Path(destDirPath, sCopy.getName()), sCopy));\n      }\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(destinationTmp, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7261. Add debug message for better download latency monitoring. (Yufei Gu)\n",
      "commitDate": "20/10/17 10:00 AM",
      "commitName": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "07/12/16 3:07 PM",
      "commitNameOld": "72fe54684198b7df5c5fb2114616dff6d17a4402",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 316.75,
      "commitsBetweenForRepo": 1952,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,47 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Starting to download \" + sCopy);\n+    }\n+\n     createDir(destDirPath, cachePerms);\n     final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n     createDir(dst_work, cachePerms);\n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n           : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n           });\n       unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"File has been downloaded to \" +\n+            new Path(destDirPath, sCopy.getName()));\n+      }\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Starting to download \" + sCopy);\n    }\n\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n          });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"File has been downloaded to \" +\n            new Path(destDirPath, sCopy.getName()));\n      }\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 469.7,
      "commitsBetweenForRepo": 3517,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n-      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n+      sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n     createDir(destDirPath, cachePerms);\n     final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n     createDir(dst_work, cachePerms);\n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n           : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n           });\n       unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n          });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2707. Potential null dereference in FSDownload. Contributed by Gera Shegalov\n",
      "commitDate": "31/10/14 3:53 PM",
      "commitName": "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "21/07/14 9:58 PM",
      "commitNameOld": "70dededdc983646f65176d979f3a0616f49f86eb",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 101.75,
      "commitsBetweenForRepo": 1010,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,37 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n     createDir(destDirPath, cachePerms);\n     final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n     createDir(dst_work, cachePerms);\n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n           : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n           });\n-      Pattern pattern \u003d null;\n-      String p \u003d resource.getPattern();\n-      if (p !\u003d null) {\n-        pattern \u003d Pattern.compile(p);\n-      }\n-      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()), pattern);\n+      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) {\n       }\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n          });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "3a54a5653bf1ea0b5b98e223c7500a9606abf04d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-112. Fixed a race condition during localization that fails containers. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5138. Fix LocalDistributedCacheManager after YARN-112. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466196 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/13 12:56 PM",
      "commitName": "3a54a5653bf1ea0b5b98e223c7500a9606abf04d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/03/13 8:46 AM",
      "commitNameOld": "c02dd9aa4b7e6dce4549f124ee636a99ff96ea67",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 15.17,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,42 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n-    Path tmp;\n-    do {\n-      tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n-    } while (files.util().exists(tmp));\n-    destDirPath \u003d tmp;\n     createDir(destDirPath, cachePerms);\n     final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n     createDir(dst_work, cachePerms);\n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n           : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n           });\n       Pattern pattern \u003d null;\n       String p \u003d resource.getPattern();\n       if (p !\u003d null) {\n         pattern \u003d Pattern.compile(p);\n       }\n       unpack(new File(dTmp.toUri()), new File(dFinal.toUri()), pattern);\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n     } catch (Exception e) {\n       try {\n         files.delete(destDirPath, true);\n       } catch (IOException ignore) {\n       }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) {\n       }\n-      // clear ref to internal var\n-      rand \u003d null;\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi ? files.makeQualified(copy(sCopy, dst_work))\n          : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n          });\n      Pattern pattern \u003d null;\n      String p \u003d resource.getPattern();\n      if (p !\u003d null) {\n        pattern \u003d Pattern.compile(p);\n      }\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()), pattern);\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try {\n        files.delete(destDirPath, true);\n      } catch (IOException ignore) {\n      }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) {\n      }\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4647. We should only unjar jobjar if there is a lib directory in it. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:22 AM",
      "commitName": "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/09/12 2:05 PM",
      "commitNameOld": "2526a96aaa349d5514a8e8119373af9aed50cc5a",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 8.76,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     Path tmp;\n     do {\n       tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n     } while (files.util().exists(tmp));\n     destDirPath \u003d tmp;\n \n     createDir(destDirPath, cachePerms);\n     final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n     createDir(dst_work, cachePerms);\n \n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi\n         ? files.makeQualified(copy(sCopy, dst_work))\n         : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n-      });\n-      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n+          });\n+      Pattern pattern \u003d null;\n+      String p \u003d resource.getPattern();\n+      if(p !\u003d null) {\n+        pattern \u003d Pattern.compile(p);\n+      }\n+      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()), pattern);\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n     } catch (Exception e) {\n       try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) { }\n       // clear ref to internal var\n       rand \u003d null;\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    do {\n      tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    destDirPath \u003d tmp;\n\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n          });\n      Pattern pattern \u003d null;\n      String p \u003d resource.getPattern();\n      if(p !\u003d null) {\n        pattern \u003d Pattern.compile(p);\n      }\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()), pattern);\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "2526a96aaa349d5514a8e8119373af9aed50cc5a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-108. FSDownload can create cache directories with the wrong permissions (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1386838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/12 2:05 PM",
      "commitName": "2526a96aaa349d5514a8e8119373af9aed50cc5a",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 40.65,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     Path tmp;\n     do {\n       tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n     } while (files.util().exists(tmp));\n     destDirPath \u003d tmp;\n \n-    files.mkdir(destDirPath, cachePerms, false);\n+    createDir(destDirPath, cachePerms);\n     final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n-    files.mkdir(dst_work, cachePerms, false);\n+    createDir(dst_work, cachePerms);\n \n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi\n         ? files.makeQualified(copy(sCopy, dst_work))\n         : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n       });\n       unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n     } catch (Exception e) {\n       try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) { }\n       // clear ref to internal var\n       rand \u003d null;\n       conf \u003d null;\n       resource \u003d null;\n     }\n     return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    do {\n      tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    destDirPath \u003d tmp;\n\n    createDir(destDirPath, cachePerms);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    createDir(dst_work, cachePerms);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    do {\n      tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    destDirPath \u003d tmp;\n\n    files.mkdir(destDirPath, cachePerms, false);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    files.mkdir(dst_work, cachePerms, false);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
      }
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "31/10/11 8:16 PM",
      "commitNameOld": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 28.83,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,44 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     Path tmp;\n-    Path dst \u003d\n-        dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n-            conf);\n     do {\n-      tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n+      tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n     } while (files.util().exists(tmp));\n-    dst \u003d tmp;\n-    files.mkdir(dst, cachePerms, false);\n-    final Path dst_work \u003d new Path(dst + \"_tmp\");\n+    destDirPath \u003d tmp;\n+\n+    files.mkdir(destDirPath, cachePerms, false);\n+    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n     files.mkdir(dst_work, cachePerms, false);\n \n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi\n         ? files.makeQualified(copy(sCopy, dst_work))\n         : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n       });\n       unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n       changePermissions(dFinal.getFileSystem(conf), dFinal);\n-      files.rename(dst_work, dst, Rename.OVERWRITE);\n+      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n     } catch (Exception e) {\n-      try { files.delete(dst, true); } catch (IOException ignore) { }\n+      try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) { }\n       // clear ref to internal var\n       rand \u003d null;\n       conf \u003d null;\n       resource \u003d null;\n-      dirs \u003d null;\n     }\n-    return files.makeQualified(new Path(dst, sCopy.getName()));\n+    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    do {\n      tmp \u003d new Path(destDirPath, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    destDirPath \u003d tmp;\n\n    files.mkdir(destDirPath, cachePerms, false);\n    final Path dst_work \u003d new Path(destDirPath + \"_tmp\");\n    files.mkdir(dst_work, cachePerms, false);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, destDirPath, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(destDirPath, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n    }\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3237. Move LocalJobRunner to hadoop-mapreduce-client-core. Contributed by Tom White.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 8:16 PM",
      "commitName": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/10/11 7:09 PM",
      "commitNameOld": "e5badc0c1a817ca8f7e4255ec4dcfdf858abb596",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    Path dst \u003d\n        dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n            conf);\n    do {\n      tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    dst \u003d tmp;\n    files.mkdir(dst, cachePerms, false);\n    final Path dst_work \u003d new Path(dst + \"_tmp\");\n    files.mkdir(dst_work, cachePerms, false);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, dst, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(dst, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n      dirs \u003d null;\n    }\n    return files.makeQualified(new Path(dst, sCopy.getName()));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
      }
    },
    "5f9e67e226c572018b274f17e85e4aab6ebab44b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2766. Fixed NM to set secure permissions for files and directories in distributed-cache. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/11 10:51 PM",
      "commitName": "5f9e67e226c572018b274f17e85e4aab6ebab44b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 67.23,
      "commitsBetweenForRepo": 503,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public Path call() throws Exception {\n     final Path sCopy;\n     try {\n       sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     Path tmp;\n     Path dst \u003d\n         dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n             conf);\n     do {\n       tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n     } while (files.util().exists(tmp));\n     dst \u003d tmp;\n     files.mkdir(dst, cachePerms, false);\n     final Path dst_work \u003d new Path(dst + \"_tmp\");\n     files.mkdir(dst_work, cachePerms, false);\n \n     Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n     try {\n       Path dTmp \u003d null \u003d\u003d userUgi\n         ? files.makeQualified(copy(sCopy, dst_work))\n         : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n             public Path run() throws Exception {\n               return files.makeQualified(copy(sCopy, dst_work));\n             };\n       });\n       unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n+      changePermissions(dFinal.getFileSystem(conf), dFinal);\n       files.rename(dst_work, dst, Rename.OVERWRITE);\n     } catch (Exception e) {\n       try { files.delete(dst, true); } catch (IOException ignore) { }\n       throw e;\n     } finally {\n       try {\n         files.delete(dst_work, true);\n       } catch (FileNotFoundException ignore) { }\n       // clear ref to internal var\n       rand \u003d null;\n       conf \u003d null;\n       resource \u003d null;\n       dirs \u003d null;\n-      cachePerms \u003d null;\n     }\n     return files.makeQualified(new Path(dst, sCopy.getName()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    Path dst \u003d\n        dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n            conf);\n    do {\n      tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    dst \u003d tmp;\n    files.mkdir(dst, cachePerms, false);\n    final Path dst_work \u003d new Path(dst + \"_tmp\");\n    files.mkdir(dst_work, cachePerms, false);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      changePermissions(dFinal.getFileSystem(conf), dFinal);\n      files.rename(dst_work, dst, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(dst, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n      dirs \u003d null;\n    }\n    return files.makeQualified(new Path(dst, sCopy.getName()));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    Path dst \u003d\n        dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n            conf);\n    do {\n      tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    dst \u003d tmp;\n    files.mkdir(dst, cachePerms, false);\n    final Path dst_work \u003d new Path(dst + \"_tmp\");\n    files.mkdir(dst_work, cachePerms, false);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      files.rename(dst_work, dst, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(dst, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n      dirs \u003d null;\n      cachePerms \u003d null;\n    }\n    return files.makeQualified(new Path(dst, sCopy.getName()));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,47 @@\n+  public Path call() throws Exception {\n+    final Path sCopy;\n+    try {\n+      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n+    } catch (URISyntaxException e) {\n+      throw new IOException(\"Invalid resource\", e);\n+    }\n+\n+    Path tmp;\n+    Path dst \u003d\n+        dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n+            conf);\n+    do {\n+      tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n+    } while (files.util().exists(tmp));\n+    dst \u003d tmp;\n+    files.mkdir(dst, cachePerms, false);\n+    final Path dst_work \u003d new Path(dst + \"_tmp\");\n+    files.mkdir(dst_work, cachePerms, false);\n+\n+    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n+    try {\n+      Path dTmp \u003d null \u003d\u003d userUgi\n+        ? files.makeQualified(copy(sCopy, dst_work))\n+        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n+            public Path run() throws Exception {\n+              return files.makeQualified(copy(sCopy, dst_work));\n+            };\n+      });\n+      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n+      files.rename(dst_work, dst, Rename.OVERWRITE);\n+    } catch (Exception e) {\n+      try { files.delete(dst, true); } catch (IOException ignore) { }\n+      throw e;\n+    } finally {\n+      try {\n+        files.delete(dst_work, true);\n+      } catch (FileNotFoundException ignore) { }\n+      // clear ref to internal var\n+      rand \u003d null;\n+      conf \u003d null;\n+      resource \u003d null;\n+      dirs \u003d null;\n+      cachePerms \u003d null;\n+    }\n+    return files.makeQualified(new Path(dst, sCopy.getName()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Path call() throws Exception {\n    final Path sCopy;\n    try {\n      sCopy \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    Path tmp;\n    Path dst \u003d\n        dirs.getLocalPathForWrite(\".\", getEstimatedSize(resource),\n            conf);\n    do {\n      tmp \u003d new Path(dst, String.valueOf(rand.nextLong()));\n    } while (files.util().exists(tmp));\n    dst \u003d tmp;\n    files.mkdir(dst, cachePerms, false);\n    final Path dst_work \u003d new Path(dst + \"_tmp\");\n    files.mkdir(dst_work, cachePerms, false);\n\n    Path dFinal \u003d files.makeQualified(new Path(dst_work, sCopy.getName()));\n    try {\n      Path dTmp \u003d null \u003d\u003d userUgi\n        ? files.makeQualified(copy(sCopy, dst_work))\n        : userUgi.doAs(new PrivilegedExceptionAction\u003cPath\u003e() {\n            public Path run() throws Exception {\n              return files.makeQualified(copy(sCopy, dst_work));\n            };\n      });\n      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));\n      files.rename(dst_work, dst, Rename.OVERWRITE);\n    } catch (Exception e) {\n      try { files.delete(dst, true); } catch (IOException ignore) { }\n      throw e;\n    } finally {\n      try {\n        files.delete(dst_work, true);\n      } catch (FileNotFoundException ignore) { }\n      // clear ref to internal var\n      rand \u003d null;\n      conf \u003d null;\n      resource \u003d null;\n      dirs \u003d null;\n      cachePerms \u003d null;\n    }\n    return files.makeQualified(new Path(dst, sCopy.getName()));\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java"
    }
  }
}