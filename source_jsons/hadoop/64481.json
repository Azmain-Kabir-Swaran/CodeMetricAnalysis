{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AUtils.java",
  "functionName": "createAWSCredentialProvider",
  "functionId": "createAWSCredentialProvider___conf-Configuration__credClass-Class__?____uri-URI(annotations-@Nullable)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
  "functionStartLine": 714,
  "functionEndLine": 786,
  "numCommitsSeen": 96,
  "timeTaken": 7370,
  "changeHistory": [
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "7ac88244c54ce483729af3d2736d9f4731e230ca",
    "9a013b255f301c557c3868dc1ad657202e9e7a67",
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
    "2e30aa72e01de7b5774fcb312406a393221e0908",
    "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351",
    "763f0497bb996e331e40caed9ca0af966f5b3fac"
  ],
  "changeHistoryShort": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
    "7ac88244c54ce483729af3d2736d9f4731e230ca": "Ymultichange(Yparameterchange,Ybodychange)",
    "9a013b255f301c557c3868dc1ad657202e9e7a67": "Ymodifierchange",
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc": "Ybodychange",
    "2e30aa72e01de7b5774fcb312406a393221e0908": "Ymultichange(Yparameterchange,Ybodychange)",
    "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351": "Ybodychange",
    "763f0497bb996e331e40caed9ca0af966f5b3fac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public static AWSCredentialsProvider createAWSCredentialProvider(\n+  private static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+      @Nullable URI uri) throws IOException {\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting Configuration, or a public factory method named \"\n-          + \"getInstance that accepts no arguments, or a public default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+          + \"of a supported signature, or a public factory method named \"\n+          + \"getInstance that accepts no arguments.\",\n+          className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      @Nullable URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"of a supported signature, or a public factory method named \"\n          + \"getInstance that accepts no arguments.\",\n          className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public static AWSCredentialsProvider createAWSCredentialProvider(\n+  private static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+      @Nullable URI uri) throws IOException {\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting Configuration, or a public factory method named \"\n-          + \"getInstance that accepts no arguments, or a public default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+          + \"of a supported signature, or a public factory method named \"\n+          + \"getInstance that accepts no arguments.\",\n+          className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      @Nullable URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"of a supported signature, or a public factory method named \"\n          + \"getInstance that accepts no arguments.\",\n          className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public static AWSCredentialsProvider createAWSCredentialProvider(\n+  private static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+      @Nullable URI uri) throws IOException {\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting Configuration, or a public factory method named \"\n-          + \"getInstance that accepts no arguments, or a public default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+          + \"of a supported signature, or a public factory method named \"\n+          + \"getInstance that accepts no arguments.\",\n+          className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      @Nullable URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"of a supported signature, or a public factory method named \"\n          + \"getInstance that accepts no arguments.\",\n          className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI]",
            "newValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI(annotations-@Nullable)]"
          }
        }
      ]
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  private static AWSCredentialsProvider createAWSCredentialProvider(\n+  public static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      @Nullable URI uri) throws IOException {\n-    AWSCredentialsProvider credentials \u003d null;\n+      URI uri) throws IOException {\n+    AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"of a supported signature, or a public factory method named \"\n-          + \"getInstance that accepts no arguments.\",\n-          className, AWS_CREDENTIALS_PROVIDER));\n+          + \"accepting Configuration, or a public factory method named \"\n+          + \"getInstance that accepts no arguments, or a public default \"\n+          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  private static AWSCredentialsProvider createAWSCredentialProvider(\n+  public static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      @Nullable URI uri) throws IOException {\n-    AWSCredentialsProvider credentials \u003d null;\n+      URI uri) throws IOException {\n+    AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"of a supported signature, or a public factory method named \"\n-          + \"getInstance that accepts no arguments.\",\n-          className, AWS_CREDENTIALS_PROVIDER));\n+          + \"accepting Configuration, or a public factory method named \"\n+          + \"getInstance that accepts no arguments, or a public default \"\n+          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  private static AWSCredentialsProvider createAWSCredentialProvider(\n+  public static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      @Nullable URI uri) throws IOException {\n-    AWSCredentialsProvider credentials \u003d null;\n+      URI uri) throws IOException {\n+    AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"of a supported signature, or a public factory method named \"\n-          + \"getInstance that accepts no arguments.\",\n-          className, AWS_CREDENTIALS_PROVIDER));\n+          + \"accepting Configuration, or a public factory method named \"\n+          + \"getInstance that accepts no arguments, or a public default \"\n+          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI(annotations-@Nullable)]",
            "newValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI]"
          }
        }
      ]
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public static AWSCredentialsProvider createAWSCredentialProvider(\n+  private static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+      @Nullable URI uri) throws IOException {\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting Configuration, or a public factory method named \"\n-          + \"getInstance that accepts no arguments, or a public default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+          + \"of a supported signature, or a public factory method named \"\n+          + \"getInstance that accepts no arguments.\",\n+          className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      @Nullable URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"of a supported signature, or a public factory method named \"\n          + \"getInstance that accepts no arguments.\",\n          className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public static AWSCredentialsProvider createAWSCredentialProvider(\n+  private static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+      @Nullable URI uri) throws IOException {\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting Configuration, or a public factory method named \"\n-          + \"getInstance that accepts no arguments, or a public default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+          + \"of a supported signature, or a public factory method named \"\n+          + \"getInstance that accepts no arguments.\",\n+          className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      @Nullable URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"of a supported signature, or a public factory method named \"\n          + \"getInstance that accepts no arguments.\",\n          className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public static AWSCredentialsProvider createAWSCredentialProvider(\n+  private static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+      @Nullable URI uri) throws IOException {\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(uri, conf)\n       Constructor cons \u003d getConstructor(credClass, URI.class,\n           Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n         return credentials;\n       }\n       // new X(conf)\n       cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting Configuration, or a public factory method named \"\n-          + \"getInstance that accepts no arguments, or a public default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+          + \"of a supported signature, or a public factory method named \"\n+          + \"getInstance that accepts no arguments.\",\n+          className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      @Nullable URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"of a supported signature, or a public factory method named \"\n          + \"getInstance that accepts no arguments.\",\n          className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI]",
            "newValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI(annotations-@Nullable)]"
          }
        }
      ]
    },
    "7ac88244c54ce483729af3d2736d9f4731e230ca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
      "commitDate": "16/02/18 8:37 AM",
      "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
          "commitDate": "16/02/18 8:37 AM",
          "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "15/02/18 7:57 AM",
          "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.03,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,73 @@\n   public static AWSCredentialsProvider createAWSCredentialProvider(\n-      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n+      Configuration conf,\n+      Class\u003c?\u003e credClass,\n+      URI uri) throws IOException {\n     AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n+      // new X(uri, conf)\n+      Constructor cons \u003d getConstructor(credClass, URI.class,\n+          Configuration.class);\n+      if (cons !\u003d null) {\n+        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n+        return credentials;\n+      }\n       // new X(conf)\n-      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n+      cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n           + \"accepting Configuration, or a public factory method named \"\n           + \"getInstance that accepts no arguments, or a public default \"\n           + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, credClass-Class\u003c?\u003e]",
            "newValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
          "commitDate": "16/02/18 8:37 AM",
          "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "15/02/18 7:57 AM",
          "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.03,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,73 @@\n   public static AWSCredentialsProvider createAWSCredentialProvider(\n-      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n+      Configuration conf,\n+      Class\u003c?\u003e credClass,\n+      URI uri) throws IOException {\n     AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n+      // new X(uri, conf)\n+      Constructor cons \u003d getConstructor(credClass, URI.class,\n+          Configuration.class);\n+      if (cons !\u003d null) {\n+        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n+        return credentials;\n+      }\n       // new X(conf)\n-      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n+      cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n           + \"accepting Configuration, or a public factory method named \"\n           + \"getInstance that accepts no arguments, or a public default \"\n           + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n      // new X(conf)\n      cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "9a013b255f301c557c3868dc1ad657202e9e7a67": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-15176. Enhance IAM Assumed Role support in S3A client.\nContributed by Steve Loughran\n\n(cherry picked from commit 96c047fbb98c2378eed9693a724d4cbbd03c00fd)\n",
      "commitDate": "15/02/18 7:57 AM",
      "commitName": "9a013b255f301c557c3868dc1ad657202e9e7a67",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 5:13 AM",
      "commitNameOld": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 28.11,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n-  static AWSCredentialsProvider createAWSCredentialProvider(\n+  public static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n     AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(conf)\n       Constructor cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n           + \"accepting Configuration, or a public factory method named \"\n           + \"getInstance that accepts no arguments, or a public default \"\n           + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d  e;\n       }\n       if (targetException instanceof IOException) {\n         throw (IOException) targetException;\n       } else if (targetException instanceof SdkBaseException) {\n         throw translateException(\"Instantiate \" + className, \"\",\n             (SdkBaseException) targetException);\n       } else {\n         // supported constructor or factory method found, but the call failed\n         throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n             + \": \" + targetException,\n             targetException);\n       }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n           + \": \" + e,\n           e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(conf)\n      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {
        "oldValue": "[static]",
        "newValue": "[public, static]"
      }
    },
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15141 Support IAM Assumed roles in S3A. Contributed by Steve Loughran.\n",
      "commitDate": "17/01/18 12:05 AM",
      "commitName": "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "21/12/17 6:15 AM",
      "commitNameOld": "ef450df443f1dea1c52082cf281f25db7141972f",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 26.74,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,64 @@\n   static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n-    AWSCredentialsProvider credentials \u003d null;\n+    AWSCredentialsProvider credentials;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n       // new X(conf)\n       Constructor cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n           + \"accepting Configuration, or a public factory method named \"\n           + \"getInstance that accepts no arguments, or a public default \"\n           + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+    } catch (InvocationTargetException e) {\n+      Throwable targetException \u003d e.getTargetException();\n+      if (targetException \u003d\u003d null) {\n+        targetException \u003d  e;\n+      }\n+      if (targetException instanceof IOException) {\n+        throw (IOException) targetException;\n+      } else if (targetException instanceof SdkBaseException) {\n+        throw translateException(\"Instantiate \" + className, \"\",\n+            (SdkBaseException) targetException);\n+      } else {\n+        // supported constructor or factory method found, but the call failed\n+        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n+            + \": \" + targetException,\n+            targetException);\n+      }\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n-      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n+      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n+          + \": \" + e,\n+          e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(conf)\n      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d  e;\n      }\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof SdkBaseException) {\n        throw translateException(\"Instantiate \" + className, \"\",\n            (SdkBaseException) targetException);\n      } else {\n        // supported constructor or factory method found, but the call failed\n        throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n            + \": \" + targetException,\n            targetException);\n      }\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION\n          + \": \" + e,\n          e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "2e30aa72e01de7b5774fcb312406a393221e0908": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14135. Remove URI parameter in AWSCredentialProvider constructors. Contributed by Mingliang Liu\n",
      "commitDate": "23/03/17 11:33 AM",
      "commitName": "2e30aa72e01de7b5774fcb312406a393221e0908",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14135. Remove URI parameter in AWSCredentialProvider constructors. Contributed by Mingliang Liu\n",
          "commitDate": "23/03/17 11:33 AM",
          "commitName": "2e30aa72e01de7b5774fcb312406a393221e0908",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "25/02/17 7:35 AM",
          "commitNameOld": "dab00da19f25619ccc71c7f803a235b21766bf1e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 26.12,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,46 @@\n   static AWSCredentialsProvider createAWSCredentialProvider(\n-      Configuration conf,\n-      Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n+      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n     AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n-      // new X(uri, conf)\n-      Constructor cons \u003d getConstructor(credClass, URI.class,\n-          Configuration.class);\n+      // new X(conf)\n+      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n-        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n+        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting URI and Configuration, or a public factory method named \"\n+          + \"accepting Configuration, or a public factory method named \"\n           + \"getInstance that accepts no arguments, or a public default \"\n           + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n-    } finally {\n-      if (credentials !\u003d null) {\n-        LOG.debug(\"Using {} for {}.\", credentials, uri);\n-      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(conf)\n      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, credClass-Class\u003c?\u003e, uri-URI]",
            "newValue": "[conf-Configuration, credClass-Class\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14135. Remove URI parameter in AWSCredentialProvider constructors. Contributed by Mingliang Liu\n",
          "commitDate": "23/03/17 11:33 AM",
          "commitName": "2e30aa72e01de7b5774fcb312406a393221e0908",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "25/02/17 7:35 AM",
          "commitNameOld": "dab00da19f25619ccc71c7f803a235b21766bf1e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 26.12,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,46 @@\n   static AWSCredentialsProvider createAWSCredentialProvider(\n-      Configuration conf,\n-      Class\u003c?\u003e credClass,\n-      URI uri) throws IOException {\n+      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n     AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n       throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n     LOG.debug(\"Credential provider class is {}\", className);\n \n     try {\n-      // new X(uri, conf)\n-      Constructor cons \u003d getConstructor(credClass, URI.class,\n-          Configuration.class);\n+      // new X(conf)\n+      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n       if (cons !\u003d null) {\n-        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n+        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n         return credentials;\n       }\n \n       // X.getInstance()\n       Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n           \"getInstance\");\n       if (factory !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n         return credentials;\n       }\n \n       // new X()\n       cons \u003d getConstructor(credClass);\n       if (cons !\u003d null) {\n         credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n         return credentials;\n       }\n \n       // no supported constructor or factory method found\n       throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n           + \".  A class specified in %s must provide a public constructor \"\n-          + \"accepting URI and Configuration, or a public factory method named \"\n+          + \"accepting Configuration, or a public factory method named \"\n           + \"getInstance that accepts no arguments, or a public default \"\n           + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n     } catch (ReflectiveOperationException | IllegalArgumentException e) {\n       // supported constructor or factory method found, but the call failed\n       throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n-    } finally {\n-      if (credentials !\u003d null) {\n-        LOG.debug(\"Using {} for {}.\", credentials, uri);\n-      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf, Class\u003c?\u003e credClass) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(conf)\n      Constructor cons \u003d getConstructor(credClass, Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13727. S3A: Reduce high number of connections to EC2 Instance Metadata Service caused by InstanceProfileCredentialsProvider. Contributed by Chris Nauroth.\n",
      "commitDate": "24/10/16 9:22 PM",
      "commitName": "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "18/10/16 1:16 PM",
      "commitNameOld": "6c348c56918973fd988b110e79231324a8befe12",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,53 @@\n   static AWSCredentialsProvider createAWSCredentialProvider(\n       Configuration conf,\n       Class\u003c?\u003e credClass,\n       URI uri) throws IOException {\n-    AWSCredentialsProvider credentials;\n+    AWSCredentialsProvider credentials \u003d null;\n     String className \u003d credClass.getName();\n     if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n       throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n     }\n-    try {\n-      LOG.debug(\"Credential provider class is {}\", className);\n-      try {\n-        credentials \u003d\n-            (AWSCredentialsProvider) credClass.getDeclaredConstructor(\n-                URI.class, Configuration.class).newInstance(uri, conf);\n-      } catch (NoSuchMethodException | SecurityException e) {\n-        credentials \u003d\n-            (AWSCredentialsProvider) credClass.getDeclaredConstructor()\n-                .newInstance();\n-      }\n-    } catch (NoSuchMethodException | SecurityException e) {\n-      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n-          +\".  A class specified in %s must provide an accessible constructor \"\n-          + \"accepting URI and Configuration, or an accessible default \"\n-          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER), e);\n-    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n-      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n+    if (Modifier.isAbstract(credClass.getModifiers())) {\n+      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n     }\n-    LOG.debug(\"Using {} for {}.\", credentials, uri);\n-    return credentials;\n+    LOG.debug(\"Credential provider class is {}\", className);\n+\n+    try {\n+      // new X(uri, conf)\n+      Constructor cons \u003d getConstructor(credClass, URI.class,\n+          Configuration.class);\n+      if (cons !\u003d null) {\n+        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n+        return credentials;\n+      }\n+\n+      // X.getInstance()\n+      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n+          \"getInstance\");\n+      if (factory !\u003d null) {\n+        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n+        return credentials;\n+      }\n+\n+      // new X()\n+      cons \u003d getConstructor(credClass);\n+      if (cons !\u003d null) {\n+        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n+        return credentials;\n+      }\n+\n+      // no supported constructor or factory method found\n+      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n+          + \".  A class specified in %s must provide a public constructor \"\n+          + \"accepting URI and Configuration, or a public factory method named \"\n+          + \"getInstance that accepts no arguments, or a public default \"\n+          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n+    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n+      // supported constructor or factory method found, but the call failed\n+      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n+    } finally {\n+      if (credentials !\u003d null) {\n+        LOG.debug(\"Using {} for {}.\", credentials, uri);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials \u003d null;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IOException(\"Class \" + credClass + \" \" + ABSTRACT_PROVIDER);\n    }\n    LOG.debug(\"Credential provider class is {}\", className);\n\n    try {\n      // new X(uri, conf)\n      Constructor cons \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance(uri, conf);\n        return credentials;\n      }\n\n      // X.getInstance()\n      Method factory \u003d getFactoryMethod(credClass, AWSCredentialsProvider.class,\n          \"getInstance\");\n      if (factory !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)factory.invoke(null);\n        return credentials;\n      }\n\n      // new X()\n      cons \u003d getConstructor(credClass);\n      if (cons !\u003d null) {\n        credentials \u003d (AWSCredentialsProvider)cons.newInstance();\n        return credentials;\n      }\n\n      // no supported constructor or factory method found\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          + \".  A class specified in %s must provide a public constructor \"\n          + \"accepting URI and Configuration, or a public factory method named \"\n          + \"getInstance that accepts no arguments, or a public default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER));\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      // supported constructor or factory method found, but the call failed\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n    } finally {\n      if (credentials !\u003d null) {\n        LOG.debug(\"Using {} for {}.\", credentials, uri);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "763f0497bb996e331e40caed9ca0af966f5b3fac": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13252. Tune S3A provider plugin mechanism. Contributed by Steve Loughran.\n",
      "commitDate": "19/08/16 10:48 AM",
      "commitName": "763f0497bb996e331e40caed9ca0af966f5b3fac",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,31 @@\n+  static AWSCredentialsProvider createAWSCredentialProvider(\n+      Configuration conf,\n+      Class\u003c?\u003e credClass,\n+      URI uri) throws IOException {\n+    AWSCredentialsProvider credentials;\n+    String className \u003d credClass.getName();\n+    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n+      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n+    }\n+    try {\n+      LOG.debug(\"Credential provider class is {}\", className);\n+      try {\n+        credentials \u003d\n+            (AWSCredentialsProvider) credClass.getDeclaredConstructor(\n+                URI.class, Configuration.class).newInstance(uri, conf);\n+      } catch (NoSuchMethodException | SecurityException e) {\n+        credentials \u003d\n+            (AWSCredentialsProvider) credClass.getDeclaredConstructor()\n+                .newInstance();\n+      }\n+    } catch (NoSuchMethodException | SecurityException e) {\n+      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n+          +\".  A class specified in %s must provide an accessible constructor \"\n+          + \"accepting URI and Configuration, or an accessible default \"\n+          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER), e);\n+    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n+      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n+    }\n+    LOG.debug(\"Using {} for {}.\", credentials, uri);\n+    return credentials;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static AWSCredentialsProvider createAWSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass,\n      URI uri) throws IOException {\n    AWSCredentialsProvider credentials;\n    String className \u003d credClass.getName();\n    if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IOException(\"Class \" + credClass + \" \" + NOT_AWS_PROVIDER);\n    }\n    try {\n      LOG.debug(\"Credential provider class is {}\", className);\n      try {\n        credentials \u003d\n            (AWSCredentialsProvider) credClass.getDeclaredConstructor(\n                URI.class, Configuration.class).newInstance(uri, conf);\n      } catch (NoSuchMethodException | SecurityException e) {\n        credentials \u003d\n            (AWSCredentialsProvider) credClass.getDeclaredConstructor()\n                .newInstance();\n      }\n    } catch (NoSuchMethodException | SecurityException e) {\n      throw new IOException(String.format(\"%s \" + CONSTRUCTOR_EXCEPTION\n          +\".  A class specified in %s must provide an accessible constructor \"\n          + \"accepting URI and Configuration, or an accessible default \"\n          + \"constructor.\", className, AWS_CREDENTIALS_PROVIDER), e);\n    } catch (ReflectiveOperationException | IllegalArgumentException e) {\n      throw new IOException(className + \" \" + INSTANTIATION_EXCEPTION +\".\", e);\n    }\n    LOG.debug(\"Using {} for {}.\", credentials, uri);\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java"
    }
  }
}