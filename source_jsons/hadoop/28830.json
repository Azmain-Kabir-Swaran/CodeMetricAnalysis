{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VolumeMetaData.java",
  "functionName": "fromResource",
  "functionId": "fromResource___resourceInfo-ResourceInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/volume/csi/VolumeMetaData.java",
  "functionStartLine": 87,
  "functionEndLine": 130,
  "numCommitsSeen": 1,
  "timeTaken": 675,
  "changeHistory": [
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55"
  ],
  "changeHistoryShort": {
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8902. [CSI] Add volume manager that manages CSI volume lifecycle. Contributed by Weiwei Yang.\n",
      "commitDate": "11/11/18 10:27 PM",
      "commitName": "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,44 @@\n+  public static List\u003cVolumeMetaData\u003e fromResource(\n+      ResourceInformation resourceInfo) throws InvalidVolumeException {\n+    List\u003cVolumeMetaData\u003e volumeMetaData \u003d new ArrayList\u003c\u003e();\n+    if (resourceInfo !\u003d null) {\n+      if (resourceInfo.getTags() !\u003d null \u0026\u0026 resourceInfo.getTags()\n+          .contains(CsiConstants.CSI_VOLUME_RESOURCE_TAG)) {\n+        VolumeSpecBuilder builder \u003d VolumeMetaData.newBuilder();\n+        // Volume ID\n+        if (resourceInfo.getAttributes()\n+            .containsKey(CsiConstants.CSI_VOLUME_ID)) {\n+          String id \u003d resourceInfo.getAttributes()\n+              .get(CsiConstants.CSI_VOLUME_ID);\n+          builder.volumeId(new VolumeId(id));\n+        }\n+        // Volume name\n+        if (resourceInfo.getAttributes()\n+            .containsKey(CsiConstants.CSI_VOLUME_NAME)) {\n+          builder.volumeName(resourceInfo.getAttributes()\n+              .get(CsiConstants.CSI_VOLUME_NAME));\n+        }\n+        // CSI driver name\n+        if (resourceInfo.getAttributes()\n+            .containsKey(CsiConstants.CSI_DRIVER_NAME)) {\n+          builder.driverName(resourceInfo.getAttributes()\n+              .get(CsiConstants.CSI_DRIVER_NAME));\n+        }\n+        // Mount path\n+        if (resourceInfo.getAttributes()\n+            .containsKey(CsiConstants.CSI_VOLUME_MOUNT)) {\n+          builder.mountPoint(resourceInfo.getAttributes()\n+              .get(CsiConstants.CSI_VOLUME_MOUNT));\n+        }\n+        // Volume capability\n+        VolumeCapabilityRange volumeCapabilityRange \u003d\n+            VolumeCapabilityRange.newBuilder()\n+                .minCapacity(resourceInfo.getValue())\n+                .unit(resourceInfo.getUnits())\n+                .build();\n+        builder.capability(volumeCapabilityRange);\n+        volumeMetaData.add(builder.build());\n+      }\n+    }\n+    return volumeMetaData;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cVolumeMetaData\u003e fromResource(\n      ResourceInformation resourceInfo) throws InvalidVolumeException {\n    List\u003cVolumeMetaData\u003e volumeMetaData \u003d new ArrayList\u003c\u003e();\n    if (resourceInfo !\u003d null) {\n      if (resourceInfo.getTags() !\u003d null \u0026\u0026 resourceInfo.getTags()\n          .contains(CsiConstants.CSI_VOLUME_RESOURCE_TAG)) {\n        VolumeSpecBuilder builder \u003d VolumeMetaData.newBuilder();\n        // Volume ID\n        if (resourceInfo.getAttributes()\n            .containsKey(CsiConstants.CSI_VOLUME_ID)) {\n          String id \u003d resourceInfo.getAttributes()\n              .get(CsiConstants.CSI_VOLUME_ID);\n          builder.volumeId(new VolumeId(id));\n        }\n        // Volume name\n        if (resourceInfo.getAttributes()\n            .containsKey(CsiConstants.CSI_VOLUME_NAME)) {\n          builder.volumeName(resourceInfo.getAttributes()\n              .get(CsiConstants.CSI_VOLUME_NAME));\n        }\n        // CSI driver name\n        if (resourceInfo.getAttributes()\n            .containsKey(CsiConstants.CSI_DRIVER_NAME)) {\n          builder.driverName(resourceInfo.getAttributes()\n              .get(CsiConstants.CSI_DRIVER_NAME));\n        }\n        // Mount path\n        if (resourceInfo.getAttributes()\n            .containsKey(CsiConstants.CSI_VOLUME_MOUNT)) {\n          builder.mountPoint(resourceInfo.getAttributes()\n              .get(CsiConstants.CSI_VOLUME_MOUNT));\n        }\n        // Volume capability\n        VolumeCapabilityRange volumeCapabilityRange \u003d\n            VolumeCapabilityRange.newBuilder()\n                .minCapacity(resourceInfo.getValue())\n                .unit(resourceInfo.getUnits())\n                .build();\n        builder.capability(volumeCapabilityRange);\n        volumeMetaData.add(builder.build());\n      }\n    }\n    return volumeMetaData;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/volume/csi/VolumeMetaData.java"
    }
  }
}