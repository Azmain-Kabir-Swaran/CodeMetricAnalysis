{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationFileQueueParser.java",
  "functionName": "checkMinAndMaxResource",
  "functionId": "checkMinAndMaxResource___minResources-Map__String,Resource____maxResources-Map__String,ConfigurableResource____queueName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/allocation/AllocationFileQueueParser.java",
  "functionStartLine": 260,
  "functionEndLine": 277,
  "numCommitsSeen": 38,
  "timeTaken": 2752,
  "changeHistory": [
    "814d701d46b4ff87f6ec94ba39667c80475c38d7",
    "99292adcefdc6b8f280b8e100605fb39f755c38a"
  ],
  "changeHistoryShort": {
    "814d701d46b4ff87f6ec94ba39667c80475c38d7": "Ymultichange(Ymovefromfile,Ybodychange)",
    "99292adcefdc6b8f280b8e100605fb39f755c38a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "814d701d46b4ff87f6ec94ba39667c80475c38d7": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-7841. Cleanup AllocationFileLoaderService\u0027s reloadAllocations method (snemeth via rkanter)\n",
      "commitDate": "06/02/18 2:36 PM",
      "commitName": "814d701d46b4ff87f6ec94ba39667c80475c38d7",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7841. Cleanup AllocationFileLoaderService\u0027s reloadAllocations method (snemeth via rkanter)\n",
          "commitDate": "06/02/18 2:36 PM",
          "commitName": "814d701d46b4ff87f6ec94ba39667c80475c38d7",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "06/02/18 1:43 PM",
          "commitNameOld": "4304fcd5bdf9fb7aa9181e866eea383f89bf171f",
          "commitAuthorOld": "Anu Engineer",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   private void checkMinAndMaxResource(Map\u003cString, Resource\u003e minResources,\n       Map\u003cString, ConfigurableResource\u003e maxResources, String queueName) {\n \n     ConfigurableResource maxConfigurableResource \u003d maxResources.get(queueName);\n     Resource minResource \u003d minResources.get(queueName);\n \n     if (maxConfigurableResource !\u003d null \u0026\u0026 minResource !\u003d null) {\n       Resource maxResource \u003d maxConfigurableResource.getResource();\n \n-      // check whether max resource is bigger or equals to min resource when max\n-      // resource are absolute values\n+      // check whether max resource is greater or equals to min resource when\n+      // max resource are absolute values\n       if (maxResource !\u003d null \u0026\u0026 !Resources.fitsIn(minResource, maxResource)) {\n-        LOG.warn(String.format(\"Queue %s has max resources %s less than \"\n-            + \"min resources %s\", queueName, maxResource, minResource));\n+        LOG.warn(String.format(\n+            \"Queue %s has max resources %s less than \" + \"min resources %s\",\n+            queueName, maxResource, minResource));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkMinAndMaxResource(Map\u003cString, Resource\u003e minResources,\n      Map\u003cString, ConfigurableResource\u003e maxResources, String queueName) {\n\n    ConfigurableResource maxConfigurableResource \u003d maxResources.get(queueName);\n    Resource minResource \u003d minResources.get(queueName);\n\n    if (maxConfigurableResource !\u003d null \u0026\u0026 minResource !\u003d null) {\n      Resource maxResource \u003d maxConfigurableResource.getResource();\n\n      // check whether max resource is greater or equals to min resource when\n      // max resource are absolute values\n      if (maxResource !\u003d null \u0026\u0026 !Resources.fitsIn(minResource, maxResource)) {\n        LOG.warn(String.format(\n            \"Queue %s has max resources %s less than \" + \"min resources %s\",\n            queueName, maxResource, minResource));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/allocation/AllocationFileQueueParser.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/allocation/AllocationFileQueueParser.java",
            "oldMethodName": "checkMinAndMaxResource",
            "newMethodName": "checkMinAndMaxResource"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7841. Cleanup AllocationFileLoaderService\u0027s reloadAllocations method (snemeth via rkanter)\n",
          "commitDate": "06/02/18 2:36 PM",
          "commitName": "814d701d46b4ff87f6ec94ba39667c80475c38d7",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "06/02/18 1:43 PM",
          "commitNameOld": "4304fcd5bdf9fb7aa9181e866eea383f89bf171f",
          "commitAuthorOld": "Anu Engineer",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   private void checkMinAndMaxResource(Map\u003cString, Resource\u003e minResources,\n       Map\u003cString, ConfigurableResource\u003e maxResources, String queueName) {\n \n     ConfigurableResource maxConfigurableResource \u003d maxResources.get(queueName);\n     Resource minResource \u003d minResources.get(queueName);\n \n     if (maxConfigurableResource !\u003d null \u0026\u0026 minResource !\u003d null) {\n       Resource maxResource \u003d maxConfigurableResource.getResource();\n \n-      // check whether max resource is bigger or equals to min resource when max\n-      // resource are absolute values\n+      // check whether max resource is greater or equals to min resource when\n+      // max resource are absolute values\n       if (maxResource !\u003d null \u0026\u0026 !Resources.fitsIn(minResource, maxResource)) {\n-        LOG.warn(String.format(\"Queue %s has max resources %s less than \"\n-            + \"min resources %s\", queueName, maxResource, minResource));\n+        LOG.warn(String.format(\n+            \"Queue %s has max resources %s less than \" + \"min resources %s\",\n+            queueName, maxResource, minResource));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkMinAndMaxResource(Map\u003cString, Resource\u003e minResources,\n      Map\u003cString, ConfigurableResource\u003e maxResources, String queueName) {\n\n    ConfigurableResource maxConfigurableResource \u003d maxResources.get(queueName);\n    Resource minResource \u003d minResources.get(queueName);\n\n    if (maxConfigurableResource !\u003d null \u0026\u0026 minResource !\u003d null) {\n      Resource maxResource \u003d maxConfigurableResource.getResource();\n\n      // check whether max resource is greater or equals to min resource when\n      // max resource are absolute values\n      if (maxResource !\u003d null \u0026\u0026 !Resources.fitsIn(minResource, maxResource)) {\n        LOG.warn(String.format(\n            \"Queue %s has max resources %s less than \" + \"min resources %s\",\n            queueName, maxResource, minResource));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/allocation/AllocationFileQueueParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "99292adcefdc6b8f280b8e100605fb39f755c38a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage. (Yufei Gu)\n",
      "commitDate": "05/10/17 11:51 PM",
      "commitName": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,17 @@\n+  private void checkMinAndMaxResource(Map\u003cString, Resource\u003e minResources,\n+      Map\u003cString, ConfigurableResource\u003e maxResources, String queueName) {\n+\n+    ConfigurableResource maxConfigurableResource \u003d maxResources.get(queueName);\n+    Resource minResource \u003d minResources.get(queueName);\n+\n+    if (maxConfigurableResource !\u003d null \u0026\u0026 minResource !\u003d null) {\n+      Resource maxResource \u003d maxConfigurableResource.getResource();\n+\n+      // check whether max resource is bigger or equals to min resource when max\n+      // resource are absolute values\n+      if (maxResource !\u003d null \u0026\u0026 !Resources.fitsIn(minResource, maxResource)) {\n+        LOG.warn(String.format(\"Queue %s has max resources %s less than \"\n+            + \"min resources %s\", queueName, maxResource, minResource));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkMinAndMaxResource(Map\u003cString, Resource\u003e minResources,\n      Map\u003cString, ConfigurableResource\u003e maxResources, String queueName) {\n\n    ConfigurableResource maxConfigurableResource \u003d maxResources.get(queueName);\n    Resource minResource \u003d minResources.get(queueName);\n\n    if (maxConfigurableResource !\u003d null \u0026\u0026 minResource !\u003d null) {\n      Resource maxResource \u003d maxConfigurableResource.getResource();\n\n      // check whether max resource is bigger or equals to min resource when max\n      // resource are absolute values\n      if (maxResource !\u003d null \u0026\u0026 !Resources.fitsIn(minResource, maxResource)) {\n        LOG.warn(String.format(\"Queue %s has max resources %s less than \"\n            + \"min resources %s\", queueName, maxResource, minResource));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java"
    }
  }
}