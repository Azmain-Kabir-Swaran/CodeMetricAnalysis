{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SharedCacheClientImpl.java",
  "functionName": "use",
  "functionId": "use___applicationId-ApplicationId__resourceKey-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java",
  "functionStartLine": 113,
  "functionEndLine": 138,
  "numCommitsSeen": 8,
  "timeTaken": 4177,
  "changeHistory": [
    "c114da5e64d14b1d9e614081c4171ea0391cb1aa",
    "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
    "ba5116ec8e0c075096c6f84a8c8a1c6ce8297cf2"
  ],
  "changeHistoryShort": {
    "c114da5e64d14b1d9e614081c4171ea0391cb1aa": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "425a7e502869c4250aba927ecc3c6f3c561c6ff2": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba5116ec8e0c075096c6f84a8c8a1c6ce8297cf2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c114da5e64d14b1d9e614081c4171ea0391cb1aa": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7250. Update Shared cache client api to use URLs.\n",
      "commitDate": "28/09/17 3:28 PM",
      "commitName": "c114da5e64d14b1d9e614081c4171ea0391cb1aa",
      "commitAuthor": "Chris Trezzo",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7250. Update Shared cache client api to use URLs.\n",
          "commitDate": "28/09/17 3:28 PM",
          "commitName": "c114da5e64d14b1d9e614081c4171ea0391cb1aa",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "25/01/17 3:51 PM",
          "commitNameOld": "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 245.94,
          "commitsBetweenForRepo": 1547,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,26 @@\n-  public Path use(ApplicationId applicationId, String resourceKey,\n-      String resourceName) throws YarnException {\n+  public URL use(ApplicationId applicationId, String resourceKey)\n+      throws YarnException {\n     Path resourcePath \u003d null;\n     UseSharedCacheResourceRequest request \u003d Records.newRecord(\n         UseSharedCacheResourceRequest.class);\n     request.setAppId(applicationId);\n     request.setResourceKey(resourceKey);\n     try {\n       UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n       if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n         resourcePath \u003d new Path(response.getPath());\n       }\n     } catch (Exception e) {\n       // Just catching IOException isn\u0027t enough.\n       // RPC call can throw ConnectionException.\n       // We don\u0027t handle different exceptions separately at this point.\n       throw new YarnException(e);\n     }\n     if (resourcePath !\u003d null) {\n-      if (resourcePath.getName().equals(resourceName)) {\n-        // The preferred name is the same as the name of the item in the cache,\n-        // so we skip generating the fragment to save space in the MRconfig.\n-        return resourcePath;\n-      } else {\n-        // We are using the shared cache, and a preferred name has been\n-        // specified that is different than the name of the resource in the\n-        // shared cache. We need to set the fragment portion of the URI to\n-        // preserve the desired name.\n-        URI pathURI \u003d resourcePath.toUri();\n-        try {\n-          // We assume that there is no existing fragment in the URI since the\n-          // shared cache manager does not use fragments.\n-          pathURI \u003d\n-              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n-                  resourceName);\n-          resourcePath \u003d new Path(pathURI);\n-        } catch (URISyntaxException e) {\n-          throw new YarnException(\n-              \"Could not create a new URI due to syntax errors: \"\n-                  + pathURI.toString(), e);\n-        }\n-      }\n+      URL pathURL \u003d URL.fromPath(resourcePath);\n+      return pathURL;\n+    } else {\n+      // The resource was not in the cache.\n+      return null;\n     }\n-    return resourcePath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public URL use(ApplicationId applicationId, String resourceKey)\n      throws YarnException {\n    Path resourcePath \u003d null;\n    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n        UseSharedCacheResourceRequest.class);\n    request.setAppId(applicationId);\n    request.setResourceKey(resourceKey);\n    try {\n      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n        resourcePath \u003d new Path(response.getPath());\n      }\n    } catch (Exception e) {\n      // Just catching IOException isn\u0027t enough.\n      // RPC call can throw ConnectionException.\n      // We don\u0027t handle different exceptions separately at this point.\n      throw new YarnException(e);\n    }\n    if (resourcePath !\u003d null) {\n      URL pathURL \u003d URL.fromPath(resourcePath);\n      return pathURL;\n    } else {\n      // The resource was not in the cache.\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, resourceKey-String, resourceName-String]",
            "newValue": "[applicationId-ApplicationId, resourceKey-String]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7250. Update Shared cache client api to use URLs.\n",
          "commitDate": "28/09/17 3:28 PM",
          "commitName": "c114da5e64d14b1d9e614081c4171ea0391cb1aa",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "25/01/17 3:51 PM",
          "commitNameOld": "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 245.94,
          "commitsBetweenForRepo": 1547,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,26 @@\n-  public Path use(ApplicationId applicationId, String resourceKey,\n-      String resourceName) throws YarnException {\n+  public URL use(ApplicationId applicationId, String resourceKey)\n+      throws YarnException {\n     Path resourcePath \u003d null;\n     UseSharedCacheResourceRequest request \u003d Records.newRecord(\n         UseSharedCacheResourceRequest.class);\n     request.setAppId(applicationId);\n     request.setResourceKey(resourceKey);\n     try {\n       UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n       if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n         resourcePath \u003d new Path(response.getPath());\n       }\n     } catch (Exception e) {\n       // Just catching IOException isn\u0027t enough.\n       // RPC call can throw ConnectionException.\n       // We don\u0027t handle different exceptions separately at this point.\n       throw new YarnException(e);\n     }\n     if (resourcePath !\u003d null) {\n-      if (resourcePath.getName().equals(resourceName)) {\n-        // The preferred name is the same as the name of the item in the cache,\n-        // so we skip generating the fragment to save space in the MRconfig.\n-        return resourcePath;\n-      } else {\n-        // We are using the shared cache, and a preferred name has been\n-        // specified that is different than the name of the resource in the\n-        // shared cache. We need to set the fragment portion of the URI to\n-        // preserve the desired name.\n-        URI pathURI \u003d resourcePath.toUri();\n-        try {\n-          // We assume that there is no existing fragment in the URI since the\n-          // shared cache manager does not use fragments.\n-          pathURI \u003d\n-              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n-                  resourceName);\n-          resourcePath \u003d new Path(pathURI);\n-        } catch (URISyntaxException e) {\n-          throw new YarnException(\n-              \"Could not create a new URI due to syntax errors: \"\n-                  + pathURI.toString(), e);\n-        }\n-      }\n+      URL pathURL \u003d URL.fromPath(resourcePath);\n+      return pathURL;\n+    } else {\n+      // The resource was not in the cache.\n+      return null;\n     }\n-    return resourcePath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public URL use(ApplicationId applicationId, String resourceKey)\n      throws YarnException {\n    Path resourcePath \u003d null;\n    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n        UseSharedCacheResourceRequest.class);\n    request.setAppId(applicationId);\n    request.setResourceKey(resourceKey);\n    try {\n      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n        resourcePath \u003d new Path(response.getPath());\n      }\n    } catch (Exception e) {\n      // Just catching IOException isn\u0027t enough.\n      // RPC call can throw ConnectionException.\n      // We don\u0027t handle different exceptions separately at this point.\n      throw new YarnException(e);\n    }\n    if (resourcePath !\u003d null) {\n      URL pathURL \u003d URL.fromPath(resourcePath);\n      return pathURL;\n    } else {\n      // The resource was not in the cache.\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java",
          "extendedDetails": {
            "oldValue": "Path",
            "newValue": "URL"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7250. Update Shared cache client api to use URLs.\n",
          "commitDate": "28/09/17 3:28 PM",
          "commitName": "c114da5e64d14b1d9e614081c4171ea0391cb1aa",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "25/01/17 3:51 PM",
          "commitNameOld": "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 245.94,
          "commitsBetweenForRepo": 1547,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,26 @@\n-  public Path use(ApplicationId applicationId, String resourceKey,\n-      String resourceName) throws YarnException {\n+  public URL use(ApplicationId applicationId, String resourceKey)\n+      throws YarnException {\n     Path resourcePath \u003d null;\n     UseSharedCacheResourceRequest request \u003d Records.newRecord(\n         UseSharedCacheResourceRequest.class);\n     request.setAppId(applicationId);\n     request.setResourceKey(resourceKey);\n     try {\n       UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n       if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n         resourcePath \u003d new Path(response.getPath());\n       }\n     } catch (Exception e) {\n       // Just catching IOException isn\u0027t enough.\n       // RPC call can throw ConnectionException.\n       // We don\u0027t handle different exceptions separately at this point.\n       throw new YarnException(e);\n     }\n     if (resourcePath !\u003d null) {\n-      if (resourcePath.getName().equals(resourceName)) {\n-        // The preferred name is the same as the name of the item in the cache,\n-        // so we skip generating the fragment to save space in the MRconfig.\n-        return resourcePath;\n-      } else {\n-        // We are using the shared cache, and a preferred name has been\n-        // specified that is different than the name of the resource in the\n-        // shared cache. We need to set the fragment portion of the URI to\n-        // preserve the desired name.\n-        URI pathURI \u003d resourcePath.toUri();\n-        try {\n-          // We assume that there is no existing fragment in the URI since the\n-          // shared cache manager does not use fragments.\n-          pathURI \u003d\n-              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n-                  resourceName);\n-          resourcePath \u003d new Path(pathURI);\n-        } catch (URISyntaxException e) {\n-          throw new YarnException(\n-              \"Could not create a new URI due to syntax errors: \"\n-                  + pathURI.toString(), e);\n-        }\n-      }\n+      URL pathURL \u003d URL.fromPath(resourcePath);\n+      return pathURL;\n+    } else {\n+      // The resource was not in the cache.\n+      return null;\n     }\n-    return resourcePath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public URL use(ApplicationId applicationId, String resourceKey)\n      throws YarnException {\n    Path resourcePath \u003d null;\n    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n        UseSharedCacheResourceRequest.class);\n    request.setAppId(applicationId);\n    request.setResourceKey(resourceKey);\n    try {\n      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n        resourcePath \u003d new Path(response.getPath());\n      }\n    } catch (Exception e) {\n      // Just catching IOException isn\u0027t enough.\n      // RPC call can throw ConnectionException.\n      // We don\u0027t handle different exceptions separately at this point.\n      throw new YarnException(e);\n    }\n    if (resourcePath !\u003d null) {\n      URL pathURL \u003d URL.fromPath(resourcePath);\n      return pathURL;\n    } else {\n      // The resource was not in the cache.\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "425a7e502869c4250aba927ecc3c6f3c561c6ff2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3637. Handle localization sym-linking correctly at the YARN level. Contributed by Chris Trezzo.\n",
      "commitDate": "25/01/17 3:51 PM",
      "commitName": "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3637. Handle localization sym-linking correctly at the YARN level. Contributed by Chris Trezzo.\n",
          "commitDate": "25/01/17 3:51 PM",
          "commitName": "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "15/01/15 12:58 AM",
          "commitNameOld": "ba5116ec8e0c075096c6f84a8c8a1c6ce8297cf2",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 741.62,
          "commitsBetweenForRepo": 5575,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,45 @@\n-  public Path use(ApplicationId applicationId, String resourceKey)\n-      throws YarnException {\n+  public Path use(ApplicationId applicationId, String resourceKey,\n+      String resourceName) throws YarnException {\n     Path resourcePath \u003d null;\n     UseSharedCacheResourceRequest request \u003d Records.newRecord(\n         UseSharedCacheResourceRequest.class);\n     request.setAppId(applicationId);\n     request.setResourceKey(resourceKey);\n     try {\n       UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n       if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n         resourcePath \u003d new Path(response.getPath());\n       }\n     } catch (Exception e) {\n       // Just catching IOException isn\u0027t enough.\n       // RPC call can throw ConnectionException.\n       // We don\u0027t handle different exceptions separately at this point.\n       throw new YarnException(e);\n     }\n+    if (resourcePath !\u003d null) {\n+      if (resourcePath.getName().equals(resourceName)) {\n+        // The preferred name is the same as the name of the item in the cache,\n+        // so we skip generating the fragment to save space in the MRconfig.\n+        return resourcePath;\n+      } else {\n+        // We are using the shared cache, and a preferred name has been\n+        // specified that is different than the name of the resource in the\n+        // shared cache. We need to set the fragment portion of the URI to\n+        // preserve the desired name.\n+        URI pathURI \u003d resourcePath.toUri();\n+        try {\n+          // We assume that there is no existing fragment in the URI since the\n+          // shared cache manager does not use fragments.\n+          pathURI \u003d\n+              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n+                  resourceName);\n+          resourcePath \u003d new Path(pathURI);\n+        } catch (URISyntaxException e) {\n+          throw new YarnException(\n+              \"Could not create a new URI due to syntax errors: \"\n+                  + pathURI.toString(), e);\n+        }\n+      }\n+    }\n     return resourcePath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path use(ApplicationId applicationId, String resourceKey,\n      String resourceName) throws YarnException {\n    Path resourcePath \u003d null;\n    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n        UseSharedCacheResourceRequest.class);\n    request.setAppId(applicationId);\n    request.setResourceKey(resourceKey);\n    try {\n      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n        resourcePath \u003d new Path(response.getPath());\n      }\n    } catch (Exception e) {\n      // Just catching IOException isn\u0027t enough.\n      // RPC call can throw ConnectionException.\n      // We don\u0027t handle different exceptions separately at this point.\n      throw new YarnException(e);\n    }\n    if (resourcePath !\u003d null) {\n      if (resourcePath.getName().equals(resourceName)) {\n        // The preferred name is the same as the name of the item in the cache,\n        // so we skip generating the fragment to save space in the MRconfig.\n        return resourcePath;\n      } else {\n        // We are using the shared cache, and a preferred name has been\n        // specified that is different than the name of the resource in the\n        // shared cache. We need to set the fragment portion of the URI to\n        // preserve the desired name.\n        URI pathURI \u003d resourcePath.toUri();\n        try {\n          // We assume that there is no existing fragment in the URI since the\n          // shared cache manager does not use fragments.\n          pathURI \u003d\n              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n                  resourceName);\n          resourcePath \u003d new Path(pathURI);\n        } catch (URISyntaxException e) {\n          throw new YarnException(\n              \"Could not create a new URI due to syntax errors: \"\n                  + pathURI.toString(), e);\n        }\n      }\n    }\n    return resourcePath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, resourceKey-String]",
            "newValue": "[applicationId-ApplicationId, resourceKey-String, resourceName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3637. Handle localization sym-linking correctly at the YARN level. Contributed by Chris Trezzo.\n",
          "commitDate": "25/01/17 3:51 PM",
          "commitName": "425a7e502869c4250aba927ecc3c6f3c561c6ff2",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "15/01/15 12:58 AM",
          "commitNameOld": "ba5116ec8e0c075096c6f84a8c8a1c6ce8297cf2",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 741.62,
          "commitsBetweenForRepo": 5575,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,45 @@\n-  public Path use(ApplicationId applicationId, String resourceKey)\n-      throws YarnException {\n+  public Path use(ApplicationId applicationId, String resourceKey,\n+      String resourceName) throws YarnException {\n     Path resourcePath \u003d null;\n     UseSharedCacheResourceRequest request \u003d Records.newRecord(\n         UseSharedCacheResourceRequest.class);\n     request.setAppId(applicationId);\n     request.setResourceKey(resourceKey);\n     try {\n       UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n       if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n         resourcePath \u003d new Path(response.getPath());\n       }\n     } catch (Exception e) {\n       // Just catching IOException isn\u0027t enough.\n       // RPC call can throw ConnectionException.\n       // We don\u0027t handle different exceptions separately at this point.\n       throw new YarnException(e);\n     }\n+    if (resourcePath !\u003d null) {\n+      if (resourcePath.getName().equals(resourceName)) {\n+        // The preferred name is the same as the name of the item in the cache,\n+        // so we skip generating the fragment to save space in the MRconfig.\n+        return resourcePath;\n+      } else {\n+        // We are using the shared cache, and a preferred name has been\n+        // specified that is different than the name of the resource in the\n+        // shared cache. We need to set the fragment portion of the URI to\n+        // preserve the desired name.\n+        URI pathURI \u003d resourcePath.toUri();\n+        try {\n+          // We assume that there is no existing fragment in the URI since the\n+          // shared cache manager does not use fragments.\n+          pathURI \u003d\n+              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n+                  resourceName);\n+          resourcePath \u003d new Path(pathURI);\n+        } catch (URISyntaxException e) {\n+          throw new YarnException(\n+              \"Could not create a new URI due to syntax errors: \"\n+                  + pathURI.toString(), e);\n+        }\n+      }\n+    }\n     return resourcePath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path use(ApplicationId applicationId, String resourceKey,\n      String resourceName) throws YarnException {\n    Path resourcePath \u003d null;\n    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n        UseSharedCacheResourceRequest.class);\n    request.setAppId(applicationId);\n    request.setResourceKey(resourceKey);\n    try {\n      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n        resourcePath \u003d new Path(response.getPath());\n      }\n    } catch (Exception e) {\n      // Just catching IOException isn\u0027t enough.\n      // RPC call can throw ConnectionException.\n      // We don\u0027t handle different exceptions separately at this point.\n      throw new YarnException(e);\n    }\n    if (resourcePath !\u003d null) {\n      if (resourcePath.getName().equals(resourceName)) {\n        // The preferred name is the same as the name of the item in the cache,\n        // so we skip generating the fragment to save space in the MRconfig.\n        return resourcePath;\n      } else {\n        // We are using the shared cache, and a preferred name has been\n        // specified that is different than the name of the resource in the\n        // shared cache. We need to set the fragment portion of the URI to\n        // preserve the desired name.\n        URI pathURI \u003d resourcePath.toUri();\n        try {\n          // We assume that there is no existing fragment in the URI since the\n          // shared cache manager does not use fragments.\n          pathURI \u003d\n              new URI(pathURI.getScheme(), pathURI.getSchemeSpecificPart(),\n                  resourceName);\n          resourcePath \u003d new Path(pathURI);\n        } catch (URISyntaxException e) {\n          throw new YarnException(\n              \"Could not create a new URI due to syntax errors: \"\n                  + pathURI.toString(), e);\n        }\n      }\n    }\n    return resourcePath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba5116ec8e0c075096c6f84a8c8a1c6ce8297cf2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2217. [YARN-1492] Shared cache client side changes. (Chris Trezzo via kasha)\n",
      "commitDate": "15/01/15 12:58 AM",
      "commitName": "ba5116ec8e0c075096c6f84a8c8a1c6ce8297cf2",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,20 @@\n+  public Path use(ApplicationId applicationId, String resourceKey)\n+      throws YarnException {\n+    Path resourcePath \u003d null;\n+    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n+        UseSharedCacheResourceRequest.class);\n+    request.setAppId(applicationId);\n+    request.setResourceKey(resourceKey);\n+    try {\n+      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n+      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n+        resourcePath \u003d new Path(response.getPath());\n+      }\n+    } catch (Exception e) {\n+      // Just catching IOException isn\u0027t enough.\n+      // RPC call can throw ConnectionException.\n+      // We don\u0027t handle different exceptions separately at this point.\n+      throw new YarnException(e);\n+    }\n+    return resourcePath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Path use(ApplicationId applicationId, String resourceKey)\n      throws YarnException {\n    Path resourcePath \u003d null;\n    UseSharedCacheResourceRequest request \u003d Records.newRecord(\n        UseSharedCacheResourceRequest.class);\n    request.setAppId(applicationId);\n    request.setResourceKey(resourceKey);\n    try {\n      UseSharedCacheResourceResponse response \u003d this.scmClient.use(request);\n      if (response !\u003d null \u0026\u0026 response.getPath() !\u003d null) {\n        resourcePath \u003d new Path(response.getPath());\n      }\n    } catch (Exception e) {\n      // Just catching IOException isn\u0027t enough.\n      // RPC call can throw ConnectionException.\n      // We don\u0027t handle different exceptions separately at this point.\n      throw new YarnException(e);\n    }\n    return resourcePath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/SharedCacheClientImpl.java"
    }
  }
}