{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "isEmpty",
  "functionId": "isEmpty",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 197,
  "functionEndLine": 213,
  "numCommitsSeen": 11,
  "timeTaken": 1029,
  "changeHistory": [
    "da1016365aba1cee9c06771ab142d077379f27af",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "da1016365aba1cee9c06771ab142d077379f27af": "Ybodychange",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "25/07/15 7:39 AM",
      "commitNameOld": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthorOld": "ccurino",
      "daysBetweenCommits": 119.14,
      "commitsBetweenForRepo": 803,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   public boolean isEmpty() {\n     readLock.lock();\n     try {\n       if (cumulativeCapacity.isEmpty()) {\n         return true;\n       }\n-      // Deletion leaves a single zero entry so check for that\n-      if (cumulativeCapacity.size() \u003d\u003d 1) {\n-        return cumulativeCapacity.firstEntry().getValue().equals(ZERO_RESOURCE);\n+      // Deletion leaves a single zero entry with a null at the end so check for\n+      // that\n+      if (cumulativeCapacity.size() \u003d\u003d 2) {\n+        return cumulativeCapacity.firstEntry().getValue().equals(ZERO_RESOURCE)\n+            \u0026\u0026 cumulativeCapacity.lastEntry().getValue() \u003d\u003d null;\n       }\n       return false;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean isEmpty() {\n    readLock.lock();\n    try {\n      if (cumulativeCapacity.isEmpty()) {\n        return true;\n      }\n      // Deletion leaves a single zero entry with a null at the end so check for\n      // that\n      if (cumulativeCapacity.size() \u003d\u003d 2) {\n        return cumulativeCapacity.firstEntry().getValue().equals(ZERO_RESOURCE)\n            \u0026\u0026 cumulativeCapacity.lastEntry().getValue() \u003d\u003d null;\n      }\n      return false;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,15 @@\n+  public boolean isEmpty() {\n+    readLock.lock();\n+    try {\n+      if (cumulativeCapacity.isEmpty()) {\n+        return true;\n+      }\n+      // Deletion leaves a single zero entry so check for that\n+      if (cumulativeCapacity.size() \u003d\u003d 1) {\n+        return cumulativeCapacity.firstEntry().getValue().equals(ZERO_RESOURCE);\n+      }\n+      return false;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean isEmpty() {\n    readLock.lock();\n    try {\n      if (cumulativeCapacity.isEmpty()) {\n        return true;\n      }\n      // Deletion leaves a single zero entry so check for that\n      if (cumulativeCapacity.size() \u003d\u003d 1) {\n        return cumulativeCapacity.firstEntry().getValue().equals(ZERO_RESOURCE);\n      }\n      return false;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}