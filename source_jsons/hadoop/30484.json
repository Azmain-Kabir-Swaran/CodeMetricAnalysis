{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineDataManager.java",
  "functionName": "doGetEvents",
  "functionId": "doGetEvents___entityType-String__entityIds-SortedSet__String____eventTypes-SortedSet__String____windowStart-Long__windowEnd-Long__limit-Long__callerUGI-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
  "functionStartLine": 266,
  "functionEndLine": 311,
  "numCommitsSeen": 15,
  "timeTaken": 1087,
  "changeHistory": [
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0"
  ],
  "changeHistoryShort": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3360. Add JMX metrics to TimelineDataManager (Jason Lowe via jeagles)\n",
      "commitDate": "24/06/15 2:16 PM",
      "commitName": "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
      "commitAuthor": "Jonathan Eagles",
      "diff": "@@ -0,0 +1,46 @@\n+  private TimelineEvents doGetEvents(\n+      String entityType,\n+      SortedSet\u003cString\u003e entityIds,\n+      SortedSet\u003cString\u003e eventTypes,\n+      Long windowStart,\n+      Long windowEnd,\n+      Long limit,\n+      UserGroupInformation callerUGI) throws YarnException, IOException {\n+    TimelineEvents events \u003d null;\n+    events \u003d store.getEntityTimelines(\n+        entityType,\n+        entityIds,\n+        limit,\n+        windowStart,\n+        windowEnd,\n+        eventTypes);\n+    if (events !\u003d null) {\n+      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n+          events.getAllEvents().iterator();\n+      while (eventsItr.hasNext()) {\n+        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n+        try {\n+          TimelineEntity entity \u003d store.getEntity(\n+              eventsOfOneEntity.getEntityId(),\n+              eventsOfOneEntity.getEntityType(),\n+              EnumSet.of(Field.PRIMARY_FILTERS));\n+          addDefaultDomainIdIfAbsent(entity);\n+          // check ACLs\n+          if (!timelineACLsManager.checkAccess(\n+              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n+            eventsItr.remove();\n+          }\n+        } catch (Exception e) {\n+          LOG.warn(\"Error when verifying access for user \" + callerUGI\n+              + \" on the events of the timeline entity \"\n+              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n+                  eventsOfOneEntity.getEntityType()), e);\n+          eventsItr.remove();\n+        }\n+      }\n+    }\n+    if (events \u003d\u003d null) {\n+      return new TimelineEvents();\n+    }\n+    return events;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelineEvents doGetEvents(\n      String entityType,\n      SortedSet\u003cString\u003e entityIds,\n      SortedSet\u003cString\u003e eventTypes,\n      Long windowStart,\n      Long windowEnd,\n      Long limit,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEvents events \u003d null;\n    events \u003d store.getEntityTimelines(\n        entityType,\n        entityIds,\n        limit,\n        windowStart,\n        windowEnd,\n        eventTypes);\n    if (events !\u003d null) {\n      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n          events.getAllEvents().iterator();\n      while (eventsItr.hasNext()) {\n        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n        try {\n          TimelineEntity entity \u003d store.getEntity(\n              eventsOfOneEntity.getEntityId(),\n              eventsOfOneEntity.getEntityType(),\n              EnumSet.of(Field.PRIMARY_FILTERS));\n          addDefaultDomainIdIfAbsent(entity);\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            eventsItr.remove();\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                  eventsOfOneEntity.getEntityType()), e);\n          eventsItr.remove();\n        }\n      }\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java"
    }
  }
}