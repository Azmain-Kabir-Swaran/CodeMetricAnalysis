{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationAttemptId.java",
  "functionName": "fromString",
  "functionId": "fromString___appAttemptIdStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationAttemptId.java",
  "functionStartLine": 142,
  "functionEndLine": 170,
  "numCommitsSeen": 18,
  "timeTaken": 5137,
  "changeHistory": [
    "24853bf32a045b8f029fb136edca2af03836c8d5",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86"
  ],
  "changeHistoryShort": {
    "24853bf32a045b8f029fb136edca2af03836c8d5": "Ymultichange(Yparameterchange,Ybodychange)",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Yintroduced"
  },
  "changeHistoryDetails": {
    "24853bf32a045b8f029fb136edca2af03836c8d5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6768. Improve performance of yarn api record toString and fromString. Contributed by Jonathan Eagles\n",
      "commitDate": "24/07/17 8:19 AM",
      "commitName": "24853bf32a045b8f029fb136edca2af03836c8d5",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6768. Improve performance of yarn api record toString and fromString. Contributed by Jonathan Eagles\n",
          "commitDate": "24/07/17 8:19 AM",
          "commitName": "24853bf32a045b8f029fb136edca2af03836c8d5",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/06/16 3:06 PM",
          "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 404.72,
          "commitsBetweenForRepo": 2550,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  public static ApplicationAttemptId fromString(String applicationAttemptIdStr) {\n-    Iterator\u003cString\u003e it \u003d _spliter.split(applicationAttemptIdStr).iterator();\n-    if (!it.next().equals(appAttemptIdStrPrefix)) {\n+  public static ApplicationAttemptId fromString(String appAttemptIdStr) {\n+    if (!appAttemptIdStr.startsWith(APP_ATTEMPT_ID_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid AppAttemptId prefix: \"\n-          + applicationAttemptIdStr);\n+          + appAttemptIdStr);\n     }\n     try {\n-      return toApplicationAttemptId(it);\n+      int pos1 \u003d APP_ATTEMPT_ID_PREFIX.length() - 1;\n+      int pos2 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n+      if (pos2 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n+            + appAttemptIdStr);\n+      }\n+      long rmId \u003d Long.parseLong(appAttemptIdStr.substring(pos1 + 1, pos2));\n+      int pos3 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos2 + 1);\n+      if (pos3 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n+            + appAttemptIdStr);\n+      }\n+      int appId \u003d Integer.parseInt(appAttemptIdStr.substring(pos2 + 1, pos3));\n+      ApplicationId applicationId \u003d ApplicationId.newInstance(rmId, appId);\n+      int attemptId \u003d Integer.parseInt(appAttemptIdStr.substring(pos3 + 1));\n+      ApplicationAttemptId applicationAttemptId \u003d\n+        ApplicationAttemptId.newInstance(applicationId, attemptId);\n+      return applicationAttemptId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n-          + applicationAttemptIdStr, n);\n-    } catch (NoSuchElementException e) {\n-      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n-          + applicationAttemptIdStr, e);\n+          + appAttemptIdStr, n);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ApplicationAttemptId fromString(String appAttemptIdStr) {\n    if (!appAttemptIdStr.startsWith(APP_ATTEMPT_ID_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId prefix: \"\n          + appAttemptIdStr);\n    }\n    try {\n      int pos1 \u003d APP_ATTEMPT_ID_PREFIX.length() - 1;\n      int pos2 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n      if (pos2 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n            + appAttemptIdStr);\n      }\n      long rmId \u003d Long.parseLong(appAttemptIdStr.substring(pos1 + 1, pos2));\n      int pos3 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos2 + 1);\n      if (pos3 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n            + appAttemptIdStr);\n      }\n      int appId \u003d Integer.parseInt(appAttemptIdStr.substring(pos2 + 1, pos3));\n      ApplicationId applicationId \u003d ApplicationId.newInstance(rmId, appId);\n      int attemptId \u003d Integer.parseInt(appAttemptIdStr.substring(pos3 + 1));\n      ApplicationAttemptId applicationAttemptId \u003d\n        ApplicationAttemptId.newInstance(applicationId, attemptId);\n      return applicationAttemptId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n          + appAttemptIdStr, n);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationAttemptId.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptIdStr-String]",
            "newValue": "[appAttemptIdStr-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6768. Improve performance of yarn api record toString and fromString. Contributed by Jonathan Eagles\n",
          "commitDate": "24/07/17 8:19 AM",
          "commitName": "24853bf32a045b8f029fb136edca2af03836c8d5",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/06/16 3:06 PM",
          "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 404.72,
          "commitsBetweenForRepo": 2550,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  public static ApplicationAttemptId fromString(String applicationAttemptIdStr) {\n-    Iterator\u003cString\u003e it \u003d _spliter.split(applicationAttemptIdStr).iterator();\n-    if (!it.next().equals(appAttemptIdStrPrefix)) {\n+  public static ApplicationAttemptId fromString(String appAttemptIdStr) {\n+    if (!appAttemptIdStr.startsWith(APP_ATTEMPT_ID_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid AppAttemptId prefix: \"\n-          + applicationAttemptIdStr);\n+          + appAttemptIdStr);\n     }\n     try {\n-      return toApplicationAttemptId(it);\n+      int pos1 \u003d APP_ATTEMPT_ID_PREFIX.length() - 1;\n+      int pos2 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n+      if (pos2 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n+            + appAttemptIdStr);\n+      }\n+      long rmId \u003d Long.parseLong(appAttemptIdStr.substring(pos1 + 1, pos2));\n+      int pos3 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos2 + 1);\n+      if (pos3 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n+            + appAttemptIdStr);\n+      }\n+      int appId \u003d Integer.parseInt(appAttemptIdStr.substring(pos2 + 1, pos3));\n+      ApplicationId applicationId \u003d ApplicationId.newInstance(rmId, appId);\n+      int attemptId \u003d Integer.parseInt(appAttemptIdStr.substring(pos3 + 1));\n+      ApplicationAttemptId applicationAttemptId \u003d\n+        ApplicationAttemptId.newInstance(applicationId, attemptId);\n+      return applicationAttemptId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n-          + applicationAttemptIdStr, n);\n-    } catch (NoSuchElementException e) {\n-      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n-          + applicationAttemptIdStr, e);\n+          + appAttemptIdStr, n);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ApplicationAttemptId fromString(String appAttemptIdStr) {\n    if (!appAttemptIdStr.startsWith(APP_ATTEMPT_ID_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId prefix: \"\n          + appAttemptIdStr);\n    }\n    try {\n      int pos1 \u003d APP_ATTEMPT_ID_PREFIX.length() - 1;\n      int pos2 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n      if (pos2 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n            + appAttemptIdStr);\n      }\n      long rmId \u003d Long.parseLong(appAttemptIdStr.substring(pos1 + 1, pos2));\n      int pos3 \u003d appAttemptIdStr.indexOf(\u0027_\u0027, pos2 + 1);\n      if (pos3 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n            + appAttemptIdStr);\n      }\n      int appId \u003d Integer.parseInt(appAttemptIdStr.substring(pos2 + 1, pos3));\n      ApplicationId applicationId \u003d ApplicationId.newInstance(rmId, appId);\n      int attemptId \u003d Integer.parseInt(appAttemptIdStr.substring(pos3 + 1));\n      ApplicationAttemptId applicationAttemptId \u003d\n        ApplicationAttemptId.newInstance(applicationId, attemptId);\n      return applicationAttemptId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n          + appAttemptIdStr, n);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationAttemptId.java",
          "extendedDetails": {}
        }
      ]
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,16 @@\n+  public static ApplicationAttemptId fromString(String applicationAttemptIdStr) {\n+    Iterator\u003cString\u003e it \u003d _spliter.split(applicationAttemptIdStr).iterator();\n+    if (!it.next().equals(appAttemptIdStrPrefix)) {\n+      throw new IllegalArgumentException(\"Invalid AppAttemptId prefix: \"\n+          + applicationAttemptIdStr);\n+    }\n+    try {\n+      return toApplicationAttemptId(it);\n+    } catch (NumberFormatException n) {\n+      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n+          + applicationAttemptIdStr, n);\n+    } catch (NoSuchElementException e) {\n+      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n+          + applicationAttemptIdStr, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ApplicationAttemptId fromString(String applicationAttemptIdStr) {\n    Iterator\u003cString\u003e it \u003d _spliter.split(applicationAttemptIdStr).iterator();\n    if (!it.next().equals(appAttemptIdStrPrefix)) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId prefix: \"\n          + applicationAttemptIdStr);\n    }\n    try {\n      return toApplicationAttemptId(it);\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n          + applicationAttemptIdStr, n);\n    } catch (NoSuchElementException e) {\n      throw new IllegalArgumentException(\"Invalid AppAttemptId: \"\n          + applicationAttemptIdStr, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationAttemptId.java"
    }
  }
}