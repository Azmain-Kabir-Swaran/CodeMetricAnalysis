{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftNativeOutputStream.java",
  "functionName": "write",
  "functionId": "write___buffer-byte[]__offset-int__len-int",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeOutputStream.java",
  "functionStartLine": 214,
  "functionEndLine": 245,
  "numCommitsSeen": 4,
  "timeTaken": 597,
  "changeHistory": [
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,32 @@\n+  public synchronized void write(byte[] buffer, int offset, int len) throws\n+                                                                     IOException {\n+    //validate args\n+    if (offset \u003c 0 || len \u003c 0 || (offset + len) \u003e buffer.length) {\n+      throw new IndexOutOfBoundsException(\"Invalid offset/length for write\");\n+    }\n+    //validate the output stream\n+    verifyOpen();\n+    SwiftUtils.debug(LOG, \" write(offset\u003d%d, len\u003d%d)\", offset, len);\n+\n+    // if the size of file is greater than the partition limit\n+    while (blockOffset + len \u003e\u003d filePartSize) {\n+      // - then partition the blob and upload as many partitions\n+      // are needed.\n+      //how many bytes to write for this partition.\n+      int subWriteLen \u003d (int) (filePartSize - blockOffset);\n+      if (subWriteLen \u003c 0 || subWriteLen \u003e len) {\n+        throw new SwiftInternalStateException(\"Invalid subwrite len: \"\n+                                              + subWriteLen\n+                                              + \" -buffer len: \" + len);\n+      }\n+      writeToBackupStream(buffer, offset, subWriteLen);\n+      //move the offset along and length down\n+      offset +\u003d subWriteLen;\n+      len -\u003d subWriteLen;\n+      //now upload the partition that has just been filled up\n+      // (this also sets blockOffset\u003d0)\n+      partUpload(false);\n+    }\n+    //any remaining data is now written\n+    writeToBackupStream(buffer, offset, len);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void write(byte[] buffer, int offset, int len) throws\n                                                                     IOException {\n    //validate args\n    if (offset \u003c 0 || len \u003c 0 || (offset + len) \u003e buffer.length) {\n      throw new IndexOutOfBoundsException(\"Invalid offset/length for write\");\n    }\n    //validate the output stream\n    verifyOpen();\n    SwiftUtils.debug(LOG, \" write(offset\u003d%d, len\u003d%d)\", offset, len);\n\n    // if the size of file is greater than the partition limit\n    while (blockOffset + len \u003e\u003d filePartSize) {\n      // - then partition the blob and upload as many partitions\n      // are needed.\n      //how many bytes to write for this partition.\n      int subWriteLen \u003d (int) (filePartSize - blockOffset);\n      if (subWriteLen \u003c 0 || subWriteLen \u003e len) {\n        throw new SwiftInternalStateException(\"Invalid subwrite len: \"\n                                              + subWriteLen\n                                              + \" -buffer len: \" + len);\n      }\n      writeToBackupStream(buffer, offset, subWriteLen);\n      //move the offset along and length down\n      offset +\u003d subWriteLen;\n      len -\u003d subWriteLen;\n      //now upload the partition that has just been filled up\n      // (this also sets blockOffset\u003d0)\n      partUpload(false);\n    }\n    //any remaining data is now written\n    writeToBackupStream(buffer, offset, len);\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeOutputStream.java"
    }
  }
}