{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtilClient.java",
  "functionName": "getAddresses",
  "functionId": "getAddresses___conf-Configuration__defaultAddress-String__keys-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
  "functionStartLine": 403,
  "functionEndLine": 407,
  "numCommitsSeen": 146,
  "timeTaken": 7604,
  "changeHistory": [
    "1804a31515e541b3371925aa895589919b54d443",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3",
    "d9593621b5739a6c2a4f2ea7817d7783326a3886",
    "9146ad23f3f1af7c5547fba08e2a867cee49e015",
    "180646dea33785f8b4cc71482d099595b8c7da9d",
    "7ca7832158333e4ddcd6914596ff7d781c9283fe",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "1804a31515e541b3371925aa895589919b54d443": "Ymodifierchange",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3": "Ybodychange",
    "d9593621b5739a6c2a4f2ea7817d7783326a3886": "Ybodychange",
    "9146ad23f3f1af7c5547fba08e2a867cee49e015": "Ymultichange(Yreturntypechange,Ybodychange)",
    "180646dea33785f8b4cc71482d099595b8c7da9d": "Ybodychange",
    "7ca7832158333e4ddcd6914596ff7d781c9283fe": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1804a31515e541b3371925aa895589919b54d443": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-13536. [PROVIDED Storage] HA for InMemoryAliasMap. Contributed by Virajith Jalaparti.\n",
      "commitDate": "02/07/18 10:48 AM",
      "commitName": "1804a31515e541b3371925aa895589919b54d443",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "02/07/18 3:02 AM",
      "commitNameOld": "6ba99741086170b83c38d3e7e715d9e8046a1e00",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n-  static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getAddresses(\n+  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getAddresses(\n       Configuration conf, String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n     return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getAddresses(\n      Configuration conf, String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {
        "oldValue": "[static]",
        "newValue": "[public, static]"
      }
    },
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
          "commitDate": "21/04/15 9:59 PM",
          "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/04/15 8:57 PM",
          "commitNameOld": "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "",
          "actualSource": "    getAddresses(Configuration conf, String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
            "oldMethodName": "getAddresses",
            "newMethodName": "getAddresses"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
          "commitDate": "21/04/15 9:59 PM",
          "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/04/15 8:57 PM",
          "commitNameOld": "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "",
          "actualSource": "    getAddresses(Configuration conf, String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        }
      ]
    },
    "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6376. Distcp data between two HA clusters requires another configuration. Contributed by Dave Marion and Haohui Mai.\n",
      "commitDate": "05/09/14 10:40 AM",
      "commitName": "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/08/14 10:02 AM",
      "commitNameOld": "74f7be08878c6de1652ecdbec891dcb44189fda5",
      "commitAuthorOld": "",
      "daysBetweenCommits": 24.03,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,4 @@\n-    getAddresses(Configuration conf,\n-      String defaultAddress, String... keys) {\n+    getAddresses(Configuration conf, String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n-    \n-    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n-    // across all of the configured nameservices and namenodes.\n-    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n-    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n-      Map\u003cString, InetSocketAddress\u003e isas \u003d\n-        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n-      if (!isas.isEmpty()) {\n-        ret.put(nsId, isas);\n-      }\n-    }\n-    return ret;\n+    return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);\n   }\n\\ No newline at end of file\n",
      "actualSource": "    getAddresses(Configuration conf, String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "d9593621b5739a6c2a4f2ea7817d7783326a3886": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4669. TestBlockPoolManager fails using IBM java. Contributed by Tian Hong Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466176 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/13 12:04 PM",
      "commitName": "d9593621b5739a6c2a4f2ea7817d7783326a3886",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "05/03/13 1:47 PM",
      "commitNameOld": "a82e67af6c748a1c33528338c560f130e5b28c28",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 34.89,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     getAddresses(Configuration conf,\n       String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n     \n     // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n     // across all of the configured nameservices and namenodes.\n-    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newHashMap();\n+    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n     for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n       Map\u003cString, InetSocketAddress\u003e isas \u003d\n         getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n       if (!isas.isEmpty()) {\n         ret.put(nsId, isas);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "    getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    \n    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n    // across all of the configured nameservices and namenodes.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n      Map\u003cString, InetSocketAddress\u003e isas \u003d\n        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n      if (!isas.isEmpty()) {\n        ret.put(nsId, isas);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "9146ad23f3f1af7c5547fba08e2a867cee49e015": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/11/11 6:27 PM",
      "commitName": "9146ad23f3f1af7c5547fba08e2a867cee49e015",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/11/11 6:27 PM",
          "commitName": "9146ad23f3f1af7c5547fba08e2a867cee49e015",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "21/11/11 7:18 PM",
          "commitNameOld": "6a0671977b0d51f143df6171f3621532c04eef04",
          "commitAuthorOld": "",
          "daysBetweenCommits": 6.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,16 @@\n-  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n+    getAddresses(Configuration conf,\n       String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n-    Collection\u003cString\u003e namenodeIds \u003d getNameNodeIds(conf);\n-    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n-\n-    final boolean federationEnabled \u003d nameserviceIds !\u003d null\n-        \u0026\u0026 !nameserviceIds.isEmpty();\n-    final boolean haEnabled \u003d namenodeIds !\u003d null\n-        \u0026\u0026 !namenodeIds.isEmpty();\n     \n-    // Configuration with no federation and ha, return default address\n-    if (!federationEnabled \u0026\u0026 !haEnabled) {\n-      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n-      if (address \u003d\u003d null) {\n-        return null;\n-      }\n-      isas.add(NetUtils.createSocketAddr(address));\n-      return isas;\n-    }\n-    \n-    if (!federationEnabled) {\n-      nameserviceIds \u003d new ArrayList\u003cString\u003e();\n-      nameserviceIds.add(null);\n-    }\n-    if (!haEnabled) {\n-      namenodeIds \u003d new ArrayList\u003cString\u003e();\n-      namenodeIds.add(null);\n-    }\n-    \n-    // Get configuration suffixed with nameserviceId and/or namenodeId\n-    if (federationEnabled \u0026\u0026 haEnabled) {\n-      for (String nameserviceId : nameserviceIds) {\n-        for (String nnId : namenodeIds) {\n-          String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n-          String address \u003d getConfValue(null, keySuffix, conf, keys);\n-          if (address !\u003d null) {\n-            isas.add(NetUtils.createSocketAddr(address));\n-          }\n-        }\n-      }\n-    } else if (!federationEnabled \u0026\u0026 haEnabled) {\n-      for (String nnId : namenodeIds) {\n-        String address \u003d getConfValue(null, nnId, conf, keys);\n-        if (address !\u003d null) {\n-          isas.add(NetUtils.createSocketAddr(address));\n-        }\n-      }\n-    } else if (federationEnabled \u0026\u0026 !haEnabled) {\n-      for (String nameserviceId : nameserviceIds) {\n-          String address \u003d getConfValue(null, nameserviceId, conf, keys);\n-          if (address !\u003d null) {\n-            isas.add(NetUtils.createSocketAddr(address));\n-          }\n+    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n+    // across all of the configured nameservices and namenodes.\n+    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newHashMap();\n+    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n+      Map\u003cString, InetSocketAddress\u003e isas \u003d\n+        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n+      if (!isas.isEmpty()) {\n+        ret.put(nsId, isas);\n       }\n     }\n-    return isas;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "    getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    \n    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n    // across all of the configured nameservices and namenodes.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newHashMap();\n    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n      Map\u003cString, InetSocketAddress\u003e isas \u003d\n        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n      if (!isas.isEmpty()) {\n        ret.put(nsId, isas);\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {
            "oldValue": "List\u003cInetSocketAddress\u003e",
            "newValue": "Map\u003cString,Map\u003cString,InetSocketAddress\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/11/11 6:27 PM",
          "commitName": "9146ad23f3f1af7c5547fba08e2a867cee49e015",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "21/11/11 7:18 PM",
          "commitNameOld": "6a0671977b0d51f143df6171f3621532c04eef04",
          "commitAuthorOld": "",
          "daysBetweenCommits": 6.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,16 @@\n-  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n+    getAddresses(Configuration conf,\n       String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n-    Collection\u003cString\u003e namenodeIds \u003d getNameNodeIds(conf);\n-    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n-\n-    final boolean federationEnabled \u003d nameserviceIds !\u003d null\n-        \u0026\u0026 !nameserviceIds.isEmpty();\n-    final boolean haEnabled \u003d namenodeIds !\u003d null\n-        \u0026\u0026 !namenodeIds.isEmpty();\n     \n-    // Configuration with no federation and ha, return default address\n-    if (!federationEnabled \u0026\u0026 !haEnabled) {\n-      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n-      if (address \u003d\u003d null) {\n-        return null;\n-      }\n-      isas.add(NetUtils.createSocketAddr(address));\n-      return isas;\n-    }\n-    \n-    if (!federationEnabled) {\n-      nameserviceIds \u003d new ArrayList\u003cString\u003e();\n-      nameserviceIds.add(null);\n-    }\n-    if (!haEnabled) {\n-      namenodeIds \u003d new ArrayList\u003cString\u003e();\n-      namenodeIds.add(null);\n-    }\n-    \n-    // Get configuration suffixed with nameserviceId and/or namenodeId\n-    if (federationEnabled \u0026\u0026 haEnabled) {\n-      for (String nameserviceId : nameserviceIds) {\n-        for (String nnId : namenodeIds) {\n-          String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n-          String address \u003d getConfValue(null, keySuffix, conf, keys);\n-          if (address !\u003d null) {\n-            isas.add(NetUtils.createSocketAddr(address));\n-          }\n-        }\n-      }\n-    } else if (!federationEnabled \u0026\u0026 haEnabled) {\n-      for (String nnId : namenodeIds) {\n-        String address \u003d getConfValue(null, nnId, conf, keys);\n-        if (address !\u003d null) {\n-          isas.add(NetUtils.createSocketAddr(address));\n-        }\n-      }\n-    } else if (federationEnabled \u0026\u0026 !haEnabled) {\n-      for (String nameserviceId : nameserviceIds) {\n-          String address \u003d getConfValue(null, nameserviceId, conf, keys);\n-          if (address !\u003d null) {\n-            isas.add(NetUtils.createSocketAddr(address));\n-          }\n+    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n+    // across all of the configured nameservices and namenodes.\n+    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newHashMap();\n+    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n+      Map\u003cString, InetSocketAddress\u003e isas \u003d\n+        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n+      if (!isas.isEmpty()) {\n+        ret.put(nsId, isas);\n       }\n     }\n-    return isas;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "    getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    \n    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n    // across all of the configured nameservices and namenodes.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newHashMap();\n    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {\n      Map\u003cString, InetSocketAddress\u003e isas \u003d\n        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n      if (!isas.isEmpty()) {\n        ret.put(nsId, isas);\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "180646dea33785f8b4cc71482d099595b8c7da9d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2418. Change ConfiguredFailoverProxyProvider to take advantage of HDFS-2231. (atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1190078 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 4:15 PM",
      "commitName": "180646dea33785f8b4cc71482d099595b8c7da9d",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "12/10/11 5:09 PM",
      "commitNameOld": "7ca7832158333e4ddcd6914596ff7d781c9283fe",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 14.96,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,58 @@\n   private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n       String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n     Collection\u003cString\u003e namenodeIds \u003d getNameNodeIds(conf);\n     List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n \n     final boolean federationEnabled \u003d nameserviceIds !\u003d null\n         \u0026\u0026 !nameserviceIds.isEmpty();\n     final boolean haEnabled \u003d namenodeIds !\u003d null\n         \u0026\u0026 !namenodeIds.isEmpty();\n     \n     // Configuration with no federation and ha, return default address\n     if (!federationEnabled \u0026\u0026 !haEnabled) {\n       String address \u003d getConfValue(defaultAddress, null, conf, keys);\n       if (address \u003d\u003d null) {\n         return null;\n       }\n       isas.add(NetUtils.createSocketAddr(address));\n       return isas;\n     }\n     \n     if (!federationEnabled) {\n       nameserviceIds \u003d new ArrayList\u003cString\u003e();\n       nameserviceIds.add(null);\n     }\n     if (!haEnabled) {\n       namenodeIds \u003d new ArrayList\u003cString\u003e();\n       namenodeIds.add(null);\n     }\n     \n     // Get configuration suffixed with nameserviceId and/or namenodeId\n-    for (String nameserviceId : nameserviceIds) {\n-      for (String nnId : namenodeIds) {\n-        String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n-        String address \u003d getConfValue(null, keySuffix, conf, keys);\n-        if (address \u003d\u003d null) {\n-          return null;\n+    if (federationEnabled \u0026\u0026 haEnabled) {\n+      for (String nameserviceId : nameserviceIds) {\n+        for (String nnId : namenodeIds) {\n+          String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n+          String address \u003d getConfValue(null, keySuffix, conf, keys);\n+          if (address !\u003d null) {\n+            isas.add(NetUtils.createSocketAddr(address));\n+          }\n         }\n-        isas.add(NetUtils.createSocketAddr(address));\n+      }\n+    } else if (!federationEnabled \u0026\u0026 haEnabled) {\n+      for (String nnId : namenodeIds) {\n+        String address \u003d getConfValue(null, nnId, conf, keys);\n+        if (address !\u003d null) {\n+          isas.add(NetUtils.createSocketAddr(address));\n+        }\n+      }\n+    } else if (federationEnabled \u0026\u0026 !haEnabled) {\n+      for (String nameserviceId : nameserviceIds) {\n+          String address \u003d getConfValue(null, nameserviceId, conf, keys);\n+          if (address !\u003d null) {\n+            isas.add(NetUtils.createSocketAddr(address));\n+          }\n       }\n     }\n     return isas;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    Collection\u003cString\u003e namenodeIds \u003d getNameNodeIds(conf);\n    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    final boolean federationEnabled \u003d nameserviceIds !\u003d null\n        \u0026\u0026 !nameserviceIds.isEmpty();\n    final boolean haEnabled \u003d namenodeIds !\u003d null\n        \u0026\u0026 !namenodeIds.isEmpty();\n    \n    // Configuration with no federation and ha, return default address\n    if (!federationEnabled \u0026\u0026 !haEnabled) {\n      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n      if (address \u003d\u003d null) {\n        return null;\n      }\n      isas.add(NetUtils.createSocketAddr(address));\n      return isas;\n    }\n    \n    if (!federationEnabled) {\n      nameserviceIds \u003d new ArrayList\u003cString\u003e();\n      nameserviceIds.add(null);\n    }\n    if (!haEnabled) {\n      namenodeIds \u003d new ArrayList\u003cString\u003e();\n      namenodeIds.add(null);\n    }\n    \n    // Get configuration suffixed with nameserviceId and/or namenodeId\n    if (federationEnabled \u0026\u0026 haEnabled) {\n      for (String nameserviceId : nameserviceIds) {\n        for (String nnId : namenodeIds) {\n          String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n          String address \u003d getConfValue(null, keySuffix, conf, keys);\n          if (address !\u003d null) {\n            isas.add(NetUtils.createSocketAddr(address));\n          }\n        }\n      }\n    } else if (!federationEnabled \u0026\u0026 haEnabled) {\n      for (String nnId : namenodeIds) {\n        String address \u003d getConfValue(null, nnId, conf, keys);\n        if (address !\u003d null) {\n          isas.add(NetUtils.createSocketAddr(address));\n        }\n      }\n    } else if (federationEnabled \u0026\u0026 !haEnabled) {\n      for (String nameserviceId : nameserviceIds) {\n          String address \u003d getConfValue(null, nameserviceId, conf, keys);\n          if (address !\u003d null) {\n            isas.add(NetUtils.createSocketAddr(address));\n          }\n      }\n    }\n    return isas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "7ca7832158333e4ddcd6914596ff7d781c9283fe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2231. Configuration changes for HA namenode. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1182626 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/11 5:09 PM",
      "commitName": "7ca7832158333e4ddcd6914596ff7d781c9283fe",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "06/10/11 4:26 PM",
      "commitNameOld": "8b4f497af85b49519da2e05e8269db6c4e9d621f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 6.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,43 @@\n   private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n       String defaultAddress, String... keys) {\n     Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n+    Collection\u003cString\u003e namenodeIds \u003d getNameNodeIds(conf);\n     List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n \n-    // Configuration with a single namenode\n-    if (nameserviceIds \u003d\u003d null || nameserviceIds.isEmpty()) {\n+    final boolean federationEnabled \u003d nameserviceIds !\u003d null\n+        \u0026\u0026 !nameserviceIds.isEmpty();\n+    final boolean haEnabled \u003d namenodeIds !\u003d null\n+        \u0026\u0026 !namenodeIds.isEmpty();\n+    \n+    // Configuration with no federation and ha, return default address\n+    if (!federationEnabled \u0026\u0026 !haEnabled) {\n       String address \u003d getConfValue(defaultAddress, null, conf, keys);\n       if (address \u003d\u003d null) {\n         return null;\n       }\n       isas.add(NetUtils.createSocketAddr(address));\n-    } else {\n-      // Get the namenodes for all the configured nameServiceIds\n-      for (String nameserviceId : nameserviceIds) {\n-        String address \u003d getConfValue(null, nameserviceId, conf, keys);\n+      return isas;\n+    }\n+    \n+    if (!federationEnabled) {\n+      nameserviceIds \u003d new ArrayList\u003cString\u003e();\n+      nameserviceIds.add(null);\n+    }\n+    if (!haEnabled) {\n+      namenodeIds \u003d new ArrayList\u003cString\u003e();\n+      namenodeIds.add(null);\n+    }\n+    \n+    // Get configuration suffixed with nameserviceId and/or namenodeId\n+    for (String nameserviceId : nameserviceIds) {\n+      for (String nnId : namenodeIds) {\n+        String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n+        String address \u003d getConfValue(null, keySuffix, conf, keys);\n         if (address \u003d\u003d null) {\n           return null;\n         }\n         isas.add(NetUtils.createSocketAddr(address));\n       }\n     }\n     return isas;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    Collection\u003cString\u003e namenodeIds \u003d getNameNodeIds(conf);\n    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    final boolean federationEnabled \u003d nameserviceIds !\u003d null\n        \u0026\u0026 !nameserviceIds.isEmpty();\n    final boolean haEnabled \u003d namenodeIds !\u003d null\n        \u0026\u0026 !namenodeIds.isEmpty();\n    \n    // Configuration with no federation and ha, return default address\n    if (!federationEnabled \u0026\u0026 !haEnabled) {\n      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n      if (address \u003d\u003d null) {\n        return null;\n      }\n      isas.add(NetUtils.createSocketAddr(address));\n      return isas;\n    }\n    \n    if (!federationEnabled) {\n      nameserviceIds \u003d new ArrayList\u003cString\u003e();\n      nameserviceIds.add(null);\n    }\n    if (!haEnabled) {\n      namenodeIds \u003d new ArrayList\u003cString\u003e();\n      namenodeIds.add(null);\n    }\n    \n    // Get configuration suffixed with nameserviceId and/or namenodeId\n    for (String nameserviceId : nameserviceIds) {\n      for (String nnId : namenodeIds) {\n        String keySuffix \u003d concatSuffixes(nameserviceId, nnId);\n        String address \u003d getConfValue(null, keySuffix, conf, keys);\n        if (address \u003d\u003d null) {\n          return null;\n        }\n        isas.add(NetUtils.createSocketAddr(address));\n      }\n    }\n    return isas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    // Configuration with a single namenode\n    if (nameserviceIds \u003d\u003d null || nameserviceIds.isEmpty()) {\n      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n      if (address \u003d\u003d null) {\n        return null;\n      }\n      isas.add(NetUtils.createSocketAddr(address));\n    } else {\n      // Get the namenodes for all the configured nameServiceIds\n      for (String nameserviceId : nameserviceIds) {\n        String address \u003d getConfValue(null, nameserviceId, conf, keys);\n        if (address \u003d\u003d null) {\n          return null;\n        }\n        isas.add(NetUtils.createSocketAddr(address));\n      }\n    }\n    return isas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    // Configuration with a single namenode\n    if (nameserviceIds \u003d\u003d null || nameserviceIds.isEmpty()) {\n      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n      if (address \u003d\u003d null) {\n        return null;\n      }\n      isas.add(NetUtils.createSocketAddr(address));\n    } else {\n      // Get the namenodes for all the configured nameServiceIds\n      for (String nameserviceId : nameserviceIds) {\n        String address \u003d getConfValue(null, nameserviceId, conf, keys);\n        if (address \u003d\u003d null) {\n          return null;\n        }\n        isas.add(NetUtils.createSocketAddr(address));\n      }\n    }\n    return isas;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,24 @@\n+  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n+      String defaultAddress, String... keys) {\n+    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n+    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n+\n+    // Configuration with a single namenode\n+    if (nameserviceIds \u003d\u003d null || nameserviceIds.isEmpty()) {\n+      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n+      if (address \u003d\u003d null) {\n+        return null;\n+      }\n+      isas.add(NetUtils.createSocketAddr(address));\n+    } else {\n+      // Get the namenodes for all the configured nameServiceIds\n+      for (String nameserviceId : nameserviceIds) {\n+        String address \u003d getConfValue(null, nameserviceId, conf, keys);\n+        if (address \u003d\u003d null) {\n+          return null;\n+        }\n+        isas.add(NetUtils.createSocketAddr(address));\n+      }\n+    }\n+    return isas;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cInetSocketAddress\u003e getAddresses(Configuration conf,\n      String defaultAddress, String... keys) {\n    Collection\u003cString\u003e nameserviceIds \u003d getNameServiceIds(conf);\n    List\u003cInetSocketAddress\u003e isas \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    // Configuration with a single namenode\n    if (nameserviceIds \u003d\u003d null || nameserviceIds.isEmpty()) {\n      String address \u003d getConfValue(defaultAddress, null, conf, keys);\n      if (address \u003d\u003d null) {\n        return null;\n      }\n      isas.add(NetUtils.createSocketAddr(address));\n    } else {\n      // Get the namenodes for all the configured nameServiceIds\n      for (String nameserviceId : nameserviceIds) {\n        String address \u003d getConfValue(null, nameserviceId, conf, keys);\n        if (address \u003d\u003d null) {\n          return null;\n        }\n        isas.add(NetUtils.createSocketAddr(address));\n      }\n    }\n    return isas;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}