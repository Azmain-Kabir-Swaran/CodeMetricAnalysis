{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationSubmissionContextPBImpl.java",
  "functionName": "iterator",
  "functionId": "iterator",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationSubmissionContextPBImpl.java",
  "functionStartLine": 665,
  "functionEndLine": 687,
  "numCommitsSeen": 25,
  "timeTaken": 2434,
  "changeHistory": [
    "a81144daa012e13590725f67f53e35ef84a6f1ec",
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081"
  ],
  "changeHistoryShort": {
    "a81144daa012e13590725f67f53e35ef84a6f1ec": "Ymultichange(Yreturntypechange,Ybodychange)",
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a81144daa012e13590725f67f53e35ef84a6f1ec": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7666. Introduce scheduler specific environment variable support in ApplicationSubmissionContext for better scheduling placement configurations. (Sunil G via wangda)\n\nChange-Id: I0fd826490f5160d47d42af2a9ac0bd8ec4e959dc\n",
      "commitDate": "05/01/18 3:12 PM",
      "commitName": "a81144daa012e13590725f67f53e35ef84a6f1ec",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7666. Introduce scheduler specific environment variable support in ApplicationSubmissionContext for better scheduling placement configurations. (Sunil G via wangda)\n\nChange-Id: I0fd826490f5160d47d42af2a9ac0bd8ec4e959dc\n",
          "commitDate": "05/01/18 3:12 PM",
          "commitName": "a81144daa012e13590725f67f53e35ef84a6f1ec",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/06/17 10:08 AM",
          "commitNameOld": "a062374c396ba2bddbbe4d3806cc2896293b4e0b",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 211.25,
          "commitsBetweenForRepo": 1522,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,23 @@\n-          public Iterator\u003cApplicationTimeoutMapProto\u003e iterator() {\n-            return new Iterator\u003cApplicationTimeoutMapProto\u003e() {\n-              private Iterator\u003cApplicationTimeoutType\u003e iterator \u003d\n-                  applicationTimeouts.keySet().iterator();\n+      public Iterator\u003cStringStringMapProto\u003e iterator() {\n+        return new Iterator\u003cStringStringMapProto\u003e() {\n+          private Iterator\u003cString\u003e iterator \u003d schedulingProperties.keySet()\n+              .iterator();\n \n-              @Override\n-              public boolean hasNext() {\n-                return iterator.hasNext();\n-              }\n+          @Override\n+          public boolean hasNext() {\n+            return iterator.hasNext();\n+          }\n \n-              @Override\n-              public ApplicationTimeoutMapProto next() {\n-                ApplicationTimeoutType key \u003d iterator.next();\n-                return ApplicationTimeoutMapProto.newBuilder()\n-                    .setTimeout(applicationTimeouts.get(key))\n-                    .setApplicationTimeoutType(\n-                        ProtoUtils.convertToProtoFormat(key))\n-                    .build();\n-              }\n+          @Override\n+          public StringStringMapProto next() {\n+            String key \u003d iterator.next();\n+            return StringStringMapProto.newBuilder()\n+                .setValue(schedulingProperties.get(key)).setKey(key).build();\n+          }\n \n-              @Override\n-              public void remove() {\n-                throw new UnsupportedOperationException();\n-              }\n-            };\n-          }\n\\ No newline at end of file\n+          @Override\n+          public void remove() {\n+            throw new UnsupportedOperationException();\n+          }\n+        };\n+      }\n\\ No newline at end of file\n",
          "actualSource": "      public Iterator\u003cStringStringMapProto\u003e iterator() {\n        return new Iterator\u003cStringStringMapProto\u003e() {\n          private Iterator\u003cString\u003e iterator \u003d schedulingProperties.keySet()\n              .iterator();\n\n          @Override\n          public boolean hasNext() {\n            return iterator.hasNext();\n          }\n\n          @Override\n          public StringStringMapProto next() {\n            String key \u003d iterator.next();\n            return StringStringMapProto.newBuilder()\n                .setValue(schedulingProperties.get(key)).setKey(key).build();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationSubmissionContextPBImpl.java",
          "extendedDetails": {
            "oldValue": "Iterator\u003cApplicationTimeoutMapProto\u003e",
            "newValue": "Iterator\u003cStringStringMapProto\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7666. Introduce scheduler specific environment variable support in ApplicationSubmissionContext for better scheduling placement configurations. (Sunil G via wangda)\n\nChange-Id: I0fd826490f5160d47d42af2a9ac0bd8ec4e959dc\n",
          "commitDate": "05/01/18 3:12 PM",
          "commitName": "a81144daa012e13590725f67f53e35ef84a6f1ec",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/06/17 10:08 AM",
          "commitNameOld": "a062374c396ba2bddbbe4d3806cc2896293b4e0b",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 211.25,
          "commitsBetweenForRepo": 1522,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,23 @@\n-          public Iterator\u003cApplicationTimeoutMapProto\u003e iterator() {\n-            return new Iterator\u003cApplicationTimeoutMapProto\u003e() {\n-              private Iterator\u003cApplicationTimeoutType\u003e iterator \u003d\n-                  applicationTimeouts.keySet().iterator();\n+      public Iterator\u003cStringStringMapProto\u003e iterator() {\n+        return new Iterator\u003cStringStringMapProto\u003e() {\n+          private Iterator\u003cString\u003e iterator \u003d schedulingProperties.keySet()\n+              .iterator();\n \n-              @Override\n-              public boolean hasNext() {\n-                return iterator.hasNext();\n-              }\n+          @Override\n+          public boolean hasNext() {\n+            return iterator.hasNext();\n+          }\n \n-              @Override\n-              public ApplicationTimeoutMapProto next() {\n-                ApplicationTimeoutType key \u003d iterator.next();\n-                return ApplicationTimeoutMapProto.newBuilder()\n-                    .setTimeout(applicationTimeouts.get(key))\n-                    .setApplicationTimeoutType(\n-                        ProtoUtils.convertToProtoFormat(key))\n-                    .build();\n-              }\n+          @Override\n+          public StringStringMapProto next() {\n+            String key \u003d iterator.next();\n+            return StringStringMapProto.newBuilder()\n+                .setValue(schedulingProperties.get(key)).setKey(key).build();\n+          }\n \n-              @Override\n-              public void remove() {\n-                throw new UnsupportedOperationException();\n-              }\n-            };\n-          }\n\\ No newline at end of file\n+          @Override\n+          public void remove() {\n+            throw new UnsupportedOperationException();\n+          }\n+        };\n+      }\n\\ No newline at end of file\n",
          "actualSource": "      public Iterator\u003cStringStringMapProto\u003e iterator() {\n        return new Iterator\u003cStringStringMapProto\u003e() {\n          private Iterator\u003cString\u003e iterator \u003d schedulingProperties.keySet()\n              .iterator();\n\n          @Override\n          public boolean hasNext() {\n            return iterator.hasNext();\n          }\n\n          @Override\n          public StringStringMapProto next() {\n            String key \u003d iterator.next();\n            return StringStringMapProto.newBuilder()\n                .setValue(schedulingProperties.get(key)).setKey(key).build();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationSubmissionContextPBImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4205. Add a service for monitoring application life time out. Contributed by Rohith Sharma K S\n",
      "commitDate": "29/09/16 7:00 AM",
      "commitName": "2ae5a3a5bf5ea355370469a53eeccff0b5220081",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,26 @@\n+          public Iterator\u003cApplicationTimeoutMapProto\u003e iterator() {\n+            return new Iterator\u003cApplicationTimeoutMapProto\u003e() {\n+              private Iterator\u003cApplicationTimeoutType\u003e iterator \u003d\n+                  applicationTimeouts.keySet().iterator();\n+\n+              @Override\n+              public boolean hasNext() {\n+                return iterator.hasNext();\n+              }\n+\n+              @Override\n+              public ApplicationTimeoutMapProto next() {\n+                ApplicationTimeoutType key \u003d iterator.next();\n+                return ApplicationTimeoutMapProto.newBuilder()\n+                    .setTimeout(applicationTimeouts.get(key))\n+                    .setApplicationTimeoutType(\n+                        ProtoUtils.convertToProtoFormat(key))\n+                    .build();\n+              }\n+\n+              @Override\n+              public void remove() {\n+                throw new UnsupportedOperationException();\n+              }\n+            };\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public Iterator\u003cApplicationTimeoutMapProto\u003e iterator() {\n            return new Iterator\u003cApplicationTimeoutMapProto\u003e() {\n              private Iterator\u003cApplicationTimeoutType\u003e iterator \u003d\n                  applicationTimeouts.keySet().iterator();\n\n              @Override\n              public boolean hasNext() {\n                return iterator.hasNext();\n              }\n\n              @Override\n              public ApplicationTimeoutMapProto next() {\n                ApplicationTimeoutType key \u003d iterator.next();\n                return ApplicationTimeoutMapProto.newBuilder()\n                    .setTimeout(applicationTimeouts.get(key))\n                    .setApplicationTimeoutType(\n                        ProtoUtils.convertToProtoFormat(key))\n                    .build();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationSubmissionContextPBImpl.java"
    }
  }
}