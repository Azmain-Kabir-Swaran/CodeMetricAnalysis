{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemRMStateStore.java",
  "functionName": "loadState",
  "functionId": "loadState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
  "functionStartLine": 228,
  "functionEndLine": 241,
  "numCommitsSeen": 57,
  "timeTaken": 2481,
  "changeHistory": [
    "285d2c07531a92067368ac4bdd21d309e6e81bc4",
    "f271d377357ad680924d19f07e6c8315e7c89bae",
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2",
    "74231f027607ff1a6fe7d72fad28108826963cf3",
    "29ddce96a26c45fc747408801bf65255fbd9990f"
  ],
  "changeHistoryShort": {
    "285d2c07531a92067368ac4bdd21d309e6e81bc4": "Ybodychange",
    "f271d377357ad680924d19f07e6c8315e7c89bae": "Ybodychange",
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe": "Ybodychange",
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895": "Ybodychange",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": "Ybodychange",
    "74231f027607ff1a6fe7d72fad28108826963cf3": "Ybodychange",
    "29ddce96a26c45fc747408801bf65255fbd9990f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "285d2c07531a92067368ac4bdd21d309e6e81bc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8449. RM HA for AM web server HTTPS Support. (Contributed by Robert Kanter)\n",
      "commitDate": "18/10/18 9:24 PM",
      "commitName": "285d2c07531a92067368ac4bdd21d309e6e81bc4",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "02/05/18 5:23 PM",
      "commitNameOld": "e6a80e476d4348a4373e6dd5792d70edff16516f",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 169.17,
      "commitsBetweenForRepo": 1401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   public synchronized RMState loadState() throws Exception {\n     RMState rmState \u003d new RMState();\n     // recover DelegationTokenSecretManager\n     loadRMDTSecretManagerState(rmState);\n     // recover RM applications\n     loadRMAppState(rmState);\n     // recover AMRMTokenSecretManager\n     loadAMRMTokenSecretManagerState(rmState);\n     // recover reservation state\n     loadReservationSystemState(rmState);\n+    // recover ProxyCAManager state\n+    loadProxyCAManagerState(rmState);\n     return rmState;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    RMState rmState \u003d new RMState();\n    // recover DelegationTokenSecretManager\n    loadRMDTSecretManagerState(rmState);\n    // recover RM applications\n    loadRMAppState(rmState);\n    // recover AMRMTokenSecretManager\n    loadAMRMTokenSecretManagerState(rmState);\n    // recover reservation state\n    loadReservationSystemState(rmState);\n    // recover ProxyCAManager state\n    loadProxyCAManagerState(rmState);\n    return rmState;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "f271d377357ad680924d19f07e6c8315e7c89bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)\n",
      "commitDate": "05/08/15 12:57 PM",
      "commitName": "f271d377357ad680924d19f07e6c8315e7c89bae",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "28/05/15 3:25 PM",
      "commitNameOld": "9acd24fec408c182683968ae2c75ca2c38866a60",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 68.9,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,12 @@\n   public synchronized RMState loadState() throws Exception {\n     RMState rmState \u003d new RMState();\n     // recover DelegationTokenSecretManager\n     loadRMDTSecretManagerState(rmState);\n     // recover RM applications\n     loadRMAppState(rmState);\n     // recover AMRMTokenSecretManager\n     loadAMRMTokenSecretManagerState(rmState);\n+    // recover reservation state\n+    loadReservationSystemState(rmState);\n     return rmState;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    RMState rmState \u003d new RMState();\n    // recover DelegationTokenSecretManager\n    loadRMDTSecretManagerState(rmState);\n    // recover RM applications\n    loadRMAppState(rmState);\n    // recover AMRMTokenSecretManager\n    loadAMRMTokenSecretManagerState(rmState);\n    // recover reservation state\n    loadReservationSystemState(rmState);\n    return rmState;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2211. Persist AMRMToken master key in RMStateStore for RM recovery. Contributed by Xuan Gong\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 1:42 PM",
      "commitName": "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/07/14 12:58 PM",
      "commitNameOld": "8fbca62a9008306249779367af1d3c329f875552",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,10 @@\n   public synchronized RMState loadState() throws Exception {\n     RMState rmState \u003d new RMState();\n     // recover DelegationTokenSecretManager\n     loadRMDTSecretManagerState(rmState);\n     // recover RM applications\n     loadRMAppState(rmState);\n+    // recover AMRMTokenSecretManager\n+    loadAMRMTokenSecretManagerState(rmState);\n     return rmState;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    RMState rmState \u003d new RMState();\n    // recover DelegationTokenSecretManager\n    loadRMDTSecretManagerState(rmState);\n    // recover RM applications\n    loadRMAppState(rmState);\n    // recover AMRMTokenSecretManager\n    loadAMRMTokenSecretManagerState(rmState);\n    return rmState;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895": {
      "type": "Ybodychange",
      "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 9:14 PM",
      "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/05/13 8:22 PM",
      "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,8 @@\n   public synchronized RMState loadState() throws Exception {\n-    try {\n-      RMState state \u003d new RMState();\n-      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n-      List\u003cApplicationAttemptState\u003e attempts \u003d\n-                                      new ArrayList\u003cApplicationAttemptState\u003e();\n-      for(FileStatus childNodeStatus : childNodes) {\n-        assert childNodeStatus.isFile();\n-        String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(childNodeName);\n-        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n-        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n-          // application\n-          LOG.info(\"Loading application from node: \" + childNodeName);\n-          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n-          ApplicationStateDataPBImpl appStateData \u003d\n-              new ApplicationStateDataPBImpl(\n-                                ApplicationStateDataProto.parseFrom(childData));\n-          ApplicationState appState \u003d new ApplicationState(\n-                               appStateData.getSubmitTime(),\n-                               appStateData.getApplicationSubmissionContext(),\n-                               appStateData.getUser());\n-          // assert child node name is same as actual applicationId\n-          assert appId.equals(appState.context.getApplicationId());\n-          state.appState.put(appId, appState);\n-        } else if(childNodeName.startsWith(\n-                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-          // attempt\n-          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n-          ApplicationAttemptId attemptId \u003d\n-                          ConverterUtils.toApplicationAttemptId(childNodeName);\n-          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n-              new ApplicationAttemptStateDataPBImpl(\n-                  ApplicationAttemptStateDataProto.parseFrom(childData));\n-          Credentials credentials \u003d null;\n-          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n-            credentials \u003d new Credentials();\n-            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-            dibb.reset(attemptStateData.getAppAttemptTokens());\n-            credentials.readTokenStorageStream(dibb);\n-          }\n-          ApplicationAttemptState attemptState \u003d\n-              new ApplicationAttemptState(attemptId,\n-                attemptStateData.getMasterContainer(), credentials);\n-\n-          // assert child node name is same as application attempt id\n-          assert attemptId.equals(attemptState.getAttemptId());\n-          attempts.add(attemptState);\n-        } else {\n-          LOG.info(\"Unknown child node with name: \" + childNodeName);\n-        }\n-      }\n-\n-      // go through all attempts and add them to their apps\n-      for(ApplicationAttemptState attemptState : attempts) {\n-        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d state.appState.get(appId);\n-        if(appState !\u003d null) {\n-          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n-        } else {\n-          // the application node may have been removed when the application\n-          // completed but the RM might have stopped before it could remove the\n-          // application attempt nodes\n-          LOG.info(\"Application node not found for attempt: \"\n-                    + attemptState.getAttemptId());\n-          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n-        }\n-      }\n-\n-      return state;\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to load state.\", e);\n-      throw e;\n-    }\n+    RMState rmState \u003d new RMState();\n+    // recover DelegationTokenSecretManager\n+    loadRMDTSecretManagerState(rmState);\n+    // recover RM applications\n+    loadRMAppState(rmState);\n+    return rmState;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    RMState rmState \u003d new RMState();\n    // recover DelegationTokenSecretManager\n    loadRMDTSecretManagerState(rmState);\n    // recover RM applications\n    loadRMAppState(rmState);\n    return rmState;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-571. Remove user from ContainerLaunchContext. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 8:22 PM",
      "commitName": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/05/13 11:20 PM",
      "commitNameOld": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.88,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n   public synchronized RMState loadState() throws Exception {\n     try {\n       RMState state \u003d new RMState();\n       FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n         Path childNodePath \u003d getNodePath(childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n-                               appStateData.getApplicationSubmissionContext());\n+                               appStateData.getApplicationSubmissionContext(),\n+                               appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n           state.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d state.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n           deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n         }\n       }\n \n       return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    try {\n      RMState state \u003d new RMState();\n      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          state.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d state.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n        }\n      }\n\n      return state;\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "74231f027607ff1a6fe7d72fad28108826963cf3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-582. Changed ResourceManager to recover Application token and client tokens for app attempt so that RM can be restarted while preserving current applications. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/13 11:20 PM",
      "commitName": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/04/13 11:02 AM",
      "commitNameOld": "f0ac5a849c24c20f891c2a43af412030e7af2b9b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.51,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,74 @@\n   public synchronized RMState loadState() throws Exception {\n     try {\n       RMState state \u003d new RMState();\n       FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n         Path childNodePath \u003d getNodePath(childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n           state.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n-          ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n-                          attemptId, attemptStateData.getMasterContainer());\n+          Credentials credentials \u003d null;\n+          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n+            credentials \u003d new Credentials();\n+            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n+            dibb.reset(attemptStateData.getAppAttemptTokens());\n+            credentials.readTokenStorageStream(dibb);\n+          }\n+          ApplicationAttemptState attemptState \u003d\n+              new ApplicationAttemptState(attemptId,\n+                attemptStateData.getMasterContainer(), credentials);\n+\n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d state.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n           deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n         }\n       }\n \n       return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    try {\n      RMState state \u003d new RMState();\n      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          state.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d state.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n        }\n      }\n\n      return state;\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "29ddce96a26c45fc747408801bf65255fbd9990f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-231. RM Restart - Add FS-based persistent store implementation for RMStateStore. Contributed by Bikas Saha\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1437245 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 4:57 PM",
      "commitName": "29ddce96a26c45fc747408801bf65255fbd9990f",
      "commitAuthor": "Hitesh Shah",
      "diff": "@@ -0,0 +1,65 @@\n+  public synchronized RMState loadState() throws Exception {\n+    try {\n+      RMState state \u003d new RMState();\n+      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      List\u003cApplicationAttemptState\u003e attempts \u003d\n+                                      new ArrayList\u003cApplicationAttemptState\u003e();\n+      for(FileStatus childNodeStatus : childNodes) {\n+        assert childNodeStatus.isFile();\n+        String childNodeName \u003d childNodeStatus.getPath().getName();\n+        Path childNodePath \u003d getNodePath(childNodeName);\n+        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n+        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n+          // application\n+          LOG.info(\"Loading application from node: \" + childNodeName);\n+          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n+          ApplicationStateDataPBImpl appStateData \u003d\n+              new ApplicationStateDataPBImpl(\n+                                ApplicationStateDataProto.parseFrom(childData));\n+          ApplicationState appState \u003d new ApplicationState(\n+                               appStateData.getSubmitTime(),\n+                               appStateData.getApplicationSubmissionContext());\n+          // assert child node name is same as actual applicationId\n+          assert appId.equals(appState.context.getApplicationId());\n+          state.appState.put(appId, appState);\n+        } else if(childNodeName.startsWith(\n+                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+          // attempt\n+          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n+          ApplicationAttemptId attemptId \u003d\n+                          ConverterUtils.toApplicationAttemptId(childNodeName);\n+          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+              new ApplicationAttemptStateDataPBImpl(\n+                  ApplicationAttemptStateDataProto.parseFrom(childData));\n+          ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n+                          attemptId, attemptStateData.getMasterContainer());\n+          // assert child node name is same as application attempt id\n+          assert attemptId.equals(attemptState.getAttemptId());\n+          attempts.add(attemptState);\n+        } else {\n+          LOG.info(\"Unknown child node with name: \" + childNodeName);\n+        }\n+      }\n+\n+      // go through all attempts and add them to their apps\n+      for(ApplicationAttemptState attemptState : attempts) {\n+        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n+        ApplicationState appState \u003d state.appState.get(appId);\n+        if(appState !\u003d null) {\n+          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+        } else {\n+          // the application node may have been removed when the application\n+          // completed but the RM might have stopped before it could remove the\n+          // application attempt nodes\n+          LOG.info(\"Application node not found for attempt: \"\n+                    + attemptState.getAttemptId());\n+          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+        }\n+      }\n+\n+      return state;\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to load state.\", e);\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    try {\n      RMState state \u003d new RMState();\n      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          state.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n                          attemptId, attemptStateData.getMasterContainer());\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d state.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n        }\n      }\n\n      return state;\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java"
    }
  }
}