{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Storage.java",
  "functionName": "doRecover",
  "functionId": "doRecover___curState-StorageState",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
  "functionStartLine": 788,
  "functionEndLine": 842,
  "numCommitsSeen": 57,
  "timeTaken": 6302,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ybodychange",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     public void doRecover(StorageState curState) throws IOException {\n       File curDir \u003d getCurrentDir();\n       if (curDir \u003d\u003d null || root \u003d\u003d null) {\n         // at this point, we do not support recovery on PROVIDED storages\n         return;\n       }\n       String rootPath \u003d root.getCanonicalPath();\n       switch(curState) {\n       case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n-        LOG.info(\"Completing previous upgrade for storage directory \" \n-                 + rootPath);\n+        LOG.info(\"Completing previous upgrade for storage directory {}\",\n+            rootPath);\n         rename(getPreviousTmp(), getPreviousDir());\n         return;\n       case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n-        LOG.info(\"Recovering storage directory \" + rootPath\n-                 + \" from previous upgrade\");\n+        LOG.info(\"Recovering storage directory {} from previous upgrade\",\n+            rootPath);\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getPreviousTmp(), curDir);\n         return;\n       case COMPLETE_ROLLBACK: // rm removed.tmp\n-        LOG.info(\"Completing previous rollback for storage directory \"\n-                 + rootPath);\n+        LOG.info(\"Completing previous rollback for storage directory {}\",\n+            rootPath);\n         deleteDir(getRemovedTmp());\n         return;\n       case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n-        LOG.info(\"Recovering storage directory \" + rootPath\n-                 + \" from previous rollback\");\n+        LOG.info(\"Recovering storage directory {} from previous rollback\",\n+            rootPath);\n         rename(getRemovedTmp(), curDir);\n         return;\n       case COMPLETE_FINALIZE: // rm finalized.tmp\n-        LOG.info(\"Completing previous finalize for storage directory \"\n-                 + rootPath);\n+        LOG.info(\"Completing previous finalize for storage directory {}\",\n+            rootPath);\n         deleteDir(getFinalizedTmp());\n         return;\n       case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n-        LOG.info(\"Completing previous checkpoint for storage directory \" \n-                 + rootPath);\n+        LOG.info(\"Completing previous checkpoint for storage directory {}\",\n+            rootPath);\n         File prevCkptDir \u003d getPreviousCheckpoint();\n         if (prevCkptDir.exists())\n           deleteDir(prevCkptDir);\n         rename(getLastCheckpointTmp(), prevCkptDir);\n         return;\n       case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n-        LOG.info(\"Recovering storage directory \" + rootPath\n-                 + \" from failed checkpoint\");\n+        LOG.info(\"Recovering storage directory {} from failed checkpoint\",\n+            rootPath);\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getLastCheckpointTmp(), curDir);\n         return;\n       default:\n         throw new IOException(\"Unexpected FS state: \" + curState\n             + \" for storage directory: \" + rootPath);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      if (curDir \u003d\u003d null || root \u003d\u003d null) {\n        // at this point, we do not support recovery on PROVIDED storages\n        return;\n      }\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory {}\",\n            rootPath);\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory {} from previous upgrade\",\n            rootPath);\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory {}\",\n            rootPath);\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory {} from previous rollback\",\n            rootPath);\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory {}\",\n            rootPath);\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory {}\",\n            rootPath);\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory {} from failed checkpoint\",\n            rootPath);\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState\n            + \" for storage directory: \" + rootPath);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "06/04/17 2:33 PM",
      "commitNameOld": "a49fac5302128a6f5d971f5818d0fd874c3932e3",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 253.18,
      "commitsBetweenForRepo": 1749,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,55 @@\n     public void doRecover(StorageState curState) throws IOException {\n       File curDir \u003d getCurrentDir();\n+      if (curDir \u003d\u003d null || root \u003d\u003d null) {\n+        //at this point, we do not support recovery on PROVIDED storages\n+        return;\n+      }\n       String rootPath \u003d root.getCanonicalPath();\n       switch(curState) {\n       case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n         LOG.info(\"Completing previous upgrade for storage directory \" \n                  + rootPath);\n         rename(getPreviousTmp(), getPreviousDir());\n         return;\n       case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n                  + \" from previous upgrade\");\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getPreviousTmp(), curDir);\n         return;\n       case COMPLETE_ROLLBACK: // rm removed.tmp\n         LOG.info(\"Completing previous rollback for storage directory \"\n                  + rootPath);\n         deleteDir(getRemovedTmp());\n         return;\n       case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n                  + \" from previous rollback\");\n         rename(getRemovedTmp(), curDir);\n         return;\n       case COMPLETE_FINALIZE: // rm finalized.tmp\n         LOG.info(\"Completing previous finalize for storage directory \"\n                  + rootPath);\n         deleteDir(getFinalizedTmp());\n         return;\n       case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n         LOG.info(\"Completing previous checkpoint for storage directory \" \n                  + rootPath);\n         File prevCkptDir \u003d getPreviousCheckpoint();\n         if (prevCkptDir.exists())\n           deleteDir(prevCkptDir);\n         rename(getLastCheckpointTmp(), prevCkptDir);\n         return;\n       case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n                  + \" from failed checkpoint\");\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getLastCheckpointTmp(), curDir);\n         return;\n       default:\n         throw new IOException(\"Unexpected FS state: \" + curState\n             + \" for storage directory: \" + rootPath);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      if (curDir \u003d\u003d null || root \u003d\u003d null) {\n        //at this point, we do not support recovery on PROVIDED storages\n        return;\n      }\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory \" \n                 + rootPath);\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous upgrade\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory \"\n                 + rootPath);\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous rollback\");\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory \"\n                 + rootPath);\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory \" \n                 + rootPath);\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from failed checkpoint\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState\n            + \" for storage directory: \" + rootPath);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "29/10/15 11:23 AM",
      "commitNameOld": "8def51a708e5de8a57689b8c9b3fd034cfd2cd78",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 90.36,
      "commitsBetweenForRepo": 567,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n     public void doRecover(StorageState curState) throws IOException {\n       File curDir \u003d getCurrentDir();\n       String rootPath \u003d root.getCanonicalPath();\n       switch(curState) {\n       case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n         LOG.info(\"Completing previous upgrade for storage directory \" \n                  + rootPath);\n         rename(getPreviousTmp(), getPreviousDir());\n         return;\n       case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n                  + \" from previous upgrade\");\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getPreviousTmp(), curDir);\n         return;\n       case COMPLETE_ROLLBACK: // rm removed.tmp\n         LOG.info(\"Completing previous rollback for storage directory \"\n                  + rootPath);\n         deleteDir(getRemovedTmp());\n         return;\n       case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n                  + \" from previous rollback\");\n         rename(getRemovedTmp(), curDir);\n         return;\n       case COMPLETE_FINALIZE: // rm finalized.tmp\n         LOG.info(\"Completing previous finalize for storage directory \"\n                  + rootPath);\n         deleteDir(getFinalizedTmp());\n         return;\n       case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n         LOG.info(\"Completing previous checkpoint for storage directory \" \n                  + rootPath);\n         File prevCkptDir \u003d getPreviousCheckpoint();\n         if (prevCkptDir.exists())\n           deleteDir(prevCkptDir);\n         rename(getLastCheckpointTmp(), prevCkptDir);\n         return;\n       case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n                  + \" from failed checkpoint\");\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getLastCheckpointTmp(), curDir);\n         return;\n       default:\n-        throw new IOException(\"Unexpected FS state: \" + curState);\n+        throw new IOException(\"Unexpected FS state: \" + curState\n+            + \" for storage directory: \" + rootPath);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory \" \n                 + rootPath);\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous upgrade\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory \"\n                 + rootPath);\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous rollback\");\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory \"\n                 + rootPath);\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory \" \n                 + rootPath);\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from failed checkpoint\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState\n            + \" for storage directory: \" + rootPath);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "04/09/12 9:57 PM",
      "commitNameOld": "99ec5bd8d36a01cba7a0b2ab1feed3203f493ce6",
      "commitAuthorOld": "",
      "daysBetweenCommits": 53.76,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     public void doRecover(StorageState curState) throws IOException {\n       File curDir \u003d getCurrentDir();\n       String rootPath \u003d root.getCanonicalPath();\n       switch(curState) {\n       case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n         LOG.info(\"Completing previous upgrade for storage directory \" \n-                 + rootPath + \".\");\n+                 + rootPath);\n         rename(getPreviousTmp(), getPreviousDir());\n         return;\n       case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n-                 + \" from previous upgrade.\");\n+                 + \" from previous upgrade\");\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getPreviousTmp(), curDir);\n         return;\n       case COMPLETE_ROLLBACK: // rm removed.tmp\n         LOG.info(\"Completing previous rollback for storage directory \"\n-                 + rootPath + \".\");\n+                 + rootPath);\n         deleteDir(getRemovedTmp());\n         return;\n       case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n-                 + \" from previous rollback.\");\n+                 + \" from previous rollback\");\n         rename(getRemovedTmp(), curDir);\n         return;\n       case COMPLETE_FINALIZE: // rm finalized.tmp\n         LOG.info(\"Completing previous finalize for storage directory \"\n-                 + rootPath + \".\");\n+                 + rootPath);\n         deleteDir(getFinalizedTmp());\n         return;\n       case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n         LOG.info(\"Completing previous checkpoint for storage directory \" \n-                 + rootPath + \".\");\n+                 + rootPath);\n         File prevCkptDir \u003d getPreviousCheckpoint();\n         if (prevCkptDir.exists())\n           deleteDir(prevCkptDir);\n         rename(getLastCheckpointTmp(), prevCkptDir);\n         return;\n       case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n         LOG.info(\"Recovering storage directory \" + rootPath\n-                 + \" from failed checkpoint.\");\n+                 + \" from failed checkpoint\");\n         if (curDir.exists())\n           deleteDir(curDir);\n         rename(getLastCheckpointTmp(), curDir);\n         return;\n       default:\n         throw new IOException(\"Unexpected FS state: \" + curState);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory \" \n                 + rootPath);\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous upgrade\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory \"\n                 + rootPath);\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous rollback\");\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory \"\n                 + rootPath);\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory \" \n                 + rootPath);\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from failed checkpoint\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory \" \n                 + rootPath + \".\");\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous upgrade.\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory \"\n                 + rootPath + \".\");\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous rollback.\");\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory \"\n                 + rootPath + \".\");\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory \" \n                 + rootPath + \".\");\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from failed checkpoint.\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory \" \n                 + rootPath + \".\");\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous upgrade.\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory \"\n                 + rootPath + \".\");\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous rollback.\");\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory \"\n                 + rootPath + \".\");\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory \" \n                 + rootPath + \".\");\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from failed checkpoint.\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState);\n      }\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/Storage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,50 @@\n+    public void doRecover(StorageState curState) throws IOException {\n+      File curDir \u003d getCurrentDir();\n+      String rootPath \u003d root.getCanonicalPath();\n+      switch(curState) {\n+      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n+        LOG.info(\"Completing previous upgrade for storage directory \" \n+                 + rootPath + \".\");\n+        rename(getPreviousTmp(), getPreviousDir());\n+        return;\n+      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n+        LOG.info(\"Recovering storage directory \" + rootPath\n+                 + \" from previous upgrade.\");\n+        if (curDir.exists())\n+          deleteDir(curDir);\n+        rename(getPreviousTmp(), curDir);\n+        return;\n+      case COMPLETE_ROLLBACK: // rm removed.tmp\n+        LOG.info(\"Completing previous rollback for storage directory \"\n+                 + rootPath + \".\");\n+        deleteDir(getRemovedTmp());\n+        return;\n+      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n+        LOG.info(\"Recovering storage directory \" + rootPath\n+                 + \" from previous rollback.\");\n+        rename(getRemovedTmp(), curDir);\n+        return;\n+      case COMPLETE_FINALIZE: // rm finalized.tmp\n+        LOG.info(\"Completing previous finalize for storage directory \"\n+                 + rootPath + \".\");\n+        deleteDir(getFinalizedTmp());\n+        return;\n+      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n+        LOG.info(\"Completing previous checkpoint for storage directory \" \n+                 + rootPath + \".\");\n+        File prevCkptDir \u003d getPreviousCheckpoint();\n+        if (prevCkptDir.exists())\n+          deleteDir(prevCkptDir);\n+        rename(getLastCheckpointTmp(), prevCkptDir);\n+        return;\n+      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n+        LOG.info(\"Recovering storage directory \" + rootPath\n+                 + \" from failed checkpoint.\");\n+        if (curDir.exists())\n+          deleteDir(curDir);\n+        rename(getLastCheckpointTmp(), curDir);\n+        return;\n+      default:\n+        throw new IOException(\"Unexpected FS state: \" + curState);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void doRecover(StorageState curState) throws IOException {\n      File curDir \u003d getCurrentDir();\n      String rootPath \u003d root.getCanonicalPath();\n      switch(curState) {\n      case COMPLETE_UPGRADE:  // mv previous.tmp -\u003e previous\n        LOG.info(\"Completing previous upgrade for storage directory \" \n                 + rootPath + \".\");\n        rename(getPreviousTmp(), getPreviousDir());\n        return;\n      case RECOVER_UPGRADE:   // mv previous.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous upgrade.\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getPreviousTmp(), curDir);\n        return;\n      case COMPLETE_ROLLBACK: // rm removed.tmp\n        LOG.info(\"Completing previous rollback for storage directory \"\n                 + rootPath + \".\");\n        deleteDir(getRemovedTmp());\n        return;\n      case RECOVER_ROLLBACK:  // mv removed.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from previous rollback.\");\n        rename(getRemovedTmp(), curDir);\n        return;\n      case COMPLETE_FINALIZE: // rm finalized.tmp\n        LOG.info(\"Completing previous finalize for storage directory \"\n                 + rootPath + \".\");\n        deleteDir(getFinalizedTmp());\n        return;\n      case COMPLETE_CHECKPOINT: // mv lastcheckpoint.tmp -\u003e previous.checkpoint\n        LOG.info(\"Completing previous checkpoint for storage directory \" \n                 + rootPath + \".\");\n        File prevCkptDir \u003d getPreviousCheckpoint();\n        if (prevCkptDir.exists())\n          deleteDir(prevCkptDir);\n        rename(getLastCheckpointTmp(), prevCkptDir);\n        return;\n      case RECOVER_CHECKPOINT:  // mv lastcheckpoint.tmp -\u003e current\n        LOG.info(\"Recovering storage directory \" + rootPath\n                 + \" from failed checkpoint.\");\n        if (curDir.exists())\n          deleteDir(curDir);\n        rename(getLastCheckpointTmp(), curDir);\n        return;\n      default:\n        throw new IOException(\"Unexpected FS state: \" + curState);\n      }\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/Storage.java"
    }
  }
}