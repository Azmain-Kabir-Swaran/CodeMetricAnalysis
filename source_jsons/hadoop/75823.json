{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Lz4Compressor.java",
  "functionName": "compress",
  "functionId": "compress___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/lz4/Lz4Compressor.java",
  "functionStartLine": 207,
  "functionEndLine": 254,
  "numCommitsSeen": 5,
  "timeTaken": 919,
  "changeHistory": [
    "c8e200f2c23da1fbdba9c78b98e3773ce5ca1157",
    "191b56d802b78b8d5ca43e43544b5ecef674a09c"
  ],
  "changeHistoryShort": {
    "c8e200f2c23da1fbdba9c78b98e3773ce5ca1157": "Ybodychange",
    "191b56d802b78b8d5ca43e43544b5ecef674a09c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8e200f2c23da1fbdba9c78b98e3773ce5ca1157": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9319. Update bundled LZ4 source to r99. (Binglin Chang via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1510734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/13 2:10 PM",
      "commitName": "c8e200f2c23da1fbdba9c78b98e3773ce5ca1157",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "18/07/13 3:38 PM",
      "commitNameOld": "ba3d29a2e28a102e8ae850d1ddc18a9c9005077a",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 17.94,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public synchronized int compress(byte[] b, int off, int len)\n       throws IOException {\n     if (b \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n     if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n       throw new ArrayIndexOutOfBoundsException();\n     }\n \n     // Check if there is compressed data\n     int n \u003d compressedDirectBuf.remaining();\n     if (n \u003e 0) {\n       n \u003d Math.min(n, len);\n       ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n       bytesWritten +\u003d n;\n       return n;\n     }\n \n     // Re-initialize the lz4\u0027s output direct-buffer\n     compressedDirectBuf.clear();\n     compressedDirectBuf.limit(0);\n     if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n       // No compressed data, so we should have !needsInput or !finished\n       setInputFromSavedData();\n       if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n         // Called without data; write nothing\n         finished \u003d true;\n         return 0;\n       }\n     }\n \n     // Compress data\n-    n \u003d compressBytesDirect();\n+    n \u003d useLz4HC ? compressBytesDirectHC() : compressBytesDirect();\n     compressedDirectBuf.limit(n);\n     uncompressedDirectBuf.clear(); // lz4 consumes all buffer input\n \n     // Set \u0027finished\u0027 if snapy has consumed all user-data\n     if (0 \u003d\u003d userBufLen) {\n       finished \u003d true;\n     }\n \n     // Get atmost \u0027len\u0027 bytes\n     n \u003d Math.min(n, len);\n     bytesWritten +\u003d n;\n     ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n \n     return n;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int compress(byte[] b, int off, int len)\n      throws IOException {\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n\n    // Check if there is compressed data\n    int n \u003d compressedDirectBuf.remaining();\n    if (n \u003e 0) {\n      n \u003d Math.min(n, len);\n      ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n      bytesWritten +\u003d n;\n      return n;\n    }\n\n    // Re-initialize the lz4\u0027s output direct-buffer\n    compressedDirectBuf.clear();\n    compressedDirectBuf.limit(0);\n    if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n      // No compressed data, so we should have !needsInput or !finished\n      setInputFromSavedData();\n      if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n        // Called without data; write nothing\n        finished \u003d true;\n        return 0;\n      }\n    }\n\n    // Compress data\n    n \u003d useLz4HC ? compressBytesDirectHC() : compressBytesDirect();\n    compressedDirectBuf.limit(n);\n    uncompressedDirectBuf.clear(); // lz4 consumes all buffer input\n\n    // Set \u0027finished\u0027 if snapy has consumed all user-data\n    if (0 \u003d\u003d userBufLen) {\n      finished \u003d true;\n    }\n\n    // Get atmost \u0027len\u0027 bytes\n    n \u003d Math.min(n, len);\n    bytesWritten +\u003d n;\n    ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/lz4/Lz4Compressor.java",
      "extendedDetails": {}
    },
    "191b56d802b78b8d5ca43e43544b5ecef674a09c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7657. Add support for LZ4 compression. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1220314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/11 4:54 PM",
      "commitName": "191b56d802b78b8d5ca43e43544b5ecef674a09c",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,48 @@\n+  public synchronized int compress(byte[] b, int off, int len)\n+      throws IOException {\n+    if (b \u003d\u003d null) {\n+      throw new NullPointerException();\n+    }\n+    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+\n+    // Check if there is compressed data\n+    int n \u003d compressedDirectBuf.remaining();\n+    if (n \u003e 0) {\n+      n \u003d Math.min(n, len);\n+      ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n+      bytesWritten +\u003d n;\n+      return n;\n+    }\n+\n+    // Re-initialize the lz4\u0027s output direct-buffer\n+    compressedDirectBuf.clear();\n+    compressedDirectBuf.limit(0);\n+    if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n+      // No compressed data, so we should have !needsInput or !finished\n+      setInputFromSavedData();\n+      if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n+        // Called without data; write nothing\n+        finished \u003d true;\n+        return 0;\n+      }\n+    }\n+\n+    // Compress data\n+    n \u003d compressBytesDirect();\n+    compressedDirectBuf.limit(n);\n+    uncompressedDirectBuf.clear(); // lz4 consumes all buffer input\n+\n+    // Set \u0027finished\u0027 if snapy has consumed all user-data\n+    if (0 \u003d\u003d userBufLen) {\n+      finished \u003d true;\n+    }\n+\n+    // Get atmost \u0027len\u0027 bytes\n+    n \u003d Math.min(n, len);\n+    bytesWritten +\u003d n;\n+    ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n+\n+    return n;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int compress(byte[] b, int off, int len)\n      throws IOException {\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n\n    // Check if there is compressed data\n    int n \u003d compressedDirectBuf.remaining();\n    if (n \u003e 0) {\n      n \u003d Math.min(n, len);\n      ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n      bytesWritten +\u003d n;\n      return n;\n    }\n\n    // Re-initialize the lz4\u0027s output direct-buffer\n    compressedDirectBuf.clear();\n    compressedDirectBuf.limit(0);\n    if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n      // No compressed data, so we should have !needsInput or !finished\n      setInputFromSavedData();\n      if (0 \u003d\u003d uncompressedDirectBuf.position()) {\n        // Called without data; write nothing\n        finished \u003d true;\n        return 0;\n      }\n    }\n\n    // Compress data\n    n \u003d compressBytesDirect();\n    compressedDirectBuf.limit(n);\n    uncompressedDirectBuf.clear(); // lz4 consumes all buffer input\n\n    // Set \u0027finished\u0027 if snapy has consumed all user-data\n    if (0 \u003d\u003d userBufLen) {\n      finished \u003d true;\n    }\n\n    // Get atmost \u0027len\u0027 bytes\n    n \u003d Math.min(n, len);\n    bytesWritten +\u003d n;\n    ((ByteBuffer) compressedDirectBuf).get(b, off, n);\n\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/lz4/Lz4Compressor.java"
    }
  }
}