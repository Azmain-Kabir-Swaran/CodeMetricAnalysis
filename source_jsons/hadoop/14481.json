{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNodeSyncer.java",
  "functionName": "getMissingLogSegments",
  "functionId": "getMissingLogSegments___thisJournalEditLogs-List__RemoteEditLog____response-GetEditLogManifestResponseProto__remoteJNproxy-JournalNodeProxy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
  "functionStartLine": 321,
  "functionEndLine": 370,
  "numCommitsSeen": 35,
  "timeTaken": 3848,
  "changeHistory": [
    "0ef639235b305d684cbe46818613320b3fa62d44",
    "6347b2253d1b912d1d8d89a4b3d470c596f2c596",
    "7da15eac7abe59f446b184aa1766bbfd3a19db4e",
    "4fb41b31dbc109f11898ea6d8fc0bb3e6c20d89b",
    "0e83ed5e7372c801c9fee01df91b6b56de467ab1",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4"
  ],
  "changeHistoryShort": {
    "0ef639235b305d684cbe46818613320b3fa62d44": "Yparameterchange",
    "6347b2253d1b912d1d8d89a4b3d470c596f2c596": "Yparameterchange",
    "7da15eac7abe59f446b184aa1766bbfd3a19db4e": "Ybodychange",
    "4fb41b31dbc109f11898ea6d8fc0bb3e6c20d89b": "Ybodychange",
    "0e83ed5e7372c801c9fee01df91b6b56de467ab1": "Ybodychange",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0ef639235b305d684cbe46818613320b3fa62d44": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-13073. Cleanup code in InterQJournalProtocol.proto. Contributed by Bharat Viswanadham.\n",
      "commitDate": "02/02/18 4:28 PM",
      "commitName": "0ef639235b305d684cbe46818613320b3fa62d44",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "22/01/18 4:02 PM",
      "commitNameOld": "6347b2253d1b912d1d8d89a4b3d470c596f2c596",
      "commitAuthorOld": "Hanisha Koneru",
      "daysBetweenCommits": 11.02,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n-      GetEditLogManifestFromJournalResponseProto response,\n-      JournalNodeProxy remoteJNproxy) {\n+                                     GetEditLogManifestResponseProto response,\n+                                     JournalNodeProxy remoteJNproxy) {\n \n     List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n         response.getManifest()).getLogs();\n     if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n       LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n       return;\n     }\n     List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n         otherJournalEditLogs);\n \n     if (!missingLogs.isEmpty()) {\n       NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n \n       for (RemoteEditLog missingLog : missingLogs) {\n         URL url \u003d null;\n         boolean success \u003d false;\n         try {\n           if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n             if (response.hasFromURL()) {\n               remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\n                   response.getFromURL(), remoteJNproxy.jnAddr.getHostName());\n             } else {\n               LOG.error(\"EditLogManifest response does not have fromUrl \" +\n                   \"field set. Aborting current sync attempt\");\n               break;\n             }\n           }\n \n           String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n               .getStartTxId(), nsInfo, false);\n           url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n           success \u003d downloadMissingLogSegment(url, missingLog);\n         } catch (URISyntaxException e) {\n           LOG.error(\"EditLogManifest\u0027s fromUrl field syntax incorrect\", e);\n         } catch (MalformedURLException e) {\n           LOG.error(\"MalformedURL when download missing log segment\", e);\n         } catch (Exception e) {\n           LOG.error(\"Exception in downloading missing log segment from url \" +\n               url, e);\n         }\n         if (!success) {\n           LOG.error(\"Aborting current sync attempt.\");\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n                                     GetEditLogManifestResponseProto response,\n                                     JournalNodeProxy remoteJNproxy) {\n\n    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n        response.getManifest()).getLogs();\n    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n      return;\n    }\n    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n        otherJournalEditLogs);\n\n    if (!missingLogs.isEmpty()) {\n      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n\n      for (RemoteEditLog missingLog : missingLogs) {\n        URL url \u003d null;\n        boolean success \u003d false;\n        try {\n          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n            if (response.hasFromURL()) {\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\n                  response.getFromURL(), remoteJNproxy.jnAddr.getHostName());\n            } else {\n              LOG.error(\"EditLogManifest response does not have fromUrl \" +\n                  \"field set. Aborting current sync attempt\");\n              break;\n            }\n          }\n\n          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n              .getStartTxId(), nsInfo, false);\n          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n          success \u003d downloadMissingLogSegment(url, missingLog);\n        } catch (URISyntaxException e) {\n          LOG.error(\"EditLogManifest\u0027s fromUrl field syntax incorrect\", e);\n        } catch (MalformedURLException e) {\n          LOG.error(\"MalformedURL when download missing log segment\", e);\n        } catch (Exception e) {\n          LOG.error(\"Exception in downloading missing log segment from url \" +\n              url, e);\n        }\n        if (!success) {\n          LOG.error(\"Aborting current sync attempt.\");\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {
        "oldValue": "[thisJournalEditLogs-List\u003cRemoteEditLog\u003e, response-GetEditLogManifestFromJournalResponseProto, remoteJNproxy-JournalNodeProxy]",
        "newValue": "[thisJournalEditLogs-List\u003cRemoteEditLog\u003e, response-GetEditLogManifestResponseProto, remoteJNproxy-JournalNodeProxy]"
      }
    },
    "6347b2253d1b912d1d8d89a4b3d470c596f2c596": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-13023. Journal Sync does not work on a secure cluster. Contributed by Bharat Viswanadham.\n",
      "commitDate": "22/01/18 4:02 PM",
      "commitName": "6347b2253d1b912d1d8d89a4b3d470c596f2c596",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "10/11/17 4:30 PM",
      "commitNameOld": "6d201f77c734d6c6a9e3e297fe3dbff251cbb8b3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 72.98,
      "commitsBetweenForRepo": 377,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n-      GetEditLogManifestResponseProto response,\n+      GetEditLogManifestFromJournalResponseProto response,\n       JournalNodeProxy remoteJNproxy) {\n \n     List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n         response.getManifest()).getLogs();\n     if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n       LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n       return;\n     }\n     List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n         otherJournalEditLogs);\n \n     if (!missingLogs.isEmpty()) {\n       NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n \n       for (RemoteEditLog missingLog : missingLogs) {\n         URL url \u003d null;\n         boolean success \u003d false;\n         try {\n           if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n             if (response.hasFromURL()) {\n               remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\n                   response.getFromURL(), remoteJNproxy.jnAddr.getHostName());\n             } else {\n               LOG.error(\"EditLogManifest response does not have fromUrl \" +\n                   \"field set. Aborting current sync attempt\");\n               break;\n             }\n           }\n \n           String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n               .getStartTxId(), nsInfo, false);\n           url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n           success \u003d downloadMissingLogSegment(url, missingLog);\n         } catch (URISyntaxException e) {\n           LOG.error(\"EditLogManifest\u0027s fromUrl field syntax incorrect\", e);\n         } catch (MalformedURLException e) {\n           LOG.error(\"MalformedURL when download missing log segment\", e);\n         } catch (Exception e) {\n           LOG.error(\"Exception in downloading missing log segment from url \" +\n               url, e);\n         }\n         if (!success) {\n           LOG.error(\"Aborting current sync attempt.\");\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      GetEditLogManifestFromJournalResponseProto response,\n      JournalNodeProxy remoteJNproxy) {\n\n    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n        response.getManifest()).getLogs();\n    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n      return;\n    }\n    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n        otherJournalEditLogs);\n\n    if (!missingLogs.isEmpty()) {\n      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n\n      for (RemoteEditLog missingLog : missingLogs) {\n        URL url \u003d null;\n        boolean success \u003d false;\n        try {\n          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n            if (response.hasFromURL()) {\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\n                  response.getFromURL(), remoteJNproxy.jnAddr.getHostName());\n            } else {\n              LOG.error(\"EditLogManifest response does not have fromUrl \" +\n                  \"field set. Aborting current sync attempt\");\n              break;\n            }\n          }\n\n          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n              .getStartTxId(), nsInfo, false);\n          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n          success \u003d downloadMissingLogSegment(url, missingLog);\n        } catch (URISyntaxException e) {\n          LOG.error(\"EditLogManifest\u0027s fromUrl field syntax incorrect\", e);\n        } catch (MalformedURLException e) {\n          LOG.error(\"MalformedURL when download missing log segment\", e);\n        } catch (Exception e) {\n          LOG.error(\"Exception in downloading missing log segment from url \" +\n              url, e);\n        }\n        if (!success) {\n          LOG.error(\"Aborting current sync attempt.\");\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {
        "oldValue": "[thisJournalEditLogs-List\u003cRemoteEditLog\u003e, response-GetEditLogManifestResponseProto, remoteJNproxy-JournalNodeProxy]",
        "newValue": "[thisJournalEditLogs-List\u003cRemoteEditLog\u003e, response-GetEditLogManifestFromJournalResponseProto, remoteJNproxy-JournalNodeProxy]"
      }
    },
    "7da15eac7abe59f446b184aa1766bbfd3a19db4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12579. JournalNodeSyncer should use fromUrl field of EditLogManifestResponse to construct servlet Url. Contributed by Hanisha Koneru.\n",
      "commitDate": "25/10/17 2:24 PM",
      "commitName": "7da15eac7abe59f446b184aa1766bbfd3a19db4e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "13/10/17 2:22 PM",
      "commitNameOld": "8dd1eeb94fef59feaf19182dd8f1fcf1389c7f34",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 12.0,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,50 @@\n   private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n       GetEditLogManifestResponseProto response,\n       JournalNodeProxy remoteJNproxy) {\n \n     List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n         response.getManifest()).getLogs();\n     if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n       LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n       return;\n     }\n     List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n         otherJournalEditLogs);\n \n     if (!missingLogs.isEmpty()) {\n       NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n \n       for (RemoteEditLog missingLog : missingLogs) {\n         URL url \u003d null;\n         boolean success \u003d false;\n         try {\n           if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n-            remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n-                remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n+            if (response.hasFromURL()) {\n+              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\n+                  response.getFromURL(), remoteJNproxy.jnAddr.getHostName());\n+            } else {\n+              LOG.error(\"EditLogManifest response does not have fromUrl \" +\n+                  \"field set. Aborting current sync attempt\");\n+              break;\n+            }\n           }\n \n           String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n               .getStartTxId(), nsInfo, false);\n           url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n           success \u003d downloadMissingLogSegment(url, missingLog);\n+        } catch (URISyntaxException e) {\n+          LOG.error(\"EditLogManifest\u0027s fromUrl field syntax incorrect\", e);\n         } catch (MalformedURLException e) {\n           LOG.error(\"MalformedURL when download missing log segment\", e);\n         } catch (Exception e) {\n           LOG.error(\"Exception in downloading missing log segment from url \" +\n               url, e);\n         }\n         if (!success) {\n           LOG.error(\"Aborting current sync attempt.\");\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      GetEditLogManifestResponseProto response,\n      JournalNodeProxy remoteJNproxy) {\n\n    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n        response.getManifest()).getLogs();\n    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n      return;\n    }\n    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n        otherJournalEditLogs);\n\n    if (!missingLogs.isEmpty()) {\n      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n\n      for (RemoteEditLog missingLog : missingLogs) {\n        URL url \u003d null;\n        boolean success \u003d false;\n        try {\n          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n            if (response.hasFromURL()) {\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\n                  response.getFromURL(), remoteJNproxy.jnAddr.getHostName());\n            } else {\n              LOG.error(\"EditLogManifest response does not have fromUrl \" +\n                  \"field set. Aborting current sync attempt\");\n              break;\n            }\n          }\n\n          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n              .getStartTxId(), nsInfo, false);\n          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n          success \u003d downloadMissingLogSegment(url, missingLog);\n        } catch (URISyntaxException e) {\n          LOG.error(\"EditLogManifest\u0027s fromUrl field syntax incorrect\", e);\n        } catch (MalformedURLException e) {\n          LOG.error(\"MalformedURL when download missing log segment\", e);\n        } catch (Exception e) {\n          LOG.error(\"Exception in downloading missing log segment from url \" +\n              url, e);\n        }\n        if (!success) {\n          LOG.error(\"Aborting current sync attempt.\");\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "4fb41b31dbc109f11898ea6d8fc0bb3e6c20d89b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11878. Fix journal missing log httpServerUrl address in JournalNodeSyncer. Contributed by Hanisha Koneru.\n",
      "commitDate": "25/05/17 10:42 AM",
      "commitName": "4fb41b31dbc109f11898ea6d8fc0bb3e6c20d89b",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "24/05/17 4:09 PM",
      "commitNameOld": "0e83ed5e7372c801c9fee01df91b6b56de467ab1",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,42 @@\n   private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n       GetEditLogManifestResponseProto response,\n       JournalNodeProxy remoteJNproxy) {\n \n     List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n         response.getManifest()).getLogs();\n     if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n       LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n       return;\n     }\n     List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n         otherJournalEditLogs);\n \n     if (!missingLogs.isEmpty()) {\n       NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n \n       for (RemoteEditLog missingLog : missingLogs) {\n         URL url \u003d null;\n         boolean success \u003d false;\n         try {\n           if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n-            if (response.hasFromURL()) {\n-              URI uri \u003d URI.create(response.getFromURL());\n-              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(uri.getScheme(),\n-                  uri.getHost(), uri.getPort());\n-            } else {\n-              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n-                  remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n-            }\n+            remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n+                remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n           }\n \n           String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n               .getStartTxId(), nsInfo, false);\n           url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n           success \u003d downloadMissingLogSegment(url, missingLog);\n         } catch (MalformedURLException e) {\n           LOG.error(\"MalformedURL when download missing log segment\", e);\n         } catch (Exception e) {\n           LOG.error(\"Exception in downloading missing log segment from url \" +\n               url, e);\n         }\n         if (!success) {\n           LOG.error(\"Aborting current sync attempt.\");\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      GetEditLogManifestResponseProto response,\n      JournalNodeProxy remoteJNproxy) {\n\n    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n        response.getManifest()).getLogs();\n    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n      return;\n    }\n    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n        otherJournalEditLogs);\n\n    if (!missingLogs.isEmpty()) {\n      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n\n      for (RemoteEditLog missingLog : missingLogs) {\n        URL url \u003d null;\n        boolean success \u003d false;\n        try {\n          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n            remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n                remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n          }\n\n          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n              .getStartTxId(), nsInfo, false);\n          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n          success \u003d downloadMissingLogSegment(url, missingLog);\n        } catch (MalformedURLException e) {\n          LOG.error(\"MalformedURL when download missing log segment\", e);\n        } catch (Exception e) {\n          LOG.error(\"Exception in downloading missing log segment from url \" +\n              url, e);\n        }\n        if (!success) {\n          LOG.error(\"Aborting current sync attempt.\");\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "0e83ed5e7372c801c9fee01df91b6b56de467ab1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11877. FileJournalManager#getLogFile should ignore in progress edit logs during JN sync. Contributed by Hanisha Koneru.\n",
      "commitDate": "24/05/17 4:09 PM",
      "commitName": "0e83ed5e7372c801c9fee01df91b6b56de467ab1",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "04/05/17 3:57 PM",
      "commitNameOld": "07761af357ef4da791df2972d7d3f049d6011c8d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 20.01,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n       GetEditLogManifestResponseProto response,\n       JournalNodeProxy remoteJNproxy) {\n \n     List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n         response.getManifest()).getLogs();\n     if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n       LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n       return;\n     }\n     List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n         otherJournalEditLogs);\n \n     if (!missingLogs.isEmpty()) {\n       NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n \n       for (RemoteEditLog missingLog : missingLogs) {\n         URL url \u003d null;\n         boolean success \u003d false;\n         try {\n           if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n             if (response.hasFromURL()) {\n               URI uri \u003d URI.create(response.getFromURL());\n               remoteJNproxy.httpServerUrl \u003d getHttpServerURI(uri.getScheme(),\n                   uri.getHost(), uri.getPort());\n             } else {\n               remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n                   remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n             }\n           }\n \n           String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n-              .getStartTxId(), nsInfo);\n+              .getStartTxId(), nsInfo, false);\n           url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n           success \u003d downloadMissingLogSegment(url, missingLog);\n         } catch (MalformedURLException e) {\n           LOG.error(\"MalformedURL when download missing log segment\", e);\n         } catch (Exception e) {\n           LOG.error(\"Exception in downloading missing log segment from url \" +\n               url, e);\n         }\n         if (!success) {\n           LOG.error(\"Aborting current sync attempt.\");\n           break;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      GetEditLogManifestResponseProto response,\n      JournalNodeProxy remoteJNproxy) {\n\n    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n        response.getManifest()).getLogs();\n    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n      return;\n    }\n    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n        otherJournalEditLogs);\n\n    if (!missingLogs.isEmpty()) {\n      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n\n      for (RemoteEditLog missingLog : missingLogs) {\n        URL url \u003d null;\n        boolean success \u003d false;\n        try {\n          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n            if (response.hasFromURL()) {\n              URI uri \u003d URI.create(response.getFromURL());\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(uri.getScheme(),\n                  uri.getHost(), uri.getPort());\n            } else {\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n                  remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n            }\n          }\n\n          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n              .getStartTxId(), nsInfo, false);\n          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n          success \u003d downloadMissingLogSegment(url, missingLog);\n        } catch (MalformedURLException e) {\n          LOG.error(\"MalformedURL when download missing log segment\", e);\n        } catch (Exception e) {\n          LOG.error(\"Exception in downloading missing log segment from url \" +\n              url, e);\n        }\n        if (!success) {\n          LOG.error(\"Aborting current sync attempt.\");\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/02/17 4:33 PM",
      "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,48 @@\n+  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n+      GetEditLogManifestResponseProto response,\n+      JournalNodeProxy remoteJNproxy) {\n+\n+    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n+        response.getManifest()).getLogs();\n+    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n+      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n+      return;\n+    }\n+    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n+        otherJournalEditLogs);\n+\n+    if (!missingLogs.isEmpty()) {\n+      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n+\n+      for (RemoteEditLog missingLog : missingLogs) {\n+        URL url \u003d null;\n+        boolean success \u003d false;\n+        try {\n+          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n+            if (response.hasFromURL()) {\n+              URI uri \u003d URI.create(response.getFromURL());\n+              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(uri.getScheme(),\n+                  uri.getHost(), uri.getPort());\n+            } else {\n+              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n+                  remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n+            }\n+          }\n+\n+          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n+              .getStartTxId(), nsInfo);\n+          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n+          success \u003d downloadMissingLogSegment(url, missingLog);\n+        } catch (MalformedURLException e) {\n+          LOG.error(\"MalformedURL when download missing log segment\", e);\n+        } catch (Exception e) {\n+          LOG.error(\"Exception in downloading missing log segment from url \" +\n+              url, e);\n+        }\n+        if (!success) {\n+          LOG.error(\"Aborting current sync attempt.\");\n+          break;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void getMissingLogSegments(List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      GetEditLogManifestResponseProto response,\n      JournalNodeProxy remoteJNproxy) {\n\n    List\u003cRemoteEditLog\u003e otherJournalEditLogs \u003d PBHelper.convert(\n        response.getManifest()).getLogs();\n    if (otherJournalEditLogs \u003d\u003d null || otherJournalEditLogs.isEmpty()) {\n      LOG.warn(\"Journal at \" + remoteJNproxy.jnAddr + \" has no edit logs\");\n      return;\n    }\n    List\u003cRemoteEditLog\u003e missingLogs \u003d getMissingLogList(thisJournalEditLogs,\n        otherJournalEditLogs);\n\n    if (!missingLogs.isEmpty()) {\n      NamespaceInfo nsInfo \u003d jnStorage.getNamespaceInfo();\n\n      for (RemoteEditLog missingLog : missingLogs) {\n        URL url \u003d null;\n        boolean success \u003d false;\n        try {\n          if (remoteJNproxy.httpServerUrl \u003d\u003d null) {\n            if (response.hasFromURL()) {\n              URI uri \u003d URI.create(response.getFromURL());\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(uri.getScheme(),\n                  uri.getHost(), uri.getPort());\n            } else {\n              remoteJNproxy.httpServerUrl \u003d getHttpServerURI(\"http\",\n                  remoteJNproxy.jnAddr.getHostName(), response.getHttpPort());\n            }\n          }\n\n          String urlPath \u003d GetJournalEditServlet.buildPath(jid, missingLog\n              .getStartTxId(), nsInfo);\n          url \u003d new URL(remoteJNproxy.httpServerUrl, urlPath);\n          success \u003d downloadMissingLogSegment(url, missingLog);\n        } catch (MalformedURLException e) {\n          LOG.error(\"MalformedURL when download missing log segment\", e);\n        } catch (Exception e) {\n          LOG.error(\"Exception in downloading missing log segment from url \" +\n              url, e);\n        }\n        if (!success) {\n          LOG.error(\"Aborting current sync attempt.\");\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java"
    }
  }
}