{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocator.java",
  "functionName": "newContainerToken",
  "functionId": "newContainerToken___nodeId-NodeId__password-byte[]__tokenIdentifier-ContainerTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
  "functionStartLine": 451,
  "functionEndLine": 461,
  "numCommitsSeen": 23,
  "timeTaken": 2504,
  "changeHistory": [
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public static Token newContainerToken(NodeId nodeId, byte[] password,\n+  private static Token newContainerToken(NodeId nodeId, byte[] password,\n       ContainerTokenIdentifier tokenIdentifier) {\n     // RPC layer client expects ip:port as service for tokens\n     InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n         nodeId.getPort());\n     // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n     Token containerToken \u003d Token.newInstance(tokenIdentifier.getBytes(),\n         ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n             .buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Token newContainerToken(NodeId nodeId, byte[] password,\n      ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n        nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    Token containerToken \u003d Token.newInstance(tokenIdentifier.getBytes(),\n        ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
            "oldMethodName": "newContainerToken",
            "newMethodName": "newContainerToken"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public static Token newContainerToken(NodeId nodeId, byte[] password,\n+  private static Token newContainerToken(NodeId nodeId, byte[] password,\n       ContainerTokenIdentifier tokenIdentifier) {\n     // RPC layer client expects ip:port as service for tokens\n     InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n         nodeId.getPort());\n     // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n     Token containerToken \u003d Token.newInstance(tokenIdentifier.getBytes(),\n         ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n             .buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Token newContainerToken(NodeId nodeId, byte[] password,\n      ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n        nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    Token containerToken \u003d Token.newInstance(tokenIdentifier.getBytes(),\n        ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        }
      ]
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,11 @@\n+  public static Token newContainerToken(NodeId nodeId, byte[] password,\n+      ContainerTokenIdentifier tokenIdentifier) {\n+    // RPC layer client expects ip:port as service for tokens\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n+        nodeId.getPort());\n+    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n+    Token containerToken \u003d Token.newInstance(tokenIdentifier.getBytes(),\n+        ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n+            .buildTokenService(addr).toString());\n+    return containerToken;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Token newContainerToken(NodeId nodeId, byte[] password,\n      ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n        nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    Token containerToken \u003d Token.newInstance(tokenIdentifier.getBytes(),\n        ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java"
    }
  }
}