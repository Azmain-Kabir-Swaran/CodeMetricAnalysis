{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSUtil.java",
  "functionName": "createKeyProvider",
  "functionId": "createKeyProvider___conf-Configuration(modifiers-final)__configKeyName-String(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java",
  "functionStartLine": 59,
  "functionEndLine": 64,
  "numCommitsSeen": 6,
  "timeTaken": 2315,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "18432130a7f580f206adf023507678c534487f2e",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ybodychange",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ybodychange",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ybodychange",
    "18432130a7f580f206adf023507678c534487f2e": "Ybodychange",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "07/05/18 1:32 PM",
      "commitNameOld": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 157.84,
      "commitsBetweenForRepo": 1295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,6 @@\n   public static KeyProvider createKeyProvider(final Configuration conf,\n       final String configKeyName) throws IOException {\n     LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n-    final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n-    // No provider set in conf\n-    if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n-      return null;\n-    }\n-    return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n+    URI uri \u003d getKeyProviderUri(conf, configKeyName);\n+    return (uri !\u003d null) ? createKeyProviderFromUri(conf, uri) : null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(final Configuration conf,\n      final String configKeyName) throws IOException {\n    LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n    URI uri \u003d getKeyProviderUri(conf, configKeyName);\n    return (uri !\u003d null) ? createKeyProviderFromUri(conf, uri) : null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java",
      "extendedDetails": {}
    },
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "10/04/18 3:38 PM",
      "commitNameOld": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 26.91,
      "commitsBetweenForRepo": 686,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,10 @@\n   public static KeyProvider createKeyProvider(final Configuration conf,\n       final String configKeyName) throws IOException {\n     LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n     final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n     // No provider set in conf\n     if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n       return null;\n     }\n-    KeyProvider kp \u003d KMSUtilFaultInjector.get().createKeyProviderForTests(\n-        providerUriStr, conf);\n-    if (kp !\u003d null) {\n-      LOG.info(\"KeyProvider is created with uri: {}. This should happen only \" +\n-              \"in tests.\", providerUriStr);\n-      return kp;\n-    }\n     return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(final Configuration conf,\n      final String configKeyName) throws IOException {\n    LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n    final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n      return null;\n    }\n    return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java",
      "extendedDetails": {}
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "22/08/17 7:47 AM",
      "commitNameOld": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 231.33,
      "commitsBetweenForRepo": 1804,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,17 @@\n   public static KeyProvider createKeyProvider(final Configuration conf,\n       final String configKeyName) throws IOException {\n     LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n     final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n     // No provider set in conf\n     if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n       return null;\n     }\n+    KeyProvider kp \u003d KMSUtilFaultInjector.get().createKeyProviderForTests(\n+        providerUriStr, conf);\n+    if (kp !\u003d null) {\n+      LOG.info(\"KeyProvider is created with uri: {}. This should happen only \" +\n+              \"in tests.\", providerUriStr);\n+      return kp;\n+    }\n     return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(final Configuration conf,\n      final String configKeyName) throws IOException {\n    LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n    final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n      return null;\n    }\n    KeyProvider kp \u003d KMSUtilFaultInjector.get().createKeyProviderForTests(\n        providerUriStr, conf);\n    if (kp !\u003d null) {\n      LOG.info(\"KeyProvider is created with uri: {}. This should happen only \" +\n              \"in tests.\", providerUriStr);\n      return kp;\n    }\n    return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java",
      "extendedDetails": {}
    },
    "18432130a7f580f206adf023507678c534487f2e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14104. Client should always ask namenode for kms provider path. Contributed by Rushabh S Shah.\n",
      "commitDate": "04/04/17 1:38 PM",
      "commitName": "18432130a7f580f206adf023507678c534487f2e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "03/06/16 4:48 PM",
      "commitNameOld": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 304.87,
      "commitsBetweenForRepo": 2058,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,10 @@\n   public static KeyProvider createKeyProvider(final Configuration conf,\n       final String configKeyName) throws IOException {\n     LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n-    final String providerUriStr \u003d conf.getTrimmed(configKeyName, \"\");\n+    final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n     // No provider set in conf\n-    if (providerUriStr.isEmpty()) {\n+    if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n       return null;\n     }\n-    final URI providerUri;\n-    try {\n-      providerUri \u003d new URI(providerUriStr);\n-    } catch (URISyntaxException e) {\n-      throw new IOException(e);\n-    }\n-    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n-    if (keyProvider \u003d\u003d null) {\n-      throw new IOException(\"Could not instantiate KeyProvider from \" +\n-          configKeyName + \" setting of \u0027\" + providerUriStr + \"\u0027\");\n-    }\n-    if (keyProvider.isTransient()) {\n-      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n-          + \" was found but it is a transient provider.\");\n-    }\n-    return keyProvider;\n+    return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(final Configuration conf,\n      final String configKeyName) throws IOException {\n    LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n    final String providerUriStr \u003d conf.getTrimmed(configKeyName);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null || providerUriStr.isEmpty()) {\n      return null;\n    }\n    return createKeyProviderFromUri(conf, URI.create(providerUriStr));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java",
      "extendedDetails": {}
    },
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13155. Implement TokenRenewer to renew and cancel delegation tokens in KMS. Contributed by Xiao Chen.\n",
      "commitDate": "03/06/16 4:48 PM",
      "commitName": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,25 @@\n+  public static KeyProvider createKeyProvider(final Configuration conf,\n+      final String configKeyName) throws IOException {\n+    LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n+    final String providerUriStr \u003d conf.getTrimmed(configKeyName, \"\");\n+    // No provider set in conf\n+    if (providerUriStr.isEmpty()) {\n+      return null;\n+    }\n+    final URI providerUri;\n+    try {\n+      providerUri \u003d new URI(providerUriStr);\n+    } catch (URISyntaxException e) {\n+      throw new IOException(e);\n+    }\n+    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"Could not instantiate KeyProvider from \" +\n+          configKeyName + \" setting of \u0027\" + providerUriStr + \"\u0027\");\n+    }\n+    if (keyProvider.isTransient()) {\n+      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n+          + \" was found but it is a transient provider.\");\n+    }\n+    return keyProvider;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(final Configuration conf,\n      final String configKeyName) throws IOException {\n    LOG.debug(\"Creating key provider with config key {}\", configKeyName);\n    final String providerUriStr \u003d conf.getTrimmed(configKeyName, \"\");\n    // No provider set in conf\n    if (providerUriStr.isEmpty()) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" +\n          configKeyName + \" setting of \u0027\" + providerUriStr + \"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java"
    }
  }
}