{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "updateDemand",
  "functionId": "updateDemand",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 311,
  "functionEndLine": 336,
  "numCommitsSeen": 74,
  "timeTaken": 4258,
  "changeHistory": [
    "99292adcefdc6b8f280b8e100605fb39f755c38a",
    "fbfe86deea5f2aa857cd13fee913b7becee57f93",
    "86ac1ad9fd65c7dd12278372b369de38dc4616db",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57",
    "b5a22e983832d4843b5df1d07858988e8bbf37e3",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718",
    "486e718fc1f5befd231494e2ec06bb360484f191",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
    "7545d8bf996e5d060d5d613bf769ec52a62d428b",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
    "b8f81d74c8810c6d2c530880a1d1f4923a5e3591",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "99292adcefdc6b8f280b8e100605fb39f755c38a": "Ybodychange",
    "fbfe86deea5f2aa857cd13fee913b7becee57f93": "Ybodychange",
    "86ac1ad9fd65c7dd12278372b369de38dc4616db": "Ybodychange",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": "Ybodychange",
    "b5a22e983832d4843b5df1d07858988e8bbf37e3": "Ybodychange",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Ybodychange",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": "Ybodychange",
    "7545d8bf996e5d060d5d613bf769ec52a62d428b": "Ybodychange",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": "Ybodychange",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Ymultichange(Yfilerename,Ybodychange)",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": "Ybodychange",
    "b8f81d74c8810c6d2c530880a1d1f4923a5e3591": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "99292adcefdc6b8f280b8e100605fb39f755c38a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage. (Yufei Gu)\n",
      "commitDate": "05/10/17 11:51 PM",
      "commitName": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "21/09/17 12:31 PM",
      "commitNameOld": "a92ef030a2707182e90acee644e47c8ef7e1fd8d",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 14.47,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource tmpDemand \u003d Resources.createResource(0);\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n         sched.updateDemand();\n         Resources.addTo(tmpDemand, sched.getDemand());\n       }\n       for (FSAppAttempt sched : nonRunnableApps) {\n         sched.updateDemand();\n         Resources.addTo(tmpDemand, sched.getDemand());\n       }\n     } finally {\n       readLock.unlock();\n     }\n     // Cap demand to maxShare to limit allocation to maxShare\n-    demand \u003d Resources.componentwiseMin(tmpDemand, maxShare);\n+    demand \u003d Resources.componentwiseMin(tmpDemand, getMaxShare());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n-          + \"; the max is \" + maxShare);\n+          + \"; the max is \" + getMaxShare());\n       LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n           + getFairShare());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource tmpDemand \u003d Resources.createResource(0);\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        sched.updateDemand();\n        Resources.addTo(tmpDemand, sched.getDemand());\n      }\n      for (FSAppAttempt sched : nonRunnableApps) {\n        sched.updateDemand();\n        Resources.addTo(tmpDemand, sched.getDemand());\n      }\n    } finally {\n      readLock.unlock();\n    }\n    // Cap demand to maxShare to limit allocation to maxShare\n    demand \u003d Resources.componentwiseMin(tmpDemand, getMaxShare());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + getMaxShare());\n      LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n          + getFairShare());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "fbfe86deea5f2aa857cd13fee913b7becee57f93": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6172. FSLeafQueue demand update needs to be atomic. (Miklos Szegedi via kasha)\n",
      "commitDate": "26/02/17 8:36 PM",
      "commitName": "fbfe86deea5f2aa857cd13fee913b7becee57f93",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/02/17 3:21 PM",
      "commitNameOld": "694e680d20dc07f634b539537021b09d9316601c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    demand \u003d Resources.createResource(0);\n+    Resource tmpDemand \u003d Resources.createResource(0);\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n-        updateDemandForApp(sched);\n+        sched.updateDemand();\n+        Resources.addTo(tmpDemand, sched.getDemand());\n       }\n       for (FSAppAttempt sched : nonRunnableApps) {\n-        updateDemandForApp(sched);\n+        sched.updateDemand();\n+        Resources.addTo(tmpDemand, sched.getDemand());\n       }\n     } finally {\n       readLock.unlock();\n     }\n     // Cap demand to maxShare to limit allocation to maxShare\n-    demand \u003d Resources.componentwiseMin(demand, maxShare);\n+    demand \u003d Resources.componentwiseMin(tmpDemand, maxShare);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxShare);\n       LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n           + getFairShare());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource tmpDemand \u003d Resources.createResource(0);\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        sched.updateDemand();\n        Resources.addTo(tmpDemand, sched.getDemand());\n      }\n      for (FSAppAttempt sched : nonRunnableApps) {\n        sched.updateDemand();\n        Resources.addTo(tmpDemand, sched.getDemand());\n      }\n    } finally {\n      readLock.unlock();\n    }\n    // Cap demand to maxShare to limit allocation to maxShare\n    demand \u003d Resources.componentwiseMin(tmpDemand, maxShare);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxShare);\n      LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n          + getFairShare());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "86ac1ad9fd65c7dd12278372b369de38dc4616db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5453. FairScheduler#update may skip update demand resource of child queue/app if current demand reached maxResource. (sandflee via kasha)\n",
      "commitDate": "09/11/16 11:44 PM",
      "commitName": "86ac1ad9fd65c7dd12278372b369de38dc4616db",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/10/16 10:09 PM",
      "commitNameOld": "82857037b6e960dccdaf9e6b1b238411498a0dfe",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 38.11,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,24 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     demand \u003d Resources.createResource(0);\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n-        if (Resources.equals(demand, maxShare)) {\n-          break;\n-        }\n-        updateDemandForApp(sched, maxShare);\n+        updateDemandForApp(sched);\n       }\n       for (FSAppAttempt sched : nonRunnableApps) {\n-        if (Resources.equals(demand, maxShare)) {\n-          break;\n-        }\n-        updateDemandForApp(sched, maxShare);\n+        updateDemandForApp(sched);\n       }\n     } finally {\n       readLock.unlock();\n     }\n+    // Cap demand to maxShare to limit allocation to maxShare\n+    demand \u003d Resources.componentwiseMin(demand, maxShare);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxShare);\n       LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n           + getFairShare());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    demand \u003d Resources.createResource(0);\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        updateDemandForApp(sched);\n      }\n      for (FSAppAttempt sched : nonRunnableApps) {\n        updateDemandForApp(sched);\n      }\n    } finally {\n      readLock.unlock();\n    }\n    // Cap demand to maxShare to limit allocation to maxShare\n    demand \u003d Resources.componentwiseMin(demand, maxShare);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxShare);\n      LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n          + getFairShare());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/09/16 2:56 PM",
      "commitName": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 52.68,
      "commitsBetweenForRepo": 369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n-        .getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n-        if (Resources.equals(demand, maxRes)) {\n+        if (Resources.equals(demand, maxShare)) {\n           break;\n         }\n-        updateDemandForApp(sched, maxRes);\n+        updateDemandForApp(sched, maxShare);\n       }\n       for (FSAppAttempt sched : nonRunnableApps) {\n-        if (Resources.equals(demand, maxRes)) {\n+        if (Resources.equals(demand, maxShare)) {\n           break;\n         }\n-        updateDemandForApp(sched, maxRes);\n+        updateDemandForApp(sched, maxShare);\n       }\n     } finally {\n       readLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n-          + \"; the max is \" + maxRes);\n+          + \"; the max is \" + maxShare);\n       LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n           + getFairShare());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    demand \u003d Resources.createResource(0);\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        if (Resources.equals(demand, maxShare)) {\n          break;\n        }\n        updateDemandForApp(sched, maxShare);\n      }\n      for (FSAppAttempt sched : nonRunnableApps) {\n        if (Resources.equals(demand, maxShare)) {\n          break;\n        }\n        updateDemandForApp(sched, maxShare);\n      }\n    } finally {\n      readLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxShare);\n      LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n          + getFairShare());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "b5a22e983832d4843b5df1d07858988e8bbf37e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3258. FairScheduler: Need to add more logging to investigate allocations. Contributed by Anubhav Dhoot.\n",
      "commitDate": "31/03/15 1:42 AM",
      "commitName": "b5a22e983832d4843b5df1d07858988e8bbf37e3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "05/01/15 3:12 PM",
      "commitNameOld": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 84.4,
      "commitsBetweenForRepo": 746,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d scheduler.getAllocationConfiguration()\n         .getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n         if (Resources.equals(demand, maxRes)) {\n           break;\n         }\n         updateDemandForApp(sched, maxRes);\n       }\n       for (FSAppAttempt sched : nonRunnableApps) {\n         if (Resources.equals(demand, maxRes)) {\n           break;\n         }\n         updateDemandForApp(sched, maxRes);\n       }\n     } finally {\n       readLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n+      LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n+          + getFairShare());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n        .getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        if (Resources.equals(demand, maxRes)) {\n          break;\n        }\n        updateDemandForApp(sched, maxRes);\n      }\n      for (FSAppAttempt sched : nonRunnableApps) {\n        if (Resources.equals(demand, maxRes)) {\n          break;\n        }\n        updateDemandForApp(sched, maxRes);\n      }\n    } finally {\n      readLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n      LOG.debug(\"The updated fairshare for \" + getName() + \" is \"\n          + getFairShare());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2910. FSLeafQueue can throw ConcurrentModificationException. (Wilfred Spiegelenburg via kasha)\n",
      "commitDate": "09/12/14 2:00 PM",
      "commitName": "a2e07a54561a57a83b943628ebbc53ed5ba52718",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/09/14 10:27 AM",
      "commitNameOld": "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 97.19,
      "commitsBetweenForRepo": 917,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d scheduler.getAllocationConfiguration()\n         .getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n-    for (FSAppAttempt sched : runnableApps) {\n-      if (Resources.equals(demand, maxRes)) {\n-        break;\n+    readLock.lock();\n+    try {\n+      for (FSAppAttempt sched : runnableApps) {\n+        if (Resources.equals(demand, maxRes)) {\n+          break;\n+        }\n+        updateDemandForApp(sched, maxRes);\n       }\n-      updateDemandForApp(sched, maxRes);\n-    }\n-    for (FSAppAttempt sched : nonRunnableApps) {\n-      if (Resources.equals(demand, maxRes)) {\n-        break;\n+      for (FSAppAttempt sched : nonRunnableApps) {\n+        if (Resources.equals(demand, maxRes)) {\n+          break;\n+        }\n+        updateDemandForApp(sched, maxRes);\n       }\n-      updateDemandForApp(sched, maxRes);\n+    } finally {\n+      readLock.unlock();\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n        .getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        if (Resources.equals(demand, maxRes)) {\n          break;\n        }\n        updateDemandForApp(sched, maxRes);\n      }\n      for (FSAppAttempt sched : nonRunnableApps) {\n        if (Resources.equals(demand, maxRes)) {\n          break;\n        }\n        updateDemandForApp(sched, maxRes);\n      }\n    } finally {\n      readLock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/07/14 9:13 AM",
      "commitNameOld": "1e553858f930e43fac62986549a178cdcf39384c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 18.23,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d scheduler.getAllocationConfiguration()\n         .getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n-    for (AppSchedulable sched : runnableAppScheds) {\n+    for (FSAppAttempt sched : runnableApps) {\n       if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n       updateDemandForApp(sched, maxRes);\n     }\n-    for (AppSchedulable sched : nonRunnableAppScheds) {\n+    for (FSAppAttempt sched : nonRunnableApps) {\n       if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n       updateDemandForApp(sched, maxRes);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n        .getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (FSAppAttempt sched : runnableApps) {\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n      updateDemandForApp(sched, maxRes);\n    }\n    for (FSAppAttempt sched : nonRunnableApps) {\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n      updateDemandForApp(sched, maxRes);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 7:26 PM",
      "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "29/11/13 11:02 AM",
      "commitNameOld": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n+    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n+        .getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n     for (AppSchedulable sched : runnableAppScheds) {\n       if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n       updateDemandForApp(sched, maxRes);\n     }\n     for (AppSchedulable sched : nonRunnableAppScheds) {\n       if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n       updateDemandForApp(sched, maxRes);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d scheduler.getAllocationConfiguration()\n        .getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched : runnableAppScheds) {\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n      updateDemandForApp(sched, maxRes);\n    }\n    for (AppSchedulable sched : nonRunnableAppScheds) {\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n      updateDemandForApp(sched, maxRes);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "7545d8bf996e5d060d5d613bf769ec52a62d428b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1241. In Fair Scheduler, maxRunningApps does not work for non-leaf queues. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/13 11:02 AM",
      "commitName": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "25/10/13 5:27 PM",
      "commitNameOld": "025f1719472282a30aa26ae3e235e404f04ba932",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 34.77,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d queueMgr.getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n-    for (AppSchedulable sched : appScheds) {\n-      sched.updateDemand();\n-      Resource toAdd \u003d sched.getDemand();\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n-            + \"; Total resource consumption for \" + getName() + \" now \"\n-            + demand);\n-      }\n-      demand \u003d Resources.add(demand, toAdd);\n-      demand \u003d Resources.componentwiseMin(demand, maxRes);\n+    for (AppSchedulable sched : runnableAppScheds) {\n       if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n+      updateDemandForApp(sched, maxRes);\n+    }\n+    for (AppSchedulable sched : nonRunnableAppScheds) {\n+      if (Resources.equals(demand, maxRes)) {\n+        break;\n+      }\n+      updateDemandForApp(sched, maxRes);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched : runnableAppScheds) {\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n      updateDemandForApp(sched, maxRes);\n    }\n    for (AppSchedulable sched : nonRunnableAppScheds) {\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n      updateDemandForApp(sched, maxRes);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-595. Refactor fair scheduler to use common Resources. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475670 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 1:33 AM",
      "commitName": "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/04/13 11:11 AM",
      "commitNameOld": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.6,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d queueMgr.getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n     for (AppSchedulable sched : appScheds) {\n       sched.updateDemand();\n       Resource toAdd \u003d sched.getDemand();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n             + \"; Total resource consumption for \" + getName() + \" now \"\n             + demand);\n       }\n       demand \u003d Resources.add(demand, toAdd);\n-      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n-        demand \u003d maxRes;\n+      demand \u003d Resources.componentwiseMin(demand, maxRes);\n+      if (Resources.equals(demand, maxRes)) {\n         break;\n       }\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched : appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n            + \"; Total resource consumption for \" + getName() + \" now \"\n            + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      demand \u003d Resources.componentwiseMin(demand, maxRes);\n      if (Resources.equals(demand, maxRes)) {\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/12 4:03 AM",
          "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
          "commitAuthor": "Thomas White",
          "commitDateOld": "29/11/12 6:51 PM",
          "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n+    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n-    for (AppSchedulable sched: appScheds) {\n+    for (AppSchedulable sched : appScheds) {\n       sched.updateDemand();\n       Resource toAdd \u003d sched.getDemand();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n             + \"; Total resource consumption for \" + getName() + \" now \"\n             + demand);\n       }\n       demand \u003d Resources.add(demand, toAdd);\n       if (Resources.greaterThanOrEqual(demand, maxRes)) {\n         demand \u003d maxRes;\n         break;\n       }\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched : appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n            + \"; Total resource consumption for \" + getName() + \" now \"\n            + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n        demand \u003d maxRes;\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/12 4:03 AM",
          "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
          "commitAuthor": "Thomas White",
          "commitDateOld": "29/11/12 6:51 PM",
          "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n-    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n+    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n     demand \u003d Resources.createResource(0);\n-    for (AppSchedulable sched: appScheds) {\n+    for (AppSchedulable sched : appScheds) {\n       sched.updateDemand();\n       Resource toAdd \u003d sched.getDemand();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n             + \"; Total resource consumption for \" + getName() + \" now \"\n             + demand);\n       }\n       demand \u003d Resources.add(demand, toAdd);\n       if (Resources.greaterThanOrEqual(demand, maxRes)) {\n         demand \u003d maxRes;\n         break;\n       }\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched : appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n            + \"; Total resource consumption for \" + getName() + \" now \"\n            + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n        demand \u003d maxRes;\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-183. Clean up fair scheduler code. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 4:38 AM",
      "commitName": "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
      "commitAuthor": "Thomas White",
      "commitDateOld": "04/10/12 4:00 PM",
      "commitNameOld": "b8f81d74c8810c6d2c530880a1d1f4923a5e3591",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 35.57,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void updateDemand() {\n     // Compute demand by iterating through apps in the queue\n     // Limit demand to maxResources\n     Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n     demand \u003d Resources.createResource(0);\n     for (AppSchedulable sched: appScheds) {\n       sched.updateDemand();\n       Resource toAdd \u003d sched.getDemand();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n-            + \"; Total resource consumption for \" + this.getName() + \" now \"\n+            + \"; Total resource consumption for \" + getName() + \" now \"\n             + demand);\n       }\n       demand \u003d Resources.add(demand, toAdd);\n       if (Resources.greaterThanOrEqual(demand, maxRes)) {\n         demand \u003d maxRes;\n         break;\n       }\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"The updated demand for \" + this.getName() + \" is \" + demand\n+      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n           + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched: appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n            + \"; Total resource consumption for \" + getName() + \" now \"\n            + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n        demand \u003d maxRes;\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {}
    },
    "b8f81d74c8810c6d2c530880a1d1f4923a5e3591": {
      "type": "Ybodychange",
      "commitMessage": "YARN-23. FairScheduler: FSQueueSchedulable#updateDemand() - potential redundant aggregation. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1394321 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/12 4:00 PM",
      "commitName": "b8f81d74c8810c6d2c530880a1d1f4923a5e3591",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 57.73,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,24 @@\n   public void updateDemand() {\n+    // Compute demand by iterating through apps in the queue\n+    // Limit demand to maxResources\n+    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n     demand \u003d Resources.createResource(0);\n     for (AppSchedulable sched: appScheds) {\n       sched.updateDemand();\n       Resource toAdd \u003d sched.getDemand();\n-      LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd.toString());\n-      LOG.debug(\"Total resource consumption for \" + this.getName() + \" now \" + demand.toString());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n+            + \"; Total resource consumption for \" + this.getName() + \" now \"\n+            + demand);\n+      }\n       demand \u003d Resources.add(demand, toAdd);\n-\n+      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n+        demand \u003d maxRes;\n+        break;\n+      }\n     }\n-    // if demand exceeds the cap for this queue, limit to the max\n-    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n-    if(Resources.greaterThan(demand, maxRes)) {\n-      demand \u003d maxRes;\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"The updated demand for \" + this.getName() + \" is \" + demand\n+          + \"; the max is \" + maxRes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Compute demand by iterating through apps in the queue\n    // Limit demand to maxResources\n    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched: appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd\n            + \"; Total resource consumption for \" + this.getName() + \" now \"\n            + demand);\n      }\n      demand \u003d Resources.add(demand, toAdd);\n      if (Resources.greaterThanOrEqual(demand, maxRes)) {\n        demand \u003d maxRes;\n        break;\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"The updated demand for \" + this.getName() + \" is \" + demand\n          + \"; the max is \" + maxRes);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched: appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd.toString());\n      LOG.debug(\"Total resource consumption for \" + this.getName() + \" now \" + demand.toString());\n      demand \u003d Resources.add(demand, toAdd);\n\n    }\n    // if demand exceeds the cap for this queue, limit to the max\n    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n    if(Resources.greaterThan(demand, maxRes)) {\n      demand \u003d maxRes;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,16 @@\n+  public void updateDemand() {\n+    demand \u003d Resources.createResource(0);\n+    for (AppSchedulable sched: appScheds) {\n+      sched.updateDemand();\n+      Resource toAdd \u003d sched.getDemand();\n+      LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd.toString());\n+      LOG.debug(\"Total resource consumption for \" + this.getName() + \" now \" + demand.toString());\n+      demand \u003d Resources.add(demand, toAdd);\n+\n+    }\n+    // if demand exceeds the cap for this queue, limit to the max\n+    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n+    if(Resources.greaterThan(demand, maxRes)) {\n+      demand \u003d maxRes;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    for (AppSchedulable sched: appScheds) {\n      sched.updateDemand();\n      Resource toAdd \u003d sched.getDemand();\n      LOG.debug(\"Counting resource from \" + sched.getName() + \" \" + toAdd.toString());\n      LOG.debug(\"Total resource consumption for \" + this.getName() + \" now \" + demand.toString());\n      demand \u003d Resources.add(demand, toAdd);\n\n    }\n    // if demand exceeds the cap for this queue, limit to the max\n    Resource maxRes \u003d queueMgr.getMaxResources(queue.getName());\n    if(Resources.greaterThan(demand, maxRes)) {\n      demand \u003d maxRes;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
    }
  }
}