{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Groups.java",
  "functionName": "load",
  "functionId": "load___user-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
  "functionStartLine": 311,
  "functionEndLine": 340,
  "numCommitsSeen": 18,
  "timeTaken": 2231,
  "changeHistory": [
    "162228e8db937d4bdb9cf61d15ed555f1c96368f",
    "94225152399e6e89fa7b4cff6d17d33e544329a3",
    "6e9a582eb1ab040f532fbe95694f5272cda34188",
    "53caeaa16b1450b54e994c77f5d0c8a767b88d57",
    "e5a692519956aefb3a540ed0137b63cf598ac10d"
  ],
  "changeHistoryShort": {
    "162228e8db937d4bdb9cf61d15ed555f1c96368f": "Ybodychange",
    "94225152399e6e89fa7b4cff6d17d33e544329a3": "Ybodychange",
    "6e9a582eb1ab040f532fbe95694f5272cda34188": "Ybodychange",
    "53caeaa16b1450b54e994c77f5d0c8a767b88d57": "Ybodychange",
    "e5a692519956aefb3a540ed0137b63cf598ac10d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "162228e8db937d4bdb9cf61d15ed555f1c96368f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13723. Occasional \"Should be different group\" error in TestRefreshUserMappings#testGroupMappingRefresh. Contributed by Siyao Meng.\n",
      "commitDate": "11/07/18 10:02 AM",
      "commitName": "162228e8db937d4bdb9cf61d15ed555f1c96368f",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 358.52,
      "commitsBetweenForRepo": 3240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n     public List\u003cString\u003e load(String user) throws Exception {\n+      LOG.debug(\"GroupCacheLoader - load.\");\n       TraceScope scope \u003d null;\n       Tracer tracer \u003d Tracer.curThreadTracer();\n       if (tracer !\u003d null) {\n         scope \u003d tracer.newScope(\"Groups#fetchGroupList\");\n         scope.addKVAnnotation(\"user\", user);\n       }\n       List\u003cString\u003e groups \u003d null;\n       try {\n         groups \u003d fetchGroupList(user);\n       } finally {\n         if (scope !\u003d null) {\n           scope.close();\n         }\n       }\n \n       if (groups.isEmpty()) {\n         if (isNegativeCacheEnabled()) {\n           negativeCache.add(user);\n         }\n \n         // We throw here to prevent Cache from retaining an empty group\n         throw noGroupsForUser(user);\n       }\n \n       // return immutable de-duped list\n       return Collections.unmodifiableList(\n           new ArrayList\u003c\u003e(new LinkedHashSet\u003c\u003e(groups)));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e load(String user) throws Exception {\n      LOG.debug(\"GroupCacheLoader - load.\");\n      TraceScope scope \u003d null;\n      Tracer tracer \u003d Tracer.curThreadTracer();\n      if (tracer !\u003d null) {\n        scope \u003d tracer.newScope(\"Groups#fetchGroupList\");\n        scope.addKVAnnotation(\"user\", user);\n      }\n      List\u003cString\u003e groups \u003d null;\n      try {\n        groups \u003d fetchGroupList(user);\n      } finally {\n        if (scope !\u003d null) {\n          scope.close();\n        }\n      }\n\n      if (groups.isEmpty()) {\n        if (isNegativeCacheEnabled()) {\n          negativeCache.add(user);\n        }\n\n        // We throw here to prevent Cache from retaining an empty group\n        throw noGroupsForUser(user);\n      }\n\n      // return immutable de-duped list\n      return Collections.unmodifiableList(\n          new ArrayList\u003c\u003e(new LinkedHashSet\u003c\u003e(groups)));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "94225152399e6e89fa7b4cff6d17d33e544329a3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13442. Optimize UGI group lookups. Contributed by Daryn Sharp.\n",
      "commitDate": "04/08/16 8:45 AM",
      "commitName": "94225152399e6e89fa7b4cff6d17d33e544329a3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/06/16 9:36 AM",
      "commitNameOld": "9683eab0e1ee42c159cf678254c464d97bc3ff57",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 37.97,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n     public List\u003cString\u003e load(String user) throws Exception {\n       TraceScope scope \u003d null;\n       Tracer tracer \u003d Tracer.curThreadTracer();\n       if (tracer !\u003d null) {\n         scope \u003d tracer.newScope(\"Groups#fetchGroupList\");\n         scope.addKVAnnotation(\"user\", user);\n       }\n       List\u003cString\u003e groups \u003d null;\n       try {\n         groups \u003d fetchGroupList(user);\n       } finally {\n         if (scope !\u003d null) {\n           scope.close();\n         }\n       }\n \n       if (groups.isEmpty()) {\n         if (isNegativeCacheEnabled()) {\n           negativeCache.add(user);\n         }\n \n         // We throw here to prevent Cache from retaining an empty group\n         throw noGroupsForUser(user);\n       }\n \n-      return groups;\n+      // return immutable de-duped list\n+      return Collections.unmodifiableList(\n+          new ArrayList\u003c\u003e(new LinkedHashSet\u003c\u003e(groups)));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e load(String user) throws Exception {\n      TraceScope scope \u003d null;\n      Tracer tracer \u003d Tracer.curThreadTracer();\n      if (tracer !\u003d null) {\n        scope \u003d tracer.newScope(\"Groups#fetchGroupList\");\n        scope.addKVAnnotation(\"user\", user);\n      }\n      List\u003cString\u003e groups \u003d null;\n      try {\n        groups \u003d fetchGroupList(user);\n      } finally {\n        if (scope !\u003d null) {\n          scope.close();\n        }\n      }\n\n      if (groups.isEmpty()) {\n        if (isNegativeCacheEnabled()) {\n          negativeCache.add(user);\n        }\n\n        // We throw here to prevent Cache from retaining an empty group\n        throw noGroupsForUser(user);\n      }\n\n      // return immutable de-duped list\n      return Collections.unmodifiableList(\n          new ArrayList\u003c\u003e(new LinkedHashSet\u003c\u003e(groups)));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "6e9a582eb1ab040f532fbe95694f5272cda34188": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9942. Add an HTrace span when refreshing the groups for a username (cmccabe)\n",
      "commitDate": "11/03/16 12:26 PM",
      "commitName": "6e9a582eb1ab040f532fbe95694f5272cda34188",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "05/01/15 3:06 PM",
      "commitNameOld": "53caeaa16b1450b54e994c77f5d0c8a767b88d57",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 430.89,
      "commitsBetweenForRepo": 3427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,27 @@\n     public List\u003cString\u003e load(String user) throws Exception {\n-      List\u003cString\u003e groups \u003d fetchGroupList(user);\n+      TraceScope scope \u003d null;\n+      Tracer tracer \u003d Tracer.curThreadTracer();\n+      if (tracer !\u003d null) {\n+        scope \u003d tracer.newScope(\"Groups#fetchGroupList\");\n+        scope.addKVAnnotation(\"user\", user);\n+      }\n+      List\u003cString\u003e groups \u003d null;\n+      try {\n+        groups \u003d fetchGroupList(user);\n+      } finally {\n+        if (scope !\u003d null) {\n+          scope.close();\n+        }\n+      }\n \n       if (groups.isEmpty()) {\n         if (isNegativeCacheEnabled()) {\n           negativeCache.add(user);\n         }\n \n         // We throw here to prevent Cache from retaining an empty group\n         throw noGroupsForUser(user);\n       }\n \n       return groups;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e load(String user) throws Exception {\n      TraceScope scope \u003d null;\n      Tracer tracer \u003d Tracer.curThreadTracer();\n      if (tracer !\u003d null) {\n        scope \u003d tracer.newScope(\"Groups#fetchGroupList\");\n        scope.addKVAnnotation(\"user\", user);\n      }\n      List\u003cString\u003e groups \u003d null;\n      try {\n        groups \u003d fetchGroupList(user);\n      } finally {\n        if (scope !\u003d null) {\n          scope.close();\n        }\n      }\n\n      if (groups.isEmpty()) {\n        if (isNegativeCacheEnabled()) {\n          negativeCache.add(user);\n        }\n\n        // We throw here to prevent Cache from retaining an empty group\n        throw noGroupsForUser(user);\n      }\n\n      return groups;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "53caeaa16b1450b54e994c77f5d0c8a767b88d57": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena.\n",
      "commitDate": "05/01/15 3:06 PM",
      "commitName": "53caeaa16b1450b54e994c77f5d0c8a767b88d57",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "12/12/14 4:30 PM",
      "commitNameOld": "e5a692519956aefb3a540ed0137b63cf598ac10d",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 23.94,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n     public List\u003cString\u003e load(String user) throws Exception {\n       List\u003cString\u003e groups \u003d fetchGroupList(user);\n \n       if (groups.isEmpty()) {\n         if (isNegativeCacheEnabled()) {\n-          long expirationTime \u003d timer.monotonicNow() + negativeCacheTimeout;\n-          negativeCacheMask.put(user, expirationTime);\n+          negativeCache.add(user);\n         }\n \n         // We throw here to prevent Cache from retaining an empty group\n         throw noGroupsForUser(user);\n       }\n \n       return groups;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e load(String user) throws Exception {\n      List\u003cString\u003e groups \u003d fetchGroupList(user);\n\n      if (groups.isEmpty()) {\n        if (isNegativeCacheEnabled()) {\n          negativeCache.add(user);\n        }\n\n        // We throw here to prevent Cache from retaining an empty group\n        throw noGroupsForUser(user);\n      }\n\n      return groups;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "e5a692519956aefb3a540ed0137b63cf598ac10d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11238. Update the NameNode\u0027s Group Cache in the background when possible (Chris Li via Colin P. McCabe)\n",
      "commitDate": "12/12/14 4:30 PM",
      "commitName": "e5a692519956aefb3a540ed0137b63cf598ac10d",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,15 @@\n+    public List\u003cString\u003e load(String user) throws Exception {\n+      List\u003cString\u003e groups \u003d fetchGroupList(user);\n+\n+      if (groups.isEmpty()) {\n+        if (isNegativeCacheEnabled()) {\n+          long expirationTime \u003d timer.monotonicNow() + negativeCacheTimeout;\n+          negativeCacheMask.put(user, expirationTime);\n+        }\n+\n+        // We throw here to prevent Cache from retaining an empty group\n+        throw noGroupsForUser(user);\n+      }\n+\n+      return groups;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e load(String user) throws Exception {\n      List\u003cString\u003e groups \u003d fetchGroupList(user);\n\n      if (groups.isEmpty()) {\n        if (isNegativeCacheEnabled()) {\n          long expirationTime \u003d timer.monotonicNow() + negativeCacheTimeout;\n          negativeCacheMask.put(user, expirationTime);\n        }\n\n        // We throw here to prevent Cache from retaining an empty group\n        throw noGroupsForUser(user);\n      }\n\n      return groups;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java"
    }
  }
}