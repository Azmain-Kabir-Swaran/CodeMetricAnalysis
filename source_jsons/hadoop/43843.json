{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComponentHealthThresholdMonitor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/monitor/ComponentHealthThresholdMonitor.java",
  "functionStartLine": 59,
  "functionEndLine": 150,
  "numCommitsSeen": 1,
  "timeTaken": 628,
  "changeHistory": [
    "93979db8400186d6e557c46a2a1e2622821013c1"
  ],
  "changeHistoryShort": {
    "93979db8400186d6e557c46a2a1e2622821013c1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "93979db8400186d6e557c46a2a1e2622821013c1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8122.  Added component health monitoring for YARN service.\n            Contributed by Gour Saha\n",
      "commitDate": "26/04/18 4:17 PM",
      "commitName": "93979db8400186d6e557c46a2a1e2622821013c1",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,92 @@\n+  public void run() {\n+    LOG.debug(\"ComponentHealthThresholdMonitor run method\");\n+    // Perform container health checks against desired threshold\n+    long desiredContainerCount \u003d component.getNumDesiredInstances();\n+    // If desired container count for this component is 0 then nothing to do\n+    if (desiredContainerCount \u003d\u003d 0) {\n+      return;\n+    }\n+    long readyContainerCount \u003d component.getNumReadyInstances();\n+    float thresholdFraction \u003d (float) healthThresholdPercent / 100;\n+    // No possibility of div by 0 since desiredContainerCount won\u0027t be 0 here\n+    float readyContainerFraction \u003d (float) readyContainerCount\n+        / desiredContainerCount;\n+    boolean healthChanged \u003d false;\n+    if (Math.abs(\n+        readyContainerFraction - prevReadyContainerFraction) \u003e .0000001) {\n+      prevReadyContainerFraction \u003d readyContainerFraction;\n+      healthChanged \u003d true;\n+    }\n+    String readyContainerPercentStr \u003d String.format(\"%.2f\",\n+        readyContainerFraction * 100);\n+    // Check if the current ready container percent is less than the\n+    // threshold percent\n+    if (readyContainerFraction \u003c thresholdFraction) {\n+      // Check if it is the first occurrence and if yes set the timestamp\n+      long currentTimestamp \u003d System.nanoTime();\n+      if (firstOccurrenceTimestamp \u003d\u003d 0) {\n+        firstOccurrenceTimestamp \u003d currentTimestamp;\n+        Date date \u003d new Date();\n+        LOG.info(\n+            \"[COMPONENT {}] Health has gone below threshold. Starting health \"\n+                + \"threshold timer at ts \u003d {} ({})\",\n+            component.getName(), date.getTime(), date);\n+      }\n+      long elapsedTime \u003d currentTimestamp - firstOccurrenceTimestamp;\n+      long elapsedTimeSecs \u003d TimeUnit.SECONDS.convert(elapsedTime,\n+          TimeUnit.NANOSECONDS);\n+      LOG.warn(\n+          \"[COMPONENT {}] Current health {}% is below health threshold of \"\n+              + \"{}% for {} secs (threshold window \u003d {} secs)\",\n+          component.getName(), readyContainerPercentStr,\n+          healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\n+      if (elapsedTime \u003e healthThresholdWindowNanos) {\n+        LOG.warn(\n+            \"[COMPONENT {}] Current health {}% has been below health \"\n+                + \"threshold of {}% for {} secs (threshold window \u003d {} secs)\",\n+            component.getName(), readyContainerPercentStr,\n+            healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\n+        // Trigger service stop\n+        String exitDiag \u003d String.format(\n+            \"Service is being killed because container health for component \"\n+                + \"%s was %s%% (health threshold \u003d %d%%) for %d secs \"\n+                + \"(threshold window \u003d %d secs)\",\n+            component.getName(), readyContainerPercentStr,\n+            healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\n+        // Append to global diagnostics that will be reported to RM.\n+        component.getScheduler().getDiagnostics().append(exitDiag);\n+        LOG.warn(exitDiag);\n+        // Sleep for 5 seconds in hope that the state can be recorded in ATS.\n+        // In case there\u0027s a client polling the component state, it can be\n+        // notified.\n+        try {\n+          Thread.sleep(5000);\n+        } catch (InterruptedException e) {\n+          LOG.error(\"Interrupted on sleep while exiting.\", e);\n+        }\n+        ExitUtil.terminate(-1);\n+      }\n+    } else {\n+      String logMsg \u003d \"[COMPONENT {}] Health threshold \u003d {}%, Current health \"\n+          + \"\u003d {}% (Current Ready count \u003d {}, Desired count \u003d {})\";\n+      if (healthChanged) {\n+        LOG.info(logMsg, component.getName(), healthThresholdPercent,\n+            readyContainerPercentStr, readyContainerCount,\n+            desiredContainerCount);\n+      } else {\n+        LOG.debug(logMsg, component.getName(), healthThresholdPercent,\n+            readyContainerPercentStr, readyContainerCount,\n+            desiredContainerCount);\n+      }\n+      // The container health might have recovered above threshold after being\n+      // below for less than the threshold window amount of time. So we need\n+      // to reset firstOccurrenceTimestamp to 0.\n+      if (firstOccurrenceTimestamp !\u003d 0) {\n+        Date date \u003d new Date();\n+        LOG.info(\n+            \"[COMPONENT {}] Health recovered above threshold at ts \u003d {} ({})\",\n+            component.getName(), date.getTime(), date);\n+        firstOccurrenceTimestamp \u003d 0;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.debug(\"ComponentHealthThresholdMonitor run method\");\n    // Perform container health checks against desired threshold\n    long desiredContainerCount \u003d component.getNumDesiredInstances();\n    // If desired container count for this component is 0 then nothing to do\n    if (desiredContainerCount \u003d\u003d 0) {\n      return;\n    }\n    long readyContainerCount \u003d component.getNumReadyInstances();\n    float thresholdFraction \u003d (float) healthThresholdPercent / 100;\n    // No possibility of div by 0 since desiredContainerCount won\u0027t be 0 here\n    float readyContainerFraction \u003d (float) readyContainerCount\n        / desiredContainerCount;\n    boolean healthChanged \u003d false;\n    if (Math.abs(\n        readyContainerFraction - prevReadyContainerFraction) \u003e .0000001) {\n      prevReadyContainerFraction \u003d readyContainerFraction;\n      healthChanged \u003d true;\n    }\n    String readyContainerPercentStr \u003d String.format(\"%.2f\",\n        readyContainerFraction * 100);\n    // Check if the current ready container percent is less than the\n    // threshold percent\n    if (readyContainerFraction \u003c thresholdFraction) {\n      // Check if it is the first occurrence and if yes set the timestamp\n      long currentTimestamp \u003d System.nanoTime();\n      if (firstOccurrenceTimestamp \u003d\u003d 0) {\n        firstOccurrenceTimestamp \u003d currentTimestamp;\n        Date date \u003d new Date();\n        LOG.info(\n            \"[COMPONENT {}] Health has gone below threshold. Starting health \"\n                + \"threshold timer at ts \u003d {} ({})\",\n            component.getName(), date.getTime(), date);\n      }\n      long elapsedTime \u003d currentTimestamp - firstOccurrenceTimestamp;\n      long elapsedTimeSecs \u003d TimeUnit.SECONDS.convert(elapsedTime,\n          TimeUnit.NANOSECONDS);\n      LOG.warn(\n          \"[COMPONENT {}] Current health {}% is below health threshold of \"\n              + \"{}% for {} secs (threshold window \u003d {} secs)\",\n          component.getName(), readyContainerPercentStr,\n          healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\n      if (elapsedTime \u003e healthThresholdWindowNanos) {\n        LOG.warn(\n            \"[COMPONENT {}] Current health {}% has been below health \"\n                + \"threshold of {}% for {} secs (threshold window \u003d {} secs)\",\n            component.getName(), readyContainerPercentStr,\n            healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\n        // Trigger service stop\n        String exitDiag \u003d String.format(\n            \"Service is being killed because container health for component \"\n                + \"%s was %s%% (health threshold \u003d %d%%) for %d secs \"\n                + \"(threshold window \u003d %d secs)\",\n            component.getName(), readyContainerPercentStr,\n            healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\n        // Append to global diagnostics that will be reported to RM.\n        component.getScheduler().getDiagnostics().append(exitDiag);\n        LOG.warn(exitDiag);\n        // Sleep for 5 seconds in hope that the state can be recorded in ATS.\n        // In case there\u0027s a client polling the component state, it can be\n        // notified.\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          LOG.error(\"Interrupted on sleep while exiting.\", e);\n        }\n        ExitUtil.terminate(-1);\n      }\n    } else {\n      String logMsg \u003d \"[COMPONENT {}] Health threshold \u003d {}%, Current health \"\n          + \"\u003d {}% (Current Ready count \u003d {}, Desired count \u003d {})\";\n      if (healthChanged) {\n        LOG.info(logMsg, component.getName(), healthThresholdPercent,\n            readyContainerPercentStr, readyContainerCount,\n            desiredContainerCount);\n      } else {\n        LOG.debug(logMsg, component.getName(), healthThresholdPercent,\n            readyContainerPercentStr, readyContainerCount,\n            desiredContainerCount);\n      }\n      // The container health might have recovered above threshold after being\n      // below for less than the threshold window amount of time. So we need\n      // to reset firstOccurrenceTimestamp to 0.\n      if (firstOccurrenceTimestamp !\u003d 0) {\n        Date date \u003d new Date();\n        LOG.info(\n            \"[COMPONENT {}] Health recovered above threshold at ts \u003d {} ({})\",\n            component.getName(), date.getTime(), date);\n        firstOccurrenceTimestamp \u003d 0;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/monitor/ComponentHealthThresholdMonitor.java"
    }
  }
}