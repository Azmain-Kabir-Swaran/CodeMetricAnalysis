{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "formatSchedulerConfiguration",
  "functionId": "formatSchedulerConfiguration___hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2589,
  "functionEndLine": 2621,
  "numCommitsSeen": 106,
  "timeTaken": 4057,
  "changeHistory": [
    "090f73a9aaeb4c03032a78c0a837478b527c27e0",
    "be901f49628a553cfe6a3942478cb528cce2b266",
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
    "4510970e2f7728d036c750b596985e5ffa357b60",
    "137546a78a45adbfb5ef338c1c2984a97b3cecc2"
  ],
  "changeHistoryShort": {
    "090f73a9aaeb4c03032a78c0a837478b527c27e0": "Ybodychange",
    "be901f49628a553cfe6a3942478cb528cce2b266": "Ybodychange",
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e": "Ybodychange",
    "4510970e2f7728d036c750b596985e5ffa357b60": "Ybodychange",
    "137546a78a45adbfb5ef338c1c2984a97b3cecc2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "090f73a9aaeb4c03032a78c0a837478b527c27e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9900. Revert to previous state when Invalid Config is applied and Refresh Support in SchedulerConfig Format. Contributed by Prabhu Joseph.\n",
      "commitDate": "16/10/19 5:44 AM",
      "commitName": "090f73a9aaeb4c03032a78c0a837478b527c27e0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/10/19 3:23 AM",
      "commitNameOld": "be901f49628a553cfe6a3942478cb528cce2b266",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,33 @@\n   public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n       throws AuthorizationException {\n     // Only admin user allowed to format scheduler conf in configuration store\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     initForWritableEndpoints(callerUGI, true);\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler\n         \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n       try {\n         MutableConfigurationProvider mutableConfigurationProvider \u003d\n             ((MutableConfScheduler) scheduler).getMutableConfProvider();\n         mutableConfigurationProvider.formatConfigurationInStore(conf);\n+        try {\n+          rm.getRMContext().getRMAdminService().refreshQueues();\n+        } catch (IOException | YarnException e) {\n+          LOG.error(\"Exception thrown when formatting configuration.\", e);\n+          mutableConfigurationProvider.revertToOldConfig(conf);\n+          throw e;\n+        }\n         return Response.status(Status.OK).entity(\"Configuration under \" +\n             \"store successfully formatted.\").build();\n       } catch (Exception e) {\n         LOG.error(\"Exception thrown when formating configuration\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n           .entity(\"Scheduler Configuration format only supported by \" +\n           \"MutableConfScheduler.\").build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    // Only admin user allowed to format scheduler conf in configuration store\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler\n        \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n            ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        mutableConfigurationProvider.formatConfigurationInStore(conf);\n        try {\n          rm.getRMContext().getRMAdminService().refreshQueues();\n        } catch (IOException | YarnException e) {\n          LOG.error(\"Exception thrown when formatting configuration.\", e);\n          mutableConfigurationProvider.revertToOldConfig(conf);\n          throw e;\n        }\n        return Response.status(Status.OK).entity(\"Configuration under \" +\n            \"store successfully formatted.\").build();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown when formating configuration\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Scheduler Configuration format only supported by \" +\n          \"MutableConfScheduler.\").build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "be901f49628a553cfe6a3942478cb528cce2b266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change need to update Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "09/10/19 3:23 AM",
      "commitName": "be901f49628a553cfe6a3942478cb528cce2b266",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 8:45 PM",
      "commitNameOld": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n       throws AuthorizationException {\n     // Only admin user allowed to format scheduler conf in configuration store\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     initForWritableEndpoints(callerUGI, true);\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler\n         \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n       try {\n         MutableConfigurationProvider mutableConfigurationProvider \u003d\n             ((MutableConfScheduler) scheduler).getMutableConfProvider();\n         mutableConfigurationProvider.formatConfigurationInStore(conf);\n         return Response.status(Status.OK).entity(\"Configuration under \" +\n             \"store successfully formatted.\").build();\n       } catch (Exception e) {\n         LOG.error(\"Exception thrown when formating configuration\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n-          .entity(\"Configuration change only supported by \" +\n+          .entity(\"Scheduler Configuration format only supported by \" +\n           \"MutableConfScheduler.\").build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    // Only admin user allowed to format scheduler conf in configuration store\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler\n        \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n            ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        mutableConfigurationProvider.formatConfigurationInStore(conf);\n        return Response.status(Status.OK).entity(\"Configuration under \" +\n            \"store successfully formatted.\").build();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown when formating configuration\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Scheduler Configuration format only supported by \" +\n          \"MutableConfScheduler.\").build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-9873. Mutation API Config Change updates Version Number. Contributed by Prabhu Joseph\"\n\nThis reverts commit 4510970e2f7728d036c750b596985e5ffa357b60.\n",
      "commitDate": "04/10/19 8:45 PM",
      "commitName": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 9:19 AM",
      "commitNameOld": "4510970e2f7728d036c750b596985e5ffa357b60",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n       throws AuthorizationException {\n     // Only admin user allowed to format scheduler conf in configuration store\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     initForWritableEndpoints(callerUGI, true);\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler\n         \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n       try {\n         MutableConfigurationProvider mutableConfigurationProvider \u003d\n             ((MutableConfScheduler) scheduler).getMutableConfProvider();\n         mutableConfigurationProvider.formatConfigurationInStore(conf);\n         return Response.status(Status.OK).entity(\"Configuration under \" +\n             \"store successfully formatted.\").build();\n       } catch (Exception e) {\n         LOG.error(\"Exception thrown when formating configuration\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n-          .entity(\"Scheduler Configuration format only supported by \" +\n+          .entity(\"Configuration change only supported by \" +\n           \"MutableConfScheduler.\").build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    // Only admin user allowed to format scheduler conf in configuration store\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler\n        \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n            ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        mutableConfigurationProvider.formatConfigurationInStore(conf);\n        return Response.status(Status.OK).entity(\"Configuration under \" +\n            \"store successfully formatted.\").build();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown when formating configuration\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n          \"MutableConfScheduler.\").build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "4510970e2f7728d036c750b596985e5ffa357b60": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change updates Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "04/10/19 9:19 AM",
      "commitName": "4510970e2f7728d036c750b596985e5ffa357b60",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/09/19 8:38 PM",
      "commitNameOld": "137546a78a45adbfb5ef338c1c2984a97b3cecc2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 3.53,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n       throws AuthorizationException {\n     // Only admin user allowed to format scheduler conf in configuration store\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     initForWritableEndpoints(callerUGI, true);\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler\n         \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n       try {\n         MutableConfigurationProvider mutableConfigurationProvider \u003d\n             ((MutableConfScheduler) scheduler).getMutableConfProvider();\n         mutableConfigurationProvider.formatConfigurationInStore(conf);\n         return Response.status(Status.OK).entity(\"Configuration under \" +\n             \"store successfully formatted.\").build();\n       } catch (Exception e) {\n         LOG.error(\"Exception thrown when formating configuration\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n-          .entity(\"Configuration change only supported by \" +\n+          .entity(\"Scheduler Configuration format only supported by \" +\n           \"MutableConfScheduler.\").build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    // Only admin user allowed to format scheduler conf in configuration store\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler\n        \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n            ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        mutableConfigurationProvider.formatConfigurationInStore(conf);\n        return Response.status(Status.OK).entity(\"Configuration under \" +\n            \"store successfully formatted.\").build();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown when formating configuration\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Scheduler Configuration format only supported by \" +\n          \"MutableConfScheduler.\").build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "137546a78a45adbfb5ef338c1c2984a97b3cecc2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9864. Format CS Configuration present in Configuration Store. Contributeed by Prabhu Joseph\n",
      "commitDate": "30/09/19 8:38 PM",
      "commitName": "137546a78a45adbfb5ef338c1c2984a97b3cecc2",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,26 @@\n+  public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n+      throws AuthorizationException {\n+    // Only admin user allowed to format scheduler conf in configuration store\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    initForWritableEndpoints(callerUGI, true);\n+\n+    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n+    if (scheduler instanceof MutableConfScheduler\n+        \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n+      try {\n+        MutableConfigurationProvider mutableConfigurationProvider \u003d\n+            ((MutableConfScheduler) scheduler).getMutableConfProvider();\n+        mutableConfigurationProvider.formatConfigurationInStore(conf);\n+        return Response.status(Status.OK).entity(\"Configuration under \" +\n+            \"store successfully formatted.\").build();\n+      } catch (Exception e) {\n+        LOG.error(\"Exception thrown when formating configuration\", e);\n+        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n+            .build();\n+      }\n+    } else {\n+      return Response.status(Status.BAD_REQUEST)\n+          .entity(\"Configuration change only supported by \" +\n+          \"MutableConfScheduler.\").build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response formatSchedulerConfiguration(@Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    // Only admin user allowed to format scheduler conf in configuration store\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler\n        \u0026\u0026 ((MutableConfScheduler) scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n            ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        mutableConfigurationProvider.formatConfigurationInStore(conf);\n        return Response.status(Status.OK).entity(\"Configuration under \" +\n            \"store successfully formatted.\").build();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown when formating configuration\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n          \"MutableConfScheduler.\").build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}