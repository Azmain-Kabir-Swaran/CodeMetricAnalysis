{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnmanagedAMPoolManager.java",
  "functionName": "serviceStop",
  "functionId": "serviceStop",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java",
  "functionStartLine": 101,
  "functionEndLine": 140,
  "numCommitsSeen": 7,
  "timeTaken": 1098,
  "changeHistory": [
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "859aa1f9d621d07693825e610bdc0149f7a2770a"
  ],
  "changeHistoryShort": {
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "859aa1f9d621d07693825e610bdc0149f7a2770a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "859aa1f9d621d07693825e610bdc0149f7a2770a",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 108.05,
      "commitsBetweenForRepo": 968,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   protected void serviceStop() throws Exception {\n     ExecutorCompletionService\u003cKillApplicationResponse\u003e completionService \u003d\n         new ExecutorCompletionService\u003c\u003e(this.threadpool);\n     if (this.unmanagedAppMasterMap.isEmpty()) {\n       return;\n     }\n \n     // Save a local copy of the key set so that it won\u0027t change with the map\n     Set\u003cString\u003e addressList \u003d\n         new HashSet\u003c\u003e(this.unmanagedAppMasterMap.keySet());\n     LOG.warn(\"Abnormal shutdown of UAMPoolManager, still {} UAMs in map\",\n         addressList.size());\n \n     for (final String uamId : addressList) {\n       completionService.submit(new Callable\u003cKillApplicationResponse\u003e() {\n         @Override\n         public KillApplicationResponse call() throws Exception {\n           try {\n             LOG.info(\"Force-killing UAM id \" + uamId + \" for application \"\n-                + attemptIdMap.get(uamId));\n+                + appIdMap.get(uamId));\n             return unmanagedAppMasterMap.remove(uamId).forceKillApplication();\n           } catch (Exception e) {\n             LOG.error(\"Failed to kill unmanaged application master\", e);\n             return null;\n           }\n         }\n       });\n     }\n \n     for (int i \u003d 0; i \u003c addressList.size(); ++i) {\n       try {\n         Future\u003cKillApplicationResponse\u003e future \u003d completionService.take();\n         future.get();\n       } catch (Exception e) {\n         LOG.error(\"Failed to kill unmanaged application master\", e);\n       }\n     }\n-    this.attemptIdMap.clear();\n+    this.appIdMap.clear();\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStop() throws Exception {\n    ExecutorCompletionService\u003cKillApplicationResponse\u003e completionService \u003d\n        new ExecutorCompletionService\u003c\u003e(this.threadpool);\n    if (this.unmanagedAppMasterMap.isEmpty()) {\n      return;\n    }\n\n    // Save a local copy of the key set so that it won\u0027t change with the map\n    Set\u003cString\u003e addressList \u003d\n        new HashSet\u003c\u003e(this.unmanagedAppMasterMap.keySet());\n    LOG.warn(\"Abnormal shutdown of UAMPoolManager, still {} UAMs in map\",\n        addressList.size());\n\n    for (final String uamId : addressList) {\n      completionService.submit(new Callable\u003cKillApplicationResponse\u003e() {\n        @Override\n        public KillApplicationResponse call() throws Exception {\n          try {\n            LOG.info(\"Force-killing UAM id \" + uamId + \" for application \"\n                + appIdMap.get(uamId));\n            return unmanagedAppMasterMap.remove(uamId).forceKillApplication();\n          } catch (Exception e) {\n            LOG.error(\"Failed to kill unmanaged application master\", e);\n            return null;\n          }\n        }\n      });\n    }\n\n    for (int i \u003d 0; i \u003c addressList.size(); ++i) {\n      try {\n        Future\u003cKillApplicationResponse\u003e future \u003d completionService.take();\n        future.get();\n      } catch (Exception e) {\n        LOG.error(\"Failed to kill unmanaged application master\", e);\n      }\n    }\n    this.appIdMap.clear();\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java",
      "extendedDetails": {}
    },
    "859aa1f9d621d07693825e610bdc0149f7a2770a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,40 @@\n+  protected void serviceStop() throws Exception {\n+    ExecutorCompletionService\u003cKillApplicationResponse\u003e completionService \u003d\n+        new ExecutorCompletionService\u003c\u003e(this.threadpool);\n+    if (this.unmanagedAppMasterMap.isEmpty()) {\n+      return;\n+    }\n+\n+    // Save a local copy of the key set so that it won\u0027t change with the map\n+    Set\u003cString\u003e addressList \u003d\n+        new HashSet\u003c\u003e(this.unmanagedAppMasterMap.keySet());\n+    LOG.warn(\"Abnormal shutdown of UAMPoolManager, still {} UAMs in map\",\n+        addressList.size());\n+\n+    for (final String uamId : addressList) {\n+      completionService.submit(new Callable\u003cKillApplicationResponse\u003e() {\n+        @Override\n+        public KillApplicationResponse call() throws Exception {\n+          try {\n+            LOG.info(\"Force-killing UAM id \" + uamId + \" for application \"\n+                + attemptIdMap.get(uamId));\n+            return unmanagedAppMasterMap.remove(uamId).forceKillApplication();\n+          } catch (Exception e) {\n+            LOG.error(\"Failed to kill unmanaged application master\", e);\n+            return null;\n+          }\n+        }\n+      });\n+    }\n+\n+    for (int i \u003d 0; i \u003c addressList.size(); ++i) {\n+      try {\n+        Future\u003cKillApplicationResponse\u003e future \u003d completionService.take();\n+        future.get();\n+      } catch (Exception e) {\n+        LOG.error(\"Failed to kill unmanaged application master\", e);\n+      }\n+    }\n+    this.attemptIdMap.clear();\n+    super.serviceStop();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStop() throws Exception {\n    ExecutorCompletionService\u003cKillApplicationResponse\u003e completionService \u003d\n        new ExecutorCompletionService\u003c\u003e(this.threadpool);\n    if (this.unmanagedAppMasterMap.isEmpty()) {\n      return;\n    }\n\n    // Save a local copy of the key set so that it won\u0027t change with the map\n    Set\u003cString\u003e addressList \u003d\n        new HashSet\u003c\u003e(this.unmanagedAppMasterMap.keySet());\n    LOG.warn(\"Abnormal shutdown of UAMPoolManager, still {} UAMs in map\",\n        addressList.size());\n\n    for (final String uamId : addressList) {\n      completionService.submit(new Callable\u003cKillApplicationResponse\u003e() {\n        @Override\n        public KillApplicationResponse call() throws Exception {\n          try {\n            LOG.info(\"Force-killing UAM id \" + uamId + \" for application \"\n                + attemptIdMap.get(uamId));\n            return unmanagedAppMasterMap.remove(uamId).forceKillApplication();\n          } catch (Exception e) {\n            LOG.error(\"Failed to kill unmanaged application master\", e);\n            return null;\n          }\n        }\n      });\n    }\n\n    for (int i \u003d 0; i \u003c addressList.size(); ++i) {\n      try {\n        Future\u003cKillApplicationResponse\u003e future \u003d completionService.take();\n        future.get();\n      } catch (Exception e) {\n        LOG.error(\"Failed to kill unmanaged application master\", e);\n      }\n    }\n    this.attemptIdMap.clear();\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedAMPoolManager.java"
    }
  }
}