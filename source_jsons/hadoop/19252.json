{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultiFileInputFormat.java",
  "functionName": "getSplits",
  "functionId": "getSplits___job-JobConf__numSplits-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MultiFileInputFormat.java",
  "functionStartLine": 46,
  "functionEndLine": 83,
  "numCommitsSeen": 4,
  "timeTaken": 4089,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public InputSplit[] getSplits(JobConf job, int numSplits) \n    throws IOException {\n    \n    Path[] paths \u003d FileUtil.stat2Paths(listStatus(job));\n    List\u003cMultiFileSplit\u003e splits \u003d new ArrayList\u003cMultiFileSplit\u003e(Math.min(numSplits, paths.length));\n    if (paths.length !\u003d 0) {\n      // HADOOP-1818: Manage splits only if there are paths\n      long[] lengths \u003d new long[paths.length];\n      long totLength \u003d 0;\n      for(int i\u003d0; i\u003cpaths.length; i++) {\n        FileSystem fs \u003d paths[i].getFileSystem(job);\n        lengths[i] \u003d fs.getContentSummary(paths[i]).getLength();\n        totLength +\u003d lengths[i];\n      }\n      double avgLengthPerSplit \u003d ((double)totLength) / numSplits;\n      long cumulativeLength \u003d 0;\n\n      int startIndex \u003d 0;\n\n      for(int i\u003d0; i\u003cnumSplits; i++) {\n        int splitSize \u003d findSize(i, avgLengthPerSplit, cumulativeLength\n            , startIndex, lengths);\n        if (splitSize !\u003d 0) {\n          // HADOOP-1818: Manage split only if split size is not equals to 0\n          Path[] splitPaths \u003d new Path[splitSize];\n          long[] splitLengths \u003d new long[splitSize];\n          System.arraycopy(paths, startIndex, splitPaths , 0, splitSize);\n          System.arraycopy(lengths, startIndex, splitLengths , 0, splitSize);\n          splits.add(new MultiFileSplit(job, splitPaths, splitLengths));\n          startIndex +\u003d splitSize;\n          for(long l: splitLengths) {\n            cumulativeLength +\u003d l;\n          }\n        }\n      }\n    }\n    return splits.toArray(new MultiFileSplit[splits.size()]);    \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MultiFileInputFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MultiFileInputFormat.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MultiFileInputFormat.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public InputSplit[] getSplits(JobConf job, int numSplits) \n    throws IOException {\n    \n    Path[] paths \u003d FileUtil.stat2Paths(listStatus(job));\n    List\u003cMultiFileSplit\u003e splits \u003d new ArrayList\u003cMultiFileSplit\u003e(Math.min(numSplits, paths.length));\n    if (paths.length !\u003d 0) {\n      // HADOOP-1818: Manage splits only if there are paths\n      long[] lengths \u003d new long[paths.length];\n      long totLength \u003d 0;\n      for(int i\u003d0; i\u003cpaths.length; i++) {\n        FileSystem fs \u003d paths[i].getFileSystem(job);\n        lengths[i] \u003d fs.getContentSummary(paths[i]).getLength();\n        totLength +\u003d lengths[i];\n      }\n      double avgLengthPerSplit \u003d ((double)totLength) / numSplits;\n      long cumulativeLength \u003d 0;\n\n      int startIndex \u003d 0;\n\n      for(int i\u003d0; i\u003cnumSplits; i++) {\n        int splitSize \u003d findSize(i, avgLengthPerSplit, cumulativeLength\n            , startIndex, lengths);\n        if (splitSize !\u003d 0) {\n          // HADOOP-1818: Manage split only if split size is not equals to 0\n          Path[] splitPaths \u003d new Path[splitSize];\n          long[] splitLengths \u003d new long[splitSize];\n          System.arraycopy(paths, startIndex, splitPaths , 0, splitSize);\n          System.arraycopy(lengths, startIndex, splitLengths , 0, splitSize);\n          splits.add(new MultiFileSplit(job, splitPaths, splitLengths));\n          startIndex +\u003d splitSize;\n          for(long l: splitLengths) {\n            cumulativeLength +\u003d l;\n          }\n        }\n      }\n    }\n    return splits.toArray(new MultiFileSplit[splits.size()]);    \n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MultiFileInputFormat.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/MultiFileInputFormat.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MultiFileInputFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public InputSplit[] getSplits(JobConf job, int numSplits) \n+    throws IOException {\n+    \n+    Path[] paths \u003d FileUtil.stat2Paths(listStatus(job));\n+    List\u003cMultiFileSplit\u003e splits \u003d new ArrayList\u003cMultiFileSplit\u003e(Math.min(numSplits, paths.length));\n+    if (paths.length !\u003d 0) {\n+      // HADOOP-1818: Manage splits only if there are paths\n+      long[] lengths \u003d new long[paths.length];\n+      long totLength \u003d 0;\n+      for(int i\u003d0; i\u003cpaths.length; i++) {\n+        FileSystem fs \u003d paths[i].getFileSystem(job);\n+        lengths[i] \u003d fs.getContentSummary(paths[i]).getLength();\n+        totLength +\u003d lengths[i];\n+      }\n+      double avgLengthPerSplit \u003d ((double)totLength) / numSplits;\n+      long cumulativeLength \u003d 0;\n+\n+      int startIndex \u003d 0;\n+\n+      for(int i\u003d0; i\u003cnumSplits; i++) {\n+        int splitSize \u003d findSize(i, avgLengthPerSplit, cumulativeLength\n+            , startIndex, lengths);\n+        if (splitSize !\u003d 0) {\n+          // HADOOP-1818: Manage split only if split size is not equals to 0\n+          Path[] splitPaths \u003d new Path[splitSize];\n+          long[] splitLengths \u003d new long[splitSize];\n+          System.arraycopy(paths, startIndex, splitPaths , 0, splitSize);\n+          System.arraycopy(lengths, startIndex, splitLengths , 0, splitSize);\n+          splits.add(new MultiFileSplit(job, splitPaths, splitLengths));\n+          startIndex +\u003d splitSize;\n+          for(long l: splitLengths) {\n+            cumulativeLength +\u003d l;\n+          }\n+        }\n+      }\n+    }\n+    return splits.toArray(new MultiFileSplit[splits.size()]);    \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public InputSplit[] getSplits(JobConf job, int numSplits) \n    throws IOException {\n    \n    Path[] paths \u003d FileUtil.stat2Paths(listStatus(job));\n    List\u003cMultiFileSplit\u003e splits \u003d new ArrayList\u003cMultiFileSplit\u003e(Math.min(numSplits, paths.length));\n    if (paths.length !\u003d 0) {\n      // HADOOP-1818: Manage splits only if there are paths\n      long[] lengths \u003d new long[paths.length];\n      long totLength \u003d 0;\n      for(int i\u003d0; i\u003cpaths.length; i++) {\n        FileSystem fs \u003d paths[i].getFileSystem(job);\n        lengths[i] \u003d fs.getContentSummary(paths[i]).getLength();\n        totLength +\u003d lengths[i];\n      }\n      double avgLengthPerSplit \u003d ((double)totLength) / numSplits;\n      long cumulativeLength \u003d 0;\n\n      int startIndex \u003d 0;\n\n      for(int i\u003d0; i\u003cnumSplits; i++) {\n        int splitSize \u003d findSize(i, avgLengthPerSplit, cumulativeLength\n            , startIndex, lengths);\n        if (splitSize !\u003d 0) {\n          // HADOOP-1818: Manage split only if split size is not equals to 0\n          Path[] splitPaths \u003d new Path[splitSize];\n          long[] splitLengths \u003d new long[splitSize];\n          System.arraycopy(paths, startIndex, splitPaths , 0, splitSize);\n          System.arraycopy(lengths, startIndex, splitLengths , 0, splitSize);\n          splits.add(new MultiFileSplit(job, splitPaths, splitLengths));\n          startIndex +\u003d splitSize;\n          for(long l: splitLengths) {\n            cumulativeLength +\u003d l;\n          }\n        }\n      }\n    }\n    return splits.toArray(new MultiFileSplit[splits.size()]);    \n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/MultiFileInputFormat.java"
    }
  }
}