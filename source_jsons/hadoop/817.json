{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeerCache.java",
  "functionName": "startExpiryDaemon",
  "functionId": "startExpiryDaemon",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
  "functionStartLine": 114,
  "functionEndLine": 138,
  "numCommitsSeen": 29,
  "timeTaken": 2336,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7",
    "837e17b2eac1471d93e2eff395272063b265fee7",
    "239b2742d0e80d13c970fd062af4930e672fe903",
    "a7bcdcc0518595b7d94383606ab8e9aa711292b0"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Yfilerename",
    "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7": "Ymultichange(Yfilerename,Ybodychange)",
    "837e17b2eac1471d93e2eff395272063b265fee7": "Ymultichange(Yfilerename,Ybodychange)",
    "239b2742d0e80d13c970fd062af4930e672fe903": "Ymultichange(Yfilerename,Ybodychange)",
    "a7bcdcc0518595b7d94383606ab8e9aa711292b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:38 PM",
      "commitNameOld": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 35.88,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n-    if (isDaemonStarted() \u003d\u003d true) {\n+    if (isDaemonStarted()) {\n       return;\n     }\n-    \n+\n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n           PeerCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n           PeerCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n         return String.valueOf(PeerCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted()) {\n      return;\n    }\n\n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PeerCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          PeerCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(PeerCache.this);\n      }\n    });\n    daemon.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
      "extendedDetails": {}
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:21 PM",
      "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PeerCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          PeerCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(PeerCache.this);\n      }\n    });\n    daemon.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/PeerCache.java"
      }
    },
    "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1431097 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 1:34 PM",
      "commitName": "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1431097 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/01/13 1:34 PM",
          "commitName": "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "09/01/13 10:12 AM",
          "commitNameOld": "f6c28639005f46bc171a9a990e2ad4d7afb4ce73",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n     if (isDaemonStarted() \u003d\u003d true) {\n       return;\n     }\n     \n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n-          SocketCache.this.run();\n+          PeerCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n-          SocketCache.this.clear();\n+          PeerCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n-        return String.valueOf(SocketCache.this);\n+        return String.valueOf(PeerCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PeerCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          PeerCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(PeerCache.this);\n      }\n    });\n    daemon.start();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1431097 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/01/13 1:34 PM",
          "commitName": "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "09/01/13 10:12 AM",
          "commitNameOld": "f6c28639005f46bc171a9a990e2ad4d7afb4ce73",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n     if (isDaemonStarted() \u003d\u003d true) {\n       return;\n     }\n     \n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n-          SocketCache.this.run();\n+          PeerCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n-          SocketCache.this.clear();\n+          PeerCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n-        return String.valueOf(SocketCache.this);\n+        return String.valueOf(PeerCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PeerCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          PeerCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(PeerCache.this);\n      }\n    });\n    daemon.start();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "837e17b2eac1471d93e2eff395272063b265fee7": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "svn merge -c -1430507 . for reverting HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430662 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 6:39 PM",
      "commitName": "837e17b2eac1471d93e2eff395272063b265fee7",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "svn merge -c -1430507 . for reverting HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430662 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/01/13 6:39 PM",
          "commitName": "837e17b2eac1471d93e2eff395272063b265fee7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/01/13 2:43 PM",
          "commitNameOld": "4ca58bd57c11fe328ff03d52a3cf6d848f6daa00",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n     if (isDaemonStarted() \u003d\u003d true) {\n       return;\n     }\n     \n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n-          PeerCache.this.run();\n+          SocketCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n-          PeerCache.this.clear();\n+          SocketCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n-        return String.valueOf(PeerCache.this);\n+        return String.valueOf(SocketCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          SocketCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          SocketCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(SocketCache.this);\n      }\n    });\n    daemon.start();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "svn merge -c -1430507 . for reverting HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430662 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/01/13 6:39 PM",
          "commitName": "837e17b2eac1471d93e2eff395272063b265fee7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/01/13 2:43 PM",
          "commitNameOld": "4ca58bd57c11fe328ff03d52a3cf6d848f6daa00",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n     if (isDaemonStarted() \u003d\u003d true) {\n       return;\n     }\n     \n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n-          PeerCache.this.run();\n+          SocketCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n-          PeerCache.this.clear();\n+          SocketCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n-        return String.valueOf(PeerCache.this);\n+        return String.valueOf(SocketCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          SocketCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          SocketCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(SocketCache.this);\n      }\n    });\n    daemon.start();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "239b2742d0e80d13c970fd062af4930e672fe903": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430507 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 12:44 PM",
      "commitName": "239b2742d0e80d13c970fd062af4930e672fe903",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430507 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/01/13 12:44 PM",
          "commitName": "239b2742d0e80d13c970fd062af4930e672fe903",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "08/01/13 11:51 AM",
          "commitNameOld": "db99f7f67d173de63e5601e401b7d4daf1585288",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n     if (isDaemonStarted() \u003d\u003d true) {\n       return;\n     }\n     \n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n-          SocketCache.this.run();\n+          PeerCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n-          SocketCache.this.clear();\n+          PeerCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n-        return String.valueOf(SocketCache.this);\n+        return String.valueOf(PeerCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PeerCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          PeerCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(PeerCache.this);\n      }\n    });\n    daemon.start();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430507 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/01/13 12:44 PM",
          "commitName": "239b2742d0e80d13c970fd062af4930e672fe903",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "08/01/13 11:51 AM",
          "commitNameOld": "db99f7f67d173de63e5601e401b7d4daf1585288",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private synchronized void startExpiryDaemon() {\n     // start daemon only if not already started\n     if (isDaemonStarted() \u003d\u003d true) {\n       return;\n     }\n     \n     daemon \u003d new Daemon(new Runnable() {\n       @Override\n       public void run() {\n         try {\n-          SocketCache.this.run();\n+          PeerCache.this.run();\n         } catch(InterruptedException e) {\n           //noop\n         } finally {\n-          SocketCache.this.clear();\n+          PeerCache.this.clear();\n         }\n       }\n \n       @Override\n       public String toString() {\n-        return String.valueOf(SocketCache.this);\n+        return String.valueOf(PeerCache.this);\n       }\n     });\n     daemon.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PeerCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          PeerCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(PeerCache.this);\n      }\n    });\n    daemon.start();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/PeerCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "a7bcdcc0518595b7d94383606ab8e9aa711292b0": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries.  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 6:23 AM",
      "commitName": "a7bcdcc0518595b7d94383606ab8e9aa711292b0",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,25 @@\n+  private synchronized void startExpiryDaemon() {\n+    // start daemon only if not already started\n+    if (isDaemonStarted() \u003d\u003d true) {\n+      return;\n+    }\n+    \n+    daemon \u003d new Daemon(new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          SocketCache.this.run();\n+        } catch(InterruptedException e) {\n+          //noop\n+        } finally {\n+          SocketCache.this.clear();\n+        }\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return String.valueOf(SocketCache.this);\n+      }\n+    });\n+    daemon.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void startExpiryDaemon() {\n    // start daemon only if not already started\n    if (isDaemonStarted() \u003d\u003d true) {\n      return;\n    }\n    \n    daemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          SocketCache.this.run();\n        } catch(InterruptedException e) {\n          //noop\n        } finally {\n          SocketCache.this.clear();\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.valueOf(SocketCache.this);\n      }\n    });\n    daemon.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java"
    }
  }
}