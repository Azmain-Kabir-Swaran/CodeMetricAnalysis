{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericEntityReader.java",
  "functionName": "createFilterListForColsOfInfoFamily",
  "functionId": "createFilterListForColsOfInfoFamily",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
  "functionStartLine": 244,
  "functionEndLine": 309,
  "numCommitsSeen": 19,
  "timeTaken": 2468,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Add filters for each column in entity table.\n    updateFixedColumns(infoFamilyColsFilter);\n    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n    // If INFO field has to be retrieved, add a filter for fetching columns\n    // with INFO column prefix.\n    if (hasField(fieldsToRetrieve, Field.INFO)) {\n      infoFamilyColsFilter\n          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.INFO));\n    }\n    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n      // If RELATES_TO field has to be retrieved, add a filter for fetching\n      // columns with RELATES_TO column prefix.\n      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n          .createHBaseQualifierFilter(CompareOp.EQUAL,\n              EntityColumnPrefix.RELATES_TO));\n    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain RELATES_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // relatesTo filters are specified. relatesTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e relatesToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.RELATES_TO, relatesToCols));\n    }\n    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n      // columns with IS_RELATED_TO column prefix.\n      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n          .createHBaseQualifierFilter(CompareOp.EQUAL,\n              EntityColumnPrefix.IS_RELATED_TO));\n    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // isRelatedTo filters are specified. isRelatedTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e isRelatedToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n    }\n    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n      // If EVENTS field has to be retrieved, add a filter for fetching columns\n      // with EVENT column prefix.\n      infoFamilyColsFilter\n          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.EVENT));\n    } else if (eventFilters !\u003d null \u0026\u0026\n        !eventFilters.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain EVENTS, we still need to\n      // have a filter to fetch some of the column qualifiers on the basis of\n      // event filters specified. Event filters will then be matched after\n      // fetching rows from HBase.\n      Set\u003cString\u003e eventCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.EVENT, eventCols));\n    }\n    return infoFamilyColsFilter;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Add filters for each column in entity table.\n    updateFixedColumns(infoFamilyColsFilter);\n    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n    // If INFO field has to be retrieved, add a filter for fetching columns\n    // with INFO column prefix.\n    if (hasField(fieldsToRetrieve, Field.INFO)) {\n      infoFamilyColsFilter\n          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.INFO));\n    }\n    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n      // If RELATES_TO field has to be retrieved, add a filter for fetching\n      // columns with RELATES_TO column prefix.\n      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n          .createHBaseQualifierFilter(CompareOp.EQUAL,\n              EntityColumnPrefix.RELATES_TO));\n    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain RELATES_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // relatesTo filters are specified. relatesTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e relatesToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.RELATES_TO, relatesToCols));\n    }\n    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n      // columns with IS_RELATED_TO column prefix.\n      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n          .createHBaseQualifierFilter(CompareOp.EQUAL,\n              EntityColumnPrefix.IS_RELATED_TO));\n    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // isRelatedTo filters are specified. isRelatedTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e isRelatedToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n    }\n    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n      // If EVENTS field has to be retrieved, add a filter for fetching columns\n      // with EVENT column prefix.\n      infoFamilyColsFilter\n          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.EVENT));\n    } else if (eventFilters !\u003d null \u0026\u0026\n        !eventFilters.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain EVENTS, we still need to\n      // have a filter to fetch some of the column qualifiers on the basis of\n      // event filters specified. Event filters will then be matched after\n      // fetching rows from HBase.\n      Set\u003cString\u003e eventCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.EVENT, eventCols));\n    }\n    return infoFamilyColsFilter;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,66 @@\n-  private FilterList createFilterListForColsOfInfoFamily()\n-      throws IOException {\n+  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n     FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n     // Add filters for each column in entity table.\n     updateFixedColumns(infoFamilyColsFilter);\n     EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n     // If INFO field has to be retrieved, add a filter for fetching columns\n     // with INFO column prefix.\n-    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.INFO)) {\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createHBaseQualifierFilter(\n+    if (hasField(fieldsToRetrieve, Field.INFO)) {\n+      infoFamilyColsFilter\n+          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n               CompareOp.EQUAL, EntityColumnPrefix.INFO));\n     }\n     TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n-    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n+    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n       // If RELATES_TO field has to be retrieved, add a filter for fetching\n       // columns with RELATES_TO column prefix.\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createHBaseQualifierFilter(\n-              CompareOp.EQUAL, EntityColumnPrefix.RELATES_TO));\n+      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n+          .createHBaseQualifierFilter(CompareOp.EQUAL,\n+              EntityColumnPrefix.RELATES_TO));\n     } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n       // Even if fields to retrieve does not contain RELATES_TO, we still\n       // need to have a filter to fetch some of the column qualifiers if\n       // relatesTo filters are specified. relatesTo filters will then be\n       // matched after fetching rows from HBase.\n       Set\u003cString\u003e relatesToCols \u003d\n           TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n-              EntityColumnPrefix.RELATES_TO, relatesToCols));\n+      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n+          EntityColumnPrefix.RELATES_TO, relatesToCols));\n     }\n     TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n-    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n+    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n       // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n       // columns with IS_RELATED_TO column prefix.\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createHBaseQualifierFilter(\n-              CompareOp.EQUAL, EntityColumnPrefix.IS_RELATED_TO));\n+      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n+          .createHBaseQualifierFilter(CompareOp.EQUAL,\n+              EntityColumnPrefix.IS_RELATED_TO));\n     } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n       // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n       // need to have a filter to fetch some of the column qualifiers if\n       // isRelatedTo filters are specified. isRelatedTo filters will then be\n       // matched after fetching rows from HBase.\n       Set\u003cString\u003e isRelatedToCols \u003d\n           TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n-              EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n+      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n+          EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n     }\n     TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n-    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.EVENTS)) {\n+    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n       // If EVENTS field has to be retrieved, add a filter for fetching columns\n       // with EVENT column prefix.\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createHBaseQualifierFilter(\n+      infoFamilyColsFilter\n+          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n               CompareOp.EQUAL, EntityColumnPrefix.EVENT));\n-    } else if (eventFilters !\u003d null \u0026\u0026 !eventFilters.getFilterList().isEmpty()){\n+    } else if (eventFilters !\u003d null \u0026\u0026\n+        !eventFilters.getFilterList().isEmpty()) {\n       // Even if fields to retrieve does not contain EVENTS, we still need to\n       // have a filter to fetch some of the column qualifiers on the basis of\n       // event filters specified. Event filters will then be matched after\n       // fetching rows from HBase.\n       Set\u003cString\u003e eventCols \u003d\n           TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n-      infoFamilyColsFilter.addFilter(\n-          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n-              EntityColumnPrefix.EVENT, eventCols));\n+      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n+          EntityColumnPrefix.EVENT, eventCols));\n     }\n     return infoFamilyColsFilter;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FilterList createFilterListForColsOfInfoFamily() throws IOException {\n    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Add filters for each column in entity table.\n    updateFixedColumns(infoFamilyColsFilter);\n    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n    // If INFO field has to be retrieved, add a filter for fetching columns\n    // with INFO column prefix.\n    if (hasField(fieldsToRetrieve, Field.INFO)) {\n      infoFamilyColsFilter\n          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.INFO));\n    }\n    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n    if (hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n      // If RELATES_TO field has to be retrieved, add a filter for fetching\n      // columns with RELATES_TO column prefix.\n      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n          .createHBaseQualifierFilter(CompareOp.EQUAL,\n              EntityColumnPrefix.RELATES_TO));\n    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain RELATES_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // relatesTo filters are specified. relatesTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e relatesToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.RELATES_TO, relatesToCols));\n    }\n    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n    if (hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n      // columns with IS_RELATED_TO column prefix.\n      infoFamilyColsFilter.addFilter(TimelineFilterUtils\n          .createHBaseQualifierFilter(CompareOp.EQUAL,\n              EntityColumnPrefix.IS_RELATED_TO));\n    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // isRelatedTo filters are specified. isRelatedTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e isRelatedToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n    }\n    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n    if (hasField(fieldsToRetrieve, Field.EVENTS)) {\n      // If EVENTS field has to be retrieved, add a filter for fetching columns\n      // with EVENT column prefix.\n      infoFamilyColsFilter\n          .addFilter(TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.EVENT));\n    } else if (eventFilters !\u003d null \u0026\u0026\n        !eventFilters.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain EVENTS, we still need to\n      // have a filter to fetch some of the column qualifiers on the basis of\n      // event filters specified. Event filters will then be matched after\n      // fetching rows from HBase.\n      Set\u003cString\u003e eventCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n      infoFamilyColsFilter.addFilter(createFiltersFromColumnQualifiers(\n          EntityColumnPrefix.EVENT, eventCols));\n    }\n    return infoFamilyColsFilter;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {}
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,69 @@\n+  private FilterList createFilterListForColsOfInfoFamily()\n+      throws IOException {\n+    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n+    // Add filters for each column in entity table.\n+    updateFixedColumns(infoFamilyColsFilter);\n+    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n+    // If INFO field has to be retrieved, add a filter for fetching columns\n+    // with INFO column prefix.\n+    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.INFO)) {\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(\n+              CompareOp.EQUAL, EntityColumnPrefix.INFO));\n+    }\n+    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n+    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n+      // If RELATES_TO field has to be retrieved, add a filter for fetching\n+      // columns with RELATES_TO column prefix.\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(\n+              CompareOp.EQUAL, EntityColumnPrefix.RELATES_TO));\n+    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n+      // Even if fields to retrieve does not contain RELATES_TO, we still\n+      // need to have a filter to fetch some of the column qualifiers if\n+      // relatesTo filters are specified. relatesTo filters will then be\n+      // matched after fetching rows from HBase.\n+      Set\u003cString\u003e relatesToCols \u003d\n+          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n+              EntityColumnPrefix.RELATES_TO, relatesToCols));\n+    }\n+    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n+    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n+      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n+      // columns with IS_RELATED_TO column prefix.\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(\n+              CompareOp.EQUAL, EntityColumnPrefix.IS_RELATED_TO));\n+    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n+      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n+      // need to have a filter to fetch some of the column qualifiers if\n+      // isRelatedTo filters are specified. isRelatedTo filters will then be\n+      // matched after fetching rows from HBase.\n+      Set\u003cString\u003e isRelatedToCols \u003d\n+          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n+              EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n+    }\n+    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n+    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.EVENTS)) {\n+      // If EVENTS field has to be retrieved, add a filter for fetching columns\n+      // with EVENT column prefix.\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createHBaseQualifierFilter(\n+              CompareOp.EQUAL, EntityColumnPrefix.EVENT));\n+    } else if (eventFilters !\u003d null \u0026\u0026 !eventFilters.getFilterList().isEmpty()){\n+      // Even if fields to retrieve does not contain EVENTS, we still need to\n+      // have a filter to fetch some of the column qualifiers on the basis of\n+      // event filters specified. Event filters will then be matched after\n+      // fetching rows from HBase.\n+      Set\u003cString\u003e eventCols \u003d\n+          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n+      infoFamilyColsFilter.addFilter(\n+          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n+              EntityColumnPrefix.EVENT, eventCols));\n+    }\n+    return infoFamilyColsFilter;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FilterList createFilterListForColsOfInfoFamily()\n      throws IOException {\n    FilterList infoFamilyColsFilter \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Add filters for each column in entity table.\n    updateFixedColumns(infoFamilyColsFilter);\n    EnumSet\u003cField\u003e fieldsToRetrieve \u003d getDataToRetrieve().getFieldsToRetrieve();\n    // If INFO field has to be retrieved, add a filter for fetching columns\n    // with INFO column prefix.\n    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.INFO)) {\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.INFO));\n    }\n    TimelineFilterList relatesTo \u003d getFilters().getRelatesTo();\n    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.RELATES_TO)) {\n      // If RELATES_TO field has to be retrieved, add a filter for fetching\n      // columns with RELATES_TO column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.RELATES_TO));\n    } else if (relatesTo !\u003d null \u0026\u0026 !relatesTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain RELATES_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // relatesTo filters are specified. relatesTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e relatesToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(relatesTo);\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n              EntityColumnPrefix.RELATES_TO, relatesToCols));\n    }\n    TimelineFilterList isRelatedTo \u003d getFilters().getIsRelatedTo();\n    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.IS_RELATED_TO)) {\n      // If IS_RELATED_TO field has to be retrieved, add a filter for fetching\n      // columns with IS_RELATED_TO column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.IS_RELATED_TO));\n    } else if (isRelatedTo !\u003d null \u0026\u0026 !isRelatedTo.getFilterList().isEmpty()) {\n      // Even if fields to retrieve does not contain IS_RELATED_TO, we still\n      // need to have a filter to fetch some of the column qualifiers if\n      // isRelatedTo filters are specified. isRelatedTo filters will then be\n      // matched after fetching rows from HBase.\n      Set\u003cString\u003e isRelatedToCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(isRelatedTo);\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n              EntityColumnPrefix.IS_RELATED_TO, isRelatedToCols));\n    }\n    TimelineFilterList eventFilters \u003d getFilters().getEventFilters();\n    if (TimelineStorageUtils.hasField(fieldsToRetrieve, Field.EVENTS)) {\n      // If EVENTS field has to be retrieved, add a filter for fetching columns\n      // with EVENT column prefix.\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createHBaseQualifierFilter(\n              CompareOp.EQUAL, EntityColumnPrefix.EVENT));\n    } else if (eventFilters !\u003d null \u0026\u0026 !eventFilters.getFilterList().isEmpty()){\n      // Even if fields to retrieve does not contain EVENTS, we still need to\n      // have a filter to fetch some of the column qualifiers on the basis of\n      // event filters specified. Event filters will then be matched after\n      // fetching rows from HBase.\n      Set\u003cString\u003e eventCols \u003d\n          TimelineFilterUtils.fetchColumnsFromFilterList(eventFilters);\n      infoFamilyColsFilter.addFilter(\n          TimelineFilterUtils.createFiltersFromColumnQualifiers(\n              EntityColumnPrefix.EVENT, eventCols));\n    }\n    return infoFamilyColsFilter;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
    }
  }
}