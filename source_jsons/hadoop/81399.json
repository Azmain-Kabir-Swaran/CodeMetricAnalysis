{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SocketOutputStream.java",
  "functionName": "transferToFully",
  "functionId": "transferToFully___fileCh-FileChannel__position-long__count-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java",
  "functionStartLine": 259,
  "functionEndLine": 262,
  "numCommitsSeen": 12,
  "timeTaken": 824,
  "changeHistory": [
    "b8389e4c73b70e454525b8adcd5b0a52ae5d1db1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "b8389e4c73b70e454525b8adcd5b0a52ae5d1db1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b8389e4c73b70e454525b8adcd5b0a52ae5d1db1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3343. Improve metrics for DN read latency. Contributed by Andrew Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1356928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/12 1:45 PM",
      "commitName": "b8389e4c73b70e454525b8adcd5b0a52ae5d1db1",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 313.85,
      "commitsBetweenForRepo": 2129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,4 @@\n-  public void transferToFully(FileChannel fileCh, long position, int count) \n-                              throws IOException {\n-    \n-    while (count \u003e 0) {\n-      /* \n-       * Ideally we should wait after transferTo returns 0. But because of\n-       * a bug in JRE on Linux (http://bugs.sun.com/view_bug.do?bug_id\u003d5103988),\n-       * which throws an exception instead of returning 0, we wait for the\n-       * channel to be writable before writing to it. If you ever see \n-       * IOException with message \"Resource temporarily unavailable\" \n-       * thrown here, please let us know.\n-       * \n-       * Once we move to JAVA SE 7, wait should be moved to correct place.\n-       */\n-      waitForWritable();\n-      int nTransfered \u003d (int) fileCh.transferTo(position, count, getChannel());\n-      \n-      if (nTransfered \u003d\u003d 0) {\n-        //check if end of file is reached.\n-        if (position \u003e\u003d fileCh.size()) {\n-          throw new EOFException(\"EOF Reached. file size is \" + fileCh.size() + \n-                                 \" and \" + count + \" more bytes left to be \" +\n-                                 \"transfered.\");\n-        }\n-        //otherwise assume the socket is full.\n-        //waitForWritable(); // see comment above.\n-      } else if (nTransfered \u003c 0) {\n-        throw new IOException(\"Unexpected return of \" + nTransfered + \n-                              \" from transferTo()\");\n-      } else {\n-        position +\u003d nTransfered;\n-        count -\u003d nTransfered;\n-      }\n-    }\n-  }  \n\\ No newline at end of file\n+  public void transferToFully(FileChannel fileCh, long position, int count)\n+      throws IOException {\n+    transferToFully(fileCh, position, count, null, null);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void transferToFully(FileChannel fileCh, long position, int count)\n      throws IOException {\n    transferToFully(fileCh, position, count, null, null);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void transferToFully(FileChannel fileCh, long position, int count) \n                              throws IOException {\n    \n    while (count \u003e 0) {\n      /* \n       * Ideally we should wait after transferTo returns 0. But because of\n       * a bug in JRE on Linux (http://bugs.sun.com/view_bug.do?bug_id\u003d5103988),\n       * which throws an exception instead of returning 0, we wait for the\n       * channel to be writable before writing to it. If you ever see \n       * IOException with message \"Resource temporarily unavailable\" \n       * thrown here, please let us know.\n       * \n       * Once we move to JAVA SE 7, wait should be moved to correct place.\n       */\n      waitForWritable();\n      int nTransfered \u003d (int) fileCh.transferTo(position, count, getChannel());\n      \n      if (nTransfered \u003d\u003d 0) {\n        //check if end of file is reached.\n        if (position \u003e\u003d fileCh.size()) {\n          throw new EOFException(\"EOF Reached. file size is \" + fileCh.size() + \n                                 \" and \" + count + \" more bytes left to be \" +\n                                 \"transfered.\");\n        }\n        //otherwise assume the socket is full.\n        //waitForWritable(); // see comment above.\n      } else if (nTransfered \u003c 0) {\n        throw new IOException(\"Unexpected return of \" + nTransfered + \n                              \" from transferTo()\");\n      } else {\n        position +\u003d nTransfered;\n        count -\u003d nTransfered;\n      }\n    }\n  }  ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void transferToFully(FileChannel fileCh, long position, int count) \n                              throws IOException {\n    \n    while (count \u003e 0) {\n      /* \n       * Ideally we should wait after transferTo returns 0. But because of\n       * a bug in JRE on Linux (http://bugs.sun.com/view_bug.do?bug_id\u003d5103988),\n       * which throws an exception instead of returning 0, we wait for the\n       * channel to be writable before writing to it. If you ever see \n       * IOException with message \"Resource temporarily unavailable\" \n       * thrown here, please let us know.\n       * \n       * Once we move to JAVA SE 7, wait should be moved to correct place.\n       */\n      waitForWritable();\n      int nTransfered \u003d (int) fileCh.transferTo(position, count, getChannel());\n      \n      if (nTransfered \u003d\u003d 0) {\n        //check if end of file is reached.\n        if (position \u003e\u003d fileCh.size()) {\n          throw new EOFException(\"EOF Reached. file size is \" + fileCh.size() + \n                                 \" and \" + count + \" more bytes left to be \" +\n                                 \"transfered.\");\n        }\n        //otherwise assume the socket is full.\n        //waitForWritable(); // see comment above.\n      } else if (nTransfered \u003c 0) {\n        throw new IOException(\"Unexpected return of \" + nTransfered + \n                              \" from transferTo()\");\n      } else {\n        position +\u003d nTransfered;\n        count -\u003d nTransfered;\n      }\n    }\n  }  ",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/SocketOutputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketOutputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void transferToFully(FileChannel fileCh, long position, int count) \n                              throws IOException {\n    \n    while (count \u003e 0) {\n      /* \n       * Ideally we should wait after transferTo returns 0. But because of\n       * a bug in JRE on Linux (http://bugs.sun.com/view_bug.do?bug_id\u003d5103988),\n       * which throws an exception instead of returning 0, we wait for the\n       * channel to be writable before writing to it. If you ever see \n       * IOException with message \"Resource temporarily unavailable\" \n       * thrown here, please let us know.\n       * \n       * Once we move to JAVA SE 7, wait should be moved to correct place.\n       */\n      waitForWritable();\n      int nTransfered \u003d (int) fileCh.transferTo(position, count, getChannel());\n      \n      if (nTransfered \u003d\u003d 0) {\n        //check if end of file is reached.\n        if (position \u003e\u003d fileCh.size()) {\n          throw new EOFException(\"EOF Reached. file size is \" + fileCh.size() + \n                                 \" and \" + count + \" more bytes left to be \" +\n                                 \"transfered.\");\n        }\n        //otherwise assume the socket is full.\n        //waitForWritable(); // see comment above.\n      } else if (nTransfered \u003c 0) {\n        throw new IOException(\"Unexpected return of \" + nTransfered + \n                              \" from transferTo()\");\n      } else {\n        position +\u003d nTransfered;\n        count -\u003d nTransfered;\n      }\n    }\n  }  ",
      "path": "common/src/java/org/apache/hadoop/net/SocketOutputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/SocketOutputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/net/SocketOutputStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,35 @@\n+  public void transferToFully(FileChannel fileCh, long position, int count) \n+                              throws IOException {\n+    \n+    while (count \u003e 0) {\n+      /* \n+       * Ideally we should wait after transferTo returns 0. But because of\n+       * a bug in JRE on Linux (http://bugs.sun.com/view_bug.do?bug_id\u003d5103988),\n+       * which throws an exception instead of returning 0, we wait for the\n+       * channel to be writable before writing to it. If you ever see \n+       * IOException with message \"Resource temporarily unavailable\" \n+       * thrown here, please let us know.\n+       * \n+       * Once we move to JAVA SE 7, wait should be moved to correct place.\n+       */\n+      waitForWritable();\n+      int nTransfered \u003d (int) fileCh.transferTo(position, count, getChannel());\n+      \n+      if (nTransfered \u003d\u003d 0) {\n+        //check if end of file is reached.\n+        if (position \u003e\u003d fileCh.size()) {\n+          throw new EOFException(\"EOF Reached. file size is \" + fileCh.size() + \n+                                 \" and \" + count + \" more bytes left to be \" +\n+                                 \"transfered.\");\n+        }\n+        //otherwise assume the socket is full.\n+        //waitForWritable(); // see comment above.\n+      } else if (nTransfered \u003c 0) {\n+        throw new IOException(\"Unexpected return of \" + nTransfered + \n+                              \" from transferTo()\");\n+      } else {\n+        position +\u003d nTransfered;\n+        count -\u003d nTransfered;\n+      }\n+    }\n+  }  \n\\ No newline at end of file\n",
      "actualSource": "  public void transferToFully(FileChannel fileCh, long position, int count) \n                              throws IOException {\n    \n    while (count \u003e 0) {\n      /* \n       * Ideally we should wait after transferTo returns 0. But because of\n       * a bug in JRE on Linux (http://bugs.sun.com/view_bug.do?bug_id\u003d5103988),\n       * which throws an exception instead of returning 0, we wait for the\n       * channel to be writable before writing to it. If you ever see \n       * IOException with message \"Resource temporarily unavailable\" \n       * thrown here, please let us know.\n       * \n       * Once we move to JAVA SE 7, wait should be moved to correct place.\n       */\n      waitForWritable();\n      int nTransfered \u003d (int) fileCh.transferTo(position, count, getChannel());\n      \n      if (nTransfered \u003d\u003d 0) {\n        //check if end of file is reached.\n        if (position \u003e\u003d fileCh.size()) {\n          throw new EOFException(\"EOF Reached. file size is \" + fileCh.size() + \n                                 \" and \" + count + \" more bytes left to be \" +\n                                 \"transfered.\");\n        }\n        //otherwise assume the socket is full.\n        //waitForWritable(); // see comment above.\n      } else if (nTransfered \u003c 0) {\n        throw new IOException(\"Unexpected return of \" + nTransfered + \n                              \" from transferTo()\");\n      } else {\n        position +\u003d nTransfered;\n        count -\u003d nTransfered;\n      }\n    }\n  }  ",
      "path": "src/java/org/apache/hadoop/net/SocketOutputStream.java"
    }
  }
}