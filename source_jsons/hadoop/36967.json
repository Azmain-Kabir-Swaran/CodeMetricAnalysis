{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebAppUtil.java",
  "functionName": "setupSecurityAndFilters",
  "functionId": "setupSecurityAndFilters___conf-Configuration__rmDTSecretManager-RMDelegationTokenSecretManager",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
  "functionStartLine": 100,
  "functionEndLine": 180,
  "numCommitsSeen": 5,
  "timeTaken": 1318,
  "changeHistory": [
    "294695dd57cb75f2756a31a54264bdd37b32bb01",
    "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a"
  ],
  "changeHistoryShort": {
    "294695dd57cb75f2756a31a54264bdd37b32bb01": "Ybodychange",
    "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "294695dd57cb75f2756a31a54264bdd37b32bb01": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16314.  Make sure all web end points are covered by the same authentication filter.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "05/06/19 3:55 PM",
      "commitName": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 92.74,
      "commitsBetweenForRepo": 612,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,81 @@\n   public static void setupSecurityAndFilters(Configuration conf,\n       RMDelegationTokenSecretManager rmDTSecretManager) {\n \n     boolean enableCorsFilter \u003d\n         conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n     boolean useYarnAuthenticationFilter \u003d conf.getBoolean(\n         YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n         YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d conf.getClasses(filterInitializerConfKey);\n \n     // setup CORS\n     if (enableCorsFilter) {\n       conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName()\n             .equals(AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName()\n             .equals(RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\")\n               .equals(KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName()\n               .equals(AuthenticationFilterInitializer.class.getName())) {\n             if (!hasRMAuthFilterInitializer) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n+\n+        target.remove(ProxyUserAuthenticationFilterInitializer.class.getName());\n+\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n         RMAuthenticationFilter\n             .setDelegationTokenSecretManager(rmDTSecretManager);\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not\n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n             RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n             RMAuthenticationFilterInitializer.class.getName() + \",\"\n                 + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setupSecurityAndFilters(Configuration conf,\n      RMDelegationTokenSecretManager rmDTSecretManager) {\n\n    boolean enableCorsFilter \u003d\n        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n    boolean useYarnAuthenticationFilter \u003d conf.getBoolean(\n        YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d conf.getClasses(filterInitializerConfKey);\n\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName()\n            .equals(AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName()\n            .equals(RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\")\n              .equals(KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName()\n              .equals(AuthenticationFilterInitializer.class.getName())) {\n            if (!hasRMAuthFilterInitializer) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n\n        target.remove(ProxyUserAuthenticationFilterInitializer.class.getName());\n\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n            .setDelegationTokenSecretManager(rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not\n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n            RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n            RMAuthenticationFilterInitializer.class.getName() + \",\"\n                + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
      "extendedDetails": {}
    },
    "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6587. Refactor of ResourceManager#startWebApp in a Util class. (Giovanni Matteo Fumarola via curino).\n",
      "commitDate": "12/05/17 5:48 PM",
      "commitName": "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,78 @@\n+  public static void setupSecurityAndFilters(Configuration conf,\n+      RMDelegationTokenSecretManager rmDTSecretManager) {\n+\n+    boolean enableCorsFilter \u003d\n+        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n+            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n+    boolean useYarnAuthenticationFilter \u003d conf.getBoolean(\n+        YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n+        YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n+    String authPrefix \u003d \"hadoop.http.authentication.\";\n+    String authTypeKey \u003d authPrefix + \"type\";\n+    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n+    String actualInitializers \u003d \"\";\n+    Class\u003c?\u003e[] initializersClasses \u003d conf.getClasses(filterInitializerConfKey);\n+\n+    // setup CORS\n+    if (enableCorsFilter) {\n+      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n+          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n+    }\n+\n+    boolean hasHadoopAuthFilterInitializer \u003d false;\n+    boolean hasRMAuthFilterInitializer \u003d false;\n+    if (initializersClasses !\u003d null) {\n+      for (Class\u003c?\u003e initializer : initializersClasses) {\n+        if (initializer.getName()\n+            .equals(AuthenticationFilterInitializer.class.getName())) {\n+          hasHadoopAuthFilterInitializer \u003d true;\n+        }\n+        if (initializer.getName()\n+            .equals(RMAuthenticationFilterInitializer.class.getName())) {\n+          hasRMAuthFilterInitializer \u003d true;\n+        }\n+      }\n+      if (UserGroupInformation.isSecurityEnabled()\n+          \u0026\u0026 useYarnAuthenticationFilter \u0026\u0026 hasHadoopAuthFilterInitializer\n+          \u0026\u0026 conf.get(authTypeKey, \"\")\n+              .equals(KerberosAuthenticationHandler.TYPE)) {\n+        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n+        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n+          if (filterInitializer.getName()\n+              .equals(AuthenticationFilterInitializer.class.getName())) {\n+            if (!hasRMAuthFilterInitializer) {\n+              target.add(RMAuthenticationFilterInitializer.class.getName());\n+            }\n+            continue;\n+          }\n+          target.add(filterInitializer.getName());\n+        }\n+        actualInitializers \u003d StringUtils.join(\",\", target);\n+\n+        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n+            + \" for RM webapp authentication\");\n+        RMAuthenticationFilter\n+            .setDelegationTokenSecretManager(rmDTSecretManager);\n+        conf.set(filterInitializerConfKey, actualInitializers);\n+      }\n+    }\n+\n+    // if security is not enabled and the default filter initializer has not\n+    // been set, set the initializer to include the\n+    // RMAuthenticationFilterInitializer which in turn will set up the simple\n+    // auth filter.\n+\n+    String initializers \u003d conf.get(filterInitializerConfKey);\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n+        conf.set(filterInitializerConfKey,\n+            RMAuthenticationFilterInitializer.class.getName());\n+        conf.set(authTypeKey, \"simple\");\n+      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n+        conf.set(filterInitializerConfKey,\n+            RMAuthenticationFilterInitializer.class.getName() + \",\"\n+                + initializers);\n+        conf.set(authTypeKey, \"simple\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setupSecurityAndFilters(Configuration conf,\n      RMDelegationTokenSecretManager rmDTSecretManager) {\n\n    boolean enableCorsFilter \u003d\n        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n    boolean useYarnAuthenticationFilter \u003d conf.getBoolean(\n        YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d conf.getClasses(filterInitializerConfKey);\n\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName()\n            .equals(AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName()\n            .equals(RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\")\n              .equals(KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName()\n              .equals(AuthenticationFilterInitializer.class.getName())) {\n            if (!hasRMAuthFilterInitializer) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n            .setDelegationTokenSecretManager(rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not\n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n            RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n            RMAuthenticationFilterInitializer.class.getName() + \",\"\n                + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java"
    }
  }
}