{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "calculateSharesForTwoMandatoryResources",
  "functionId": "calculateSharesForTwoMandatoryResources___clusterRes-ResourceInformation[]__first-Resource__second-Resource__firstShares-double[]__secondShares-double[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 214,
  "functionEndLine": 248,
  "numCommitsSeen": 59,
  "timeTaken": 1859,
  "changeHistory": [
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "a0030c8c6f5489d8285632a651394b2b2320255c"
  ],
  "changeHistoryShort": {
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ymultichange(Yrename,Ybodychange)",
    "a0030c8c6f5489d8285632a651394b2b2320255c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,35 @@\n-  private int calculateSharesForMandatoryResources(\n+  private int calculateSharesForTwoMandatoryResources(\n       ResourceInformation[] clusterRes, Resource first, Resource second,\n       double[] firstShares, double[] secondShares) {\n     ResourceInformation[] firstRes \u003d first.getResources();\n     ResourceInformation[] secondRes \u003d second.getResources();\n+    firstShares[0] \u003d calculateShare(clusterRes[0], firstRes[0]);\n+    secondShares[0] \u003d calculateShare(clusterRes[0], secondRes[0]);\n+    firstShares[1] \u003d calculateShare(clusterRes[1], firstRes[1]);\n+    secondShares[1] \u003d calculateShare(clusterRes[1], secondRes[1]);\n+\n     int firstDom \u003d 0;\n+    int firstSub \u003d 1;\n+    if (firstShares[1] \u003e firstShares[0]) {\n+      firstDom \u003d 1;\n+      firstSub \u003d 0;\n+    }\n     int secondDom \u003d 0;\n-    int firstSub \u003d 0;\n-    int secondSub \u003d 0;\n-\n-    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n-      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n-      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n-\n-      if (firstShares[i] \u003e firstShares[firstDom]) {\n-        firstDom \u003d i;\n-      }\n-\n-      if (firstShares[i] \u003c firstShares[firstSub]) {\n-        firstSub \u003d i;\n-      }\n-\n-      if (secondShares[i] \u003e secondShares[secondDom]) {\n-        secondDom \u003d i;\n-      }\n-\n-      if (secondShares[i] \u003c secondShares[secondSub]) {\n-        secondSub \u003d i;\n-      }\n+    int secondSub \u003d 1;\n+    if (secondShares[1] \u003e secondShares[0]) {\n+      secondDom \u003d 1;\n+      secondSub \u003d 0;\n     }\n \n     if (firstShares[firstDom] \u003e secondShares[secondDom]) {\n       return 1;\n     } else if (firstShares[firstDom] \u003c secondShares[secondDom]) {\n       return -1;\n     } else if (firstShares[firstSub] \u003e secondShares[secondSub]) {\n       return 1;\n     } else if (firstShares[firstSub] \u003c secondShares[secondSub]) {\n       return -1;\n     } else {\n       return 0;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int calculateSharesForTwoMandatoryResources(\n      ResourceInformation[] clusterRes, Resource first, Resource second,\n      double[] firstShares, double[] secondShares) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n    firstShares[0] \u003d calculateShare(clusterRes[0], firstRes[0]);\n    secondShares[0] \u003d calculateShare(clusterRes[0], secondRes[0]);\n    firstShares[1] \u003d calculateShare(clusterRes[1], firstRes[1]);\n    secondShares[1] \u003d calculateShare(clusterRes[1], secondRes[1]);\n\n    int firstDom \u003d 0;\n    int firstSub \u003d 1;\n    if (firstShares[1] \u003e firstShares[0]) {\n      firstDom \u003d 1;\n      firstSub \u003d 0;\n    }\n    int secondDom \u003d 0;\n    int secondSub \u003d 1;\n    if (secondShares[1] \u003e secondShares[0]) {\n      secondDom \u003d 1;\n      secondSub \u003d 0;\n    }\n\n    if (firstShares[firstDom] \u003e secondShares[secondDom]) {\n      return 1;\n    } else if (firstShares[firstDom] \u003c secondShares[secondDom]) {\n      return -1;\n    } else if (firstShares[firstSub] \u003e secondShares[secondSub]) {\n      return 1;\n    } else if (firstShares[firstSub] \u003c secondShares[secondSub]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
          "extendedDetails": {
            "oldValue": "calculateSharesForMandatoryResources",
            "newValue": "calculateSharesForTwoMandatoryResources"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,35 @@\n-  private int calculateSharesForMandatoryResources(\n+  private int calculateSharesForTwoMandatoryResources(\n       ResourceInformation[] clusterRes, Resource first, Resource second,\n       double[] firstShares, double[] secondShares) {\n     ResourceInformation[] firstRes \u003d first.getResources();\n     ResourceInformation[] secondRes \u003d second.getResources();\n+    firstShares[0] \u003d calculateShare(clusterRes[0], firstRes[0]);\n+    secondShares[0] \u003d calculateShare(clusterRes[0], secondRes[0]);\n+    firstShares[1] \u003d calculateShare(clusterRes[1], firstRes[1]);\n+    secondShares[1] \u003d calculateShare(clusterRes[1], secondRes[1]);\n+\n     int firstDom \u003d 0;\n+    int firstSub \u003d 1;\n+    if (firstShares[1] \u003e firstShares[0]) {\n+      firstDom \u003d 1;\n+      firstSub \u003d 0;\n+    }\n     int secondDom \u003d 0;\n-    int firstSub \u003d 0;\n-    int secondSub \u003d 0;\n-\n-    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n-      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n-      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n-\n-      if (firstShares[i] \u003e firstShares[firstDom]) {\n-        firstDom \u003d i;\n-      }\n-\n-      if (firstShares[i] \u003c firstShares[firstSub]) {\n-        firstSub \u003d i;\n-      }\n-\n-      if (secondShares[i] \u003e secondShares[secondDom]) {\n-        secondDom \u003d i;\n-      }\n-\n-      if (secondShares[i] \u003c secondShares[secondSub]) {\n-        secondSub \u003d i;\n-      }\n+    int secondSub \u003d 1;\n+    if (secondShares[1] \u003e secondShares[0]) {\n+      secondDom \u003d 1;\n+      secondSub \u003d 0;\n     }\n \n     if (firstShares[firstDom] \u003e secondShares[secondDom]) {\n       return 1;\n     } else if (firstShares[firstDom] \u003c secondShares[secondDom]) {\n       return -1;\n     } else if (firstShares[firstSub] \u003e secondShares[secondSub]) {\n       return 1;\n     } else if (firstShares[firstSub] \u003c secondShares[secondSub]) {\n       return -1;\n     } else {\n       return 0;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int calculateSharesForTwoMandatoryResources(\n      ResourceInformation[] clusterRes, Resource first, Resource second,\n      double[] firstShares, double[] secondShares) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n    firstShares[0] \u003d calculateShare(clusterRes[0], firstRes[0]);\n    secondShares[0] \u003d calculateShare(clusterRes[0], secondRes[0]);\n    firstShares[1] \u003d calculateShare(clusterRes[1], firstRes[1]);\n    secondShares[1] \u003d calculateShare(clusterRes[1], secondRes[1]);\n\n    int firstDom \u003d 0;\n    int firstSub \u003d 1;\n    if (firstShares[1] \u003e firstShares[0]) {\n      firstDom \u003d 1;\n      firstSub \u003d 0;\n    }\n    int secondDom \u003d 0;\n    int secondSub \u003d 1;\n    if (secondShares[1] \u003e secondShares[0]) {\n      secondDom \u003d 1;\n      secondSub \u003d 0;\n    }\n\n    if (firstShares[firstDom] \u003e secondShares[secondDom]) {\n      return 1;\n    } else if (firstShares[firstDom] \u003c secondShares[secondDom]) {\n      return -1;\n    } else if (firstShares[firstSub] \u003e secondShares[secondSub]) {\n      return 1;\n    } else if (firstShares[firstSub] \u003c secondShares[secondSub]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
          "extendedDetails": {}
        }
      ]
    },
    "a0030c8c6f5489d8285632a651394b2b2320255c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6610. [YARN-3926] DominantResourceCalculator#getResourceAsValue dominant param is updated to handle multiple resources. Contributed by Daniel Templeton.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "a0030c8c6f5489d8285632a651394b2b2320255c",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,43 @@\n+  private int calculateSharesForMandatoryResources(\n+      ResourceInformation[] clusterRes, Resource first, Resource second,\n+      double[] firstShares, double[] secondShares) {\n+    ResourceInformation[] firstRes \u003d first.getResources();\n+    ResourceInformation[] secondRes \u003d second.getResources();\n+    int firstDom \u003d 0;\n+    int secondDom \u003d 0;\n+    int firstSub \u003d 0;\n+    int secondSub \u003d 0;\n+\n+    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n+      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n+      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n+\n+      if (firstShares[i] \u003e firstShares[firstDom]) {\n+        firstDom \u003d i;\n+      }\n+\n+      if (firstShares[i] \u003c firstShares[firstSub]) {\n+        firstSub \u003d i;\n+      }\n+\n+      if (secondShares[i] \u003e secondShares[secondDom]) {\n+        secondDom \u003d i;\n+      }\n+\n+      if (secondShares[i] \u003c secondShares[secondSub]) {\n+        secondSub \u003d i;\n+      }\n+    }\n+\n+    if (firstShares[firstDom] \u003e secondShares[secondDom]) {\n+      return 1;\n+    } else if (firstShares[firstDom] \u003c secondShares[secondDom]) {\n+      return -1;\n+    } else if (firstShares[firstSub] \u003e secondShares[secondSub]) {\n+      return 1;\n+    } else if (firstShares[firstSub] \u003c secondShares[secondSub]) {\n+      return -1;\n+    } else {\n+      return 0;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int calculateSharesForMandatoryResources(\n      ResourceInformation[] clusterRes, Resource first, Resource second,\n      double[] firstShares, double[] secondShares) {\n    ResourceInformation[] firstRes \u003d first.getResources();\n    ResourceInformation[] secondRes \u003d second.getResources();\n    int firstDom \u003d 0;\n    int secondDom \u003d 0;\n    int firstSub \u003d 0;\n    int secondSub \u003d 0;\n\n    for (int i \u003d 0; i \u003c clusterRes.length; i++) {\n      firstShares[i] \u003d calculateShare(clusterRes[i], firstRes[i]);\n      secondShares[i] \u003d calculateShare(clusterRes[i], secondRes[i]);\n\n      if (firstShares[i] \u003e firstShares[firstDom]) {\n        firstDom \u003d i;\n      }\n\n      if (firstShares[i] \u003c firstShares[firstSub]) {\n        firstSub \u003d i;\n      }\n\n      if (secondShares[i] \u003e secondShares[secondDom]) {\n        secondDom \u003d i;\n      }\n\n      if (secondShares[i] \u003c secondShares[secondSub]) {\n        secondSub \u003d i;\n      }\n    }\n\n    if (firstShares[firstDom] \u003e secondShares[secondDom]) {\n      return 1;\n    } else if (firstShares[firstDom] \u003c secondShares[secondDom]) {\n      return -1;\n    } else if (firstShares[firstSub] \u003e secondShares[secondSub]) {\n      return 1;\n    } else if (firstShares[firstSub] \u003c secondShares[secondSub]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}