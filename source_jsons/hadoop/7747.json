{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StartupProgressServlet.java",
  "functionName": "doGet",
  "functionId": "doGet___req-HttpServletRequest__resp-HttpServletResponse",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StartupProgressServlet.java",
  "functionStartLine": 58,
  "functionEndLine": 108,
  "numCommitsSeen": 4,
  "timeTaken": 1915,
  "changeHistory": [
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "049e7d27bea13d4254baccf49401daae820b71df",
    "cf0cf0a6910244d929f40842223e7d0b2c9445e8",
    "19346d8ca6458840d1e2a78786c872bf9d1f038e"
  ],
  "changeHistoryShort": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "049e7d27bea13d4254baccf49401daae820b71df": "Ybodychange",
    "cf0cf0a6910244d929f40842223e7d0b2c9445e8": "Ybodychange",
    "19346d8ca6458840d1e2a78786c872bf9d1f038e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/11/16 6:16 PM",
      "commitNameOld": "049e7d27bea13d4254baccf49401daae820b71df",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 668.81,
      "commitsBetweenForRepo": 5005,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws IOException {\n     resp.setContentType(\"application/json; charset\u003dUTF-8\");\n     StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n       getServletContext());\n     StartupProgressView view \u003d prog.createView();\n     JsonGenerator json \u003d new JsonFactory().createGenerator(resp.getWriter());\n     try {\n       json.writeStartObject();\n       json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n       json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n       json.writeArrayFieldStart(PHASES);\n \n       for (Phase phase: view.getPhases()) {\n         json.writeStartObject();\n         json.writeStringField(NAME, phase.getName());\n         json.writeStringField(DESC, phase.getDescription());\n         json.writeStringField(STATUS, view.getStatus(phase).toString());\n         json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n         json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n         writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n         writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n         json.writeArrayFieldStart(STEPS);\n \n         for (Step step: view.getSteps(phase)) {\n           json.writeStartObject();\n           StepType type \u003d step.getType();\n           if (type !\u003d null) {\n             json.writeStringField(NAME, type.getName());\n             json.writeStringField(DESC, type.getDescription());\n           }\n           json.writeNumberField(COUNT, view.getCount(phase, step));\n           writeStringFieldIfNotNull(json, FILE, step.getFile());\n           writeNumberFieldIfDefined(json, SIZE, step.getSize());\n           json.writeNumberField(TOTAL, view.getTotal(phase, step));\n           json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n             step));\n           json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n           json.writeEndObject();\n         }\n \n         json.writeEndArray();\n         json.writeEndObject();\n       }\n \n       json.writeEndArray();\n       json.writeEndObject();\n     } finally {\n-      IOUtils.cleanup(LOG, json);\n+      IOUtils.cleanupWithLogger(LOG, json);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws IOException {\n    resp.setContentType(\"application/json; charset\u003dUTF-8\");\n    StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n      getServletContext());\n    StartupProgressView view \u003d prog.createView();\n    JsonGenerator json \u003d new JsonFactory().createGenerator(resp.getWriter());\n    try {\n      json.writeStartObject();\n      json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n      json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n      json.writeArrayFieldStart(PHASES);\n\n      for (Phase phase: view.getPhases()) {\n        json.writeStartObject();\n        json.writeStringField(NAME, phase.getName());\n        json.writeStringField(DESC, phase.getDescription());\n        json.writeStringField(STATUS, view.getStatus(phase).toString());\n        json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n        json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n        writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n        writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n        json.writeArrayFieldStart(STEPS);\n\n        for (Step step: view.getSteps(phase)) {\n          json.writeStartObject();\n          StepType type \u003d step.getType();\n          if (type !\u003d null) {\n            json.writeStringField(NAME, type.getName());\n            json.writeStringField(DESC, type.getDescription());\n          }\n          json.writeNumberField(COUNT, view.getCount(phase, step));\n          writeStringFieldIfNotNull(json, FILE, step.getFile());\n          writeNumberFieldIfDefined(json, SIZE, step.getSize());\n          json.writeNumberField(TOTAL, view.getTotal(phase, step));\n          json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n            step));\n          json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n          json.writeEndObject();\n        }\n\n        json.writeEndArray();\n        json.writeEndObject();\n      }\n\n      json.writeEndArray();\n      json.writeEndObject();\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, json);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StartupProgressServlet.java",
      "extendedDetails": {}
    },
    "049e7d27bea13d4254baccf49401daae820b71df": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10970. Update jackson from 1.9.13 to 2.x in hadoop-hdfs.\n",
      "commitDate": "06/11/16 6:16 PM",
      "commitName": "049e7d27bea13d4254baccf49401daae820b71df",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/10/13 1:56 PM",
      "commitNameOld": "cf0cf0a6910244d929f40842223e7d0b2c9445e8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1119.22,
      "commitsBetweenForRepo": 8550,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws IOException {\n     resp.setContentType(\"application/json; charset\u003dUTF-8\");\n     StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n       getServletContext());\n     StartupProgressView view \u003d prog.createView();\n-    JsonGenerator json \u003d new JsonFactory().createJsonGenerator(resp.getWriter());\n+    JsonGenerator json \u003d new JsonFactory().createGenerator(resp.getWriter());\n     try {\n       json.writeStartObject();\n       json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n       json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n       json.writeArrayFieldStart(PHASES);\n \n       for (Phase phase: view.getPhases()) {\n         json.writeStartObject();\n         json.writeStringField(NAME, phase.getName());\n         json.writeStringField(DESC, phase.getDescription());\n         json.writeStringField(STATUS, view.getStatus(phase).toString());\n         json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n         json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n         writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n         writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n         json.writeArrayFieldStart(STEPS);\n \n         for (Step step: view.getSteps(phase)) {\n           json.writeStartObject();\n           StepType type \u003d step.getType();\n           if (type !\u003d null) {\n             json.writeStringField(NAME, type.getName());\n             json.writeStringField(DESC, type.getDescription());\n           }\n           json.writeNumberField(COUNT, view.getCount(phase, step));\n           writeStringFieldIfNotNull(json, FILE, step.getFile());\n           writeNumberFieldIfDefined(json, SIZE, step.getSize());\n           json.writeNumberField(TOTAL, view.getTotal(phase, step));\n           json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n             step));\n           json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n           json.writeEndObject();\n         }\n \n         json.writeEndArray();\n         json.writeEndObject();\n       }\n \n       json.writeEndArray();\n       json.writeEndObject();\n     } finally {\n       IOUtils.cleanup(LOG, json);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws IOException {\n    resp.setContentType(\"application/json; charset\u003dUTF-8\");\n    StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n      getServletContext());\n    StartupProgressView view \u003d prog.createView();\n    JsonGenerator json \u003d new JsonFactory().createGenerator(resp.getWriter());\n    try {\n      json.writeStartObject();\n      json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n      json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n      json.writeArrayFieldStart(PHASES);\n\n      for (Phase phase: view.getPhases()) {\n        json.writeStartObject();\n        json.writeStringField(NAME, phase.getName());\n        json.writeStringField(DESC, phase.getDescription());\n        json.writeStringField(STATUS, view.getStatus(phase).toString());\n        json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n        json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n        writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n        writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n        json.writeArrayFieldStart(STEPS);\n\n        for (Step step: view.getSteps(phase)) {\n          json.writeStartObject();\n          StepType type \u003d step.getType();\n          if (type !\u003d null) {\n            json.writeStringField(NAME, type.getName());\n            json.writeStringField(DESC, type.getDescription());\n          }\n          json.writeNumberField(COUNT, view.getCount(phase, step));\n          writeStringFieldIfNotNull(json, FILE, step.getFile());\n          writeNumberFieldIfDefined(json, SIZE, step.getSize());\n          json.writeNumberField(TOTAL, view.getTotal(phase, step));\n          json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n            step));\n          json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n          json.writeEndObject();\n        }\n\n        json.writeEndArray();\n        json.writeEndObject();\n      }\n\n      json.writeEndArray();\n      json.writeEndObject();\n    } finally {\n      IOUtils.cleanup(LOG, json);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StartupProgressServlet.java",
      "extendedDetails": {}
    },
    "cf0cf0a6910244d929f40842223e7d0b2c9445e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5342. Provide more information in the FSNamesystem JMX interfaces. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1532090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 1:56 PM",
      "commitName": "cf0cf0a6910244d929f40842223e7d0b2c9445e8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/07/13 12:04 PM",
      "commitNameOld": "19346d8ca6458840d1e2a78786c872bf9d1f038e",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 95.08,
      "commitsBetweenForRepo": 582,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,51 @@\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws IOException {\n     resp.setContentType(\"application/json; charset\u003dUTF-8\");\n     StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n       getServletContext());\n     StartupProgressView view \u003d prog.createView();\n     JsonGenerator json \u003d new JsonFactory().createJsonGenerator(resp.getWriter());\n     try {\n       json.writeStartObject();\n       json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n       json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n       json.writeArrayFieldStart(PHASES);\n \n       for (Phase phase: view.getPhases()) {\n         json.writeStartObject();\n         json.writeStringField(NAME, phase.getName());\n+        json.writeStringField(DESC, phase.getDescription());\n         json.writeStringField(STATUS, view.getStatus(phase).toString());\n         json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n         json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n         writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n         writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n         json.writeArrayFieldStart(STEPS);\n \n         for (Step step: view.getSteps(phase)) {\n           json.writeStartObject();\n           StepType type \u003d step.getType();\n-          String name \u003d type !\u003d null ? type.getName() : null;\n-          writeStringFieldIfNotNull(json, NAME, name);\n+          if (type !\u003d null) {\n+            json.writeStringField(NAME, type.getName());\n+            json.writeStringField(DESC, type.getDescription());\n+          }\n           json.writeNumberField(COUNT, view.getCount(phase, step));\n           writeStringFieldIfNotNull(json, FILE, step.getFile());\n           writeNumberFieldIfDefined(json, SIZE, step.getSize());\n           json.writeNumberField(TOTAL, view.getTotal(phase, step));\n           json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n             step));\n           json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n           json.writeEndObject();\n         }\n \n         json.writeEndArray();\n         json.writeEndObject();\n       }\n \n       json.writeEndArray();\n       json.writeEndObject();\n     } finally {\n       IOUtils.cleanup(LOG, json);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws IOException {\n    resp.setContentType(\"application/json; charset\u003dUTF-8\");\n    StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n      getServletContext());\n    StartupProgressView view \u003d prog.createView();\n    JsonGenerator json \u003d new JsonFactory().createJsonGenerator(resp.getWriter());\n    try {\n      json.writeStartObject();\n      json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n      json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n      json.writeArrayFieldStart(PHASES);\n\n      for (Phase phase: view.getPhases()) {\n        json.writeStartObject();\n        json.writeStringField(NAME, phase.getName());\n        json.writeStringField(DESC, phase.getDescription());\n        json.writeStringField(STATUS, view.getStatus(phase).toString());\n        json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n        json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n        writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n        writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n        json.writeArrayFieldStart(STEPS);\n\n        for (Step step: view.getSteps(phase)) {\n          json.writeStartObject();\n          StepType type \u003d step.getType();\n          if (type !\u003d null) {\n            json.writeStringField(NAME, type.getName());\n            json.writeStringField(DESC, type.getDescription());\n          }\n          json.writeNumberField(COUNT, view.getCount(phase, step));\n          writeStringFieldIfNotNull(json, FILE, step.getFile());\n          writeNumberFieldIfDefined(json, SIZE, step.getSize());\n          json.writeNumberField(TOTAL, view.getTotal(phase, step));\n          json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n            step));\n          json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n          json.writeEndObject();\n        }\n\n        json.writeEndArray();\n        json.writeEndObject();\n      }\n\n      json.writeEndArray();\n      json.writeEndObject();\n    } finally {\n      IOUtils.cleanup(LOG, json);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StartupProgressServlet.java",
      "extendedDetails": {}
    },
    "19346d8ca6458840d1e2a78786c872bf9d1f038e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4373. Add HTTP API for querying NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502328 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 12:04 PM",
      "commitName": "19346d8ca6458840d1e2a78786c872bf9d1f038e",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,48 @@\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws IOException {\n+    resp.setContentType(\"application/json; charset\u003dUTF-8\");\n+    StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n+      getServletContext());\n+    StartupProgressView view \u003d prog.createView();\n+    JsonGenerator json \u003d new JsonFactory().createJsonGenerator(resp.getWriter());\n+    try {\n+      json.writeStartObject();\n+      json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n+      json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n+      json.writeArrayFieldStart(PHASES);\n+\n+      for (Phase phase: view.getPhases()) {\n+        json.writeStartObject();\n+        json.writeStringField(NAME, phase.getName());\n+        json.writeStringField(STATUS, view.getStatus(phase).toString());\n+        json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n+        json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n+        writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n+        writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n+        json.writeArrayFieldStart(STEPS);\n+\n+        for (Step step: view.getSteps(phase)) {\n+          json.writeStartObject();\n+          StepType type \u003d step.getType();\n+          String name \u003d type !\u003d null ? type.getName() : null;\n+          writeStringFieldIfNotNull(json, NAME, name);\n+          json.writeNumberField(COUNT, view.getCount(phase, step));\n+          writeStringFieldIfNotNull(json, FILE, step.getFile());\n+          writeNumberFieldIfDefined(json, SIZE, step.getSize());\n+          json.writeNumberField(TOTAL, view.getTotal(phase, step));\n+          json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n+            step));\n+          json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n+          json.writeEndObject();\n+        }\n+\n+        json.writeEndArray();\n+        json.writeEndObject();\n+      }\n+\n+      json.writeEndArray();\n+      json.writeEndObject();\n+    } finally {\n+      IOUtils.cleanup(LOG, json);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws IOException {\n    resp.setContentType(\"application/json; charset\u003dUTF-8\");\n    StartupProgress prog \u003d NameNodeHttpServer.getStartupProgressFromContext(\n      getServletContext());\n    StartupProgressView view \u003d prog.createView();\n    JsonGenerator json \u003d new JsonFactory().createJsonGenerator(resp.getWriter());\n    try {\n      json.writeStartObject();\n      json.writeNumberField(ELAPSED_TIME, view.getElapsedTime());\n      json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete());\n      json.writeArrayFieldStart(PHASES);\n\n      for (Phase phase: view.getPhases()) {\n        json.writeStartObject();\n        json.writeStringField(NAME, phase.getName());\n        json.writeStringField(STATUS, view.getStatus(phase).toString());\n        json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase));\n        json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase));\n        writeStringFieldIfNotNull(json, FILE, view.getFile(phase));\n        writeNumberFieldIfDefined(json, SIZE, view.getSize(phase));\n        json.writeArrayFieldStart(STEPS);\n\n        for (Step step: view.getSteps(phase)) {\n          json.writeStartObject();\n          StepType type \u003d step.getType();\n          String name \u003d type !\u003d null ? type.getName() : null;\n          writeStringFieldIfNotNull(json, NAME, name);\n          json.writeNumberField(COUNT, view.getCount(phase, step));\n          writeStringFieldIfNotNull(json, FILE, step.getFile());\n          writeNumberFieldIfDefined(json, SIZE, step.getSize());\n          json.writeNumberField(TOTAL, view.getTotal(phase, step));\n          json.writeNumberField(PERCENT_COMPLETE, view.getPercentComplete(phase,\n            step));\n          json.writeNumberField(ELAPSED_TIME, view.getElapsedTime(phase, step));\n          json.writeEndObject();\n        }\n\n        json.writeEndArray();\n        json.writeEndObject();\n      }\n\n      json.writeEndArray();\n      json.writeEndObject();\n    } finally {\n      IOUtils.cleanup(LOG, json);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StartupProgressServlet.java"
    }
  }
}