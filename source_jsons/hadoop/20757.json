{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobResourceUploader.java",
  "functionName": "uploadJobJar",
  "functionId": "uploadJobJar___job-Job__jobJar-String__submitJobDir-Path__submitReplication-short__statCache-Map__URI,FileStatus__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
  "functionStartLine": 416,
  "functionEndLine": 485,
  "numCommitsSeen": 34,
  "timeTaken": 3182,
  "changeHistory": [
    "e46d5bb962b0c942f993afc505b165b1cd96e51b",
    "fc0885da294490c3984c2231a4d35f89b3b520d4",
    "f80a7298325a4626638ee24467e2012442e480d4",
    "8f0d3d69d65a252439610e6f13d679808d768569"
  ],
  "changeHistoryShort": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": "Ymultichange(Yparameterchange,Ybodychange)",
    "fc0885da294490c3984c2231a4d35f89b3b520d4": "Ymodifierchange",
    "f80a7298325a4626638ee24467e2012442e480d4": "Ymultichange(Yparameterchange,Ybodychange)",
    "8f0d3d69d65a252439610e6f13d679808d768569": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
      "commitDate": "12/10/17 10:59 AM",
      "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
      "commitAuthor": "Chris Trezzo",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
          "commitDate": "12/10/17 10:59 AM",
          "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "18/09/17 10:40 AM",
          "commitNameOld": "0adc0471d0c06f66a31060f270dcb50a7b4ffafa",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 24.01,
          "commitsBetweenForRepo": 206,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,70 @@\n   void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n-      short submitReplication) throws IOException {\n+      short submitReplication, Map\u003cURI, FileStatus\u003e statCache)\n+      throws IOException {\n+    Configuration conf \u003d job.getConfiguration();\n     if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n       // use jar name if job is not named.\n       if (\"\".equals(job.getJobName())) {\n         job.setJobName(new Path(jobJar).getName());\n       }\n       Path jobJarPath \u003d new Path(jobJar);\n       URI jobJarURI \u003d jobJarPath.toUri();\n-      // If the job jar is already in a global fs,\n-      // we don\u0027t need to copy it from local fs\n-      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n-        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n-            submitReplication);\n-        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n+      Path newJarPath \u003d null;\n+      boolean uploadToSharedCache \u003d false;\n+      if (jobJarURI.getScheme() \u003d\u003d null ||\n+          jobJarURI.getScheme().equals(\"file\")) {\n+        // job jar is on the local file system\n+        if (scConfig.isSharedCacheJobjarEnabled()) {\n+          // We must have a qualified path for the shared cache client. We can\n+          // assume this is for the local filesystem\n+          jobJarPath \u003d FileSystem.getLocal(conf).makeQualified(jobJarPath);\n+          // Don\u0027t add a resource name here because the resource name (i.e.\n+          // job.jar directory symlink) will always be hard coded to job.jar for\n+          // the job.jar\n+          URI newURI \u003d\n+              useSharedCache(jobJarPath.toUri(), null, statCache, conf, false);\n+          if (newURI \u003d\u003d null) {\n+            uploadToSharedCache \u003d true;\n+          } else {\n+            newJarPath \u003d stringToPath(newURI.toString());\n+            // The job jar is coming from the shared cache (i.e. a public\n+            // place), so we want the job.jar to have a public visibility.\n+            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n+          }\n+        }\n+        if (newJarPath \u003d\u003d null) {\n+          newJarPath \u003d JobSubmissionFiles.getJobJar(submitJobDir);\n+          copyJar(jobJarPath, newJarPath, submitReplication);\n+        }\n+      } else {\n+        // job jar is in a remote file system\n+        if (scConfig.isSharedCacheJobjarEnabled()) {\n+          // Don\u0027t add a resource name here because the resource name (i.e.\n+          // job.jar directory symlink) will always be hard coded to job.jar for\n+          // the job.jar\n+          URI newURI \u003d useSharedCache(jobJarURI, null, statCache, conf, false);\n+          if (newURI \u003d\u003d null) {\n+            uploadToSharedCache \u003d true;\n+            newJarPath \u003d jobJarPath;\n+          } else {\n+            newJarPath \u003d stringToPath(newURI.toString());\n+            // The job jar is coming from the shared cache (i.e. a public\n+            // place), so we want the job.jar to have a public visibility.\n+            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n+          }\n+        } else {\n+          // we don\u0027t need to upload the jobjar to the staging directory because\n+          // it is already in an accessible place\n+          newJarPath \u003d jobJarPath;\n+        }\n+      }\n+      job.setJar(newJarPath.toString());\n+      if (scConfig.isSharedCacheJobjarEnabled()) {\n+        conf.setBoolean(MRJobConfig.JOBJAR_SHARED_CACHE_UPLOAD_POLICY,\n+            uploadToSharedCache);\n       }\n     } else {\n       LOG.warn(\"No job jar file set.  User classes may not be found. \"\n           + \"See Job or Job#setJar(String).\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n      short submitReplication, Map\u003cURI, FileStatus\u003e statCache)\n      throws IOException {\n    Configuration conf \u003d job.getConfiguration();\n    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n      // use jar name if job is not named.\n      if (\"\".equals(job.getJobName())) {\n        job.setJobName(new Path(jobJar).getName());\n      }\n      Path jobJarPath \u003d new Path(jobJar);\n      URI jobJarURI \u003d jobJarPath.toUri();\n      Path newJarPath \u003d null;\n      boolean uploadToSharedCache \u003d false;\n      if (jobJarURI.getScheme() \u003d\u003d null ||\n          jobJarURI.getScheme().equals(\"file\")) {\n        // job jar is on the local file system\n        if (scConfig.isSharedCacheJobjarEnabled()) {\n          // We must have a qualified path for the shared cache client. We can\n          // assume this is for the local filesystem\n          jobJarPath \u003d FileSystem.getLocal(conf).makeQualified(jobJarPath);\n          // Don\u0027t add a resource name here because the resource name (i.e.\n          // job.jar directory symlink) will always be hard coded to job.jar for\n          // the job.jar\n          URI newURI \u003d\n              useSharedCache(jobJarPath.toUri(), null, statCache, conf, false);\n          if (newURI \u003d\u003d null) {\n            uploadToSharedCache \u003d true;\n          } else {\n            newJarPath \u003d stringToPath(newURI.toString());\n            // The job jar is coming from the shared cache (i.e. a public\n            // place), so we want the job.jar to have a public visibility.\n            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n          }\n        }\n        if (newJarPath \u003d\u003d null) {\n          newJarPath \u003d JobSubmissionFiles.getJobJar(submitJobDir);\n          copyJar(jobJarPath, newJarPath, submitReplication);\n        }\n      } else {\n        // job jar is in a remote file system\n        if (scConfig.isSharedCacheJobjarEnabled()) {\n          // Don\u0027t add a resource name here because the resource name (i.e.\n          // job.jar directory symlink) will always be hard coded to job.jar for\n          // the job.jar\n          URI newURI \u003d useSharedCache(jobJarURI, null, statCache, conf, false);\n          if (newURI \u003d\u003d null) {\n            uploadToSharedCache \u003d true;\n            newJarPath \u003d jobJarPath;\n          } else {\n            newJarPath \u003d stringToPath(newURI.toString());\n            // The job jar is coming from the shared cache (i.e. a public\n            // place), so we want the job.jar to have a public visibility.\n            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n          }\n        } else {\n          // we don\u0027t need to upload the jobjar to the staging directory because\n          // it is already in an accessible place\n          newJarPath \u003d jobJarPath;\n        }\n      }\n      job.setJar(newJarPath.toString());\n      if (scConfig.isSharedCacheJobjarEnabled()) {\n        conf.setBoolean(MRJobConfig.JOBJAR_SHARED_CACHE_UPLOAD_POLICY,\n            uploadToSharedCache);\n      }\n    } else {\n      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n          + \"See Job or Job#setJar(String).\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {
            "oldValue": "[job-Job, jobJar-String, submitJobDir-Path, submitReplication-short]",
            "newValue": "[job-Job, jobJar-String, submitJobDir-Path, submitReplication-short, statCache-Map\u003cURI,FileStatus\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
          "commitDate": "12/10/17 10:59 AM",
          "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "18/09/17 10:40 AM",
          "commitNameOld": "0adc0471d0c06f66a31060f270dcb50a7b4ffafa",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 24.01,
          "commitsBetweenForRepo": 206,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,70 @@\n   void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n-      short submitReplication) throws IOException {\n+      short submitReplication, Map\u003cURI, FileStatus\u003e statCache)\n+      throws IOException {\n+    Configuration conf \u003d job.getConfiguration();\n     if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n       // use jar name if job is not named.\n       if (\"\".equals(job.getJobName())) {\n         job.setJobName(new Path(jobJar).getName());\n       }\n       Path jobJarPath \u003d new Path(jobJar);\n       URI jobJarURI \u003d jobJarPath.toUri();\n-      // If the job jar is already in a global fs,\n-      // we don\u0027t need to copy it from local fs\n-      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n-        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n-            submitReplication);\n-        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n+      Path newJarPath \u003d null;\n+      boolean uploadToSharedCache \u003d false;\n+      if (jobJarURI.getScheme() \u003d\u003d null ||\n+          jobJarURI.getScheme().equals(\"file\")) {\n+        // job jar is on the local file system\n+        if (scConfig.isSharedCacheJobjarEnabled()) {\n+          // We must have a qualified path for the shared cache client. We can\n+          // assume this is for the local filesystem\n+          jobJarPath \u003d FileSystem.getLocal(conf).makeQualified(jobJarPath);\n+          // Don\u0027t add a resource name here because the resource name (i.e.\n+          // job.jar directory symlink) will always be hard coded to job.jar for\n+          // the job.jar\n+          URI newURI \u003d\n+              useSharedCache(jobJarPath.toUri(), null, statCache, conf, false);\n+          if (newURI \u003d\u003d null) {\n+            uploadToSharedCache \u003d true;\n+          } else {\n+            newJarPath \u003d stringToPath(newURI.toString());\n+            // The job jar is coming from the shared cache (i.e. a public\n+            // place), so we want the job.jar to have a public visibility.\n+            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n+          }\n+        }\n+        if (newJarPath \u003d\u003d null) {\n+          newJarPath \u003d JobSubmissionFiles.getJobJar(submitJobDir);\n+          copyJar(jobJarPath, newJarPath, submitReplication);\n+        }\n+      } else {\n+        // job jar is in a remote file system\n+        if (scConfig.isSharedCacheJobjarEnabled()) {\n+          // Don\u0027t add a resource name here because the resource name (i.e.\n+          // job.jar directory symlink) will always be hard coded to job.jar for\n+          // the job.jar\n+          URI newURI \u003d useSharedCache(jobJarURI, null, statCache, conf, false);\n+          if (newURI \u003d\u003d null) {\n+            uploadToSharedCache \u003d true;\n+            newJarPath \u003d jobJarPath;\n+          } else {\n+            newJarPath \u003d stringToPath(newURI.toString());\n+            // The job jar is coming from the shared cache (i.e. a public\n+            // place), so we want the job.jar to have a public visibility.\n+            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n+          }\n+        } else {\n+          // we don\u0027t need to upload the jobjar to the staging directory because\n+          // it is already in an accessible place\n+          newJarPath \u003d jobJarPath;\n+        }\n+      }\n+      job.setJar(newJarPath.toString());\n+      if (scConfig.isSharedCacheJobjarEnabled()) {\n+        conf.setBoolean(MRJobConfig.JOBJAR_SHARED_CACHE_UPLOAD_POLICY,\n+            uploadToSharedCache);\n       }\n     } else {\n       LOG.warn(\"No job jar file set.  User classes may not be found. \"\n           + \"See Job or Job#setJar(String).\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n      short submitReplication, Map\u003cURI, FileStatus\u003e statCache)\n      throws IOException {\n    Configuration conf \u003d job.getConfiguration();\n    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n      // use jar name if job is not named.\n      if (\"\".equals(job.getJobName())) {\n        job.setJobName(new Path(jobJar).getName());\n      }\n      Path jobJarPath \u003d new Path(jobJar);\n      URI jobJarURI \u003d jobJarPath.toUri();\n      Path newJarPath \u003d null;\n      boolean uploadToSharedCache \u003d false;\n      if (jobJarURI.getScheme() \u003d\u003d null ||\n          jobJarURI.getScheme().equals(\"file\")) {\n        // job jar is on the local file system\n        if (scConfig.isSharedCacheJobjarEnabled()) {\n          // We must have a qualified path for the shared cache client. We can\n          // assume this is for the local filesystem\n          jobJarPath \u003d FileSystem.getLocal(conf).makeQualified(jobJarPath);\n          // Don\u0027t add a resource name here because the resource name (i.e.\n          // job.jar directory symlink) will always be hard coded to job.jar for\n          // the job.jar\n          URI newURI \u003d\n              useSharedCache(jobJarPath.toUri(), null, statCache, conf, false);\n          if (newURI \u003d\u003d null) {\n            uploadToSharedCache \u003d true;\n          } else {\n            newJarPath \u003d stringToPath(newURI.toString());\n            // The job jar is coming from the shared cache (i.e. a public\n            // place), so we want the job.jar to have a public visibility.\n            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n          }\n        }\n        if (newJarPath \u003d\u003d null) {\n          newJarPath \u003d JobSubmissionFiles.getJobJar(submitJobDir);\n          copyJar(jobJarPath, newJarPath, submitReplication);\n        }\n      } else {\n        // job jar is in a remote file system\n        if (scConfig.isSharedCacheJobjarEnabled()) {\n          // Don\u0027t add a resource name here because the resource name (i.e.\n          // job.jar directory symlink) will always be hard coded to job.jar for\n          // the job.jar\n          URI newURI \u003d useSharedCache(jobJarURI, null, statCache, conf, false);\n          if (newURI \u003d\u003d null) {\n            uploadToSharedCache \u003d true;\n            newJarPath \u003d jobJarPath;\n          } else {\n            newJarPath \u003d stringToPath(newURI.toString());\n            // The job jar is coming from the shared cache (i.e. a public\n            // place), so we want the job.jar to have a public visibility.\n            conf.setBoolean(MRJobConfig.JOBJAR_VISIBILITY, true);\n          }\n        } else {\n          // we don\u0027t need to upload the jobjar to the staging directory because\n          // it is already in an accessible place\n          newJarPath \u003d jobJarPath;\n        }\n      }\n      job.setJar(newJarPath.toString());\n      if (scConfig.isSharedCacheJobjarEnabled()) {\n        conf.setBoolean(MRJobConfig.JOBJAR_SHARED_CACHE_UPLOAD_POLICY,\n            uploadToSharedCache);\n      }\n    } else {\n      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n          + \"See Job or Job#setJar(String).\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "fc0885da294490c3984c2231a4d35f89b3b520d4": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
      "commitDate": "05/04/17 5:25 PM",
      "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "29/03/17 5:41 PM",
      "commitNameOld": "ceab00ac62f8057a07b4b936799e6f04271e6e41",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-  private void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n+  void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n       short submitReplication) throws IOException {\n     if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n       // use jar name if job is not named.\n       if (\"\".equals(job.getJobName())) {\n         job.setJobName(new Path(jobJar).getName());\n       }\n       Path jobJarPath \u003d new Path(jobJar);\n       URI jobJarURI \u003d jobJarPath.toUri();\n       // If the job jar is already in a global fs,\n       // we don\u0027t need to copy it from local fs\n       if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n         copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n             submitReplication);\n         job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n       }\n     } else {\n       LOG.warn(\"No job jar file set.  User classes may not be found. \"\n           + \"See Job or Job#setJar(String).\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n      short submitReplication) throws IOException {\n    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n      // use jar name if job is not named.\n      if (\"\".equals(job.getJobName())) {\n        job.setJobName(new Path(jobJar).getName());\n      }\n      Path jobJarPath \u003d new Path(jobJar);\n      URI jobJarURI \u003d jobJarPath.toUri();\n      // If the job jar is already in a global fs,\n      // we don\u0027t need to copy it from local fs\n      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n            submitReplication);\n        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n      }\n    } else {\n      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n          + \"See Job or Job#setJar(String).\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "f80a7298325a4626638ee24467e2012442e480d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
      "commitDate": "17/08/16 9:22 AM",
      "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
          "commitDate": "17/08/16 9:22 AM",
          "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "19/07/16 8:15 PM",
          "commitNameOld": "8f0d3d69d65a252439610e6f13d679808d768569",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 28.55,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  private void uploadJobJar(Job job, Path submitJobDir, short submitReplication)\n-      throws IOException {\n-    String jobJar \u003d job.getJar();\n+  private void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n+      short submitReplication) throws IOException {\n     if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n       // use jar name if job is not named.\n       if (\"\".equals(job.getJobName())) {\n         job.setJobName(new Path(jobJar).getName());\n       }\n       Path jobJarPath \u003d new Path(jobJar);\n       URI jobJarURI \u003d jobJarPath.toUri();\n       // If the job jar is already in a global fs,\n       // we don\u0027t need to copy it from local fs\n       if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n         copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n             submitReplication);\n         job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n       }\n     } else {\n       LOG.warn(\"No job jar file set.  User classes may not be found. \"\n           + \"See Job or Job#setJar(String).\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n      short submitReplication) throws IOException {\n    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n      // use jar name if job is not named.\n      if (\"\".equals(job.getJobName())) {\n        job.setJobName(new Path(jobJar).getName());\n      }\n      Path jobJarPath \u003d new Path(jobJar);\n      URI jobJarURI \u003d jobJarPath.toUri();\n      // If the job jar is already in a global fs,\n      // we don\u0027t need to copy it from local fs\n      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n            submitReplication);\n        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n      }\n    } else {\n      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n          + \"See Job or Job#setJar(String).\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {
            "oldValue": "[job-Job, submitJobDir-Path, submitReplication-short]",
            "newValue": "[job-Job, jobJar-String, submitJobDir-Path, submitReplication-short]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
          "commitDate": "17/08/16 9:22 AM",
          "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "19/07/16 8:15 PM",
          "commitNameOld": "8f0d3d69d65a252439610e6f13d679808d768569",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 28.55,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  private void uploadJobJar(Job job, Path submitJobDir, short submitReplication)\n-      throws IOException {\n-    String jobJar \u003d job.getJar();\n+  private void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n+      short submitReplication) throws IOException {\n     if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n       // use jar name if job is not named.\n       if (\"\".equals(job.getJobName())) {\n         job.setJobName(new Path(jobJar).getName());\n       }\n       Path jobJarPath \u003d new Path(jobJar);\n       URI jobJarURI \u003d jobJarPath.toUri();\n       // If the job jar is already in a global fs,\n       // we don\u0027t need to copy it from local fs\n       if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n         copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n             submitReplication);\n         job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n       }\n     } else {\n       LOG.warn(\"No job jar file set.  User classes may not be found. \"\n           + \"See Job or Job#setJar(String).\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void uploadJobJar(Job job, String jobJar, Path submitJobDir,\n      short submitReplication) throws IOException {\n    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n      // use jar name if job is not named.\n      if (\"\".equals(job.getJobName())) {\n        job.setJobName(new Path(jobJar).getName());\n      }\n      Path jobJarPath \u003d new Path(jobJar);\n      URI jobJarURI \u003d jobJarPath.toUri();\n      // If the job jar is already in a global fs,\n      // we don\u0027t need to copy it from local fs\n      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n            submitReplication);\n        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n      }\n    } else {\n      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n          + \"See Job or Job#setJar(String).\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "8f0d3d69d65a252439610e6f13d679808d768569": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6365. Refactor JobResourceUploader#uploadFilesInternal (Chris Trezzo via sjlee)\n",
      "commitDate": "19/07/16 8:15 PM",
      "commitName": "8f0d3d69d65a252439610e6f13d679808d768569",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,22 @@\n+  private void uploadJobJar(Job job, Path submitJobDir, short submitReplication)\n+      throws IOException {\n+    String jobJar \u003d job.getJar();\n+    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n+      // use jar name if job is not named.\n+      if (\"\".equals(job.getJobName())) {\n+        job.setJobName(new Path(jobJar).getName());\n+      }\n+      Path jobJarPath \u003d new Path(jobJar);\n+      URI jobJarURI \u003d jobJarPath.toUri();\n+      // If the job jar is already in a global fs,\n+      // we don\u0027t need to copy it from local fs\n+      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n+        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n+            submitReplication);\n+        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n+      }\n+    } else {\n+      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n+          + \"See Job or Job#setJar(String).\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void uploadJobJar(Job job, Path submitJobDir, short submitReplication)\n      throws IOException {\n    String jobJar \u003d job.getJar();\n    if (jobJar !\u003d null) { // copy jar to JobTracker\u0027s fs\n      // use jar name if job is not named.\n      if (\"\".equals(job.getJobName())) {\n        job.setJobName(new Path(jobJar).getName());\n      }\n      Path jobJarPath \u003d new Path(jobJar);\n      URI jobJarURI \u003d jobJarPath.toUri();\n      // If the job jar is already in a global fs,\n      // we don\u0027t need to copy it from local fs\n      if (jobJarURI.getScheme() \u003d\u003d null || jobJarURI.getScheme().equals(\"file\")) {\n        copyJar(jobJarPath, JobSubmissionFiles.getJobJar(submitJobDir),\n            submitReplication);\n        job.setJar(JobSubmissionFiles.getJobJar(submitJobDir).toString());\n      }\n    } else {\n      LOG.warn(\"No job jar file set.  User classes may not be found. \"\n          + \"See Job or Job#setJar(String).\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java"
    }
  }
}