{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SecondaryNameNode.java",
  "functionName": "startInfoServer",
  "functionId": "startInfoServer",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
  "functionStartLine": 470,
  "functionEndLine": 517,
  "numCommitsSeen": 90,
  "timeTaken": 1862,
  "changeHistory": [
    "413b23eb04eee24275257ab462133e0818f87449",
    "6c8b6f3646b31a3e028704bc7fd78bf319f89f0a"
  ],
  "changeHistoryShort": {
    "413b23eb04eee24275257ab462133e0818f87449": "Ybodychange",
    "6c8b6f3646b31a3e028704bc7fd78bf319f89f0a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "413b23eb04eee24275257ab462133e0818f87449": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12158. Secondary Namenode\u0027s web interface lack configs for X-FRAME-OPTIONS protection. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "19/07/17 10:29 AM",
      "commitName": "413b23eb04eee24275257ab462133e0818f87449",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "17/01/17 2:33 PM",
      "commitNameOld": "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 182.79,
      "commitsBetweenForRepo": 970,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,48 @@\n   public void startInfoServer() throws IOException {\n     final InetSocketAddress httpAddr \u003d getHttpAddress(conf);\n     final String httpsAddrString \u003d conf.getTrimmed(\n         DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n         DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_DEFAULT);\n     InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n \n     HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n         httpAddr, httpsAddr, \"secondary\", DFSConfigKeys.\n             DFS_SECONDARY_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n         DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);\n \n+    final boolean xFrameEnabled \u003d conf.getBoolean(\n+        DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED,\n+        DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED_DEFAULT);\n+\n+    final String xFrameOptionValue \u003d conf.getTrimmed(\n+        DFSConfigKeys.DFS_XFRAME_OPTION_VALUE,\n+        DFSConfigKeys.DFS_XFRAME_OPTION_VALUE_DEFAULT);\n+\n+    builder.configureXFrame(xFrameEnabled).setXFrameOption(xFrameOptionValue);\n+\n     infoServer \u003d builder.build();\n     infoServer.setAttribute(\"secondary.name.node\", this);\n     infoServer.setAttribute(\"name.system.image\", checkpointImage);\n     infoServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     infoServer.addInternalServlet(\"imagetransfer\", ImageServlet.PATH_SPEC,\n         ImageServlet.class, true);\n     infoServer.start();\n \n     LOG.info(\"Web server init done\");\n \n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     int connIdx \u003d 0;\n     if (policy.isHttpEnabled()) {\n       InetSocketAddress httpAddress \u003d\n           infoServer.getConnectorAddress(connIdx++);\n       conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n           NetUtils.getHostPortString(httpAddress));\n     }\n \n     if (policy.isHttpsEnabled()) {\n       InetSocketAddress httpsAddress \u003d\n           infoServer.getConnectorAddress(connIdx);\n       conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n           NetUtils.getHostPortString(httpsAddress));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startInfoServer() throws IOException {\n    final InetSocketAddress httpAddr \u003d getHttpAddress(conf);\n    final String httpsAddrString \u003d conf.getTrimmed(\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_DEFAULT);\n    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n\n    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n        httpAddr, httpsAddr, \"secondary\", DFSConfigKeys.\n            DFS_SECONDARY_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);\n\n    final boolean xFrameEnabled \u003d conf.getBoolean(\n        DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED,\n        DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED_DEFAULT);\n\n    final String xFrameOptionValue \u003d conf.getTrimmed(\n        DFSConfigKeys.DFS_XFRAME_OPTION_VALUE,\n        DFSConfigKeys.DFS_XFRAME_OPTION_VALUE_DEFAULT);\n\n    builder.configureXFrame(xFrameEnabled).setXFrameOption(xFrameOptionValue);\n\n    infoServer \u003d builder.build();\n    infoServer.setAttribute(\"secondary.name.node\", this);\n    infoServer.setAttribute(\"name.system.image\", checkpointImage);\n    infoServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    infoServer.addInternalServlet(\"imagetransfer\", ImageServlet.PATH_SPEC,\n        ImageServlet.class, true);\n    infoServer.start();\n\n    LOG.info(\"Web server init done\");\n\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    int connIdx \u003d 0;\n    if (policy.isHttpEnabled()) {\n      InetSocketAddress httpAddress \u003d\n          infoServer.getConnectorAddress(connIdx++);\n      conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          NetUtils.getHostPortString(httpAddress));\n    }\n\n    if (policy.isHttpsEnabled()) {\n      InetSocketAddress httpsAddress \u003d\n          infoServer.getConnectorAddress(connIdx);\n      conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n          NetUtils.getHostPortString(httpsAddress));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {}
    },
    "6c8b6f3646b31a3e028704bc7fd78bf319f89f0a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3059. ssl-server.xml causes NullPointer. Contributed by Xiao Chen.\n",
      "commitDate": "20/10/15 1:44 PM",
      "commitName": "6c8b6f3646b31a3e028704bc7fd78bf319f89f0a",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,38 @@\n+  public void startInfoServer() throws IOException {\n+    final InetSocketAddress httpAddr \u003d getHttpAddress(conf);\n+    final String httpsAddrString \u003d conf.getTrimmed(\n+        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n+        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_DEFAULT);\n+    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n+\n+    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n+        httpAddr, httpsAddr, \"secondary\", DFSConfigKeys.\n+            DFS_SECONDARY_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n+        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);\n+\n+    infoServer \u003d builder.build();\n+    infoServer.setAttribute(\"secondary.name.node\", this);\n+    infoServer.setAttribute(\"name.system.image\", checkpointImage);\n+    infoServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n+    infoServer.addInternalServlet(\"imagetransfer\", ImageServlet.PATH_SPEC,\n+        ImageServlet.class, true);\n+    infoServer.start();\n+\n+    LOG.info(\"Web server init done\");\n+\n+    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n+    int connIdx \u003d 0;\n+    if (policy.isHttpEnabled()) {\n+      InetSocketAddress httpAddress \u003d\n+          infoServer.getConnectorAddress(connIdx++);\n+      conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n+          NetUtils.getHostPortString(httpAddress));\n+    }\n+\n+    if (policy.isHttpsEnabled()) {\n+      InetSocketAddress httpsAddress \u003d\n+          infoServer.getConnectorAddress(connIdx);\n+      conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n+          NetUtils.getHostPortString(httpsAddress));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void startInfoServer() throws IOException {\n    final InetSocketAddress httpAddr \u003d getHttpAddress(conf);\n    final String httpsAddrString \u003d conf.getTrimmed(\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_DEFAULT);\n    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n\n    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n        httpAddr, httpsAddr, \"secondary\", DFSConfigKeys.\n            DFS_SECONDARY_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);\n\n    infoServer \u003d builder.build();\n    infoServer.setAttribute(\"secondary.name.node\", this);\n    infoServer.setAttribute(\"name.system.image\", checkpointImage);\n    infoServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    infoServer.addInternalServlet(\"imagetransfer\", ImageServlet.PATH_SPEC,\n        ImageServlet.class, true);\n    infoServer.start();\n\n    LOG.info(\"Web server init done\");\n\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    int connIdx \u003d 0;\n    if (policy.isHttpEnabled()) {\n      InetSocketAddress httpAddress \u003d\n          infoServer.getConnectorAddress(connIdx++);\n      conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          NetUtils.getHostPortString(httpAddress));\n    }\n\n    if (policy.isHttpsEnabled()) {\n      InetSocketAddress httpsAddress \u003d\n          infoServer.getConnectorAddress(connIdx);\n      conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,\n          NetUtils.getHostPortString(httpsAddress));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
    }
  }
}