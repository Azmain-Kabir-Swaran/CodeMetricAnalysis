{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ChangeTracker.java",
  "functionName": "processNewRevision",
  "functionId": "processNewRevision___newRevisionId-String(modifiers-final)__operation-String(modifiers-final)__pos-long(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java",
  "functionStartLine": 272,
  "functionEndLine": 305,
  "numCommitsSeen": 4,
  "timeTaken": 1586,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "diff": "@@ -0,0 +1,34 @@\n+  private void processNewRevision(final String newRevisionId,\n+      final String operation, final long pos) throws PathIOException {\n+    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n+      throw new NoVersionAttributeException(uri, String.format(\n+          \"Change detection policy requires %s\",\n+          policy.getSource()));\n+    }\n+    if (revisionId \u003d\u003d null) {\n+      // revisionId may be null on first (re)open. Pin it so change can be\n+      // detected if object has been updated\n+      LOG.debug(\"Setting revision ID for object at {}: {}\",\n+          uri, newRevisionId);\n+      revisionId \u003d newRevisionId;\n+    } else if (!revisionId.equals(newRevisionId)) {\n+      LOG.debug(\"Revision ID changed from {} to {}\",\n+          revisionId, newRevisionId);\n+      ImmutablePair\u003cBoolean, RemoteFileChangedException\u003e pair \u003d\n+          policy.onChangeDetected(\n+              revisionId,\n+              newRevisionId,\n+              uri,\n+              pos,\n+              operation,\n+              versionMismatches.get());\n+      if (pair.left) {\n+        // an mismatch has occurred: note it.\n+        versionMismatches.incrementAndGet();\n+      }\n+      if (pair.right !\u003d null) {\n+        // there\u0027s an exception to raise: do it\n+        throw pair.right;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void processNewRevision(final String newRevisionId,\n      final String operation, final long pos) throws PathIOException {\n    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n      throw new NoVersionAttributeException(uri, String.format(\n          \"Change detection policy requires %s\",\n          policy.getSource()));\n    }\n    if (revisionId \u003d\u003d null) {\n      // revisionId may be null on first (re)open. Pin it so change can be\n      // detected if object has been updated\n      LOG.debug(\"Setting revision ID for object at {}: {}\",\n          uri, newRevisionId);\n      revisionId \u003d newRevisionId;\n    } else if (!revisionId.equals(newRevisionId)) {\n      LOG.debug(\"Revision ID changed from {} to {}\",\n          revisionId, newRevisionId);\n      ImmutablePair\u003cBoolean, RemoteFileChangedException\u003e pair \u003d\n          policy.onChangeDetected(\n              revisionId,\n              newRevisionId,\n              uri,\n              pos,\n              operation,\n              versionMismatches.get());\n      if (pair.left) {\n        // an mismatch has occurred: note it.\n        versionMismatches.incrementAndGet();\n      }\n      if (pair.right !\u003d null) {\n        // there\u0027s an exception to raise: do it\n        throw pair.right;\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java"
    }
  }
}