{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "getAppActivities",
  "functionId": "getAppActivities___hsr-HttpServletRequest(annotations-@Context)__appId-String(annotations-@PathParam(RMWSConsts.APPID))__time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME))__requestPriorities-Set__String__(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES))__allocationRequestIds-Set__String__(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS))__groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY))__limit-String(annotations-@QueryParam(RMWSConsts.LIMIT))__actions-Set__String__(annotations-@QueryParam(RMWSConsts.ACTIONS))__summarize-boolean(annotations-@QueryParam(RMWSConsts.SUMMARIZE)-@DefaultValue(DEFAULT_SUMMARIZE))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 778,
  "functionEndLine": 890,
  "numCommitsSeen": 437,
  "timeTaken": 10726,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
    "90add05caa6c48659f0c592ec391b30f2a76069e",
    "7fa73fac2676875561269e9408215e012269a18c",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": "Ymultichange(Yparameterchange,Ybodychange)",
    "90add05caa6c48659f0c592ec391b30f2a76069e": "Ymultichange(Yparameterchange,Ybodychange)",
    "7fa73fac2676875561269e9408215e012269a18c": "Ybodychange",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": "Yparametermetachange",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/06/19 7:44 PM",
      "commitNameOld": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 77.31,
      "commitsBetweenForRepo": 694,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,113 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @PathParam(RMWSConsts.APPID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time,\n       @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n       @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n           Set\u003cString\u003e allocationRequestIds,\n       @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n       @QueryParam(RMWSConsts.LIMIT) String limit,\n       @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n       @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n           boolean summarize) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n       try {\n         activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n       } catch (IllegalArgumentException e) {\n         return new AppActivitiesInfo(e.getMessage(), appId);\n       }\n \n       Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n       try {\n-        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n+        requiredActions \u003d\n+            parseAppActivitiesRequiredActions(getFlatSet(actions));\n       } catch (IllegalArgumentException e) {\n         return new AppActivitiesInfo(e.getMessage(), appId);\n       }\n \n+      Set\u003cInteger\u003e parsedRequestPriorities;\n+      try {\n+        parsedRequestPriorities \u003d getFlatSet(requestPriorities).stream()\n+            .map(e -\u003e Integer.valueOf(e)).collect(Collectors.toSet());\n+      } catch (NumberFormatException e) {\n+        return new AppActivitiesInfo(\"request priorities must be integers!\",\n+            appId);\n+      }\n+      Set\u003cLong\u003e parsedAllocationRequestIds;\n+      try {\n+        parsedAllocationRequestIds \u003d getFlatSet(allocationRequestIds).stream()\n+            .map(e -\u003e Long.valueOf(e)).collect(Collectors.toSet());\n+      } catch (NumberFormatException e) {\n+        return new AppActivitiesInfo(\n+            \"allocation request Ids must be integers!\", appId);\n+      }\n+\n       int limitNum \u003d -1;\n       if (limit !\u003d null) {\n         try {\n           limitNum \u003d Integer.parseInt(limit);\n           if (limitNum \u003c\u003d 0) {\n             return new AppActivitiesInfo(\n                 \"limit must be greater than 0!\", appId);\n           }\n         } catch (NumberFormatException e) {\n           return new AppActivitiesInfo(\"limit must be integer!\", appId);\n         }\n       }\n \n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         if (requiredActions\n             .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n           activitiesManager\n               .turnOnAppActivitiesRecording(applicationId, maxTime);\n         }\n         if (requiredActions\n             .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n           AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n-              .getAppActivitiesInfo(applicationId, requestPriorities,\n-                  allocationRequestIds, activitiesGroupBy, limitNum,\n+              .getAppActivitiesInfo(applicationId, parsedRequestPriorities,\n+                  parsedAllocationRequestIds, activitiesGroupBy, limitNum,\n                   summarize, maxTime);\n           return appActivitiesInfo;\n         }\n-        return new AppActivitiesInfo(\"Successfully notified actions: \"\n+        return new AppActivitiesInfo(\"Successfully received \"\n+            + (actions.size() \u003d\u003d 1 ? \"action: \" : \"actions: \")\n             + StringUtils.join(\u0027,\u0027, actions), appId);\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @PathParam(RMWSConsts.APPID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n      @QueryParam(RMWSConsts.LIMIT) String limit,\n      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n          boolean summarize) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n      try {\n        requiredActions \u003d\n            parseAppActivitiesRequiredActions(getFlatSet(actions));\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      Set\u003cInteger\u003e parsedRequestPriorities;\n      try {\n        parsedRequestPriorities \u003d getFlatSet(requestPriorities).stream()\n            .map(e -\u003e Integer.valueOf(e)).collect(Collectors.toSet());\n      } catch (NumberFormatException e) {\n        return new AppActivitiesInfo(\"request priorities must be integers!\",\n            appId);\n      }\n      Set\u003cLong\u003e parsedAllocationRequestIds;\n      try {\n        parsedAllocationRequestIds \u003d getFlatSet(allocationRequestIds).stream()\n            .map(e -\u003e Long.valueOf(e)).collect(Collectors.toSet());\n      } catch (NumberFormatException e) {\n        return new AppActivitiesInfo(\n            \"allocation request Ids must be integers!\", appId);\n      }\n\n      int limitNum \u003d -1;\n      if (limit !\u003d null) {\n        try {\n          limitNum \u003d Integer.parseInt(limit);\n          if (limitNum \u003c\u003d 0) {\n            return new AppActivitiesInfo(\n                \"limit must be greater than 0!\", appId);\n          }\n        } catch (NumberFormatException e) {\n          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n        }\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n          activitiesManager\n              .turnOnAppActivitiesRecording(applicationId, maxTime);\n        }\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n              .getAppActivitiesInfo(applicationId, parsedRequestPriorities,\n                  parsedAllocationRequestIds, activitiesGroupBy, limitNum,\n                  summarize, maxTime);\n          return appActivitiesInfo;\n        }\n        return new AppActivitiesInfo(\"Successfully received \"\n            + (actions.size() \u003d\u003d 1 ? \"action: \" : \"actions: \")\n            + StringUtils.join(\u0027,\u0027, actions), appId);\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
      "commitDate": "12/06/19 7:44 PM",
      "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
          "commitDate": "12/06/19 7:44 PM",
          "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "29/05/19 1:34 AM",
          "commitNameOld": "544876fe127780415c6d5dcfa8c8934eeafe6815",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 14.76,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,94 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(RMWSConsts.APP_ID) String appId,\n+      @PathParam(RMWSConsts.APPID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time,\n       @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n       @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n           Set\u003cString\u003e allocationRequestIds,\n-      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n+      @QueryParam(RMWSConsts.LIMIT) String limit,\n+      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n+      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n+          boolean summarize) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n       try {\n         activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n       } catch (IllegalArgumentException e) {\n         return new AppActivitiesInfo(e.getMessage(), appId);\n       }\n \n+      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n+      try {\n+        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n+      } catch (IllegalArgumentException e) {\n+        return new AppActivitiesInfo(e.getMessage(), appId);\n+      }\n+\n+      int limitNum \u003d -1;\n+      if (limit !\u003d null) {\n+        try {\n+          limitNum \u003d Integer.parseInt(limit);\n+          if (limitNum \u003c\u003d 0) {\n+            return new AppActivitiesInfo(\n+                \"limit must be greater than 0!\", appId);\n+          }\n+        } catch (NumberFormatException e) {\n+          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n+        }\n+      }\n+\n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n-        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n-        AppActivitiesInfo appActivitiesInfo \u003d\n-            activitiesManager.getAppActivitiesInfo(applicationId,\n-                requestPriorities, allocationRequestIds, activitiesGroupBy);\n-\n-        return appActivitiesInfo;\n+        if (requiredActions\n+            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n+          activitiesManager\n+              .turnOnAppActivitiesRecording(applicationId, maxTime);\n+        }\n+        if (requiredActions\n+            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n+          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n+              .getAppActivitiesInfo(applicationId, requestPriorities,\n+                  allocationRequestIds, activitiesGroupBy, limitNum,\n+                  summarize, maxTime);\n+          return appActivitiesInfo;\n+        }\n+        return new AppActivitiesInfo(\"Successfully notified actions: \"\n+            + StringUtils.join(\u0027,\u0027, actions), appId);\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @PathParam(RMWSConsts.APPID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n      @QueryParam(RMWSConsts.LIMIT) String limit,\n      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n          boolean summarize) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n      try {\n        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      int limitNum \u003d -1;\n      if (limit !\u003d null) {\n        try {\n          limitNum \u003d Integer.parseInt(limit);\n          if (limitNum \u003c\u003d 0) {\n            return new AppActivitiesInfo(\n                \"limit must be greater than 0!\", appId);\n          }\n        } catch (NumberFormatException e) {\n          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n        }\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n          activitiesManager\n              .turnOnAppActivitiesRecording(applicationId, maxTime);\n        }\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n              .getAppActivitiesInfo(applicationId, requestPriorities,\n                  allocationRequestIds, activitiesGroupBy, limitNum,\n                  summarize, maxTime);\n          return appActivitiesInfo;\n        }\n        return new AppActivitiesInfo(\"Successfully notified actions: \"\n            + StringUtils.join(\u0027,\u0027, actions), appId);\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)), groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@PathParam(RMWSConsts.APPID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)), groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY)), limit-String(annotations-@QueryParam(RMWSConsts.LIMIT)), actions-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ACTIONS)), summarize-boolean(annotations-@QueryParam(RMWSConsts.SUMMARIZE)-@DefaultValue(DEFAULT_SUMMARIZE))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
          "commitDate": "12/06/19 7:44 PM",
          "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "29/05/19 1:34 AM",
          "commitNameOld": "544876fe127780415c6d5dcfa8c8934eeafe6815",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 14.76,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,94 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(RMWSConsts.APP_ID) String appId,\n+      @PathParam(RMWSConsts.APPID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time,\n       @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n       @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n           Set\u003cString\u003e allocationRequestIds,\n-      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n+      @QueryParam(RMWSConsts.LIMIT) String limit,\n+      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n+      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n+          boolean summarize) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n       try {\n         activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n       } catch (IllegalArgumentException e) {\n         return new AppActivitiesInfo(e.getMessage(), appId);\n       }\n \n+      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n+      try {\n+        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n+      } catch (IllegalArgumentException e) {\n+        return new AppActivitiesInfo(e.getMessage(), appId);\n+      }\n+\n+      int limitNum \u003d -1;\n+      if (limit !\u003d null) {\n+        try {\n+          limitNum \u003d Integer.parseInt(limit);\n+          if (limitNum \u003c\u003d 0) {\n+            return new AppActivitiesInfo(\n+                \"limit must be greater than 0!\", appId);\n+          }\n+        } catch (NumberFormatException e) {\n+          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n+        }\n+      }\n+\n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n-        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n-        AppActivitiesInfo appActivitiesInfo \u003d\n-            activitiesManager.getAppActivitiesInfo(applicationId,\n-                requestPriorities, allocationRequestIds, activitiesGroupBy);\n-\n-        return appActivitiesInfo;\n+        if (requiredActions\n+            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n+          activitiesManager\n+              .turnOnAppActivitiesRecording(applicationId, maxTime);\n+        }\n+        if (requiredActions\n+            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n+          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n+              .getAppActivitiesInfo(applicationId, requestPriorities,\n+                  allocationRequestIds, activitiesGroupBy, limitNum,\n+                  summarize, maxTime);\n+          return appActivitiesInfo;\n+        }\n+        return new AppActivitiesInfo(\"Successfully notified actions: \"\n+            + StringUtils.join(\u0027,\u0027, actions), appId);\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @PathParam(RMWSConsts.APPID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n      @QueryParam(RMWSConsts.LIMIT) String limit,\n      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n          boolean summarize) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n      try {\n        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      int limitNum \u003d -1;\n      if (limit !\u003d null) {\n        try {\n          limitNum \u003d Integer.parseInt(limit);\n          if (limitNum \u003c\u003d 0) {\n            return new AppActivitiesInfo(\n                \"limit must be greater than 0!\", appId);\n          }\n        } catch (NumberFormatException e) {\n          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n        }\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n          activitiesManager\n              .turnOnAppActivitiesRecording(applicationId, maxTime);\n        }\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n              .getAppActivitiesInfo(applicationId, requestPriorities,\n                  allocationRequestIds, activitiesGroupBy, limitNum,\n                  summarize, maxTime);\n          return appActivitiesInfo;\n        }\n        return new AppActivitiesInfo(\"Successfully notified actions: \"\n            + StringUtils.join(\u0027,\u0027, actions), appId);\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
          "commitDate": "12/06/19 7:44 PM",
          "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "29/05/19 1:34 AM",
          "commitNameOld": "544876fe127780415c6d5dcfa8c8934eeafe6815",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 14.76,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,94 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(RMWSConsts.APP_ID) String appId,\n+      @PathParam(RMWSConsts.APPID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time,\n       @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n       @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n           Set\u003cString\u003e allocationRequestIds,\n-      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n+      @QueryParam(RMWSConsts.LIMIT) String limit,\n+      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n+      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n+          boolean summarize) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n       try {\n         activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n       } catch (IllegalArgumentException e) {\n         return new AppActivitiesInfo(e.getMessage(), appId);\n       }\n \n+      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n+      try {\n+        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n+      } catch (IllegalArgumentException e) {\n+        return new AppActivitiesInfo(e.getMessage(), appId);\n+      }\n+\n+      int limitNum \u003d -1;\n+      if (limit !\u003d null) {\n+        try {\n+          limitNum \u003d Integer.parseInt(limit);\n+          if (limitNum \u003c\u003d 0) {\n+            return new AppActivitiesInfo(\n+                \"limit must be greater than 0!\", appId);\n+          }\n+        } catch (NumberFormatException e) {\n+          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n+        }\n+      }\n+\n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n-        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n-        AppActivitiesInfo appActivitiesInfo \u003d\n-            activitiesManager.getAppActivitiesInfo(applicationId,\n-                requestPriorities, allocationRequestIds, activitiesGroupBy);\n-\n-        return appActivitiesInfo;\n+        if (requiredActions\n+            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n+          activitiesManager\n+              .turnOnAppActivitiesRecording(applicationId, maxTime);\n+        }\n+        if (requiredActions\n+            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n+          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n+              .getAppActivitiesInfo(applicationId, requestPriorities,\n+                  allocationRequestIds, activitiesGroupBy, limitNum,\n+                  summarize, maxTime);\n+          return appActivitiesInfo;\n+        }\n+        return new AppActivitiesInfo(\"Successfully notified actions: \"\n+            + StringUtils.join(\u0027,\u0027, actions), appId);\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @PathParam(RMWSConsts.APPID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,\n      @QueryParam(RMWSConsts.LIMIT) String limit,\n      @QueryParam(RMWSConsts.ACTIONS) Set\u003cString\u003e actions,\n      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)\n          boolean summarize) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      Set\u003cRMWSConsts.AppActivitiesRequiredAction\u003e requiredActions;\n      try {\n        requiredActions \u003d parseAppActivitiesRequiredActions(actions);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      int limitNum \u003d -1;\n      if (limit !\u003d null) {\n        try {\n          limitNum \u003d Integer.parseInt(limit);\n          if (limitNum \u003c\u003d 0) {\n            return new AppActivitiesInfo(\n                \"limit must be greater than 0!\", appId);\n          }\n        } catch (NumberFormatException e) {\n          return new AppActivitiesInfo(\"limit must be integer!\", appId);\n        }\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {\n          activitiesManager\n              .turnOnAppActivitiesRecording(applicationId, maxTime);\n        }\n        if (requiredActions\n            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {\n          AppActivitiesInfo appActivitiesInfo \u003d activitiesManager\n              .getAppActivitiesInfo(applicationId, requestPriorities,\n                  allocationRequestIds, activitiesGroupBy, limitNum,\n                  summarize, maxTime);\n          return appActivitiesInfo;\n        }\n        return new AppActivitiesInfo(\"Successfully notified actions: \"\n            + StringUtils.join(\u0027,\u0027, actions), appId);\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)), groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@PathParam(RMWSConsts.APPID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)), groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY)), limit-String(annotations-@QueryParam(RMWSConsts.LIMIT)), actions-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ACTIONS)), summarize-boolean(annotations-@QueryParam(RMWSConsts.SUMMARIZE)-@DefaultValue(DEFAULT_SUMMARIZE))]"
          }
        }
      ]
    },
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "26/05/19 6:56 AM",
      "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "26/05/19 6:56 AM",
          "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "09/05/19 6:54 AM",
          "commitNameOld": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 17.0,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,61 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.APP_ID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time,\n       @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n       @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n-          Set\u003cString\u003e allocationRequestIds) {\n+          Set\u003cString\u003e allocationRequestIds,\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n+      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n+      try {\n+        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n+      } catch (IllegalArgumentException e) {\n+        return new AppActivitiesInfo(e.getMessage(), appId);\n+      }\n+\n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n             activitiesManager.getAppActivitiesInfo(applicationId,\n-                requestPriorities, allocationRequestIds);\n+                requestPriorities, allocationRequestIds, activitiesGroupBy);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId,\n                requestPriorities, allocationRequestIds, activitiesGroupBy);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)), groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "26/05/19 6:56 AM",
          "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "09/05/19 6:54 AM",
          "commitNameOld": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 17.0,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,61 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.APP_ID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time,\n       @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n       @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n-          Set\u003cString\u003e allocationRequestIds) {\n+          Set\u003cString\u003e allocationRequestIds,\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n+      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n+      try {\n+        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n+      } catch (IllegalArgumentException e) {\n+        return new AppActivitiesInfo(e.getMessage(), appId);\n+      }\n+\n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n             activitiesManager.getAppActivitiesInfo(applicationId,\n-                requestPriorities, allocationRequestIds);\n+                requestPriorities, allocationRequestIds, activitiesGroupBy);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new AppActivitiesInfo(e.getMessage(), appId);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId,\n                requestPriorities, allocationRequestIds, activitiesGroupBy);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "90add05caa6c48659f0c592ec391b30f2a76069e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9489. Support filtering by request-priorities and allocation-request-ids for query results of app activities. Contributed by Tao Yang.\n",
      "commitDate": "09/05/19 6:54 AM",
      "commitName": "90add05caa6c48659f0c592ec391b30f2a76069e",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9489. Support filtering by request-priorities and allocation-request-ids for query results of app activities. Contributed by Tao Yang.\n",
          "commitDate": "09/05/19 6:54 AM",
          "commitName": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "15/04/19 9:12 AM",
          "commitNameOld": "7fa73fac2676875561269e9408215e012269a18c",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 23.9,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.APP_ID) String appId,\n-      @QueryParam(RMWSConsts.MAX_TIME) String time) {\n+      @QueryParam(RMWSConsts.MAX_TIME) String time,\n+      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n+      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n+          Set\u003cString\u003e allocationRequestIds) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n-            activitiesManager.getAppActivitiesInfo(applicationId);\n+            activitiesManager.getAppActivitiesInfo(applicationId,\n+                requestPriorities, allocationRequestIds);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId,\n                requestPriorities, allocationRequestIds);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME)), requestPriorities-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.REQUEST_PRIORITIES)), allocationRequestIds-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9489. Support filtering by request-priorities and allocation-request-ids for query results of app activities. Contributed by Tao Yang.\n",
          "commitDate": "09/05/19 6:54 AM",
          "commitName": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "15/04/19 9:12 AM",
          "commitNameOld": "7fa73fac2676875561269e9408215e012269a18c",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 23.9,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.APP_ID) String appId,\n-      @QueryParam(RMWSConsts.MAX_TIME) String time) {\n+      @QueryParam(RMWSConsts.MAX_TIME) String time,\n+      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n+      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n+          Set\u003cString\u003e allocationRequestIds) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n-            activitiesManager.getAppActivitiesInfo(applicationId);\n+            activitiesManager.getAppActivitiesInfo(applicationId,\n+                requestPriorities, allocationRequestIds);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time,\n      @QueryParam(RMWSConsts.REQUEST_PRIORITIES) Set\u003cString\u003e requestPriorities,\n      @QueryParam(RMWSConsts.ALLOCATION_REQUEST_IDS)\n          Set\u003cString\u003e allocationRequestIds) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId,\n                requestPriorities, allocationRequestIds);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "7fa73fac2676875561269e9408215e012269a18c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9439. Support asynchronized scheduling mode and multi-node lookup mechanism for app activities. Contributed by Tao Yang.\n",
      "commitDate": "15/04/19 9:12 AM",
      "commitName": "7fa73fac2676875561269e9408215e012269a18c",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "11/02/19 3:27 PM",
      "commitNameOld": "7536488bbd919b619f037442e6395154f579aaac",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 62.7,
      "commitsBetweenForRepo": 513,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.APP_ID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n             activitiesManager.getAppActivitiesInfo(applicationId);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n+        LOG.error(errMessage, e);\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        LOG.error(errMessage, e);\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.APP_ID) String appId,\n       @QueryParam(RMWSConsts.MAX_TIME) String time) {\n-    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n+    initForReadableEndpoints();\n \n+    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n       if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n             activitiesManager.getAppActivitiesInfo(applicationId);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": {
      "type": "Yparametermetachange",
      "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "07/06/17 1:41 PM",
      "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "08/12/16 2:23 AM",
      "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 181.43,
      "commitsBetweenForRepo": 954,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(\"appId\") String appId, @QueryParam(\"maxTime\") String time) {\n+      @QueryParam(RMWSConsts.APP_ID) String appId,\n+      @QueryParam(RMWSConsts.MAX_TIME) String time) {\n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n \n     if (scheduler instanceof AbstractYarnScheduler) {\n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         String errMessage \u003d \"Not Capacity Scheduler\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n-      if(appId \u003d\u003d null) {\n+      if (appId \u003d\u003d null) {\n         String errMessage \u003d \"Must provide an application Id\";\n         return new AppActivitiesInfo(errMessage, null);\n       }\n \n       double maxTime \u003d 3.0;\n \n       if (time !\u003d null) {\n         if (time.contains(\".\")) {\n           maxTime \u003d Double.parseDouble(time);\n         } else {\n           maxTime \u003d Double.parseDouble(time + \".0\");\n         }\n       }\n \n       ApplicationId applicationId;\n       try {\n         applicationId \u003d ApplicationId.fromString(appId);\n         activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n         AppActivitiesInfo appActivitiesInfo \u003d\n             activitiesManager.getAppActivitiesInfo(applicationId);\n \n         return appActivitiesInfo;\n       } catch (Exception e) {\n         String errMessage \u003d \"Cannot find application with given appId\";\n         return new AppActivitiesInfo(errMessage, appId);\n       }\n \n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.APP_ID) String appId,\n      @QueryParam(RMWSConsts.MAX_TIME) String time) {\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if (appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {
        "oldValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(\"appId\")), time-String(annotations-@QueryParam(\"maxTime\"))]",
        "newValue": "[hsr-HttpServletRequest(annotations-@Context), appId-String(annotations-@QueryParam(RMWSConsts.APP_ID)), time-String(annotations-@QueryParam(RMWSConsts.MAX_TIME))]"
      }
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,46 @@\n+  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n+      @QueryParam(\"appId\") String appId, @QueryParam(\"maxTime\") String time) {\n+    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n+\n+    if (scheduler instanceof AbstractYarnScheduler) {\n+      AbstractYarnScheduler abstractYarnScheduler \u003d\n+          (AbstractYarnScheduler) scheduler;\n+\n+      ActivitiesManager activitiesManager \u003d\n+          abstractYarnScheduler.getActivitiesManager();\n+      if (null \u003d\u003d activitiesManager) {\n+        String errMessage \u003d \"Not Capacity Scheduler\";\n+        return new AppActivitiesInfo(errMessage, appId);\n+      }\n+\n+      if(appId \u003d\u003d null) {\n+        String errMessage \u003d \"Must provide an application Id\";\n+        return new AppActivitiesInfo(errMessage, null);\n+      }\n+\n+      double maxTime \u003d 3.0;\n+\n+      if (time !\u003d null) {\n+        if (time.contains(\".\")) {\n+          maxTime \u003d Double.parseDouble(time);\n+        } else {\n+          maxTime \u003d Double.parseDouble(time + \".0\");\n+        }\n+      }\n+\n+      ApplicationId applicationId;\n+      try {\n+        applicationId \u003d ApplicationId.fromString(appId);\n+        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n+        AppActivitiesInfo appActivitiesInfo \u003d\n+            activitiesManager.getAppActivitiesInfo(applicationId);\n+\n+        return appActivitiesInfo;\n+      } catch (Exception e) {\n+        String errMessage \u003d \"Cannot find application with given appId\";\n+        return new AppActivitiesInfo(errMessage, appId);\n+      }\n+\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,\n      @QueryParam(\"appId\") String appId, @QueryParam(\"maxTime\") String time) {\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n\n    if (scheduler instanceof AbstractYarnScheduler) {\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        String errMessage \u003d \"Not Capacity Scheduler\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n      if(appId \u003d\u003d null) {\n        String errMessage \u003d \"Must provide an application Id\";\n        return new AppActivitiesInfo(errMessage, null);\n      }\n\n      double maxTime \u003d 3.0;\n\n      if (time !\u003d null) {\n        if (time.contains(\".\")) {\n          maxTime \u003d Double.parseDouble(time);\n        } else {\n          maxTime \u003d Double.parseDouble(time + \".0\");\n        }\n      }\n\n      ApplicationId applicationId;\n      try {\n        applicationId \u003d ApplicationId.fromString(appId);\n        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);\n        AppActivitiesInfo appActivitiesInfo \u003d\n            activitiesManager.getAppActivitiesInfo(applicationId);\n\n        return appActivitiesInfo;\n      } catch (Exception e) {\n        String errMessage \u003d \"Cannot find application with given appId\";\n        return new AppActivitiesInfo(errMessage, appId);\n      }\n\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}