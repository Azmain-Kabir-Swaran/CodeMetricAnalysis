{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpRequestLog.java",
  "functionName": "getRequestLog",
  "functionId": "getRequestLog___name-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpRequestLog.java",
  "functionStartLine": 49,
  "functionEndLine": 102,
  "numCommitsSeen": 5,
  "timeTaken": 1592,
  "changeHistory": [
    "3d41f330186f6481850b46e0c345d3ecf7b1b818",
    "e855cc4ed467d03f4f03e8b3a1ff27654b349a52",
    "6016d7d4da2a414390294b5539a2c8f2a437b340",
    "6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6"
  ],
  "changeHistoryShort": {
    "3d41f330186f6481850b46e0c345d3ecf7b1b818": "Ybodychange",
    "e855cc4ed467d03f4f03e8b3a1ff27654b349a52": "Ybodychange",
    "6016d7d4da2a414390294b5539a2c8f2a437b340": "Ybodychange",
    "6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3d41f330186f6481850b46e0c345d3ecf7b1b818": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16152. Upgrade Eclipse Jetty version to 9.4.x. Contributed by Yuming Wang, Siyao Meng.\n\nCo-authored-By: Siyao Meng \u003csmeng@cloudera.com\u003e\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "18/10/19 8:25 AM",
      "commitName": "3d41f330186f6481850b46e0c345d3ecf7b1b818",
      "commitAuthor": "Yuming Wang",
      "commitDateOld": "15/06/17 9:17 PM",
      "commitNameOld": "e855cc4ed467d03f4f03e8b3a1ff27654b349a52",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 854.46,
      "commitsBetweenForRepo": 7018,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   public static RequestLog getRequestLog(String name) {\n \n     String lookup \u003d serverToComponent.get(name);\n     if (lookup !\u003d null) {\n       name \u003d lookup;\n     }\n     String loggerName \u003d \"http.requests.\" + name;\n     String appenderName \u003d name + \"requestlog\";\n     Log logger \u003d LogFactory.getLog(loggerName);\n \n     boolean isLog4JLogger;;\n     try {\n       isLog4JLogger \u003d logger instanceof Log4JLogger;\n     } catch (NoClassDefFoundError err) {\n       // In some dependent projects, log4j may not even be on the classpath at\n       // runtime, in which case the above instanceof check will throw\n       // NoClassDefFoundError.\n       LOG.debug(\"Could not load Log4JLogger class\", err);\n       isLog4JLogger \u003d false;\n     }\n     if (isLog4JLogger) {\n       Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n       org.apache.log4j.Logger httpLogger \u003d httpLog4JLog.getLogger();\n       Appender appender \u003d null;\n \n       try {\n         appender \u003d httpLogger.getAppender(appenderName);\n       } catch (LogConfigurationException e) {\n         LOG.warn(\"Http request log for {} could not be created\", loggerName);\n         throw e;\n       }\n \n       if (appender \u003d\u003d null) {\n         LOG.info(\"Http request log for {} is not defined\", loggerName);\n         return null;\n       }\n \n       if (appender instanceof HttpRequestLogAppender) {\n         HttpRequestLogAppender requestLogAppender\n           \u003d (HttpRequestLogAppender)appender;\n-        NCSARequestLog requestLog \u003d new NCSARequestLog();\n-        requestLog.setFilename(requestLogAppender.getFilename());\n-        requestLog.setRetainDays(requestLogAppender.getRetainDays());\n-        return requestLog;\n+        AsyncRequestLogWriter logWriter \u003d new AsyncRequestLogWriter();\n+        logWriter.setFilename(requestLogAppender.getFilename());\n+        logWriter.setRetainDays(requestLogAppender.getRetainDays());\n+        return new CustomRequestLog(logWriter,\n+            CustomRequestLog.EXTENDED_NCSA_FORMAT);\n       } else {\n         LOG.warn(\"Jetty request log for {} was of the wrong class\", loggerName);\n         return null;\n       }\n     } else {\n       LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RequestLog getRequestLog(String name) {\n\n    String lookup \u003d serverToComponent.get(name);\n    if (lookup !\u003d null) {\n      name \u003d lookup;\n    }\n    String loggerName \u003d \"http.requests.\" + name;\n    String appenderName \u003d name + \"requestlog\";\n    Log logger \u003d LogFactory.getLog(loggerName);\n\n    boolean isLog4JLogger;;\n    try {\n      isLog4JLogger \u003d logger instanceof Log4JLogger;\n    } catch (NoClassDefFoundError err) {\n      // In some dependent projects, log4j may not even be on the classpath at\n      // runtime, in which case the above instanceof check will throw\n      // NoClassDefFoundError.\n      LOG.debug(\"Could not load Log4JLogger class\", err);\n      isLog4JLogger \u003d false;\n    }\n    if (isLog4JLogger) {\n      Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n      org.apache.log4j.Logger httpLogger \u003d httpLog4JLog.getLogger();\n      Appender appender \u003d null;\n\n      try {\n        appender \u003d httpLogger.getAppender(appenderName);\n      } catch (LogConfigurationException e) {\n        LOG.warn(\"Http request log for {} could not be created\", loggerName);\n        throw e;\n      }\n\n      if (appender \u003d\u003d null) {\n        LOG.info(\"Http request log for {} is not defined\", loggerName);\n        return null;\n      }\n\n      if (appender instanceof HttpRequestLogAppender) {\n        HttpRequestLogAppender requestLogAppender\n          \u003d (HttpRequestLogAppender)appender;\n        AsyncRequestLogWriter logWriter \u003d new AsyncRequestLogWriter();\n        logWriter.setFilename(requestLogAppender.getFilename());\n        logWriter.setRetainDays(requestLogAppender.getRetainDays());\n        return new CustomRequestLog(logWriter,\n            CustomRequestLog.EXTENDED_NCSA_FORMAT);\n      } else {\n        LOG.warn(\"Jetty request log for {} was of the wrong class\", loggerName);\n        return null;\n      }\n    } else {\n      LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n      return null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpRequestLog.java",
      "extendedDetails": {}
    },
    "e855cc4ed467d03f4f03e8b3a1ff27654b349a52": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14289. Move log4j APIs over to slf4j in hadoop-common.\n",
      "commitDate": "15/06/17 9:17 PM",
      "commitName": "e855cc4ed467d03f4f03e8b3a1ff27654b349a52",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "27/10/16 4:09 PM",
      "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 231.21,
      "commitsBetweenForRepo": 1298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,53 @@\n   public static RequestLog getRequestLog(String name) {\n \n     String lookup \u003d serverToComponent.get(name);\n     if (lookup !\u003d null) {\n       name \u003d lookup;\n     }\n     String loggerName \u003d \"http.requests.\" + name;\n     String appenderName \u003d name + \"requestlog\";\n     Log logger \u003d LogFactory.getLog(loggerName);\n \n     boolean isLog4JLogger;;\n     try {\n       isLog4JLogger \u003d logger instanceof Log4JLogger;\n     } catch (NoClassDefFoundError err) {\n       // In some dependent projects, log4j may not even be on the classpath at\n       // runtime, in which case the above instanceof check will throw\n       // NoClassDefFoundError.\n       LOG.debug(\"Could not load Log4JLogger class\", err);\n       isLog4JLogger \u003d false;\n     }\n     if (isLog4JLogger) {\n       Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n-      Logger httpLogger \u003d httpLog4JLog.getLogger();\n+      org.apache.log4j.Logger httpLogger \u003d httpLog4JLog.getLogger();\n       Appender appender \u003d null;\n \n       try {\n         appender \u003d httpLogger.getAppender(appenderName);\n       } catch (LogConfigurationException e) {\n-        LOG.warn(\"Http request log for \" + loggerName\n-            + \" could not be created\");\n+        LOG.warn(\"Http request log for {} could not be created\", loggerName);\n         throw e;\n       }\n \n       if (appender \u003d\u003d null) {\n-        LOG.info(\"Http request log for \" + loggerName\n-            + \" is not defined\");\n+        LOG.info(\"Http request log for {} is not defined\", loggerName);\n         return null;\n       }\n \n       if (appender instanceof HttpRequestLogAppender) {\n         HttpRequestLogAppender requestLogAppender\n           \u003d (HttpRequestLogAppender)appender;\n         NCSARequestLog requestLog \u003d new NCSARequestLog();\n         requestLog.setFilename(requestLogAppender.getFilename());\n         requestLog.setRetainDays(requestLogAppender.getRetainDays());\n         return requestLog;\n-      }\n-      else {\n-        LOG.warn(\"Jetty request log for \" + loggerName\n-            + \" was of the wrong class\");\n+      } else {\n+        LOG.warn(\"Jetty request log for {} was of the wrong class\", loggerName);\n         return null;\n       }\n-    }\n-    else {\n+    } else {\n       LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RequestLog getRequestLog(String name) {\n\n    String lookup \u003d serverToComponent.get(name);\n    if (lookup !\u003d null) {\n      name \u003d lookup;\n    }\n    String loggerName \u003d \"http.requests.\" + name;\n    String appenderName \u003d name + \"requestlog\";\n    Log logger \u003d LogFactory.getLog(loggerName);\n\n    boolean isLog4JLogger;;\n    try {\n      isLog4JLogger \u003d logger instanceof Log4JLogger;\n    } catch (NoClassDefFoundError err) {\n      // In some dependent projects, log4j may not even be on the classpath at\n      // runtime, in which case the above instanceof check will throw\n      // NoClassDefFoundError.\n      LOG.debug(\"Could not load Log4JLogger class\", err);\n      isLog4JLogger \u003d false;\n    }\n    if (isLog4JLogger) {\n      Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n      org.apache.log4j.Logger httpLogger \u003d httpLog4JLog.getLogger();\n      Appender appender \u003d null;\n\n      try {\n        appender \u003d httpLogger.getAppender(appenderName);\n      } catch (LogConfigurationException e) {\n        LOG.warn(\"Http request log for {} could not be created\", loggerName);\n        throw e;\n      }\n\n      if (appender \u003d\u003d null) {\n        LOG.info(\"Http request log for {} is not defined\", loggerName);\n        return null;\n      }\n\n      if (appender instanceof HttpRequestLogAppender) {\n        HttpRequestLogAppender requestLogAppender\n          \u003d (HttpRequestLogAppender)appender;\n        NCSARequestLog requestLog \u003d new NCSARequestLog();\n        requestLog.setFilename(requestLogAppender.getFilename());\n        requestLog.setRetainDays(requestLogAppender.getRetainDays());\n        return requestLog;\n      } else {\n        LOG.warn(\"Jetty request log for {} was of the wrong class\", loggerName);\n        return null;\n      }\n    } else {\n      LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n      return null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpRequestLog.java",
      "extendedDetails": {}
    },
    "6016d7d4da2a414390294b5539a2c8f2a437b340": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10288. Explicit reference to Log4JLogger breaks non-log4j users. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561882 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 2:15 PM",
      "commitName": "6016d7d4da2a414390294b5539a2c8f2a437b340",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "06/09/13 12:40 PM",
      "commitNameOld": "6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 143.11,
      "commitsBetweenForRepo": 852,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,58 @@\n   public static RequestLog getRequestLog(String name) {\n \n     String lookup \u003d serverToComponent.get(name);\n     if (lookup !\u003d null) {\n       name \u003d lookup;\n     }\n     String loggerName \u003d \"http.requests.\" + name;\n     String appenderName \u003d name + \"requestlog\";\n     Log logger \u003d LogFactory.getLog(loggerName);\n \n-    if (logger instanceof Log4JLogger) {\n+    boolean isLog4JLogger;;\n+    try {\n+      isLog4JLogger \u003d logger instanceof Log4JLogger;\n+    } catch (NoClassDefFoundError err) {\n+      // In some dependent projects, log4j may not even be on the classpath at\n+      // runtime, in which case the above instanceof check will throw\n+      // NoClassDefFoundError.\n+      LOG.debug(\"Could not load Log4JLogger class\", err);\n+      isLog4JLogger \u003d false;\n+    }\n+    if (isLog4JLogger) {\n       Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n       Logger httpLogger \u003d httpLog4JLog.getLogger();\n       Appender appender \u003d null;\n \n       try {\n         appender \u003d httpLogger.getAppender(appenderName);\n       } catch (LogConfigurationException e) {\n         LOG.warn(\"Http request log for \" + loggerName\n             + \" could not be created\");\n         throw e;\n       }\n \n       if (appender \u003d\u003d null) {\n         LOG.info(\"Http request log for \" + loggerName\n             + \" is not defined\");\n         return null;\n       }\n \n       if (appender instanceof HttpRequestLogAppender) {\n         HttpRequestLogAppender requestLogAppender\n           \u003d (HttpRequestLogAppender)appender;\n         NCSARequestLog requestLog \u003d new NCSARequestLog();\n         requestLog.setFilename(requestLogAppender.getFilename());\n         requestLog.setRetainDays(requestLogAppender.getRetainDays());\n         return requestLog;\n       }\n       else {\n         LOG.warn(\"Jetty request log for \" + loggerName\n             + \" was of the wrong class\");\n         return null;\n       }\n     }\n     else {\n       LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RequestLog getRequestLog(String name) {\n\n    String lookup \u003d serverToComponent.get(name);\n    if (lookup !\u003d null) {\n      name \u003d lookup;\n    }\n    String loggerName \u003d \"http.requests.\" + name;\n    String appenderName \u003d name + \"requestlog\";\n    Log logger \u003d LogFactory.getLog(loggerName);\n\n    boolean isLog4JLogger;;\n    try {\n      isLog4JLogger \u003d logger instanceof Log4JLogger;\n    } catch (NoClassDefFoundError err) {\n      // In some dependent projects, log4j may not even be on the classpath at\n      // runtime, in which case the above instanceof check will throw\n      // NoClassDefFoundError.\n      LOG.debug(\"Could not load Log4JLogger class\", err);\n      isLog4JLogger \u003d false;\n    }\n    if (isLog4JLogger) {\n      Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n      Logger httpLogger \u003d httpLog4JLog.getLogger();\n      Appender appender \u003d null;\n\n      try {\n        appender \u003d httpLogger.getAppender(appenderName);\n      } catch (LogConfigurationException e) {\n        LOG.warn(\"Http request log for \" + loggerName\n            + \" could not be created\");\n        throw e;\n      }\n\n      if (appender \u003d\u003d null) {\n        LOG.info(\"Http request log for \" + loggerName\n            + \" is not defined\");\n        return null;\n      }\n\n      if (appender instanceof HttpRequestLogAppender) {\n        HttpRequestLogAppender requestLogAppender\n          \u003d (HttpRequestLogAppender)appender;\n        NCSARequestLog requestLog \u003d new NCSARequestLog();\n        requestLog.setFilename(requestLogAppender.getFilename());\n        requestLog.setRetainDays(requestLogAppender.getRetainDays());\n        return requestLog;\n      }\n      else {\n        LOG.warn(\"Jetty request log for \" + loggerName\n            + \" was of the wrong class\");\n        return null;\n      }\n    }\n    else {\n      LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n      return null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpRequestLog.java",
      "extendedDetails": {}
    },
    "6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8704. add request logging to jetty/httpserver (jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1520674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 12:40 PM",
      "commitName": "6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6",
      "commitAuthor": "Jonathan Turner Eagles",
      "diff": "@@ -0,0 +1,48 @@\n+  public static RequestLog getRequestLog(String name) {\n+\n+    String lookup \u003d serverToComponent.get(name);\n+    if (lookup !\u003d null) {\n+      name \u003d lookup;\n+    }\n+    String loggerName \u003d \"http.requests.\" + name;\n+    String appenderName \u003d name + \"requestlog\";\n+    Log logger \u003d LogFactory.getLog(loggerName);\n+\n+    if (logger instanceof Log4JLogger) {\n+      Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n+      Logger httpLogger \u003d httpLog4JLog.getLogger();\n+      Appender appender \u003d null;\n+\n+      try {\n+        appender \u003d httpLogger.getAppender(appenderName);\n+      } catch (LogConfigurationException e) {\n+        LOG.warn(\"Http request log for \" + loggerName\n+            + \" could not be created\");\n+        throw e;\n+      }\n+\n+      if (appender \u003d\u003d null) {\n+        LOG.info(\"Http request log for \" + loggerName\n+            + \" is not defined\");\n+        return null;\n+      }\n+\n+      if (appender instanceof HttpRequestLogAppender) {\n+        HttpRequestLogAppender requestLogAppender\n+          \u003d (HttpRequestLogAppender)appender;\n+        NCSARequestLog requestLog \u003d new NCSARequestLog();\n+        requestLog.setFilename(requestLogAppender.getFilename());\n+        requestLog.setRetainDays(requestLogAppender.getRetainDays());\n+        return requestLog;\n+      }\n+      else {\n+        LOG.warn(\"Jetty request log for \" + loggerName\n+            + \" was of the wrong class\");\n+        return null;\n+      }\n+    }\n+    else {\n+      LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static RequestLog getRequestLog(String name) {\n\n    String lookup \u003d serverToComponent.get(name);\n    if (lookup !\u003d null) {\n      name \u003d lookup;\n    }\n    String loggerName \u003d \"http.requests.\" + name;\n    String appenderName \u003d name + \"requestlog\";\n    Log logger \u003d LogFactory.getLog(loggerName);\n\n    if (logger instanceof Log4JLogger) {\n      Log4JLogger httpLog4JLog \u003d (Log4JLogger)logger;\n      Logger httpLogger \u003d httpLog4JLog.getLogger();\n      Appender appender \u003d null;\n\n      try {\n        appender \u003d httpLogger.getAppender(appenderName);\n      } catch (LogConfigurationException e) {\n        LOG.warn(\"Http request log for \" + loggerName\n            + \" could not be created\");\n        throw e;\n      }\n\n      if (appender \u003d\u003d null) {\n        LOG.info(\"Http request log for \" + loggerName\n            + \" is not defined\");\n        return null;\n      }\n\n      if (appender instanceof HttpRequestLogAppender) {\n        HttpRequestLogAppender requestLogAppender\n          \u003d (HttpRequestLogAppender)appender;\n        NCSARequestLog requestLog \u003d new NCSARequestLog();\n        requestLog.setFilename(requestLogAppender.getFilename());\n        requestLog.setRetainDays(requestLogAppender.getRetainDays());\n        return requestLog;\n      }\n      else {\n        LOG.warn(\"Jetty request log for \" + loggerName\n            + \" was of the wrong class\");\n        return null;\n      }\n    }\n    else {\n      LOG.warn(\"Jetty request log can only be enabled using Log4j\");\n      return null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpRequestLog.java"
    }
  }
}