{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalSet.java",
  "functionName": "mapJournalsAndReportErrors",
  "functionId": "mapJournalsAndReportErrors___closure-JournalClosure__status-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
  "functionStartLine": 385,
  "functionEndLine": 420,
  "numCommitsSeen": 44,
  "timeTaken": 3745,
  "changeHistory": [
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
    "467059b4ab5fcb8251b57c60ec3ddfce30c486c2",
    "11df1c256171564b0578477c226723358be812c4",
    "a27adf3de4ea88a80401fc7157c5e39747230c2a",
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9": "Ybodychange",
    "467059b4ab5fcb8251b57c60ec3ddfce30c486c2": "Ybodychange",
    "11df1c256171564b0578477c226723358be812c4": "Ybodychange",
    "a27adf3de4ea88a80401fc7157c5e39747230c2a": "Ybodychange",
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "23/08/18 7:44 PM",
      "commitNameOld": "96c4575d7373079becfa3e3db29ba98e6fb86388",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 13.79,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void mapJournalsAndReportErrors(\n       JournalClosure closure, String status) throws IOException{\n \n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n         if (jas.isRequired()) {\n           final String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n             + jas + \")\";\n-          LOG.fatal(msg, t);\n+          LOG.error(msg, t);\n           // If we fail on *any* of the required journals, then we must not\n           // continue on any of the other journals. Abort them to ensure that\n           // retry behavior doesn\u0027t allow them to keep going in any way.\n           abortAllJournals();\n           // the current policy is to shutdown the NN on errors to shared edits\n           // dir. There are many code paths to shared edits failures - syncs,\n           // roll of edits etc. All of them go through this common function \n           // where the isRequired() check is made. Applying exit policy here \n           // to catch all code paths.\n           terminate(1, msg);\n         } else {\n           LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n           badJAS.add(jas);          \n         }\n       }\n     }\n     disableAndReportErrorOnJournals(badJAS);\n     if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n         minimumRedundantJournals)) {\n       String message \u003d status + \" failed for too many journals\";\n       LOG.error(\"Error: \" + message);\n       throw new IOException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        if (jas.isRequired()) {\n          final String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n            + jas + \")\";\n          LOG.error(msg, t);\n          // If we fail on *any* of the required journals, then we must not\n          // continue on any of the other journals. Abort them to ensure that\n          // retry behavior doesn\u0027t allow them to keep going in any way.\n          abortAllJournals();\n          // the current policy is to shutdown the NN on errors to shared edits\n          // dir. There are many code paths to shared edits failures - syncs,\n          // roll of edits etc. All of them go through this common function \n          // where the isRequired() check is made. Applying exit policy here \n          // to catch all code paths.\n          terminate(1, msg);\n        } else {\n          LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n          badJAS.add(jas);          \n        }\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n        minimumRedundantJournals)) {\n      String message \u003d status + \" failed for too many journals\";\n      LOG.error(\"Error: \" + message);\n      throw new IOException(message);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3582. Hook daemon process exit for testing. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 10:58 AM",
      "commitName": "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "11/06/12 9:15 PM",
      "commitNameOld": "9947d8054c035c93c775908a37489efc1ed36dbd",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 29.57,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n   private void mapJournalsAndReportErrors(\n       JournalClosure closure, String status) throws IOException{\n \n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n         if (jas.isRequired()) {\n-          String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n+          final String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n             + jas + \")\";\n           LOG.fatal(msg, t);\n           // If we fail on *any* of the required journals, then we must not\n           // continue on any of the other journals. Abort them to ensure that\n           // retry behavior doesn\u0027t allow them to keep going in any way.\n           abortAllJournals();\n           // the current policy is to shutdown the NN on errors to shared edits\n           // dir. There are many code paths to shared edits failures - syncs,\n           // roll of edits etc. All of them go through this common function \n           // where the isRequired() check is made. Applying exit policy here \n           // to catch all code paths.\n-          runtime.exit(1);\n-          throw new IOException(msg);\n+          terminate(1, msg);\n         } else {\n           LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n           badJAS.add(jas);          \n         }\n       }\n     }\n     disableAndReportErrorOnJournals(badJAS);\n     if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n         minimumRedundantJournals)) {\n       String message \u003d status + \" failed for too many journals\";\n       LOG.error(\"Error: \" + message);\n       throw new IOException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        if (jas.isRequired()) {\n          final String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n            + jas + \")\";\n          LOG.fatal(msg, t);\n          // If we fail on *any* of the required journals, then we must not\n          // continue on any of the other journals. Abort them to ensure that\n          // retry behavior doesn\u0027t allow them to keep going in any way.\n          abortAllJournals();\n          // the current policy is to shutdown the NN on errors to shared edits\n          // dir. There are many code paths to shared edits failures - syncs,\n          // roll of edits etc. All of them go through this common function \n          // where the isRequired() check is made. Applying exit policy here \n          // to catch all code paths.\n          terminate(1, msg);\n        } else {\n          LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n          badJAS.add(jas);          \n        }\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n        minimumRedundantJournals)) {\n      String message \u003d status + \" failed for too many journals\";\n      LOG.error(\"Error: \" + message);\n      throw new IOException(message);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "467059b4ab5fcb8251b57c60ec3ddfce30c486c2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2912. Namenode not shutting down when shared edits dir is inaccessible. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242564 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/12 2:23 PM",
      "commitName": "467059b4ab5fcb8251b57c60ec3ddfce30c486c2",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "03/02/12 6:52 PM",
      "commitNameOld": "11df1c256171564b0578477c226723358be812c4",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.81,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,37 @@\n   private void mapJournalsAndReportErrors(\n       JournalClosure closure, String status) throws IOException{\n \n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n         if (jas.isRequired()) {\n           String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n             + jas + \")\";\n           LOG.fatal(msg, t);\n           // If we fail on *any* of the required journals, then we must not\n           // continue on any of the other journals. Abort them to ensure that\n           // retry behavior doesn\u0027t allow them to keep going in any way.\n           abortAllJournals();\n+          // the current policy is to shutdown the NN on errors to shared edits\n+          // dir. There are many code paths to shared edits failures - syncs,\n+          // roll of edits etc. All of them go through this common function \n+          // where the isRequired() check is made. Applying exit policy here \n+          // to catch all code paths.\n+          runtime.exit(1);\n           throw new IOException(msg);\n         } else {\n           LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n           badJAS.add(jas);          \n         }\n       }\n     }\n     disableAndReportErrorOnJournals(badJAS);\n     if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n         minimumRedundantJournals)) {\n       String message \u003d status + \" failed for too many journals\";\n       LOG.error(\"Error: \" + message);\n       throw new IOException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        if (jas.isRequired()) {\n          String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n            + jas + \")\";\n          LOG.fatal(msg, t);\n          // If we fail on *any* of the required journals, then we must not\n          // continue on any of the other journals. Abort them to ensure that\n          // retry behavior doesn\u0027t allow them to keep going in any way.\n          abortAllJournals();\n          // the current policy is to shutdown the NN on errors to shared edits\n          // dir. There are many code paths to shared edits failures - syncs,\n          // roll of edits etc. All of them go through this common function \n          // where the isRequired() check is made. Applying exit policy here \n          // to catch all code paths.\n          runtime.exit(1);\n          throw new IOException(msg);\n        } else {\n          LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n          badJAS.add(jas);          \n        }\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n        minimumRedundantJournals)) {\n      String message \u003d status + \" failed for too many journals\";\n      LOG.error(\"Error: \" + message);\n      throw new IOException(message);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "11df1c256171564b0578477c226723358be812c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2874. Edit log should log to shared dirs before local dirs. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 6:52 PM",
      "commitName": "11df1c256171564b0578477c226723358be812c4",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "12/01/12 10:40 AM",
      "commitNameOld": "8610a9231aec206ba0ad262b7198a23207492094",
      "commitAuthorOld": "",
      "daysBetweenCommits": 22.34,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,31 @@\n   private void mapJournalsAndReportErrors(\n       JournalClosure closure, String status) throws IOException{\n+\n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n-        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n-        badJAS.add(jas);\n+        if (jas.isRequired()) {\n+          String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n+            + jas + \")\";\n+          LOG.fatal(msg, t);\n+          // If we fail on *any* of the required journals, then we must not\n+          // continue on any of the other journals. Abort them to ensure that\n+          // retry behavior doesn\u0027t allow them to keep going in any way.\n+          abortAllJournals();\n+          throw new IOException(msg);\n+        } else {\n+          LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n+          badJAS.add(jas);          \n+        }\n       }\n     }\n     disableAndReportErrorOnJournals(badJAS);\n     if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n         minimumRedundantJournals)) {\n       String message \u003d status + \" failed for too many journals\";\n       LOG.error(\"Error: \" + message);\n       throw new IOException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        if (jas.isRequired()) {\n          String msg \u003d \"Error: \" + status + \" failed for required journal (\"\n            + jas + \")\";\n          LOG.fatal(msg, t);\n          // If we fail on *any* of the required journals, then we must not\n          // continue on any of the other journals. Abort them to ensure that\n          // retry behavior doesn\u0027t allow them to keep going in any way.\n          abortAllJournals();\n          throw new IOException(msg);\n        } else {\n          LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n          badJAS.add(jas);          \n        }\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n        minimumRedundantJournals)) {\n      String message \u003d status + \" failed for too many journals\";\n      LOG.error(\"Error: \" + message);\n      throw new IOException(message);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "a27adf3de4ea88a80401fc7157c5e39747230c2a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2430. The number of failed or low-resource volumes the NN can tolerate should be configurable. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1211650 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/11 1:47 PM",
      "commitName": "a27adf3de4ea88a80401fc7157c5e39747230c2a",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "05/12/11 12:10 PM",
      "commitNameOld": "d18e5b38447273b95d975c703df25fe5f679e006",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 2.07,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n   private void mapJournalsAndReportErrors(\n       JournalClosure closure, String status) throws IOException{\n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n         LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n         badJAS.add(jas);\n       }\n     }\n     disableAndReportErrorOnJournals(badJAS);\n-    if (badJAS.size() \u003e\u003d journals.size()) {\n-      LOG.error(\"Error: \"+status+\" failed for all journals\");\n-      throw new IOException(status+\" failed on all the journals\");\n+    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n+        minimumRedundantJournals)) {\n+      String message \u003d status + \" failed for too many journals\";\n+      LOG.error(\"Error: \" + message);\n+      throw new IOException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,\n        minimumRedundantJournals)) {\n      String message \u003d status + \" failed for too many journals\";\n      LOG.error(\"Error: \" + message);\n      throw new IOException(message);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-2158. Add JournalSet to manage the set of journals.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/11 6:14 PM",
      "commitName": "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
      "commitAuthor": "Jitendra Nath Pandey",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2158. Add JournalSet to manage the set of journals.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/09/11 6:14 PM",
          "commitName": "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "29/09/11 12:39 PM",
          "commitNameOld": "7d1897d78d12fe22b4c9a3387149d98c24c764a8",
          "commitAuthorOld": "Doug Cutting",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,17 @@\n   private void mapJournalsAndReportErrors(\n-      JournalClosure closure, String status) {\n+      JournalClosure closure, String status) throws IOException{\n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n-        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n+        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n         badJAS.add(jas);\n       }\n     }\n-\n     disableAndReportErrorOnJournals(badJAS);\n+    if (badJAS.size() \u003e\u003d journals.size()) {\n+      LOG.error(\"Error: \"+status+\" failed for all journals\");\n+      throw new IOException(status+\" failed on all the journals\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (badJAS.size() \u003e\u003d journals.size()) {\n      LOG.error(\"Error: \"+status+\" failed for all journals\");\n      throw new IOException(status+\" failed on all the journals\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
            "oldMethodName": "mapJournalsAndReportErrors",
            "newMethodName": "mapJournalsAndReportErrors"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-2158. Add JournalSet to manage the set of journals.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/09/11 6:14 PM",
          "commitName": "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "29/09/11 12:39 PM",
          "commitNameOld": "7d1897d78d12fe22b4c9a3387149d98c24c764a8",
          "commitAuthorOld": "Doug Cutting",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,17 @@\n   private void mapJournalsAndReportErrors(\n-      JournalClosure closure, String status) {\n+      JournalClosure closure, String status) throws IOException{\n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n-        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n+        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n         badJAS.add(jas);\n       }\n     }\n-\n     disableAndReportErrorOnJournals(badJAS);\n+    if (badJAS.size() \u003e\u003d journals.size()) {\n+      LOG.error(\"Error: \"+status+\" failed for all journals\");\n+      throw new IOException(status+\" failed on all the journals\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (badJAS.size() \u003e\u003d journals.size()) {\n      LOG.error(\"Error: \"+status+\" failed for all journals\");\n      throw new IOException(status+\" failed on all the journals\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2158. Add JournalSet to manage the set of journals.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/09/11 6:14 PM",
          "commitName": "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "29/09/11 12:39 PM",
          "commitNameOld": "7d1897d78d12fe22b4c9a3387149d98c24c764a8",
          "commitAuthorOld": "Doug Cutting",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,17 @@\n   private void mapJournalsAndReportErrors(\n-      JournalClosure closure, String status) {\n+      JournalClosure closure, String status) throws IOException{\n     List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n     for (JournalAndStream jas : journals) {\n       try {\n         closure.apply(jas);\n       } catch (Throwable t) {\n-        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n+        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n         badJAS.add(jas);\n       }\n     }\n-\n     disableAndReportErrorOnJournals(badJAS);\n+    if (badJAS.size() \u003e\u003d journals.size()) {\n+      LOG.error(\"Error: \"+status+\" failed for all journals\");\n+      throw new IOException(status+\" failed on all the journals\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) throws IOException{\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error: \" + status + \" failed for (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n    disableAndReportErrorOnJournals(badJAS);\n    if (badJAS.size() \u003e\u003d journals.size()) {\n      LOG.error(\"Error: \"+status+\" failed for all journals\");\n      throw new IOException(status+\" failed on all the journals\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) {\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n\n    disableAndReportErrorOnJournals(badJAS);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) {\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n\n    disableAndReportErrorOnJournals(badJAS);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,14 @@\n+  private void mapJournalsAndReportErrors(\n+      JournalClosure closure, String status) {\n+    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n+    for (JournalAndStream jas : journals) {\n+      try {\n+        closure.apply(jas);\n+      } catch (Throwable t) {\n+        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n+        badJAS.add(jas);\n+      }\n+    }\n+\n+    disableAndReportErrorOnJournals(badJAS);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void mapJournalsAndReportErrors(\n      JournalClosure closure, String status) {\n    List\u003cJournalAndStream\u003e badJAS \u003d Lists.newLinkedList();\n    for (JournalAndStream jas : journals) {\n      try {\n        closure.apply(jas);\n      } catch (Throwable t) {\n        LOG.error(\"Error \" + status + \" (journal \" + jas + \")\", t);\n        badJAS.add(jas);\n      }\n    }\n\n    disableAndReportErrorOnJournals(badJAS);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
    }
  }
}